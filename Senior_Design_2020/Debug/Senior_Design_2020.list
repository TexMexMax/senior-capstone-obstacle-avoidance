
Senior_Design_2020.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010e58  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000bf8  080110f8  080110f8  000210f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011cf0  08011cf0  000303b8  2**0
                  CONTENTS
  4 .ARM          00000008  08011cf0  08011cf0  00021cf0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011cf8  08011cf8  000303b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08011cf8  08011cf8  00021cf8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08011d00  08011d00  00021d00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000003b8  24000000  08011d04  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00066f98  240003b8  080120bc  000303b8  2**2
                  ALLOC
 10 ._user_heap_stack 00006000  24067350  080120bc  00037350  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000303b8  2**0
                  CONTENTS, READONLY
 12 .debug_info   000358ce  00000000  00000000  000303e6  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00005143  00000000  00000000  00065cb4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001780  00000000  00000000  0006adf8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000015b8  00000000  00000000  0006c578  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0003dca8  00000000  00000000  0006db30  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00019d07  00000000  00000000  000ab7d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00160aa7  00000000  00000000  000c54df  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00225f86  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006a90  00000000  00000000  00226004  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240003b8 	.word	0x240003b8
 80002bc:	00000000 	.word	0x00000000
 80002c0:	080110e0 	.word	0x080110e0

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240003bc 	.word	0x240003bc
 80002dc:	080110e0 	.word	0x080110e0

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b972 	b.w	800067c <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9e08      	ldr	r6, [sp, #32]
 80003b6:	4604      	mov	r4, r0
 80003b8:	4688      	mov	r8, r1
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d14b      	bne.n	8000456 <__udivmoddi4+0xa6>
 80003be:	428a      	cmp	r2, r1
 80003c0:	4615      	mov	r5, r2
 80003c2:	d967      	bls.n	8000494 <__udivmoddi4+0xe4>
 80003c4:	fab2 f282 	clz	r2, r2
 80003c8:	b14a      	cbz	r2, 80003de <__udivmoddi4+0x2e>
 80003ca:	f1c2 0720 	rsb	r7, r2, #32
 80003ce:	fa01 f302 	lsl.w	r3, r1, r2
 80003d2:	fa20 f707 	lsr.w	r7, r0, r7
 80003d6:	4095      	lsls	r5, r2
 80003d8:	ea47 0803 	orr.w	r8, r7, r3
 80003dc:	4094      	lsls	r4, r2
 80003de:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003e2:	0c23      	lsrs	r3, r4, #16
 80003e4:	fbb8 f7fe 	udiv	r7, r8, lr
 80003e8:	fa1f fc85 	uxth.w	ip, r5
 80003ec:	fb0e 8817 	mls	r8, lr, r7, r8
 80003f0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003f4:	fb07 f10c 	mul.w	r1, r7, ip
 80003f8:	4299      	cmp	r1, r3
 80003fa:	d909      	bls.n	8000410 <__udivmoddi4+0x60>
 80003fc:	18eb      	adds	r3, r5, r3
 80003fe:	f107 30ff 	add.w	r0, r7, #4294967295
 8000402:	f080 811b 	bcs.w	800063c <__udivmoddi4+0x28c>
 8000406:	4299      	cmp	r1, r3
 8000408:	f240 8118 	bls.w	800063c <__udivmoddi4+0x28c>
 800040c:	3f02      	subs	r7, #2
 800040e:	442b      	add	r3, r5
 8000410:	1a5b      	subs	r3, r3, r1
 8000412:	b2a4      	uxth	r4, r4
 8000414:	fbb3 f0fe 	udiv	r0, r3, lr
 8000418:	fb0e 3310 	mls	r3, lr, r0, r3
 800041c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000420:	fb00 fc0c 	mul.w	ip, r0, ip
 8000424:	45a4      	cmp	ip, r4
 8000426:	d909      	bls.n	800043c <__udivmoddi4+0x8c>
 8000428:	192c      	adds	r4, r5, r4
 800042a:	f100 33ff 	add.w	r3, r0, #4294967295
 800042e:	f080 8107 	bcs.w	8000640 <__udivmoddi4+0x290>
 8000432:	45a4      	cmp	ip, r4
 8000434:	f240 8104 	bls.w	8000640 <__udivmoddi4+0x290>
 8000438:	3802      	subs	r0, #2
 800043a:	442c      	add	r4, r5
 800043c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000440:	eba4 040c 	sub.w	r4, r4, ip
 8000444:	2700      	movs	r7, #0
 8000446:	b11e      	cbz	r6, 8000450 <__udivmoddi4+0xa0>
 8000448:	40d4      	lsrs	r4, r2
 800044a:	2300      	movs	r3, #0
 800044c:	e9c6 4300 	strd	r4, r3, [r6]
 8000450:	4639      	mov	r1, r7
 8000452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000456:	428b      	cmp	r3, r1
 8000458:	d909      	bls.n	800046e <__udivmoddi4+0xbe>
 800045a:	2e00      	cmp	r6, #0
 800045c:	f000 80eb 	beq.w	8000636 <__udivmoddi4+0x286>
 8000460:	2700      	movs	r7, #0
 8000462:	e9c6 0100 	strd	r0, r1, [r6]
 8000466:	4638      	mov	r0, r7
 8000468:	4639      	mov	r1, r7
 800046a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046e:	fab3 f783 	clz	r7, r3
 8000472:	2f00      	cmp	r7, #0
 8000474:	d147      	bne.n	8000506 <__udivmoddi4+0x156>
 8000476:	428b      	cmp	r3, r1
 8000478:	d302      	bcc.n	8000480 <__udivmoddi4+0xd0>
 800047a:	4282      	cmp	r2, r0
 800047c:	f200 80fa 	bhi.w	8000674 <__udivmoddi4+0x2c4>
 8000480:	1a84      	subs	r4, r0, r2
 8000482:	eb61 0303 	sbc.w	r3, r1, r3
 8000486:	2001      	movs	r0, #1
 8000488:	4698      	mov	r8, r3
 800048a:	2e00      	cmp	r6, #0
 800048c:	d0e0      	beq.n	8000450 <__udivmoddi4+0xa0>
 800048e:	e9c6 4800 	strd	r4, r8, [r6]
 8000492:	e7dd      	b.n	8000450 <__udivmoddi4+0xa0>
 8000494:	b902      	cbnz	r2, 8000498 <__udivmoddi4+0xe8>
 8000496:	deff      	udf	#255	; 0xff
 8000498:	fab2 f282 	clz	r2, r2
 800049c:	2a00      	cmp	r2, #0
 800049e:	f040 808f 	bne.w	80005c0 <__udivmoddi4+0x210>
 80004a2:	1b49      	subs	r1, r1, r5
 80004a4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004a8:	fa1f f885 	uxth.w	r8, r5
 80004ac:	2701      	movs	r7, #1
 80004ae:	fbb1 fcfe 	udiv	ip, r1, lr
 80004b2:	0c23      	lsrs	r3, r4, #16
 80004b4:	fb0e 111c 	mls	r1, lr, ip, r1
 80004b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004bc:	fb08 f10c 	mul.w	r1, r8, ip
 80004c0:	4299      	cmp	r1, r3
 80004c2:	d907      	bls.n	80004d4 <__udivmoddi4+0x124>
 80004c4:	18eb      	adds	r3, r5, r3
 80004c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80004ca:	d202      	bcs.n	80004d2 <__udivmoddi4+0x122>
 80004cc:	4299      	cmp	r1, r3
 80004ce:	f200 80cd 	bhi.w	800066c <__udivmoddi4+0x2bc>
 80004d2:	4684      	mov	ip, r0
 80004d4:	1a59      	subs	r1, r3, r1
 80004d6:	b2a3      	uxth	r3, r4
 80004d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004dc:	fb0e 1410 	mls	r4, lr, r0, r1
 80004e0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80004e4:	fb08 f800 	mul.w	r8, r8, r0
 80004e8:	45a0      	cmp	r8, r4
 80004ea:	d907      	bls.n	80004fc <__udivmoddi4+0x14c>
 80004ec:	192c      	adds	r4, r5, r4
 80004ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80004f2:	d202      	bcs.n	80004fa <__udivmoddi4+0x14a>
 80004f4:	45a0      	cmp	r8, r4
 80004f6:	f200 80b6 	bhi.w	8000666 <__udivmoddi4+0x2b6>
 80004fa:	4618      	mov	r0, r3
 80004fc:	eba4 0408 	sub.w	r4, r4, r8
 8000500:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000504:	e79f      	b.n	8000446 <__udivmoddi4+0x96>
 8000506:	f1c7 0c20 	rsb	ip, r7, #32
 800050a:	40bb      	lsls	r3, r7
 800050c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000510:	ea4e 0e03 	orr.w	lr, lr, r3
 8000514:	fa01 f407 	lsl.w	r4, r1, r7
 8000518:	fa20 f50c 	lsr.w	r5, r0, ip
 800051c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000520:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000524:	4325      	orrs	r5, r4
 8000526:	fbb3 f9f8 	udiv	r9, r3, r8
 800052a:	0c2c      	lsrs	r4, r5, #16
 800052c:	fb08 3319 	mls	r3, r8, r9, r3
 8000530:	fa1f fa8e 	uxth.w	sl, lr
 8000534:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000538:	fb09 f40a 	mul.w	r4, r9, sl
 800053c:	429c      	cmp	r4, r3
 800053e:	fa02 f207 	lsl.w	r2, r2, r7
 8000542:	fa00 f107 	lsl.w	r1, r0, r7
 8000546:	d90b      	bls.n	8000560 <__udivmoddi4+0x1b0>
 8000548:	eb1e 0303 	adds.w	r3, lr, r3
 800054c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000550:	f080 8087 	bcs.w	8000662 <__udivmoddi4+0x2b2>
 8000554:	429c      	cmp	r4, r3
 8000556:	f240 8084 	bls.w	8000662 <__udivmoddi4+0x2b2>
 800055a:	f1a9 0902 	sub.w	r9, r9, #2
 800055e:	4473      	add	r3, lr
 8000560:	1b1b      	subs	r3, r3, r4
 8000562:	b2ad      	uxth	r5, r5
 8000564:	fbb3 f0f8 	udiv	r0, r3, r8
 8000568:	fb08 3310 	mls	r3, r8, r0, r3
 800056c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000570:	fb00 fa0a 	mul.w	sl, r0, sl
 8000574:	45a2      	cmp	sl, r4
 8000576:	d908      	bls.n	800058a <__udivmoddi4+0x1da>
 8000578:	eb1e 0404 	adds.w	r4, lr, r4
 800057c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000580:	d26b      	bcs.n	800065a <__udivmoddi4+0x2aa>
 8000582:	45a2      	cmp	sl, r4
 8000584:	d969      	bls.n	800065a <__udivmoddi4+0x2aa>
 8000586:	3802      	subs	r0, #2
 8000588:	4474      	add	r4, lr
 800058a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800058e:	fba0 8902 	umull	r8, r9, r0, r2
 8000592:	eba4 040a 	sub.w	r4, r4, sl
 8000596:	454c      	cmp	r4, r9
 8000598:	46c2      	mov	sl, r8
 800059a:	464b      	mov	r3, r9
 800059c:	d354      	bcc.n	8000648 <__udivmoddi4+0x298>
 800059e:	d051      	beq.n	8000644 <__udivmoddi4+0x294>
 80005a0:	2e00      	cmp	r6, #0
 80005a2:	d069      	beq.n	8000678 <__udivmoddi4+0x2c8>
 80005a4:	ebb1 050a 	subs.w	r5, r1, sl
 80005a8:	eb64 0403 	sbc.w	r4, r4, r3
 80005ac:	fa04 fc0c 	lsl.w	ip, r4, ip
 80005b0:	40fd      	lsrs	r5, r7
 80005b2:	40fc      	lsrs	r4, r7
 80005b4:	ea4c 0505 	orr.w	r5, ip, r5
 80005b8:	e9c6 5400 	strd	r5, r4, [r6]
 80005bc:	2700      	movs	r7, #0
 80005be:	e747      	b.n	8000450 <__udivmoddi4+0xa0>
 80005c0:	f1c2 0320 	rsb	r3, r2, #32
 80005c4:	fa20 f703 	lsr.w	r7, r0, r3
 80005c8:	4095      	lsls	r5, r2
 80005ca:	fa01 f002 	lsl.w	r0, r1, r2
 80005ce:	fa21 f303 	lsr.w	r3, r1, r3
 80005d2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80005d6:	4338      	orrs	r0, r7
 80005d8:	0c01      	lsrs	r1, r0, #16
 80005da:	fbb3 f7fe 	udiv	r7, r3, lr
 80005de:	fa1f f885 	uxth.w	r8, r5
 80005e2:	fb0e 3317 	mls	r3, lr, r7, r3
 80005e6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005ea:	fb07 f308 	mul.w	r3, r7, r8
 80005ee:	428b      	cmp	r3, r1
 80005f0:	fa04 f402 	lsl.w	r4, r4, r2
 80005f4:	d907      	bls.n	8000606 <__udivmoddi4+0x256>
 80005f6:	1869      	adds	r1, r5, r1
 80005f8:	f107 3cff 	add.w	ip, r7, #4294967295
 80005fc:	d22f      	bcs.n	800065e <__udivmoddi4+0x2ae>
 80005fe:	428b      	cmp	r3, r1
 8000600:	d92d      	bls.n	800065e <__udivmoddi4+0x2ae>
 8000602:	3f02      	subs	r7, #2
 8000604:	4429      	add	r1, r5
 8000606:	1acb      	subs	r3, r1, r3
 8000608:	b281      	uxth	r1, r0
 800060a:	fbb3 f0fe 	udiv	r0, r3, lr
 800060e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000612:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000616:	fb00 f308 	mul.w	r3, r0, r8
 800061a:	428b      	cmp	r3, r1
 800061c:	d907      	bls.n	800062e <__udivmoddi4+0x27e>
 800061e:	1869      	adds	r1, r5, r1
 8000620:	f100 3cff 	add.w	ip, r0, #4294967295
 8000624:	d217      	bcs.n	8000656 <__udivmoddi4+0x2a6>
 8000626:	428b      	cmp	r3, r1
 8000628:	d915      	bls.n	8000656 <__udivmoddi4+0x2a6>
 800062a:	3802      	subs	r0, #2
 800062c:	4429      	add	r1, r5
 800062e:	1ac9      	subs	r1, r1, r3
 8000630:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000634:	e73b      	b.n	80004ae <__udivmoddi4+0xfe>
 8000636:	4637      	mov	r7, r6
 8000638:	4630      	mov	r0, r6
 800063a:	e709      	b.n	8000450 <__udivmoddi4+0xa0>
 800063c:	4607      	mov	r7, r0
 800063e:	e6e7      	b.n	8000410 <__udivmoddi4+0x60>
 8000640:	4618      	mov	r0, r3
 8000642:	e6fb      	b.n	800043c <__udivmoddi4+0x8c>
 8000644:	4541      	cmp	r1, r8
 8000646:	d2ab      	bcs.n	80005a0 <__udivmoddi4+0x1f0>
 8000648:	ebb8 0a02 	subs.w	sl, r8, r2
 800064c:	eb69 020e 	sbc.w	r2, r9, lr
 8000650:	3801      	subs	r0, #1
 8000652:	4613      	mov	r3, r2
 8000654:	e7a4      	b.n	80005a0 <__udivmoddi4+0x1f0>
 8000656:	4660      	mov	r0, ip
 8000658:	e7e9      	b.n	800062e <__udivmoddi4+0x27e>
 800065a:	4618      	mov	r0, r3
 800065c:	e795      	b.n	800058a <__udivmoddi4+0x1da>
 800065e:	4667      	mov	r7, ip
 8000660:	e7d1      	b.n	8000606 <__udivmoddi4+0x256>
 8000662:	4681      	mov	r9, r0
 8000664:	e77c      	b.n	8000560 <__udivmoddi4+0x1b0>
 8000666:	3802      	subs	r0, #2
 8000668:	442c      	add	r4, r5
 800066a:	e747      	b.n	80004fc <__udivmoddi4+0x14c>
 800066c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000670:	442b      	add	r3, r5
 8000672:	e72f      	b.n	80004d4 <__udivmoddi4+0x124>
 8000674:	4638      	mov	r0, r7
 8000676:	e708      	b.n	800048a <__udivmoddi4+0xda>
 8000678:	4637      	mov	r7, r6
 800067a:	e6e9      	b.n	8000450 <__udivmoddi4+0xa0>

0800067c <__aeabi_idiv0>:
 800067c:	4770      	bx	lr
 800067e:	bf00      	nop

08000680 <Camera_Reset>:
uint8_t img_buf[67200];


// required set-up process for the camera to function, according to documentation
void Camera_Reset(UART_HandleTypeDef* huart, uint8_t* rec, uint8_t len_rec)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b088      	sub	sp, #32
 8000684:	af02      	add	r7, sp, #8
 8000686:	60f8      	str	r0, [r7, #12]
 8000688:	60b9      	str	r1, [r7, #8]
 800068a:	4613      	mov	r3, r2
 800068c:	71fb      	strb	r3, [r7, #7]
	printf("Size of receiving buffer: %d\n", len_rec);
 800068e:	79fb      	ldrb	r3, [r7, #7]
 8000690:	4619      	mov	r1, r3
 8000692:	4816      	ldr	r0, [pc, #88]	; (80006ec <Camera_Reset+0x6c>)
 8000694:	f00f fd8a 	bl	80101ac <iprintf>
	HAL_Delay(2500);	//2500 ms delay
 8000698:	f640 10c4 	movw	r0, #2500	; 0x9c4
 800069c:	f002 fa40 	bl	8002b20 <HAL_Delay>
	send_UART(huart, CAM_RESET, rec, sizeof(CAM_RESET), len_rec);
 80006a0:	79fb      	ldrb	r3, [r7, #7]
 80006a2:	b29b      	uxth	r3, r3
 80006a4:	9300      	str	r3, [sp, #0]
 80006a6:	2305      	movs	r3, #5
 80006a8:	68ba      	ldr	r2, [r7, #8]
 80006aa:	4911      	ldr	r1, [pc, #68]	; (80006f0 <Camera_Reset+0x70>)
 80006ac:	68f8      	ldr	r0, [r7, #12]
 80006ae:	f000 f823 	bl	80006f8 <send_UART>

	for (int i = 0; i < len_rec; i++) {
 80006b2:	2300      	movs	r3, #0
 80006b4:	617b      	str	r3, [r7, #20]
 80006b6:	e00a      	b.n	80006ce <Camera_Reset+0x4e>
		printf("%d ", rec[i]);
 80006b8:	697b      	ldr	r3, [r7, #20]
 80006ba:	68ba      	ldr	r2, [r7, #8]
 80006bc:	4413      	add	r3, r2
 80006be:	781b      	ldrb	r3, [r3, #0]
 80006c0:	4619      	mov	r1, r3
 80006c2:	480c      	ldr	r0, [pc, #48]	; (80006f4 <Camera_Reset+0x74>)
 80006c4:	f00f fd72 	bl	80101ac <iprintf>
	for (int i = 0; i < len_rec; i++) {
 80006c8:	697b      	ldr	r3, [r7, #20]
 80006ca:	3301      	adds	r3, #1
 80006cc:	617b      	str	r3, [r7, #20]
 80006ce:	79fb      	ldrb	r3, [r7, #7]
 80006d0:	697a      	ldr	r2, [r7, #20]
 80006d2:	429a      	cmp	r2, r3
 80006d4:	dbf0      	blt.n	80006b8 <Camera_Reset+0x38>
	}
	printf("\n");
 80006d6:	200a      	movs	r0, #10
 80006d8:	f00f fd80 	bl	80101dc <putchar>

	HAL_Delay(1000);
 80006dc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80006e0:	f002 fa1e 	bl	8002b20 <HAL_Delay>
}
 80006e4:	bf00      	nop
 80006e6:	3718      	adds	r7, #24
 80006e8:	46bd      	mov	sp, r7
 80006ea:	bd80      	pop	{r7, pc}
 80006ec:	080110f8 	.word	0x080110f8
 80006f0:	24000000 	.word	0x24000000
 80006f4:	08011118 	.word	0x08011118

080006f8 <send_UART>:

// abstracted function for general USART exchange, note that size of rec must be known beforehand for this to work
bool send_UART(UART_HandleTypeDef* huart, uint8_t* comm, uint8_t* rec, uint8_t len_comm, uint16_t len_rec)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b08c      	sub	sp, #48	; 0x30
 80006fc:	af02      	add	r7, sp, #8
 80006fe:	60f8      	str	r0, [r7, #12]
 8000700:	60b9      	str	r1, [r7, #8]
 8000702:	607a      	str	r2, [r7, #4]
 8000704:	70fb      	strb	r3, [r7, #3]
	HAL_StatusTypeDef res = HAL_ERROR;
 8000706:	2301      	movs	r3, #1
 8000708:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	res = HAL_UART_Receive(huart, junk, 255, 2);
 800070c:	2302      	movs	r3, #2
 800070e:	22ff      	movs	r2, #255	; 0xff
 8000710:	496d      	ldr	r1, [pc, #436]	; (80008c8 <send_UART+0x1d0>)
 8000712:	68f8      	ldr	r0, [r7, #12]
 8000714:	f007 fcd7 	bl	80080c6 <HAL_UART_Receive>
 8000718:	4603      	mov	r3, r0
 800071a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	/*for (int i = 0; i < len_rec; i++)
			printf("%d ", rec[i]);
	printf("\n");*/
	rec[0] = 255;
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	22ff      	movs	r2, #255	; 0xff
 8000722:	701a      	strb	r2, [r3, #0]
	rec[1] = 10;
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	3301      	adds	r3, #1
 8000728:	220a      	movs	r2, #10
 800072a:	701a      	strb	r2, [r3, #0]
	rec[2] = 30;
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	3302      	adds	r3, #2
 8000730:	221e      	movs	r2, #30
 8000732:	701a      	strb	r2, [r3, #0]
	rec[3] = 40;
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	3303      	adds	r3, #3
 8000738:	2228      	movs	r2, #40	; 0x28
 800073a:	701a      	strb	r2, [r3, #0]
	rec[4] = 50;
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	3304      	adds	r3, #4
 8000740:	2232      	movs	r2, #50	; 0x32
 8000742:	701a      	strb	r2, [r3, #0]

	uint32_t tick3 = HAL_GetTick();
 8000744:	f002 f9e0 	bl	8002b08 <HAL_GetTick>
 8000748:	61f8      	str	r0, [r7, #28]

	// fastest tx operation?
	huart->TxXferCount = len_comm;
 800074a:	78fb      	ldrb	r3, [r7, #3]
 800074c:	b29a      	uxth	r2, r3
 800074e:	68fb      	ldr	r3, [r7, #12]
 8000750:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
	huart->TxXferSize = len_comm;
 8000754:	78fb      	ldrb	r3, [r7, #3]
 8000756:	b29a      	uxth	r2, r3
 8000758:	68fb      	ldr	r3, [r7, #12]
 800075a:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
	while (huart->TxXferCount > 0U)
 800075e:	e01d      	b.n	800079c <send_UART+0xa4>
	    {
	      //ensure that Tx operations are finished before we continue
	      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tick3, 100) != HAL_OK)
 8000760:	2364      	movs	r3, #100	; 0x64
 8000762:	9300      	str	r3, [sp, #0]
 8000764:	69fb      	ldr	r3, [r7, #28]
 8000766:	2200      	movs	r2, #0
 8000768:	2180      	movs	r1, #128	; 0x80
 800076a:	68f8      	ldr	r0, [r7, #12]
 800076c:	f00a f978 	bl	800aa60 <UART_WaitOnFlagUntilTimeout>
 8000770:	4603      	mov	r3, r0
 8000772:	2b00      	cmp	r3, #0
 8000774:	d001      	beq.n	800077a <send_UART+0x82>
	      {
	        return false;
 8000776:	2300      	movs	r3, #0
 8000778:	e0a2      	b.n	80008c0 <send_UART+0x1c8>
	      }

	      huart->Instance->TDR = (uint8_t)(*comm & 0xFFU); // what is the purpose of the & operation if the mask is just 0xFF
 800077a:	68bb      	ldr	r3, [r7, #8]
 800077c:	781a      	ldrb	r2, [r3, #0]
 800077e:	68fb      	ldr	r3, [r7, #12]
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	629a      	str	r2, [r3, #40]	; 0x28
	      comm++;
 8000784:	68bb      	ldr	r3, [r7, #8]
 8000786:	3301      	adds	r3, #1
 8000788:	60bb      	str	r3, [r7, #8]
	      huart->TxXferCount--;
 800078a:	68fb      	ldr	r3, [r7, #12]
 800078c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8000790:	b29b      	uxth	r3, r3
 8000792:	3b01      	subs	r3, #1
 8000794:	b29a      	uxth	r2, r3
 8000796:	68fb      	ldr	r3, [r7, #12]
 8000798:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
	while (huart->TxXferCount > 0U)
 800079c:	68fb      	ldr	r3, [r7, #12]
 800079e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80007a2:	b29b      	uxth	r3, r3
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d1db      	bne.n	8000760 <send_UART+0x68>
	    }


	// fastest rx operation, could make slightly faster on flag check
	huart->RxXferCount = len_rec;
 80007a8:	68fb      	ldr	r3, [r7, #12]
 80007aa:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 80007ac:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
	huart->RxXferSize  = len_rec;
 80007b0:	68fb      	ldr	r3, [r7, #12]
 80007b2:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 80007b4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
	uint8_t flag = 0;
 80007b8:	2300      	movs	r3, #0
 80007ba:	76fb      	strb	r3, [r7, #27]
	uint8_t* pData = rec;
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t tickstart = HAL_GetTick();
 80007c0:	f002 f9a2 	bl	8002b08 <HAL_GetTick>
 80007c4:	6178      	str	r0, [r7, #20]
	UART_MASK_COMPUTATION(huart);
 80007c6:	68fb      	ldr	r3, [r7, #12]
 80007c8:	689b      	ldr	r3, [r3, #8]
 80007ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80007ce:	d10e      	bne.n	80007ee <send_UART+0xf6>
 80007d0:	68fb      	ldr	r3, [r7, #12]
 80007d2:	691b      	ldr	r3, [r3, #16]
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d105      	bne.n	80007e4 <send_UART+0xec>
 80007d8:	68fb      	ldr	r3, [r7, #12]
 80007da:	f240 12ff 	movw	r2, #511	; 0x1ff
 80007de:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80007e2:	e05e      	b.n	80008a2 <send_UART+0x1aa>
 80007e4:	68fb      	ldr	r3, [r7, #12]
 80007e6:	22ff      	movs	r2, #255	; 0xff
 80007e8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80007ec:	e059      	b.n	80008a2 <send_UART+0x1aa>
 80007ee:	68fb      	ldr	r3, [r7, #12]
 80007f0:	689b      	ldr	r3, [r3, #8]
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d10d      	bne.n	8000812 <send_UART+0x11a>
 80007f6:	68fb      	ldr	r3, [r7, #12]
 80007f8:	691b      	ldr	r3, [r3, #16]
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d104      	bne.n	8000808 <send_UART+0x110>
 80007fe:	68fb      	ldr	r3, [r7, #12]
 8000800:	22ff      	movs	r2, #255	; 0xff
 8000802:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8000806:	e04c      	b.n	80008a2 <send_UART+0x1aa>
 8000808:	68fb      	ldr	r3, [r7, #12]
 800080a:	227f      	movs	r2, #127	; 0x7f
 800080c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8000810:	e047      	b.n	80008a2 <send_UART+0x1aa>
 8000812:	68fb      	ldr	r3, [r7, #12]
 8000814:	689b      	ldr	r3, [r3, #8]
 8000816:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800081a:	d10d      	bne.n	8000838 <send_UART+0x140>
 800081c:	68fb      	ldr	r3, [r7, #12]
 800081e:	691b      	ldr	r3, [r3, #16]
 8000820:	2b00      	cmp	r3, #0
 8000822:	d104      	bne.n	800082e <send_UART+0x136>
 8000824:	68fb      	ldr	r3, [r7, #12]
 8000826:	227f      	movs	r2, #127	; 0x7f
 8000828:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800082c:	e039      	b.n	80008a2 <send_UART+0x1aa>
 800082e:	68fb      	ldr	r3, [r7, #12]
 8000830:	223f      	movs	r2, #63	; 0x3f
 8000832:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8000836:	e034      	b.n	80008a2 <send_UART+0x1aa>
 8000838:	68fb      	ldr	r3, [r7, #12]
 800083a:	2200      	movs	r2, #0
 800083c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
	while (huart->RxXferCount > 0U)
 8000840:	e02f      	b.n	80008a2 <send_UART+0x1aa>
	    {
	       if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, 3000) != HAL_OK)
 8000842:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8000846:	9300      	str	r3, [sp, #0]
 8000848:	697b      	ldr	r3, [r7, #20]
 800084a:	2200      	movs	r2, #0
 800084c:	2120      	movs	r1, #32
 800084e:	68f8      	ldr	r0, [r7, #12]
 8000850:	f00a f906 	bl	800aa60 <UART_WaitOnFlagUntilTimeout>
 8000854:	4603      	mov	r3, r0
 8000856:	2b00      	cmp	r3, #0
 8000858:	d00b      	beq.n	8000872 <send_UART+0x17a>
	       {
	    	 printf("\n\nBROKE LOOP ON RX, TIMEOUT AT %d ITERATION\n\n", len_rec - huart->RxXferCount);
 800085a:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800085c:	68fa      	ldr	r2, [r7, #12]
 800085e:	f8b2 205e 	ldrh.w	r2, [r2, #94]	; 0x5e
 8000862:	b292      	uxth	r2, r2
 8000864:	1a9b      	subs	r3, r3, r2
 8000866:	4619      	mov	r1, r3
 8000868:	4818      	ldr	r0, [pc, #96]	; (80008cc <send_UART+0x1d4>)
 800086a:	f00f fc9f 	bl	80101ac <iprintf>
	         return HAL_TIMEOUT;
 800086e:	2301      	movs	r3, #1
 8000870:	e026      	b.n	80008c0 <send_UART+0x1c8>
	       }

	       *pData = (uint8_t)(huart->Instance->RDR & (uint8_t) huart->Mask);	// note that UART mask here is variable in HAL drivers, often 255 so that is default
 8000872:	68fb      	ldr	r3, [r7, #12]
 8000874:	681b      	ldr	r3, [r3, #0]
 8000876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000878:	b2da      	uxtb	r2, r3
 800087a:	68fb      	ldr	r3, [r7, #12]
 800087c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8000880:	b2db      	uxtb	r3, r3
 8000882:	4013      	ands	r3, r2
 8000884:	b2da      	uxtb	r2, r3
 8000886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000888:	701a      	strb	r2, [r3, #0]
	       pData++;
 800088a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800088c:	3301      	adds	r3, #1
 800088e:	627b      	str	r3, [r7, #36]	; 0x24

	       huart->RxXferCount--;
 8000890:	68fb      	ldr	r3, [r7, #12]
 8000892:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8000896:	b29b      	uxth	r3, r3
 8000898:	3b01      	subs	r3, #1
 800089a:	b29a      	uxth	r2, r3
 800089c:	68fb      	ldr	r3, [r7, #12]
 800089e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
	while (huart->RxXferCount > 0U)
 80008a2:	68fb      	ldr	r3, [r7, #12]
 80008a4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80008a8:	b29b      	uxth	r3, r3
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d1c9      	bne.n	8000842 <send_UART+0x14a>

	    }

	res = HAL_UART_Receive(huart, junk, 255, 2);
 80008ae:	2302      	movs	r3, #2
 80008b0:	22ff      	movs	r2, #255	; 0xff
 80008b2:	4905      	ldr	r1, [pc, #20]	; (80008c8 <send_UART+0x1d0>)
 80008b4:	68f8      	ldr	r0, [r7, #12]
 80008b6:	f007 fc06 	bl	80080c6 <HAL_UART_Receive>
 80008ba:	4603      	mov	r3, r0
 80008bc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
}
 80008c0:	4618      	mov	r0, r3
 80008c2:	3728      	adds	r7, #40	; 0x28
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bd80      	pop	{r7, pc}
 80008c8:	24067248 	.word	0x24067248
 80008cc:	0801111c 	.word	0x0801111c

080008d0 <Camera_Snapshot>:

//orders camera to take snapshot
void Camera_Snapshot(UART_HandleTypeDef* huart, uint8_t* rec, uint8_t len_rec) {
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b088      	sub	sp, #32
 80008d4:	af02      	add	r7, sp, #8
 80008d6:	60f8      	str	r0, [r7, #12]
 80008d8:	60b9      	str	r1, [r7, #8]
 80008da:	4613      	mov	r3, r2
 80008dc:	71fb      	strb	r3, [r7, #7]
	send_UART(huart, CAM_CAPTURE, rec, sizeof(CAM_CAPTURE), len_rec);
 80008de:	79fb      	ldrb	r3, [r7, #7]
 80008e0:	b29b      	uxth	r3, r3
 80008e2:	9300      	str	r3, [sp, #0]
 80008e4:	2305      	movs	r3, #5
 80008e6:	68ba      	ldr	r2, [r7, #8]
 80008e8:	490f      	ldr	r1, [pc, #60]	; (8000928 <Camera_Snapshot+0x58>)
 80008ea:	68f8      	ldr	r0, [r7, #12]
 80008ec:	f7ff ff04 	bl	80006f8 <send_UART>

	for (int i = 0; i < len_rec; i++)
 80008f0:	2300      	movs	r3, #0
 80008f2:	617b      	str	r3, [r7, #20]
 80008f4:	e00a      	b.n	800090c <Camera_Snapshot+0x3c>
		printf("%d ", rec[i]);
 80008f6:	697b      	ldr	r3, [r7, #20]
 80008f8:	68ba      	ldr	r2, [r7, #8]
 80008fa:	4413      	add	r3, r2
 80008fc:	781b      	ldrb	r3, [r3, #0]
 80008fe:	4619      	mov	r1, r3
 8000900:	480a      	ldr	r0, [pc, #40]	; (800092c <Camera_Snapshot+0x5c>)
 8000902:	f00f fc53 	bl	80101ac <iprintf>
	for (int i = 0; i < len_rec; i++)
 8000906:	697b      	ldr	r3, [r7, #20]
 8000908:	3301      	adds	r3, #1
 800090a:	617b      	str	r3, [r7, #20]
 800090c:	79fb      	ldrb	r3, [r7, #7]
 800090e:	697a      	ldr	r2, [r7, #20]
 8000910:	429a      	cmp	r2, r3
 8000912:	dbf0      	blt.n	80008f6 <Camera_Snapshot+0x26>
	printf("\n");
 8000914:	200a      	movs	r0, #10
 8000916:	f00f fc61 	bl	80101dc <putchar>

	HAL_Delay(1);
 800091a:	2001      	movs	r0, #1
 800091c:	f002 f900 	bl	8002b20 <HAL_Delay>
}
 8000920:	bf00      	nop
 8000922:	3718      	adds	r7, #24
 8000924:	46bd      	mov	sp, r7
 8000926:	bd80      	pop	{r7, pc}
 8000928:	24000060 	.word	0x24000060
 800092c:	08011118 	.word	0x08011118

08000930 <Camera_Stop_Capture>:

void Camera_Stop_Capture(UART_HandleTypeDef* huart, uint8_t* rec, uint8_t len_rec) {
 8000930:	b580      	push	{r7, lr}
 8000932:	b088      	sub	sp, #32
 8000934:	af02      	add	r7, sp, #8
 8000936:	60f8      	str	r0, [r7, #12]
 8000938:	60b9      	str	r1, [r7, #8]
 800093a:	4613      	mov	r3, r2
 800093c:	71fb      	strb	r3, [r7, #7]
	send_UART(huart, CAM_STOP_CAP, rec, sizeof(CAM_STOP_CAP), len_rec);
 800093e:	79fb      	ldrb	r3, [r7, #7]
 8000940:	b29b      	uxth	r3, r3
 8000942:	9300      	str	r3, [sp, #0]
 8000944:	2305      	movs	r3, #5
 8000946:	68ba      	ldr	r2, [r7, #8]
 8000948:	490f      	ldr	r1, [pc, #60]	; (8000988 <Camera_Stop_Capture+0x58>)
 800094a:	68f8      	ldr	r0, [r7, #12]
 800094c:	f7ff fed4 	bl	80006f8 <send_UART>

	for (int i = 0; i < len_rec; i++)
 8000950:	2300      	movs	r3, #0
 8000952:	617b      	str	r3, [r7, #20]
 8000954:	e00a      	b.n	800096c <Camera_Stop_Capture+0x3c>
		printf("%d ", rec[i]);
 8000956:	697b      	ldr	r3, [r7, #20]
 8000958:	68ba      	ldr	r2, [r7, #8]
 800095a:	4413      	add	r3, r2
 800095c:	781b      	ldrb	r3, [r3, #0]
 800095e:	4619      	mov	r1, r3
 8000960:	480a      	ldr	r0, [pc, #40]	; (800098c <Camera_Stop_Capture+0x5c>)
 8000962:	f00f fc23 	bl	80101ac <iprintf>
	for (int i = 0; i < len_rec; i++)
 8000966:	697b      	ldr	r3, [r7, #20]
 8000968:	3301      	adds	r3, #1
 800096a:	617b      	str	r3, [r7, #20]
 800096c:	79fb      	ldrb	r3, [r7, #7]
 800096e:	697a      	ldr	r2, [r7, #20]
 8000970:	429a      	cmp	r2, r3
 8000972:	dbf0      	blt.n	8000956 <Camera_Stop_Capture+0x26>
	printf("\n");
 8000974:	200a      	movs	r0, #10
 8000976:	f00f fc31 	bl	80101dc <putchar>

	HAL_Delay(1);
 800097a:	2001      	movs	r0, #1
 800097c:	f002 f8d0 	bl	8002b20 <HAL_Delay>
}
 8000980:	bf00      	nop
 8000982:	3718      	adds	r7, #24
 8000984:	46bd      	mov	sp, r7
 8000986:	bd80      	pop	{r7, pc}
 8000988:	24000080 	.word	0x24000080
 800098c:	08011118 	.word	0x08011118

08000990 <Camera_Get_IMG_Length>:

//returns 2-value array of characters, first is high part of 16-bit length, second is low part
void Camera_Get_IMG_Length(UART_HandleTypeDef* huart, uint8_t* rec, uint8_t len_rec) {
 8000990:	b580      	push	{r7, lr}
 8000992:	b088      	sub	sp, #32
 8000994:	af02      	add	r7, sp, #8
 8000996:	60f8      	str	r0, [r7, #12]
 8000998:	60b9      	str	r1, [r7, #8]
 800099a:	4613      	mov	r3, r2
 800099c:	71fb      	strb	r3, [r7, #7]
	send_UART(huart, CAM_IMG_LENGTH, rec, sizeof(CAM_IMG_LENGTH), len_rec);
 800099e:	79fb      	ldrb	r3, [r7, #7]
 80009a0:	b29b      	uxth	r3, r3
 80009a2:	9300      	str	r3, [sp, #0]
 80009a4:	2305      	movs	r3, #5
 80009a6:	68ba      	ldr	r2, [r7, #8]
 80009a8:	490e      	ldr	r1, [pc, #56]	; (80009e4 <Camera_Get_IMG_Length+0x54>)
 80009aa:	68f8      	ldr	r0, [r7, #12]
 80009ac:	f7ff fea4 	bl	80006f8 <send_UART>

	for (int i = 0; i < len_rec; i++)
 80009b0:	2300      	movs	r3, #0
 80009b2:	617b      	str	r3, [r7, #20]
 80009b4:	e00a      	b.n	80009cc <Camera_Get_IMG_Length+0x3c>
			printf("%d ", rec[i]);
 80009b6:	697b      	ldr	r3, [r7, #20]
 80009b8:	68ba      	ldr	r2, [r7, #8]
 80009ba:	4413      	add	r3, r2
 80009bc:	781b      	ldrb	r3, [r3, #0]
 80009be:	4619      	mov	r1, r3
 80009c0:	4809      	ldr	r0, [pc, #36]	; (80009e8 <Camera_Get_IMG_Length+0x58>)
 80009c2:	f00f fbf3 	bl	80101ac <iprintf>
	for (int i = 0; i < len_rec; i++)
 80009c6:	697b      	ldr	r3, [r7, #20]
 80009c8:	3301      	adds	r3, #1
 80009ca:	617b      	str	r3, [r7, #20]
 80009cc:	79fb      	ldrb	r3, [r7, #7]
 80009ce:	697a      	ldr	r2, [r7, #20]
 80009d0:	429a      	cmp	r2, r3
 80009d2:	dbf0      	blt.n	80009b6 <Camera_Get_IMG_Length+0x26>
		printf("\n");
 80009d4:	200a      	movs	r0, #10
 80009d6:	f00f fc01 	bl	80101dc <putchar>
}
 80009da:	bf00      	nop
 80009dc:	3718      	adds	r7, #24
 80009de:	46bd      	mov	sp, r7
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	bf00      	nop
 80009e4:	24000068 	.word	0x24000068
 80009e8:	08011118 	.word	0x08011118

080009ec <Camera_Get_IMG>:

//records the image into a statically allocated array of the given
void Camera_Get_IMG(UART_HandleTypeDef* huart, uint8_t* rec, uint16_t len_rec, uint8_t lengthH, uint8_t lengthL, uint8_t memH, uint8_t memL) {
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b086      	sub	sp, #24
 80009f0:	af02      	add	r7, sp, #8
 80009f2:	60f8      	str	r0, [r7, #12]
 80009f4:	60b9      	str	r1, [r7, #8]
 80009f6:	4611      	mov	r1, r2
 80009f8:	461a      	mov	r2, r3
 80009fa:	460b      	mov	r3, r1
 80009fc:	80fb      	strh	r3, [r7, #6]
 80009fe:	4613      	mov	r3, r2
 8000a00:	717b      	strb	r3, [r7, #5]

	CAM_READ_IMG[12] = lengthH;
 8000a02:	4a0c      	ldr	r2, [pc, #48]	; (8000a34 <Camera_Get_IMG+0x48>)
 8000a04:	797b      	ldrb	r3, [r7, #5]
 8000a06:	7313      	strb	r3, [r2, #12]
	CAM_READ_IMG[13] = lengthL;
 8000a08:	4a0a      	ldr	r2, [pc, #40]	; (8000a34 <Camera_Get_IMG+0x48>)
 8000a0a:	7e3b      	ldrb	r3, [r7, #24]
 8000a0c:	7353      	strb	r3, [r2, #13]

	CAM_READ_IMG[8] = memH;
 8000a0e:	4a09      	ldr	r2, [pc, #36]	; (8000a34 <Camera_Get_IMG+0x48>)
 8000a10:	7f3b      	ldrb	r3, [r7, #28]
 8000a12:	7213      	strb	r3, [r2, #8]
	CAM_READ_IMG[9] = memL;
 8000a14:	4a07      	ldr	r2, [pc, #28]	; (8000a34 <Camera_Get_IMG+0x48>)
 8000a16:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000a1a:	7253      	strb	r3, [r2, #9]

	send_UART(huart, CAM_READ_IMG, rec, sizeof(CAM_READ_IMG), len_rec);
 8000a1c:	88fb      	ldrh	r3, [r7, #6]
 8000a1e:	9300      	str	r3, [sp, #0]
 8000a20:	2310      	movs	r3, #16
 8000a22:	68ba      	ldr	r2, [r7, #8]
 8000a24:	4903      	ldr	r1, [pc, #12]	; (8000a34 <Camera_Get_IMG+0x48>)
 8000a26:	68f8      	ldr	r0, [r7, #12]
 8000a28:	f7ff fe66 	bl	80006f8 <send_UART>
	/*printf("IMAGE:\n\n");
	for (int i = 0; i < len_rec; i++)
			printf("%d ", rec[i]);
		printf("\n");*/

}
 8000a2c:	bf00      	nop
 8000a2e:	3710      	adds	r7, #16
 8000a30:	46bd      	mov	sp, r7
 8000a32:	bd80      	pop	{r7, pc}
 8000a34:	24000070 	.word	0x24000070

08000a38 <Camera_Set_Res>:

//sets the resolution of the image, full resolution likely not needed for crude processing
//0x00 is default for 640x480, to get 320x240 must manually send command, replace 0x00 with 0x11
// resolution = 6 sends 640x480, resolution = 3 sends 320x240, resolution = 1 sends 160x120
void Camera_Set_Res(UART_HandleTypeDef* huart, uint8_t* rec, uint8_t len_rec, uint8_t res) {
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b088      	sub	sp, #32
 8000a3c:	af02      	add	r7, sp, #8
 8000a3e:	60f8      	str	r0, [r7, #12]
 8000a40:	60b9      	str	r1, [r7, #8]
 8000a42:	4611      	mov	r1, r2
 8000a44:	461a      	mov	r2, r3
 8000a46:	460b      	mov	r3, r1
 8000a48:	71fb      	strb	r3, [r7, #7]
 8000a4a:	4613      	mov	r3, r2
 8000a4c:	71bb      	strb	r3, [r7, #6]

	// for 640x480
	if (res == 6)
 8000a4e:	79bb      	ldrb	r3, [r7, #6]
 8000a50:	2b06      	cmp	r3, #6
 8000a52:	d109      	bne.n	8000a68 <Camera_Set_Res+0x30>
		send_UART(huart, CAM_RES_640_480, rec, sizeof(CAM_RES_640_480), len_rec);
 8000a54:	79fb      	ldrb	r3, [r7, #7]
 8000a56:	b29b      	uxth	r3, r3
 8000a58:	9300      	str	r3, [sp, #0]
 8000a5a:	2309      	movs	r3, #9
 8000a5c:	68ba      	ldr	r2, [r7, #8]
 8000a5e:	491b      	ldr	r1, [pc, #108]	; (8000acc <Camera_Set_Res+0x94>)
 8000a60:	68f8      	ldr	r0, [r7, #12]
 8000a62:	f7ff fe49 	bl	80006f8 <send_UART>
 8000a66:	e018      	b.n	8000a9a <Camera_Set_Res+0x62>

	// for 320x240
	else if (res == 3)
 8000a68:	79bb      	ldrb	r3, [r7, #6]
 8000a6a:	2b03      	cmp	r3, #3
 8000a6c:	d109      	bne.n	8000a82 <Camera_Set_Res+0x4a>
		send_UART(huart, CAM_RES_320_240, rec, sizeof(CAM_RES_320_240), len_rec);
 8000a6e:	79fb      	ldrb	r3, [r7, #7]
 8000a70:	b29b      	uxth	r3, r3
 8000a72:	9300      	str	r3, [sp, #0]
 8000a74:	2309      	movs	r3, #9
 8000a76:	68ba      	ldr	r2, [r7, #8]
 8000a78:	4915      	ldr	r1, [pc, #84]	; (8000ad0 <Camera_Set_Res+0x98>)
 8000a7a:	68f8      	ldr	r0, [r7, #12]
 8000a7c:	f7ff fe3c 	bl	80006f8 <send_UART>
 8000a80:	e00b      	b.n	8000a9a <Camera_Set_Res+0x62>

	// for 160x120
	else if (res == 1)
 8000a82:	79bb      	ldrb	r3, [r7, #6]
 8000a84:	2b01      	cmp	r3, #1
 8000a86:	d108      	bne.n	8000a9a <Camera_Set_Res+0x62>
		send_UART(huart, CAM_RES_160_120, rec, sizeof(CAM_RES_160_120), len_rec);
 8000a88:	79fb      	ldrb	r3, [r7, #7]
 8000a8a:	b29b      	uxth	r3, r3
 8000a8c:	9300      	str	r3, [sp, #0]
 8000a8e:	2309      	movs	r3, #9
 8000a90:	68ba      	ldr	r2, [r7, #8]
 8000a92:	4910      	ldr	r1, [pc, #64]	; (8000ad4 <Camera_Set_Res+0x9c>)
 8000a94:	68f8      	ldr	r0, [r7, #12]
 8000a96:	f7ff fe2f 	bl	80006f8 <send_UART>

	for (int i = 0; i < len_rec; i++)
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	617b      	str	r3, [r7, #20]
 8000a9e:	e00a      	b.n	8000ab6 <Camera_Set_Res+0x7e>
			printf("%d ", rec[i]);
 8000aa0:	697b      	ldr	r3, [r7, #20]
 8000aa2:	68ba      	ldr	r2, [r7, #8]
 8000aa4:	4413      	add	r3, r2
 8000aa6:	781b      	ldrb	r3, [r3, #0]
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	480b      	ldr	r0, [pc, #44]	; (8000ad8 <Camera_Set_Res+0xa0>)
 8000aac:	f00f fb7e 	bl	80101ac <iprintf>
	for (int i = 0; i < len_rec; i++)
 8000ab0:	697b      	ldr	r3, [r7, #20]
 8000ab2:	3301      	adds	r3, #1
 8000ab4:	617b      	str	r3, [r7, #20]
 8000ab6:	79fb      	ldrb	r3, [r7, #7]
 8000ab8:	697a      	ldr	r2, [r7, #20]
 8000aba:	429a      	cmp	r2, r3
 8000abc:	dbf0      	blt.n	8000aa0 <Camera_Set_Res+0x68>
		printf("\n");
 8000abe:	200a      	movs	r0, #10
 8000ac0:	f00f fb8c 	bl	80101dc <putchar>
}
 8000ac4:	bf00      	nop
 8000ac6:	3718      	adds	r7, #24
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	bd80      	pop	{r7, pc}
 8000acc:	24000008 	.word	0x24000008
 8000ad0:	24000014 	.word	0x24000014
 8000ad4:	24000020 	.word	0x24000020
 8000ad8:	08011118 	.word	0x08011118

08000adc <Camera_Set_Compress>:

// function to ease customization of compression, higher compression is vastly preferable
void Camera_Set_Compress(UART_HandleTypeDef* huart, uint8_t* rec, uint8_t len_rec, uint8_t comp) {
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b088      	sub	sp, #32
 8000ae0:	af02      	add	r7, sp, #8
 8000ae2:	60f8      	str	r0, [r7, #12]
 8000ae4:	60b9      	str	r1, [r7, #8]
 8000ae6:	4611      	mov	r1, r2
 8000ae8:	461a      	mov	r2, r3
 8000aea:	460b      	mov	r3, r1
 8000aec:	71fb      	strb	r3, [r7, #7]
 8000aee:	4613      	mov	r3, r2
 8000af0:	71bb      	strb	r3, [r7, #6]
	CAM_COMPRESS[8] = comp;
 8000af2:	4a12      	ldr	r2, [pc, #72]	; (8000b3c <Camera_Set_Compress+0x60>)
 8000af4:	79bb      	ldrb	r3, [r7, #6]
 8000af6:	7213      	strb	r3, [r2, #8]

	send_UART(huart, CAM_COMPRESS, rec, sizeof(CAM_COMPRESS), len_rec);
 8000af8:	79fb      	ldrb	r3, [r7, #7]
 8000afa:	b29b      	uxth	r3, r3
 8000afc:	9300      	str	r3, [sp, #0]
 8000afe:	2309      	movs	r3, #9
 8000b00:	68ba      	ldr	r2, [r7, #8]
 8000b02:	490e      	ldr	r1, [pc, #56]	; (8000b3c <Camera_Set_Compress+0x60>)
 8000b04:	68f8      	ldr	r0, [r7, #12]
 8000b06:	f7ff fdf7 	bl	80006f8 <send_UART>

	for (int i = 0; i < len_rec; i++)
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	617b      	str	r3, [r7, #20]
 8000b0e:	e00a      	b.n	8000b26 <Camera_Set_Compress+0x4a>
		printf("%d ", rec[i]);
 8000b10:	697b      	ldr	r3, [r7, #20]
 8000b12:	68ba      	ldr	r2, [r7, #8]
 8000b14:	4413      	add	r3, r2
 8000b16:	781b      	ldrb	r3, [r3, #0]
 8000b18:	4619      	mov	r1, r3
 8000b1a:	4809      	ldr	r0, [pc, #36]	; (8000b40 <Camera_Set_Compress+0x64>)
 8000b1c:	f00f fb46 	bl	80101ac <iprintf>
	for (int i = 0; i < len_rec; i++)
 8000b20:	697b      	ldr	r3, [r7, #20]
 8000b22:	3301      	adds	r3, #1
 8000b24:	617b      	str	r3, [r7, #20]
 8000b26:	79fb      	ldrb	r3, [r7, #7]
 8000b28:	697a      	ldr	r2, [r7, #20]
 8000b2a:	429a      	cmp	r2, r3
 8000b2c:	dbf0      	blt.n	8000b10 <Camera_Set_Compress+0x34>
	printf("\n");
 8000b2e:	200a      	movs	r0, #10
 8000b30:	f00f fb54 	bl	80101dc <putchar>
}
 8000b34:	bf00      	nop
 8000b36:	3718      	adds	r7, #24
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bd80      	pop	{r7, pc}
 8000b3c:	2400002c 	.word	0x2400002c
 8000b40:	08011118 	.word	0x08011118

08000b44 <Camera_Set_Baud>:

// function to set the baud rate, pass the baud rate directly for check
void Camera_Set_Baud(UART_HandleTypeDef* huart, uint8_t* rec, uint8_t len_rec, uint32_t baud) {
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b088      	sub	sp, #32
 8000b48:	af02      	add	r7, sp, #8
 8000b4a:	60f8      	str	r0, [r7, #12]
 8000b4c:	60b9      	str	r1, [r7, #8]
 8000b4e:	603b      	str	r3, [r7, #0]
 8000b50:	4613      	mov	r3, r2
 8000b52:	71fb      	strb	r3, [r7, #7]

	if (baud == 9600) {
 8000b54:	683b      	ldr	r3, [r7, #0]
 8000b56:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
 8000b5a:	d115      	bne.n	8000b88 <Camera_Set_Baud+0x44>
		send_UART(huart, CAM_BAUD_9600, rec, sizeof(CAM_BAUD_9600), len_rec);
 8000b5c:	79fb      	ldrb	r3, [r7, #7]
 8000b5e:	b29b      	uxth	r3, r3
 8000b60:	9300      	str	r3, [sp, #0]
 8000b62:	2307      	movs	r3, #7
 8000b64:	68ba      	ldr	r2, [r7, #8]
 8000b66:	4948      	ldr	r1, [pc, #288]	; (8000c88 <Camera_Set_Baud+0x144>)
 8000b68:	68f8      	ldr	r0, [r7, #12]
 8000b6a:	f7ff fdc5 	bl	80006f8 <send_UART>
		HAL_UART_DeInit(huart);
 8000b6e:	68f8      	ldr	r0, [r7, #12]
 8000b70:	f007 fa70 	bl	8008054 <HAL_UART_DeInit>
		HAL_Delay(1);
 8000b74:	2001      	movs	r0, #1
 8000b76:	f001 ffd3 	bl	8002b20 <HAL_Delay>
		UART_Init_Baud(huart, UART8, 9600);
 8000b7a:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000b7e:	4943      	ldr	r1, [pc, #268]	; (8000c8c <Camera_Set_Baud+0x148>)
 8000b80:	68f8      	ldr	r0, [r7, #12]
 8000b82:	f000 f8fb 	bl	8000d7c <UART_Init_Baud>
 8000b86:	e066      	b.n	8000c56 <Camera_Set_Baud+0x112>
	}

	else if (baud == 19200) {
 8000b88:	683b      	ldr	r3, [r7, #0]
 8000b8a:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
 8000b8e:	d115      	bne.n	8000bbc <Camera_Set_Baud+0x78>
		send_UART(huart, CAM_BAUD_19200, rec, sizeof(CAM_BAUD_19200), len_rec);
 8000b90:	79fb      	ldrb	r3, [r7, #7]
 8000b92:	b29b      	uxth	r3, r3
 8000b94:	9300      	str	r3, [sp, #0]
 8000b96:	2307      	movs	r3, #7
 8000b98:	68ba      	ldr	r2, [r7, #8]
 8000b9a:	493d      	ldr	r1, [pc, #244]	; (8000c90 <Camera_Set_Baud+0x14c>)
 8000b9c:	68f8      	ldr	r0, [r7, #12]
 8000b9e:	f7ff fdab 	bl	80006f8 <send_UART>
		HAL_UART_DeInit(huart);
 8000ba2:	68f8      	ldr	r0, [r7, #12]
 8000ba4:	f007 fa56 	bl	8008054 <HAL_UART_DeInit>
		HAL_Delay(1);
 8000ba8:	2001      	movs	r0, #1
 8000baa:	f001 ffb9 	bl	8002b20 <HAL_Delay>
		UART_Init_Baud(huart, UART8, 19200);
 8000bae:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 8000bb2:	4936      	ldr	r1, [pc, #216]	; (8000c8c <Camera_Set_Baud+0x148>)
 8000bb4:	68f8      	ldr	r0, [r7, #12]
 8000bb6:	f000 f8e1 	bl	8000d7c <UART_Init_Baud>
 8000bba:	e04c      	b.n	8000c56 <Camera_Set_Baud+0x112>
	}

	else if (baud == 38400) {
 8000bbc:	683b      	ldr	r3, [r7, #0]
 8000bbe:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
 8000bc2:	d115      	bne.n	8000bf0 <Camera_Set_Baud+0xac>
		send_UART(huart, CAM_BAUD_38400, rec, sizeof(CAM_BAUD_38400), len_rec);
 8000bc4:	79fb      	ldrb	r3, [r7, #7]
 8000bc6:	b29b      	uxth	r3, r3
 8000bc8:	9300      	str	r3, [sp, #0]
 8000bca:	2307      	movs	r3, #7
 8000bcc:	68ba      	ldr	r2, [r7, #8]
 8000bce:	4931      	ldr	r1, [pc, #196]	; (8000c94 <Camera_Set_Baud+0x150>)
 8000bd0:	68f8      	ldr	r0, [r7, #12]
 8000bd2:	f7ff fd91 	bl	80006f8 <send_UART>
		HAL_UART_DeInit(huart);
 8000bd6:	68f8      	ldr	r0, [r7, #12]
 8000bd8:	f007 fa3c 	bl	8008054 <HAL_UART_DeInit>
		HAL_Delay(1);
 8000bdc:	2001      	movs	r0, #1
 8000bde:	f001 ff9f 	bl	8002b20 <HAL_Delay>
		UART_Init_Baud(huart, UART8, 38400);
 8000be2:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8000be6:	4929      	ldr	r1, [pc, #164]	; (8000c8c <Camera_Set_Baud+0x148>)
 8000be8:	68f8      	ldr	r0, [r7, #12]
 8000bea:	f000 f8c7 	bl	8000d7c <UART_Init_Baud>
 8000bee:	e032      	b.n	8000c56 <Camera_Set_Baud+0x112>
	}

	else if (baud == 57600) {
 8000bf0:	683b      	ldr	r3, [r7, #0]
 8000bf2:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
 8000bf6:	d115      	bne.n	8000c24 <Camera_Set_Baud+0xe0>
		send_UART(huart, CAM_BAUD_57600, rec, sizeof(CAM_BAUD_57600), len_rec);
 8000bf8:	79fb      	ldrb	r3, [r7, #7]
 8000bfa:	b29b      	uxth	r3, r3
 8000bfc:	9300      	str	r3, [sp, #0]
 8000bfe:	2307      	movs	r3, #7
 8000c00:	68ba      	ldr	r2, [r7, #8]
 8000c02:	4925      	ldr	r1, [pc, #148]	; (8000c98 <Camera_Set_Baud+0x154>)
 8000c04:	68f8      	ldr	r0, [r7, #12]
 8000c06:	f7ff fd77 	bl	80006f8 <send_UART>
		HAL_UART_DeInit(huart);
 8000c0a:	68f8      	ldr	r0, [r7, #12]
 8000c0c:	f007 fa22 	bl	8008054 <HAL_UART_DeInit>
		HAL_Delay(1);
 8000c10:	2001      	movs	r0, #1
 8000c12:	f001 ff85 	bl	8002b20 <HAL_Delay>
		UART_Init_Baud(huart, UART8, 57600);
 8000c16:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8000c1a:	491c      	ldr	r1, [pc, #112]	; (8000c8c <Camera_Set_Baud+0x148>)
 8000c1c:	68f8      	ldr	r0, [r7, #12]
 8000c1e:	f000 f8ad 	bl	8000d7c <UART_Init_Baud>
 8000c22:	e018      	b.n	8000c56 <Camera_Set_Baud+0x112>
	}

	else if (baud == 115200) {
 8000c24:	683b      	ldr	r3, [r7, #0]
 8000c26:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
 8000c2a:	d114      	bne.n	8000c56 <Camera_Set_Baud+0x112>
		send_UART(huart, CAM_BAUD_115200, rec, sizeof(CAM_BAUD_115200), len_rec);
 8000c2c:	79fb      	ldrb	r3, [r7, #7]
 8000c2e:	b29b      	uxth	r3, r3
 8000c30:	9300      	str	r3, [sp, #0]
 8000c32:	2307      	movs	r3, #7
 8000c34:	68ba      	ldr	r2, [r7, #8]
 8000c36:	4919      	ldr	r1, [pc, #100]	; (8000c9c <Camera_Set_Baud+0x158>)
 8000c38:	68f8      	ldr	r0, [r7, #12]
 8000c3a:	f7ff fd5d 	bl	80006f8 <send_UART>
		HAL_UART_DeInit(huart);
 8000c3e:	68f8      	ldr	r0, [r7, #12]
 8000c40:	f007 fa08 	bl	8008054 <HAL_UART_DeInit>
		HAL_Delay(1);
 8000c44:	2001      	movs	r0, #1
 8000c46:	f001 ff6b 	bl	8002b20 <HAL_Delay>
		UART_Init_Baud(huart, UART8, 115200);
 8000c4a:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c4e:	490f      	ldr	r1, [pc, #60]	; (8000c8c <Camera_Set_Baud+0x148>)
 8000c50:	68f8      	ldr	r0, [r7, #12]
 8000c52:	f000 f893 	bl	8000d7c <UART_Init_Baud>
	}

	for (int i = 0; i < len_rec; i++)
 8000c56:	2300      	movs	r3, #0
 8000c58:	617b      	str	r3, [r7, #20]
 8000c5a:	e00a      	b.n	8000c72 <Camera_Set_Baud+0x12e>
		printf("%d ", rec[i]);
 8000c5c:	697b      	ldr	r3, [r7, #20]
 8000c5e:	68ba      	ldr	r2, [r7, #8]
 8000c60:	4413      	add	r3, r2
 8000c62:	781b      	ldrb	r3, [r3, #0]
 8000c64:	4619      	mov	r1, r3
 8000c66:	480e      	ldr	r0, [pc, #56]	; (8000ca0 <Camera_Set_Baud+0x15c>)
 8000c68:	f00f faa0 	bl	80101ac <iprintf>
	for (int i = 0; i < len_rec; i++)
 8000c6c:	697b      	ldr	r3, [r7, #20]
 8000c6e:	3301      	adds	r3, #1
 8000c70:	617b      	str	r3, [r7, #20]
 8000c72:	79fb      	ldrb	r3, [r7, #7]
 8000c74:	697a      	ldr	r2, [r7, #20]
 8000c76:	429a      	cmp	r2, r3
 8000c78:	dbf0      	blt.n	8000c5c <Camera_Set_Baud+0x118>
	printf("\n");
 8000c7a:	200a      	movs	r0, #10
 8000c7c:	f00f faae 	bl	80101dc <putchar>
}
 8000c80:	bf00      	nop
 8000c82:	3718      	adds	r7, #24
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bd80      	pop	{r7, pc}
 8000c88:	24000038 	.word	0x24000038
 8000c8c:	40007c00 	.word	0x40007c00
 8000c90:	24000040 	.word	0x24000040
 8000c94:	24000048 	.word	0x24000048
 8000c98:	24000050 	.word	0x24000050
 8000c9c:	24000058 	.word	0x24000058
 8000ca0:	08011118 	.word	0x08011118

08000ca4 <Camera_Initialize>:
   *  - Baudrate is also variable, we could set it to 115200 baud for faster data transfer but if the camera resets, it will go back to 38400 baud
   *
   *  All of the above steps should really only be handled one time, at system initialization. If we are disconnected from power, however,
   *  the camera is supposed to be reset in its normal flow. This is likely not be necessary, more testing is needed.
   */
void Camera_Initialize(UART_HandleTypeDef* huart, uint8_t resolution, uint8_t compression, uint32_t baud) {
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b090      	sub	sp, #64	; 0x40
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	60f8      	str	r0, [r7, #12]
 8000cac:	607b      	str	r3, [r7, #4]
 8000cae:	460b      	mov	r3, r1
 8000cb0:	72fb      	strb	r3, [r7, #11]
 8000cb2:	4613      	mov	r3, r2
 8000cb4:	72bb      	strb	r3, [r7, #10]
	  uint8_t reset_ack[5];
	  reset_ack[0] = 0;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	  uint8_t* reset_ack1 = reset_ack;
 8000cbc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000cc0:	63fb      	str	r3, [r7, #60]	; 0x3c

	  Camera_Reset(huart, reset_ack1, sizeof(reset_ack));
 8000cc2:	2205      	movs	r2, #5
 8000cc4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8000cc6:	68f8      	ldr	r0, [r7, #12]
 8000cc8:	f7ff fcda 	bl	8000680 <Camera_Reset>

	  if (reset_ack[0] == 0x76)
 8000ccc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000cd0:	2b76      	cmp	r3, #118	; 0x76
 8000cd2:	d103      	bne.n	8000cdc <Camera_Initialize+0x38>
		  printf("Ack for reset received.\n");
 8000cd4:	4822      	ldr	r0, [pc, #136]	; (8000d60 <Camera_Initialize+0xbc>)
 8000cd6:	f00f faf1 	bl	80102bc <puts>
 8000cda:	e002      	b.n	8000ce2 <Camera_Initialize+0x3e>
	  else
	  	  printf("No ack received for reset.\n");
 8000cdc:	4821      	ldr	r0, [pc, #132]	; (8000d64 <Camera_Initialize+0xc0>)
 8000cde:	f00f faed 	bl	80102bc <puts>

	  uint8_t resol_ack[5];
	  uint8_t* resol_ack1 = resol_ack;
 8000ce2:	f107 0320 	add.w	r3, r7, #32
 8000ce6:	63bb      	str	r3, [r7, #56]	; 0x38
	  Camera_Set_Res(huart, resol_ack1, sizeof(resol_ack), resolution);
 8000ce8:	7afb      	ldrb	r3, [r7, #11]
 8000cea:	2205      	movs	r2, #5
 8000cec:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8000cee:	68f8      	ldr	r0, [r7, #12]
 8000cf0:	f7ff fea2 	bl	8000a38 <Camera_Set_Res>

	  if (resol_ack[0] == 0x76)
 8000cf4:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000cf8:	2b76      	cmp	r3, #118	; 0x76
 8000cfa:	d103      	bne.n	8000d04 <Camera_Initialize+0x60>
		  printf("Ack for resolution received.\n");
 8000cfc:	481a      	ldr	r0, [pc, #104]	; (8000d68 <Camera_Initialize+0xc4>)
 8000cfe:	f00f fadd 	bl	80102bc <puts>
 8000d02:	e002      	b.n	8000d0a <Camera_Initialize+0x66>
	  else
		  printf("No ack received for resolution.\n");
 8000d04:	4819      	ldr	r0, [pc, #100]	; (8000d6c <Camera_Initialize+0xc8>)
 8000d06:	f00f fad9 	bl	80102bc <puts>

	  uint8_t compress_ack[5];
	  uint8_t* compress_ack1 = compress_ack;
 8000d0a:	f107 0318 	add.w	r3, r7, #24
 8000d0e:	637b      	str	r3, [r7, #52]	; 0x34
	  Camera_Set_Compress(huart, compress_ack1, sizeof(compress_ack), compression);
 8000d10:	7abb      	ldrb	r3, [r7, #10]
 8000d12:	2205      	movs	r2, #5
 8000d14:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8000d16:	68f8      	ldr	r0, [r7, #12]
 8000d18:	f7ff fee0 	bl	8000adc <Camera_Set_Compress>

	  if (compress_ack[0] == 0x76)
 8000d1c:	7e3b      	ldrb	r3, [r7, #24]
 8000d1e:	2b76      	cmp	r3, #118	; 0x76
 8000d20:	d103      	bne.n	8000d2a <Camera_Initialize+0x86>
		  printf("Ack for compression received.\n");
 8000d22:	4813      	ldr	r0, [pc, #76]	; (8000d70 <Camera_Initialize+0xcc>)
 8000d24:	f00f faca 	bl	80102bc <puts>
 8000d28:	e002      	b.n	8000d30 <Camera_Initialize+0x8c>
	  else
		  printf("No ack received for resolution.\n");
 8000d2a:	4810      	ldr	r0, [pc, #64]	; (8000d6c <Camera_Initialize+0xc8>)
 8000d2c:	f00f fac6 	bl	80102bc <puts>

	  uint8_t baud_ack[5];
	  uint8_t* baud_ack1 = baud_ack;
 8000d30:	f107 0310 	add.w	r3, r7, #16
 8000d34:	633b      	str	r3, [r7, #48]	; 0x30
	  Camera_Set_Baud(huart, baud_ack1, sizeof(baud_ack), baud);
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	2205      	movs	r2, #5
 8000d3a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8000d3c:	68f8      	ldr	r0, [r7, #12]
 8000d3e:	f7ff ff01 	bl	8000b44 <Camera_Set_Baud>

	  if (baud_ack[0] == 0x76)
 8000d42:	7c3b      	ldrb	r3, [r7, #16]
 8000d44:	2b76      	cmp	r3, #118	; 0x76
 8000d46:	d103      	bne.n	8000d50 <Camera_Initialize+0xac>
		  printf("Ack for baudrate received.\n");
 8000d48:	480a      	ldr	r0, [pc, #40]	; (8000d74 <Camera_Initialize+0xd0>)
 8000d4a:	f00f fab7 	bl	80102bc <puts>
	  else
		  printf("No ack received for baudrate.\n");

}
 8000d4e:	e002      	b.n	8000d56 <Camera_Initialize+0xb2>
		  printf("No ack received for baudrate.\n");
 8000d50:	4809      	ldr	r0, [pc, #36]	; (8000d78 <Camera_Initialize+0xd4>)
 8000d52:	f00f fab3 	bl	80102bc <puts>
}
 8000d56:	bf00      	nop
 8000d58:	3740      	adds	r7, #64	; 0x40
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	bf00      	nop
 8000d60:	0801114c 	.word	0x0801114c
 8000d64:	08011164 	.word	0x08011164
 8000d68:	08011180 	.word	0x08011180
 8000d6c:	080111a0 	.word	0x080111a0
 8000d70:	080111c0 	.word	0x080111c0
 8000d74:	080111e0 	.word	0x080111e0
 8000d78:	080111fc 	.word	0x080111fc

08000d7c <UART_Init_Baud>:

// function used purely to properly DeInit and then Init with a baud rate aside from our CubeMX generation
// by default, pass huart8 and UART8 for huart and name
void UART_Init_Baud(UART_HandleTypeDef* huart, USART_TypeDef* name, uint32_t baud) {
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b084      	sub	sp, #16
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	60f8      	str	r0, [r7, #12]
 8000d84:	60b9      	str	r1, [r7, #8]
 8000d86:	607a      	str	r2, [r7, #4]

  huart->Instance = name;
 8000d88:	68fb      	ldr	r3, [r7, #12]
 8000d8a:	68ba      	ldr	r2, [r7, #8]
 8000d8c:	601a      	str	r2, [r3, #0]
  huart->Init.BaudRate = baud;
 8000d8e:	68fb      	ldr	r3, [r7, #12]
 8000d90:	687a      	ldr	r2, [r7, #4]
 8000d92:	605a      	str	r2, [r3, #4]
  huart->Init.WordLength = UART_WORDLENGTH_8B;
 8000d94:	68fb      	ldr	r3, [r7, #12]
 8000d96:	2200      	movs	r2, #0
 8000d98:	609a      	str	r2, [r3, #8]
  huart->Init.StopBits = UART_STOPBITS_1;
 8000d9a:	68fb      	ldr	r3, [r7, #12]
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	60da      	str	r2, [r3, #12]
  huart->Init.Parity = UART_PARITY_NONE;
 8000da0:	68fb      	ldr	r3, [r7, #12]
 8000da2:	2200      	movs	r2, #0
 8000da4:	611a      	str	r2, [r3, #16]
  huart->Init.Mode = UART_MODE_TX_RX;
 8000da6:	68fb      	ldr	r3, [r7, #12]
 8000da8:	220c      	movs	r2, #12
 8000daa:	615a      	str	r2, [r3, #20]
  huart->Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000dac:	68fb      	ldr	r3, [r7, #12]
 8000dae:	2200      	movs	r2, #0
 8000db0:	619a      	str	r2, [r3, #24]
  huart->Init.OverSampling = UART_OVERSAMPLING_16;
 8000db2:	68fb      	ldr	r3, [r7, #12]
 8000db4:	2200      	movs	r2, #0
 8000db6:	61da      	str	r2, [r3, #28]
  huart->Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000db8:	68fb      	ldr	r3, [r7, #12]
 8000dba:	2200      	movs	r2, #0
 8000dbc:	621a      	str	r2, [r3, #32]
  huart->Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000dbe:	68fb      	ldr	r3, [r7, #12]
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	625a      	str	r2, [r3, #36]	; 0x24
  huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000dc4:	68fb      	ldr	r3, [r7, #12]
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	629a      	str	r2, [r3, #40]	; 0x28
  huart->AdvancedInit.AutoBaudRateEnable = UART_ADVFEATURE_AUTOBAUDRATE_ENABLE;
 8000dca:	68fb      	ldr	r3, [r7, #12]
 8000dcc:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000dd0:	645a      	str	r2, [r3, #68]	; 0x44
  huart->AdvancedInit.AutoBaudRateMode = UART_ADVFEATURE_AUTOBAUDRATE_ONSTARTBIT;
 8000dd2:	68fb      	ldr	r3, [r7, #12]
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	649a      	str	r2, [r3, #72]	; 0x48
  if (HAL_UART_Init(huart) != HAL_OK)
 8000dd8:	68f8      	ldr	r0, [r7, #12]
 8000dda:	f007 f8eb 	bl	8007fb4 <HAL_UART_Init>
 8000dde:	4603      	mov	r3, r0
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d001      	beq.n	8000de8 <UART_Init_Baud+0x6c>
  {
    Cam_Error_Handler();
 8000de4:	f000 f81f 	bl	8000e26 <Cam_Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(huart, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000de8:	2100      	movs	r1, #0
 8000dea:	68f8      	ldr	r0, [r7, #12]
 8000dec:	f009 ff65 	bl	800acba <HAL_UARTEx_SetTxFifoThreshold>
 8000df0:	4603      	mov	r3, r0
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d001      	beq.n	8000dfa <UART_Init_Baud+0x7e>
  {
    Cam_Error_Handler();
 8000df6:	f000 f816 	bl	8000e26 <Cam_Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(huart, UART_RXFIFO_THRESHOLD_8_8) != HAL_OK)
 8000dfa:	f04f 6120 	mov.w	r1, #167772160	; 0xa000000
 8000dfe:	68f8      	ldr	r0, [r7, #12]
 8000e00:	f009 ff99 	bl	800ad36 <HAL_UARTEx_SetRxFifoThreshold>
 8000e04:	4603      	mov	r3, r0
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d001      	beq.n	8000e0e <UART_Init_Baud+0x92>
  {
    Cam_Error_Handler();
 8000e0a:	f000 f80c 	bl	8000e26 <Cam_Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(huart) != HAL_OK)
 8000e0e:	68f8      	ldr	r0, [r7, #12]
 8000e10:	f009 ff18 	bl	800ac44 <HAL_UARTEx_EnableFifoMode>
 8000e14:	4603      	mov	r3, r0
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d001      	beq.n	8000e1e <UART_Init_Baud+0xa2>
  {
    Cam_Error_Handler();
 8000e1a:	f000 f804 	bl	8000e26 <Cam_Error_Handler>
  }

}
 8000e1e:	bf00      	nop
 8000e20:	3710      	adds	r7, #16
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bd80      	pop	{r7, pc}

08000e26 <Cam_Error_Handler>:

// currently useless, but could be filled if desired
void Cam_Error_Handler(void)
{
 8000e26:	b480      	push	{r7}
 8000e28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000e2a:	bf00      	nop
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e32:	4770      	bx	lr

08000e34 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000e34:	b480      	push	{r7}
 8000e36:	b083      	sub	sp, #12
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000e3c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000e40:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000e44:	f003 0301 	and.w	r3, r3, #1
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d009      	beq.n	8000e60 <ITM_SendChar+0x2c>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000e4c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000e50:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000e54:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d001      	beq.n	8000e60 <ITM_SendChar+0x2c>
 8000e5c:	2301      	movs	r3, #1
 8000e5e:	e000      	b.n	8000e62 <ITM_SendChar+0x2e>
 8000e60:	2300      	movs	r3, #0
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d010      	beq.n	8000e88 <ITM_SendChar+0x54>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000e66:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	bf0c      	ite	eq
 8000e70:	2301      	moveq	r3, #1
 8000e72:	2300      	movne	r3, #0
 8000e74:	b2db      	uxtb	r3, r3
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d001      	beq.n	8000e7e <ITM_SendChar+0x4a>
    {
      __NOP();
 8000e7a:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000e7c:	e7f3      	b.n	8000e66 <ITM_SendChar+0x32>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000e7e:	687a      	ldr	r2, [r7, #4]
 8000e80:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000e84:	b2d2      	uxtb	r2, r2
 8000e86:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000e88:	687b      	ldr	r3, [r7, #4]
}
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	370c      	adds	r7, #12
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e94:	4770      	bx	lr

08000e96 <_ZN11HAL_VL53L0X11rangingTestEP32VL53L0X_RangingMeasurementData_tb>:
     Serial.print during execution. Defaults to false.
      @returns True if address was set successfully, False otherwise
  */
  /**************************************************************************/
  VL53L0X_Error
  rangingTest(VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
 8000e96:	b580      	push	{r7, lr}
 8000e98:	b084      	sub	sp, #16
 8000e9a:	af00      	add	r7, sp, #0
 8000e9c:	60f8      	str	r0, [r7, #12]
 8000e9e:	60b9      	str	r1, [r7, #8]
 8000ea0:	4613      	mov	r3, r2
 8000ea2:	71fb      	strb	r3, [r7, #7]
              bool debug = false) {
    return getSingleRangingMeasurement(pRangingMeasurementData, debug);
 8000ea4:	79fb      	ldrb	r3, [r7, #7]
 8000ea6:	461a      	mov	r2, r3
 8000ea8:	68b9      	ldr	r1, [r7, #8]
 8000eaa:	68f8      	ldr	r0, [r7, #12]
 8000eac:	f00a f8f4 	bl	800b098 <_ZN11HAL_VL53L0X27getSingleRangingMeasurementEP32VL53L0X_RangingMeasurementData_tb>
 8000eb0:	4603      	mov	r3, r0
  };
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	3710      	adds	r7, #16
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}

08000eba <_ZN11HAL_VL53L0XC1Ev>:
class HAL_VL53L0X {
 8000eba:	b480      	push	{r7}
 8000ebc:	b083      	sub	sp, #12
 8000ebe:	af00      	add	r7, sp, #0
 8000ec0:	6078      	str	r0, [r7, #4]
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	701a      	strb	r2, [r3, #0]
      VL53L0X_ERROR_NONE; ///< indicates whether or not the sensor has
                          ///< encountered an error

private:
  VL53L0X_Dev_t MyDevice;
  VL53L0X_Dev_t *pMyDevice = &MyDevice;
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	1d1a      	adds	r2, r3, #4
class HAL_VL53L0X {
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
  VL53L0X_Version_t Version;
  VL53L0X_Version_t *pVersion = &Version;
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	f503 72b6 	add.w	r2, r3, #364	; 0x16c
class HAL_VL53L0X {
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	f8c3 2174 	str.w	r2, [r3, #372]	; 0x174
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	370c      	adds	r7, #12
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eea:	4770      	bx	lr

08000eec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000eec:	b5b0      	push	{r4, r5, r7, lr}
 8000eee:	b0a0      	sub	sp, #128	; 0x80
 8000ef0:	af04      	add	r7, sp, #16
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ef2:	f001 fd87 	bl	8002a04 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ef6:	f000 fb57 	bl	80015a8 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000efa:	f000 fd35 	bl	8001968 <_ZL12MX_GPIO_Initv>
  MX_I2C1_Init();
 8000efe:	f000 fc1d 	bl	800173c <_ZL12MX_I2C1_Initv>
  MX_JPEG_Init();
 8000f02:	f000 fcb7 	bl	8001874 <_ZL12MX_JPEG_Initv>
  MX_UART8_Init();
 8000f06:	f000 fccd 	bl	80018a4 <_ZL13MX_UART8_Initv>
  MX_I2C3_Init();
 8000f0a:	f000 fc65 	bl	80017d8 <_ZL12MX_I2C3_Initv>
  /* USER CODE BEGIN 2 */

  printf("Beginning ToF initialization...\n");
 8000f0e:	489f      	ldr	r0, [pc, #636]	; (800118c <main+0x2a0>)
 8000f10:	f00f f9d4 	bl	80102bc <puts>

   HAL_GPIO_WritePin(GPIOA, SH1_Pin, GPIO_PIN_RESET);
 8000f14:	2200      	movs	r2, #0
 8000f16:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f1a:	489d      	ldr	r0, [pc, #628]	; (8001190 <main+0x2a4>)
 8000f1c:	f002 fbbe 	bl	800369c <HAL_GPIO_WritePin>
   HAL_GPIO_WritePin(GPIOA, SH2_Pin, GPIO_PIN_RESET);
 8000f20:	2200      	movs	r2, #0
 8000f22:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f26:	489a      	ldr	r0, [pc, #616]	; (8001190 <main+0x2a4>)
 8000f28:	f002 fbb8 	bl	800369c <HAL_GPIO_WritePin>
   HAL_GPIO_WritePin(GPIOA, SH3_Pin, GPIO_PIN_RESET);
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f32:	4897      	ldr	r0, [pc, #604]	; (8001190 <main+0x2a4>)
 8000f34:	f002 fbb2 	bl	800369c <HAL_GPIO_WritePin>
   HAL_GPIO_WritePin(GPIOA, SH4_Pin, GPIO_PIN_RESET);
 8000f38:	2200      	movs	r2, #0
 8000f3a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f3e:	4894      	ldr	r0, [pc, #592]	; (8001190 <main+0x2a4>)
 8000f40:	f002 fbac 	bl	800369c <HAL_GPIO_WritePin>
   HAL_GPIO_WritePin(GPIOC, SH5_Pin, GPIO_PIN_RESET);
 8000f44:	2200      	movs	r2, #0
 8000f46:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f4a:	4892      	ldr	r0, [pc, #584]	; (8001194 <main+0x2a8>)
 8000f4c:	f002 fba6 	bl	800369c <HAL_GPIO_WritePin>
   HAL_GPIO_WritePin(GPIOC, SH6_Pin, GPIO_PIN_RESET);
 8000f50:	2200      	movs	r2, #0
 8000f52:	2180      	movs	r1, #128	; 0x80
 8000f54:	488f      	ldr	r0, [pc, #572]	; (8001194 <main+0x2a8>)
 8000f56:	f002 fba1 	bl	800369c <HAL_GPIO_WritePin>
   HAL_GPIO_WritePin(GPIOC, SH7_Pin, GPIO_PIN_RESET);
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	2140      	movs	r1, #64	; 0x40
 8000f5e:	488d      	ldr	r0, [pc, #564]	; (8001194 <main+0x2a8>)
 8000f60:	f002 fb9c 	bl	800369c <HAL_GPIO_WritePin>

   HAL_Delay(10);
 8000f64:	200a      	movs	r0, #10
 8000f66:	f001 fddb 	bl	8002b20 <HAL_Delay>


   HAL_GPIO_WritePin(GPIOA, SH1_Pin, GPIO_PIN_SET);
 8000f6a:	2201      	movs	r2, #1
 8000f6c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f70:	4887      	ldr	r0, [pc, #540]	; (8001190 <main+0x2a4>)
 8000f72:	f002 fb93 	bl	800369c <HAL_GPIO_WritePin>
   if (!sensor[0].begin(TOF_ADD1, false, &hi2c1))
 8000f76:	4b88      	ldr	r3, [pc, #544]	; (8001198 <main+0x2ac>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	2119      	movs	r1, #25
 8000f7c:	4887      	ldr	r0, [pc, #540]	; (800119c <main+0x2b0>)
 8000f7e:	f009 ff81 	bl	800ae84 <_ZN11HAL_VL53L0X5beginEhbP19__I2C_HandleTypeDef>
 8000f82:	4603      	mov	r3, r0
 8000f84:	f083 0301 	eor.w	r3, r3, #1
 8000f88:	b2db      	uxtb	r3, r3
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d002      	beq.n	8000f94 <main+0xa8>
 	  printf("Begin statement 1 failed.\n");
 8000f8e:	4884      	ldr	r0, [pc, #528]	; (80011a0 <main+0x2b4>)
 8000f90:	f00f f994 	bl	80102bc <puts>

   HAL_GPIO_WritePin(GPIOA, SH2_Pin, GPIO_PIN_SET);
 8000f94:	2201      	movs	r2, #1
 8000f96:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f9a:	487d      	ldr	r0, [pc, #500]	; (8001190 <main+0x2a4>)
 8000f9c:	f002 fb7e 	bl	800369c <HAL_GPIO_WritePin>
   if (!sensor[1].begin(TOF_ADD2, false, &hi2c1))
 8000fa0:	4b7d      	ldr	r3, [pc, #500]	; (8001198 <main+0x2ac>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	211a      	movs	r1, #26
 8000fa6:	487f      	ldr	r0, [pc, #508]	; (80011a4 <main+0x2b8>)
 8000fa8:	f009 ff6c 	bl	800ae84 <_ZN11HAL_VL53L0X5beginEhbP19__I2C_HandleTypeDef>
 8000fac:	4603      	mov	r3, r0
 8000fae:	f083 0301 	eor.w	r3, r3, #1
 8000fb2:	b2db      	uxtb	r3, r3
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d002      	beq.n	8000fbe <main+0xd2>
 	  printf("Begin statement 2 failed.\n");
 8000fb8:	487b      	ldr	r0, [pc, #492]	; (80011a8 <main+0x2bc>)
 8000fba:	f00f f97f 	bl	80102bc <puts>

   HAL_GPIO_WritePin(GPIOA, SH3_Pin, GPIO_PIN_SET);
 8000fbe:	2201      	movs	r2, #1
 8000fc0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000fc4:	4872      	ldr	r0, [pc, #456]	; (8001190 <main+0x2a4>)
 8000fc6:	f002 fb69 	bl	800369c <HAL_GPIO_WritePin>
   if (!sensor[2].begin(TOF_ADD3, false, &hi2c1))
 8000fca:	4b73      	ldr	r3, [pc, #460]	; (8001198 <main+0x2ac>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	211b      	movs	r1, #27
 8000fd0:	4876      	ldr	r0, [pc, #472]	; (80011ac <main+0x2c0>)
 8000fd2:	f009 ff57 	bl	800ae84 <_ZN11HAL_VL53L0X5beginEhbP19__I2C_HandleTypeDef>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	f083 0301 	eor.w	r3, r3, #1
 8000fdc:	b2db      	uxtb	r3, r3
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d002      	beq.n	8000fe8 <main+0xfc>
 	  printf("Begin statement 3 failed.\n");
 8000fe2:	4873      	ldr	r0, [pc, #460]	; (80011b0 <main+0x2c4>)
 8000fe4:	f00f f96a 	bl	80102bc <puts>

   HAL_GPIO_WritePin(GPIOA, SH4_Pin, GPIO_PIN_SET);
 8000fe8:	2201      	movs	r2, #1
 8000fea:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000fee:	4868      	ldr	r0, [pc, #416]	; (8001190 <main+0x2a4>)
 8000ff0:	f002 fb54 	bl	800369c <HAL_GPIO_WritePin>
   if (!sensor[3].begin(TOF_ADD4, false, &hi2c1))
 8000ff4:	4b68      	ldr	r3, [pc, #416]	; (8001198 <main+0x2ac>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	211c      	movs	r1, #28
 8000ffa:	486e      	ldr	r0, [pc, #440]	; (80011b4 <main+0x2c8>)
 8000ffc:	f009 ff42 	bl	800ae84 <_ZN11HAL_VL53L0X5beginEhbP19__I2C_HandleTypeDef>
 8001000:	4603      	mov	r3, r0
 8001002:	f083 0301 	eor.w	r3, r3, #1
 8001006:	b2db      	uxtb	r3, r3
 8001008:	2b00      	cmp	r3, #0
 800100a:	d002      	beq.n	8001012 <main+0x126>
 	  printf("Begin statement 4 failed.\n");
 800100c:	486a      	ldr	r0, [pc, #424]	; (80011b8 <main+0x2cc>)
 800100e:	f00f f955 	bl	80102bc <puts>

   HAL_GPIO_WritePin(GPIOC, SH5_Pin, GPIO_PIN_SET);
 8001012:	2201      	movs	r2, #1
 8001014:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001018:	485e      	ldr	r0, [pc, #376]	; (8001194 <main+0x2a8>)
 800101a:	f002 fb3f 	bl	800369c <HAL_GPIO_WritePin>
   if (!sensor[4].begin(TOF_ADD5, false, &hi2c1))
 800101e:	4b5e      	ldr	r3, [pc, #376]	; (8001198 <main+0x2ac>)
 8001020:	2200      	movs	r2, #0
 8001022:	211d      	movs	r1, #29
 8001024:	4865      	ldr	r0, [pc, #404]	; (80011bc <main+0x2d0>)
 8001026:	f009 ff2d 	bl	800ae84 <_ZN11HAL_VL53L0X5beginEhbP19__I2C_HandleTypeDef>
 800102a:	4603      	mov	r3, r0
 800102c:	f083 0301 	eor.w	r3, r3, #1
 8001030:	b2db      	uxtb	r3, r3
 8001032:	2b00      	cmp	r3, #0
 8001034:	d002      	beq.n	800103c <main+0x150>
 	  printf("Begin statement 5 failed.\n");
 8001036:	4862      	ldr	r0, [pc, #392]	; (80011c0 <main+0x2d4>)
 8001038:	f00f f940 	bl	80102bc <puts>

   HAL_GPIO_WritePin(GPIOC, SH6_Pin, GPIO_PIN_SET);
 800103c:	2201      	movs	r2, #1
 800103e:	2180      	movs	r1, #128	; 0x80
 8001040:	4854      	ldr	r0, [pc, #336]	; (8001194 <main+0x2a8>)
 8001042:	f002 fb2b 	bl	800369c <HAL_GPIO_WritePin>
   if (!sensor[5].begin(TOF_ADD6, false, &hi2c1))
 8001046:	4b54      	ldr	r3, [pc, #336]	; (8001198 <main+0x2ac>)
 8001048:	2200      	movs	r2, #0
 800104a:	211e      	movs	r1, #30
 800104c:	485d      	ldr	r0, [pc, #372]	; (80011c4 <main+0x2d8>)
 800104e:	f009 ff19 	bl	800ae84 <_ZN11HAL_VL53L0X5beginEhbP19__I2C_HandleTypeDef>
 8001052:	4603      	mov	r3, r0
 8001054:	f083 0301 	eor.w	r3, r3, #1
 8001058:	b2db      	uxtb	r3, r3
 800105a:	2b00      	cmp	r3, #0
 800105c:	d002      	beq.n	8001064 <main+0x178>
 	  printf("Begin statement 6 failed.\n");
 800105e:	485a      	ldr	r0, [pc, #360]	; (80011c8 <main+0x2dc>)
 8001060:	f00f f92c 	bl	80102bc <puts>

   HAL_GPIO_WritePin(GPIOC, SH7_Pin, GPIO_PIN_SET);
 8001064:	2201      	movs	r2, #1
 8001066:	2140      	movs	r1, #64	; 0x40
 8001068:	484a      	ldr	r0, [pc, #296]	; (8001194 <main+0x2a8>)
 800106a:	f002 fb17 	bl	800369c <HAL_GPIO_WritePin>
   if (!sensor[6].begin(TOF_ADD7, false, &hi2c1))
 800106e:	4b4a      	ldr	r3, [pc, #296]	; (8001198 <main+0x2ac>)
 8001070:	2200      	movs	r2, #0
 8001072:	211f      	movs	r1, #31
 8001074:	4855      	ldr	r0, [pc, #340]	; (80011cc <main+0x2e0>)
 8001076:	f009 ff05 	bl	800ae84 <_ZN11HAL_VL53L0X5beginEhbP19__I2C_HandleTypeDef>
 800107a:	4603      	mov	r3, r0
 800107c:	f083 0301 	eor.w	r3, r3, #1
 8001080:	b2db      	uxtb	r3, r3
 8001082:	2b00      	cmp	r3, #0
 8001084:	d002      	beq.n	800108c <main+0x1a0>
 	  printf("Begin statement 7 failed.\n");
 8001086:	4852      	ldr	r0, [pc, #328]	; (80011d0 <main+0x2e4>)
 8001088:	f00f f918 	bl	80102bc <puts>



   printf("Finished ToF initialization thus far.\n");
 800108c:	4851      	ldr	r0, [pc, #324]	; (80011d4 <main+0x2e8>)
 800108e:	f00f f915 	bl	80102bc <puts>

   // initialize camera before anything else with desired resolution, amount of compression (0x0 to 0xFF), and baudrate
   // note: current issue exists, it appears that attempting to change the baud rate will change the camera's baud rate, but our UART will stay
   //		at 38400 baud, we lose out on 3x speedup because of this but we are unsure of how to fix
   Camera_Initialize(&huart8, 1, 0xFF, 38400);
 8001092:	f44f 4316 	mov.w	r3, #38400	; 0x9600
 8001096:	22ff      	movs	r2, #255	; 0xff
 8001098:	2101      	movs	r1, #1
 800109a:	484f      	ldr	r0, [pc, #316]	; (80011d8 <main+0x2ec>)
 800109c:	f7ff fe02 	bl	8000ca4 <Camera_Initialize>
   HAL_Delay(10);
 80010a0:	200a      	movs	r0, #10
 80010a2:	f001 fd3d 	bl	8002b20 <HAL_Delay>

   //initialization of frameptr, must be incremented to request images correctly
   uint16_t frameptr = 0;
 80010a6:	2300      	movs	r3, #0
 80010a8:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a

   HAL_StatusTypeDef result = HAL_ERROR;
 80010ac:	2301      	movs	r3, #1
 80010ae:	f887 3059 	strb.w	r3, [r7, #89]	; 0x59

   // initialization of circular buffer
   for (int i = 0; i < buff_list_size-1; i++) {
 80010b2:	2300      	movs	r3, #0
 80010b4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80010b6:	4b49      	ldr	r3, [pc, #292]	; (80011dc <main+0x2f0>)
 80010b8:	781b      	ldrb	r3, [r3, #0]
 80010ba:	3b01      	subs	r3, #1
 80010bc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80010be:	429a      	cmp	r2, r3
 80010c0:	da1b      	bge.n	80010fa <main+0x20e>
    buffer_list[i].jpeg_size = 0;
 80010c2:	4a47      	ldr	r2, [pc, #284]	; (80011e0 <main+0x2f4>)
 80010c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80010c6:	4947      	ldr	r1, [pc, #284]	; (80011e4 <main+0x2f8>)
 80010c8:	fb01 f303 	mul.w	r3, r1, r3
 80010cc:	4413      	add	r3, r2
 80010ce:	2200      	movs	r2, #0
 80010d0:	801a      	strh	r2, [r3, #0]
    buffer_list[i].next = buffer_list + i + 1;
 80010d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80010d4:	3301      	adds	r3, #1
 80010d6:	4a43      	ldr	r2, [pc, #268]	; (80011e4 <main+0x2f8>)
 80010d8:	fb02 f303 	mul.w	r3, r2, r3
 80010dc:	4a40      	ldr	r2, [pc, #256]	; (80011e0 <main+0x2f4>)
 80010de:	441a      	add	r2, r3
 80010e0:	493f      	ldr	r1, [pc, #252]	; (80011e0 <main+0x2f4>)
 80010e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80010e4:	483f      	ldr	r0, [pc, #252]	; (80011e4 <main+0x2f8>)
 80010e6:	fb00 f303 	mul.w	r3, r0, r3
 80010ea:	4419      	add	r1, r3
 80010ec:	4b3e      	ldr	r3, [pc, #248]	; (80011e8 <main+0x2fc>)
 80010ee:	440b      	add	r3, r1
 80010f0:	601a      	str	r2, [r3, #0]
   for (int i = 0; i < buff_list_size-1; i++) {
 80010f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80010f4:	3301      	adds	r3, #1
 80010f6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80010f8:	e7dd      	b.n	80010b6 <main+0x1ca>
   }
   buffer_list[buff_list_size-1].jpeg_size = 0;
 80010fa:	4b38      	ldr	r3, [pc, #224]	; (80011dc <main+0x2f0>)
 80010fc:	781b      	ldrb	r3, [r3, #0]
 80010fe:	3b01      	subs	r3, #1
 8001100:	4a37      	ldr	r2, [pc, #220]	; (80011e0 <main+0x2f4>)
 8001102:	4938      	ldr	r1, [pc, #224]	; (80011e4 <main+0x2f8>)
 8001104:	fb01 f303 	mul.w	r3, r1, r3
 8001108:	4413      	add	r3, r2
 800110a:	2200      	movs	r2, #0
 800110c:	801a      	strh	r2, [r3, #0]
   buffer_list[buff_list_size-1].next = buffer_list;
 800110e:	4b33      	ldr	r3, [pc, #204]	; (80011dc <main+0x2f0>)
 8001110:	781b      	ldrb	r3, [r3, #0]
 8001112:	3b01      	subs	r3, #1
 8001114:	4a32      	ldr	r2, [pc, #200]	; (80011e0 <main+0x2f4>)
 8001116:	4933      	ldr	r1, [pc, #204]	; (80011e4 <main+0x2f8>)
 8001118:	fb01 f303 	mul.w	r3, r1, r3
 800111c:	441a      	add	r2, r3
 800111e:	4b32      	ldr	r3, [pc, #200]	; (80011e8 <main+0x2fc>)
 8001120:	4413      	add	r3, r2
 8001122:	4a2f      	ldr	r2, [pc, #188]	; (80011e0 <main+0x2f4>)
 8001124:	601a      	str	r2, [r3, #0]

   buffer_link* curr_link = buffer_list;
 8001126:	4b2e      	ldr	r3, [pc, #184]	; (80011e0 <main+0x2f4>)
 8001128:	66bb      	str	r3, [r7, #104]	; 0x68
   buffer_link* transmit_link = NULL;
 800112a:	2300      	movs	r3, #0
 800112c:	657b      	str	r3, [r7, #84]	; 0x54

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
 	  printf("Beginning while loop.\n");
 800112e:	482f      	ldr	r0, [pc, #188]	; (80011ec <main+0x300>)
 8001130:	f00f f8c4 	bl	80102bc <puts>

 	  // begin with ToF data collection for the image we are about to take a snapshot of
 	  // note: currently API does not function, so this function does not work, but its place in the flow should be around here
	  get_TOF_Data();
 8001134:	f000 fc94 	bl	8001a60 <get_TOF_Data>
	   *
	   * Some ACK checks could be added to verify information, but otherwise the
	   * flow of the below code should be mostly finalized.
	   */

	  HAL_Delay(100);
 8001138:	2064      	movs	r0, #100	; 0x64
 800113a:	f001 fcf1 	bl	8002b20 <HAL_Delay>
	  printf("Taking snapshot...\n");
 800113e:	482c      	ldr	r0, [pc, #176]	; (80011f0 <main+0x304>)
 8001140:	f00f f8bc 	bl	80102bc <puts>
	  uint8_t snapshot_ack[5];
	  uint8_t *snapshot_ack1 = snapshot_ack;
 8001144:	f107 0318 	add.w	r3, r7, #24
 8001148:	653b      	str	r3, [r7, #80]	; 0x50
	  Camera_Snapshot(&huart8, snapshot_ack1, sizeof(snapshot_ack));
 800114a:	2205      	movs	r2, #5
 800114c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800114e:	4822      	ldr	r0, [pc, #136]	; (80011d8 <main+0x2ec>)
 8001150:	f7ff fbbe 	bl	80008d0 <Camera_Snapshot>

	  if (snapshot_ack[0] == 0x76)
 8001154:	7e3b      	ldrb	r3, [r7, #24]
 8001156:	2b76      	cmp	r3, #118	; 0x76
 8001158:	d103      	bne.n	8001162 <main+0x276>
		  printf("Ack for snapshot received.\n");
 800115a:	4826      	ldr	r0, [pc, #152]	; (80011f4 <main+0x308>)
 800115c:	f00f f8ae 	bl	80102bc <puts>
 8001160:	e002      	b.n	8001168 <main+0x27c>
	  else
		  printf("No ack received for snapshot.\n");
 8001162:	4825      	ldr	r0, [pc, #148]	; (80011f8 <main+0x30c>)
 8001164:	f00f f8aa 	bl	80102bc <puts>

	  printf("Getting image length...\n");
 8001168:	4824      	ldr	r0, [pc, #144]	; (80011fc <main+0x310>)
 800116a:	f00f f8a7 	bl	80102bc <puts>
	  uint8_t length_ack[9];
	  Camera_Get_IMG_Length(&huart8, length_ack, sizeof(length_ack));
 800116e:	f107 030c 	add.w	r3, r7, #12
 8001172:	2209      	movs	r2, #9
 8001174:	4619      	mov	r1, r3
 8001176:	4818      	ldr	r0, [pc, #96]	; (80011d8 <main+0x2ec>)
 8001178:	f7ff fc0a 	bl	8000990 <Camera_Get_IMG_Length>

	  if (length_ack[0] == 0x76)
 800117c:	7b3b      	ldrb	r3, [r7, #12]
 800117e:	2b76      	cmp	r3, #118	; 0x76
 8001180:	d140      	bne.n	8001204 <main+0x318>
		  printf("Ack for image length received.\n");
 8001182:	481f      	ldr	r0, [pc, #124]	; (8001200 <main+0x314>)
 8001184:	f00f f89a 	bl	80102bc <puts>
 8001188:	e03f      	b.n	800120a <main+0x31e>
 800118a:	bf00      	nop
 800118c:	0801121c 	.word	0x0801121c
 8001190:	58020000 	.word	0x58020000
 8001194:	58020800 	.word	0x58020800
 8001198:	240003d4 	.word	0x240003d4
 800119c:	24000550 	.word	0x24000550
 80011a0:	0801123c 	.word	0x0801123c
 80011a4:	2400072c 	.word	0x2400072c
 80011a8:	08011258 	.word	0x08011258
 80011ac:	24000908 	.word	0x24000908
 80011b0:	08011274 	.word	0x08011274
 80011b4:	24000ae4 	.word	0x24000ae4
 80011b8:	08011290 	.word	0x08011290
 80011bc:	24000cc0 	.word	0x24000cc0
 80011c0:	080112ac 	.word	0x080112ac
 80011c4:	24000e9c 	.word	0x24000e9c
 80011c8:	080112c8 	.word	0x080112c8
 80011cc:	24001078 	.word	0x24001078
 80011d0:	080112e4 	.word	0x080112e4
 80011d4:	08011300 	.word	0x08011300
 80011d8:	240004c4 	.word	0x240004c4
 80011dc:	24000085 	.word	0x24000085
 80011e0:	24001260 	.word	0x24001260
 80011e4:	00015638 	.word	0x00015638
 80011e8:	00015634 	.word	0x00015634
 80011ec:	08011328 	.word	0x08011328
 80011f0:	08011340 	.word	0x08011340
 80011f4:	08011354 	.word	0x08011354
 80011f8:	08011370 	.word	0x08011370
 80011fc:	08011390 	.word	0x08011390
 8001200:	080113a8 	.word	0x080113a8
	  else
		  printf("No ack received for image length.\n");
 8001204:	489d      	ldr	r0, [pc, #628]	; (800147c <main+0x590>)
 8001206:	f00f f859 	bl	80102bc <puts>

	  // indices 7 and 8 of the length_ack should have actual values
	  uint16_t img_length = (((uint16_t) length_ack[7]) << 8) + (uint16_t) length_ack[8];
 800120a:	7cfb      	ldrb	r3, [r7, #19]
 800120c:	b29b      	uxth	r3, r3
 800120e:	021b      	lsls	r3, r3, #8
 8001210:	b29a      	uxth	r2, r3
 8001212:	7d3b      	ldrb	r3, [r7, #20]
 8001214:	b29b      	uxth	r3, r3
 8001216:	4413      	add	r3, r2
 8001218:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
	  printf("Found image length: %lu\n", img_length);
 800121c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001220:	4619      	mov	r1, r3
 8001222:	4897      	ldr	r0, [pc, #604]	; (8001480 <main+0x594>)
 8001224:	f00e ffc2 	bl	80101ac <iprintf>




	  curr_link->jpeg_size = img_length;
 8001228:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800122a:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800122e:	801a      	strh	r2, [r3, #0]

	  uint32_t ticktransfer1 = HAL_GetTick();
 8001230:	f001 fc6a 	bl	8002b08 <HAL_GetTick>
 8001234:	64b8      	str	r0, [r7, #72]	; 0x48

	  printf("Getting image...\n");
 8001236:	4893      	ldr	r0, [pc, #588]	; (8001484 <main+0x598>)
 8001238:	f00f f840 	bl	80102bc <puts>
	  Camera_Get_IMG(&huart8, curr_link->jpeg, (10+img_length), length_ack[7], length_ack[8], (uint8_t) (frameptr >> 8), (uint8_t) frameptr);
 800123c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800123e:	1c98      	adds	r0, r3, #2
 8001240:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001244:	330a      	adds	r3, #10
 8001246:	b29c      	uxth	r4, r3
 8001248:	7cfd      	ldrb	r5, [r7, #19]
 800124a:	7d3b      	ldrb	r3, [r7, #20]
 800124c:	f8b7 205a 	ldrh.w	r2, [r7, #90]	; 0x5a
 8001250:	1212      	asrs	r2, r2, #8
 8001252:	b2d2      	uxtb	r2, r2
 8001254:	f8b7 105a 	ldrh.w	r1, [r7, #90]	; 0x5a
 8001258:	b2c9      	uxtb	r1, r1
 800125a:	9102      	str	r1, [sp, #8]
 800125c:	9201      	str	r2, [sp, #4]
 800125e:	9300      	str	r3, [sp, #0]
 8001260:	462b      	mov	r3, r5
 8001262:	4622      	mov	r2, r4
 8001264:	4601      	mov	r1, r0
 8001266:	4888      	ldr	r0, [pc, #544]	; (8001488 <main+0x59c>)
 8001268:	f7ff fbc0 	bl	80009ec <Camera_Get_IMG>

	  uint32_t ticktransfer2 = HAL_GetTick();
 800126c:	f001 fc4c 	bl	8002b08 <HAL_GetTick>
 8001270:	6478      	str	r0, [r7, #68]	; 0x44

	  printf("Image transfer time: %lu\n", ticktransfer2 - ticktransfer1);
 8001272:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001274:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001276:	1ad3      	subs	r3, r2, r3
 8001278:	4619      	mov	r1, r3
 800127a:	4884      	ldr	r0, [pc, #528]	; (800148c <main+0x5a0>)
 800127c:	f00e ff96 	bl	80101ac <iprintf>

	  uint8_t stop_ack[5];
	  uint8_t* stop_ack1 = stop_ack;
 8001280:	1d3b      	adds	r3, r7, #4
 8001282:	643b      	str	r3, [r7, #64]	; 0x40
	  Camera_Stop_Capture(&huart8, stop_ack1, sizeof(stop_ack));
 8001284:	2205      	movs	r2, #5
 8001286:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8001288:	487f      	ldr	r0, [pc, #508]	; (8001488 <main+0x59c>)
 800128a:	f7ff fb51 	bl	8000930 <Camera_Stop_Capture>

	  if (stop_ack[0] == 0x76)
 800128e:	793b      	ldrb	r3, [r7, #4]
 8001290:	2b76      	cmp	r3, #118	; 0x76
 8001292:	d103      	bne.n	800129c <main+0x3b0>
		  printf("Ack for stopping capture received.\n");
 8001294:	487e      	ldr	r0, [pc, #504]	; (8001490 <main+0x5a4>)
 8001296:	f00f f811 	bl	80102bc <puts>
 800129a:	e002      	b.n	80012a2 <main+0x3b6>
	  else
		  printf("No ack received for stopping capture.\n");
 800129c:	487d      	ldr	r0, [pc, #500]	; (8001494 <main+0x5a8>)
 800129e:	f00f f80d 	bl	80102bc <puts>


	  uint8_t* jpeg_img_buf = curr_link->jpeg;
 80012a2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80012a4:	3302      	adds	r3, #2
 80012a6:	63fb      	str	r3, [r7, #60]	; 0x3c
	  jpeg_img_buf += 5;
 80012a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80012aa:	3305      	adds	r3, #5
 80012ac:	63fb      	str	r3, [r7, #60]	; 0x3c
			  //HAL_Delay(10);
		  }
	  }
*/

	  uint8_t red_mask = 0b11111000;
 80012ae:	23f8      	movs	r3, #248	; 0xf8
 80012b0:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	  uint8_t blue_mask = 0b00011111;
 80012b4:	231f      	movs	r3, #31
 80012b6:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
	  uint8_t greenh_mask = 0b00000111;
 80012ba:	2307      	movs	r3, #7
 80012bc:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
	  uint8_t greenl_mask = 0b11100000;
 80012c0:	23e0      	movs	r3, #224	; 0xe0
 80012c2:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38

	  curr_link->rgb[11200] = 255;
 80012c6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80012c8:	f24a 03f2 	movw	r3, #41202	; 0xa0f2
 80012cc:	4413      	add	r3, r2
 80012ce:	22ff      	movs	r2, #255	; 0xff
 80012d0:	701a      	strb	r2, [r3, #0]
	  uint32_t tickj = HAL_GetTick();
 80012d2:	f001 fc19 	bl	8002b08 <HAL_GetTick>
 80012d6:	6378      	str	r0, [r7, #52]	; 0x34
	  result = HAL_JPEG_Decode(&hjpeg, jpeg_img_buf, (uint32_t) curr_link->jpeg_size, curr_link->rgb, 57600, 3000);
 80012d8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80012da:	881b      	ldrh	r3, [r3, #0]
 80012dc:	4619      	mov	r1, r3
 80012de:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80012e0:	f247 5332 	movw	r3, #30002	; 0x7532
 80012e4:	4413      	add	r3, r2
 80012e6:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80012ea:	9201      	str	r2, [sp, #4]
 80012ec:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 80012f0:	9200      	str	r2, [sp, #0]
 80012f2:	460a      	mov	r2, r1
 80012f4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80012f6:	4868      	ldr	r0, [pc, #416]	; (8001498 <main+0x5ac>)
 80012f8:	f003 fa15 	bl	8004726 <HAL_JPEG_Decode>
 80012fc:	4603      	mov	r3, r0
 80012fe:	f887 3059 	strb.w	r3, [r7, #89]	; 0x59

	  uint8_t* buff_check = curr_link->rgb;
 8001302:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8001304:	f247 5332 	movw	r3, #30002	; 0x7532
 8001308:	4413      	add	r3, r2
 800130a:	633b      	str	r3, [r7, #48]	; 0x30
	  buff_check++;
 800130c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800130e:	3301      	adds	r3, #1
 8001310:	633b      	str	r3, [r7, #48]	; 0x30
	  buff_check++;
 8001312:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001314:	3301      	adds	r3, #1
 8001316:	633b      	str	r3, [r7, #48]	; 0x30
	  buff_check++;
 8001318:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800131a:	3301      	adds	r3, #1
 800131c:	633b      	str	r3, [r7, #48]	; 0x30
	  buff_check++;
 800131e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001320:	3301      	adds	r3, #1
 8001322:	633b      	str	r3, [r7, #48]	; 0x30
	  buff_check++;
 8001324:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001326:	3301      	adds	r3, #1
 8001328:	633b      	str	r3, [r7, #48]	; 0x30

	  if (result == HAL_OK) {
 800132a:	f897 3059 	ldrb.w	r3, [r7, #89]	; 0x59
 800132e:	2b00      	cmp	r3, #0
 8001330:	f040 80bc 	bne.w	80014ac <main+0x5c0>
		  printf("JPEG conversion finished successfully.\n");
 8001334:	4859      	ldr	r0, [pc, #356]	; (800149c <main+0x5b0>)
 8001336:	f00e ffc1 	bl	80102bc <puts>

		  //seems that output is only RGB565, further testing needed but RGB888 is unresponsive and output is 2/3 of expected size
		  for (uint64_t i = 0; i < 80; i++) {
 800133a:	f04f 0300 	mov.w	r3, #0
 800133e:	f04f 0400 	mov.w	r4, #0
 8001342:	e9c7 3418 	strd	r3, r4, [r7, #96]	; 0x60
 8001346:	e9d7 3418 	ldrd	r3, r4, [r7, #96]	; 0x60
 800134a:	2c00      	cmp	r4, #0
 800134c:	bf08      	it	eq
 800134e:	2b50      	cmpeq	r3, #80	; 0x50
 8001350:	f080 808f 	bcs.w	8001472 <main+0x586>
			  //printf("{%d, %d} ", curr_link->rgb[19200+2*i], curr_link->rgb[19200+2*i+1]);

			  uint16_t red_v = ((red_mask & curr_link->rgb[19200+2*i+1]) >> 3)*255/31;
 8001354:	e9d7 3418 	ldrd	r3, r4, [r7, #96]	; 0x60
 8001358:	f513 5116 	adds.w	r1, r3, #9600	; 0x2580
 800135c:	f144 0200 	adc.w	r2, r4, #0
 8001360:	184b      	adds	r3, r1, r1
 8001362:	eb42 0402 	adc.w	r4, r2, r2
 8001366:	4619      	mov	r1, r3
 8001368:	4622      	mov	r2, r4
 800136a:	1c4b      	adds	r3, r1, #1
 800136c:	f142 0400 	adc.w	r4, r2, #0
 8001370:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8001372:	441a      	add	r2, r3
 8001374:	f247 5332 	movw	r3, #30002	; 0x7532
 8001378:	4413      	add	r3, r2
 800137a:	781a      	ldrb	r2, [r3, #0]
 800137c:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001380:	4013      	ands	r3, r2
 8001382:	b2db      	uxtb	r3, r3
 8001384:	10da      	asrs	r2, r3, #3
 8001386:	4613      	mov	r3, r2
 8001388:	021b      	lsls	r3, r3, #8
 800138a:	1a9b      	subs	r3, r3, r2
 800138c:	4a44      	ldr	r2, [pc, #272]	; (80014a0 <main+0x5b4>)
 800138e:	fb82 1203 	smull	r1, r2, r2, r3
 8001392:	441a      	add	r2, r3
 8001394:	1112      	asrs	r2, r2, #4
 8001396:	17db      	asrs	r3, r3, #31
 8001398:	1ad3      	subs	r3, r2, r3
 800139a:	85fb      	strh	r3, [r7, #46]	; 0x2e
			  uint16_t blue_v = ((blue_mask & curr_link->rgb[19200+2*i]))*255/31;
 800139c:	e9d7 3418 	ldrd	r3, r4, [r7, #96]	; 0x60
 80013a0:	f513 5116 	adds.w	r1, r3, #9600	; 0x2580
 80013a4:	f144 0200 	adc.w	r2, r4, #0
 80013a8:	184b      	adds	r3, r1, r1
 80013aa:	eb42 0402 	adc.w	r4, r2, r2
 80013ae:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80013b0:	441a      	add	r2, r3
 80013b2:	f247 5332 	movw	r3, #30002	; 0x7532
 80013b6:	4413      	add	r3, r2
 80013b8:	781a      	ldrb	r2, [r3, #0]
 80013ba:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 80013be:	4013      	ands	r3, r2
 80013c0:	b2db      	uxtb	r3, r3
 80013c2:	461a      	mov	r2, r3
 80013c4:	4613      	mov	r3, r2
 80013c6:	021b      	lsls	r3, r3, #8
 80013c8:	1a9b      	subs	r3, r3, r2
 80013ca:	4a35      	ldr	r2, [pc, #212]	; (80014a0 <main+0x5b4>)
 80013cc:	fb82 1203 	smull	r1, r2, r2, r3
 80013d0:	441a      	add	r2, r3
 80013d2:	1112      	asrs	r2, r2, #4
 80013d4:	17db      	asrs	r3, r3, #31
 80013d6:	1ad3      	subs	r3, r2, r3
 80013d8:	85bb      	strh	r3, [r7, #44]	; 0x2c
			  uint16_t greenl_v = (greenl_mask & curr_link->rgb[19200+2*i]) >> 5;
 80013da:	e9d7 3418 	ldrd	r3, r4, [r7, #96]	; 0x60
 80013de:	f513 5116 	adds.w	r1, r3, #9600	; 0x2580
 80013e2:	f144 0200 	adc.w	r2, r4, #0
 80013e6:	184b      	adds	r3, r1, r1
 80013e8:	eb42 0402 	adc.w	r4, r2, r2
 80013ec:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80013ee:	441a      	add	r2, r3
 80013f0:	f247 5332 	movw	r3, #30002	; 0x7532
 80013f4:	4413      	add	r3, r2
 80013f6:	781a      	ldrb	r2, [r3, #0]
 80013f8:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80013fc:	4013      	ands	r3, r2
 80013fe:	b2db      	uxtb	r3, r3
 8001400:	115b      	asrs	r3, r3, #5
 8001402:	857b      	strh	r3, [r7, #42]	; 0x2a
			  uint16_t greenh_v = (greenh_mask & curr_link->rgb[19200+2*i+1]) << 3;
 8001404:	e9d7 3418 	ldrd	r3, r4, [r7, #96]	; 0x60
 8001408:	f513 5116 	adds.w	r1, r3, #9600	; 0x2580
 800140c:	f144 0200 	adc.w	r2, r4, #0
 8001410:	184b      	adds	r3, r1, r1
 8001412:	eb42 0402 	adc.w	r4, r2, r2
 8001416:	4619      	mov	r1, r3
 8001418:	4622      	mov	r2, r4
 800141a:	1c4b      	adds	r3, r1, #1
 800141c:	f142 0400 	adc.w	r4, r2, #0
 8001420:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8001422:	441a      	add	r2, r3
 8001424:	f247 5332 	movw	r3, #30002	; 0x7532
 8001428:	4413      	add	r3, r2
 800142a:	781a      	ldrb	r2, [r3, #0]
 800142c:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8001430:	4013      	ands	r3, r2
 8001432:	b2db      	uxtb	r3, r3
 8001434:	b29b      	uxth	r3, r3
 8001436:	00db      	lsls	r3, r3, #3
 8001438:	853b      	strh	r3, [r7, #40]	; 0x28
			  uint16_t green_v = (greenl_v + greenh_v)*255/63;
 800143a:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 800143c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800143e:	441a      	add	r2, r3
 8001440:	4613      	mov	r3, r2
 8001442:	021b      	lsls	r3, r3, #8
 8001444:	1a9b      	subs	r3, r3, r2
 8001446:	4a17      	ldr	r2, [pc, #92]	; (80014a4 <main+0x5b8>)
 8001448:	fb82 1203 	smull	r1, r2, r2, r3
 800144c:	441a      	add	r2, r3
 800144e:	1152      	asrs	r2, r2, #5
 8001450:	17db      	asrs	r3, r3, #31
 8001452:	1ad3      	subs	r3, r2, r3
 8001454:	84fb      	strh	r3, [r7, #38]	; 0x26

			  printf("{%d, %d, %d} ", red_v, green_v, blue_v);
 8001456:	8df9      	ldrh	r1, [r7, #46]	; 0x2e
 8001458:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800145a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800145c:	4812      	ldr	r0, [pc, #72]	; (80014a8 <main+0x5bc>)
 800145e:	f00e fea5 	bl	80101ac <iprintf>
		  for (uint64_t i = 0; i < 80; i++) {
 8001462:	e9d7 3418 	ldrd	r3, r4, [r7, #96]	; 0x60
 8001466:	1c59      	adds	r1, r3, #1
 8001468:	f144 0200 	adc.w	r2, r4, #0
 800146c:	e9c7 1218 	strd	r1, r2, [r7, #96]	; 0x60
 8001470:	e769      	b.n	8001346 <main+0x45a>
		  }
		  printf("\n");
 8001472:	200a      	movs	r0, #10
 8001474:	f00e feb2 	bl	80101dc <putchar>
 8001478:	e01b      	b.n	80014b2 <main+0x5c6>
 800147a:	bf00      	nop
 800147c:	080113c8 	.word	0x080113c8
 8001480:	080113ec 	.word	0x080113ec
 8001484:	08011408 	.word	0x08011408
 8001488:	240004c4 	.word	0x240004c4
 800148c:	0801141c 	.word	0x0801141c
 8001490:	08011438 	.word	0x08011438
 8001494:	0801145c 	.word	0x0801145c
 8001498:	2400046c 	.word	0x2400046c
 800149c:	08011484 	.word	0x08011484
 80014a0:	84210843 	.word	0x84210843
 80014a4:	82082083 	.word	0x82082083
 80014a8:	080114ac 	.word	0x080114ac
	  }
	  else
		  printf("JPEG conversion failed.\n");
 80014ac:	4834      	ldr	r0, [pc, #208]	; (8001580 <main+0x694>)
 80014ae:	f00e ff05 	bl	80102bc <puts>

	  uint32_t tickj2 = HAL_GetTick();
 80014b2:	f001 fb29 	bl	8002b08 <HAL_GetTick>
 80014b6:	6238      	str	r0, [r7, #32]
	  printf("JPEG time elapsed: %lu\n", tickj2-tickj);
 80014b8:	6a3a      	ldr	r2, [r7, #32]
 80014ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80014bc:	1ad3      	subs	r3, r2, r3
 80014be:	4619      	mov	r1, r3
 80014c0:	4830      	ldr	r0, [pc, #192]	; (8001584 <main+0x698>)
 80014c2:	f00e fe73 	bl	80101ac <iprintf>

	  // iterate to avoid sending repeats
	  transmit_link = curr_link;
 80014c6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80014c8:	657b      	str	r3, [r7, #84]	; 0x54
	  curr_link = curr_link->next;
 80014ca:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80014cc:	4b2e      	ldr	r3, [pc, #184]	; (8001588 <main+0x69c>)
 80014ce:	4413      	add	r3, r2
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	66bb      	str	r3, [r7, #104]	; 0x68

	  printf("\n\nLOOP COMPLETED\n\n");
 80014d4:	482d      	ldr	r0, [pc, #180]	; (800158c <main+0x6a0>)
 80014d6:	f00e fef1 	bl	80102bc <puts>

	  printf("Result: %d\n\n", result);
 80014da:	f897 3059 	ldrb.w	r3, [r7, #89]	; 0x59
 80014de:	4619      	mov	r1, r3
 80014e0:	482b      	ldr	r0, [pc, #172]	; (8001590 <main+0x6a4>)
 80014e2:	f00e fe63 	bl	80101ac <iprintf>
	  result = HAL_ERROR;
 80014e6:	2301      	movs	r3, #1
 80014e8:	f887 3059 	strb.w	r3, [r7, #89]	; 0x59
	  HAL_Delay(10);
 80014ec:	200a      	movs	r0, #10
 80014ee:	f001 fb17 	bl	8002b20 <HAL_Delay>
	   * PLACEMENT OF COMPUTER VISION ALGORITHM IN FLOW
	   *
	   */


	  master_comm_buff[0] = 20;
 80014f2:	4b28      	ldr	r3, [pc, #160]	; (8001594 <main+0x6a8>)
 80014f4:	2214      	movs	r2, #20
 80014f6:	701a      	strb	r2, [r3, #0]
	  master_comm_buff[1] = 30;
 80014f8:	4b26      	ldr	r3, [pc, #152]	; (8001594 <main+0x6a8>)
 80014fa:	221e      	movs	r2, #30
 80014fc:	705a      	strb	r2, [r3, #1]
	  master_comm_buff[2] = 40;
 80014fe:	4b25      	ldr	r3, [pc, #148]	; (8001594 <main+0x6a8>)
 8001500:	2228      	movs	r2, #40	; 0x28
 8001502:	709a      	strb	r2, [r3, #2]
	  master_comm_buff[3] = 50;
 8001504:	4b23      	ldr	r3, [pc, #140]	; (8001594 <main+0x6a8>)
 8001506:	2232      	movs	r2, #50	; 0x32
 8001508:	70da      	strb	r2, [r3, #3]
	  // placeholder blocking i2c communication until interrupt driven interface is debugged
	  result = HAL_I2C_Slave_Receive(&hi2c3, master_comm_buff, 9, 2000);
 800150a:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800150e:	2209      	movs	r2, #9
 8001510:	4920      	ldr	r1, [pc, #128]	; (8001594 <main+0x6a8>)
 8001512:	4821      	ldr	r0, [pc, #132]	; (8001598 <main+0x6ac>)
 8001514:	f002 fc5f 	bl	8003dd6 <HAL_I2C_Slave_Receive>
 8001518:	4603      	mov	r3, r0
 800151a:	f887 3059 	strb.w	r3, [r7, #89]	; 0x59

	  if (master_comm_buff[0] == DATA_REQ) {
 800151e:	4b1d      	ldr	r3, [pc, #116]	; (8001594 <main+0x6a8>)
 8001520:	781b      	ldrb	r3, [r3, #0]
 8001522:	2b56      	cmp	r3, #86	; 0x56
 8001524:	d128      	bne.n	8001578 <main+0x68c>
		  package_data(object_list, object_num, i2c_buffer);
 8001526:	4b1d      	ldr	r3, [pc, #116]	; (800159c <main+0x6b0>)
 8001528:	781b      	ldrb	r3, [r3, #0]
 800152a:	4a1d      	ldr	r2, [pc, #116]	; (80015a0 <main+0x6b4>)
 800152c:	4619      	mov	r1, r3
 800152e:	481d      	ldr	r0, [pc, #116]	; (80015a4 <main+0x6b8>)
 8001530:	f000 fb2e 	bl	8001b90 <package_data>
		  for (int i = 0; i < object_num/2 + object_num%2; i++)
 8001534:	2300      	movs	r3, #0
 8001536:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001538:	4b18      	ldr	r3, [pc, #96]	; (800159c <main+0x6b0>)
 800153a:	781b      	ldrb	r3, [r3, #0]
 800153c:	085b      	lsrs	r3, r3, #1
 800153e:	b2db      	uxtb	r3, r3
 8001540:	461a      	mov	r2, r3
 8001542:	4b16      	ldr	r3, [pc, #88]	; (800159c <main+0x6b0>)
 8001544:	781b      	ldrb	r3, [r3, #0]
 8001546:	f003 0301 	and.w	r3, r3, #1
 800154a:	4413      	add	r3, r2
 800154c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800154e:	429a      	cmp	r2, r3
 8001550:	da12      	bge.n	8001578 <main+0x68c>
			  result = HAL_I2C_Slave_Transmit(&hi2c3, i2c_buffer[i], 9, 2000);
 8001552:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001554:	4613      	mov	r3, r2
 8001556:	00db      	lsls	r3, r3, #3
 8001558:	4413      	add	r3, r2
 800155a:	4a11      	ldr	r2, [pc, #68]	; (80015a0 <main+0x6b4>)
 800155c:	1899      	adds	r1, r3, r2
 800155e:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001562:	2209      	movs	r2, #9
 8001564:	480c      	ldr	r0, [pc, #48]	; (8001598 <main+0x6ac>)
 8001566:	f002 fb2d 	bl	8003bc4 <HAL_I2C_Slave_Transmit>
 800156a:	4603      	mov	r3, r0
 800156c:	f887 3059 	strb.w	r3, [r7, #89]	; 0x59
		  for (int i = 0; i < object_num/2 + object_num%2; i++)
 8001570:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001572:	3301      	adds	r3, #1
 8001574:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001576:	e7df      	b.n	8001538 <main+0x64c>
	  }
	  result = HAL_ERROR;
 8001578:	2301      	movs	r3, #1
 800157a:	f887 3059 	strb.w	r3, [r7, #89]	; 0x59

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

  }
 800157e:	e5d6      	b.n	800112e <main+0x242>
 8001580:	080114bc 	.word	0x080114bc
 8001584:	080114d4 	.word	0x080114d4
 8001588:	00015634 	.word	0x00015634
 800158c:	080114ec 	.word	0x080114ec
 8001590:	08011500 	.word	0x08011500
 8001594:	24001254 	.word	0x24001254
 8001598:	24000420 	.word	0x24000420
 800159c:	24056b70 	.word	0x24056b70
 80015a0:	24056b74 	.word	0x24056b74
 80015a4:	24056b40 	.word	0x24056b40

080015a8 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b0cc      	sub	sp, #304	; 0x130
 80015ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015ae:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80015b2:	224c      	movs	r2, #76	; 0x4c
 80015b4:	2100      	movs	r1, #0
 80015b6:	4618      	mov	r0, r3
 80015b8:	f00e fdef 	bl	801019a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015bc:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80015c0:	2220      	movs	r2, #32
 80015c2:	2100      	movs	r1, #0
 80015c4:	4618      	mov	r0, r3
 80015c6:	f00e fde8 	bl	801019a <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80015ca:	f107 0308 	add.w	r3, r7, #8
 80015ce:	4618      	mov	r0, r3
 80015d0:	23bc      	movs	r3, #188	; 0xbc
 80015d2:	461a      	mov	r2, r3
 80015d4:	2100      	movs	r1, #0
 80015d6:	f00e fde0 	bl	801019a <memset>

  /** Supply configuration update enable 
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80015da:	2002      	movs	r0, #2
 80015dc:	f004 fa7e 	bl	8005adc <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80015e0:	1d3b      	adds	r3, r7, #4
 80015e2:	2200      	movs	r2, #0
 80015e4:	601a      	str	r2, [r3, #0]
 80015e6:	4b53      	ldr	r3, [pc, #332]	; (8001734 <_Z18SystemClock_Configv+0x18c>)
 80015e8:	699b      	ldr	r3, [r3, #24]
 80015ea:	4a52      	ldr	r2, [pc, #328]	; (8001734 <_Z18SystemClock_Configv+0x18c>)
 80015ec:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80015f0:	6193      	str	r3, [r2, #24]
 80015f2:	4b50      	ldr	r3, [pc, #320]	; (8001734 <_Z18SystemClock_Configv+0x18c>)
 80015f4:	699b      	ldr	r3, [r3, #24]
 80015f6:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 80015fa:	1d3b      	adds	r3, r7, #4
 80015fc:	601a      	str	r2, [r3, #0]
 80015fe:	4b4e      	ldr	r3, [pc, #312]	; (8001738 <_Z18SystemClock_Configv+0x190>)
 8001600:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001602:	4a4d      	ldr	r2, [pc, #308]	; (8001738 <_Z18SystemClock_Configv+0x190>)
 8001604:	f043 0301 	orr.w	r3, r3, #1
 8001608:	62d3      	str	r3, [r2, #44]	; 0x2c
 800160a:	4b4b      	ldr	r3, [pc, #300]	; (8001738 <_Z18SystemClock_Configv+0x190>)
 800160c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800160e:	f003 0201 	and.w	r2, r3, #1
 8001612:	1d3b      	adds	r3, r7, #4
 8001614:	601a      	str	r2, [r3, #0]
 8001616:	1d3b      	adds	r3, r7, #4
 8001618:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800161a:	4b46      	ldr	r3, [pc, #280]	; (8001734 <_Z18SystemClock_Configv+0x18c>)
 800161c:	699b      	ldr	r3, [r3, #24]
 800161e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001622:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001626:	bf14      	ite	ne
 8001628:	2301      	movne	r3, #1
 800162a:	2300      	moveq	r3, #0
 800162c:	b2db      	uxtb	r3, r3
 800162e:	2b00      	cmp	r3, #0
 8001630:	d000      	beq.n	8001634 <_Z18SystemClock_Configv+0x8c>
 8001632:	e7f2      	b.n	800161a <_Z18SystemClock_Configv+0x72>
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001634:	2302      	movs	r3, #2
 8001636:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800163a:	2301      	movs	r3, #1
 800163c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001640:	2320      	movs	r3, #32
 8001642:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001646:	2302      	movs	r3, #2
 8001648:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800164c:	2300      	movs	r3, #0
 800164e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001652:	2304      	movs	r3, #4
 8001654:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  RCC_OscInitStruct.PLL.PLLN = 60;
 8001658:	233c      	movs	r3, #60	; 0x3c
 800165a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  RCC_OscInitStruct.PLL.PLLP = 2;
 800165e:	2302      	movs	r3, #2
 8001660:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001664:	2302      	movs	r3, #2
 8001666:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800166a:	2302      	movs	r3, #2
 800166c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001670:	230c      	movs	r3, #12
 8001672:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001676:	2300      	movs	r3, #0
 8001678:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800167c:	2300      	movs	r3, #0
 800167e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001682:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001686:	4618      	mov	r0, r3
 8001688:	f004 fa60 	bl	8005b4c <HAL_RCC_OscConfig>
 800168c:	4603      	mov	r3, r0
 800168e:	2b00      	cmp	r3, #0
 8001690:	bf14      	ite	ne
 8001692:	2301      	movne	r3, #1
 8001694:	2300      	moveq	r3, #0
 8001696:	b2db      	uxtb	r3, r3
 8001698:	2b00      	cmp	r3, #0
 800169a:	d001      	beq.n	80016a0 <_Z18SystemClock_Configv+0xf8>
  {
    Error_Handler();
 800169c:	f000 fa48 	bl	8001b30 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016a0:	233f      	movs	r3, #63	; 0x3f
 80016a2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016a6:	2303      	movs	r3, #3
 80016a8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80016ac:	2300      	movs	r3, #0
 80016ae:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80016b2:	2308      	movs	r3, #8
 80016b4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80016b8:	2340      	movs	r3, #64	; 0x40
 80016ba:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80016be:	2340      	movs	r3, #64	; 0x40
 80016c0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80016c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80016c8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80016cc:	2340      	movs	r3, #64	; 0x40
 80016ce:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80016d2:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80016d6:	2104      	movs	r1, #4
 80016d8:	4618      	mov	r0, r3
 80016da:	f004 fdef 	bl	80062bc <HAL_RCC_ClockConfig>
 80016de:	4603      	mov	r3, r0
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	bf14      	ite	ne
 80016e4:	2301      	movne	r3, #1
 80016e6:	2300      	moveq	r3, #0
 80016e8:	b2db      	uxtb	r3, r3
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d001      	beq.n	80016f2 <_Z18SystemClock_Configv+0x14a>
  {
    Error_Handler();
 80016ee:	f000 fa1f 	bl	8001b30 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART8|RCC_PERIPHCLK_I2C3
 80016f2:	f107 0308 	add.w	r3, r7, #8
 80016f6:	220a      	movs	r2, #10
 80016f8:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_I2C1;
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80016fa:	f107 0308 	add.w	r3, r7, #8
 80016fe:	2200      	movs	r2, #0
 8001700:	675a      	str	r2, [r3, #116]	; 0x74
  PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8001702:	f107 0308 	add.w	r3, r7, #8
 8001706:	2200      	movs	r2, #0
 8001708:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800170c:	f107 0308 	add.w	r3, r7, #8
 8001710:	4618      	mov	r0, r3
 8001712:	f005 f931 	bl	8006978 <HAL_RCCEx_PeriphCLKConfig>
 8001716:	4603      	mov	r3, r0
 8001718:	2b00      	cmp	r3, #0
 800171a:	bf14      	ite	ne
 800171c:	2301      	movne	r3, #1
 800171e:	2300      	moveq	r3, #0
 8001720:	b2db      	uxtb	r3, r3
 8001722:	2b00      	cmp	r3, #0
 8001724:	d001      	beq.n	800172a <_Z18SystemClock_Configv+0x182>
  {
    Error_Handler();
 8001726:	f000 fa03 	bl	8001b30 <Error_Handler>
  }
}
 800172a:	bf00      	nop
 800172c:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8001730:	46bd      	mov	sp, r7
 8001732:	bd80      	pop	{r7, pc}
 8001734:	58024800 	.word	0x58024800
 8001738:	58000400 	.word	0x58000400

0800173c <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001740:	4b22      	ldr	r3, [pc, #136]	; (80017cc <_ZL12MX_I2C1_Initv+0x90>)
 8001742:	4a23      	ldr	r2, [pc, #140]	; (80017d0 <_ZL12MX_I2C1_Initv+0x94>)
 8001744:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x307075B1;
 8001746:	4b21      	ldr	r3, [pc, #132]	; (80017cc <_ZL12MX_I2C1_Initv+0x90>)
 8001748:	4a22      	ldr	r2, [pc, #136]	; (80017d4 <_ZL12MX_I2C1_Initv+0x98>)
 800174a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 4;
 800174c:	4b1f      	ldr	r3, [pc, #124]	; (80017cc <_ZL12MX_I2C1_Initv+0x90>)
 800174e:	2204      	movs	r2, #4
 8001750:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001752:	4b1e      	ldr	r3, [pc, #120]	; (80017cc <_ZL12MX_I2C1_Initv+0x90>)
 8001754:	2201      	movs	r2, #1
 8001756:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001758:	4b1c      	ldr	r3, [pc, #112]	; (80017cc <_ZL12MX_I2C1_Initv+0x90>)
 800175a:	2200      	movs	r2, #0
 800175c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800175e:	4b1b      	ldr	r3, [pc, #108]	; (80017cc <_ZL12MX_I2C1_Initv+0x90>)
 8001760:	2200      	movs	r2, #0
 8001762:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001764:	4b19      	ldr	r3, [pc, #100]	; (80017cc <_ZL12MX_I2C1_Initv+0x90>)
 8001766:	2200      	movs	r2, #0
 8001768:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800176a:	4b18      	ldr	r3, [pc, #96]	; (80017cc <_ZL12MX_I2C1_Initv+0x90>)
 800176c:	2200      	movs	r2, #0
 800176e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001770:	4b16      	ldr	r3, [pc, #88]	; (80017cc <_ZL12MX_I2C1_Initv+0x90>)
 8001772:	2200      	movs	r2, #0
 8001774:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001776:	4815      	ldr	r0, [pc, #84]	; (80017cc <_ZL12MX_I2C1_Initv+0x90>)
 8001778:	f001 ffaa 	bl	80036d0 <HAL_I2C_Init>
 800177c:	4603      	mov	r3, r0
 800177e:	2b00      	cmp	r3, #0
 8001780:	bf14      	ite	ne
 8001782:	2301      	movne	r3, #1
 8001784:	2300      	moveq	r3, #0
 8001786:	b2db      	uxtb	r3, r3
 8001788:	2b00      	cmp	r3, #0
 800178a:	d001      	beq.n	8001790 <_ZL12MX_I2C1_Initv+0x54>
  {
    Error_Handler();
 800178c:	f000 f9d0 	bl	8001b30 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001790:	2100      	movs	r1, #0
 8001792:	480e      	ldr	r0, [pc, #56]	; (80017cc <_ZL12MX_I2C1_Initv+0x90>)
 8001794:	f002 fe18 	bl	80043c8 <HAL_I2CEx_ConfigAnalogFilter>
 8001798:	4603      	mov	r3, r0
 800179a:	2b00      	cmp	r3, #0
 800179c:	bf14      	ite	ne
 800179e:	2301      	movne	r3, #1
 80017a0:	2300      	moveq	r3, #0
 80017a2:	b2db      	uxtb	r3, r3
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d001      	beq.n	80017ac <_ZL12MX_I2C1_Initv+0x70>
  {
    Error_Handler();
 80017a8:	f000 f9c2 	bl	8001b30 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80017ac:	2100      	movs	r1, #0
 80017ae:	4807      	ldr	r0, [pc, #28]	; (80017cc <_ZL12MX_I2C1_Initv+0x90>)
 80017b0:	f002 fe55 	bl	800445e <HAL_I2CEx_ConfigDigitalFilter>
 80017b4:	4603      	mov	r3, r0
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	bf14      	ite	ne
 80017ba:	2301      	movne	r3, #1
 80017bc:	2300      	moveq	r3, #0
 80017be:	b2db      	uxtb	r3, r3
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d001      	beq.n	80017c8 <_ZL12MX_I2C1_Initv+0x8c>
  {
    Error_Handler();
 80017c4:	f000 f9b4 	bl	8001b30 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80017c8:	bf00      	nop
 80017ca:	bd80      	pop	{r7, pc}
 80017cc:	240003d4 	.word	0x240003d4
 80017d0:	40005400 	.word	0x40005400
 80017d4:	307075b1 	.word	0x307075b1

080017d8 <_ZL12MX_I2C3_Initv>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80017dc:	4b22      	ldr	r3, [pc, #136]	; (8001868 <_ZL12MX_I2C3_Initv+0x90>)
 80017de:	4a23      	ldr	r2, [pc, #140]	; (800186c <_ZL12MX_I2C3_Initv+0x94>)
 80017e0:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x307075B1;
 80017e2:	4b21      	ldr	r3, [pc, #132]	; (8001868 <_ZL12MX_I2C3_Initv+0x90>)
 80017e4:	4a22      	ldr	r2, [pc, #136]	; (8001870 <_ZL12MX_I2C3_Initv+0x98>)
 80017e6:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 8;
 80017e8:	4b1f      	ldr	r3, [pc, #124]	; (8001868 <_ZL12MX_I2C3_Initv+0x90>)
 80017ea:	2208      	movs	r2, #8
 80017ec:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80017ee:	4b1e      	ldr	r3, [pc, #120]	; (8001868 <_ZL12MX_I2C3_Initv+0x90>)
 80017f0:	2201      	movs	r2, #1
 80017f2:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80017f4:	4b1c      	ldr	r3, [pc, #112]	; (8001868 <_ZL12MX_I2C3_Initv+0x90>)
 80017f6:	2200      	movs	r2, #0
 80017f8:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 80017fa:	4b1b      	ldr	r3, [pc, #108]	; (8001868 <_ZL12MX_I2C3_Initv+0x90>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001800:	4b19      	ldr	r3, [pc, #100]	; (8001868 <_ZL12MX_I2C3_Initv+0x90>)
 8001802:	2200      	movs	r2, #0
 8001804:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001806:	4b18      	ldr	r3, [pc, #96]	; (8001868 <_ZL12MX_I2C3_Initv+0x90>)
 8001808:	2200      	movs	r2, #0
 800180a:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800180c:	4b16      	ldr	r3, [pc, #88]	; (8001868 <_ZL12MX_I2C3_Initv+0x90>)
 800180e:	2200      	movs	r2, #0
 8001810:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001812:	4815      	ldr	r0, [pc, #84]	; (8001868 <_ZL12MX_I2C3_Initv+0x90>)
 8001814:	f001 ff5c 	bl	80036d0 <HAL_I2C_Init>
 8001818:	4603      	mov	r3, r0
 800181a:	2b00      	cmp	r3, #0
 800181c:	bf14      	ite	ne
 800181e:	2301      	movne	r3, #1
 8001820:	2300      	moveq	r3, #0
 8001822:	b2db      	uxtb	r3, r3
 8001824:	2b00      	cmp	r3, #0
 8001826:	d001      	beq.n	800182c <_ZL12MX_I2C3_Initv+0x54>
  {
    Error_Handler();
 8001828:	f000 f982 	bl	8001b30 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800182c:	2100      	movs	r1, #0
 800182e:	480e      	ldr	r0, [pc, #56]	; (8001868 <_ZL12MX_I2C3_Initv+0x90>)
 8001830:	f002 fdca 	bl	80043c8 <HAL_I2CEx_ConfigAnalogFilter>
 8001834:	4603      	mov	r3, r0
 8001836:	2b00      	cmp	r3, #0
 8001838:	bf14      	ite	ne
 800183a:	2301      	movne	r3, #1
 800183c:	2300      	moveq	r3, #0
 800183e:	b2db      	uxtb	r3, r3
 8001840:	2b00      	cmp	r3, #0
 8001842:	d001      	beq.n	8001848 <_ZL12MX_I2C3_Initv+0x70>
  {
    Error_Handler();
 8001844:	f000 f974 	bl	8001b30 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001848:	2100      	movs	r1, #0
 800184a:	4807      	ldr	r0, [pc, #28]	; (8001868 <_ZL12MX_I2C3_Initv+0x90>)
 800184c:	f002 fe07 	bl	800445e <HAL_I2CEx_ConfigDigitalFilter>
 8001850:	4603      	mov	r3, r0
 8001852:	2b00      	cmp	r3, #0
 8001854:	bf14      	ite	ne
 8001856:	2301      	movne	r3, #1
 8001858:	2300      	moveq	r3, #0
 800185a:	b2db      	uxtb	r3, r3
 800185c:	2b00      	cmp	r3, #0
 800185e:	d001      	beq.n	8001864 <_ZL12MX_I2C3_Initv+0x8c>
  {
    Error_Handler();
 8001860:	f000 f966 	bl	8001b30 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001864:	bf00      	nop
 8001866:	bd80      	pop	{r7, pc}
 8001868:	24000420 	.word	0x24000420
 800186c:	40005c00 	.word	0x40005c00
 8001870:	307075b1 	.word	0x307075b1

08001874 <_ZL12MX_JPEG_Initv>:
  * @brief JPEG Initialization Function
  * @param None
  * @retval None
  */
static void MX_JPEG_Init(void)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	af00      	add	r7, sp, #0
  /* USER CODE END JPEG_Init 0 */

  /* USER CODE BEGIN JPEG_Init 1 */

  /* USER CODE END JPEG_Init 1 */
  hjpeg.Instance = JPEG;
 8001878:	4b08      	ldr	r3, [pc, #32]	; (800189c <_ZL12MX_JPEG_Initv+0x28>)
 800187a:	4a09      	ldr	r2, [pc, #36]	; (80018a0 <_ZL12MX_JPEG_Initv+0x2c>)
 800187c:	601a      	str	r2, [r3, #0]
  if (HAL_JPEG_Init(&hjpeg) != HAL_OK)
 800187e:	4807      	ldr	r0, [pc, #28]	; (800189c <_ZL12MX_JPEG_Initv+0x28>)
 8001880:	f002 fe3a 	bl	80044f8 <HAL_JPEG_Init>
 8001884:	4603      	mov	r3, r0
 8001886:	2b00      	cmp	r3, #0
 8001888:	bf14      	ite	ne
 800188a:	2301      	movne	r3, #1
 800188c:	2300      	moveq	r3, #0
 800188e:	b2db      	uxtb	r3, r3
 8001890:	2b00      	cmp	r3, #0
 8001892:	d001      	beq.n	8001898 <_ZL12MX_JPEG_Initv+0x24>
  {
    Error_Handler();
 8001894:	f000 f94c 	bl	8001b30 <Error_Handler>
  }
  /* USER CODE BEGIN JPEG_Init 2 */

  /* USER CODE END JPEG_Init 2 */

}
 8001898:	bf00      	nop
 800189a:	bd80      	pop	{r7, pc}
 800189c:	2400046c 	.word	0x2400046c
 80018a0:	52003000 	.word	0x52003000

080018a4 <_ZL13MX_UART8_Initv>:
  * @brief UART8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART8_Init(void)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 80018a8:	4b2d      	ldr	r3, [pc, #180]	; (8001960 <_ZL13MX_UART8_Initv+0xbc>)
 80018aa:	4a2e      	ldr	r2, [pc, #184]	; (8001964 <_ZL13MX_UART8_Initv+0xc0>)
 80018ac:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 38400;
 80018ae:	4b2c      	ldr	r3, [pc, #176]	; (8001960 <_ZL13MX_UART8_Initv+0xbc>)
 80018b0:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 80018b4:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 80018b6:	4b2a      	ldr	r3, [pc, #168]	; (8001960 <_ZL13MX_UART8_Initv+0xbc>)
 80018b8:	2200      	movs	r2, #0
 80018ba:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 80018bc:	4b28      	ldr	r3, [pc, #160]	; (8001960 <_ZL13MX_UART8_Initv+0xbc>)
 80018be:	2200      	movs	r2, #0
 80018c0:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 80018c2:	4b27      	ldr	r3, [pc, #156]	; (8001960 <_ZL13MX_UART8_Initv+0xbc>)
 80018c4:	2200      	movs	r2, #0
 80018c6:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 80018c8:	4b25      	ldr	r3, [pc, #148]	; (8001960 <_ZL13MX_UART8_Initv+0xbc>)
 80018ca:	220c      	movs	r2, #12
 80018cc:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018ce:	4b24      	ldr	r3, [pc, #144]	; (8001960 <_ZL13MX_UART8_Initv+0xbc>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 80018d4:	4b22      	ldr	r3, [pc, #136]	; (8001960 <_ZL13MX_UART8_Initv+0xbc>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	61da      	str	r2, [r3, #28]
  huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80018da:	4b21      	ldr	r3, [pc, #132]	; (8001960 <_ZL13MX_UART8_Initv+0xbc>)
 80018dc:	2200      	movs	r2, #0
 80018de:	621a      	str	r2, [r3, #32]
  huart8.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80018e0:	4b1f      	ldr	r3, [pc, #124]	; (8001960 <_ZL13MX_UART8_Initv+0xbc>)
 80018e2:	2200      	movs	r2, #0
 80018e4:	625a      	str	r2, [r3, #36]	; 0x24
  huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80018e6:	4b1e      	ldr	r3, [pc, #120]	; (8001960 <_ZL13MX_UART8_Initv+0xbc>)
 80018e8:	2200      	movs	r2, #0
 80018ea:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart8) != HAL_OK)
 80018ec:	481c      	ldr	r0, [pc, #112]	; (8001960 <_ZL13MX_UART8_Initv+0xbc>)
 80018ee:	f006 fb61 	bl	8007fb4 <HAL_UART_Init>
 80018f2:	4603      	mov	r3, r0
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	bf14      	ite	ne
 80018f8:	2301      	movne	r3, #1
 80018fa:	2300      	moveq	r3, #0
 80018fc:	b2db      	uxtb	r3, r3
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d001      	beq.n	8001906 <_ZL13MX_UART8_Initv+0x62>
  {
    Error_Handler();
 8001902:	f000 f915 	bl	8001b30 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart8, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001906:	2100      	movs	r1, #0
 8001908:	4815      	ldr	r0, [pc, #84]	; (8001960 <_ZL13MX_UART8_Initv+0xbc>)
 800190a:	f009 f9d6 	bl	800acba <HAL_UARTEx_SetTxFifoThreshold>
 800190e:	4603      	mov	r3, r0
 8001910:	2b00      	cmp	r3, #0
 8001912:	bf14      	ite	ne
 8001914:	2301      	movne	r3, #1
 8001916:	2300      	moveq	r3, #0
 8001918:	b2db      	uxtb	r3, r3
 800191a:	2b00      	cmp	r3, #0
 800191c:	d001      	beq.n	8001922 <_ZL13MX_UART8_Initv+0x7e>
  {
    Error_Handler();
 800191e:	f000 f907 	bl	8001b30 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart8, UART_RXFIFO_THRESHOLD_8_8) != HAL_OK)
 8001922:	f04f 6120 	mov.w	r1, #167772160	; 0xa000000
 8001926:	480e      	ldr	r0, [pc, #56]	; (8001960 <_ZL13MX_UART8_Initv+0xbc>)
 8001928:	f009 fa05 	bl	800ad36 <HAL_UARTEx_SetRxFifoThreshold>
 800192c:	4603      	mov	r3, r0
 800192e:	2b00      	cmp	r3, #0
 8001930:	bf14      	ite	ne
 8001932:	2301      	movne	r3, #1
 8001934:	2300      	moveq	r3, #0
 8001936:	b2db      	uxtb	r3, r3
 8001938:	2b00      	cmp	r3, #0
 800193a:	d001      	beq.n	8001940 <_ZL13MX_UART8_Initv+0x9c>
  {
    Error_Handler();
 800193c:	f000 f8f8 	bl	8001b30 <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart8) != HAL_OK)
 8001940:	4807      	ldr	r0, [pc, #28]	; (8001960 <_ZL13MX_UART8_Initv+0xbc>)
 8001942:	f009 f97f 	bl	800ac44 <HAL_UARTEx_EnableFifoMode>
 8001946:	4603      	mov	r3, r0
 8001948:	2b00      	cmp	r3, #0
 800194a:	bf14      	ite	ne
 800194c:	2301      	movne	r3, #1
 800194e:	2300      	moveq	r3, #0
 8001950:	b2db      	uxtb	r3, r3
 8001952:	2b00      	cmp	r3, #0
 8001954:	d001      	beq.n	800195a <_ZL13MX_UART8_Initv+0xb6>
  {
    Error_Handler();
 8001956:	f000 f8eb 	bl	8001b30 <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 800195a:	bf00      	nop
 800195c:	bd80      	pop	{r7, pc}
 800195e:	bf00      	nop
 8001960:	240004c4 	.word	0x240004c4
 8001964:	40007c00 	.word	0x40007c00

08001968 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b08a      	sub	sp, #40	; 0x28
 800196c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800196e:	f107 0314 	add.w	r3, r7, #20
 8001972:	2200      	movs	r2, #0
 8001974:	601a      	str	r2, [r3, #0]
 8001976:	605a      	str	r2, [r3, #4]
 8001978:	609a      	str	r2, [r3, #8]
 800197a:	60da      	str	r2, [r3, #12]
 800197c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800197e:	4b35      	ldr	r3, [pc, #212]	; (8001a54 <_ZL12MX_GPIO_Initv+0xec>)
 8001980:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001984:	4a33      	ldr	r2, [pc, #204]	; (8001a54 <_ZL12MX_GPIO_Initv+0xec>)
 8001986:	f043 0304 	orr.w	r3, r3, #4
 800198a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800198e:	4b31      	ldr	r3, [pc, #196]	; (8001a54 <_ZL12MX_GPIO_Initv+0xec>)
 8001990:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001994:	f003 0304 	and.w	r3, r3, #4
 8001998:	613b      	str	r3, [r7, #16]
 800199a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800199c:	4b2d      	ldr	r3, [pc, #180]	; (8001a54 <_ZL12MX_GPIO_Initv+0xec>)
 800199e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019a2:	4a2c      	ldr	r2, [pc, #176]	; (8001a54 <_ZL12MX_GPIO_Initv+0xec>)
 80019a4:	f043 0301 	orr.w	r3, r3, #1
 80019a8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80019ac:	4b29      	ldr	r3, [pc, #164]	; (8001a54 <_ZL12MX_GPIO_Initv+0xec>)
 80019ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019b2:	f003 0301 	and.w	r3, r3, #1
 80019b6:	60fb      	str	r3, [r7, #12]
 80019b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80019ba:	4b26      	ldr	r3, [pc, #152]	; (8001a54 <_ZL12MX_GPIO_Initv+0xec>)
 80019bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019c0:	4a24      	ldr	r2, [pc, #144]	; (8001a54 <_ZL12MX_GPIO_Initv+0xec>)
 80019c2:	f043 0302 	orr.w	r3, r3, #2
 80019c6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80019ca:	4b22      	ldr	r3, [pc, #136]	; (8001a54 <_ZL12MX_GPIO_Initv+0xec>)
 80019cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019d0:	f003 0302 	and.w	r3, r3, #2
 80019d4:	60bb      	str	r3, [r7, #8]
 80019d6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80019d8:	4b1e      	ldr	r3, [pc, #120]	; (8001a54 <_ZL12MX_GPIO_Initv+0xec>)
 80019da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019de:	4a1d      	ldr	r2, [pc, #116]	; (8001a54 <_ZL12MX_GPIO_Initv+0xec>)
 80019e0:	f043 0310 	orr.w	r3, r3, #16
 80019e4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80019e8:	4b1a      	ldr	r3, [pc, #104]	; (8001a54 <_ZL12MX_GPIO_Initv+0xec>)
 80019ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019ee:	f003 0310 	and.w	r3, r3, #16
 80019f2:	607b      	str	r3, [r7, #4]
 80019f4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SH7_Pin|SH6_Pin|SH5_Pin, GPIO_PIN_RESET);
 80019f6:	2200      	movs	r2, #0
 80019f8:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 80019fc:	4816      	ldr	r0, [pc, #88]	; (8001a58 <_ZL12MX_GPIO_Initv+0xf0>)
 80019fe:	f001 fe4d 	bl	800369c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SH4_Pin|SH3_Pin|SH2_Pin|SH1_Pin, GPIO_PIN_RESET);
 8001a02:	2200      	movs	r2, #0
 8001a04:	f44f 51f0 	mov.w	r1, #7680	; 0x1e00
 8001a08:	4814      	ldr	r0, [pc, #80]	; (8001a5c <_ZL12MX_GPIO_Initv+0xf4>)
 8001a0a:	f001 fe47 	bl	800369c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SH7_Pin SH6_Pin SH5_Pin */
  GPIO_InitStruct.Pin = SH7_Pin|SH6_Pin|SH5_Pin;
 8001a0e:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8001a12:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a14:	2301      	movs	r3, #1
 8001a16:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a20:	f107 0314 	add.w	r3, r7, #20
 8001a24:	4619      	mov	r1, r3
 8001a26:	480c      	ldr	r0, [pc, #48]	; (8001a58 <_ZL12MX_GPIO_Initv+0xf0>)
 8001a28:	f001 fb7e 	bl	8003128 <HAL_GPIO_Init>

  /*Configure GPIO pins : SH4_Pin SH3_Pin SH2_Pin SH1_Pin */
  GPIO_InitStruct.Pin = SH4_Pin|SH3_Pin|SH2_Pin|SH1_Pin;
 8001a2c:	f44f 53f0 	mov.w	r3, #7680	; 0x1e00
 8001a30:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a32:	2301      	movs	r3, #1
 8001a34:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a36:	2300      	movs	r3, #0
 8001a38:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a3e:	f107 0314 	add.w	r3, r7, #20
 8001a42:	4619      	mov	r1, r3
 8001a44:	4805      	ldr	r0, [pc, #20]	; (8001a5c <_ZL12MX_GPIO_Initv+0xf4>)
 8001a46:	f001 fb6f 	bl	8003128 <HAL_GPIO_Init>

}
 8001a4a:	bf00      	nop
 8001a4c:	3728      	adds	r7, #40	; 0x28
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}
 8001a52:	bf00      	nop
 8001a54:	58024400 	.word	0x58024400
 8001a58:	58020800 	.word	0x58020800
 8001a5c:	58020000 	.word	0x58020000

08001a60 <get_TOF_Data>:
/* USER CODE BEGIN 4 */



// dummy functions to be used as interfaces to other blocks
void get_TOF_Data() {
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b0ac      	sub	sp, #176	; 0xb0
 8001a64:	af00      	add	r7, sp, #0

	VL53L0X_RangingMeasurementData_t measure;

	int data[7][5];
	for (int i = 0; i < 5; i++) {
 8001a66:	2300      	movs	r3, #0
 8001a68:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8001a6c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001a70:	2b04      	cmp	r3, #4
 8001a72:	dc31      	bgt.n	8001ad8 <get_TOF_Data+0x78>
		for (int j = 0; j < 7; j++) {
 8001a74:	2300      	movs	r3, #0
 8001a76:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8001a7a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001a7e:	2b06      	cmp	r3, #6
 8001a80:	dc24      	bgt.n	8001acc <get_TOF_Data+0x6c>
			sensor[j].rangingTest(&measure, true);
 8001a82:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001a86:	f44f 72ee 	mov.w	r2, #476	; 0x1dc
 8001a8a:	fb02 f303 	mul.w	r3, r2, r3
 8001a8e:	4a17      	ldr	r2, [pc, #92]	; (8001aec <get_TOF_Data+0x8c>)
 8001a90:	4413      	add	r3, r2
 8001a92:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 8001a96:	2201      	movs	r2, #1
 8001a98:	4618      	mov	r0, r3
 8001a9a:	f7ff f9fc 	bl	8000e96 <_ZN11HAL_VL53L0X11rangingTestEP32VL53L0X_RangingMeasurementData_tb>
			data[j][i] = measure.RangeMilliMeter;
 8001a9e:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8001aa2:	4619      	mov	r1, r3
 8001aa4:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8001aa8:	4613      	mov	r3, r2
 8001aaa:	009b      	lsls	r3, r3, #2
 8001aac:	4413      	add	r3, r2
 8001aae:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8001ab2:	4413      	add	r3, r2
 8001ab4:	009b      	lsls	r3, r3, #2
 8001ab6:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8001aba:	4413      	add	r3, r2
 8001abc:	f843 1cb0 	str.w	r1, [r3, #-176]
		for (int j = 0; j < 7; j++) {
 8001ac0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001ac4:	3301      	adds	r3, #1
 8001ac6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8001aca:	e7d6      	b.n	8001a7a <get_TOF_Data+0x1a>
	for (int i = 0; i < 5; i++) {
 8001acc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001ad0:	3301      	adds	r3, #1
 8001ad2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8001ad6:	e7c9      	b.n	8001a6c <get_TOF_Data+0xc>
		}
	}

	process_ToF(object_list, &object_num, data);
 8001ad8:	463b      	mov	r3, r7
 8001ada:	461a      	mov	r2, r3
 8001adc:	4904      	ldr	r1, [pc, #16]	; (8001af0 <get_TOF_Data+0x90>)
 8001ade:	4805      	ldr	r0, [pc, #20]	; (8001af4 <get_TOF_Data+0x94>)
 8001ae0:	f000 fd10 	bl	8002504 <process_ToF>
}
 8001ae4:	bf00      	nop
 8001ae6:	37b0      	adds	r7, #176	; 0xb0
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bd80      	pop	{r7, pc}
 8001aec:	24000550 	.word	0x24000550
 8001af0:	24056b70 	.word	0x24056b70
 8001af4:	24056b40 	.word	0x24056b40

08001af8 <_write>:
 * 		- enable SWV ITM Data Console in Windows
 * 		- enable whichever ports necessary, can leave memory as default, check console settings here
 * 		- ensure that debug settings are enabled as such that SWV is enabled, probe is GDB server, and
 * 			clock matches the SYSCLK, not HCLK
 */
int _write(int file, char* out, int len) {
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b086      	sub	sp, #24
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	60f8      	str	r0, [r7, #12]
 8001b00:	60b9      	str	r1, [r7, #8]
 8001b02:	607a      	str	r2, [r7, #4]
	for (int i = 0; i < len; i++) {
 8001b04:	2300      	movs	r3, #0
 8001b06:	617b      	str	r3, [r7, #20]
 8001b08:	697a      	ldr	r2, [r7, #20]
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	429a      	cmp	r2, r3
 8001b0e:	da0a      	bge.n	8001b26 <_write+0x2e>
		ITM_SendChar(out[i]);
 8001b10:	697b      	ldr	r3, [r7, #20]
 8001b12:	68ba      	ldr	r2, [r7, #8]
 8001b14:	4413      	add	r3, r2
 8001b16:	781b      	ldrb	r3, [r3, #0]
 8001b18:	4618      	mov	r0, r3
 8001b1a:	f7ff f98b 	bl	8000e34 <ITM_SendChar>
	for (int i = 0; i < len; i++) {
 8001b1e:	697b      	ldr	r3, [r7, #20]
 8001b20:	3301      	adds	r3, #1
 8001b22:	617b      	str	r3, [r7, #20]
 8001b24:	e7f0      	b.n	8001b08 <_write+0x10>
	}
	return len;
 8001b26:	687b      	ldr	r3, [r7, #4]
}
 8001b28:	4618      	mov	r0, r3
 8001b2a:	3718      	adds	r7, #24
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	bd80      	pop	{r7, pc}

08001b30 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b30:	b480      	push	{r7}
 8001b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001b34:	bf00      	nop
 8001b36:	46bd      	mov	sp, r7
 8001b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3c:	4770      	bx	lr
	...

08001b40 <_Z41__static_initialization_and_destruction_0ii>:
 8001b40:	b5b0      	push	{r4, r5, r7, lr}
 8001b42:	b082      	sub	sp, #8
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
 8001b48:	6039      	str	r1, [r7, #0]
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	2b01      	cmp	r3, #1
 8001b4e:	d110      	bne.n	8001b72 <_Z41__static_initialization_and_destruction_0ii+0x32>
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001b56:	4293      	cmp	r3, r2
 8001b58:	d10b      	bne.n	8001b72 <_Z41__static_initialization_and_destruction_0ii+0x32>
HAL_VL53L0X sensor[7];
 8001b5a:	4b08      	ldr	r3, [pc, #32]	; (8001b7c <_Z41__static_initialization_and_destruction_0ii+0x3c>)
 8001b5c:	2406      	movs	r4, #6
 8001b5e:	461d      	mov	r5, r3
 8001b60:	2c00      	cmp	r4, #0
 8001b62:	db06      	blt.n	8001b72 <_Z41__static_initialization_and_destruction_0ii+0x32>
 8001b64:	4628      	mov	r0, r5
 8001b66:	f7ff f9a8 	bl	8000eba <_ZN11HAL_VL53L0XC1Ev>
 8001b6a:	f505 75ee 	add.w	r5, r5, #476	; 0x1dc
 8001b6e:	3c01      	subs	r4, #1
 8001b70:	e7f6      	b.n	8001b60 <_Z41__static_initialization_and_destruction_0ii+0x20>
}
 8001b72:	bf00      	nop
 8001b74:	3708      	adds	r7, #8
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bdb0      	pop	{r4, r5, r7, pc}
 8001b7a:	bf00      	nop
 8001b7c:	24000550 	.word	0x24000550

08001b80 <_GLOBAL__sub_I_hi2c1>:
 8001b80:	b580      	push	{r7, lr}
 8001b82:	af00      	add	r7, sp, #0
 8001b84:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001b88:	2001      	movs	r0, #1
 8001b8a:	f7ff ffd9 	bl	8001b40 <_Z41__static_initialization_and_destruction_0ii>
 8001b8e:	bd80      	pop	{r7, pc}

08001b90 <package_data>:

#include "main_board_comm.h"


// note: currently assumes no limit to objects detected, however this could be simply implemented if necessary
uint8_t package_data(struct object* obj_list, uint8_t obj_count, uint8_t buffer[][9]) {
 8001b90:	b480      	push	{r7}
 8001b92:	b087      	sub	sp, #28
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	60f8      	str	r0, [r7, #12]
 8001b98:	460b      	mov	r3, r1
 8001b9a:	607a      	str	r2, [r7, #4]
 8001b9c:	72fb      	strb	r3, [r7, #11]

	buffer[0][0] = DATA_REQ;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	2256      	movs	r2, #86	; 0x56
 8001ba2:	701a      	strb	r2, [r3, #0]
	buffer[0][1] = obj_count;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	7afa      	ldrb	r2, [r7, #11]
 8001ba8:	705a      	strb	r2, [r3, #1]
	for (int i = 0; i < 7; i++) {
 8001baa:	2300      	movs	r3, #0
 8001bac:	617b      	str	r3, [r7, #20]
 8001bae:	e007      	b.n	8001bc0 <package_data+0x30>
		buffer[0][i+2] = 0;
 8001bb0:	697b      	ldr	r3, [r7, #20]
 8001bb2:	3302      	adds	r3, #2
 8001bb4:	687a      	ldr	r2, [r7, #4]
 8001bb6:	2100      	movs	r1, #0
 8001bb8:	54d1      	strb	r1, [r2, r3]
	for (int i = 0; i < 7; i++) {
 8001bba:	697b      	ldr	r3, [r7, #20]
 8001bbc:	3301      	adds	r3, #1
 8001bbe:	617b      	str	r3, [r7, #20]
 8001bc0:	697b      	ldr	r3, [r7, #20]
 8001bc2:	2b06      	cmp	r3, #6
 8001bc4:	ddf4      	ble.n	8001bb0 <package_data+0x20>
	}

	for (int i = 1; i <= (obj_count/2 + obj_count%2); i++) {
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	613b      	str	r3, [r7, #16]
 8001bca:	e116      	b.n	8001dfa <package_data+0x26a>
		buffer[i][0] = DATA_REQ;
 8001bcc:	693a      	ldr	r2, [r7, #16]
 8001bce:	4613      	mov	r3, r2
 8001bd0:	00db      	lsls	r3, r3, #3
 8001bd2:	4413      	add	r3, r2
 8001bd4:	687a      	ldr	r2, [r7, #4]
 8001bd6:	4413      	add	r3, r2
 8001bd8:	2256      	movs	r2, #86	; 0x56
 8001bda:	701a      	strb	r2, [r3, #0]
		buffer[i][1] = (obj_list[2*i-2].obj_class << 4) + (obj_list[2*i-2].rng1 >> 4);
 8001bdc:	693a      	ldr	r2, [r7, #16]
 8001bde:	4613      	mov	r3, r2
 8001be0:	005b      	lsls	r3, r3, #1
 8001be2:	4413      	add	r3, r2
 8001be4:	009b      	lsls	r3, r3, #2
 8001be6:	3b0c      	subs	r3, #12
 8001be8:	68fa      	ldr	r2, [r7, #12]
 8001bea:	4413      	add	r3, r2
 8001bec:	791b      	ldrb	r3, [r3, #4]
 8001bee:	011b      	lsls	r3, r3, #4
 8001bf0:	b2d8      	uxtb	r0, r3
 8001bf2:	693a      	ldr	r2, [r7, #16]
 8001bf4:	4613      	mov	r3, r2
 8001bf6:	005b      	lsls	r3, r3, #1
 8001bf8:	4413      	add	r3, r2
 8001bfa:	009b      	lsls	r3, r3, #2
 8001bfc:	3b0c      	subs	r3, #12
 8001bfe:	68fa      	ldr	r2, [r7, #12]
 8001c00:	4413      	add	r3, r2
 8001c02:	789b      	ldrb	r3, [r3, #2]
 8001c04:	091b      	lsrs	r3, r3, #4
 8001c06:	b2d9      	uxtb	r1, r3
 8001c08:	693a      	ldr	r2, [r7, #16]
 8001c0a:	4613      	mov	r3, r2
 8001c0c:	00db      	lsls	r3, r3, #3
 8001c0e:	4413      	add	r3, r2
 8001c10:	687a      	ldr	r2, [r7, #4]
 8001c12:	4413      	add	r3, r2
 8001c14:	1842      	adds	r2, r0, r1
 8001c16:	b2d2      	uxtb	r2, r2
 8001c18:	705a      	strb	r2, [r3, #1]
		buffer[i][2] = ((obj_list[2*i-2].hdng1 & 60) << 2) + (obj_list[2*i-2].rng1 & 15);
 8001c1a:	693a      	ldr	r2, [r7, #16]
 8001c1c:	4613      	mov	r3, r2
 8001c1e:	005b      	lsls	r3, r3, #1
 8001c20:	4413      	add	r3, r2
 8001c22:	009b      	lsls	r3, r3, #2
 8001c24:	3b0c      	subs	r3, #12
 8001c26:	68fa      	ldr	r2, [r7, #12]
 8001c28:	4413      	add	r3, r2
 8001c2a:	781b      	ldrb	r3, [r3, #0]
 8001c2c:	009b      	lsls	r3, r3, #2
 8001c2e:	b25b      	sxtb	r3, r3
 8001c30:	f023 030f 	bic.w	r3, r3, #15
 8001c34:	b259      	sxtb	r1, r3
 8001c36:	693a      	ldr	r2, [r7, #16]
 8001c38:	4613      	mov	r3, r2
 8001c3a:	005b      	lsls	r3, r3, #1
 8001c3c:	4413      	add	r3, r2
 8001c3e:	009b      	lsls	r3, r3, #2
 8001c40:	3b0c      	subs	r3, #12
 8001c42:	68fa      	ldr	r2, [r7, #12]
 8001c44:	4413      	add	r3, r2
 8001c46:	789b      	ldrb	r3, [r3, #2]
 8001c48:	b25b      	sxtb	r3, r3
 8001c4a:	f003 030f 	and.w	r3, r3, #15
 8001c4e:	b25b      	sxtb	r3, r3
 8001c50:	430b      	orrs	r3, r1
 8001c52:	b259      	sxtb	r1, r3
 8001c54:	693a      	ldr	r2, [r7, #16]
 8001c56:	4613      	mov	r3, r2
 8001c58:	00db      	lsls	r3, r3, #3
 8001c5a:	4413      	add	r3, r2
 8001c5c:	687a      	ldr	r2, [r7, #4]
 8001c5e:	4413      	add	r3, r2
 8001c60:	b2ca      	uxtb	r2, r1
 8001c62:	709a      	strb	r2, [r3, #2]
		buffer[i][3] = ((obj_list[2*i-2].hdng1 & 3) << 6) + ((obj_list[2*i-2].rng2 & 252) >> 2);
 8001c64:	693a      	ldr	r2, [r7, #16]
 8001c66:	4613      	mov	r3, r2
 8001c68:	005b      	lsls	r3, r3, #1
 8001c6a:	4413      	add	r3, r2
 8001c6c:	009b      	lsls	r3, r3, #2
 8001c6e:	3b0c      	subs	r3, #12
 8001c70:	68fa      	ldr	r2, [r7, #12]
 8001c72:	4413      	add	r3, r2
 8001c74:	781b      	ldrb	r3, [r3, #0]
 8001c76:	019b      	lsls	r3, r3, #6
 8001c78:	b2d8      	uxtb	r0, r3
 8001c7a:	693a      	ldr	r2, [r7, #16]
 8001c7c:	4613      	mov	r3, r2
 8001c7e:	005b      	lsls	r3, r3, #1
 8001c80:	4413      	add	r3, r2
 8001c82:	009b      	lsls	r3, r3, #2
 8001c84:	3b0c      	subs	r3, #12
 8001c86:	68fa      	ldr	r2, [r7, #12]
 8001c88:	4413      	add	r3, r2
 8001c8a:	78db      	ldrb	r3, [r3, #3]
 8001c8c:	089b      	lsrs	r3, r3, #2
 8001c8e:	b2d9      	uxtb	r1, r3
 8001c90:	693a      	ldr	r2, [r7, #16]
 8001c92:	4613      	mov	r3, r2
 8001c94:	00db      	lsls	r3, r3, #3
 8001c96:	4413      	add	r3, r2
 8001c98:	687a      	ldr	r2, [r7, #4]
 8001c9a:	4413      	add	r3, r2
 8001c9c:	1842      	adds	r2, r0, r1
 8001c9e:	b2d2      	uxtb	r2, r2
 8001ca0:	70da      	strb	r2, [r3, #3]
		buffer[i][4] = ((obj_list[2*i-2].rng2 & 3) >> 6) + obj_list[2*i-2].hdng2;
 8001ca2:	693a      	ldr	r2, [r7, #16]
 8001ca4:	4613      	mov	r3, r2
 8001ca6:	005b      	lsls	r3, r3, #1
 8001ca8:	4413      	add	r3, r2
 8001caa:	009b      	lsls	r3, r3, #2
 8001cac:	3b0c      	subs	r3, #12
 8001cae:	68fa      	ldr	r2, [r7, #12]
 8001cb0:	18d1      	adds	r1, r2, r3
 8001cb2:	693a      	ldr	r2, [r7, #16]
 8001cb4:	4613      	mov	r3, r2
 8001cb6:	00db      	lsls	r3, r3, #3
 8001cb8:	4413      	add	r3, r2
 8001cba:	687a      	ldr	r2, [r7, #4]
 8001cbc:	4413      	add	r3, r2
 8001cbe:	784a      	ldrb	r2, [r1, #1]
 8001cc0:	711a      	strb	r2, [r3, #4]

		if (2*i <= obj_count) {
 8001cc2:	693b      	ldr	r3, [r7, #16]
 8001cc4:	005a      	lsls	r2, r3, #1
 8001cc6:	7afb      	ldrb	r3, [r7, #11]
 8001cc8:	429a      	cmp	r2, r3
 8001cca:	dc73      	bgt.n	8001db4 <package_data+0x224>
			buffer[i][5] = (obj_list[2*i-1].obj_class << 4) + (obj_list[2*i-1].rng1 >> 4);
 8001ccc:	693a      	ldr	r2, [r7, #16]
 8001cce:	4613      	mov	r3, r2
 8001cd0:	005b      	lsls	r3, r3, #1
 8001cd2:	4413      	add	r3, r2
 8001cd4:	009b      	lsls	r3, r3, #2
 8001cd6:	3b06      	subs	r3, #6
 8001cd8:	68fa      	ldr	r2, [r7, #12]
 8001cda:	4413      	add	r3, r2
 8001cdc:	791b      	ldrb	r3, [r3, #4]
 8001cde:	011b      	lsls	r3, r3, #4
 8001ce0:	b2d8      	uxtb	r0, r3
 8001ce2:	693a      	ldr	r2, [r7, #16]
 8001ce4:	4613      	mov	r3, r2
 8001ce6:	005b      	lsls	r3, r3, #1
 8001ce8:	4413      	add	r3, r2
 8001cea:	009b      	lsls	r3, r3, #2
 8001cec:	3b06      	subs	r3, #6
 8001cee:	68fa      	ldr	r2, [r7, #12]
 8001cf0:	4413      	add	r3, r2
 8001cf2:	789b      	ldrb	r3, [r3, #2]
 8001cf4:	091b      	lsrs	r3, r3, #4
 8001cf6:	b2d9      	uxtb	r1, r3
 8001cf8:	693a      	ldr	r2, [r7, #16]
 8001cfa:	4613      	mov	r3, r2
 8001cfc:	00db      	lsls	r3, r3, #3
 8001cfe:	4413      	add	r3, r2
 8001d00:	687a      	ldr	r2, [r7, #4]
 8001d02:	4413      	add	r3, r2
 8001d04:	1842      	adds	r2, r0, r1
 8001d06:	b2d2      	uxtb	r2, r2
 8001d08:	715a      	strb	r2, [r3, #5]
			buffer[i][6] = ((obj_list[2*i-1].hdng1 & 60) << 2) + (obj_list[2*i-1].rng1 & 15);
 8001d0a:	693a      	ldr	r2, [r7, #16]
 8001d0c:	4613      	mov	r3, r2
 8001d0e:	005b      	lsls	r3, r3, #1
 8001d10:	4413      	add	r3, r2
 8001d12:	009b      	lsls	r3, r3, #2
 8001d14:	3b06      	subs	r3, #6
 8001d16:	68fa      	ldr	r2, [r7, #12]
 8001d18:	4413      	add	r3, r2
 8001d1a:	781b      	ldrb	r3, [r3, #0]
 8001d1c:	009b      	lsls	r3, r3, #2
 8001d1e:	b25b      	sxtb	r3, r3
 8001d20:	f023 030f 	bic.w	r3, r3, #15
 8001d24:	b259      	sxtb	r1, r3
 8001d26:	693a      	ldr	r2, [r7, #16]
 8001d28:	4613      	mov	r3, r2
 8001d2a:	005b      	lsls	r3, r3, #1
 8001d2c:	4413      	add	r3, r2
 8001d2e:	009b      	lsls	r3, r3, #2
 8001d30:	3b06      	subs	r3, #6
 8001d32:	68fa      	ldr	r2, [r7, #12]
 8001d34:	4413      	add	r3, r2
 8001d36:	789b      	ldrb	r3, [r3, #2]
 8001d38:	b25b      	sxtb	r3, r3
 8001d3a:	f003 030f 	and.w	r3, r3, #15
 8001d3e:	b25b      	sxtb	r3, r3
 8001d40:	430b      	orrs	r3, r1
 8001d42:	b259      	sxtb	r1, r3
 8001d44:	693a      	ldr	r2, [r7, #16]
 8001d46:	4613      	mov	r3, r2
 8001d48:	00db      	lsls	r3, r3, #3
 8001d4a:	4413      	add	r3, r2
 8001d4c:	687a      	ldr	r2, [r7, #4]
 8001d4e:	4413      	add	r3, r2
 8001d50:	b2ca      	uxtb	r2, r1
 8001d52:	719a      	strb	r2, [r3, #6]
			buffer[i][7] = ((obj_list[2*i-1].hdng1 & 3) << 6) + ((obj_list[2*i-1].rng2 & 252) >> 2);
 8001d54:	693a      	ldr	r2, [r7, #16]
 8001d56:	4613      	mov	r3, r2
 8001d58:	005b      	lsls	r3, r3, #1
 8001d5a:	4413      	add	r3, r2
 8001d5c:	009b      	lsls	r3, r3, #2
 8001d5e:	3b06      	subs	r3, #6
 8001d60:	68fa      	ldr	r2, [r7, #12]
 8001d62:	4413      	add	r3, r2
 8001d64:	781b      	ldrb	r3, [r3, #0]
 8001d66:	019b      	lsls	r3, r3, #6
 8001d68:	b2d8      	uxtb	r0, r3
 8001d6a:	693a      	ldr	r2, [r7, #16]
 8001d6c:	4613      	mov	r3, r2
 8001d6e:	005b      	lsls	r3, r3, #1
 8001d70:	4413      	add	r3, r2
 8001d72:	009b      	lsls	r3, r3, #2
 8001d74:	3b06      	subs	r3, #6
 8001d76:	68fa      	ldr	r2, [r7, #12]
 8001d78:	4413      	add	r3, r2
 8001d7a:	78db      	ldrb	r3, [r3, #3]
 8001d7c:	089b      	lsrs	r3, r3, #2
 8001d7e:	b2d9      	uxtb	r1, r3
 8001d80:	693a      	ldr	r2, [r7, #16]
 8001d82:	4613      	mov	r3, r2
 8001d84:	00db      	lsls	r3, r3, #3
 8001d86:	4413      	add	r3, r2
 8001d88:	687a      	ldr	r2, [r7, #4]
 8001d8a:	4413      	add	r3, r2
 8001d8c:	1842      	adds	r2, r0, r1
 8001d8e:	b2d2      	uxtb	r2, r2
 8001d90:	71da      	strb	r2, [r3, #7]
			buffer[i][8] = ((obj_list[2*i-1].rng2 & 3) >> 6) + obj_list[2*i-1].hdng2;
 8001d92:	693a      	ldr	r2, [r7, #16]
 8001d94:	4613      	mov	r3, r2
 8001d96:	005b      	lsls	r3, r3, #1
 8001d98:	4413      	add	r3, r2
 8001d9a:	009b      	lsls	r3, r3, #2
 8001d9c:	3b06      	subs	r3, #6
 8001d9e:	68fa      	ldr	r2, [r7, #12]
 8001da0:	18d1      	adds	r1, r2, r3
 8001da2:	693a      	ldr	r2, [r7, #16]
 8001da4:	4613      	mov	r3, r2
 8001da6:	00db      	lsls	r3, r3, #3
 8001da8:	4413      	add	r3, r2
 8001daa:	687a      	ldr	r2, [r7, #4]
 8001dac:	4413      	add	r3, r2
 8001dae:	784a      	ldrb	r2, [r1, #1]
 8001db0:	721a      	strb	r2, [r3, #8]
 8001db2:	e01f      	b.n	8001df4 <package_data+0x264>
		}

		else {
			buffer[i][5] = 0;
 8001db4:	693a      	ldr	r2, [r7, #16]
 8001db6:	4613      	mov	r3, r2
 8001db8:	00db      	lsls	r3, r3, #3
 8001dba:	4413      	add	r3, r2
 8001dbc:	687a      	ldr	r2, [r7, #4]
 8001dbe:	4413      	add	r3, r2
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	715a      	strb	r2, [r3, #5]
			buffer[i][6] = 0;
 8001dc4:	693a      	ldr	r2, [r7, #16]
 8001dc6:	4613      	mov	r3, r2
 8001dc8:	00db      	lsls	r3, r3, #3
 8001dca:	4413      	add	r3, r2
 8001dcc:	687a      	ldr	r2, [r7, #4]
 8001dce:	4413      	add	r3, r2
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	719a      	strb	r2, [r3, #6]
			buffer[i][7] = 0;
 8001dd4:	693a      	ldr	r2, [r7, #16]
 8001dd6:	4613      	mov	r3, r2
 8001dd8:	00db      	lsls	r3, r3, #3
 8001dda:	4413      	add	r3, r2
 8001ddc:	687a      	ldr	r2, [r7, #4]
 8001dde:	4413      	add	r3, r2
 8001de0:	2200      	movs	r2, #0
 8001de2:	71da      	strb	r2, [r3, #7]
			buffer[i][8] = 0;
 8001de4:	693a      	ldr	r2, [r7, #16]
 8001de6:	4613      	mov	r3, r2
 8001de8:	00db      	lsls	r3, r3, #3
 8001dea:	4413      	add	r3, r2
 8001dec:	687a      	ldr	r2, [r7, #4]
 8001dee:	4413      	add	r3, r2
 8001df0:	2200      	movs	r2, #0
 8001df2:	721a      	strb	r2, [r3, #8]
	for (int i = 1; i <= (obj_count/2 + obj_count%2); i++) {
 8001df4:	693b      	ldr	r3, [r7, #16]
 8001df6:	3301      	adds	r3, #1
 8001df8:	613b      	str	r3, [r7, #16]
 8001dfa:	7afb      	ldrb	r3, [r7, #11]
 8001dfc:	085b      	lsrs	r3, r3, #1
 8001dfe:	b2db      	uxtb	r3, r3
 8001e00:	461a      	mov	r2, r3
 8001e02:	7afb      	ldrb	r3, [r7, #11]
 8001e04:	f003 0301 	and.w	r3, r3, #1
 8001e08:	4413      	add	r3, r2
 8001e0a:	693a      	ldr	r2, [r7, #16]
 8001e0c:	429a      	cmp	r2, r3
 8001e0e:	f77f aedd 	ble.w	8001bcc <package_data+0x3c>
		}
	}
	return 0;
 8001e12:	2300      	movs	r3, #0
}
 8001e14:	4618      	mov	r0, r3
 8001e16:	371c      	adds	r7, #28
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1e:	4770      	bx	lr

08001e20 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e20:	b480      	push	{r7}
 8001e22:	b083      	sub	sp, #12
 8001e24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e26:	4b0a      	ldr	r3, [pc, #40]	; (8001e50 <HAL_MspInit+0x30>)
 8001e28:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001e2c:	4a08      	ldr	r2, [pc, #32]	; (8001e50 <HAL_MspInit+0x30>)
 8001e2e:	f043 0302 	orr.w	r3, r3, #2
 8001e32:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001e36:	4b06      	ldr	r3, [pc, #24]	; (8001e50 <HAL_MspInit+0x30>)
 8001e38:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001e3c:	f003 0302 	and.w	r3, r3, #2
 8001e40:	607b      	str	r3, [r7, #4]
 8001e42:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e44:	bf00      	nop
 8001e46:	370c      	adds	r7, #12
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4e:	4770      	bx	lr
 8001e50:	58024400 	.word	0x58024400

08001e54 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b08c      	sub	sp, #48	; 0x30
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e5c:	f107 031c 	add.w	r3, r7, #28
 8001e60:	2200      	movs	r2, #0
 8001e62:	601a      	str	r2, [r3, #0]
 8001e64:	605a      	str	r2, [r3, #4]
 8001e66:	609a      	str	r2, [r3, #8]
 8001e68:	60da      	str	r2, [r3, #12]
 8001e6a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	4a4c      	ldr	r2, [pc, #304]	; (8001fa4 <HAL_I2C_MspInit+0x150>)
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d136      	bne.n	8001ee4 <HAL_I2C_MspInit+0x90>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e76:	4b4c      	ldr	r3, [pc, #304]	; (8001fa8 <HAL_I2C_MspInit+0x154>)
 8001e78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e7c:	4a4a      	ldr	r2, [pc, #296]	; (8001fa8 <HAL_I2C_MspInit+0x154>)
 8001e7e:	f043 0302 	orr.w	r3, r3, #2
 8001e82:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001e86:	4b48      	ldr	r3, [pc, #288]	; (8001fa8 <HAL_I2C_MspInit+0x154>)
 8001e88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e8c:	f003 0302 	and.w	r3, r3, #2
 8001e90:	61bb      	str	r3, [r7, #24]
 8001e92:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001e94:	23c0      	movs	r3, #192	; 0xc0
 8001e96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e98:	2312      	movs	r3, #18
 8001e9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001ea4:	2304      	movs	r3, #4
 8001ea6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ea8:	f107 031c 	add.w	r3, r7, #28
 8001eac:	4619      	mov	r1, r3
 8001eae:	483f      	ldr	r0, [pc, #252]	; (8001fac <HAL_I2C_MspInit+0x158>)
 8001eb0:	f001 f93a 	bl	8003128 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001eb4:	4b3c      	ldr	r3, [pc, #240]	; (8001fa8 <HAL_I2C_MspInit+0x154>)
 8001eb6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001eba:	4a3b      	ldr	r2, [pc, #236]	; (8001fa8 <HAL_I2C_MspInit+0x154>)
 8001ebc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001ec0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001ec4:	4b38      	ldr	r3, [pc, #224]	; (8001fa8 <HAL_I2C_MspInit+0x154>)
 8001ec6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001eca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ece:	617b      	str	r3, [r7, #20]
 8001ed0:	697b      	ldr	r3, [r7, #20]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 1, 0);
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	2101      	movs	r1, #1
 8001ed6:	201f      	movs	r0, #31
 8001ed8:	f000 ff4d 	bl	8002d76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001edc:	201f      	movs	r0, #31
 8001ede:	f000 ff64 	bl	8002daa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8001ee2:	e05b      	b.n	8001f9c <HAL_I2C_MspInit+0x148>
  else if(hi2c->Instance==I2C3)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	4a31      	ldr	r2, [pc, #196]	; (8001fb0 <HAL_I2C_MspInit+0x15c>)
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d156      	bne.n	8001f9c <HAL_I2C_MspInit+0x148>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001eee:	4b2e      	ldr	r3, [pc, #184]	; (8001fa8 <HAL_I2C_MspInit+0x154>)
 8001ef0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ef4:	4a2c      	ldr	r2, [pc, #176]	; (8001fa8 <HAL_I2C_MspInit+0x154>)
 8001ef6:	f043 0304 	orr.w	r3, r3, #4
 8001efa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001efe:	4b2a      	ldr	r3, [pc, #168]	; (8001fa8 <HAL_I2C_MspInit+0x154>)
 8001f00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f04:	f003 0304 	and.w	r3, r3, #4
 8001f08:	613b      	str	r3, [r7, #16]
 8001f0a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f0c:	4b26      	ldr	r3, [pc, #152]	; (8001fa8 <HAL_I2C_MspInit+0x154>)
 8001f0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f12:	4a25      	ldr	r2, [pc, #148]	; (8001fa8 <HAL_I2C_MspInit+0x154>)
 8001f14:	f043 0301 	orr.w	r3, r3, #1
 8001f18:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001f1c:	4b22      	ldr	r3, [pc, #136]	; (8001fa8 <HAL_I2C_MspInit+0x154>)
 8001f1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f22:	f003 0301 	and.w	r3, r3, #1
 8001f26:	60fb      	str	r3, [r7, #12]
 8001f28:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001f2a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001f2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f30:	2312      	movs	r3, #18
 8001f32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f34:	2300      	movs	r3, #0
 8001f36:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001f3c:	2304      	movs	r3, #4
 8001f3e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f40:	f107 031c 	add.w	r3, r7, #28
 8001f44:	4619      	mov	r1, r3
 8001f46:	481b      	ldr	r0, [pc, #108]	; (8001fb4 <HAL_I2C_MspInit+0x160>)
 8001f48:	f001 f8ee 	bl	8003128 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001f4c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001f50:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f52:	2312      	movs	r3, #18
 8001f54:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f56:	2300      	movs	r3, #0
 8001f58:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001f5e:	2304      	movs	r3, #4
 8001f60:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f62:	f107 031c 	add.w	r3, r7, #28
 8001f66:	4619      	mov	r1, r3
 8001f68:	4813      	ldr	r0, [pc, #76]	; (8001fb8 <HAL_I2C_MspInit+0x164>)
 8001f6a:	f001 f8dd 	bl	8003128 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001f6e:	4b0e      	ldr	r3, [pc, #56]	; (8001fa8 <HAL_I2C_MspInit+0x154>)
 8001f70:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001f74:	4a0c      	ldr	r2, [pc, #48]	; (8001fa8 <HAL_I2C_MspInit+0x154>)
 8001f76:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001f7a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001f7e:	4b0a      	ldr	r3, [pc, #40]	; (8001fa8 <HAL_I2C_MspInit+0x154>)
 8001f80:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001f84:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001f88:	60bb      	str	r3, [r7, #8]
 8001f8a:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(I2C3_EV_IRQn, 0, 0);
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	2100      	movs	r1, #0
 8001f90:	2048      	movs	r0, #72	; 0x48
 8001f92:	f000 fef0 	bl	8002d76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_EV_IRQn);
 8001f96:	2048      	movs	r0, #72	; 0x48
 8001f98:	f000 ff07 	bl	8002daa <HAL_NVIC_EnableIRQ>
}
 8001f9c:	bf00      	nop
 8001f9e:	3730      	adds	r7, #48	; 0x30
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	bd80      	pop	{r7, pc}
 8001fa4:	40005400 	.word	0x40005400
 8001fa8:	58024400 	.word	0x58024400
 8001fac:	58020400 	.word	0x58020400
 8001fb0:	40005c00 	.word	0x40005c00
 8001fb4:	58020800 	.word	0x58020800
 8001fb8:	58020000 	.word	0x58020000

08001fbc <HAL_JPEG_MspInit>:
* This function configures the hardware resources used in this example
* @param hjpeg: JPEG handle pointer
* @retval None
*/
void HAL_JPEG_MspInit(JPEG_HandleTypeDef* hjpeg)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	b085      	sub	sp, #20
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
  if(hjpeg->Instance==JPEG)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	4a0b      	ldr	r2, [pc, #44]	; (8001ff8 <HAL_JPEG_MspInit+0x3c>)
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	d10e      	bne.n	8001fec <HAL_JPEG_MspInit+0x30>
  {
  /* USER CODE BEGIN JPEG_MspInit 0 */

  /* USER CODE END JPEG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_JPEG_CLK_ENABLE();
 8001fce:	4b0b      	ldr	r3, [pc, #44]	; (8001ffc <HAL_JPEG_MspInit+0x40>)
 8001fd0:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001fd4:	4a09      	ldr	r2, [pc, #36]	; (8001ffc <HAL_JPEG_MspInit+0x40>)
 8001fd6:	f043 0320 	orr.w	r3, r3, #32
 8001fda:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8001fde:	4b07      	ldr	r3, [pc, #28]	; (8001ffc <HAL_JPEG_MspInit+0x40>)
 8001fe0:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001fe4:	f003 0320 	and.w	r3, r3, #32
 8001fe8:	60fb      	str	r3, [r7, #12]
 8001fea:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN JPEG_MspInit 1 */

  /* USER CODE END JPEG_MspInit 1 */
  }

}
 8001fec:	bf00      	nop
 8001fee:	3714      	adds	r7, #20
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff6:	4770      	bx	lr
 8001ff8:	52003000 	.word	0x52003000
 8001ffc:	58024400 	.word	0x58024400

08002000 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b08a      	sub	sp, #40	; 0x28
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002008:	f107 0314 	add.w	r3, r7, #20
 800200c:	2200      	movs	r2, #0
 800200e:	601a      	str	r2, [r3, #0]
 8002010:	605a      	str	r2, [r3, #4]
 8002012:	609a      	str	r2, [r3, #8]
 8002014:	60da      	str	r2, [r3, #12]
 8002016:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART8)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	4a1e      	ldr	r2, [pc, #120]	; (8002098 <HAL_UART_MspInit+0x98>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d135      	bne.n	800208e <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN UART8_MspInit 0 */

  /* USER CODE END UART8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART8_CLK_ENABLE();
 8002022:	4b1e      	ldr	r3, [pc, #120]	; (800209c <HAL_UART_MspInit+0x9c>)
 8002024:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002028:	4a1c      	ldr	r2, [pc, #112]	; (800209c <HAL_UART_MspInit+0x9c>)
 800202a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800202e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002032:	4b1a      	ldr	r3, [pc, #104]	; (800209c <HAL_UART_MspInit+0x9c>)
 8002034:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002038:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800203c:	613b      	str	r3, [r7, #16]
 800203e:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002040:	4b16      	ldr	r3, [pc, #88]	; (800209c <HAL_UART_MspInit+0x9c>)
 8002042:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002046:	4a15      	ldr	r2, [pc, #84]	; (800209c <HAL_UART_MspInit+0x9c>)
 8002048:	f043 0310 	orr.w	r3, r3, #16
 800204c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002050:	4b12      	ldr	r3, [pc, #72]	; (800209c <HAL_UART_MspInit+0x9c>)
 8002052:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002056:	f003 0310 	and.w	r3, r3, #16
 800205a:	60fb      	str	r3, [r7, #12]
 800205c:	68fb      	ldr	r3, [r7, #12]
    /**UART8 GPIO Configuration    
    PE0     ------> UART8_RX
    PE1     ------> UART8_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800205e:	2303      	movs	r3, #3
 8002060:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002062:	2302      	movs	r3, #2
 8002064:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002066:	2300      	movs	r3, #0
 8002068:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800206a:	2302      	movs	r3, #2
 800206c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 800206e:	2308      	movs	r3, #8
 8002070:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002072:	f107 0314 	add.w	r3, r7, #20
 8002076:	4619      	mov	r1, r3
 8002078:	4809      	ldr	r0, [pc, #36]	; (80020a0 <HAL_UART_MspInit+0xa0>)
 800207a:	f001 f855 	bl	8003128 <HAL_GPIO_Init>

    /* UART8 interrupt Init */
    HAL_NVIC_SetPriority(UART8_IRQn, 1, 0);
 800207e:	2200      	movs	r2, #0
 8002080:	2101      	movs	r1, #1
 8002082:	2053      	movs	r0, #83	; 0x53
 8002084:	f000 fe77 	bl	8002d76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART8_IRQn);
 8002088:	2053      	movs	r0, #83	; 0x53
 800208a:	f000 fe8e 	bl	8002daa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART8_MspInit 1 */

  /* USER CODE END UART8_MspInit 1 */
  }

}
 800208e:	bf00      	nop
 8002090:	3728      	adds	r7, #40	; 0x28
 8002092:	46bd      	mov	sp, r7
 8002094:	bd80      	pop	{r7, pc}
 8002096:	bf00      	nop
 8002098:	40007c00 	.word	0x40007c00
 800209c:	58024400 	.word	0x58024400
 80020a0:	58021000 	.word	0x58021000

080020a4 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b082      	sub	sp, #8
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
  if(huart->Instance==UART8)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	4a0a      	ldr	r2, [pc, #40]	; (80020dc <HAL_UART_MspDeInit+0x38>)
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d10e      	bne.n	80020d4 <HAL_UART_MspDeInit+0x30>
  {
  /* USER CODE BEGIN UART8_MspDeInit 0 */

  /* USER CODE END UART8_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_UART8_CLK_DISABLE();
 80020b6:	4b0a      	ldr	r3, [pc, #40]	; (80020e0 <HAL_UART_MspDeInit+0x3c>)
 80020b8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80020bc:	4a08      	ldr	r2, [pc, #32]	; (80020e0 <HAL_UART_MspDeInit+0x3c>)
 80020be:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80020c2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  
    /**UART8 GPIO Configuration    
    PE0     ------> UART8_RX
    PE1     ------> UART8_TX 
    */
    HAL_GPIO_DeInit(GPIOE, GPIO_PIN_0|GPIO_PIN_1);
 80020c6:	2103      	movs	r1, #3
 80020c8:	4806      	ldr	r0, [pc, #24]	; (80020e4 <HAL_UART_MspDeInit+0x40>)
 80020ca:	f001 f9dd 	bl	8003488 <HAL_GPIO_DeInit>

    /* UART8 interrupt DeInit */
    HAL_NVIC_DisableIRQ(UART8_IRQn);
 80020ce:	2053      	movs	r0, #83	; 0x53
 80020d0:	f000 fe79 	bl	8002dc6 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN UART8_MspDeInit 1 */

  /* USER CODE END UART8_MspDeInit 1 */
  }

}
 80020d4:	bf00      	nop
 80020d6:	3708      	adds	r7, #8
 80020d8:	46bd      	mov	sp, r7
 80020da:	bd80      	pop	{r7, pc}
 80020dc:	40007c00 	.word	0x40007c00
 80020e0:	58024400 	.word	0x58024400
 80020e4:	58021000 	.word	0x58021000

080020e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80020e8:	b480      	push	{r7}
 80020ea:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80020ec:	bf00      	nop
 80020ee:	46bd      	mov	sp, r7
 80020f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f4:	4770      	bx	lr

080020f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80020f6:	b480      	push	{r7}
 80020f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80020fa:	e7fe      	b.n	80020fa <HardFault_Handler+0x4>

080020fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80020fc:	b480      	push	{r7}
 80020fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002100:	e7fe      	b.n	8002100 <MemManage_Handler+0x4>

08002102 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002102:	b480      	push	{r7}
 8002104:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002106:	e7fe      	b.n	8002106 <BusFault_Handler+0x4>

08002108 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002108:	b480      	push	{r7}
 800210a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800210c:	e7fe      	b.n	800210c <UsageFault_Handler+0x4>

0800210e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800210e:	b480      	push	{r7}
 8002110:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002112:	bf00      	nop
 8002114:	46bd      	mov	sp, r7
 8002116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211a:	4770      	bx	lr

0800211c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800211c:	b480      	push	{r7}
 800211e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002120:	bf00      	nop
 8002122:	46bd      	mov	sp, r7
 8002124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002128:	4770      	bx	lr

0800212a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800212a:	b480      	push	{r7}
 800212c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800212e:	bf00      	nop
 8002130:	46bd      	mov	sp, r7
 8002132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002136:	4770      	bx	lr

08002138 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800213c:	f000 fcd0 	bl	8002ae0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002140:	bf00      	nop
 8002142:	bd80      	pop	{r7, pc}

08002144 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8002148:	4802      	ldr	r0, [pc, #8]	; (8002154 <I2C1_EV_IRQHandler+0x10>)
 800214a:	f001 ff43 	bl	8003fd4 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800214e:	bf00      	nop
 8002150:	bd80      	pop	{r7, pc}
 8002152:	bf00      	nop
 8002154:	240003d4 	.word	0x240003d4

08002158 <I2C3_EV_IRQHandler>:

/**
  * @brief This function handles I2C3 event interrupt.
  */
void I2C3_EV_IRQHandler(void)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_EV_IRQn 0 */

  /* USER CODE END I2C3_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c3);
 800215c:	4802      	ldr	r0, [pc, #8]	; (8002168 <I2C3_EV_IRQHandler+0x10>)
 800215e:	f001 ff39 	bl	8003fd4 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C3_EV_IRQn 1 */

  /* USER CODE END I2C3_EV_IRQn 1 */
}
 8002162:	bf00      	nop
 8002164:	bd80      	pop	{r7, pc}
 8002166:	bf00      	nop
 8002168:	24000420 	.word	0x24000420

0800216c <UART8_IRQHandler>:

/**
  * @brief This function handles UART8 global interrupt.
  */
void UART8_IRQHandler(void)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART8_IRQn 0 */

  /* USER CODE END UART8_IRQn 0 */
  HAL_UART_IRQHandler(&huart8);
 8002170:	4802      	ldr	r0, [pc, #8]	; (800217c <UART8_IRQHandler+0x10>)
 8002172:	f006 f879 	bl	8008268 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART8_IRQn 1 */

  /* USER CODE END UART8_IRQn 1 */
}
 8002176:	bf00      	nop
 8002178:	bd80      	pop	{r7, pc}
 800217a:	bf00      	nop
 800217c:	240004c4 	.word	0x240004c4

08002180 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b086      	sub	sp, #24
 8002184:	af00      	add	r7, sp, #0
 8002186:	60f8      	str	r0, [r7, #12]
 8002188:	60b9      	str	r1, [r7, #8]
 800218a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800218c:	2300      	movs	r3, #0
 800218e:	617b      	str	r3, [r7, #20]
 8002190:	e00a      	b.n	80021a8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002192:	f3af 8000 	nop.w
 8002196:	4601      	mov	r1, r0
 8002198:	68bb      	ldr	r3, [r7, #8]
 800219a:	1c5a      	adds	r2, r3, #1
 800219c:	60ba      	str	r2, [r7, #8]
 800219e:	b2ca      	uxtb	r2, r1
 80021a0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021a2:	697b      	ldr	r3, [r7, #20]
 80021a4:	3301      	adds	r3, #1
 80021a6:	617b      	str	r3, [r7, #20]
 80021a8:	697a      	ldr	r2, [r7, #20]
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	429a      	cmp	r2, r3
 80021ae:	dbf0      	blt.n	8002192 <_read+0x12>
	}

return len;
 80021b0:	687b      	ldr	r3, [r7, #4]
}
 80021b2:	4618      	mov	r0, r3
 80021b4:	3718      	adds	r7, #24
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bd80      	pop	{r7, pc}

080021ba <_close>:
	}
	return len;
}

int _close(int file)
{
 80021ba:	b480      	push	{r7}
 80021bc:	b083      	sub	sp, #12
 80021be:	af00      	add	r7, sp, #0
 80021c0:	6078      	str	r0, [r7, #4]
	return -1;
 80021c2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80021c6:	4618      	mov	r0, r3
 80021c8:	370c      	adds	r7, #12
 80021ca:	46bd      	mov	sp, r7
 80021cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d0:	4770      	bx	lr

080021d2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80021d2:	b480      	push	{r7}
 80021d4:	b083      	sub	sp, #12
 80021d6:	af00      	add	r7, sp, #0
 80021d8:	6078      	str	r0, [r7, #4]
 80021da:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80021e2:	605a      	str	r2, [r3, #4]
	return 0;
 80021e4:	2300      	movs	r3, #0
}
 80021e6:	4618      	mov	r0, r3
 80021e8:	370c      	adds	r7, #12
 80021ea:	46bd      	mov	sp, r7
 80021ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f0:	4770      	bx	lr

080021f2 <_isatty>:

int _isatty(int file)
{
 80021f2:	b480      	push	{r7}
 80021f4:	b083      	sub	sp, #12
 80021f6:	af00      	add	r7, sp, #0
 80021f8:	6078      	str	r0, [r7, #4]
	return 1;
 80021fa:	2301      	movs	r3, #1
}
 80021fc:	4618      	mov	r0, r3
 80021fe:	370c      	adds	r7, #12
 8002200:	46bd      	mov	sp, r7
 8002202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002206:	4770      	bx	lr

08002208 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002208:	b480      	push	{r7}
 800220a:	b085      	sub	sp, #20
 800220c:	af00      	add	r7, sp, #0
 800220e:	60f8      	str	r0, [r7, #12]
 8002210:	60b9      	str	r1, [r7, #8]
 8002212:	607a      	str	r2, [r7, #4]
	return 0;
 8002214:	2300      	movs	r3, #0
}
 8002216:	4618      	mov	r0, r3
 8002218:	3714      	adds	r7, #20
 800221a:	46bd      	mov	sp, r7
 800221c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002220:	4770      	bx	lr
	...

08002224 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b084      	sub	sp, #16
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800222c:	4b11      	ldr	r3, [pc, #68]	; (8002274 <_sbrk+0x50>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	2b00      	cmp	r3, #0
 8002232:	d102      	bne.n	800223a <_sbrk+0x16>
		heap_end = &end;
 8002234:	4b0f      	ldr	r3, [pc, #60]	; (8002274 <_sbrk+0x50>)
 8002236:	4a10      	ldr	r2, [pc, #64]	; (8002278 <_sbrk+0x54>)
 8002238:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800223a:	4b0e      	ldr	r3, [pc, #56]	; (8002274 <_sbrk+0x50>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8002240:	4b0c      	ldr	r3, [pc, #48]	; (8002274 <_sbrk+0x50>)
 8002242:	681a      	ldr	r2, [r3, #0]
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	4413      	add	r3, r2
 8002248:	466a      	mov	r2, sp
 800224a:	4293      	cmp	r3, r2
 800224c:	d907      	bls.n	800225e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800224e:	f00d ff6f 	bl	8010130 <__errno>
 8002252:	4602      	mov	r2, r0
 8002254:	230c      	movs	r3, #12
 8002256:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8002258:	f04f 33ff 	mov.w	r3, #4294967295
 800225c:	e006      	b.n	800226c <_sbrk+0x48>
	}

	heap_end += incr;
 800225e:	4b05      	ldr	r3, [pc, #20]	; (8002274 <_sbrk+0x50>)
 8002260:	681a      	ldr	r2, [r3, #0]
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	4413      	add	r3, r2
 8002266:	4a03      	ldr	r2, [pc, #12]	; (8002274 <_sbrk+0x50>)
 8002268:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800226a:	68fb      	ldr	r3, [r7, #12]
}
 800226c:	4618      	mov	r0, r3
 800226e:	3710      	adds	r7, #16
 8002270:	46bd      	mov	sp, r7
 8002272:	bd80      	pop	{r7, pc}
 8002274:	24056bbc 	.word	0x24056bbc
 8002278:	24067350 	.word	0x24067350

0800227c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800227c:	b480      	push	{r7}
 800227e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002280:	4b29      	ldr	r3, [pc, #164]	; (8002328 <SystemInit+0xac>)
 8002282:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002286:	4a28      	ldr	r2, [pc, #160]	; (8002328 <SystemInit+0xac>)
 8002288:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800228c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002290:	4b26      	ldr	r3, [pc, #152]	; (800232c <SystemInit+0xb0>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	4a25      	ldr	r2, [pc, #148]	; (800232c <SystemInit+0xb0>)
 8002296:	f043 0301 	orr.w	r3, r3, #1
 800229a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800229c:	4b23      	ldr	r3, [pc, #140]	; (800232c <SystemInit+0xb0>)
 800229e:	2200      	movs	r2, #0
 80022a0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80022a2:	4b22      	ldr	r3, [pc, #136]	; (800232c <SystemInit+0xb0>)
 80022a4:	681a      	ldr	r2, [r3, #0]
 80022a6:	4921      	ldr	r1, [pc, #132]	; (800232c <SystemInit+0xb0>)
 80022a8:	4b21      	ldr	r3, [pc, #132]	; (8002330 <SystemInit+0xb4>)
 80022aa:	4013      	ands	r3, r2
 80022ac:	600b      	str	r3, [r1, #0]

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80022ae:	4b1f      	ldr	r3, [pc, #124]	; (800232c <SystemInit+0xb0>)
 80022b0:	2200      	movs	r2, #0
 80022b2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80022b4:	4b1d      	ldr	r3, [pc, #116]	; (800232c <SystemInit+0xb0>)
 80022b6:	2200      	movs	r2, #0
 80022b8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80022ba:	4b1c      	ldr	r3, [pc, #112]	; (800232c <SystemInit+0xb0>)
 80022bc:	2200      	movs	r2, #0
 80022be:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
 80022c0:	4b1a      	ldr	r3, [pc, #104]	; (800232c <SystemInit+0xb0>)
 80022c2:	2200      	movs	r2, #0
 80022c4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
 80022c6:	4b19      	ldr	r3, [pc, #100]	; (800232c <SystemInit+0xb0>)
 80022c8:	2200      	movs	r2, #0
 80022ca:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
 80022cc:	4b17      	ldr	r3, [pc, #92]	; (800232c <SystemInit+0xb0>)
 80022ce:	2200      	movs	r2, #0
 80022d0:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80022d2:	4b16      	ldr	r3, [pc, #88]	; (800232c <SystemInit+0xb0>)
 80022d4:	2200      	movs	r2, #0
 80022d6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
 80022d8:	4b14      	ldr	r3, [pc, #80]	; (800232c <SystemInit+0xb0>)
 80022da:	2200      	movs	r2, #0
 80022dc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80022de:	4b13      	ldr	r3, [pc, #76]	; (800232c <SystemInit+0xb0>)
 80022e0:	2200      	movs	r2, #0
 80022e2:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
 80022e4:	4b11      	ldr	r3, [pc, #68]	; (800232c <SystemInit+0xb0>)
 80022e6:	2200      	movs	r2, #0
 80022e8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80022ea:	4b10      	ldr	r3, [pc, #64]	; (800232c <SystemInit+0xb0>)
 80022ec:	2200      	movs	r2, #0
 80022ee:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80022f0:	4b0e      	ldr	r3, [pc, #56]	; (800232c <SystemInit+0xb0>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	4a0d      	ldr	r2, [pc, #52]	; (800232c <SystemInit+0xb0>)
 80022f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022fa:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80022fc:	4b0b      	ldr	r3, [pc, #44]	; (800232c <SystemInit+0xb0>)
 80022fe:	2200      	movs	r2, #0
 8002300:	661a      	str	r2, [r3, #96]	; 0x60
  SCB->VTOR = FLASH_BANK2_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
#endif /* VECT_TAB_SRAM */

#else
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8002302:	4b0c      	ldr	r3, [pc, #48]	; (8002334 <SystemInit+0xb8>)
 8002304:	681a      	ldr	r2, [r3, #0]
 8002306:	4b0c      	ldr	r3, [pc, #48]	; (8002338 <SystemInit+0xbc>)
 8002308:	4013      	ands	r3, r2
 800230a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800230e:	d202      	bcs.n	8002316 <SystemInit+0x9a>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8002310:	4b0a      	ldr	r3, [pc, #40]	; (800233c <SystemInit+0xc0>)
 8002312:	2201      	movs	r2, #1
 8002314:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002316:	4b04      	ldr	r3, [pc, #16]	; (8002328 <SystemInit+0xac>)
 8002318:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800231c:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 800231e:	bf00      	nop
 8002320:	46bd      	mov	sp, r7
 8002322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002326:	4770      	bx	lr
 8002328:	e000ed00 	.word	0xe000ed00
 800232c:	58024400 	.word	0x58024400
 8002330:	eaf6ed7f 	.word	0xeaf6ed7f
 8002334:	5c001000 	.word	0x5c001000
 8002338:	ffff0000 	.word	0xffff0000
 800233c:	51008108 	.word	0x51008108

08002340 <weight_avg>:
 *      Author: victo
 */

#include "tof_data_filtering.h"

float weight_avg(int data[], int size) {
 8002340:	b4b0      	push	{r4, r5, r7}
 8002342:	b08d      	sub	sp, #52	; 0x34
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
 8002348:	6039      	str	r1, [r7, #0]
 800234a:	466b      	mov	r3, sp
 800234c:	461d      	mov	r5, r3
	// weights ratio:
	int ratio_denom = 3;
 800234e:	2303      	movs	r3, #3
 8002350:	617b      	str	r3, [r7, #20]
	// calculate weights vector:
	float weights[size];
 8002352:	6838      	ldr	r0, [r7, #0]
 8002354:	1e43      	subs	r3, r0, #1
 8002356:	613b      	str	r3, [r7, #16]
 8002358:	4603      	mov	r3, r0
 800235a:	4619      	mov	r1, r3
 800235c:	f04f 0200 	mov.w	r2, #0
 8002360:	f04f 0300 	mov.w	r3, #0
 8002364:	f04f 0400 	mov.w	r4, #0
 8002368:	0154      	lsls	r4, r2, #5
 800236a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800236e:	014b      	lsls	r3, r1, #5
 8002370:	4603      	mov	r3, r0
 8002372:	4619      	mov	r1, r3
 8002374:	f04f 0200 	mov.w	r2, #0
 8002378:	f04f 0300 	mov.w	r3, #0
 800237c:	f04f 0400 	mov.w	r4, #0
 8002380:	0154      	lsls	r4, r2, #5
 8002382:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002386:	014b      	lsls	r3, r1, #5
 8002388:	4603      	mov	r3, r0
 800238a:	009b      	lsls	r3, r3, #2
 800238c:	3303      	adds	r3, #3
 800238e:	3307      	adds	r3, #7
 8002390:	08db      	lsrs	r3, r3, #3
 8002392:	00db      	lsls	r3, r3, #3
 8002394:	ebad 0d03 	sub.w	sp, sp, r3
 8002398:	466b      	mov	r3, sp
 800239a:	3303      	adds	r3, #3
 800239c:	089b      	lsrs	r3, r3, #2
 800239e:	009b      	lsls	r3, r3, #2
 80023a0:	60fb      	str	r3, [r7, #12]
	// first weight:
	weights[0] = 1.0;
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80023a8:	601a      	str	r2, [r3, #0]
	// other weights:
	for(int i=1; i<size; i++) {
 80023aa:	2301      	movs	r3, #1
 80023ac:	627b      	str	r3, [r7, #36]	; 0x24
 80023ae:	e025      	b.n	80023fc <weight_avg+0xbc>
		weights[i] = ((ratio_denom-1.0) * weights[i-1]) / ratio_denom;
 80023b0:	697b      	ldr	r3, [r7, #20]
 80023b2:	ee07 3a90 	vmov	s15, r3
 80023b6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80023ba:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80023be:	ee37 6b46 	vsub.f64	d6, d7, d6
 80023c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023c4:	3b01      	subs	r3, #1
 80023c6:	68fa      	ldr	r2, [r7, #12]
 80023c8:	009b      	lsls	r3, r3, #2
 80023ca:	4413      	add	r3, r2
 80023cc:	edd3 7a00 	vldr	s15, [r3]
 80023d0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80023d4:	ee26 5b07 	vmul.f64	d5, d6, d7
 80023d8:	697b      	ldr	r3, [r7, #20]
 80023da:	ee07 3a90 	vmov	s15, r3
 80023de:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80023e2:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80023e6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80023ea:	68fa      	ldr	r2, [r7, #12]
 80023ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ee:	009b      	lsls	r3, r3, #2
 80023f0:	4413      	add	r3, r2
 80023f2:	edc3 7a00 	vstr	s15, [r3]
	for(int i=1; i<size; i++) {
 80023f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023f8:	3301      	adds	r3, #1
 80023fa:	627b      	str	r3, [r7, #36]	; 0x24
 80023fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	429a      	cmp	r2, r3
 8002402:	dbd5      	blt.n	80023b0 <weight_avg+0x70>
	}

	// calculate weighted average (disregarding out of range values:
	int sample_num = 0;
 8002404:	2300      	movs	r3, #0
 8002406:	62bb      	str	r3, [r7, #40]	; 0x28
	float total_val = 0;
 8002408:	f04f 0300 	mov.w	r3, #0
 800240c:	62fb      	str	r3, [r7, #44]	; 0x2c
	float total_weight = 0;
 800240e:	f04f 0300 	mov.w	r3, #0
 8002412:	623b      	str	r3, [r7, #32]
	for(int i=size-1; i>=0; i--) {
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	3b01      	subs	r3, #1
 8002418:	61fb      	str	r3, [r7, #28]
 800241a:	e030      	b.n	800247e <weight_avg+0x13e>
		// if distance is in range:
		if(data[i] <= MAX_DISTANCE) {
 800241c:	69fb      	ldr	r3, [r7, #28]
 800241e:	009b      	lsls	r3, r3, #2
 8002420:	687a      	ldr	r2, [r7, #4]
 8002422:	4413      	add	r3, r2
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800242a:	dc25      	bgt.n	8002478 <weight_avg+0x138>
			total_val += weights[sample_num]*data[i];
 800242c:	68fa      	ldr	r2, [r7, #12]
 800242e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002430:	009b      	lsls	r3, r3, #2
 8002432:	4413      	add	r3, r2
 8002434:	ed93 7a00 	vldr	s14, [r3]
 8002438:	69fb      	ldr	r3, [r7, #28]
 800243a:	009b      	lsls	r3, r3, #2
 800243c:	687a      	ldr	r2, [r7, #4]
 800243e:	4413      	add	r3, r2
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	ee07 3a90 	vmov	s15, r3
 8002446:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800244a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800244e:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8002452:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002456:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
			total_weight += weights[sample_num];
 800245a:	68fa      	ldr	r2, [r7, #12]
 800245c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800245e:	009b      	lsls	r3, r3, #2
 8002460:	4413      	add	r3, r2
 8002462:	edd3 7a00 	vldr	s15, [r3]
 8002466:	ed97 7a08 	vldr	s14, [r7, #32]
 800246a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800246e:	edc7 7a08 	vstr	s15, [r7, #32]
			sample_num++;
 8002472:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002474:	3301      	adds	r3, #1
 8002476:	62bb      	str	r3, [r7, #40]	; 0x28
	for(int i=size-1; i>=0; i--) {
 8002478:	69fb      	ldr	r3, [r7, #28]
 800247a:	3b01      	subs	r3, #1
 800247c:	61fb      	str	r3, [r7, #28]
 800247e:	69fb      	ldr	r3, [r7, #28]
 8002480:	2b00      	cmp	r3, #0
 8002482:	dacb      	bge.n	800241c <weight_avg+0xdc>
		}
	}
	float avg = total_val / total_weight;
 8002484:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8002488:	ed97 7a08 	vldr	s14, [r7, #32]
 800248c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002490:	edc7 7a06 	vstr	s15, [r7, #24]

	// if over half the values are out of range, mark average as out of range:
	if(size-sample_num > size/2) {
 8002494:	683a      	ldr	r2, [r7, #0]
 8002496:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002498:	1ad2      	subs	r2, r2, r3
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	2b00      	cmp	r3, #0
 800249e:	da00      	bge.n	80024a2 <weight_avg+0x162>
 80024a0:	3301      	adds	r3, #1
 80024a2:	105b      	asrs	r3, r3, #1
 80024a4:	429a      	cmp	r2, r3
 80024a6:	dd01      	ble.n	80024ac <weight_avg+0x16c>
		avg = OUT_OF_RANGE;
 80024a8:	4b05      	ldr	r3, [pc, #20]	; (80024c0 <weight_avg+0x180>)
 80024aa:	61bb      	str	r3, [r7, #24]
	}

	return avg;
 80024ac:	69bb      	ldr	r3, [r7, #24]
 80024ae:	46ad      	mov	sp, r5
 80024b0:	ee07 3a90 	vmov	s15, r3
}
 80024b4:	eeb0 0a67 	vmov.f32	s0, s15
 80024b8:	3734      	adds	r7, #52	; 0x34
 80024ba:	46bd      	mov	sp, r7
 80024bc:	bcb0      	pop	{r4, r5, r7}
 80024be:	4770      	bx	lr
 80024c0:	447a0000 	.word	0x447a0000

080024c4 <calc_angle>:

float calc_angle(int sensor_num) {
 80024c4:	b480      	push	{r7}
 80024c6:	b085      	sub	sp, #20
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
	// center sensor number:
	int center = NUM_SENSORS/2 + NUM_SENSORS%2;
 80024cc:	2304      	movs	r3, #4
 80024ce:	60fb      	str	r3, [r7, #12]
	// angular heading of sensor sensor_num:
	float angle = ((sensor_num+1)-center) * ANGLE_SEP;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	1c5a      	adds	r2, r3, #1
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	1ad3      	subs	r3, r2, r3
 80024d8:	ee07 3a90 	vmov	s15, r3
 80024dc:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80024e0:	eeb2 6b0e 	vmov.f64	d6, #46	; 0x41700000  15.0
 80024e4:	ee27 7b06 	vmul.f64	d7, d7, d6
 80024e8:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80024ec:	edc7 7a02 	vstr	s15, [r7, #8]

	return angle;
 80024f0:	68bb      	ldr	r3, [r7, #8]
 80024f2:	ee07 3a90 	vmov	s15, r3
}
 80024f6:	eeb0 0a67 	vmov.f32	s0, s15
 80024fa:	3714      	adds	r7, #20
 80024fc:	46bd      	mov	sp, r7
 80024fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002502:	4770      	bx	lr

08002504 <process_ToF>:

void process_ToF(obj_t* object_list, uint8_t * object_num, int data[][NUM_SAMPLES]) {
 8002504:	b580      	push	{r7, lr}
 8002506:	b090      	sub	sp, #64	; 0x40
 8002508:	af00      	add	r7, sp, #0
 800250a:	60f8      	str	r0, [r7, #12]
 800250c:	60b9      	str	r1, [r7, #8]
 800250e:	607a      	str	r2, [r7, #4]

	// compute weighted averages (over samples) for all sensors:
	float avg_distance[NUM_SENSORS];
	for(int i=0; i<NUM_SENSORS; i++) {
 8002510:	2300      	movs	r3, #0
 8002512:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002514:	e018      	b.n	8002548 <process_ToF+0x44>
		avg_distance[i] = weight_avg(data[i], NUM_SAMPLES);
 8002516:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002518:	4613      	mov	r3, r2
 800251a:	009b      	lsls	r3, r3, #2
 800251c:	4413      	add	r3, r2
 800251e:	009b      	lsls	r3, r3, #2
 8002520:	461a      	mov	r2, r3
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	4413      	add	r3, r2
 8002526:	2105      	movs	r1, #5
 8002528:	4618      	mov	r0, r3
 800252a:	f7ff ff09 	bl	8002340 <weight_avg>
 800252e:	eef0 7a40 	vmov.f32	s15, s0
 8002532:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002534:	009b      	lsls	r3, r3, #2
 8002536:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800253a:	4413      	add	r3, r2
 800253c:	3b30      	subs	r3, #48	; 0x30
 800253e:	edc3 7a00 	vstr	s15, [r3]
	for(int i=0; i<NUM_SENSORS; i++) {
 8002542:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002544:	3301      	adds	r3, #1
 8002546:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002548:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800254a:	2b06      	cmp	r3, #6
 800254c:	dde3      	ble.n	8002516 <process_ToF+0x12>
	}

	// determine number of objects and their distance/angles:
	bool object_found = false;
 800254e:	2300      	movs	r3, #0
 8002550:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	int object_count = 0;
 8002554:	2300      	movs	r3, #0
 8002556:	637b      	str	r3, [r7, #52]	; 0x34

	// for first NUM_SENSORS-1 sensors:
	for(int i=0; i<=NUM_SENSORS-2; i++) {
 8002558:	2300      	movs	r3, #0
 800255a:	633b      	str	r3, [r7, #48]	; 0x30
 800255c:	e0bf      	b.n	80026de <process_ToF+0x1da>
		// if searching for new object:
		if(object_found==false) {
 800255e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8002562:	f083 0301 	eor.w	r3, r3, #1
 8002566:	b2db      	uxtb	r3, r3
 8002568:	2b00      	cmp	r3, #0
 800256a:	d058      	beq.n	800261e <process_ToF+0x11a>
			// if new object is detected:
			if(avg_distance[i] <= MAX_DISTANCE) {
 800256c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800256e:	009b      	lsls	r3, r3, #2
 8002570:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8002574:	4413      	add	r3, r2
 8002576:	3b30      	subs	r3, #48	; 0x30
 8002578:	edd3 7a00 	vldr	s15, [r3]
 800257c:	ed9f 7ab2 	vldr	s14, [pc, #712]	; 8002848 <process_ToF+0x344>
 8002580:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002584:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002588:	f200 80a6 	bhi.w	80026d8 <process_ToF+0x1d4>
				// note that object has been detected:
				object_found = true;
 800258c:	2301      	movs	r3, #1
 800258e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
				// record left edge distance and sensor number:
				object_list[object_count].rng1 = ((uint8_t) avg_distance[i])*255/1000;
 8002592:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002594:	009b      	lsls	r3, r3, #2
 8002596:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800259a:	4413      	add	r3, r2
 800259c:	3b30      	subs	r3, #48	; 0x30
 800259e:	edd3 7a00 	vldr	s15, [r3]
 80025a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80025a6:	edc7 7a00 	vstr	s15, [r7]
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	b2db      	uxtb	r3, r3
 80025ae:	461a      	mov	r2, r3
 80025b0:	4613      	mov	r3, r2
 80025b2:	021b      	lsls	r3, r3, #8
 80025b4:	1a9b      	subs	r3, r3, r2
 80025b6:	4aa1      	ldr	r2, [pc, #644]	; (800283c <process_ToF+0x338>)
 80025b8:	fb82 1203 	smull	r1, r2, r2, r3
 80025bc:	1192      	asrs	r2, r2, #6
 80025be:	17db      	asrs	r3, r3, #31
 80025c0:	1ad1      	subs	r1, r2, r3
 80025c2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80025c4:	4613      	mov	r3, r2
 80025c6:	005b      	lsls	r3, r3, #1
 80025c8:	4413      	add	r3, r2
 80025ca:	005b      	lsls	r3, r3, #1
 80025cc:	461a      	mov	r2, r3
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	4413      	add	r3, r2
 80025d2:	b2ca      	uxtb	r2, r1
 80025d4:	709a      	strb	r2, [r3, #2]
				object_list[object_count].hdng1 = ((uint8_t) (calc_angle(i) + 45))*255/100;
 80025d6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80025d8:	f7ff ff74 	bl	80024c4 <calc_angle>
 80025dc:	eeb0 7a40 	vmov.f32	s14, s0
 80025e0:	eddf 7a97 	vldr	s15, [pc, #604]	; 8002840 <process_ToF+0x33c>
 80025e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80025e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80025ec:	edc7 7a00 	vstr	s15, [r7]
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	b2db      	uxtb	r3, r3
 80025f4:	461a      	mov	r2, r3
 80025f6:	4613      	mov	r3, r2
 80025f8:	021b      	lsls	r3, r3, #8
 80025fa:	1a9b      	subs	r3, r3, r2
 80025fc:	4a91      	ldr	r2, [pc, #580]	; (8002844 <process_ToF+0x340>)
 80025fe:	fb82 1203 	smull	r1, r2, r2, r3
 8002602:	1152      	asrs	r2, r2, #5
 8002604:	17db      	asrs	r3, r3, #31
 8002606:	1ad1      	subs	r1, r2, r3
 8002608:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800260a:	4613      	mov	r3, r2
 800260c:	005b      	lsls	r3, r3, #1
 800260e:	4413      	add	r3, r2
 8002610:	005b      	lsls	r3, r3, #1
 8002612:	461a      	mov	r2, r3
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	4413      	add	r3, r2
 8002618:	b2ca      	uxtb	r2, r1
 800261a:	701a      	strb	r2, [r3, #0]
 800261c:	e05c      	b.n	80026d8 <process_ToF+0x1d4>
			}
		}
		// if searching for right edge ("end") of current object:
		else {
			// if right edge of object is detected:
			if(avg_distance[i] > MAX_DISTANCE) {
 800261e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002620:	009b      	lsls	r3, r3, #2
 8002622:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8002626:	4413      	add	r3, r2
 8002628:	3b30      	subs	r3, #48	; 0x30
 800262a:	edd3 7a00 	vldr	s15, [r3]
 800262e:	ed9f 7a86 	vldr	s14, [pc, #536]	; 8002848 <process_ToF+0x344>
 8002632:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002636:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800263a:	dd4d      	ble.n	80026d8 <process_ToF+0x1d4>
				// note that search is done with current object:
				object_found = false;
 800263c:	2300      	movs	r3, #0
 800263e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
				// record right edge distance and sensor number:
				object_list[object_count].rng2 = ((uint8_t) avg_distance[i-1])*255/1000;
 8002642:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002644:	3b01      	subs	r3, #1
 8002646:	009b      	lsls	r3, r3, #2
 8002648:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800264c:	4413      	add	r3, r2
 800264e:	3b30      	subs	r3, #48	; 0x30
 8002650:	edd3 7a00 	vldr	s15, [r3]
 8002654:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002658:	edc7 7a00 	vstr	s15, [r7]
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	b2db      	uxtb	r3, r3
 8002660:	461a      	mov	r2, r3
 8002662:	4613      	mov	r3, r2
 8002664:	021b      	lsls	r3, r3, #8
 8002666:	1a9b      	subs	r3, r3, r2
 8002668:	4a74      	ldr	r2, [pc, #464]	; (800283c <process_ToF+0x338>)
 800266a:	fb82 1203 	smull	r1, r2, r2, r3
 800266e:	1192      	asrs	r2, r2, #6
 8002670:	17db      	asrs	r3, r3, #31
 8002672:	1ad1      	subs	r1, r2, r3
 8002674:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002676:	4613      	mov	r3, r2
 8002678:	005b      	lsls	r3, r3, #1
 800267a:	4413      	add	r3, r2
 800267c:	005b      	lsls	r3, r3, #1
 800267e:	461a      	mov	r2, r3
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	4413      	add	r3, r2
 8002684:	b2ca      	uxtb	r2, r1
 8002686:	70da      	strb	r2, [r3, #3]
				object_list[object_count].hdng2 = ((uint8_t) (calc_angle(i-1) + 45))*255/100;
 8002688:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800268a:	3b01      	subs	r3, #1
 800268c:	4618      	mov	r0, r3
 800268e:	f7ff ff19 	bl	80024c4 <calc_angle>
 8002692:	eeb0 7a40 	vmov.f32	s14, s0
 8002696:	eddf 7a6a 	vldr	s15, [pc, #424]	; 8002840 <process_ToF+0x33c>
 800269a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800269e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80026a2:	edc7 7a00 	vstr	s15, [r7]
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	b2db      	uxtb	r3, r3
 80026aa:	461a      	mov	r2, r3
 80026ac:	4613      	mov	r3, r2
 80026ae:	021b      	lsls	r3, r3, #8
 80026b0:	1a9b      	subs	r3, r3, r2
 80026b2:	4a64      	ldr	r2, [pc, #400]	; (8002844 <process_ToF+0x340>)
 80026b4:	fb82 1203 	smull	r1, r2, r2, r3
 80026b8:	1152      	asrs	r2, r2, #5
 80026ba:	17db      	asrs	r3, r3, #31
 80026bc:	1ad1      	subs	r1, r2, r3
 80026be:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80026c0:	4613      	mov	r3, r2
 80026c2:	005b      	lsls	r3, r3, #1
 80026c4:	4413      	add	r3, r2
 80026c6:	005b      	lsls	r3, r3, #1
 80026c8:	461a      	mov	r2, r3
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	4413      	add	r3, r2
 80026ce:	b2ca      	uxtb	r2, r1
 80026d0:	705a      	strb	r2, [r3, #1]
				// increment number of objects:
				object_count++;
 80026d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026d4:	3301      	adds	r3, #1
 80026d6:	637b      	str	r3, [r7, #52]	; 0x34
	for(int i=0; i<=NUM_SENSORS-2; i++) {
 80026d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026da:	3301      	adds	r3, #1
 80026dc:	633b      	str	r3, [r7, #48]	; 0x30
 80026de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026e0:	2b05      	cmp	r3, #5
 80026e2:	f77f af3c 	ble.w	800255e <process_ToF+0x5a>
	}


	// handle last sensor (NUM_SENSORS-1):
	// last sensor index:
	int i = NUM_SENSORS-1;
 80026e6:	2306      	movs	r3, #6
 80026e8:	62fb      	str	r3, [r7, #44]	; 0x2c
	// if searching for new object:
	if(object_found==false) {
 80026ea:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80026ee:	f083 0301 	eor.w	r3, r3, #1
 80026f2:	b2db      	uxtb	r3, r3
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	f000 80a9 	beq.w	800284c <process_ToF+0x348>
		// if new object is detected:
		if(avg_distance[i] <= MAX_DISTANCE) {
 80026fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026fc:	009b      	lsls	r3, r3, #2
 80026fe:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8002702:	4413      	add	r3, r2
 8002704:	3b30      	subs	r3, #48	; 0x30
 8002706:	edd3 7a00 	vldr	s15, [r3]
 800270a:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 8002848 <process_ToF+0x344>
 800270e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002712:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002716:	f200 813c 	bhi.w	8002992 <process_ToF+0x48e>
			// note that object has been detected:
			object_found = true;
 800271a:	2301      	movs	r3, #1
 800271c:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
			// record left and right edge distances:
			object_list[object_count].rng1 = ((uint8_t) avg_distance[i])*255/1000;
 8002720:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002722:	009b      	lsls	r3, r3, #2
 8002724:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8002728:	4413      	add	r3, r2
 800272a:	3b30      	subs	r3, #48	; 0x30
 800272c:	edd3 7a00 	vldr	s15, [r3]
 8002730:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002734:	edc7 7a00 	vstr	s15, [r7]
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	b2db      	uxtb	r3, r3
 800273c:	461a      	mov	r2, r3
 800273e:	4613      	mov	r3, r2
 8002740:	021b      	lsls	r3, r3, #8
 8002742:	1a9b      	subs	r3, r3, r2
 8002744:	4a3d      	ldr	r2, [pc, #244]	; (800283c <process_ToF+0x338>)
 8002746:	fb82 1203 	smull	r1, r2, r2, r3
 800274a:	1192      	asrs	r2, r2, #6
 800274c:	17db      	asrs	r3, r3, #31
 800274e:	1ad1      	subs	r1, r2, r3
 8002750:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002752:	4613      	mov	r3, r2
 8002754:	005b      	lsls	r3, r3, #1
 8002756:	4413      	add	r3, r2
 8002758:	005b      	lsls	r3, r3, #1
 800275a:	461a      	mov	r2, r3
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	4413      	add	r3, r2
 8002760:	b2ca      	uxtb	r2, r1
 8002762:	709a      	strb	r2, [r3, #2]
			object_list[object_count].rng2 = ((uint8_t) avg_distance[i])*255/1000;
 8002764:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002766:	009b      	lsls	r3, r3, #2
 8002768:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800276c:	4413      	add	r3, r2
 800276e:	3b30      	subs	r3, #48	; 0x30
 8002770:	edd3 7a00 	vldr	s15, [r3]
 8002774:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002778:	edc7 7a00 	vstr	s15, [r7]
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	b2db      	uxtb	r3, r3
 8002780:	461a      	mov	r2, r3
 8002782:	4613      	mov	r3, r2
 8002784:	021b      	lsls	r3, r3, #8
 8002786:	1a9b      	subs	r3, r3, r2
 8002788:	4a2c      	ldr	r2, [pc, #176]	; (800283c <process_ToF+0x338>)
 800278a:	fb82 1203 	smull	r1, r2, r2, r3
 800278e:	1192      	asrs	r2, r2, #6
 8002790:	17db      	asrs	r3, r3, #31
 8002792:	1ad1      	subs	r1, r2, r3
 8002794:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002796:	4613      	mov	r3, r2
 8002798:	005b      	lsls	r3, r3, #1
 800279a:	4413      	add	r3, r2
 800279c:	005b      	lsls	r3, r3, #1
 800279e:	461a      	mov	r2, r3
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	4413      	add	r3, r2
 80027a4:	b2ca      	uxtb	r2, r1
 80027a6:	70da      	strb	r2, [r3, #3]
			// record left and right edge sensor numbers:
			object_list[object_count].hdng1 = ((uint8_t) (calc_angle(i) + 45))*255/100;
 80027a8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80027aa:	f7ff fe8b 	bl	80024c4 <calc_angle>
 80027ae:	eeb0 7a40 	vmov.f32	s14, s0
 80027b2:	eddf 7a23 	vldr	s15, [pc, #140]	; 8002840 <process_ToF+0x33c>
 80027b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80027ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80027be:	edc7 7a00 	vstr	s15, [r7]
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	b2db      	uxtb	r3, r3
 80027c6:	461a      	mov	r2, r3
 80027c8:	4613      	mov	r3, r2
 80027ca:	021b      	lsls	r3, r3, #8
 80027cc:	1a9b      	subs	r3, r3, r2
 80027ce:	4a1d      	ldr	r2, [pc, #116]	; (8002844 <process_ToF+0x340>)
 80027d0:	fb82 1203 	smull	r1, r2, r2, r3
 80027d4:	1152      	asrs	r2, r2, #5
 80027d6:	17db      	asrs	r3, r3, #31
 80027d8:	1ad1      	subs	r1, r2, r3
 80027da:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80027dc:	4613      	mov	r3, r2
 80027de:	005b      	lsls	r3, r3, #1
 80027e0:	4413      	add	r3, r2
 80027e2:	005b      	lsls	r3, r3, #1
 80027e4:	461a      	mov	r2, r3
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	4413      	add	r3, r2
 80027ea:	b2ca      	uxtb	r2, r1
 80027ec:	701a      	strb	r2, [r3, #0]
			object_list[object_count].hdng2 = ((uint8_t) (calc_angle(i) + 45))*255/100;
 80027ee:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80027f0:	f7ff fe68 	bl	80024c4 <calc_angle>
 80027f4:	eeb0 7a40 	vmov.f32	s14, s0
 80027f8:	eddf 7a11 	vldr	s15, [pc, #68]	; 8002840 <process_ToF+0x33c>
 80027fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002800:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002804:	edc7 7a00 	vstr	s15, [r7]
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	b2db      	uxtb	r3, r3
 800280c:	461a      	mov	r2, r3
 800280e:	4613      	mov	r3, r2
 8002810:	021b      	lsls	r3, r3, #8
 8002812:	1a9b      	subs	r3, r3, r2
 8002814:	4a0b      	ldr	r2, [pc, #44]	; (8002844 <process_ToF+0x340>)
 8002816:	fb82 1203 	smull	r1, r2, r2, r3
 800281a:	1152      	asrs	r2, r2, #5
 800281c:	17db      	asrs	r3, r3, #31
 800281e:	1ad1      	subs	r1, r2, r3
 8002820:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002822:	4613      	mov	r3, r2
 8002824:	005b      	lsls	r3, r3, #1
 8002826:	4413      	add	r3, r2
 8002828:	005b      	lsls	r3, r3, #1
 800282a:	461a      	mov	r2, r3
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	4413      	add	r3, r2
 8002830:	b2ca      	uxtb	r2, r1
 8002832:	705a      	strb	r2, [r3, #1]
			// increment number of objects:
			object_count++;
 8002834:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002836:	3301      	adds	r3, #1
 8002838:	637b      	str	r3, [r7, #52]	; 0x34
 800283a:	e0aa      	b.n	8002992 <process_ToF+0x48e>
 800283c:	10624dd3 	.word	0x10624dd3
 8002840:	42340000 	.word	0x42340000
 8002844:	51eb851f 	.word	0x51eb851f
 8002848:	43fa0000 	.word	0x43fa0000
		}
	}
	// if searching for right edge ("end") of current object:
	else {
		// if right edge of object is detected:
		if(avg_distance[i] > MAX_DISTANCE) {
 800284c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800284e:	009b      	lsls	r3, r3, #2
 8002850:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8002854:	4413      	add	r3, r2
 8002856:	3b30      	subs	r3, #48	; 0x30
 8002858:	edd3 7a00 	vldr	s15, [r3]
 800285c:	ed1f 7a06 	vldr	s14, [pc, #-24]	; 8002848 <process_ToF+0x344>
 8002860:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002864:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002868:	dd4b      	ble.n	8002902 <process_ToF+0x3fe>
			// record right edge distance and sensor number:
			object_list[object_count].rng2 = ((uint8_t) avg_distance[i-1])*255/1000;
 800286a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800286c:	3b01      	subs	r3, #1
 800286e:	009b      	lsls	r3, r3, #2
 8002870:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8002874:	4413      	add	r3, r2
 8002876:	3b30      	subs	r3, #48	; 0x30
 8002878:	edd3 7a00 	vldr	s15, [r3]
 800287c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002880:	edc7 7a00 	vstr	s15, [r7]
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	b2db      	uxtb	r3, r3
 8002888:	461a      	mov	r2, r3
 800288a:	4613      	mov	r3, r2
 800288c:	021b      	lsls	r3, r3, #8
 800288e:	1a9b      	subs	r3, r3, r2
 8002890:	4a44      	ldr	r2, [pc, #272]	; (80029a4 <process_ToF+0x4a0>)
 8002892:	fb82 1203 	smull	r1, r2, r2, r3
 8002896:	1192      	asrs	r2, r2, #6
 8002898:	17db      	asrs	r3, r3, #31
 800289a:	1ad1      	subs	r1, r2, r3
 800289c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800289e:	4613      	mov	r3, r2
 80028a0:	005b      	lsls	r3, r3, #1
 80028a2:	4413      	add	r3, r2
 80028a4:	005b      	lsls	r3, r3, #1
 80028a6:	461a      	mov	r2, r3
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	4413      	add	r3, r2
 80028ac:	b2ca      	uxtb	r2, r1
 80028ae:	70da      	strb	r2, [r3, #3]
			object_list[object_count].hdng2 = ((uint8_t) (calc_angle(i-1) + 45))*255/100;
 80028b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028b2:	3b01      	subs	r3, #1
 80028b4:	4618      	mov	r0, r3
 80028b6:	f7ff fe05 	bl	80024c4 <calc_angle>
 80028ba:	eeb0 7a40 	vmov.f32	s14, s0
 80028be:	eddf 7a3a 	vldr	s15, [pc, #232]	; 80029a8 <process_ToF+0x4a4>
 80028c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80028c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80028ca:	edc7 7a00 	vstr	s15, [r7]
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	b2db      	uxtb	r3, r3
 80028d2:	461a      	mov	r2, r3
 80028d4:	4613      	mov	r3, r2
 80028d6:	021b      	lsls	r3, r3, #8
 80028d8:	1a9b      	subs	r3, r3, r2
 80028da:	4a34      	ldr	r2, [pc, #208]	; (80029ac <process_ToF+0x4a8>)
 80028dc:	fb82 1203 	smull	r1, r2, r2, r3
 80028e0:	1152      	asrs	r2, r2, #5
 80028e2:	17db      	asrs	r3, r3, #31
 80028e4:	1ad1      	subs	r1, r2, r3
 80028e6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80028e8:	4613      	mov	r3, r2
 80028ea:	005b      	lsls	r3, r3, #1
 80028ec:	4413      	add	r3, r2
 80028ee:	005b      	lsls	r3, r3, #1
 80028f0:	461a      	mov	r2, r3
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	4413      	add	r3, r2
 80028f6:	b2ca      	uxtb	r2, r1
 80028f8:	705a      	strb	r2, [r3, #1]
			// increment number of objects:
			object_count++;
 80028fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028fc:	3301      	adds	r3, #1
 80028fe:	637b      	str	r3, [r7, #52]	; 0x34
 8002900:	e047      	b.n	8002992 <process_ToF+0x48e>
		}
		// if object extends past FOV:
		else {
			// record right edge distance and sensor number (even though object may extend past FOV):
			object_list[object_count].rng1 = ((uint8_t) avg_distance[i])*255/1000;
 8002902:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002904:	009b      	lsls	r3, r3, #2
 8002906:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800290a:	4413      	add	r3, r2
 800290c:	3b30      	subs	r3, #48	; 0x30
 800290e:	edd3 7a00 	vldr	s15, [r3]
 8002912:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002916:	edc7 7a00 	vstr	s15, [r7]
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	b2db      	uxtb	r3, r3
 800291e:	461a      	mov	r2, r3
 8002920:	4613      	mov	r3, r2
 8002922:	021b      	lsls	r3, r3, #8
 8002924:	1a9b      	subs	r3, r3, r2
 8002926:	4a1f      	ldr	r2, [pc, #124]	; (80029a4 <process_ToF+0x4a0>)
 8002928:	fb82 1203 	smull	r1, r2, r2, r3
 800292c:	1192      	asrs	r2, r2, #6
 800292e:	17db      	asrs	r3, r3, #31
 8002930:	1ad1      	subs	r1, r2, r3
 8002932:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002934:	4613      	mov	r3, r2
 8002936:	005b      	lsls	r3, r3, #1
 8002938:	4413      	add	r3, r2
 800293a:	005b      	lsls	r3, r3, #1
 800293c:	461a      	mov	r2, r3
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	4413      	add	r3, r2
 8002942:	b2ca      	uxtb	r2, r1
 8002944:	709a      	strb	r2, [r3, #2]
			object_list[object_count].hdng1 = ((uint8_t) (calc_angle(i) + 45))*255/100;
 8002946:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002948:	f7ff fdbc 	bl	80024c4 <calc_angle>
 800294c:	eeb0 7a40 	vmov.f32	s14, s0
 8002950:	eddf 7a15 	vldr	s15, [pc, #84]	; 80029a8 <process_ToF+0x4a4>
 8002954:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002958:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800295c:	edc7 7a00 	vstr	s15, [r7]
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	b2db      	uxtb	r3, r3
 8002964:	461a      	mov	r2, r3
 8002966:	4613      	mov	r3, r2
 8002968:	021b      	lsls	r3, r3, #8
 800296a:	1a9b      	subs	r3, r3, r2
 800296c:	4a0f      	ldr	r2, [pc, #60]	; (80029ac <process_ToF+0x4a8>)
 800296e:	fb82 1203 	smull	r1, r2, r2, r3
 8002972:	1152      	asrs	r2, r2, #5
 8002974:	17db      	asrs	r3, r3, #31
 8002976:	1ad1      	subs	r1, r2, r3
 8002978:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800297a:	4613      	mov	r3, r2
 800297c:	005b      	lsls	r3, r3, #1
 800297e:	4413      	add	r3, r2
 8002980:	005b      	lsls	r3, r3, #1
 8002982:	461a      	mov	r2, r3
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	4413      	add	r3, r2
 8002988:	b2ca      	uxtb	r2, r1
 800298a:	701a      	strb	r2, [r3, #0]
			// increment number of objects:
			object_count++;
 800298c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800298e:	3301      	adds	r3, #1
 8002990:	637b      	str	r3, [r7, #52]	; 0x34
		}
	}

	// record number of objects in struct:
	(*object_num) = object_count;
 8002992:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002994:	b2da      	uxtb	r2, r3
 8002996:	68bb      	ldr	r3, [r7, #8]
 8002998:	701a      	strb	r2, [r3, #0]
}
 800299a:	bf00      	nop
 800299c:	3740      	adds	r7, #64	; 0x40
 800299e:	46bd      	mov	sp, r7
 80029a0:	bd80      	pop	{r7, pc}
 80029a2:	bf00      	nop
 80029a4:	10624dd3 	.word	0x10624dd3
 80029a8:	42340000 	.word	0x42340000
 80029ac:	51eb851f 	.word	0x51eb851f

080029b0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80029b0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80029e8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80029b4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80029b6:	e003      	b.n	80029c0 <LoopCopyDataInit>

080029b8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80029b8:	4b0c      	ldr	r3, [pc, #48]	; (80029ec <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80029ba:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80029bc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80029be:	3104      	adds	r1, #4

080029c0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80029c0:	480b      	ldr	r0, [pc, #44]	; (80029f0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80029c2:	4b0c      	ldr	r3, [pc, #48]	; (80029f4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80029c4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80029c6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80029c8:	d3f6      	bcc.n	80029b8 <CopyDataInit>
  ldr  r2, =_sbss
 80029ca:	4a0b      	ldr	r2, [pc, #44]	; (80029f8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80029cc:	e002      	b.n	80029d4 <LoopFillZerobss>

080029ce <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80029ce:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80029d0:	f842 3b04 	str.w	r3, [r2], #4

080029d4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80029d4:	4b09      	ldr	r3, [pc, #36]	; (80029fc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80029d6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80029d8:	d3f9      	bcc.n	80029ce <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80029da:	f7ff fc4f 	bl	800227c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80029de:	f00d fbad 	bl	801013c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80029e2:	f7fe fa83 	bl	8000eec <main>
  bx  lr    
 80029e6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80029e8:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 80029ec:	08011d04 	.word	0x08011d04
  ldr  r0, =_sdata
 80029f0:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 80029f4:	240003b8 	.word	0x240003b8
  ldr  r2, =_sbss
 80029f8:	240003b8 	.word	0x240003b8
  ldr  r3, = _ebss
 80029fc:	24067350 	.word	0x24067350

08002a00 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002a00:	e7fe      	b.n	8002a00 <ADC3_IRQHandler>
	...

08002a04 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002a08:	2003      	movs	r0, #3
 8002a0a:	f000 f9a9 	bl	8002d60 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002a0e:	f003 fdf9 	bl	8006604 <HAL_RCC_GetSysClockFreq>
 8002a12:	4601      	mov	r1, r0
 8002a14:	4b13      	ldr	r3, [pc, #76]	; (8002a64 <HAL_Init+0x60>)
 8002a16:	699b      	ldr	r3, [r3, #24]
 8002a18:	0a1b      	lsrs	r3, r3, #8
 8002a1a:	f003 030f 	and.w	r3, r3, #15
 8002a1e:	4a12      	ldr	r2, [pc, #72]	; (8002a68 <HAL_Init+0x64>)
 8002a20:	5cd3      	ldrb	r3, [r2, r3]
 8002a22:	f003 031f 	and.w	r3, r3, #31
 8002a26:	fa21 f303 	lsr.w	r3, r1, r3
 8002a2a:	4a10      	ldr	r2, [pc, #64]	; (8002a6c <HAL_Init+0x68>)
 8002a2c:	6013      	str	r3, [r2, #0]

  /* Update the SystemD2Clock global variable */
  SystemD2Clock = (SystemCoreClock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002a2e:	4b0f      	ldr	r3, [pc, #60]	; (8002a6c <HAL_Init+0x68>)
 8002a30:	681a      	ldr	r2, [r3, #0]
 8002a32:	4b0c      	ldr	r3, [pc, #48]	; (8002a64 <HAL_Init+0x60>)
 8002a34:	699b      	ldr	r3, [r3, #24]
 8002a36:	f003 030f 	and.w	r3, r3, #15
 8002a3a:	490b      	ldr	r1, [pc, #44]	; (8002a68 <HAL_Init+0x64>)
 8002a3c:	5ccb      	ldrb	r3, [r1, r3]
 8002a3e:	f003 031f 	and.w	r3, r3, #31
 8002a42:	fa22 f303 	lsr.w	r3, r2, r3
 8002a46:	4a0a      	ldr	r2, [pc, #40]	; (8002a70 <HAL_Init+0x6c>)
 8002a48:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002a4a:	2000      	movs	r0, #0
 8002a4c:	f000 f812 	bl	8002a74 <HAL_InitTick>
 8002a50:	4603      	mov	r3, r0
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d001      	beq.n	8002a5a <HAL_Init+0x56>
  {
    return HAL_ERROR;
 8002a56:	2301      	movs	r3, #1
 8002a58:	e002      	b.n	8002a60 <HAL_Init+0x5c>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002a5a:	f7ff f9e1 	bl	8001e20 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002a5e:	2300      	movs	r3, #0
}
 8002a60:	4618      	mov	r0, r3
 8002a62:	bd80      	pop	{r7, pc}
 8002a64:	58024400 	.word	0x58024400
 8002a68:	080119e8 	.word	0x080119e8
 8002a6c:	24000088 	.word	0x24000088
 8002a70:	2400008c 	.word	0x2400008c

08002a74 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b082      	sub	sp, #8
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002a7c:	4b15      	ldr	r3, [pc, #84]	; (8002ad4 <HAL_InitTick+0x60>)
 8002a7e:	781b      	ldrb	r3, [r3, #0]
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d101      	bne.n	8002a88 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002a84:	2301      	movs	r3, #1
 8002a86:	e021      	b.n	8002acc <HAL_InitTick+0x58>
      return HAL_ERROR;
    }
  }
#else
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002a88:	4b13      	ldr	r3, [pc, #76]	; (8002ad8 <HAL_InitTick+0x64>)
 8002a8a:	681a      	ldr	r2, [r3, #0]
 8002a8c:	4b11      	ldr	r3, [pc, #68]	; (8002ad4 <HAL_InitTick+0x60>)
 8002a8e:	781b      	ldrb	r3, [r3, #0]
 8002a90:	4619      	mov	r1, r3
 8002a92:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002a96:	fbb3 f3f1 	udiv	r3, r3, r1
 8002a9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	f000 f99f 	bl	8002de2 <HAL_SYSTICK_Config>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d001      	beq.n	8002aae <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
 8002aaa:	2301      	movs	r3, #1
 8002aac:	e00e      	b.n	8002acc <HAL_InitTick+0x58>
  }
#endif

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	2b0f      	cmp	r3, #15
 8002ab2:	d80a      	bhi.n	8002aca <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	6879      	ldr	r1, [r7, #4]
 8002ab8:	f04f 30ff 	mov.w	r0, #4294967295
 8002abc:	f000 f95b 	bl	8002d76 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002ac0:	4a06      	ldr	r2, [pc, #24]	; (8002adc <HAL_InitTick+0x68>)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	e000      	b.n	8002acc <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002aca:	2301      	movs	r3, #1
}
 8002acc:	4618      	mov	r0, r3
 8002ace:	3708      	adds	r7, #8
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	bd80      	pop	{r7, pc}
 8002ad4:	24000094 	.word	0x24000094
 8002ad8:	24000088 	.word	0x24000088
 8002adc:	24000090 	.word	0x24000090

08002ae0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002ae0:	b480      	push	{r7}
 8002ae2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002ae4:	4b06      	ldr	r3, [pc, #24]	; (8002b00 <HAL_IncTick+0x20>)
 8002ae6:	781b      	ldrb	r3, [r3, #0]
 8002ae8:	461a      	mov	r2, r3
 8002aea:	4b06      	ldr	r3, [pc, #24]	; (8002b04 <HAL_IncTick+0x24>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4413      	add	r3, r2
 8002af0:	4a04      	ldr	r2, [pc, #16]	; (8002b04 <HAL_IncTick+0x24>)
 8002af2:	6013      	str	r3, [r2, #0]
}
 8002af4:	bf00      	nop
 8002af6:	46bd      	mov	sp, r7
 8002af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afc:	4770      	bx	lr
 8002afe:	bf00      	nop
 8002b00:	24000094 	.word	0x24000094
 8002b04:	24067348 	.word	0x24067348

08002b08 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	af00      	add	r7, sp, #0
  return uwTick;
 8002b0c:	4b03      	ldr	r3, [pc, #12]	; (8002b1c <HAL_GetTick+0x14>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
}
 8002b10:	4618      	mov	r0, r3
 8002b12:	46bd      	mov	sp, r7
 8002b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b18:	4770      	bx	lr
 8002b1a:	bf00      	nop
 8002b1c:	24067348 	.word	0x24067348

08002b20 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b084      	sub	sp, #16
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002b28:	f7ff ffee 	bl	8002b08 <HAL_GetTick>
 8002b2c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b38:	d005      	beq.n	8002b46 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002b3a:	4b09      	ldr	r3, [pc, #36]	; (8002b60 <HAL_Delay+0x40>)
 8002b3c:	781b      	ldrb	r3, [r3, #0]
 8002b3e:	461a      	mov	r2, r3
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	4413      	add	r3, r2
 8002b44:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002b46:	bf00      	nop
 8002b48:	f7ff ffde 	bl	8002b08 <HAL_GetTick>
 8002b4c:	4602      	mov	r2, r0
 8002b4e:	68bb      	ldr	r3, [r7, #8]
 8002b50:	1ad3      	subs	r3, r2, r3
 8002b52:	68fa      	ldr	r2, [r7, #12]
 8002b54:	429a      	cmp	r2, r3
 8002b56:	d8f7      	bhi.n	8002b48 <HAL_Delay+0x28>
  {
  }
}
 8002b58:	bf00      	nop
 8002b5a:	3710      	adds	r7, #16
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	bd80      	pop	{r7, pc}
 8002b60:	24000094 	.word	0x24000094

08002b64 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002b64:	b480      	push	{r7}
 8002b66:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002b68:	4b03      	ldr	r3, [pc, #12]	; (8002b78 <HAL_GetREVID+0x14>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	0c1b      	lsrs	r3, r3, #16
}
 8002b6e:	4618      	mov	r0, r3
 8002b70:	46bd      	mov	sp, r7
 8002b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b76:	4770      	bx	lr
 8002b78:	5c001000 	.word	0x5c001000

08002b7c <__NVIC_SetPriorityGrouping>:
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	b085      	sub	sp, #20
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	f003 0307 	and.w	r3, r3, #7
 8002b8a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b8c:	4b0b      	ldr	r3, [pc, #44]	; (8002bbc <__NVIC_SetPriorityGrouping+0x40>)
 8002b8e:	68db      	ldr	r3, [r3, #12]
 8002b90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b92:	68ba      	ldr	r2, [r7, #8]
 8002b94:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002b98:	4013      	ands	r3, r2
 8002b9a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ba0:	68bb      	ldr	r3, [r7, #8]
 8002ba2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002ba4:	4b06      	ldr	r3, [pc, #24]	; (8002bc0 <__NVIC_SetPriorityGrouping+0x44>)
 8002ba6:	4313      	orrs	r3, r2
 8002ba8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002baa:	4a04      	ldr	r2, [pc, #16]	; (8002bbc <__NVIC_SetPriorityGrouping+0x40>)
 8002bac:	68bb      	ldr	r3, [r7, #8]
 8002bae:	60d3      	str	r3, [r2, #12]
}
 8002bb0:	bf00      	nop
 8002bb2:	3714      	adds	r7, #20
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bba:	4770      	bx	lr
 8002bbc:	e000ed00 	.word	0xe000ed00
 8002bc0:	05fa0000 	.word	0x05fa0000

08002bc4 <__NVIC_GetPriorityGrouping>:
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002bc8:	4b04      	ldr	r3, [pc, #16]	; (8002bdc <__NVIC_GetPriorityGrouping+0x18>)
 8002bca:	68db      	ldr	r3, [r3, #12]
 8002bcc:	0a1b      	lsrs	r3, r3, #8
 8002bce:	f003 0307 	and.w	r3, r3, #7
}
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bda:	4770      	bx	lr
 8002bdc:	e000ed00 	.word	0xe000ed00

08002be0 <__NVIC_EnableIRQ>:
{
 8002be0:	b480      	push	{r7}
 8002be2:	b083      	sub	sp, #12
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	4603      	mov	r3, r0
 8002be8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002bea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	db0b      	blt.n	8002c0a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002bf2:	88fb      	ldrh	r3, [r7, #6]
 8002bf4:	f003 021f 	and.w	r2, r3, #31
 8002bf8:	4907      	ldr	r1, [pc, #28]	; (8002c18 <__NVIC_EnableIRQ+0x38>)
 8002bfa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002bfe:	095b      	lsrs	r3, r3, #5
 8002c00:	2001      	movs	r0, #1
 8002c02:	fa00 f202 	lsl.w	r2, r0, r2
 8002c06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002c0a:	bf00      	nop
 8002c0c:	370c      	adds	r7, #12
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c14:	4770      	bx	lr
 8002c16:	bf00      	nop
 8002c18:	e000e100 	.word	0xe000e100

08002c1c <__NVIC_DisableIRQ>:
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	b083      	sub	sp, #12
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	4603      	mov	r3, r0
 8002c24:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002c26:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	db10      	blt.n	8002c50 <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c2e:	88fb      	ldrh	r3, [r7, #6]
 8002c30:	f003 021f 	and.w	r2, r3, #31
 8002c34:	4909      	ldr	r1, [pc, #36]	; (8002c5c <__NVIC_DisableIRQ+0x40>)
 8002c36:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002c3a:	095b      	lsrs	r3, r3, #5
 8002c3c:	2001      	movs	r0, #1
 8002c3e:	fa00 f202 	lsl.w	r2, r0, r2
 8002c42:	3320      	adds	r3, #32
 8002c44:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002c48:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002c4c:	f3bf 8f6f 	isb	sy
}
 8002c50:	bf00      	nop
 8002c52:	370c      	adds	r7, #12
 8002c54:	46bd      	mov	sp, r7
 8002c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5a:	4770      	bx	lr
 8002c5c:	e000e100 	.word	0xe000e100

08002c60 <__NVIC_SetPriority>:
{
 8002c60:	b480      	push	{r7}
 8002c62:	b083      	sub	sp, #12
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	4603      	mov	r3, r0
 8002c68:	6039      	str	r1, [r7, #0]
 8002c6a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002c6c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	db0a      	blt.n	8002c8a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	b2da      	uxtb	r2, r3
 8002c78:	490c      	ldr	r1, [pc, #48]	; (8002cac <__NVIC_SetPriority+0x4c>)
 8002c7a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002c7e:	0112      	lsls	r2, r2, #4
 8002c80:	b2d2      	uxtb	r2, r2
 8002c82:	440b      	add	r3, r1
 8002c84:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002c88:	e00a      	b.n	8002ca0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	b2da      	uxtb	r2, r3
 8002c8e:	4908      	ldr	r1, [pc, #32]	; (8002cb0 <__NVIC_SetPriority+0x50>)
 8002c90:	88fb      	ldrh	r3, [r7, #6]
 8002c92:	f003 030f 	and.w	r3, r3, #15
 8002c96:	3b04      	subs	r3, #4
 8002c98:	0112      	lsls	r2, r2, #4
 8002c9a:	b2d2      	uxtb	r2, r2
 8002c9c:	440b      	add	r3, r1
 8002c9e:	761a      	strb	r2, [r3, #24]
}
 8002ca0:	bf00      	nop
 8002ca2:	370c      	adds	r7, #12
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002caa:	4770      	bx	lr
 8002cac:	e000e100 	.word	0xe000e100
 8002cb0:	e000ed00 	.word	0xe000ed00

08002cb4 <NVIC_EncodePriority>:
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	b089      	sub	sp, #36	; 0x24
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	60f8      	str	r0, [r7, #12]
 8002cbc:	60b9      	str	r1, [r7, #8]
 8002cbe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	f003 0307 	and.w	r3, r3, #7
 8002cc6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002cc8:	69fb      	ldr	r3, [r7, #28]
 8002cca:	f1c3 0307 	rsb	r3, r3, #7
 8002cce:	2b04      	cmp	r3, #4
 8002cd0:	bf28      	it	cs
 8002cd2:	2304      	movcs	r3, #4
 8002cd4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002cd6:	69fb      	ldr	r3, [r7, #28]
 8002cd8:	3304      	adds	r3, #4
 8002cda:	2b06      	cmp	r3, #6
 8002cdc:	d902      	bls.n	8002ce4 <NVIC_EncodePriority+0x30>
 8002cde:	69fb      	ldr	r3, [r7, #28]
 8002ce0:	3b03      	subs	r3, #3
 8002ce2:	e000      	b.n	8002ce6 <NVIC_EncodePriority+0x32>
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ce8:	f04f 32ff 	mov.w	r2, #4294967295
 8002cec:	69bb      	ldr	r3, [r7, #24]
 8002cee:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf2:	43da      	mvns	r2, r3
 8002cf4:	68bb      	ldr	r3, [r7, #8]
 8002cf6:	401a      	ands	r2, r3
 8002cf8:	697b      	ldr	r3, [r7, #20]
 8002cfa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002cfc:	f04f 31ff 	mov.w	r1, #4294967295
 8002d00:	697b      	ldr	r3, [r7, #20]
 8002d02:	fa01 f303 	lsl.w	r3, r1, r3
 8002d06:	43d9      	mvns	r1, r3
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d0c:	4313      	orrs	r3, r2
}
 8002d0e:	4618      	mov	r0, r3
 8002d10:	3724      	adds	r7, #36	; 0x24
 8002d12:	46bd      	mov	sp, r7
 8002d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d18:	4770      	bx	lr
	...

08002d1c <SysTick_Config>:
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b082      	sub	sp, #8
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	3b01      	subs	r3, #1
 8002d28:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002d2c:	d301      	bcc.n	8002d32 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8002d2e:	2301      	movs	r3, #1
 8002d30:	e00f      	b.n	8002d52 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002d32:	4a0a      	ldr	r2, [pc, #40]	; (8002d5c <SysTick_Config+0x40>)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	3b01      	subs	r3, #1
 8002d38:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002d3a:	210f      	movs	r1, #15
 8002d3c:	f04f 30ff 	mov.w	r0, #4294967295
 8002d40:	f7ff ff8e 	bl	8002c60 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002d44:	4b05      	ldr	r3, [pc, #20]	; (8002d5c <SysTick_Config+0x40>)
 8002d46:	2200      	movs	r2, #0
 8002d48:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002d4a:	4b04      	ldr	r3, [pc, #16]	; (8002d5c <SysTick_Config+0x40>)
 8002d4c:	2207      	movs	r2, #7
 8002d4e:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8002d50:	2300      	movs	r3, #0
}
 8002d52:	4618      	mov	r0, r3
 8002d54:	3708      	adds	r7, #8
 8002d56:	46bd      	mov	sp, r7
 8002d58:	bd80      	pop	{r7, pc}
 8002d5a:	bf00      	nop
 8002d5c:	e000e010 	.word	0xe000e010

08002d60 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b082      	sub	sp, #8
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002d68:	6878      	ldr	r0, [r7, #4]
 8002d6a:	f7ff ff07 	bl	8002b7c <__NVIC_SetPriorityGrouping>
}
 8002d6e:	bf00      	nop
 8002d70:	3708      	adds	r7, #8
 8002d72:	46bd      	mov	sp, r7
 8002d74:	bd80      	pop	{r7, pc}

08002d76 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d76:	b580      	push	{r7, lr}
 8002d78:	b086      	sub	sp, #24
 8002d7a:	af00      	add	r7, sp, #0
 8002d7c:	4603      	mov	r3, r0
 8002d7e:	60b9      	str	r1, [r7, #8]
 8002d80:	607a      	str	r2, [r7, #4]
 8002d82:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002d84:	f7ff ff1e 	bl	8002bc4 <__NVIC_GetPriorityGrouping>
 8002d88:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002d8a:	687a      	ldr	r2, [r7, #4]
 8002d8c:	68b9      	ldr	r1, [r7, #8]
 8002d8e:	6978      	ldr	r0, [r7, #20]
 8002d90:	f7ff ff90 	bl	8002cb4 <NVIC_EncodePriority>
 8002d94:	4602      	mov	r2, r0
 8002d96:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002d9a:	4611      	mov	r1, r2
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	f7ff ff5f 	bl	8002c60 <__NVIC_SetPriority>
}
 8002da2:	bf00      	nop
 8002da4:	3718      	adds	r7, #24
 8002da6:	46bd      	mov	sp, r7
 8002da8:	bd80      	pop	{r7, pc}

08002daa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002daa:	b580      	push	{r7, lr}
 8002dac:	b082      	sub	sp, #8
 8002dae:	af00      	add	r7, sp, #0
 8002db0:	4603      	mov	r3, r0
 8002db2:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002db4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002db8:	4618      	mov	r0, r3
 8002dba:	f7ff ff11 	bl	8002be0 <__NVIC_EnableIRQ>
}
 8002dbe:	bf00      	nop
 8002dc0:	3708      	adds	r7, #8
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	bd80      	pop	{r7, pc}

08002dc6 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002dc6:	b580      	push	{r7, lr}
 8002dc8:	b082      	sub	sp, #8
 8002dca:	af00      	add	r7, sp, #0
 8002dcc:	4603      	mov	r3, r0
 8002dce:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8002dd0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	f7ff ff21 	bl	8002c1c <__NVIC_DisableIRQ>
}
 8002dda:	bf00      	nop
 8002ddc:	3708      	adds	r7, #8
 8002dde:	46bd      	mov	sp, r7
 8002de0:	bd80      	pop	{r7, pc}

08002de2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002de2:	b580      	push	{r7, lr}
 8002de4:	b082      	sub	sp, #8
 8002de6:	af00      	add	r7, sp, #0
 8002de8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002dea:	6878      	ldr	r0, [r7, #4]
 8002dec:	f7ff ff96 	bl	8002d1c <SysTick_Config>
 8002df0:	4603      	mov	r3, r0
}
 8002df2:	4618      	mov	r0, r3
 8002df4:	3708      	adds	r7, #8
 8002df6:	46bd      	mov	sp, r7
 8002df8:	bd80      	pop	{r7, pc}
	...

08002dfc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b084      	sub	sp, #16
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d101      	bne.n	8002e0e <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	e188      	b.n	8003120 <HAL_DMA_Abort_IT+0x324>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002e14:	b2db      	uxtb	r3, r3
 8002e16:	2b02      	cmp	r3, #2
 8002e18:	d004      	beq.n	8002e24 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	2280      	movs	r2, #128	; 0x80
 8002e1e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002e20:	2301      	movs	r3, #1
 8002e22:	e17d      	b.n	8003120 <HAL_DMA_Abort_IT+0x324>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4a8c      	ldr	r2, [pc, #560]	; (800305c <HAL_DMA_Abort_IT+0x260>)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d04a      	beq.n	8002ec4 <HAL_DMA_Abort_IT+0xc8>
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	4a8b      	ldr	r2, [pc, #556]	; (8003060 <HAL_DMA_Abort_IT+0x264>)
 8002e34:	4293      	cmp	r3, r2
 8002e36:	d045      	beq.n	8002ec4 <HAL_DMA_Abort_IT+0xc8>
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4a89      	ldr	r2, [pc, #548]	; (8003064 <HAL_DMA_Abort_IT+0x268>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d040      	beq.n	8002ec4 <HAL_DMA_Abort_IT+0xc8>
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	4a88      	ldr	r2, [pc, #544]	; (8003068 <HAL_DMA_Abort_IT+0x26c>)
 8002e48:	4293      	cmp	r3, r2
 8002e4a:	d03b      	beq.n	8002ec4 <HAL_DMA_Abort_IT+0xc8>
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	4a86      	ldr	r2, [pc, #536]	; (800306c <HAL_DMA_Abort_IT+0x270>)
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d036      	beq.n	8002ec4 <HAL_DMA_Abort_IT+0xc8>
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	4a85      	ldr	r2, [pc, #532]	; (8003070 <HAL_DMA_Abort_IT+0x274>)
 8002e5c:	4293      	cmp	r3, r2
 8002e5e:	d031      	beq.n	8002ec4 <HAL_DMA_Abort_IT+0xc8>
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	4a83      	ldr	r2, [pc, #524]	; (8003074 <HAL_DMA_Abort_IT+0x278>)
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d02c      	beq.n	8002ec4 <HAL_DMA_Abort_IT+0xc8>
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	4a82      	ldr	r2, [pc, #520]	; (8003078 <HAL_DMA_Abort_IT+0x27c>)
 8002e70:	4293      	cmp	r3, r2
 8002e72:	d027      	beq.n	8002ec4 <HAL_DMA_Abort_IT+0xc8>
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	4a80      	ldr	r2, [pc, #512]	; (800307c <HAL_DMA_Abort_IT+0x280>)
 8002e7a:	4293      	cmp	r3, r2
 8002e7c:	d022      	beq.n	8002ec4 <HAL_DMA_Abort_IT+0xc8>
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	4a7f      	ldr	r2, [pc, #508]	; (8003080 <HAL_DMA_Abort_IT+0x284>)
 8002e84:	4293      	cmp	r3, r2
 8002e86:	d01d      	beq.n	8002ec4 <HAL_DMA_Abort_IT+0xc8>
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	4a7d      	ldr	r2, [pc, #500]	; (8003084 <HAL_DMA_Abort_IT+0x288>)
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	d018      	beq.n	8002ec4 <HAL_DMA_Abort_IT+0xc8>
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	4a7c      	ldr	r2, [pc, #496]	; (8003088 <HAL_DMA_Abort_IT+0x28c>)
 8002e98:	4293      	cmp	r3, r2
 8002e9a:	d013      	beq.n	8002ec4 <HAL_DMA_Abort_IT+0xc8>
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	4a7a      	ldr	r2, [pc, #488]	; (800308c <HAL_DMA_Abort_IT+0x290>)
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	d00e      	beq.n	8002ec4 <HAL_DMA_Abort_IT+0xc8>
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	4a79      	ldr	r2, [pc, #484]	; (8003090 <HAL_DMA_Abort_IT+0x294>)
 8002eac:	4293      	cmp	r3, r2
 8002eae:	d009      	beq.n	8002ec4 <HAL_DMA_Abort_IT+0xc8>
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	4a77      	ldr	r2, [pc, #476]	; (8003094 <HAL_DMA_Abort_IT+0x298>)
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d004      	beq.n	8002ec4 <HAL_DMA_Abort_IT+0xc8>
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	4a76      	ldr	r2, [pc, #472]	; (8003098 <HAL_DMA_Abort_IT+0x29c>)
 8002ec0:	4293      	cmp	r3, r2
 8002ec2:	d101      	bne.n	8002ec8 <HAL_DMA_Abort_IT+0xcc>
 8002ec4:	2301      	movs	r3, #1
 8002ec6:	e000      	b.n	8002eca <HAL_DMA_Abort_IT+0xce>
 8002ec8:	2300      	movs	r3, #0
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d065      	beq.n	8002f9a <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2204      	movs	r2, #4
 8002ed2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	4a60      	ldr	r2, [pc, #384]	; (800305c <HAL_DMA_Abort_IT+0x260>)
 8002edc:	4293      	cmp	r3, r2
 8002ede:	d04a      	beq.n	8002f76 <HAL_DMA_Abort_IT+0x17a>
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4a5e      	ldr	r2, [pc, #376]	; (8003060 <HAL_DMA_Abort_IT+0x264>)
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d045      	beq.n	8002f76 <HAL_DMA_Abort_IT+0x17a>
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	4a5d      	ldr	r2, [pc, #372]	; (8003064 <HAL_DMA_Abort_IT+0x268>)
 8002ef0:	4293      	cmp	r3, r2
 8002ef2:	d040      	beq.n	8002f76 <HAL_DMA_Abort_IT+0x17a>
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4a5b      	ldr	r2, [pc, #364]	; (8003068 <HAL_DMA_Abort_IT+0x26c>)
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d03b      	beq.n	8002f76 <HAL_DMA_Abort_IT+0x17a>
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	4a5a      	ldr	r2, [pc, #360]	; (800306c <HAL_DMA_Abort_IT+0x270>)
 8002f04:	4293      	cmp	r3, r2
 8002f06:	d036      	beq.n	8002f76 <HAL_DMA_Abort_IT+0x17a>
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	4a58      	ldr	r2, [pc, #352]	; (8003070 <HAL_DMA_Abort_IT+0x274>)
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d031      	beq.n	8002f76 <HAL_DMA_Abort_IT+0x17a>
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	4a57      	ldr	r2, [pc, #348]	; (8003074 <HAL_DMA_Abort_IT+0x278>)
 8002f18:	4293      	cmp	r3, r2
 8002f1a:	d02c      	beq.n	8002f76 <HAL_DMA_Abort_IT+0x17a>
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	4a55      	ldr	r2, [pc, #340]	; (8003078 <HAL_DMA_Abort_IT+0x27c>)
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d027      	beq.n	8002f76 <HAL_DMA_Abort_IT+0x17a>
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	4a54      	ldr	r2, [pc, #336]	; (800307c <HAL_DMA_Abort_IT+0x280>)
 8002f2c:	4293      	cmp	r3, r2
 8002f2e:	d022      	beq.n	8002f76 <HAL_DMA_Abort_IT+0x17a>
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	4a52      	ldr	r2, [pc, #328]	; (8003080 <HAL_DMA_Abort_IT+0x284>)
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d01d      	beq.n	8002f76 <HAL_DMA_Abort_IT+0x17a>
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	4a51      	ldr	r2, [pc, #324]	; (8003084 <HAL_DMA_Abort_IT+0x288>)
 8002f40:	4293      	cmp	r3, r2
 8002f42:	d018      	beq.n	8002f76 <HAL_DMA_Abort_IT+0x17a>
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	4a4f      	ldr	r2, [pc, #316]	; (8003088 <HAL_DMA_Abort_IT+0x28c>)
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d013      	beq.n	8002f76 <HAL_DMA_Abort_IT+0x17a>
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	4a4e      	ldr	r2, [pc, #312]	; (800308c <HAL_DMA_Abort_IT+0x290>)
 8002f54:	4293      	cmp	r3, r2
 8002f56:	d00e      	beq.n	8002f76 <HAL_DMA_Abort_IT+0x17a>
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4a4c      	ldr	r2, [pc, #304]	; (8003090 <HAL_DMA_Abort_IT+0x294>)
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d009      	beq.n	8002f76 <HAL_DMA_Abort_IT+0x17a>
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	4a4b      	ldr	r2, [pc, #300]	; (8003094 <HAL_DMA_Abort_IT+0x298>)
 8002f68:	4293      	cmp	r3, r2
 8002f6a:	d004      	beq.n	8002f76 <HAL_DMA_Abort_IT+0x17a>
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4a49      	ldr	r2, [pc, #292]	; (8003098 <HAL_DMA_Abort_IT+0x29c>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d108      	bne.n	8002f88 <HAL_DMA_Abort_IT+0x18c>
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	681a      	ldr	r2, [r3, #0]
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f022 0201 	bic.w	r2, r2, #1
 8002f84:	601a      	str	r2, [r3, #0]
 8002f86:	e0ca      	b.n	800311e <HAL_DMA_Abort_IT+0x322>
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	681a      	ldr	r2, [r3, #0]
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f022 0201 	bic.w	r2, r2, #1
 8002f96:	601a      	str	r2, [r3, #0]
 8002f98:	e0c1      	b.n	800311e <HAL_DMA_Abort_IT+0x322>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	681a      	ldr	r2, [r3, #0]
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f022 020e 	bic.w	r2, r2, #14
 8002fa8:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	4a2b      	ldr	r2, [pc, #172]	; (800305c <HAL_DMA_Abort_IT+0x260>)
 8002fb0:	4293      	cmp	r3, r2
 8002fb2:	d04a      	beq.n	800304a <HAL_DMA_Abort_IT+0x24e>
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	4a29      	ldr	r2, [pc, #164]	; (8003060 <HAL_DMA_Abort_IT+0x264>)
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	d045      	beq.n	800304a <HAL_DMA_Abort_IT+0x24e>
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	4a28      	ldr	r2, [pc, #160]	; (8003064 <HAL_DMA_Abort_IT+0x268>)
 8002fc4:	4293      	cmp	r3, r2
 8002fc6:	d040      	beq.n	800304a <HAL_DMA_Abort_IT+0x24e>
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	4a26      	ldr	r2, [pc, #152]	; (8003068 <HAL_DMA_Abort_IT+0x26c>)
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	d03b      	beq.n	800304a <HAL_DMA_Abort_IT+0x24e>
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	4a25      	ldr	r2, [pc, #148]	; (800306c <HAL_DMA_Abort_IT+0x270>)
 8002fd8:	4293      	cmp	r3, r2
 8002fda:	d036      	beq.n	800304a <HAL_DMA_Abort_IT+0x24e>
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	4a23      	ldr	r2, [pc, #140]	; (8003070 <HAL_DMA_Abort_IT+0x274>)
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	d031      	beq.n	800304a <HAL_DMA_Abort_IT+0x24e>
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	4a22      	ldr	r2, [pc, #136]	; (8003074 <HAL_DMA_Abort_IT+0x278>)
 8002fec:	4293      	cmp	r3, r2
 8002fee:	d02c      	beq.n	800304a <HAL_DMA_Abort_IT+0x24e>
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	4a20      	ldr	r2, [pc, #128]	; (8003078 <HAL_DMA_Abort_IT+0x27c>)
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d027      	beq.n	800304a <HAL_DMA_Abort_IT+0x24e>
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	4a1f      	ldr	r2, [pc, #124]	; (800307c <HAL_DMA_Abort_IT+0x280>)
 8003000:	4293      	cmp	r3, r2
 8003002:	d022      	beq.n	800304a <HAL_DMA_Abort_IT+0x24e>
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4a1d      	ldr	r2, [pc, #116]	; (8003080 <HAL_DMA_Abort_IT+0x284>)
 800300a:	4293      	cmp	r3, r2
 800300c:	d01d      	beq.n	800304a <HAL_DMA_Abort_IT+0x24e>
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4a1c      	ldr	r2, [pc, #112]	; (8003084 <HAL_DMA_Abort_IT+0x288>)
 8003014:	4293      	cmp	r3, r2
 8003016:	d018      	beq.n	800304a <HAL_DMA_Abort_IT+0x24e>
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4a1a      	ldr	r2, [pc, #104]	; (8003088 <HAL_DMA_Abort_IT+0x28c>)
 800301e:	4293      	cmp	r3, r2
 8003020:	d013      	beq.n	800304a <HAL_DMA_Abort_IT+0x24e>
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4a19      	ldr	r2, [pc, #100]	; (800308c <HAL_DMA_Abort_IT+0x290>)
 8003028:	4293      	cmp	r3, r2
 800302a:	d00e      	beq.n	800304a <HAL_DMA_Abort_IT+0x24e>
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4a17      	ldr	r2, [pc, #92]	; (8003090 <HAL_DMA_Abort_IT+0x294>)
 8003032:	4293      	cmp	r3, r2
 8003034:	d009      	beq.n	800304a <HAL_DMA_Abort_IT+0x24e>
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	4a16      	ldr	r2, [pc, #88]	; (8003094 <HAL_DMA_Abort_IT+0x298>)
 800303c:	4293      	cmp	r3, r2
 800303e:	d004      	beq.n	800304a <HAL_DMA_Abort_IT+0x24e>
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	4a14      	ldr	r2, [pc, #80]	; (8003098 <HAL_DMA_Abort_IT+0x29c>)
 8003046:	4293      	cmp	r3, r2
 8003048:	d128      	bne.n	800309c <HAL_DMA_Abort_IT+0x2a0>
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	681a      	ldr	r2, [r3, #0]
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f022 0201 	bic.w	r2, r2, #1
 8003058:	601a      	str	r2, [r3, #0]
 800305a:	e027      	b.n	80030ac <HAL_DMA_Abort_IT+0x2b0>
 800305c:	40020010 	.word	0x40020010
 8003060:	40020028 	.word	0x40020028
 8003064:	40020040 	.word	0x40020040
 8003068:	40020058 	.word	0x40020058
 800306c:	40020070 	.word	0x40020070
 8003070:	40020088 	.word	0x40020088
 8003074:	400200a0 	.word	0x400200a0
 8003078:	400200b8 	.word	0x400200b8
 800307c:	40020410 	.word	0x40020410
 8003080:	40020428 	.word	0x40020428
 8003084:	40020440 	.word	0x40020440
 8003088:	40020458 	.word	0x40020458
 800308c:	40020470 	.word	0x40020470
 8003090:	40020488 	.word	0x40020488
 8003094:	400204a0 	.word	0x400204a0
 8003098:	400204b8 	.word	0x400204b8
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	681a      	ldr	r2, [r3, #0]
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f022 0201 	bic.w	r2, r2, #1
 80030aa:	601a      	str	r2, [r3, #0]

      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030b0:	681a      	ldr	r2, [r3, #0]
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030b6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80030ba:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030c0:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030c6:	f003 031f 	and.w	r3, r3, #31
 80030ca:	2201      	movs	r2, #1
 80030cc:	409a      	lsls	r2, r3
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	605a      	str	r2, [r3, #4]

      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80030d6:	687a      	ldr	r2, [r7, #4]
 80030d8:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80030da:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d00c      	beq.n	80030fe <HAL_DMA_Abort_IT+0x302>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80030e8:	681a      	ldr	r2, [r3, #0]
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80030ee:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80030f2:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030f8:	687a      	ldr	r2, [r7, #4]
 80030fa:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80030fc:	605a      	str	r2, [r3, #4]
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	2200      	movs	r2, #0
 8003102:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2201      	movs	r2, #1
 800310a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003112:	2b00      	cmp	r3, #0
 8003114:	d003      	beq.n	800311e <HAL_DMA_Abort_IT+0x322>
      {
        hdma->XferAbortCallback(hdma);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800311a:	6878      	ldr	r0, [r7, #4]
 800311c:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 800311e:	2300      	movs	r3, #0
}
 8003120:	4618      	mov	r0, r3
 8003122:	3710      	adds	r7, #16
 8003124:	46bd      	mov	sp, r7
 8003126:	bd80      	pop	{r7, pc}

08003128 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003128:	b480      	push	{r7}
 800312a:	b089      	sub	sp, #36	; 0x24
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
 8003130:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003132:	2300      	movs	r3, #0
 8003134:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8003136:	4b89      	ldr	r3, [pc, #548]	; (800335c <HAL_GPIO_Init+0x234>)
 8003138:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800313a:	e194      	b.n	8003466 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	681a      	ldr	r2, [r3, #0]
 8003140:	2101      	movs	r1, #1
 8003142:	69fb      	ldr	r3, [r7, #28]
 8003144:	fa01 f303 	lsl.w	r3, r1, r3
 8003148:	4013      	ands	r3, r2
 800314a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800314c:	693b      	ldr	r3, [r7, #16]
 800314e:	2b00      	cmp	r3, #0
 8003150:	f000 8186 	beq.w	8003460 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	685b      	ldr	r3, [r3, #4]
 8003158:	2b02      	cmp	r3, #2
 800315a:	d003      	beq.n	8003164 <HAL_GPIO_Init+0x3c>
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	685b      	ldr	r3, [r3, #4]
 8003160:	2b12      	cmp	r3, #18
 8003162:	d123      	bne.n	80031ac <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003164:	69fb      	ldr	r3, [r7, #28]
 8003166:	08da      	lsrs	r2, r3, #3
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	3208      	adds	r2, #8
 800316c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003170:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003172:	69fb      	ldr	r3, [r7, #28]
 8003174:	f003 0307 	and.w	r3, r3, #7
 8003178:	009b      	lsls	r3, r3, #2
 800317a:	220f      	movs	r2, #15
 800317c:	fa02 f303 	lsl.w	r3, r2, r3
 8003180:	43db      	mvns	r3, r3
 8003182:	69ba      	ldr	r2, [r7, #24]
 8003184:	4013      	ands	r3, r2
 8003186:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	691a      	ldr	r2, [r3, #16]
 800318c:	69fb      	ldr	r3, [r7, #28]
 800318e:	f003 0307 	and.w	r3, r3, #7
 8003192:	009b      	lsls	r3, r3, #2
 8003194:	fa02 f303 	lsl.w	r3, r2, r3
 8003198:	69ba      	ldr	r2, [r7, #24]
 800319a:	4313      	orrs	r3, r2
 800319c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800319e:	69fb      	ldr	r3, [r7, #28]
 80031a0:	08da      	lsrs	r2, r3, #3
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	3208      	adds	r2, #8
 80031a6:	69b9      	ldr	r1, [r7, #24]
 80031a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80031b2:	69fb      	ldr	r3, [r7, #28]
 80031b4:	005b      	lsls	r3, r3, #1
 80031b6:	2203      	movs	r2, #3
 80031b8:	fa02 f303 	lsl.w	r3, r2, r3
 80031bc:	43db      	mvns	r3, r3
 80031be:	69ba      	ldr	r2, [r7, #24]
 80031c0:	4013      	ands	r3, r2
 80031c2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	685b      	ldr	r3, [r3, #4]
 80031c8:	f003 0203 	and.w	r2, r3, #3
 80031cc:	69fb      	ldr	r3, [r7, #28]
 80031ce:	005b      	lsls	r3, r3, #1
 80031d0:	fa02 f303 	lsl.w	r3, r2, r3
 80031d4:	69ba      	ldr	r2, [r7, #24]
 80031d6:	4313      	orrs	r3, r2
 80031d8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	69ba      	ldr	r2, [r7, #24]
 80031de:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	685b      	ldr	r3, [r3, #4]
 80031e4:	2b01      	cmp	r3, #1
 80031e6:	d00b      	beq.n	8003200 <HAL_GPIO_Init+0xd8>
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	685b      	ldr	r3, [r3, #4]
 80031ec:	2b02      	cmp	r3, #2
 80031ee:	d007      	beq.n	8003200 <HAL_GPIO_Init+0xd8>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80031f4:	2b11      	cmp	r3, #17
 80031f6:	d003      	beq.n	8003200 <HAL_GPIO_Init+0xd8>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	685b      	ldr	r3, [r3, #4]
 80031fc:	2b12      	cmp	r3, #18
 80031fe:	d130      	bne.n	8003262 <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	689b      	ldr	r3, [r3, #8]
 8003204:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003206:	69fb      	ldr	r3, [r7, #28]
 8003208:	005b      	lsls	r3, r3, #1
 800320a:	2203      	movs	r2, #3
 800320c:	fa02 f303 	lsl.w	r3, r2, r3
 8003210:	43db      	mvns	r3, r3
 8003212:	69ba      	ldr	r2, [r7, #24]
 8003214:	4013      	ands	r3, r2
 8003216:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	68da      	ldr	r2, [r3, #12]
 800321c:	69fb      	ldr	r3, [r7, #28]
 800321e:	005b      	lsls	r3, r3, #1
 8003220:	fa02 f303 	lsl.w	r3, r2, r3
 8003224:	69ba      	ldr	r2, [r7, #24]
 8003226:	4313      	orrs	r3, r2
 8003228:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	69ba      	ldr	r2, [r7, #24]
 800322e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	685b      	ldr	r3, [r3, #4]
 8003234:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003236:	2201      	movs	r2, #1
 8003238:	69fb      	ldr	r3, [r7, #28]
 800323a:	fa02 f303 	lsl.w	r3, r2, r3
 800323e:	43db      	mvns	r3, r3
 8003240:	69ba      	ldr	r2, [r7, #24]
 8003242:	4013      	ands	r3, r2
 8003244:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	685b      	ldr	r3, [r3, #4]
 800324a:	091b      	lsrs	r3, r3, #4
 800324c:	f003 0201 	and.w	r2, r3, #1
 8003250:	69fb      	ldr	r3, [r7, #28]
 8003252:	fa02 f303 	lsl.w	r3, r2, r3
 8003256:	69ba      	ldr	r2, [r7, #24]
 8003258:	4313      	orrs	r3, r2
 800325a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	69ba      	ldr	r2, [r7, #24]
 8003260:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	68db      	ldr	r3, [r3, #12]
 8003266:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003268:	69fb      	ldr	r3, [r7, #28]
 800326a:	005b      	lsls	r3, r3, #1
 800326c:	2203      	movs	r2, #3
 800326e:	fa02 f303 	lsl.w	r3, r2, r3
 8003272:	43db      	mvns	r3, r3
 8003274:	69ba      	ldr	r2, [r7, #24]
 8003276:	4013      	ands	r3, r2
 8003278:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	689a      	ldr	r2, [r3, #8]
 800327e:	69fb      	ldr	r3, [r7, #28]
 8003280:	005b      	lsls	r3, r3, #1
 8003282:	fa02 f303 	lsl.w	r3, r2, r3
 8003286:	69ba      	ldr	r2, [r7, #24]
 8003288:	4313      	orrs	r3, r2
 800328a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	69ba      	ldr	r2, [r7, #24]
 8003290:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	685b      	ldr	r3, [r3, #4]
 8003296:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800329a:	2b00      	cmp	r3, #0
 800329c:	f000 80e0 	beq.w	8003460 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80032a0:	4b2f      	ldr	r3, [pc, #188]	; (8003360 <HAL_GPIO_Init+0x238>)
 80032a2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80032a6:	4a2e      	ldr	r2, [pc, #184]	; (8003360 <HAL_GPIO_Init+0x238>)
 80032a8:	f043 0302 	orr.w	r3, r3, #2
 80032ac:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80032b0:	4b2b      	ldr	r3, [pc, #172]	; (8003360 <HAL_GPIO_Init+0x238>)
 80032b2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80032b6:	f003 0302 	and.w	r3, r3, #2
 80032ba:	60fb      	str	r3, [r7, #12]
 80032bc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80032be:	4a29      	ldr	r2, [pc, #164]	; (8003364 <HAL_GPIO_Init+0x23c>)
 80032c0:	69fb      	ldr	r3, [r7, #28]
 80032c2:	089b      	lsrs	r3, r3, #2
 80032c4:	3302      	adds	r3, #2
 80032c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80032cc:	69fb      	ldr	r3, [r7, #28]
 80032ce:	f003 0303 	and.w	r3, r3, #3
 80032d2:	009b      	lsls	r3, r3, #2
 80032d4:	220f      	movs	r2, #15
 80032d6:	fa02 f303 	lsl.w	r3, r2, r3
 80032da:	43db      	mvns	r3, r3
 80032dc:	69ba      	ldr	r2, [r7, #24]
 80032de:	4013      	ands	r3, r2
 80032e0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	4a20      	ldr	r2, [pc, #128]	; (8003368 <HAL_GPIO_Init+0x240>)
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d052      	beq.n	8003390 <HAL_GPIO_Init+0x268>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	4a1f      	ldr	r2, [pc, #124]	; (800336c <HAL_GPIO_Init+0x244>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d031      	beq.n	8003356 <HAL_GPIO_Init+0x22e>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	4a1e      	ldr	r2, [pc, #120]	; (8003370 <HAL_GPIO_Init+0x248>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d02b      	beq.n	8003352 <HAL_GPIO_Init+0x22a>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	4a1d      	ldr	r2, [pc, #116]	; (8003374 <HAL_GPIO_Init+0x24c>)
 80032fe:	4293      	cmp	r3, r2
 8003300:	d025      	beq.n	800334e <HAL_GPIO_Init+0x226>
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	4a1c      	ldr	r2, [pc, #112]	; (8003378 <HAL_GPIO_Init+0x250>)
 8003306:	4293      	cmp	r3, r2
 8003308:	d01f      	beq.n	800334a <HAL_GPIO_Init+0x222>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	4a1b      	ldr	r2, [pc, #108]	; (800337c <HAL_GPIO_Init+0x254>)
 800330e:	4293      	cmp	r3, r2
 8003310:	d019      	beq.n	8003346 <HAL_GPIO_Init+0x21e>
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	4a1a      	ldr	r2, [pc, #104]	; (8003380 <HAL_GPIO_Init+0x258>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d013      	beq.n	8003342 <HAL_GPIO_Init+0x21a>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	4a19      	ldr	r2, [pc, #100]	; (8003384 <HAL_GPIO_Init+0x25c>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d00d      	beq.n	800333e <HAL_GPIO_Init+0x216>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	4a18      	ldr	r2, [pc, #96]	; (8003388 <HAL_GPIO_Init+0x260>)
 8003326:	4293      	cmp	r3, r2
 8003328:	d007      	beq.n	800333a <HAL_GPIO_Init+0x212>
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	4a17      	ldr	r2, [pc, #92]	; (800338c <HAL_GPIO_Init+0x264>)
 800332e:	4293      	cmp	r3, r2
 8003330:	d101      	bne.n	8003336 <HAL_GPIO_Init+0x20e>
 8003332:	2309      	movs	r3, #9
 8003334:	e02d      	b.n	8003392 <HAL_GPIO_Init+0x26a>
 8003336:	230a      	movs	r3, #10
 8003338:	e02b      	b.n	8003392 <HAL_GPIO_Init+0x26a>
 800333a:	2308      	movs	r3, #8
 800333c:	e029      	b.n	8003392 <HAL_GPIO_Init+0x26a>
 800333e:	2307      	movs	r3, #7
 8003340:	e027      	b.n	8003392 <HAL_GPIO_Init+0x26a>
 8003342:	2306      	movs	r3, #6
 8003344:	e025      	b.n	8003392 <HAL_GPIO_Init+0x26a>
 8003346:	2305      	movs	r3, #5
 8003348:	e023      	b.n	8003392 <HAL_GPIO_Init+0x26a>
 800334a:	2304      	movs	r3, #4
 800334c:	e021      	b.n	8003392 <HAL_GPIO_Init+0x26a>
 800334e:	2303      	movs	r3, #3
 8003350:	e01f      	b.n	8003392 <HAL_GPIO_Init+0x26a>
 8003352:	2302      	movs	r3, #2
 8003354:	e01d      	b.n	8003392 <HAL_GPIO_Init+0x26a>
 8003356:	2301      	movs	r3, #1
 8003358:	e01b      	b.n	8003392 <HAL_GPIO_Init+0x26a>
 800335a:	bf00      	nop
 800335c:	58000080 	.word	0x58000080
 8003360:	58024400 	.word	0x58024400
 8003364:	58000400 	.word	0x58000400
 8003368:	58020000 	.word	0x58020000
 800336c:	58020400 	.word	0x58020400
 8003370:	58020800 	.word	0x58020800
 8003374:	58020c00 	.word	0x58020c00
 8003378:	58021000 	.word	0x58021000
 800337c:	58021400 	.word	0x58021400
 8003380:	58021800 	.word	0x58021800
 8003384:	58021c00 	.word	0x58021c00
 8003388:	58022000 	.word	0x58022000
 800338c:	58022400 	.word	0x58022400
 8003390:	2300      	movs	r3, #0
 8003392:	69fa      	ldr	r2, [r7, #28]
 8003394:	f002 0203 	and.w	r2, r2, #3
 8003398:	0092      	lsls	r2, r2, #2
 800339a:	4093      	lsls	r3, r2
 800339c:	69ba      	ldr	r2, [r7, #24]
 800339e:	4313      	orrs	r3, r2
 80033a0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80033a2:	4938      	ldr	r1, [pc, #224]	; (8003484 <HAL_GPIO_Init+0x35c>)
 80033a4:	69fb      	ldr	r3, [r7, #28]
 80033a6:	089b      	lsrs	r3, r3, #2
 80033a8:	3302      	adds	r3, #2
 80033aa:	69ba      	ldr	r2, [r7, #24]
 80033ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80033b0:	697b      	ldr	r3, [r7, #20]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80033b6:	693b      	ldr	r3, [r7, #16]
 80033b8:	43db      	mvns	r3, r3
 80033ba:	69ba      	ldr	r2, [r7, #24]
 80033bc:	4013      	ands	r3, r2
 80033be:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	685b      	ldr	r3, [r3, #4]
 80033c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d003      	beq.n	80033d4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80033cc:	69ba      	ldr	r2, [r7, #24]
 80033ce:	693b      	ldr	r3, [r7, #16]
 80033d0:	4313      	orrs	r3, r2
 80033d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80033d4:	697b      	ldr	r3, [r7, #20]
 80033d6:	69ba      	ldr	r2, [r7, #24]
 80033d8:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 80033da:	697b      	ldr	r3, [r7, #20]
 80033dc:	685b      	ldr	r3, [r3, #4]
 80033de:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80033e0:	693b      	ldr	r3, [r7, #16]
 80033e2:	43db      	mvns	r3, r3
 80033e4:	69ba      	ldr	r2, [r7, #24]
 80033e6:	4013      	ands	r3, r2
 80033e8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	685b      	ldr	r3, [r3, #4]
 80033ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d003      	beq.n	80033fe <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80033f6:	69ba      	ldr	r2, [r7, #24]
 80033f8:	693b      	ldr	r3, [r7, #16]
 80033fa:	4313      	orrs	r3, r2
 80033fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80033fe:	697b      	ldr	r3, [r7, #20]
 8003400:	69ba      	ldr	r2, [r7, #24]
 8003402:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003404:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800340c:	693b      	ldr	r3, [r7, #16]
 800340e:	43db      	mvns	r3, r3
 8003410:	69ba      	ldr	r2, [r7, #24]
 8003412:	4013      	ands	r3, r2
 8003414:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	685b      	ldr	r3, [r3, #4]
 800341a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800341e:	2b00      	cmp	r3, #0
 8003420:	d003      	beq.n	800342a <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8003422:	69ba      	ldr	r2, [r7, #24]
 8003424:	693b      	ldr	r3, [r7, #16]
 8003426:	4313      	orrs	r3, r2
 8003428:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800342a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800342e:	69bb      	ldr	r3, [r7, #24]
 8003430:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003432:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003436:	685b      	ldr	r3, [r3, #4]
 8003438:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800343a:	693b      	ldr	r3, [r7, #16]
 800343c:	43db      	mvns	r3, r3
 800343e:	69ba      	ldr	r2, [r7, #24]
 8003440:	4013      	ands	r3, r2
 8003442:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	685b      	ldr	r3, [r3, #4]
 8003448:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800344c:	2b00      	cmp	r3, #0
 800344e:	d003      	beq.n	8003458 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8003450:	69ba      	ldr	r2, [r7, #24]
 8003452:	693b      	ldr	r3, [r7, #16]
 8003454:	4313      	orrs	r3, r2
 8003456:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8003458:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800345c:	69bb      	ldr	r3, [r7, #24]
 800345e:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8003460:	69fb      	ldr	r3, [r7, #28]
 8003462:	3301      	adds	r3, #1
 8003464:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003466:	683b      	ldr	r3, [r7, #0]
 8003468:	681a      	ldr	r2, [r3, #0]
 800346a:	69fb      	ldr	r3, [r7, #28]
 800346c:	fa22 f303 	lsr.w	r3, r2, r3
 8003470:	2b00      	cmp	r3, #0
 8003472:	f47f ae63 	bne.w	800313c <HAL_GPIO_Init+0x14>
  }
}
 8003476:	bf00      	nop
 8003478:	3724      	adds	r7, #36	; 0x24
 800347a:	46bd      	mov	sp, r7
 800347c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003480:	4770      	bx	lr
 8003482:	bf00      	nop
 8003484:	58000400 	.word	0x58000400

08003488 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003488:	b480      	push	{r7}
 800348a:	b087      	sub	sp, #28
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
 8003490:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003492:	2300      	movs	r3, #0
 8003494:	617b      	str	r3, [r7, #20]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8003496:	4b75      	ldr	r3, [pc, #468]	; (800366c <HAL_GPIO_DeInit+0x1e4>)
 8003498:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
 800349a:	e0d9      	b.n	8003650 <HAL_GPIO_DeInit+0x1c8>
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position) ;
 800349c:	2201      	movs	r2, #1
 800349e:	697b      	ldr	r3, [r7, #20]
 80034a0:	fa02 f303 	lsl.w	r3, r2, r3
 80034a4:	683a      	ldr	r2, [r7, #0]
 80034a6:	4013      	ands	r3, r2
 80034a8:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00U)
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	f000 80cc 	beq.w	800364a <HAL_GPIO_DeInit+0x1c2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
 80034b2:	4a6f      	ldr	r2, [pc, #444]	; (8003670 <HAL_GPIO_DeInit+0x1e8>)
 80034b4:	697b      	ldr	r3, [r7, #20]
 80034b6:	089b      	lsrs	r3, r3, #2
 80034b8:	3302      	adds	r3, #2
 80034ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034be:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 80034c0:	697b      	ldr	r3, [r7, #20]
 80034c2:	f003 0303 	and.w	r3, r3, #3
 80034c6:	009b      	lsls	r3, r3, #2
 80034c8:	220f      	movs	r2, #15
 80034ca:	fa02 f303 	lsl.w	r3, r2, r3
 80034ce:	68ba      	ldr	r2, [r7, #8]
 80034d0:	4013      	ands	r3, r2
 80034d2:	60bb      	str	r3, [r7, #8]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	4a67      	ldr	r2, [pc, #412]	; (8003674 <HAL_GPIO_DeInit+0x1ec>)
 80034d8:	4293      	cmp	r3, r2
 80034da:	d037      	beq.n	800354c <HAL_GPIO_DeInit+0xc4>
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	4a66      	ldr	r2, [pc, #408]	; (8003678 <HAL_GPIO_DeInit+0x1f0>)
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d031      	beq.n	8003548 <HAL_GPIO_DeInit+0xc0>
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	4a65      	ldr	r2, [pc, #404]	; (800367c <HAL_GPIO_DeInit+0x1f4>)
 80034e8:	4293      	cmp	r3, r2
 80034ea:	d02b      	beq.n	8003544 <HAL_GPIO_DeInit+0xbc>
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	4a64      	ldr	r2, [pc, #400]	; (8003680 <HAL_GPIO_DeInit+0x1f8>)
 80034f0:	4293      	cmp	r3, r2
 80034f2:	d025      	beq.n	8003540 <HAL_GPIO_DeInit+0xb8>
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	4a63      	ldr	r2, [pc, #396]	; (8003684 <HAL_GPIO_DeInit+0x1fc>)
 80034f8:	4293      	cmp	r3, r2
 80034fa:	d01f      	beq.n	800353c <HAL_GPIO_DeInit+0xb4>
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	4a62      	ldr	r2, [pc, #392]	; (8003688 <HAL_GPIO_DeInit+0x200>)
 8003500:	4293      	cmp	r3, r2
 8003502:	d019      	beq.n	8003538 <HAL_GPIO_DeInit+0xb0>
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	4a61      	ldr	r2, [pc, #388]	; (800368c <HAL_GPIO_DeInit+0x204>)
 8003508:	4293      	cmp	r3, r2
 800350a:	d013      	beq.n	8003534 <HAL_GPIO_DeInit+0xac>
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	4a60      	ldr	r2, [pc, #384]	; (8003690 <HAL_GPIO_DeInit+0x208>)
 8003510:	4293      	cmp	r3, r2
 8003512:	d00d      	beq.n	8003530 <HAL_GPIO_DeInit+0xa8>
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	4a5f      	ldr	r2, [pc, #380]	; (8003694 <HAL_GPIO_DeInit+0x20c>)
 8003518:	4293      	cmp	r3, r2
 800351a:	d007      	beq.n	800352c <HAL_GPIO_DeInit+0xa4>
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	4a5e      	ldr	r2, [pc, #376]	; (8003698 <HAL_GPIO_DeInit+0x210>)
 8003520:	4293      	cmp	r3, r2
 8003522:	d101      	bne.n	8003528 <HAL_GPIO_DeInit+0xa0>
 8003524:	2309      	movs	r3, #9
 8003526:	e012      	b.n	800354e <HAL_GPIO_DeInit+0xc6>
 8003528:	230a      	movs	r3, #10
 800352a:	e010      	b.n	800354e <HAL_GPIO_DeInit+0xc6>
 800352c:	2308      	movs	r3, #8
 800352e:	e00e      	b.n	800354e <HAL_GPIO_DeInit+0xc6>
 8003530:	2307      	movs	r3, #7
 8003532:	e00c      	b.n	800354e <HAL_GPIO_DeInit+0xc6>
 8003534:	2306      	movs	r3, #6
 8003536:	e00a      	b.n	800354e <HAL_GPIO_DeInit+0xc6>
 8003538:	2305      	movs	r3, #5
 800353a:	e008      	b.n	800354e <HAL_GPIO_DeInit+0xc6>
 800353c:	2304      	movs	r3, #4
 800353e:	e006      	b.n	800354e <HAL_GPIO_DeInit+0xc6>
 8003540:	2303      	movs	r3, #3
 8003542:	e004      	b.n	800354e <HAL_GPIO_DeInit+0xc6>
 8003544:	2302      	movs	r3, #2
 8003546:	e002      	b.n	800354e <HAL_GPIO_DeInit+0xc6>
 8003548:	2301      	movs	r3, #1
 800354a:	e000      	b.n	800354e <HAL_GPIO_DeInit+0xc6>
 800354c:	2300      	movs	r3, #0
 800354e:	697a      	ldr	r2, [r7, #20]
 8003550:	f002 0203 	and.w	r2, r2, #3
 8003554:	0092      	lsls	r2, r2, #2
 8003556:	4093      	lsls	r3, r2
 8003558:	68ba      	ldr	r2, [r7, #8]
 800355a:	429a      	cmp	r2, r3
 800355c:	d136      	bne.n	80035cc <HAL_GPIO_DeInit+0x144>
      {
        tmp = 0x0FUL << (4U * (position & 0x03U));
 800355e:	697b      	ldr	r3, [r7, #20]
 8003560:	f003 0303 	and.w	r3, r3, #3
 8003564:	009b      	lsls	r3, r3, #2
 8003566:	220f      	movs	r2, #15
 8003568:	fa02 f303 	lsl.w	r3, r2, r3
 800356c:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800356e:	4a40      	ldr	r2, [pc, #256]	; (8003670 <HAL_GPIO_DeInit+0x1e8>)
 8003570:	697b      	ldr	r3, [r7, #20]
 8003572:	089b      	lsrs	r3, r3, #2
 8003574:	3302      	adds	r3, #2
 8003576:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800357a:	68bb      	ldr	r3, [r7, #8]
 800357c:	43da      	mvns	r2, r3
 800357e:	483c      	ldr	r0, [pc, #240]	; (8003670 <HAL_GPIO_DeInit+0x1e8>)
 8003580:	697b      	ldr	r3, [r7, #20]
 8003582:	089b      	lsrs	r3, r3, #2
 8003584:	400a      	ands	r2, r1
 8003586:	3302      	adds	r3, #2
 8003588:	f840 2023 	str.w	r2, [r0, r3, lsl #2]

        /* Clear EXTI line configuration for Current CPU */
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 800358c:	693b      	ldr	r3, [r7, #16]
 800358e:	681a      	ldr	r2, [r3, #0]
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	43db      	mvns	r3, r3
 8003594:	401a      	ands	r2, r3
 8003596:	693b      	ldr	r3, [r7, #16]
 8003598:	601a      	str	r2, [r3, #0]
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 800359a:	693b      	ldr	r3, [r7, #16]
 800359c:	685a      	ldr	r2, [r3, #4]
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	43db      	mvns	r3, r3
 80035a2:	401a      	ands	r2, r3
 80035a4:	693b      	ldr	r3, [r7, #16]
 80035a6:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 80035a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80035ac:	681a      	ldr	r2, [r3, #0]
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	43db      	mvns	r3, r3
 80035b2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80035b6:	4013      	ands	r3, r2
 80035b8:	600b      	str	r3, [r1, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 80035ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80035be:	685a      	ldr	r2, [r3, #4]
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	43db      	mvns	r3, r3
 80035c4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80035c8:	4013      	ands	r3, r2
 80035ca:	604b      	str	r3, [r1, #4]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681a      	ldr	r2, [r3, #0]
 80035d0:	697b      	ldr	r3, [r7, #20]
 80035d2:	005b      	lsls	r3, r3, #1
 80035d4:	2103      	movs	r1, #3
 80035d6:	fa01 f303 	lsl.w	r3, r1, r3
 80035da:	431a      	orrs	r2, r3
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 80035e0:	697b      	ldr	r3, [r7, #20]
 80035e2:	08da      	lsrs	r2, r3, #3
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	3208      	adds	r2, #8
 80035e8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80035ec:	697b      	ldr	r3, [r7, #20]
 80035ee:	f003 0307 	and.w	r3, r3, #7
 80035f2:	009b      	lsls	r3, r3, #2
 80035f4:	220f      	movs	r2, #15
 80035f6:	fa02 f303 	lsl.w	r3, r2, r3
 80035fa:	43db      	mvns	r3, r3
 80035fc:	697a      	ldr	r2, [r7, #20]
 80035fe:	08d2      	lsrs	r2, r2, #3
 8003600:	4019      	ands	r1, r3
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	3208      	adds	r2, #8
 8003606:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	689a      	ldr	r2, [r3, #8]
 800360e:	697b      	ldr	r3, [r7, #20]
 8003610:	005b      	lsls	r3, r3, #1
 8003612:	2103      	movs	r1, #3
 8003614:	fa01 f303 	lsl.w	r3, r1, r3
 8003618:	43db      	mvns	r3, r3
 800361a:	401a      	ands	r2, r3
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	685a      	ldr	r2, [r3, #4]
 8003624:	2101      	movs	r1, #1
 8003626:	697b      	ldr	r3, [r7, #20]
 8003628:	fa01 f303 	lsl.w	r3, r1, r3
 800362c:	43db      	mvns	r3, r3
 800362e:	401a      	ands	r2, r3
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	68da      	ldr	r2, [r3, #12]
 8003638:	697b      	ldr	r3, [r7, #20]
 800363a:	005b      	lsls	r3, r3, #1
 800363c:	2103      	movs	r1, #3
 800363e:	fa01 f303 	lsl.w	r3, r1, r3
 8003642:	43db      	mvns	r3, r3
 8003644:	401a      	ands	r2, r3
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	60da      	str	r2, [r3, #12]
    }

    position++;
 800364a:	697b      	ldr	r3, [r7, #20]
 800364c:	3301      	adds	r3, #1
 800364e:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00U)
 8003650:	683a      	ldr	r2, [r7, #0]
 8003652:	697b      	ldr	r3, [r7, #20]
 8003654:	fa22 f303 	lsr.w	r3, r2, r3
 8003658:	2b00      	cmp	r3, #0
 800365a:	f47f af1f 	bne.w	800349c <HAL_GPIO_DeInit+0x14>
  }
}
 800365e:	bf00      	nop
 8003660:	371c      	adds	r7, #28
 8003662:	46bd      	mov	sp, r7
 8003664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003668:	4770      	bx	lr
 800366a:	bf00      	nop
 800366c:	58000080 	.word	0x58000080
 8003670:	58000400 	.word	0x58000400
 8003674:	58020000 	.word	0x58020000
 8003678:	58020400 	.word	0x58020400
 800367c:	58020800 	.word	0x58020800
 8003680:	58020c00 	.word	0x58020c00
 8003684:	58021000 	.word	0x58021000
 8003688:	58021400 	.word	0x58021400
 800368c:	58021800 	.word	0x58021800
 8003690:	58021c00 	.word	0x58021c00
 8003694:	58022000 	.word	0x58022000
 8003698:	58022400 	.word	0x58022400

0800369c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800369c:	b480      	push	{r7}
 800369e:	b083      	sub	sp, #12
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
 80036a4:	460b      	mov	r3, r1
 80036a6:	807b      	strh	r3, [r7, #2]
 80036a8:	4613      	mov	r3, r2
 80036aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80036ac:	787b      	ldrb	r3, [r7, #1]
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d003      	beq.n	80036ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80036b2:	887a      	ldrh	r2, [r7, #2]
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80036b8:	e003      	b.n	80036c2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80036ba:	887b      	ldrh	r3, [r7, #2]
 80036bc:	041a      	lsls	r2, r3, #16
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	619a      	str	r2, [r3, #24]
}
 80036c2:	bf00      	nop
 80036c4:	370c      	adds	r7, #12
 80036c6:	46bd      	mov	sp, r7
 80036c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036cc:	4770      	bx	lr
	...

080036d0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b082      	sub	sp, #8
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d101      	bne.n	80036e2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80036de:	2301      	movs	r3, #1
 80036e0:	e07f      	b.n	80037e2 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80036e8:	b2db      	uxtb	r3, r3
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d106      	bne.n	80036fc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2200      	movs	r2, #0
 80036f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80036f6:	6878      	ldr	r0, [r7, #4]
 80036f8:	f7fe fbac 	bl	8001e54 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2224      	movs	r2, #36	; 0x24
 8003700:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	681a      	ldr	r2, [r3, #0]
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f022 0201 	bic.w	r2, r2, #1
 8003712:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	685a      	ldr	r2, [r3, #4]
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003720:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	689a      	ldr	r2, [r3, #8]
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003730:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	68db      	ldr	r3, [r3, #12]
 8003736:	2b01      	cmp	r3, #1
 8003738:	d107      	bne.n	800374a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	689a      	ldr	r2, [r3, #8]
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003746:	609a      	str	r2, [r3, #8]
 8003748:	e006      	b.n	8003758 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	689a      	ldr	r2, [r3, #8]
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003756:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	68db      	ldr	r3, [r3, #12]
 800375c:	2b02      	cmp	r3, #2
 800375e:	d104      	bne.n	800376a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003768:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	6859      	ldr	r1, [r3, #4]
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681a      	ldr	r2, [r3, #0]
 8003774:	4b1d      	ldr	r3, [pc, #116]	; (80037ec <HAL_I2C_Init+0x11c>)
 8003776:	430b      	orrs	r3, r1
 8003778:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	68da      	ldr	r2, [r3, #12]
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003788:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	691a      	ldr	r2, [r3, #16]
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	695b      	ldr	r3, [r3, #20]
 8003792:	ea42 0103 	orr.w	r1, r2, r3
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	699b      	ldr	r3, [r3, #24]
 800379a:	021a      	lsls	r2, r3, #8
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	430a      	orrs	r2, r1
 80037a2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	69d9      	ldr	r1, [r3, #28]
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6a1a      	ldr	r2, [r3, #32]
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	430a      	orrs	r2, r1
 80037b2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	681a      	ldr	r2, [r3, #0]
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f042 0201 	orr.w	r2, r2, #1
 80037c2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2200      	movs	r2, #0
 80037c8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	2220      	movs	r2, #32
 80037ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2200      	movs	r2, #0
 80037d6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2200      	movs	r2, #0
 80037dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80037e0:	2300      	movs	r3, #0
}
 80037e2:	4618      	mov	r0, r3
 80037e4:	3708      	adds	r7, #8
 80037e6:	46bd      	mov	sp, r7
 80037e8:	bd80      	pop	{r7, pc}
 80037ea:	bf00      	nop
 80037ec:	02008000 	.word	0x02008000

080037f0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b088      	sub	sp, #32
 80037f4:	af02      	add	r7, sp, #8
 80037f6:	60f8      	str	r0, [r7, #12]
 80037f8:	607a      	str	r2, [r7, #4]
 80037fa:	461a      	mov	r2, r3
 80037fc:	460b      	mov	r3, r1
 80037fe:	817b      	strh	r3, [r7, #10]
 8003800:	4613      	mov	r3, r2
 8003802:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800380a:	b2db      	uxtb	r3, r3
 800380c:	2b20      	cmp	r3, #32
 800380e:	f040 80da 	bne.w	80039c6 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003818:	2b01      	cmp	r3, #1
 800381a:	d101      	bne.n	8003820 <HAL_I2C_Master_Transmit+0x30>
 800381c:	2302      	movs	r3, #2
 800381e:	e0d3      	b.n	80039c8 <HAL_I2C_Master_Transmit+0x1d8>
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	2201      	movs	r2, #1
 8003824:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003828:	f7ff f96e 	bl	8002b08 <HAL_GetTick>
 800382c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800382e:	697b      	ldr	r3, [r7, #20]
 8003830:	9300      	str	r3, [sp, #0]
 8003832:	2319      	movs	r3, #25
 8003834:	2201      	movs	r2, #1
 8003836:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800383a:	68f8      	ldr	r0, [r7, #12]
 800383c:	f000 fc08 	bl	8004050 <I2C_WaitOnFlagUntilTimeout>
 8003840:	4603      	mov	r3, r0
 8003842:	2b00      	cmp	r3, #0
 8003844:	d001      	beq.n	800384a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8003846:	2301      	movs	r3, #1
 8003848:	e0be      	b.n	80039c8 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	2221      	movs	r2, #33	; 0x21
 800384e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	2210      	movs	r2, #16
 8003856:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	2200      	movs	r2, #0
 800385e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	687a      	ldr	r2, [r7, #4]
 8003864:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	893a      	ldrh	r2, [r7, #8]
 800386a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	2200      	movs	r2, #0
 8003870:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003876:	b29b      	uxth	r3, r3
 8003878:	2bff      	cmp	r3, #255	; 0xff
 800387a:	d90e      	bls.n	800389a <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	22ff      	movs	r2, #255	; 0xff
 8003880:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003886:	b2da      	uxtb	r2, r3
 8003888:	8979      	ldrh	r1, [r7, #10]
 800388a:	4b51      	ldr	r3, [pc, #324]	; (80039d0 <HAL_I2C_Master_Transmit+0x1e0>)
 800388c:	9300      	str	r3, [sp, #0]
 800388e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003892:	68f8      	ldr	r0, [r7, #12]
 8003894:	f000 fd6a 	bl	800436c <I2C_TransferConfig>
 8003898:	e06c      	b.n	8003974 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800389e:	b29a      	uxth	r2, r3
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038a8:	b2da      	uxtb	r2, r3
 80038aa:	8979      	ldrh	r1, [r7, #10]
 80038ac:	4b48      	ldr	r3, [pc, #288]	; (80039d0 <HAL_I2C_Master_Transmit+0x1e0>)
 80038ae:	9300      	str	r3, [sp, #0]
 80038b0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80038b4:	68f8      	ldr	r0, [r7, #12]
 80038b6:	f000 fd59 	bl	800436c <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 80038ba:	e05b      	b.n	8003974 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80038bc:	697a      	ldr	r2, [r7, #20]
 80038be:	6a39      	ldr	r1, [r7, #32]
 80038c0:	68f8      	ldr	r0, [r7, #12]
 80038c2:	f000 fc05 	bl	80040d0 <I2C_WaitOnTXISFlagUntilTimeout>
 80038c6:	4603      	mov	r3, r0
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d001      	beq.n	80038d0 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 80038cc:	2301      	movs	r3, #1
 80038ce:	e07b      	b.n	80039c8 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038d4:	781a      	ldrb	r2, [r3, #0]
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038e0:	1c5a      	adds	r2, r3, #1
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038ea:	b29b      	uxth	r3, r3
 80038ec:	3b01      	subs	r3, #1
 80038ee:	b29a      	uxth	r2, r3
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038f8:	3b01      	subs	r3, #1
 80038fa:	b29a      	uxth	r2, r3
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003904:	b29b      	uxth	r3, r3
 8003906:	2b00      	cmp	r3, #0
 8003908:	d034      	beq.n	8003974 <HAL_I2C_Master_Transmit+0x184>
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800390e:	2b00      	cmp	r3, #0
 8003910:	d130      	bne.n	8003974 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003912:	697b      	ldr	r3, [r7, #20]
 8003914:	9300      	str	r3, [sp, #0]
 8003916:	6a3b      	ldr	r3, [r7, #32]
 8003918:	2200      	movs	r2, #0
 800391a:	2180      	movs	r1, #128	; 0x80
 800391c:	68f8      	ldr	r0, [r7, #12]
 800391e:	f000 fb97 	bl	8004050 <I2C_WaitOnFlagUntilTimeout>
 8003922:	4603      	mov	r3, r0
 8003924:	2b00      	cmp	r3, #0
 8003926:	d001      	beq.n	800392c <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8003928:	2301      	movs	r3, #1
 800392a:	e04d      	b.n	80039c8 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003930:	b29b      	uxth	r3, r3
 8003932:	2bff      	cmp	r3, #255	; 0xff
 8003934:	d90e      	bls.n	8003954 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	22ff      	movs	r2, #255	; 0xff
 800393a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003940:	b2da      	uxtb	r2, r3
 8003942:	8979      	ldrh	r1, [r7, #10]
 8003944:	2300      	movs	r3, #0
 8003946:	9300      	str	r3, [sp, #0]
 8003948:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800394c:	68f8      	ldr	r0, [r7, #12]
 800394e:	f000 fd0d 	bl	800436c <I2C_TransferConfig>
 8003952:	e00f      	b.n	8003974 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003958:	b29a      	uxth	r2, r3
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003962:	b2da      	uxtb	r2, r3
 8003964:	8979      	ldrh	r1, [r7, #10]
 8003966:	2300      	movs	r3, #0
 8003968:	9300      	str	r3, [sp, #0]
 800396a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800396e:	68f8      	ldr	r0, [r7, #12]
 8003970:	f000 fcfc 	bl	800436c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003978:	b29b      	uxth	r3, r3
 800397a:	2b00      	cmp	r3, #0
 800397c:	d19e      	bne.n	80038bc <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800397e:	697a      	ldr	r2, [r7, #20]
 8003980:	6a39      	ldr	r1, [r7, #32]
 8003982:	68f8      	ldr	r0, [r7, #12]
 8003984:	f000 fbe4 	bl	8004150 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003988:	4603      	mov	r3, r0
 800398a:	2b00      	cmp	r3, #0
 800398c:	d001      	beq.n	8003992 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800398e:	2301      	movs	r3, #1
 8003990:	e01a      	b.n	80039c8 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	2220      	movs	r2, #32
 8003998:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	6859      	ldr	r1, [r3, #4]
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	681a      	ldr	r2, [r3, #0]
 80039a4:	4b0b      	ldr	r3, [pc, #44]	; (80039d4 <HAL_I2C_Master_Transmit+0x1e4>)
 80039a6:	400b      	ands	r3, r1
 80039a8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	2220      	movs	r2, #32
 80039ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	2200      	movs	r2, #0
 80039b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	2200      	movs	r2, #0
 80039be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80039c2:	2300      	movs	r3, #0
 80039c4:	e000      	b.n	80039c8 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80039c6:	2302      	movs	r3, #2
  }
}
 80039c8:	4618      	mov	r0, r3
 80039ca:	3718      	adds	r7, #24
 80039cc:	46bd      	mov	sp, r7
 80039ce:	bd80      	pop	{r7, pc}
 80039d0:	80002000 	.word	0x80002000
 80039d4:	fe00e800 	.word	0xfe00e800

080039d8 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	b088      	sub	sp, #32
 80039dc:	af02      	add	r7, sp, #8
 80039de:	60f8      	str	r0, [r7, #12]
 80039e0:	607a      	str	r2, [r7, #4]
 80039e2:	461a      	mov	r2, r3
 80039e4:	460b      	mov	r3, r1
 80039e6:	817b      	strh	r3, [r7, #10]
 80039e8:	4613      	mov	r3, r2
 80039ea:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80039f2:	b2db      	uxtb	r3, r3
 80039f4:	2b20      	cmp	r3, #32
 80039f6:	f040 80db 	bne.w	8003bb0 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003a00:	2b01      	cmp	r3, #1
 8003a02:	d101      	bne.n	8003a08 <HAL_I2C_Master_Receive+0x30>
 8003a04:	2302      	movs	r3, #2
 8003a06:	e0d4      	b.n	8003bb2 <HAL_I2C_Master_Receive+0x1da>
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	2201      	movs	r2, #1
 8003a0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003a10:	f7ff f87a 	bl	8002b08 <HAL_GetTick>
 8003a14:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003a16:	697b      	ldr	r3, [r7, #20]
 8003a18:	9300      	str	r3, [sp, #0]
 8003a1a:	2319      	movs	r3, #25
 8003a1c:	2201      	movs	r2, #1
 8003a1e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003a22:	68f8      	ldr	r0, [r7, #12]
 8003a24:	f000 fb14 	bl	8004050 <I2C_WaitOnFlagUntilTimeout>
 8003a28:	4603      	mov	r3, r0
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d001      	beq.n	8003a32 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8003a2e:	2301      	movs	r3, #1
 8003a30:	e0bf      	b.n	8003bb2 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	2222      	movs	r2, #34	; 0x22
 8003a36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	2210      	movs	r2, #16
 8003a3e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	2200      	movs	r2, #0
 8003a46:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	687a      	ldr	r2, [r7, #4]
 8003a4c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	893a      	ldrh	r2, [r7, #8]
 8003a52:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	2200      	movs	r2, #0
 8003a58:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a5e:	b29b      	uxth	r3, r3
 8003a60:	2bff      	cmp	r3, #255	; 0xff
 8003a62:	d90e      	bls.n	8003a82 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	22ff      	movs	r2, #255	; 0xff
 8003a68:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a6e:	b2da      	uxtb	r2, r3
 8003a70:	8979      	ldrh	r1, [r7, #10]
 8003a72:	4b52      	ldr	r3, [pc, #328]	; (8003bbc <HAL_I2C_Master_Receive+0x1e4>)
 8003a74:	9300      	str	r3, [sp, #0]
 8003a76:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003a7a:	68f8      	ldr	r0, [r7, #12]
 8003a7c:	f000 fc76 	bl	800436c <I2C_TransferConfig>
 8003a80:	e06d      	b.n	8003b5e <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a86:	b29a      	uxth	r2, r3
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a90:	b2da      	uxtb	r2, r3
 8003a92:	8979      	ldrh	r1, [r7, #10]
 8003a94:	4b49      	ldr	r3, [pc, #292]	; (8003bbc <HAL_I2C_Master_Receive+0x1e4>)
 8003a96:	9300      	str	r3, [sp, #0]
 8003a98:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003a9c:	68f8      	ldr	r0, [r7, #12]
 8003a9e:	f000 fc65 	bl	800436c <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8003aa2:	e05c      	b.n	8003b5e <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003aa4:	697a      	ldr	r2, [r7, #20]
 8003aa6:	6a39      	ldr	r1, [r7, #32]
 8003aa8:	68f8      	ldr	r0, [r7, #12]
 8003aaa:	f000 fb8d 	bl	80041c8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003aae:	4603      	mov	r3, r0
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d001      	beq.n	8003ab8 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8003ab4:	2301      	movs	r3, #1
 8003ab6:	e07c      	b.n	8003bb2 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ac2:	b2d2      	uxtb	r2, r2
 8003ac4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aca:	1c5a      	adds	r2, r3, #1
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ad4:	3b01      	subs	r3, #1
 8003ad6:	b29a      	uxth	r2, r3
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ae0:	b29b      	uxth	r3, r3
 8003ae2:	3b01      	subs	r3, #1
 8003ae4:	b29a      	uxth	r2, r3
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003aee:	b29b      	uxth	r3, r3
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d034      	beq.n	8003b5e <HAL_I2C_Master_Receive+0x186>
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d130      	bne.n	8003b5e <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003afc:	697b      	ldr	r3, [r7, #20]
 8003afe:	9300      	str	r3, [sp, #0]
 8003b00:	6a3b      	ldr	r3, [r7, #32]
 8003b02:	2200      	movs	r2, #0
 8003b04:	2180      	movs	r1, #128	; 0x80
 8003b06:	68f8      	ldr	r0, [r7, #12]
 8003b08:	f000 faa2 	bl	8004050 <I2C_WaitOnFlagUntilTimeout>
 8003b0c:	4603      	mov	r3, r0
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d001      	beq.n	8003b16 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8003b12:	2301      	movs	r3, #1
 8003b14:	e04d      	b.n	8003bb2 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b1a:	b29b      	uxth	r3, r3
 8003b1c:	2bff      	cmp	r3, #255	; 0xff
 8003b1e:	d90e      	bls.n	8003b3e <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	22ff      	movs	r2, #255	; 0xff
 8003b24:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b2a:	b2da      	uxtb	r2, r3
 8003b2c:	8979      	ldrh	r1, [r7, #10]
 8003b2e:	2300      	movs	r3, #0
 8003b30:	9300      	str	r3, [sp, #0]
 8003b32:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003b36:	68f8      	ldr	r0, [r7, #12]
 8003b38:	f000 fc18 	bl	800436c <I2C_TransferConfig>
 8003b3c:	e00f      	b.n	8003b5e <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b42:	b29a      	uxth	r2, r3
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b4c:	b2da      	uxtb	r2, r3
 8003b4e:	8979      	ldrh	r1, [r7, #10]
 8003b50:	2300      	movs	r3, #0
 8003b52:	9300      	str	r3, [sp, #0]
 8003b54:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003b58:	68f8      	ldr	r0, [r7, #12]
 8003b5a:	f000 fc07 	bl	800436c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b62:	b29b      	uxth	r3, r3
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d19d      	bne.n	8003aa4 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b68:	697a      	ldr	r2, [r7, #20]
 8003b6a:	6a39      	ldr	r1, [r7, #32]
 8003b6c:	68f8      	ldr	r0, [r7, #12]
 8003b6e:	f000 faef 	bl	8004150 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003b72:	4603      	mov	r3, r0
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d001      	beq.n	8003b7c <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8003b78:	2301      	movs	r3, #1
 8003b7a:	e01a      	b.n	8003bb2 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	2220      	movs	r2, #32
 8003b82:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	6859      	ldr	r1, [r3, #4]
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	681a      	ldr	r2, [r3, #0]
 8003b8e:	4b0c      	ldr	r3, [pc, #48]	; (8003bc0 <HAL_I2C_Master_Receive+0x1e8>)
 8003b90:	400b      	ands	r3, r1
 8003b92:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	2220      	movs	r2, #32
 8003b98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003bac:	2300      	movs	r3, #0
 8003bae:	e000      	b.n	8003bb2 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8003bb0:	2302      	movs	r3, #2
  }
}
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	3718      	adds	r7, #24
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	bd80      	pop	{r7, pc}
 8003bba:	bf00      	nop
 8003bbc:	80002400 	.word	0x80002400
 8003bc0:	fe00e800 	.word	0xfe00e800

08003bc4 <HAL_I2C_Slave_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Transmit(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	b088      	sub	sp, #32
 8003bc8:	af02      	add	r7, sp, #8
 8003bca:	60f8      	str	r0, [r7, #12]
 8003bcc:	60b9      	str	r1, [r7, #8]
 8003bce:	603b      	str	r3, [r7, #0]
 8003bd0:	4613      	mov	r3, r2
 8003bd2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003bda:	b2db      	uxtb	r3, r3
 8003bdc:	2b20      	cmp	r3, #32
 8003bde:	f040 80f5 	bne.w	8003dcc <HAL_I2C_Slave_Transmit+0x208>
  {
    if ((pData == NULL) || (Size == 0U))
 8003be2:	68bb      	ldr	r3, [r7, #8]
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d002      	beq.n	8003bee <HAL_I2C_Slave_Transmit+0x2a>
 8003be8:	88fb      	ldrh	r3, [r7, #6]
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d105      	bne.n	8003bfa <HAL_I2C_Slave_Transmit+0x36>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003bf4:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003bf6:	2301      	movs	r3, #1
 8003bf8:	e0e9      	b.n	8003dce <HAL_I2C_Slave_Transmit+0x20a>
    }
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003c00:	2b01      	cmp	r3, #1
 8003c02:	d101      	bne.n	8003c08 <HAL_I2C_Slave_Transmit+0x44>
 8003c04:	2302      	movs	r3, #2
 8003c06:	e0e2      	b.n	8003dce <HAL_I2C_Slave_Transmit+0x20a>
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	2201      	movs	r2, #1
 8003c0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003c10:	f7fe ff7a 	bl	8002b08 <HAL_GetTick>
 8003c14:	6178      	str	r0, [r7, #20]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	2221      	movs	r2, #33	; 0x21
 8003c1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	2220      	movs	r2, #32
 8003c22:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	2200      	movs	r2, #0
 8003c2a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	68ba      	ldr	r2, [r7, #8]
 8003c30:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	88fa      	ldrh	r2, [r7, #6]
 8003c36:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable Address Acknowledge */
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	685a      	ldr	r2, [r3, #4]
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003c4c:	605a      	str	r2, [r3, #4]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, RESET, Timeout, tickstart) != HAL_OK)
 8003c4e:	697b      	ldr	r3, [r7, #20]
 8003c50:	9300      	str	r3, [sp, #0]
 8003c52:	683b      	ldr	r3, [r7, #0]
 8003c54:	2200      	movs	r2, #0
 8003c56:	2108      	movs	r1, #8
 8003c58:	68f8      	ldr	r0, [r7, #12]
 8003c5a:	f000 f9f9 	bl	8004050 <I2C_WaitOnFlagUntilTimeout>
 8003c5e:	4603      	mov	r3, r0
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d009      	beq.n	8003c78 <HAL_I2C_Slave_Transmit+0xb4>
    {
      /* Disable Address Acknowledge */
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	685a      	ldr	r2, [r3, #4]
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003c72:	605a      	str	r2, [r3, #4]
      return HAL_ERROR;
 8003c74:	2301      	movs	r3, #1
 8003c76:	e0aa      	b.n	8003dce <HAL_I2C_Slave_Transmit+0x20a>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	2208      	movs	r2, #8
 8003c7e:	61da      	str	r2, [r3, #28]

    /* If 10bit addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	68db      	ldr	r3, [r3, #12]
 8003c84:	2b02      	cmp	r3, #2
 8003c86:	d118      	bne.n	8003cba <HAL_I2C_Slave_Transmit+0xf6>
    {
      /* Wait until ADDR flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, RESET, Timeout, tickstart) != HAL_OK)
 8003c88:	697b      	ldr	r3, [r7, #20]
 8003c8a:	9300      	str	r3, [sp, #0]
 8003c8c:	683b      	ldr	r3, [r7, #0]
 8003c8e:	2200      	movs	r2, #0
 8003c90:	2108      	movs	r1, #8
 8003c92:	68f8      	ldr	r0, [r7, #12]
 8003c94:	f000 f9dc 	bl	8004050 <I2C_WaitOnFlagUntilTimeout>
 8003c98:	4603      	mov	r3, r0
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d009      	beq.n	8003cb2 <HAL_I2C_Slave_Transmit+0xee>
      {
        /* Disable Address Acknowledge */
        hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	685a      	ldr	r2, [r3, #4]
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003cac:	605a      	str	r2, [r3, #4]
        return HAL_ERROR;
 8003cae:	2301      	movs	r3, #1
 8003cb0:	e08d      	b.n	8003dce <HAL_I2C_Slave_Transmit+0x20a>
      }

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	2208      	movs	r2, #8
 8003cb8:	61da      	str	r2, [r3, #28]
    }

    /* Wait until DIR flag is set Transmitter mode */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_DIR, RESET, Timeout, tickstart) != HAL_OK)
 8003cba:	697b      	ldr	r3, [r7, #20]
 8003cbc:	9300      	str	r3, [sp, #0]
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8003cc6:	68f8      	ldr	r0, [r7, #12]
 8003cc8:	f000 f9c2 	bl	8004050 <I2C_WaitOnFlagUntilTimeout>
 8003ccc:	4603      	mov	r3, r0
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d02d      	beq.n	8003d2e <HAL_I2C_Slave_Transmit+0x16a>
    {
      /* Disable Address Acknowledge */
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	685a      	ldr	r2, [r3, #4]
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003ce0:	605a      	str	r2, [r3, #4]
      return HAL_ERROR;
 8003ce2:	2301      	movs	r3, #1
 8003ce4:	e073      	b.n	8003dce <HAL_I2C_Slave_Transmit+0x20a>
    }

    while (hi2c->XferCount > 0U)
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ce6:	697a      	ldr	r2, [r7, #20]
 8003ce8:	6839      	ldr	r1, [r7, #0]
 8003cea:	68f8      	ldr	r0, [r7, #12]
 8003cec:	f000 f9f0 	bl	80040d0 <I2C_WaitOnTXISFlagUntilTimeout>
 8003cf0:	4603      	mov	r3, r0
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d009      	beq.n	8003d0a <HAL_I2C_Slave_Transmit+0x146>
      {
        /* Disable Address Acknowledge */
        hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	685a      	ldr	r2, [r3, #4]
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003d04:	605a      	str	r2, [r3, #4]
        return HAL_ERROR;
 8003d06:	2301      	movs	r3, #1
 8003d08:	e061      	b.n	8003dce <HAL_I2C_Slave_Transmit+0x20a>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d0e:	781a      	ldrb	r2, [r3, #0]
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d1a:	1c5a      	adds	r2, r3, #1
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d24:	b29b      	uxth	r3, r3
 8003d26:	3b01      	subs	r3, #1
 8003d28:	b29a      	uxth	r2, r3
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferCount > 0U)
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d32:	b29b      	uxth	r3, r3
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d1d6      	bne.n	8003ce6 <HAL_I2C_Slave_Transmit+0x122>
    }

    /* Wait until STOP flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d38:	697a      	ldr	r2, [r7, #20]
 8003d3a:	6839      	ldr	r1, [r7, #0]
 8003d3c:	68f8      	ldr	r0, [r7, #12]
 8003d3e:	f000 fa07 	bl	8004150 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003d42:	4603      	mov	r3, r0
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d011      	beq.n	8003d6c <HAL_I2C_Slave_Transmit+0x1a8>
    {
      /* Disable Address Acknowledge */
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	685a      	ldr	r2, [r3, #4]
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003d56:	605a      	str	r2, [r3, #4]

      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d5c:	2b04      	cmp	r3, #4
 8003d5e:	d103      	bne.n	8003d68 <HAL_I2C_Slave_Transmit+0x1a4>
      {
        /* Normal use case for Transmitter mode */
        /* A NACK is generated to confirm the end of transfer */
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	2200      	movs	r2, #0
 8003d64:	645a      	str	r2, [r3, #68]	; 0x44
 8003d66:	e001      	b.n	8003d6c <HAL_I2C_Slave_Transmit+0x1a8>
      }
      else
      {
        return HAL_ERROR;
 8003d68:	2301      	movs	r3, #1
 8003d6a:	e030      	b.n	8003dce <HAL_I2C_Slave_Transmit+0x20a>
      }
    }

    /* Clear STOP flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	2220      	movs	r2, #32
 8003d72:	61da      	str	r2, [r3, #28]

    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, Timeout, tickstart) != HAL_OK)
 8003d74:	697b      	ldr	r3, [r7, #20]
 8003d76:	9300      	str	r3, [sp, #0]
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	2201      	movs	r2, #1
 8003d7c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003d80:	68f8      	ldr	r0, [r7, #12]
 8003d82:	f000 f965 	bl	8004050 <I2C_WaitOnFlagUntilTimeout>
 8003d86:	4603      	mov	r3, r0
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d009      	beq.n	8003da0 <HAL_I2C_Slave_Transmit+0x1dc>
    {
      /* Disable Address Acknowledge */
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	685a      	ldr	r2, [r3, #4]
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003d9a:	605a      	str	r2, [r3, #4]
      return HAL_ERROR;
 8003d9c:	2301      	movs	r3, #1
 8003d9e:	e016      	b.n	8003dce <HAL_I2C_Slave_Transmit+0x20a>
    }

    /* Disable Address Acknowledge */
    hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	685a      	ldr	r2, [r3, #4]
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003dae:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	2220      	movs	r2, #32
 8003db4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	2200      	movs	r2, #0
 8003dbc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003dc8:	2300      	movs	r3, #0
 8003dca:	e000      	b.n	8003dce <HAL_I2C_Slave_Transmit+0x20a>
  }
  else
  {
    return HAL_BUSY;
 8003dcc:	2302      	movs	r3, #2
  }
}
 8003dce:	4618      	mov	r0, r3
 8003dd0:	3718      	adds	r7, #24
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	bd80      	pop	{r7, pc}

08003dd6 <HAL_I2C_Slave_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Receive(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003dd6:	b580      	push	{r7, lr}
 8003dd8:	b088      	sub	sp, #32
 8003dda:	af02      	add	r7, sp, #8
 8003ddc:	60f8      	str	r0, [r7, #12]
 8003dde:	60b9      	str	r1, [r7, #8]
 8003de0:	603b      	str	r3, [r7, #0]
 8003de2:	4613      	mov	r3, r2
 8003de4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003dec:	b2db      	uxtb	r3, r3
 8003dee:	2b20      	cmp	r3, #32
 8003df0:	f040 80eb 	bne.w	8003fca <HAL_I2C_Slave_Receive+0x1f4>
  {
    if ((pData == NULL) || (Size == 0U))
 8003df4:	68bb      	ldr	r3, [r7, #8]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d002      	beq.n	8003e00 <HAL_I2C_Slave_Receive+0x2a>
 8003dfa:	88fb      	ldrh	r3, [r7, #6]
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d105      	bne.n	8003e0c <HAL_I2C_Slave_Receive+0x36>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003e06:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003e08:	2301      	movs	r3, #1
 8003e0a:	e0df      	b.n	8003fcc <HAL_I2C_Slave_Receive+0x1f6>
    }
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003e12:	2b01      	cmp	r3, #1
 8003e14:	d101      	bne.n	8003e1a <HAL_I2C_Slave_Receive+0x44>
 8003e16:	2302      	movs	r3, #2
 8003e18:	e0d8      	b.n	8003fcc <HAL_I2C_Slave_Receive+0x1f6>
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	2201      	movs	r2, #1
 8003e1e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003e22:	f7fe fe71 	bl	8002b08 <HAL_GetTick>
 8003e26:	6178      	str	r0, [r7, #20]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	2222      	movs	r2, #34	; 0x22
 8003e2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	2220      	movs	r2, #32
 8003e34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	68ba      	ldr	r2, [r7, #8]
 8003e42:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	88fa      	ldrh	r2, [r7, #6]
 8003e48:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable Address Acknowledge */
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	685a      	ldr	r2, [r3, #4]
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003e5e:	605a      	str	r2, [r3, #4]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, RESET, Timeout, tickstart) != HAL_OK)
 8003e60:	697b      	ldr	r3, [r7, #20]
 8003e62:	9300      	str	r3, [sp, #0]
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	2200      	movs	r2, #0
 8003e68:	2108      	movs	r1, #8
 8003e6a:	68f8      	ldr	r0, [r7, #12]
 8003e6c:	f000 f8f0 	bl	8004050 <I2C_WaitOnFlagUntilTimeout>
 8003e70:	4603      	mov	r3, r0
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d009      	beq.n	8003e8a <HAL_I2C_Slave_Receive+0xb4>
    {
      /* Disable Address Acknowledge */
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	685a      	ldr	r2, [r3, #4]
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003e84:	605a      	str	r2, [r3, #4]
      return HAL_ERROR;
 8003e86:	2301      	movs	r3, #1
 8003e88:	e0a0      	b.n	8003fcc <HAL_I2C_Slave_Receive+0x1f6>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	2208      	movs	r2, #8
 8003e90:	61da      	str	r2, [r3, #28]

    /* Wait until DIR flag is reset Receiver mode */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_DIR, SET, Timeout, tickstart) != HAL_OK)
 8003e92:	697b      	ldr	r3, [r7, #20]
 8003e94:	9300      	str	r3, [sp, #0]
 8003e96:	683b      	ldr	r3, [r7, #0]
 8003e98:	2201      	movs	r2, #1
 8003e9a:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8003e9e:	68f8      	ldr	r0, [r7, #12]
 8003ea0:	f000 f8d6 	bl	8004050 <I2C_WaitOnFlagUntilTimeout>
 8003ea4:	4603      	mov	r3, r0
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d048      	beq.n	8003f3c <HAL_I2C_Slave_Receive+0x166>
    {
      /* Disable Address Acknowledge */
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	685a      	ldr	r2, [r3, #4]
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003eb8:	605a      	str	r2, [r3, #4]
      return HAL_ERROR;
 8003eba:	2301      	movs	r3, #1
 8003ebc:	e086      	b.n	8003fcc <HAL_I2C_Slave_Receive+0x1f6>
    }

    while (hi2c->XferCount > 0U)
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ebe:	697a      	ldr	r2, [r7, #20]
 8003ec0:	6839      	ldr	r1, [r7, #0]
 8003ec2:	68f8      	ldr	r0, [r7, #12]
 8003ec4:	f000 f980 	bl	80041c8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003ec8:	4603      	mov	r3, r0
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d023      	beq.n	8003f16 <HAL_I2C_Slave_Receive+0x140>
      {
        /* Disable Address Acknowledge */
        hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	685a      	ldr	r2, [r3, #4]
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003edc:	605a      	str	r2, [r3, #4]

        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	699b      	ldr	r3, [r3, #24]
 8003ee4:	f003 0304 	and.w	r3, r3, #4
 8003ee8:	2b04      	cmp	r3, #4
 8003eea:	d112      	bne.n	8003f12 <HAL_I2C_Slave_Receive+0x13c>
        {
          /* Read data from RXDR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ef6:	b2d2      	uxtb	r2, r2
 8003ef8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003efe:	1c5a      	adds	r2, r3, #1
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	625a      	str	r2, [r3, #36]	; 0x24

          hi2c->XferCount--;
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f08:	b29b      	uxth	r3, r3
 8003f0a:	3b01      	subs	r3, #1
 8003f0c:	b29a      	uxth	r2, r3
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	855a      	strh	r2, [r3, #42]	; 0x2a
        }

        return HAL_ERROR;
 8003f12:	2301      	movs	r3, #1
 8003f14:	e05a      	b.n	8003fcc <HAL_I2C_Slave_Receive+0x1f6>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f20:	b2d2      	uxtb	r2, r2
 8003f22:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f28:	1c5a      	adds	r2, r3, #1
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f32:	b29b      	uxth	r3, r3
 8003f34:	3b01      	subs	r3, #1
 8003f36:	b29a      	uxth	r2, r3
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferCount > 0U)
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f40:	b29b      	uxth	r3, r3
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d1bb      	bne.n	8003ebe <HAL_I2C_Slave_Receive+0xe8>
    }

    /* Wait until STOP flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f46:	697a      	ldr	r2, [r7, #20]
 8003f48:	6839      	ldr	r1, [r7, #0]
 8003f4a:	68f8      	ldr	r0, [r7, #12]
 8003f4c:	f000 f900 	bl	8004150 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003f50:	4603      	mov	r3, r0
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d009      	beq.n	8003f6a <HAL_I2C_Slave_Receive+0x194>
    {
      /* Disable Address Acknowledge */
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	685a      	ldr	r2, [r3, #4]
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003f64:	605a      	str	r2, [r3, #4]
      return HAL_ERROR;
 8003f66:	2301      	movs	r3, #1
 8003f68:	e030      	b.n	8003fcc <HAL_I2C_Slave_Receive+0x1f6>
    }

    /* Clear STOP flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	2220      	movs	r2, #32
 8003f70:	61da      	str	r2, [r3, #28]

    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, Timeout, tickstart) != HAL_OK)
 8003f72:	697b      	ldr	r3, [r7, #20]
 8003f74:	9300      	str	r3, [sp, #0]
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	2201      	movs	r2, #1
 8003f7a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003f7e:	68f8      	ldr	r0, [r7, #12]
 8003f80:	f000 f866 	bl	8004050 <I2C_WaitOnFlagUntilTimeout>
 8003f84:	4603      	mov	r3, r0
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d009      	beq.n	8003f9e <HAL_I2C_Slave_Receive+0x1c8>
    {
      /* Disable Address Acknowledge */
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	685a      	ldr	r2, [r3, #4]
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003f98:	605a      	str	r2, [r3, #4]
      return HAL_ERROR;
 8003f9a:	2301      	movs	r3, #1
 8003f9c:	e016      	b.n	8003fcc <HAL_I2C_Slave_Receive+0x1f6>
    }

    /* Disable Address Acknowledge */
    hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	685a      	ldr	r2, [r3, #4]
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003fac:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	2220      	movs	r2, #32
 8003fb2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	2200      	movs	r2, #0
 8003fba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	e000      	b.n	8003fcc <HAL_I2C_Slave_Receive+0x1f6>
  }
  else
  {
    return HAL_BUSY;
 8003fca:	2302      	movs	r3, #2
  }
}
 8003fcc:	4618      	mov	r0, r3
 8003fce:	3718      	adds	r7, #24
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	bd80      	pop	{r7, pc}

08003fd4 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	b084      	sub	sp, #16
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	699b      	ldr	r3, [r3, #24]
 8003fe2:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d005      	beq.n	8004000 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ff8:	68ba      	ldr	r2, [r7, #8]
 8003ffa:	68f9      	ldr	r1, [r7, #12]
 8003ffc:	6878      	ldr	r0, [r7, #4]
 8003ffe:	4798      	blx	r3
  }
}
 8004000:	bf00      	nop
 8004002:	3710      	adds	r7, #16
 8004004:	46bd      	mov	sp, r7
 8004006:	bd80      	pop	{r7, pc}

08004008 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004008:	b480      	push	{r7}
 800400a:	b083      	sub	sp, #12
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	699b      	ldr	r3, [r3, #24]
 8004016:	f003 0302 	and.w	r3, r3, #2
 800401a:	2b02      	cmp	r3, #2
 800401c:	d103      	bne.n	8004026 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	2200      	movs	r2, #0
 8004024:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	699b      	ldr	r3, [r3, #24]
 800402c:	f003 0301 	and.w	r3, r3, #1
 8004030:	2b01      	cmp	r3, #1
 8004032:	d007      	beq.n	8004044 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	699a      	ldr	r2, [r3, #24]
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f042 0201 	orr.w	r2, r2, #1
 8004042:	619a      	str	r2, [r3, #24]
  }
}
 8004044:	bf00      	nop
 8004046:	370c      	adds	r7, #12
 8004048:	46bd      	mov	sp, r7
 800404a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404e:	4770      	bx	lr

08004050 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004050:	b580      	push	{r7, lr}
 8004052:	b084      	sub	sp, #16
 8004054:	af00      	add	r7, sp, #0
 8004056:	60f8      	str	r0, [r7, #12]
 8004058:	60b9      	str	r1, [r7, #8]
 800405a:	603b      	str	r3, [r7, #0]
 800405c:	4613      	mov	r3, r2
 800405e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004060:	e022      	b.n	80040a8 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004062:	683b      	ldr	r3, [r7, #0]
 8004064:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004068:	d01e      	beq.n	80040a8 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800406a:	f7fe fd4d 	bl	8002b08 <HAL_GetTick>
 800406e:	4602      	mov	r2, r0
 8004070:	69bb      	ldr	r3, [r7, #24]
 8004072:	1ad3      	subs	r3, r2, r3
 8004074:	683a      	ldr	r2, [r7, #0]
 8004076:	429a      	cmp	r2, r3
 8004078:	d302      	bcc.n	8004080 <I2C_WaitOnFlagUntilTimeout+0x30>
 800407a:	683b      	ldr	r3, [r7, #0]
 800407c:	2b00      	cmp	r3, #0
 800407e:	d113      	bne.n	80040a8 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004084:	f043 0220 	orr.w	r2, r3, #32
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	2220      	movs	r2, #32
 8004090:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	2200      	movs	r2, #0
 8004098:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	2200      	movs	r2, #0
 80040a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80040a4:	2301      	movs	r3, #1
 80040a6:	e00f      	b.n	80040c8 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	699a      	ldr	r2, [r3, #24]
 80040ae:	68bb      	ldr	r3, [r7, #8]
 80040b0:	4013      	ands	r3, r2
 80040b2:	68ba      	ldr	r2, [r7, #8]
 80040b4:	429a      	cmp	r2, r3
 80040b6:	bf0c      	ite	eq
 80040b8:	2301      	moveq	r3, #1
 80040ba:	2300      	movne	r3, #0
 80040bc:	b2db      	uxtb	r3, r3
 80040be:	461a      	mov	r2, r3
 80040c0:	79fb      	ldrb	r3, [r7, #7]
 80040c2:	429a      	cmp	r2, r3
 80040c4:	d0cd      	beq.n	8004062 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80040c6:	2300      	movs	r3, #0
}
 80040c8:	4618      	mov	r0, r3
 80040ca:	3710      	adds	r7, #16
 80040cc:	46bd      	mov	sp, r7
 80040ce:	bd80      	pop	{r7, pc}

080040d0 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80040d0:	b580      	push	{r7, lr}
 80040d2:	b084      	sub	sp, #16
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	60f8      	str	r0, [r7, #12]
 80040d8:	60b9      	str	r1, [r7, #8]
 80040da:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80040dc:	e02c      	b.n	8004138 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80040de:	687a      	ldr	r2, [r7, #4]
 80040e0:	68b9      	ldr	r1, [r7, #8]
 80040e2:	68f8      	ldr	r0, [r7, #12]
 80040e4:	f000 f8dc 	bl	80042a0 <I2C_IsAcknowledgeFailed>
 80040e8:	4603      	mov	r3, r0
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d001      	beq.n	80040f2 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80040ee:	2301      	movs	r3, #1
 80040f0:	e02a      	b.n	8004148 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80040f2:	68bb      	ldr	r3, [r7, #8]
 80040f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040f8:	d01e      	beq.n	8004138 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040fa:	f7fe fd05 	bl	8002b08 <HAL_GetTick>
 80040fe:	4602      	mov	r2, r0
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	1ad3      	subs	r3, r2, r3
 8004104:	68ba      	ldr	r2, [r7, #8]
 8004106:	429a      	cmp	r2, r3
 8004108:	d302      	bcc.n	8004110 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800410a:	68bb      	ldr	r3, [r7, #8]
 800410c:	2b00      	cmp	r3, #0
 800410e:	d113      	bne.n	8004138 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004114:	f043 0220 	orr.w	r2, r3, #32
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	2220      	movs	r2, #32
 8004120:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	2200      	movs	r2, #0
 8004128:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	2200      	movs	r2, #0
 8004130:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004134:	2301      	movs	r3, #1
 8004136:	e007      	b.n	8004148 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	699b      	ldr	r3, [r3, #24]
 800413e:	f003 0302 	and.w	r3, r3, #2
 8004142:	2b02      	cmp	r3, #2
 8004144:	d1cb      	bne.n	80040de <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004146:	2300      	movs	r3, #0
}
 8004148:	4618      	mov	r0, r3
 800414a:	3710      	adds	r7, #16
 800414c:	46bd      	mov	sp, r7
 800414e:	bd80      	pop	{r7, pc}

08004150 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004150:	b580      	push	{r7, lr}
 8004152:	b084      	sub	sp, #16
 8004154:	af00      	add	r7, sp, #0
 8004156:	60f8      	str	r0, [r7, #12]
 8004158:	60b9      	str	r1, [r7, #8]
 800415a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800415c:	e028      	b.n	80041b0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800415e:	687a      	ldr	r2, [r7, #4]
 8004160:	68b9      	ldr	r1, [r7, #8]
 8004162:	68f8      	ldr	r0, [r7, #12]
 8004164:	f000 f89c 	bl	80042a0 <I2C_IsAcknowledgeFailed>
 8004168:	4603      	mov	r3, r0
 800416a:	2b00      	cmp	r3, #0
 800416c:	d001      	beq.n	8004172 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800416e:	2301      	movs	r3, #1
 8004170:	e026      	b.n	80041c0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004172:	f7fe fcc9 	bl	8002b08 <HAL_GetTick>
 8004176:	4602      	mov	r2, r0
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	1ad3      	subs	r3, r2, r3
 800417c:	68ba      	ldr	r2, [r7, #8]
 800417e:	429a      	cmp	r2, r3
 8004180:	d302      	bcc.n	8004188 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004182:	68bb      	ldr	r3, [r7, #8]
 8004184:	2b00      	cmp	r3, #0
 8004186:	d113      	bne.n	80041b0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800418c:	f043 0220 	orr.w	r2, r3, #32
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	2220      	movs	r2, #32
 8004198:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	2200      	movs	r2, #0
 80041a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	2200      	movs	r2, #0
 80041a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80041ac:	2301      	movs	r3, #1
 80041ae:	e007      	b.n	80041c0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	699b      	ldr	r3, [r3, #24]
 80041b6:	f003 0320 	and.w	r3, r3, #32
 80041ba:	2b20      	cmp	r3, #32
 80041bc:	d1cf      	bne.n	800415e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80041be:	2300      	movs	r3, #0
}
 80041c0:	4618      	mov	r0, r3
 80041c2:	3710      	adds	r7, #16
 80041c4:	46bd      	mov	sp, r7
 80041c6:	bd80      	pop	{r7, pc}

080041c8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	b084      	sub	sp, #16
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	60f8      	str	r0, [r7, #12]
 80041d0:	60b9      	str	r1, [r7, #8]
 80041d2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80041d4:	e055      	b.n	8004282 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80041d6:	687a      	ldr	r2, [r7, #4]
 80041d8:	68b9      	ldr	r1, [r7, #8]
 80041da:	68f8      	ldr	r0, [r7, #12]
 80041dc:	f000 f860 	bl	80042a0 <I2C_IsAcknowledgeFailed>
 80041e0:	4603      	mov	r3, r0
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d001      	beq.n	80041ea <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80041e6:	2301      	movs	r3, #1
 80041e8:	e053      	b.n	8004292 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	699b      	ldr	r3, [r3, #24]
 80041f0:	f003 0320 	and.w	r3, r3, #32
 80041f4:	2b20      	cmp	r3, #32
 80041f6:	d129      	bne.n	800424c <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	699b      	ldr	r3, [r3, #24]
 80041fe:	f003 0304 	and.w	r3, r3, #4
 8004202:	2b04      	cmp	r3, #4
 8004204:	d105      	bne.n	8004212 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800420a:	2b00      	cmp	r3, #0
 800420c:	d001      	beq.n	8004212 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 800420e:	2300      	movs	r3, #0
 8004210:	e03f      	b.n	8004292 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	2220      	movs	r2, #32
 8004218:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	6859      	ldr	r1, [r3, #4]
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	681a      	ldr	r2, [r3, #0]
 8004224:	4b1d      	ldr	r3, [pc, #116]	; (800429c <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 8004226:	400b      	ands	r3, r1
 8004228:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	2200      	movs	r2, #0
 800422e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	2220      	movs	r2, #32
 8004234:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	2200      	movs	r2, #0
 800423c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	2200      	movs	r2, #0
 8004244:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004248:	2301      	movs	r3, #1
 800424a:	e022      	b.n	8004292 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800424c:	f7fe fc5c 	bl	8002b08 <HAL_GetTick>
 8004250:	4602      	mov	r2, r0
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	1ad3      	subs	r3, r2, r3
 8004256:	68ba      	ldr	r2, [r7, #8]
 8004258:	429a      	cmp	r2, r3
 800425a:	d302      	bcc.n	8004262 <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 800425c:	68bb      	ldr	r3, [r7, #8]
 800425e:	2b00      	cmp	r3, #0
 8004260:	d10f      	bne.n	8004282 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004266:	f043 0220 	orr.w	r2, r3, #32
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	2220      	movs	r2, #32
 8004272:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	2200      	movs	r2, #0
 800427a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800427e:	2301      	movs	r3, #1
 8004280:	e007      	b.n	8004292 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	699b      	ldr	r3, [r3, #24]
 8004288:	f003 0304 	and.w	r3, r3, #4
 800428c:	2b04      	cmp	r3, #4
 800428e:	d1a2      	bne.n	80041d6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004290:	2300      	movs	r3, #0
}
 8004292:	4618      	mov	r0, r3
 8004294:	3710      	adds	r7, #16
 8004296:	46bd      	mov	sp, r7
 8004298:	bd80      	pop	{r7, pc}
 800429a:	bf00      	nop
 800429c:	fe00e800 	.word	0xfe00e800

080042a0 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	b084      	sub	sp, #16
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	60f8      	str	r0, [r7, #12]
 80042a8:	60b9      	str	r1, [r7, #8]
 80042aa:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	699b      	ldr	r3, [r3, #24]
 80042b2:	f003 0310 	and.w	r3, r3, #16
 80042b6:	2b10      	cmp	r3, #16
 80042b8:	d151      	bne.n	800435e <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80042ba:	e022      	b.n	8004302 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80042bc:	68bb      	ldr	r3, [r7, #8]
 80042be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042c2:	d01e      	beq.n	8004302 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042c4:	f7fe fc20 	bl	8002b08 <HAL_GetTick>
 80042c8:	4602      	mov	r2, r0
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	1ad3      	subs	r3, r2, r3
 80042ce:	68ba      	ldr	r2, [r7, #8]
 80042d0:	429a      	cmp	r2, r3
 80042d2:	d302      	bcc.n	80042da <I2C_IsAcknowledgeFailed+0x3a>
 80042d4:	68bb      	ldr	r3, [r7, #8]
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d113      	bne.n	8004302 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042de:	f043 0220 	orr.w	r2, r3, #32
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	2220      	movs	r2, #32
 80042ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	2200      	movs	r2, #0
 80042f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	2200      	movs	r2, #0
 80042fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80042fe:	2301      	movs	r3, #1
 8004300:	e02e      	b.n	8004360 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	699b      	ldr	r3, [r3, #24]
 8004308:	f003 0320 	and.w	r3, r3, #32
 800430c:	2b20      	cmp	r3, #32
 800430e:	d1d5      	bne.n	80042bc <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	2210      	movs	r2, #16
 8004316:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	2220      	movs	r2, #32
 800431e:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004320:	68f8      	ldr	r0, [r7, #12]
 8004322:	f7ff fe71 	bl	8004008 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	6859      	ldr	r1, [r3, #4]
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	681a      	ldr	r2, [r3, #0]
 8004330:	4b0d      	ldr	r3, [pc, #52]	; (8004368 <I2C_IsAcknowledgeFailed+0xc8>)
 8004332:	400b      	ands	r3, r1
 8004334:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800433a:	f043 0204 	orr.w	r2, r3, #4
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	2220      	movs	r2, #32
 8004346:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	2200      	movs	r2, #0
 800434e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	2200      	movs	r2, #0
 8004356:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800435a:	2301      	movs	r3, #1
 800435c:	e000      	b.n	8004360 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 800435e:	2300      	movs	r3, #0
}
 8004360:	4618      	mov	r0, r3
 8004362:	3710      	adds	r7, #16
 8004364:	46bd      	mov	sp, r7
 8004366:	bd80      	pop	{r7, pc}
 8004368:	fe00e800 	.word	0xfe00e800

0800436c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 800436c:	b480      	push	{r7}
 800436e:	b085      	sub	sp, #20
 8004370:	af00      	add	r7, sp, #0
 8004372:	60f8      	str	r0, [r7, #12]
 8004374:	607b      	str	r3, [r7, #4]
 8004376:	460b      	mov	r3, r1
 8004378:	817b      	strh	r3, [r7, #10]
 800437a:	4613      	mov	r3, r2
 800437c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	685a      	ldr	r2, [r3, #4]
 8004384:	69bb      	ldr	r3, [r7, #24]
 8004386:	0d5b      	lsrs	r3, r3, #21
 8004388:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800438c:	4b0d      	ldr	r3, [pc, #52]	; (80043c4 <I2C_TransferConfig+0x58>)
 800438e:	430b      	orrs	r3, r1
 8004390:	43db      	mvns	r3, r3
 8004392:	ea02 0103 	and.w	r1, r2, r3
 8004396:	897b      	ldrh	r3, [r7, #10]
 8004398:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800439c:	7a7b      	ldrb	r3, [r7, #9]
 800439e:	041b      	lsls	r3, r3, #16
 80043a0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80043a4:	431a      	orrs	r2, r3
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	431a      	orrs	r2, r3
 80043aa:	69bb      	ldr	r3, [r7, #24]
 80043ac:	431a      	orrs	r2, r3
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	430a      	orrs	r2, r1
 80043b4:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 80043b6:	bf00      	nop
 80043b8:	3714      	adds	r7, #20
 80043ba:	46bd      	mov	sp, r7
 80043bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c0:	4770      	bx	lr
 80043c2:	bf00      	nop
 80043c4:	03ff63ff 	.word	0x03ff63ff

080043c8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80043c8:	b480      	push	{r7}
 80043ca:	b083      	sub	sp, #12
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
 80043d0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80043d8:	b2db      	uxtb	r3, r3
 80043da:	2b20      	cmp	r3, #32
 80043dc:	d138      	bne.n	8004450 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80043e4:	2b01      	cmp	r3, #1
 80043e6:	d101      	bne.n	80043ec <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80043e8:	2302      	movs	r3, #2
 80043ea:	e032      	b.n	8004452 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2201      	movs	r2, #1
 80043f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2224      	movs	r2, #36	; 0x24
 80043f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	681a      	ldr	r2, [r3, #0]
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f022 0201 	bic.w	r2, r2, #1
 800440a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	681a      	ldr	r2, [r3, #0]
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800441a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	6819      	ldr	r1, [r3, #0]
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	683a      	ldr	r2, [r7, #0]
 8004428:	430a      	orrs	r2, r1
 800442a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	681a      	ldr	r2, [r3, #0]
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f042 0201 	orr.w	r2, r2, #1
 800443a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2220      	movs	r2, #32
 8004440:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2200      	movs	r2, #0
 8004448:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800444c:	2300      	movs	r3, #0
 800444e:	e000      	b.n	8004452 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004450:	2302      	movs	r3, #2
  }
}
 8004452:	4618      	mov	r0, r3
 8004454:	370c      	adds	r7, #12
 8004456:	46bd      	mov	sp, r7
 8004458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445c:	4770      	bx	lr

0800445e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800445e:	b480      	push	{r7}
 8004460:	b085      	sub	sp, #20
 8004462:	af00      	add	r7, sp, #0
 8004464:	6078      	str	r0, [r7, #4]
 8004466:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800446e:	b2db      	uxtb	r3, r3
 8004470:	2b20      	cmp	r3, #32
 8004472:	d139      	bne.n	80044e8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800447a:	2b01      	cmp	r3, #1
 800447c:	d101      	bne.n	8004482 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800447e:	2302      	movs	r3, #2
 8004480:	e033      	b.n	80044ea <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	2201      	movs	r2, #1
 8004486:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	2224      	movs	r2, #36	; 0x24
 800448e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	681a      	ldr	r2, [r3, #0]
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f022 0201 	bic.w	r2, r2, #1
 80044a0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80044b0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80044b2:	683b      	ldr	r3, [r7, #0]
 80044b4:	021b      	lsls	r3, r3, #8
 80044b6:	68fa      	ldr	r2, [r7, #12]
 80044b8:	4313      	orrs	r3, r2
 80044ba:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	68fa      	ldr	r2, [r7, #12]
 80044c2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	681a      	ldr	r2, [r3, #0]
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f042 0201 	orr.w	r2, r2, #1
 80044d2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2220      	movs	r2, #32
 80044d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2200      	movs	r2, #0
 80044e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80044e4:	2300      	movs	r3, #0
 80044e6:	e000      	b.n	80044ea <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80044e8:	2302      	movs	r3, #2
  }
}
 80044ea:	4618      	mov	r0, r3
 80044ec:	3714      	adds	r7, #20
 80044ee:	46bd      	mov	sp, r7
 80044f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f4:	4770      	bx	lr
	...

080044f8 <HAL_JPEG_Init>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_JPEG_Init(JPEG_HandleTypeDef *hjpeg)
{
 80044f8:	b580      	push	{r7, lr}
 80044fa:	b082      	sub	sp, #8
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
    99,  99,  99,  99,  99,  99,  99,  99,
    99,  99,  99,  99,  99,  99,  99,  99
  };

  /* Check the JPEG handle allocation */
  if (hjpeg == NULL)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2b00      	cmp	r3, #0
 8004504:	d101      	bne.n	800450a <HAL_JPEG_Init+0x12>
  {
    return HAL_ERROR;
 8004506:	2301      	movs	r3, #1
 8004508:	e070      	b.n	80045ec <HAL_JPEG_Init+0xf4>

    /* Init the low level hardware */
    hjpeg->MspInitCallback(hjpeg);
  }
#else
  if (hjpeg->State == HAL_JPEG_STATE_RESET)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8004510:	b2db      	uxtb	r3, r3
 8004512:	2b00      	cmp	r3, #0
 8004514:	d106      	bne.n	8004524 <HAL_JPEG_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hjpeg->Lock = HAL_UNLOCKED;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	2200      	movs	r2, #0
 800451a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

    /* Init the low level hardware : GPIO, CLOCK */
    HAL_JPEG_MspInit(hjpeg);
 800451e:	6878      	ldr	r0, [r7, #4]
 8004520:	f7fd fd4c 	bl	8001fbc <HAL_JPEG_MspInit>
  }
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

  /* Change the JPEG state */
  hjpeg->State = HAL_JPEG_STATE_BUSY;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2202      	movs	r2, #2
 8004528:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

  /* Start the JPEG Core*/
  __HAL_JPEG_ENABLE(hjpeg);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f042 0201 	orr.w	r2, r2, #1
 800453a:	631a      	str	r2, [r3, #48]	; 0x30

  /* Stop the JPEG encoding/decoding process*/
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	681a      	ldr	r2, [r3, #0]
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f022 0201 	bic.w	r2, r2, #1
 800454a:	601a      	str	r2, [r3, #0]

  /* Disable All Interrupts */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f022 027e 	bic.w	r2, r2, #126	; 0x7e
 800455a:	631a      	str	r2, [r3, #48]	; 0x30


  /* Flush input and output FIFOs*/
  hjpeg->Instance->CR |= JPEG_CR_IFF;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800456a:	631a      	str	r2, [r3, #48]	; 0x30
  hjpeg->Instance->CR |= JPEG_CR_OFF;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800457a:	631a      	str	r2, [r3, #48]	; 0x30

  /* Clear all flags */
  __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 800458a:	639a      	str	r2, [r3, #56]	; 0x38

  /* init default quantization tables*/
  hjpeg->QuantTable0 = (uint8_t *)((uint32_t)JPEG_LUM_QuantTable);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	4a19      	ldr	r2, [pc, #100]	; (80045f4 <HAL_JPEG_Init+0xfc>)
 8004590:	63da      	str	r2, [r3, #60]	; 0x3c
  hjpeg->QuantTable1 = (uint8_t *)((uint32_t)JPEG_CHROM_QuantTable);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	4a18      	ldr	r2, [pc, #96]	; (80045f8 <HAL_JPEG_Init+0x100>)
 8004596:	641a      	str	r2, [r3, #64]	; 0x40
  hjpeg->QuantTable2 = NULL;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2200      	movs	r2, #0
 800459c:	645a      	str	r2, [r3, #68]	; 0x44
  hjpeg->QuantTable3 = NULL;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	2200      	movs	r2, #0
 80045a2:	649a      	str	r2, [r3, #72]	; 0x48

  /* init the default Huffman tables*/
  if (JPEG_Set_HuffEnc_Mem(hjpeg) != HAL_OK)
 80045a4:	6878      	ldr	r0, [r7, #4]
 80045a6:	f000 fc95 	bl	8004ed4 <JPEG_Set_HuffEnc_Mem>
 80045aa:	4603      	mov	r3, r0
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d004      	beq.n	80045ba <HAL_JPEG_Init+0xc2>
  {
    hjpeg->ErrorCode = HAL_JPEG_ERROR_HUFF_TABLE;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2201      	movs	r2, #1
 80045b4:	651a      	str	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 80045b6:	2301      	movs	r3, #1
 80045b8:	e018      	b.n	80045ec <HAL_JPEG_Init+0xf4>
  }

  /* Enable header processing*/
  hjpeg->Instance->CONFR1 |= JPEG_CONFR1_HDR;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	685a      	ldr	r2, [r3, #4]
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80045c8:	605a      	str	r2, [r3, #4]

  /* Reset JpegInCount and JpegOutCount */
  hjpeg->JpegInCount = 0;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	2200      	movs	r2, #0
 80045ce:	621a      	str	r2, [r3, #32]
  hjpeg->JpegOutCount = 0;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2200      	movs	r2, #0
 80045d4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change the JPEG state */
  hjpeg->State = HAL_JPEG_STATE_READY;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	2201      	movs	r2, #1
 80045da:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

  /* Reset the JPEG ErrorCode */
  hjpeg->ErrorCode = HAL_JPEG_ERROR_NONE;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	2200      	movs	r2, #0
 80045e2:	651a      	str	r2, [r3, #80]	; 0x50

  /*Clear the context filelds*/
  hjpeg->Context = 0;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2200      	movs	r2, #0
 80045e8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Return function status */
  return HAL_OK;
 80045ea:	2300      	movs	r3, #0
}
 80045ec:	4618      	mov	r0, r3
 80045ee:	3708      	adds	r7, #8
 80045f0:	46bd      	mov	sp, r7
 80045f2:	bd80      	pop	{r7, pc}
 80045f4:	08011bd8 	.word	0x08011bd8
 80045f8:	08011c18 	.word	0x08011c18

080045fc <HAL_JPEG_GetInfo>:
  * @param  pInfo pointer to a JPEG_ConfTypeDef structure that contains
  *         The JPEG decoded header informations
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_JPEG_GetInfo(JPEG_HandleTypeDef *hjpeg, JPEG_ConfTypeDef *pInfo)
{
 80045fc:	b580      	push	{r7, lr}
 80045fe:	b086      	sub	sp, #24
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]
 8004604:	6039      	str	r1, [r7, #0]
  uint32_t yblockNb, cBblockNb, cRblockNb;

  /* Check the JPEG handle allocation */
  if ((hjpeg == NULL) || (pInfo == NULL))
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	2b00      	cmp	r3, #0
 800460a:	d002      	beq.n	8004612 <HAL_JPEG_GetInfo+0x16>
 800460c:	683b      	ldr	r3, [r7, #0]
 800460e:	2b00      	cmp	r3, #0
 8004610:	d101      	bne.n	8004616 <HAL_JPEG_GetInfo+0x1a>
  {
    return HAL_ERROR;
 8004612:	2301      	movs	r3, #1
 8004614:	e083      	b.n	800471e <HAL_JPEG_GetInfo+0x122>
  }

  /*Read the conf parameters */
  if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == JPEG_CONFR1_NF_1)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	685b      	ldr	r3, [r3, #4]
 800461c:	f003 0303 	and.w	r3, r3, #3
 8004620:	2b02      	cmp	r3, #2
 8004622:	d103      	bne.n	800462c <HAL_JPEG_GetInfo+0x30>
  {
    pInfo->ColorSpace = JPEG_YCBCR_COLORSPACE;
 8004624:	683b      	ldr	r3, [r7, #0]
 8004626:	2210      	movs	r2, #16
 8004628:	601a      	str	r2, [r3, #0]
 800462a:	e017      	b.n	800465c <HAL_JPEG_GetInfo+0x60>
  }
  else if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == 0UL)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	685b      	ldr	r3, [r3, #4]
 8004632:	f003 0303 	and.w	r3, r3, #3
 8004636:	2b00      	cmp	r3, #0
 8004638:	d103      	bne.n	8004642 <HAL_JPEG_GetInfo+0x46>
  {
    pInfo->ColorSpace = JPEG_GRAYSCALE_COLORSPACE;
 800463a:	683b      	ldr	r3, [r7, #0]
 800463c:	2200      	movs	r2, #0
 800463e:	601a      	str	r2, [r3, #0]
 8004640:	e00c      	b.n	800465c <HAL_JPEG_GetInfo+0x60>
  }
  else if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == JPEG_CONFR1_NF)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	685b      	ldr	r3, [r3, #4]
 8004648:	f003 0303 	and.w	r3, r3, #3
 800464c:	2b03      	cmp	r3, #3
 800464e:	d103      	bne.n	8004658 <HAL_JPEG_GetInfo+0x5c>
  {
    pInfo->ColorSpace = JPEG_CMYK_COLORSPACE;
 8004650:	683b      	ldr	r3, [r7, #0]
 8004652:	2230      	movs	r2, #48	; 0x30
 8004654:	601a      	str	r2, [r3, #0]
 8004656:	e001      	b.n	800465c <HAL_JPEG_GetInfo+0x60>
  }
  else
  {
    return HAL_ERROR;
 8004658:	2301      	movs	r3, #1
 800465a:	e060      	b.n	800471e <HAL_JPEG_GetInfo+0x122>
  }

  pInfo->ImageHeight = (hjpeg->Instance->CONFR1 & 0xFFFF0000UL) >> 16;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	685b      	ldr	r3, [r3, #4]
 8004662:	0c1b      	lsrs	r3, r3, #16
 8004664:	b29a      	uxth	r2, r3
 8004666:	683b      	ldr	r3, [r7, #0]
 8004668:	609a      	str	r2, [r3, #8]
  pInfo->ImageWidth  = (hjpeg->Instance->CONFR3 & 0xFFFF0000UL) >> 16;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	68db      	ldr	r3, [r3, #12]
 8004670:	0c1b      	lsrs	r3, r3, #16
 8004672:	b29a      	uxth	r2, r3
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	60da      	str	r2, [r3, #12]

  if ((pInfo->ColorSpace == JPEG_YCBCR_COLORSPACE) || (pInfo->ColorSpace == JPEG_CMYK_COLORSPACE))
 8004678:	683b      	ldr	r3, [r7, #0]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	2b10      	cmp	r3, #16
 800467e:	d003      	beq.n	8004688 <HAL_JPEG_GetInfo+0x8c>
 8004680:	683b      	ldr	r3, [r7, #0]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	2b30      	cmp	r3, #48	; 0x30
 8004686:	d140      	bne.n	800470a <HAL_JPEG_GetInfo+0x10e>
  {
    yblockNb  = (hjpeg->Instance->CONFR4 & JPEG_CONFR4_NB) >> 4;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	691b      	ldr	r3, [r3, #16]
 800468e:	091b      	lsrs	r3, r3, #4
 8004690:	f003 030f 	and.w	r3, r3, #15
 8004694:	617b      	str	r3, [r7, #20]
    cBblockNb = (hjpeg->Instance->CONFR5 & JPEG_CONFR5_NB) >> 4;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	695b      	ldr	r3, [r3, #20]
 800469c:	091b      	lsrs	r3, r3, #4
 800469e:	f003 030f 	and.w	r3, r3, #15
 80046a2:	613b      	str	r3, [r7, #16]
    cRblockNb = (hjpeg->Instance->CONFR6 & JPEG_CONFR6_NB) >> 4;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	699b      	ldr	r3, [r3, #24]
 80046aa:	091b      	lsrs	r3, r3, #4
 80046ac:	f003 030f 	and.w	r3, r3, #15
 80046b0:	60fb      	str	r3, [r7, #12]

    if ((yblockNb == 1UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 80046b2:	697b      	ldr	r3, [r7, #20]
 80046b4:	2b01      	cmp	r3, #1
 80046b6:	d109      	bne.n	80046cc <HAL_JPEG_GetInfo+0xd0>
 80046b8:	693b      	ldr	r3, [r7, #16]
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d106      	bne.n	80046cc <HAL_JPEG_GetInfo+0xd0>
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d103      	bne.n	80046cc <HAL_JPEG_GetInfo+0xd0>
    {
      pInfo->ChromaSubsampling = JPEG_422_SUBSAMPLING; /*16x8 block*/
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	2202      	movs	r2, #2
 80046c8:	605a      	str	r2, [r3, #4]
 80046ca:	e01d      	b.n	8004708 <HAL_JPEG_GetInfo+0x10c>
    }
    else if ((yblockNb == 0UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 80046cc:	697b      	ldr	r3, [r7, #20]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d109      	bne.n	80046e6 <HAL_JPEG_GetInfo+0xea>
 80046d2:	693b      	ldr	r3, [r7, #16]
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d106      	bne.n	80046e6 <HAL_JPEG_GetInfo+0xea>
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d103      	bne.n	80046e6 <HAL_JPEG_GetInfo+0xea>
    {
      pInfo->ChromaSubsampling = JPEG_444_SUBSAMPLING;
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	2200      	movs	r2, #0
 80046e2:	605a      	str	r2, [r3, #4]
 80046e4:	e010      	b.n	8004708 <HAL_JPEG_GetInfo+0x10c>
    }
    else if ((yblockNb == 3UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 80046e6:	697b      	ldr	r3, [r7, #20]
 80046e8:	2b03      	cmp	r3, #3
 80046ea:	d109      	bne.n	8004700 <HAL_JPEG_GetInfo+0x104>
 80046ec:	693b      	ldr	r3, [r7, #16]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d106      	bne.n	8004700 <HAL_JPEG_GetInfo+0x104>
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d103      	bne.n	8004700 <HAL_JPEG_GetInfo+0x104>
    {
      pInfo->ChromaSubsampling = JPEG_420_SUBSAMPLING;
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	2201      	movs	r2, #1
 80046fc:	605a      	str	r2, [r3, #4]
 80046fe:	e003      	b.n	8004708 <HAL_JPEG_GetInfo+0x10c>
    }
    else /*Default is 4:4:4*/
    {
      pInfo->ChromaSubsampling = JPEG_444_SUBSAMPLING;
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	2200      	movs	r2, #0
 8004704:	605a      	str	r2, [r3, #4]
    if ((yblockNb == 1UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 8004706:	e003      	b.n	8004710 <HAL_JPEG_GetInfo+0x114>
 8004708:	e002      	b.n	8004710 <HAL_JPEG_GetInfo+0x114>
    }
  }
  else
  {
    pInfo->ChromaSubsampling = JPEG_444_SUBSAMPLING;
 800470a:	683b      	ldr	r3, [r7, #0]
 800470c:	2200      	movs	r2, #0
 800470e:	605a      	str	r2, [r3, #4]
  }

  pInfo->ImageQuality = JPEG_GetQuality(hjpeg);
 8004710:	6878      	ldr	r0, [r7, #4]
 8004712:	f001 f985 	bl	8005a20 <JPEG_GetQuality>
 8004716:	4602      	mov	r2, r0
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	611a      	str	r2, [r3, #16]

  /* Return function status */
  return HAL_OK;
 800471c:	2300      	movs	r3, #0
}
 800471e:	4618      	mov	r0, r3
 8004720:	3718      	adds	r7, #24
 8004722:	46bd      	mov	sp, r7
 8004724:	bd80      	pop	{r7, pc}

08004726 <HAL_JPEG_Decode>:
  * @param  Timeout Specify Timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_JPEG_Decode(JPEG_HandleTypeDef *hjpeg, uint8_t *pDataIn, uint32_t InDataLength,
                                   uint8_t *pDataOutMCU, uint32_t OutDataLength, uint32_t Timeout)
{
 8004726:	b580      	push	{r7, lr}
 8004728:	b086      	sub	sp, #24
 800472a:	af00      	add	r7, sp, #0
 800472c:	60f8      	str	r0, [r7, #12]
 800472e:	60b9      	str	r1, [r7, #8]
 8004730:	607a      	str	r2, [r7, #4]
 8004732:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param((InDataLength >= 4UL));
  assert_param((OutDataLength >= 4UL));

  /* Check In/out buffer allocation and size */
  if ((hjpeg == NULL) || (pDataIn == NULL) || (pDataOutMCU == NULL))
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	2b00      	cmp	r3, #0
 8004738:	d005      	beq.n	8004746 <HAL_JPEG_Decode+0x20>
 800473a:	68bb      	ldr	r3, [r7, #8]
 800473c:	2b00      	cmp	r3, #0
 800473e:	d002      	beq.n	8004746 <HAL_JPEG_Decode+0x20>
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	2b00      	cmp	r3, #0
 8004744:	d101      	bne.n	800474a <HAL_JPEG_Decode+0x24>
  {
    return HAL_ERROR;
 8004746:	2301      	movs	r3, #1
 8004748:	e071      	b.n	800482e <HAL_JPEG_Decode+0x108>
  }

  /* Process Locked */
  __HAL_LOCK(hjpeg);
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8004750:	2b01      	cmp	r3, #1
 8004752:	d101      	bne.n	8004758 <HAL_JPEG_Decode+0x32>
 8004754:	2302      	movs	r3, #2
 8004756:	e06a      	b.n	800482e <HAL_JPEG_Decode+0x108>
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	2201      	movs	r2, #1
 800475c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  /* Get tick */
  tickstart = HAL_GetTick();
 8004760:	f7fe f9d2 	bl	8002b08 <HAL_GetTick>
 8004764:	6178      	str	r0, [r7, #20]

  if (hjpeg->State == HAL_JPEG_STATE_READY)
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800476c:	b2db      	uxtb	r3, r3
 800476e:	2b01      	cmp	r3, #1
 8004770:	d158      	bne.n	8004824 <HAL_JPEG_Decode+0xfe>
  {
    /*Change JPEG state*/
    hjpeg->State = HAL_JPEG_STATE_BUSY_DECODING;
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	2204      	movs	r2, #4
 8004776:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

    /*Set the Context to Decode with Polling*/
    /*Set the Context to Encode with Polling*/
    hjpeg->Context &= ~(JPEG_CONTEXT_OPERATION_MASK | JPEG_CONTEXT_METHOD_MASK);
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800477e:	f023 020f 	bic.w	r2, r3, #15
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	655a      	str	r2, [r3, #84]	; 0x54
    hjpeg->Context |= (JPEG_CONTEXT_DECODE | JPEG_CONTEXT_POLLING);
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800478a:	f043 0206 	orr.w	r2, r3, #6
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	655a      	str	r2, [r3, #84]	; 0x54

    /*Store In/out buffers pointers and size*/
    hjpeg->pJpegInBuffPtr = pDataIn;
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	68ba      	ldr	r2, [r7, #8]
 8004796:	619a      	str	r2, [r3, #24]
    hjpeg->pJpegOutBuffPtr = pDataOutMCU;
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	683a      	ldr	r2, [r7, #0]
 800479c:	61da      	str	r2, [r3, #28]
    hjpeg->InDataLength = InDataLength - (InDataLength % 4UL);    /*In Data length must be multiple of 4 Bytes (1 word)*/
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	f023 0203 	bic.w	r2, r3, #3
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	629a      	str	r2, [r3, #40]	; 0x28
    hjpeg->OutDataLength = OutDataLength - (OutDataLength % 4UL); /*Out Data length must be multiple of 4 Bytes (1 word)*/
 80047a8:	6a3b      	ldr	r3, [r7, #32]
 80047aa:	f023 0203 	bic.w	r2, r3, #3
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	62da      	str	r2, [r3, #44]	; 0x2c

    /*Reset In/out data counter */
    hjpeg->JpegInCount = 0;
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	2200      	movs	r2, #0
 80047b6:	621a      	str	r2, [r3, #32]
    hjpeg->JpegOutCount = 0;
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	2200      	movs	r2, #0
 80047bc:	625a      	str	r2, [r3, #36]	; 0x24

    /*Init decoding process*/
    JPEG_Init_Process(hjpeg);
 80047be:	68f8      	ldr	r0, [r7, #12]
 80047c0:	f000 fe0a 	bl	80053d8 <JPEG_Init_Process>

    /*JPEG data processing : In/Out FIFO transfer*/
    while ((JPEG_Process(hjpeg) == JPEG_PROCESS_ONGOING))
 80047c4:	e01e      	b.n	8004804 <HAL_JPEG_Decode+0xde>
    {
      if (Timeout != HAL_MAX_DELAY)
 80047c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047cc:	d01a      	beq.n	8004804 <HAL_JPEG_Decode+0xde>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80047ce:	f7fe f99b 	bl	8002b08 <HAL_GetTick>
 80047d2:	4602      	mov	r2, r0
 80047d4:	697b      	ldr	r3, [r7, #20]
 80047d6:	1ad3      	subs	r3, r2, r3
 80047d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047da:	429a      	cmp	r2, r3
 80047dc:	d302      	bcc.n	80047e4 <HAL_JPEG_Decode+0xbe>
 80047de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d10f      	bne.n	8004804 <HAL_JPEG_Decode+0xde>
        {

          /* Update error code */
          hjpeg->ErrorCode |= HAL_JPEG_ERROR_TIMEOUT;
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047e8:	f043 0208 	orr.w	r2, r3, #8
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	651a      	str	r2, [r3, #80]	; 0x50

          /* Process Unlocked */
          __HAL_UNLOCK(hjpeg);
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	2200      	movs	r2, #0
 80047f4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

          /*Change JPEG state*/
          hjpeg->State = HAL_JPEG_STATE_READY;
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	2201      	movs	r2, #1
 80047fc:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

          return HAL_TIMEOUT;
 8004800:	2303      	movs	r3, #3
 8004802:	e014      	b.n	800482e <HAL_JPEG_Decode+0x108>
    while ((JPEG_Process(hjpeg) == JPEG_PROCESS_ONGOING))
 8004804:	68f8      	ldr	r0, [r7, #12]
 8004806:	f000 fe5b 	bl	80054c0 <JPEG_Process>
 800480a:	4603      	mov	r3, r0
 800480c:	2b00      	cmp	r3, #0
 800480e:	d0da      	beq.n	80047c6 <HAL_JPEG_Decode+0xa0>
        }
      }
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hjpeg);
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	2200      	movs	r2, #0
 8004814:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

    /*Change JPEG state*/
    hjpeg->State = HAL_JPEG_STATE_READY;
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	2201      	movs	r2, #1
 800481c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
    __HAL_UNLOCK(hjpeg);

    return HAL_BUSY;
  }
  /* Return function status */
  return HAL_OK;
 8004820:	2300      	movs	r3, #0
 8004822:	e004      	b.n	800482e <HAL_JPEG_Decode+0x108>
    __HAL_UNLOCK(hjpeg);
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	2200      	movs	r2, #0
 8004828:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    return HAL_BUSY;
 800482c:	2302      	movs	r3, #2
}
 800482e:	4618      	mov	r0, r3
 8004830:	3718      	adds	r7, #24
 8004832:	46bd      	mov	sp, r7
 8004834:	bd80      	pop	{r7, pc}

08004836 <HAL_JPEG_Pause>:
  *                           JPEG_PAUSE_RESUME_OUTPUT: Pause Output processing
  *                           JPEG_PAUSE_RESUME_INPUT_OUTPUT: Pause Input and Output processing
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_JPEG_Pause(JPEG_HandleTypeDef *hjpeg, uint32_t XferSelection)
{
 8004836:	b480      	push	{r7}
 8004838:	b085      	sub	sp, #20
 800483a:	af00      	add	r7, sp, #0
 800483c:	6078      	str	r0, [r7, #4]
 800483e:	6039      	str	r1, [r7, #0]
  uint32_t mask = 0;
 8004840:	2300      	movs	r3, #0
 8004842:	60fb      	str	r3, [r7, #12]

  assert_param(IS_JPEG_PAUSE_RESUME_STATE(XferSelection));

  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004848:	f003 030c 	and.w	r3, r3, #12
 800484c:	2b0c      	cmp	r3, #12
 800484e:	d116      	bne.n	800487e <HAL_JPEG_Pause+0x48>
  {
    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	f003 0301 	and.w	r3, r3, #1
 8004856:	2b00      	cmp	r3, #0
 8004858:	d005      	beq.n	8004866 <HAL_JPEG_Pause+0x30>
    {
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_INPUT;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800485e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	655a      	str	r2, [r3, #84]	; 0x54
    }
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
 8004866:	683b      	ldr	r3, [r7, #0]
 8004868:	f003 0302 	and.w	r3, r3, #2
 800486c:	2b00      	cmp	r3, #0
 800486e:	d033      	beq.n	80048d8 <HAL_JPEG_Pause+0xa2>
    {
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_OUTPUT;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004874:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	655a      	str	r2, [r3, #84]	; 0x54
 800487c:	e02c      	b.n	80048d8 <HAL_JPEG_Pause+0xa2>
    }

  }
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004882:	f003 030c 	and.w	r3, r3, #12
 8004886:	2b08      	cmp	r3, #8
 8004888:	d126      	bne.n	80048d8 <HAL_JPEG_Pause+0xa2>
  {

    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
 800488a:	683b      	ldr	r3, [r7, #0]
 800488c:	f003 0301 	and.w	r3, r3, #1
 8004890:	2b00      	cmp	r3, #0
 8004892:	d009      	beq.n	80048a8 <HAL_JPEG_Pause+0x72>
    {
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_INPUT;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004898:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	655a      	str	r2, [r3, #84]	; 0x54
      mask |= (JPEG_IT_IFT | JPEG_IT_IFNF);
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	f043 0306 	orr.w	r3, r3, #6
 80048a6:	60fb      	str	r3, [r7, #12]
    }
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
 80048a8:	683b      	ldr	r3, [r7, #0]
 80048aa:	f003 0302 	and.w	r3, r3, #2
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d009      	beq.n	80048c6 <HAL_JPEG_Pause+0x90>
    {
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_OUTPUT;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048b6:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	655a      	str	r2, [r3, #84]	; 0x54
      mask |= (JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC);
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 80048c4:	60fb      	str	r3, [r7, #12]
    }
    __HAL_JPEG_DISABLE_IT(hjpeg, mask);
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	43da      	mvns	r2, r3
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	400a      	ands	r2, r1
 80048d6:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Nothing to do */
  }

  /* Return function status */
  return HAL_OK;
 80048d8:	2300      	movs	r3, #0
}
 80048da:	4618      	mov	r0, r3
 80048dc:	3714      	adds	r7, #20
 80048de:	46bd      	mov	sp, r7
 80048e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e4:	4770      	bx	lr

080048e6 <HAL_JPEG_InfoReadyCallback>:
  * @param  pInfo pointer to a JPEG_ConfTypeDef structure that contains
  *         The JPEG decoded header informations
  * @retval None
  */
__weak void HAL_JPEG_InfoReadyCallback(JPEG_HandleTypeDef *hjpeg, JPEG_ConfTypeDef *pInfo)
{
 80048e6:	b480      	push	{r7}
 80048e8:	b083      	sub	sp, #12
 80048ea:	af00      	add	r7, sp, #0
 80048ec:	6078      	str	r0, [r7, #4]
 80048ee:	6039      	str	r1, [r7, #0]
  UNUSED(pInfo);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_JPEG_HeaderParsingCpltCallback could be implemented in the user file
   */
}
 80048f0:	bf00      	nop
 80048f2:	370c      	adds	r7, #12
 80048f4:	46bd      	mov	sp, r7
 80048f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fa:	4770      	bx	lr

080048fc <HAL_JPEG_EncodeCpltCallback>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
__weak void HAL_JPEG_EncodeCpltCallback(JPEG_HandleTypeDef *hjpeg)
{
 80048fc:	b480      	push	{r7}
 80048fe:	b083      	sub	sp, #12
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
  UNUSED(hjpeg);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_JPEG_EncodeCpltCallback could be implemented in the user file
   */
}
 8004904:	bf00      	nop
 8004906:	370c      	adds	r7, #12
 8004908:	46bd      	mov	sp, r7
 800490a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490e:	4770      	bx	lr

08004910 <HAL_JPEG_DecodeCpltCallback>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
__weak void HAL_JPEG_DecodeCpltCallback(JPEG_HandleTypeDef *hjpeg)
{
 8004910:	b480      	push	{r7}
 8004912:	b083      	sub	sp, #12
 8004914:	af00      	add	r7, sp, #0
 8004916:	6078      	str	r0, [r7, #4]
  UNUSED(hjpeg);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_JPEG_EncodeCpltCallback could be implemented in the user file
   */
}
 8004918:	bf00      	nop
 800491a:	370c      	adds	r7, #12
 800491c:	46bd      	mov	sp, r7
 800491e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004922:	4770      	bx	lr

08004924 <HAL_JPEG_GetDataCallback>:
  *         the configuration information for JPEG module
  * @param  NbDecodedData Number of consummed data in the previous chunk in bytes
  * @retval None
  */
__weak void HAL_JPEG_GetDataCallback(JPEG_HandleTypeDef *hjpeg, uint32_t NbDecodedData)
{
 8004924:	b480      	push	{r7}
 8004926:	b083      	sub	sp, #12
 8004928:	af00      	add	r7, sp, #0
 800492a:	6078      	str	r0, [r7, #4]
 800492c:	6039      	str	r1, [r7, #0]
  UNUSED(NbDecodedData);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_JPEG_GetDataCallback could be implemented in the user file
   */
}
 800492e:	bf00      	nop
 8004930:	370c      	adds	r7, #12
 8004932:	46bd      	mov	sp, r7
 8004934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004938:	4770      	bx	lr

0800493a <HAL_JPEG_DataReadyCallback>:
  * @param  pDataOut pointer to the output data buffer
  * @param  OutDataLength number in bytes of data available in the specified output buffer
  * @retval None
  */
__weak void HAL_JPEG_DataReadyCallback(JPEG_HandleTypeDef *hjpeg, uint8_t *pDataOut, uint32_t OutDataLength)
{
 800493a:	b480      	push	{r7}
 800493c:	b085      	sub	sp, #20
 800493e:	af00      	add	r7, sp, #0
 8004940:	60f8      	str	r0, [r7, #12]
 8004942:	60b9      	str	r1, [r7, #8]
 8004944:	607a      	str	r2, [r7, #4]
  UNUSED(OutDataLength);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_JPEG_DataReadyCallback could be implemented in the user file
   */
}
 8004946:	bf00      	nop
 8004948:	3714      	adds	r7, #20
 800494a:	46bd      	mov	sp, r7
 800494c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004950:	4770      	bx	lr

08004952 <JPEG_Bits_To_SizeCodes>:
  * @param  Huffcode pointer to codes table
  * @param  LastK pointer to last Coeff (table dimmension)
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Bits_To_SizeCodes(uint8_t *Bits, uint8_t *Huffsize, uint32_t *Huffcode, uint32_t *LastK)
{
 8004952:	b480      	push	{r7}
 8004954:	b08b      	sub	sp, #44	; 0x2c
 8004956:	af00      	add	r7, sp, #0
 8004958:	60f8      	str	r0, [r7, #12]
 800495a:	60b9      	str	r1, [r7, #8]
 800495c:	607a      	str	r2, [r7, #4]
 800495e:	603b      	str	r3, [r7, #0]
  uint32_t i, p, l, code, si;

  /* Figure C.1: Generation of table of Huffman code sizes */
  p = 0;
 8004960:	2300      	movs	r3, #0
 8004962:	623b      	str	r3, [r7, #32]
  for (l = 0; l < 16UL; l++)
 8004964:	2300      	movs	r3, #0
 8004966:	61fb      	str	r3, [r7, #28]
 8004968:	e020      	b.n	80049ac <JPEG_Bits_To_SizeCodes+0x5a>
  {
    i = (uint32_t)Bits[l];
 800496a:	68fa      	ldr	r2, [r7, #12]
 800496c:	69fb      	ldr	r3, [r7, #28]
 800496e:	4413      	add	r3, r2
 8004970:	781b      	ldrb	r3, [r3, #0]
 8004972:	627b      	str	r3, [r7, #36]	; 0x24
    if ((p + i) > 256UL)
 8004974:	6a3a      	ldr	r2, [r7, #32]
 8004976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004978:	4413      	add	r3, r2
 800497a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800497e:	d90f      	bls.n	80049a0 <JPEG_Bits_To_SizeCodes+0x4e>
    {
      /* check for table overflow */
      return HAL_ERROR;
 8004980:	2301      	movs	r3, #1
 8004982:	e055      	b.n	8004a30 <JPEG_Bits_To_SizeCodes+0xde>
    }
    while (i != 0UL)
    {
      Huffsize[p] = (uint8_t) l + 1U;
 8004984:	69fb      	ldr	r3, [r7, #28]
 8004986:	b2da      	uxtb	r2, r3
 8004988:	68b9      	ldr	r1, [r7, #8]
 800498a:	6a3b      	ldr	r3, [r7, #32]
 800498c:	440b      	add	r3, r1
 800498e:	3201      	adds	r2, #1
 8004990:	b2d2      	uxtb	r2, r2
 8004992:	701a      	strb	r2, [r3, #0]
      p++;
 8004994:	6a3b      	ldr	r3, [r7, #32]
 8004996:	3301      	adds	r3, #1
 8004998:	623b      	str	r3, [r7, #32]
      i--;
 800499a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800499c:	3b01      	subs	r3, #1
 800499e:	627b      	str	r3, [r7, #36]	; 0x24
    while (i != 0UL)
 80049a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d1ee      	bne.n	8004984 <JPEG_Bits_To_SizeCodes+0x32>
  for (l = 0; l < 16UL; l++)
 80049a6:	69fb      	ldr	r3, [r7, #28]
 80049a8:	3301      	adds	r3, #1
 80049aa:	61fb      	str	r3, [r7, #28]
 80049ac:	69fb      	ldr	r3, [r7, #28]
 80049ae:	2b0f      	cmp	r3, #15
 80049b0:	d9db      	bls.n	800496a <JPEG_Bits_To_SizeCodes+0x18>
    }
  }
  Huffsize[p] = 0;
 80049b2:	68ba      	ldr	r2, [r7, #8]
 80049b4:	6a3b      	ldr	r3, [r7, #32]
 80049b6:	4413      	add	r3, r2
 80049b8:	2200      	movs	r2, #0
 80049ba:	701a      	strb	r2, [r3, #0]
  *LastK = p;
 80049bc:	683b      	ldr	r3, [r7, #0]
 80049be:	6a3a      	ldr	r2, [r7, #32]
 80049c0:	601a      	str	r2, [r3, #0]

  /* Figure C.2: Generation of table of Huffman codes */
  code = 0;
 80049c2:	2300      	movs	r3, #0
 80049c4:	61bb      	str	r3, [r7, #24]
  si = Huffsize[0];
 80049c6:	68bb      	ldr	r3, [r7, #8]
 80049c8:	781b      	ldrb	r3, [r3, #0]
 80049ca:	617b      	str	r3, [r7, #20]
  p = 0;
 80049cc:	2300      	movs	r3, #0
 80049ce:	623b      	str	r3, [r7, #32]
  while (Huffsize[p] != 0U)
 80049d0:	e027      	b.n	8004a22 <JPEG_Bits_To_SizeCodes+0xd0>
  {
    while (((uint32_t) Huffsize[p]) == si)
    {
      Huffcode[p] = code;
 80049d2:	6a3b      	ldr	r3, [r7, #32]
 80049d4:	009b      	lsls	r3, r3, #2
 80049d6:	687a      	ldr	r2, [r7, #4]
 80049d8:	4413      	add	r3, r2
 80049da:	69ba      	ldr	r2, [r7, #24]
 80049dc:	601a      	str	r2, [r3, #0]
      p++;
 80049de:	6a3b      	ldr	r3, [r7, #32]
 80049e0:	3301      	adds	r3, #1
 80049e2:	623b      	str	r3, [r7, #32]
      code++;
 80049e4:	69bb      	ldr	r3, [r7, #24]
 80049e6:	3301      	adds	r3, #1
 80049e8:	61bb      	str	r3, [r7, #24]
    while (((uint32_t) Huffsize[p]) == si)
 80049ea:	68ba      	ldr	r2, [r7, #8]
 80049ec:	6a3b      	ldr	r3, [r7, #32]
 80049ee:	4413      	add	r3, r2
 80049f0:	781b      	ldrb	r3, [r3, #0]
 80049f2:	461a      	mov	r2, r3
 80049f4:	697b      	ldr	r3, [r7, #20]
 80049f6:	4293      	cmp	r3, r2
 80049f8:	d0eb      	beq.n	80049d2 <JPEG_Bits_To_SizeCodes+0x80>
    }
    /* code must fit in "size" bits (si), no code is allowed to be all ones*/
    if(si > 31UL)
 80049fa:	697b      	ldr	r3, [r7, #20]
 80049fc:	2b1f      	cmp	r3, #31
 80049fe:	d901      	bls.n	8004a04 <JPEG_Bits_To_SizeCodes+0xb2>
    {
      return HAL_ERROR;
 8004a00:	2301      	movs	r3, #1
 8004a02:	e015      	b.n	8004a30 <JPEG_Bits_To_SizeCodes+0xde>
    }
    if (((uint32_t) code) >= (((uint32_t) 1) << si))
 8004a04:	2201      	movs	r2, #1
 8004a06:	697b      	ldr	r3, [r7, #20]
 8004a08:	fa02 f303 	lsl.w	r3, r2, r3
 8004a0c:	69ba      	ldr	r2, [r7, #24]
 8004a0e:	429a      	cmp	r2, r3
 8004a10:	d301      	bcc.n	8004a16 <JPEG_Bits_To_SizeCodes+0xc4>
    {
      return HAL_ERROR;
 8004a12:	2301      	movs	r3, #1
 8004a14:	e00c      	b.n	8004a30 <JPEG_Bits_To_SizeCodes+0xde>
    }
    code <<= 1;
 8004a16:	69bb      	ldr	r3, [r7, #24]
 8004a18:	005b      	lsls	r3, r3, #1
 8004a1a:	61bb      	str	r3, [r7, #24]
    si++;
 8004a1c:	697b      	ldr	r3, [r7, #20]
 8004a1e:	3301      	adds	r3, #1
 8004a20:	617b      	str	r3, [r7, #20]
  while (Huffsize[p] != 0U)
 8004a22:	68ba      	ldr	r2, [r7, #8]
 8004a24:	6a3b      	ldr	r3, [r7, #32]
 8004a26:	4413      	add	r3, r2
 8004a28:	781b      	ldrb	r3, [r3, #0]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d1dd      	bne.n	80049ea <JPEG_Bits_To_SizeCodes+0x98>
  }
  /* Return function status */
  return HAL_OK;
 8004a2e:	2300      	movs	r3, #0
}
 8004a30:	4618      	mov	r0, r3
 8004a32:	372c      	adds	r7, #44	; 0x2c
 8004a34:	46bd      	mov	sp, r7
 8004a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3a:	4770      	bx	lr

08004a3c <JPEG_ACHuff_BitsVals_To_SizeCodes>:
  * @param  AC_SizeCodesTable pointer to AC huffman Sizes/Codes table
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_ACHuff_BitsVals_To_SizeCodes(JPEG_ACHuffTableTypeDef *AC_BitsValsTable,
                                                           JPEG_AC_HuffCodeTableTypeDef *AC_SizeCodesTable)
{
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	f5ad 6da5 	sub.w	sp, sp, #1320	; 0x528
 8004a42:	af00      	add	r7, sp, #0
 8004a44:	1d3b      	adds	r3, r7, #4
 8004a46:	6018      	str	r0, [r3, #0]
 8004a48:	463b      	mov	r3, r7
 8004a4a:	6019      	str	r1, [r3, #0]
  uint32_t huffcode[257];
  uint32_t k;
  uint32_t l, lsb, msb;
  uint32_t lastK;

  error = JPEG_Bits_To_SizeCodes(AC_BitsValsTable->Bits, huffsize, huffcode, &lastK);
 8004a4c:	1d3b      	adds	r3, r7, #4
 8004a4e:	6818      	ldr	r0, [r3, #0]
 8004a50:	f107 0308 	add.w	r3, r7, #8
 8004a54:	f107 020c 	add.w	r2, r7, #12
 8004a58:	f507 6182 	add.w	r1, r7, #1040	; 0x410
 8004a5c:	f7ff ff79 	bl	8004952 <JPEG_Bits_To_SizeCodes>
 8004a60:	4603      	mov	r3, r0
 8004a62:	f887 351f 	strb.w	r3, [r7, #1311]	; 0x51f
  if (error != HAL_OK)
 8004a66:	f897 351f 	ldrb.w	r3, [r7, #1311]	; 0x51f
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d002      	beq.n	8004a74 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x38>
  {
    return  error;
 8004a6e:	f897 351f 	ldrb.w	r3, [r7, #1311]	; 0x51f
 8004a72:	e066      	b.n	8004b42 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x106>
  }

  /* Figure C.3: Ordering procedure for encoding procedure code tables */
  k = 0;
 8004a74:	2300      	movs	r3, #0
 8004a76:	f8c7 3524 	str.w	r3, [r7, #1316]	; 0x524

  while (k < lastK)
 8004a7a:	e05a      	b.n	8004b32 <JPEG_ACHuff_BitsVals_To_SizeCodes+0xf6>
  {
    l = AC_BitsValsTable->HuffVal[k];
 8004a7c:	1d3b      	adds	r3, r7, #4
 8004a7e:	681a      	ldr	r2, [r3, #0]
 8004a80:	f8d7 3524 	ldr.w	r3, [r7, #1316]	; 0x524
 8004a84:	4413      	add	r3, r2
 8004a86:	3310      	adds	r3, #16
 8004a88:	781b      	ldrb	r3, [r3, #0]
 8004a8a:	f8c7 3520 	str.w	r3, [r7, #1312]	; 0x520
    if (l == 0UL)
 8004a8e:	f8d7 3520 	ldr.w	r3, [r7, #1312]	; 0x520
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d103      	bne.n	8004a9e <JPEG_ACHuff_BitsVals_To_SizeCodes+0x62>
    {
      l = 160; /*l = 0x00 EOB code*/
 8004a96:	23a0      	movs	r3, #160	; 0xa0
 8004a98:	f8c7 3520 	str.w	r3, [r7, #1312]	; 0x520
 8004a9c:	e021      	b.n	8004ae2 <JPEG_ACHuff_BitsVals_To_SizeCodes+0xa6>
    }
    else if (l == 0xF0UL) /* l = 0xF0 ZRL code*/
 8004a9e:	f8d7 3520 	ldr.w	r3, [r7, #1312]	; 0x520
 8004aa2:	2bf0      	cmp	r3, #240	; 0xf0
 8004aa4:	d103      	bne.n	8004aae <JPEG_ACHuff_BitsVals_To_SizeCodes+0x72>
    {
      l = 161;
 8004aa6:	23a1      	movs	r3, #161	; 0xa1
 8004aa8:	f8c7 3520 	str.w	r3, [r7, #1312]	; 0x520
 8004aac:	e019      	b.n	8004ae2 <JPEG_ACHuff_BitsVals_To_SizeCodes+0xa6>
    }
    else
    {
      msb = (l & 0xF0UL) >> 4;
 8004aae:	f8d7 3520 	ldr.w	r3, [r7, #1312]	; 0x520
 8004ab2:	091b      	lsrs	r3, r3, #4
 8004ab4:	f003 030f 	and.w	r3, r3, #15
 8004ab8:	f8c7 3518 	str.w	r3, [r7, #1304]	; 0x518
      lsb = (l & 0x0FUL);
 8004abc:	f8d7 3520 	ldr.w	r3, [r7, #1312]	; 0x520
 8004ac0:	f003 030f 	and.w	r3, r3, #15
 8004ac4:	f8c7 3514 	str.w	r3, [r7, #1300]	; 0x514
      l = (msb * 10UL) + lsb - 1UL;
 8004ac8:	f8d7 2518 	ldr.w	r2, [r7, #1304]	; 0x518
 8004acc:	4613      	mov	r3, r2
 8004ace:	009b      	lsls	r3, r3, #2
 8004ad0:	4413      	add	r3, r2
 8004ad2:	005b      	lsls	r3, r3, #1
 8004ad4:	461a      	mov	r2, r3
 8004ad6:	f8d7 3514 	ldr.w	r3, [r7, #1300]	; 0x514
 8004ada:	4413      	add	r3, r2
 8004adc:	3b01      	subs	r3, #1
 8004ade:	f8c7 3520 	str.w	r3, [r7, #1312]	; 0x520
    }
    if (l >= JPEG_AC_HUFF_TABLE_SIZE)
 8004ae2:	f8d7 3520 	ldr.w	r3, [r7, #1312]	; 0x520
 8004ae6:	2ba1      	cmp	r3, #161	; 0xa1
 8004ae8:	d901      	bls.n	8004aee <JPEG_ACHuff_BitsVals_To_SizeCodes+0xb2>
    {
      return HAL_ERROR; /* Huffman Table overflow error*/
 8004aea:	2301      	movs	r3, #1
 8004aec:	e029      	b.n	8004b42 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x106>
    }
    else
    {
      AC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
 8004aee:	f107 030c 	add.w	r3, r7, #12
 8004af2:	f8d7 2524 	ldr.w	r2, [r7, #1316]	; 0x524
 8004af6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004afa:	463b      	mov	r3, r7
 8004afc:	6819      	ldr	r1, [r3, #0]
 8004afe:	f8d7 3520 	ldr.w	r3, [r7, #1312]	; 0x520
 8004b02:	3328      	adds	r3, #40	; 0x28
 8004b04:	009b      	lsls	r3, r3, #2
 8004b06:	440b      	add	r3, r1
 8004b08:	605a      	str	r2, [r3, #4]
      AC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
 8004b0a:	f507 6282 	add.w	r2, r7, #1040	; 0x410
 8004b0e:	f8d7 3524 	ldr.w	r3, [r7, #1316]	; 0x524
 8004b12:	4413      	add	r3, r2
 8004b14:	781b      	ldrb	r3, [r3, #0]
 8004b16:	3b01      	subs	r3, #1
 8004b18:	b2d9      	uxtb	r1, r3
 8004b1a:	463b      	mov	r3, r7
 8004b1c:	681a      	ldr	r2, [r3, #0]
 8004b1e:	f8d7 3520 	ldr.w	r3, [r7, #1312]	; 0x520
 8004b22:	4413      	add	r3, r2
 8004b24:	460a      	mov	r2, r1
 8004b26:	701a      	strb	r2, [r3, #0]
      k++;
 8004b28:	f8d7 3524 	ldr.w	r3, [r7, #1316]	; 0x524
 8004b2c:	3301      	adds	r3, #1
 8004b2e:	f8c7 3524 	str.w	r3, [r7, #1316]	; 0x524
  while (k < lastK)
 8004b32:	f107 0308 	add.w	r3, r7, #8
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f8d7 2524 	ldr.w	r2, [r7, #1316]	; 0x524
 8004b3c:	429a      	cmp	r2, r3
 8004b3e:	d39d      	bcc.n	8004a7c <JPEG_ACHuff_BitsVals_To_SizeCodes+0x40>
    }
  }

  /* Return function status */
  return HAL_OK;
 8004b40:	2300      	movs	r3, #0
}
 8004b42:	4618      	mov	r0, r3
 8004b44:	f507 67a5 	add.w	r7, r7, #1320	; 0x528
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	bd80      	pop	{r7, pc}

08004b4c <JPEG_DCHuff_BitsVals_To_SizeCodes>:
  * @param  DC_SizeCodesTable pointer to DC huffman Sizes/Codes table
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_DCHuff_BitsVals_To_SizeCodes(JPEG_DCHuffTableTypeDef *DC_BitsValsTable,
                                                           JPEG_DC_HuffCodeTableTypeDef *DC_SizeCodesTable)
{
 8004b4c:	b580      	push	{r7, lr}
 8004b4e:	f5ad 6da4 	sub.w	sp, sp, #1312	; 0x520
 8004b52:	af00      	add	r7, sp, #0
 8004b54:	1d3b      	adds	r3, r7, #4
 8004b56:	6018      	str	r0, [r3, #0]
 8004b58:	463b      	mov	r3, r7
 8004b5a:	6019      	str	r1, [r3, #0]
  uint32_t k;
  uint32_t l;
  uint32_t lastK;
  uint8_t huffsize[257];
  uint32_t huffcode[257];
  error = JPEG_Bits_To_SizeCodes(DC_BitsValsTable->Bits, huffsize, huffcode, &lastK);
 8004b5c:	1d3b      	adds	r3, r7, #4
 8004b5e:	6818      	ldr	r0, [r3, #0]
 8004b60:	f507 63a2 	add.w	r3, r7, #1296	; 0x510
 8004b64:	f107 0208 	add.w	r2, r7, #8
 8004b68:	f207 410c 	addw	r1, r7, #1036	; 0x40c
 8004b6c:	f7ff fef1 	bl	8004952 <JPEG_Bits_To_SizeCodes>
 8004b70:	4603      	mov	r3, r0
 8004b72:	f887 351b 	strb.w	r3, [r7, #1307]	; 0x51b
  if (error != HAL_OK)
 8004b76:	f897 351b 	ldrb.w	r3, [r7, #1307]	; 0x51b
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d002      	beq.n	8004b84 <JPEG_DCHuff_BitsVals_To_SizeCodes+0x38>
  {
    return  error;
 8004b7e:	f897 351b 	ldrb.w	r3, [r7, #1307]	; 0x51b
 8004b82:	e03b      	b.n	8004bfc <JPEG_DCHuff_BitsVals_To_SizeCodes+0xb0>
  }
  /* Figure C.3: ordering procedure for encoding procedure code tables */
  k = 0;
 8004b84:	2300      	movs	r3, #0
 8004b86:	f8c7 351c 	str.w	r3, [r7, #1308]	; 0x51c

  while (k < lastK)
 8004b8a:	e030      	b.n	8004bee <JPEG_DCHuff_BitsVals_To_SizeCodes+0xa2>
  {
    l = DC_BitsValsTable->HuffVal[k];
 8004b8c:	1d3b      	adds	r3, r7, #4
 8004b8e:	681a      	ldr	r2, [r3, #0]
 8004b90:	f8d7 351c 	ldr.w	r3, [r7, #1308]	; 0x51c
 8004b94:	4413      	add	r3, r2
 8004b96:	3310      	adds	r3, #16
 8004b98:	781b      	ldrb	r3, [r3, #0]
 8004b9a:	f8c7 3514 	str.w	r3, [r7, #1300]	; 0x514
    if (l >= JPEG_DC_HUFF_TABLE_SIZE)
 8004b9e:	f8d7 3514 	ldr.w	r3, [r7, #1300]	; 0x514
 8004ba2:	2b0b      	cmp	r3, #11
 8004ba4:	d901      	bls.n	8004baa <JPEG_DCHuff_BitsVals_To_SizeCodes+0x5e>
    {
      return HAL_ERROR; /* Huffman Table overflow error*/
 8004ba6:	2301      	movs	r3, #1
 8004ba8:	e028      	b.n	8004bfc <JPEG_DCHuff_BitsVals_To_SizeCodes+0xb0>
    }
    else
    {
      DC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
 8004baa:	f107 0308 	add.w	r3, r7, #8
 8004bae:	f8d7 251c 	ldr.w	r2, [r7, #1308]	; 0x51c
 8004bb2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004bb6:	463b      	mov	r3, r7
 8004bb8:	6819      	ldr	r1, [r3, #0]
 8004bba:	f8d7 3514 	ldr.w	r3, [r7, #1300]	; 0x514
 8004bbe:	3302      	adds	r3, #2
 8004bc0:	009b      	lsls	r3, r3, #2
 8004bc2:	440b      	add	r3, r1
 8004bc4:	605a      	str	r2, [r3, #4]
      DC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
 8004bc6:	f207 420c 	addw	r2, r7, #1036	; 0x40c
 8004bca:	f8d7 351c 	ldr.w	r3, [r7, #1308]	; 0x51c
 8004bce:	4413      	add	r3, r2
 8004bd0:	781b      	ldrb	r3, [r3, #0]
 8004bd2:	3b01      	subs	r3, #1
 8004bd4:	b2d9      	uxtb	r1, r3
 8004bd6:	463b      	mov	r3, r7
 8004bd8:	681a      	ldr	r2, [r3, #0]
 8004bda:	f8d7 3514 	ldr.w	r3, [r7, #1300]	; 0x514
 8004bde:	4413      	add	r3, r2
 8004be0:	460a      	mov	r2, r1
 8004be2:	701a      	strb	r2, [r3, #0]
      k++;
 8004be4:	f8d7 351c 	ldr.w	r3, [r7, #1308]	; 0x51c
 8004be8:	3301      	adds	r3, #1
 8004bea:	f8c7 351c 	str.w	r3, [r7, #1308]	; 0x51c
  while (k < lastK)
 8004bee:	f8d7 3510 	ldr.w	r3, [r7, #1296]	; 0x510
 8004bf2:	f8d7 251c 	ldr.w	r2, [r7, #1308]	; 0x51c
 8004bf6:	429a      	cmp	r2, r3
 8004bf8:	d3c8      	bcc.n	8004b8c <JPEG_DCHuff_BitsVals_To_SizeCodes+0x40>
    }
  }

  /* Return function status */
  return HAL_OK;
 8004bfa:	2300      	movs	r3, #0
}
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	f507 67a4 	add.w	r7, r7, #1312	; 0x520
 8004c02:	46bd      	mov	sp, r7
 8004c04:	bd80      	pop	{r7, pc}

08004c06 <JPEG_Set_HuffDC_Mem>:
  * @param  DCTableAddress Encoder DC huffman table address it could be HUFFENC_DC0 or HUFFENC_DC1.
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Set_HuffDC_Mem(JPEG_HandleTypeDef *hjpeg, JPEG_DCHuffTableTypeDef *HuffTableDC,
                                             const __IO uint32_t *DCTableAddress)
{
 8004c06:	b580      	push	{r7, lr}
 8004c08:	b09a      	sub	sp, #104	; 0x68
 8004c0a:	af00      	add	r7, sp, #0
 8004c0c:	60f8      	str	r0, [r7, #12]
 8004c0e:	60b9      	str	r1, [r7, #8]
 8004c10:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef error;
  JPEG_DC_HuffCodeTableTypeDef dcSizeCodesTable;
  uint32_t i, lsb, msb;
  __IO uint32_t *address, *addressDef;

  if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC0))
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f503 63f8 	add.w	r3, r3, #1984	; 0x7c0
 8004c1a:	687a      	ldr	r2, [r7, #4]
 8004c1c:	429a      	cmp	r2, r3
 8004c1e:	d106      	bne.n	8004c2e <JPEG_Set_HuffDC_Mem+0x28>
  {
    address = (hjpeg->Instance->HUFFENC_DC0 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f503 63f8 	add.w	r3, r3, #1984	; 0x7c0
 8004c28:	3318      	adds	r3, #24
 8004c2a:	663b      	str	r3, [r7, #96]	; 0x60
 8004c2c:	e00f      	b.n	8004c4e <JPEG_Set_HuffDC_Mem+0x48>
  }
  else if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC1))
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f503 63fc 	add.w	r3, r3, #2016	; 0x7e0
 8004c36:	687a      	ldr	r2, [r7, #4]
 8004c38:	429a      	cmp	r2, r3
 8004c3a:	d106      	bne.n	8004c4a <JPEG_Set_HuffDC_Mem+0x44>
  {
    address = (hjpeg->Instance->HUFFENC_DC1 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f503 63fc 	add.w	r3, r3, #2016	; 0x7e0
 8004c44:	3318      	adds	r3, #24
 8004c46:	663b      	str	r3, [r7, #96]	; 0x60
 8004c48:	e001      	b.n	8004c4e <JPEG_Set_HuffDC_Mem+0x48>
  }
  else
  {
    return HAL_ERROR;
 8004c4a:	2301      	movs	r3, #1
 8004c4c:	e05b      	b.n	8004d06 <JPEG_Set_HuffDC_Mem+0x100>
  }

  if (HuffTableDC != NULL)
 8004c4e:	68bb      	ldr	r3, [r7, #8]
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d057      	beq.n	8004d04 <JPEG_Set_HuffDC_Mem+0xfe>
  {
    error = JPEG_DCHuff_BitsVals_To_SizeCodes(HuffTableDC, &dcSizeCodesTable);
 8004c54:	f107 0314 	add.w	r3, r7, #20
 8004c58:	4619      	mov	r1, r3
 8004c5a:	68b8      	ldr	r0, [r7, #8]
 8004c5c:	f7ff ff76 	bl	8004b4c <JPEG_DCHuff_BitsVals_To_SizeCodes>
 8004c60:	4603      	mov	r3, r0
 8004c62:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    if (error != HAL_OK)
 8004c66:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d002      	beq.n	8004c74 <JPEG_Set_HuffDC_Mem+0x6e>
    {
      return  error;
 8004c6e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004c72:	e048      	b.n	8004d06 <JPEG_Set_HuffDC_Mem+0x100>
    }
    addressDef = address;
 8004c74:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004c76:	65bb      	str	r3, [r7, #88]	; 0x58
    *addressDef = 0x0FFF0FFF;
 8004c78:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004c7a:	f06f 22f0 	mvn.w	r2, #4026593280	; 0xf000f000
 8004c7e:	601a      	str	r2, [r3, #0]
    addressDef++;
 8004c80:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004c82:	3304      	adds	r3, #4
 8004c84:	65bb      	str	r3, [r7, #88]	; 0x58
    *addressDef = 0x0FFF0FFF;
 8004c86:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004c88:	f06f 22f0 	mvn.w	r2, #4026593280	; 0xf000f000
 8004c8c:	601a      	str	r2, [r3, #0]

    i = JPEG_DC_HUFF_TABLE_SIZE;
 8004c8e:	230c      	movs	r3, #12
 8004c90:	667b      	str	r3, [r7, #100]	; 0x64
    while (i > 1UL)
 8004c92:	e034      	b.n	8004cfe <JPEG_Set_HuffDC_Mem+0xf8>
    {
      i--;
 8004c94:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004c96:	3b01      	subs	r3, #1
 8004c98:	667b      	str	r3, [r7, #100]	; 0x64
      address --;
 8004c9a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004c9c:	3b04      	subs	r3, #4
 8004c9e:	663b      	str	r3, [r7, #96]	; 0x60
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 8004ca0:	f107 0214 	add.w	r2, r7, #20
 8004ca4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004ca6:	4413      	add	r3, r2
 8004ca8:	781b      	ldrb	r3, [r3, #0]
 8004caa:	021b      	lsls	r3, r3, #8
 8004cac:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8004cb0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004cb2:	3302      	adds	r3, #2
 8004cb4:	009b      	lsls	r3, r3, #2
 8004cb6:	f107 0168 	add.w	r1, r7, #104	; 0x68
 8004cba:	440b      	add	r3, r1
 8004cbc:	f853 3c50 	ldr.w	r3, [r3, #-80]
 8004cc0:	b2db      	uxtb	r3, r3
 8004cc2:	4313      	orrs	r3, r2
 8004cc4:	657b      	str	r3, [r7, #84]	; 0x54
                                                                                   0xFFUL);
      i--;
 8004cc6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004cc8:	3b01      	subs	r3, #1
 8004cca:	667b      	str	r3, [r7, #100]	; 0x64
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 8004ccc:	f107 0214 	add.w	r2, r7, #20
 8004cd0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004cd2:	4413      	add	r3, r2
 8004cd4:	781b      	ldrb	r3, [r3, #0]
 8004cd6:	021b      	lsls	r3, r3, #8
 8004cd8:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8004cdc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004cde:	3302      	adds	r3, #2
 8004ce0:	009b      	lsls	r3, r3, #2
 8004ce2:	f107 0168 	add.w	r1, r7, #104	; 0x68
 8004ce6:	440b      	add	r3, r1
 8004ce8:	f853 3c50 	ldr.w	r3, [r3, #-80]
 8004cec:	b2db      	uxtb	r3, r3
 8004cee:	4313      	orrs	r3, r2
 8004cf0:	653b      	str	r3, [r7, #80]	; 0x50
                                                                                   0xFFUL);

      *address = lsb | (msb << 16);
 8004cf2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004cf4:	041a      	lsls	r2, r3, #16
 8004cf6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004cf8:	431a      	orrs	r2, r3
 8004cfa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004cfc:	601a      	str	r2, [r3, #0]
    while (i > 1UL)
 8004cfe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004d00:	2b01      	cmp	r3, #1
 8004d02:	d8c7      	bhi.n	8004c94 <JPEG_Set_HuffDC_Mem+0x8e>
    }
  }

  /* Return function status */
  return HAL_OK;
 8004d04:	2300      	movs	r3, #0
}
 8004d06:	4618      	mov	r0, r3
 8004d08:	3768      	adds	r7, #104	; 0x68
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	bd80      	pop	{r7, pc}
	...

08004d10 <JPEG_Set_HuffAC_Mem>:
  * @param  ACTableAddress Encoder AC huffman table address it could be HUFFENC_AC0 or HUFFENC_AC1.
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Set_HuffAC_Mem(JPEG_HandleTypeDef *hjpeg, JPEG_ACHuffTableTypeDef *HuffTableAC,
                                             const __IO uint32_t *ACTableAddress)
{
 8004d10:	b580      	push	{r7, lr}
 8004d12:	f5ad 7d56 	sub.w	sp, sp, #856	; 0x358
 8004d16:	af00      	add	r7, sp, #0
 8004d18:	f107 030c 	add.w	r3, r7, #12
 8004d1c:	6018      	str	r0, [r3, #0]
 8004d1e:	f107 0308 	add.w	r3, r7, #8
 8004d22:	6019      	str	r1, [r3, #0]
 8004d24:	1d3b      	adds	r3, r7, #4
 8004d26:	601a      	str	r2, [r3, #0]
  HAL_StatusTypeDef error;
  JPEG_AC_HuffCodeTableTypeDef acSizeCodesTable;
  uint32_t i, lsb, msb;
  __IO uint32_t *address, *addressDef;

  if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC0))
 8004d28:	f107 030c 	add.w	r3, r7, #12
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d34:	1d3a      	adds	r2, r7, #4
 8004d36:	6812      	ldr	r2, [r2, #0]
 8004d38:	429a      	cmp	r2, r3
 8004d3a:	d10a      	bne.n	8004d52 <JPEG_Set_HuffAC_Mem+0x42>
  {
    address = (hjpeg->Instance->HUFFENC_AC0 + (JPEG_AC_HUFF_TABLE_SIZE / 2UL));
 8004d3c:	f107 030c 	add.w	r3, r7, #12
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d48:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8004d4c:	f8c7 3350 	str.w	r3, [r7, #848]	; 0x350
 8004d50:	e016      	b.n	8004d80 <JPEG_Set_HuffAC_Mem+0x70>
  }
  else if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC1))
 8004d52:	f107 030c 	add.w	r3, r7, #12
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f503 63cc 	add.w	r3, r3, #1632	; 0x660
 8004d5e:	1d3a      	adds	r2, r7, #4
 8004d60:	6812      	ldr	r2, [r2, #0]
 8004d62:	429a      	cmp	r2, r3
 8004d64:	d10a      	bne.n	8004d7c <JPEG_Set_HuffAC_Mem+0x6c>
  {
    address = (hjpeg->Instance->HUFFENC_AC1 + (JPEG_AC_HUFF_TABLE_SIZE / 2UL));
 8004d66:	f107 030c 	add.w	r3, r7, #12
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f503 63cc 	add.w	r3, r3, #1632	; 0x660
 8004d72:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8004d76:	f8c7 3350 	str.w	r3, [r7, #848]	; 0x350
 8004d7a:	e001      	b.n	8004d80 <JPEG_Set_HuffAC_Mem+0x70>
  }
  else
  {
    return HAL_ERROR;
 8004d7c:	2301      	movs	r3, #1
 8004d7e:	e09c      	b.n	8004eba <JPEG_Set_HuffAC_Mem+0x1aa>
  }

  if (HuffTableAC != NULL)
 8004d80:	f107 0308 	add.w	r3, r7, #8
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	f000 8096 	beq.w	8004eb8 <JPEG_Set_HuffAC_Mem+0x1a8>
  {
    error = JPEG_ACHuff_BitsVals_To_SizeCodes(HuffTableAC, &acSizeCodesTable);
 8004d8c:	f107 0214 	add.w	r2, r7, #20
 8004d90:	f107 0308 	add.w	r3, r7, #8
 8004d94:	4611      	mov	r1, r2
 8004d96:	6818      	ldr	r0, [r3, #0]
 8004d98:	f7ff fe50 	bl	8004a3c <JPEG_ACHuff_BitsVals_To_SizeCodes>
 8004d9c:	4603      	mov	r3, r0
 8004d9e:	f887 334b 	strb.w	r3, [r7, #843]	; 0x34b
    if (error != HAL_OK)
 8004da2:	f897 334b 	ldrb.w	r3, [r7, #843]	; 0x34b
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d002      	beq.n	8004db0 <JPEG_Set_HuffAC_Mem+0xa0>
    {
      return  error;
 8004daa:	f897 334b 	ldrb.w	r3, [r7, #843]	; 0x34b
 8004dae:	e084      	b.n	8004eba <JPEG_Set_HuffAC_Mem+0x1aa>
    }
    /* Default values settings: 162:167 FFFh , 168:175 FD0h_FD7h */
    /* Locations 162:175 of each AC table contain information used internally by the core */

    addressDef = address;
 8004db0:	f8d7 3350 	ldr.w	r3, [r7, #848]	; 0x350
 8004db4:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
    for (i = 0; i < 3UL; i++)
 8004db8:	2300      	movs	r3, #0
 8004dba:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
 8004dbe:	e00e      	b.n	8004dde <JPEG_Set_HuffAC_Mem+0xce>
    {
      *addressDef = 0x0FFF0FFF;
 8004dc0:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 8004dc4:	f06f 22f0 	mvn.w	r2, #4026593280	; 0xf000f000
 8004dc8:	601a      	str	r2, [r3, #0]
      addressDef++;
 8004dca:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 8004dce:	3304      	adds	r3, #4
 8004dd0:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
    for (i = 0; i < 3UL; i++)
 8004dd4:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 8004dd8:	3301      	adds	r3, #1
 8004dda:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
 8004dde:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 8004de2:	2b02      	cmp	r3, #2
 8004de4:	d9ec      	bls.n	8004dc0 <JPEG_Set_HuffAC_Mem+0xb0>
    }
    *addressDef = 0x0FD10FD0;
 8004de6:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 8004dea:	4a36      	ldr	r2, [pc, #216]	; (8004ec4 <JPEG_Set_HuffAC_Mem+0x1b4>)
 8004dec:	601a      	str	r2, [r3, #0]
    addressDef++;
 8004dee:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 8004df2:	3304      	adds	r3, #4
 8004df4:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
    *addressDef = 0x0FD30FD2;
 8004df8:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 8004dfc:	4a32      	ldr	r2, [pc, #200]	; (8004ec8 <JPEG_Set_HuffAC_Mem+0x1b8>)
 8004dfe:	601a      	str	r2, [r3, #0]
    addressDef++;
 8004e00:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 8004e04:	3304      	adds	r3, #4
 8004e06:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
    *addressDef = 0x0FD50FD4;
 8004e0a:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 8004e0e:	4a2f      	ldr	r2, [pc, #188]	; (8004ecc <JPEG_Set_HuffAC_Mem+0x1bc>)
 8004e10:	601a      	str	r2, [r3, #0]
    addressDef++;
 8004e12:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 8004e16:	3304      	adds	r3, #4
 8004e18:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
    *addressDef = 0x0FD70FD6;
 8004e1c:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 8004e20:	4a2b      	ldr	r2, [pc, #172]	; (8004ed0 <JPEG_Set_HuffAC_Mem+0x1c0>)
 8004e22:	601a      	str	r2, [r3, #0]
    /* end of Locations 162:175  */


    i = JPEG_AC_HUFF_TABLE_SIZE;
 8004e24:	23a2      	movs	r3, #162	; 0xa2
 8004e26:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
    while (i > 1UL)
 8004e2a:	e041      	b.n	8004eb0 <JPEG_Set_HuffAC_Mem+0x1a0>
    {
      i--;
 8004e2c:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 8004e30:	3b01      	subs	r3, #1
 8004e32:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
      address--;
 8004e36:	f8d7 3350 	ldr.w	r3, [r7, #848]	; 0x350
 8004e3a:	3b04      	subs	r3, #4
 8004e3c:	f8c7 3350 	str.w	r3, [r7, #848]	; 0x350
      msb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 8004e40:	f107 0214 	add.w	r2, r7, #20
 8004e44:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 8004e48:	4413      	add	r3, r2
 8004e4a:	781b      	ldrb	r3, [r3, #0]
 8004e4c:	021b      	lsls	r3, r3, #8
 8004e4e:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8004e52:	f107 0114 	add.w	r1, r7, #20
 8004e56:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 8004e5a:	3328      	adds	r3, #40	; 0x28
 8004e5c:	009b      	lsls	r3, r3, #2
 8004e5e:	440b      	add	r3, r1
 8004e60:	685b      	ldr	r3, [r3, #4]
 8004e62:	b2db      	uxtb	r3, r3
 8004e64:	4313      	orrs	r3, r2
 8004e66:	f8c7 3344 	str.w	r3, [r7, #836]	; 0x344
                                                                                   0xFFUL);
      i--;
 8004e6a:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 8004e6e:	3b01      	subs	r3, #1
 8004e70:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
      lsb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 8004e74:	f107 0214 	add.w	r2, r7, #20
 8004e78:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 8004e7c:	4413      	add	r3, r2
 8004e7e:	781b      	ldrb	r3, [r3, #0]
 8004e80:	021b      	lsls	r3, r3, #8
 8004e82:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8004e86:	f107 0114 	add.w	r1, r7, #20
 8004e8a:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 8004e8e:	3328      	adds	r3, #40	; 0x28
 8004e90:	009b      	lsls	r3, r3, #2
 8004e92:	440b      	add	r3, r1
 8004e94:	685b      	ldr	r3, [r3, #4]
 8004e96:	b2db      	uxtb	r3, r3
 8004e98:	4313      	orrs	r3, r2
 8004e9a:	f8c7 3340 	str.w	r3, [r7, #832]	; 0x340
                                                                                   0xFFUL);

      *address = lsb | (msb << 16);
 8004e9e:	f8d7 3344 	ldr.w	r3, [r7, #836]	; 0x344
 8004ea2:	041a      	lsls	r2, r3, #16
 8004ea4:	f8d7 3340 	ldr.w	r3, [r7, #832]	; 0x340
 8004ea8:	431a      	orrs	r2, r3
 8004eaa:	f8d7 3350 	ldr.w	r3, [r7, #848]	; 0x350
 8004eae:	601a      	str	r2, [r3, #0]
    while (i > 1UL)
 8004eb0:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 8004eb4:	2b01      	cmp	r3, #1
 8004eb6:	d8b9      	bhi.n	8004e2c <JPEG_Set_HuffAC_Mem+0x11c>
    }
  }

  /* Return function status */
  return HAL_OK;
 8004eb8:	2300      	movs	r3, #0
}
 8004eba:	4618      	mov	r0, r3
 8004ebc:	f507 7756 	add.w	r7, r7, #856	; 0x358
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	bd80      	pop	{r7, pc}
 8004ec4:	0fd10fd0 	.word	0x0fd10fd0
 8004ec8:	0fd30fd2 	.word	0x0fd30fd2
 8004ecc:	0fd50fd4 	.word	0x0fd50fd4
 8004ed0:	0fd70fd6 	.word	0x0fd70fd6

08004ed4 <JPEG_Set_HuffEnc_Mem>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
static HAL_StatusTypeDef JPEG_Set_HuffEnc_Mem(JPEG_HandleTypeDef *hjpeg)
{
 8004ed4:	b580      	push	{r7, lr}
 8004ed6:	b084      	sub	sp, #16
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef error;

  JPEG_Set_Huff_DHTMem(hjpeg);
 8004edc:	6878      	ldr	r0, [r7, #4]
 8004ede:	f000 f84d 	bl	8004f7c <JPEG_Set_Huff_DHTMem>
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACLUM_HuffTable,
                              (hjpeg->Instance->HUFFENC_AC0));
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACLUM_HuffTable,
 8004eea:	461a      	mov	r2, r3
 8004eec:	491f      	ldr	r1, [pc, #124]	; (8004f6c <JPEG_Set_HuffEnc_Mem+0x98>)
 8004eee:	6878      	ldr	r0, [r7, #4]
 8004ef0:	f7ff ff0e 	bl	8004d10 <JPEG_Set_HuffAC_Mem>
 8004ef4:	4603      	mov	r3, r0
 8004ef6:	73fb      	strb	r3, [r7, #15]
  if (error != HAL_OK)
 8004ef8:	7bfb      	ldrb	r3, [r7, #15]
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d001      	beq.n	8004f02 <JPEG_Set_HuffEnc_Mem+0x2e>
  {
    return  error;
 8004efe:	7bfb      	ldrb	r3, [r7, #15]
 8004f00:	e030      	b.n	8004f64 <JPEG_Set_HuffEnc_Mem+0x90>
  }

  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACCHROM_HuffTable,
                              (hjpeg->Instance->HUFFENC_AC1));
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f503 63cc 	add.w	r3, r3, #1632	; 0x660
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACCHROM_HuffTable,
 8004f0a:	461a      	mov	r2, r3
 8004f0c:	4918      	ldr	r1, [pc, #96]	; (8004f70 <JPEG_Set_HuffEnc_Mem+0x9c>)
 8004f0e:	6878      	ldr	r0, [r7, #4]
 8004f10:	f7ff fefe 	bl	8004d10 <JPEG_Set_HuffAC_Mem>
 8004f14:	4603      	mov	r3, r0
 8004f16:	73fb      	strb	r3, [r7, #15]
  if (error != HAL_OK)
 8004f18:	7bfb      	ldrb	r3, [r7, #15]
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d001      	beq.n	8004f22 <JPEG_Set_HuffEnc_Mem+0x4e>
  {
    return  error;
 8004f1e:	7bfb      	ldrb	r3, [r7, #15]
 8004f20:	e020      	b.n	8004f64 <JPEG_Set_HuffEnc_Mem+0x90>
  }

  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCLUM_HuffTable,
                              hjpeg->Instance->HUFFENC_DC0);
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f503 63f8 	add.w	r3, r3, #1984	; 0x7c0
  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCLUM_HuffTable,
 8004f2a:	461a      	mov	r2, r3
 8004f2c:	4911      	ldr	r1, [pc, #68]	; (8004f74 <JPEG_Set_HuffEnc_Mem+0xa0>)
 8004f2e:	6878      	ldr	r0, [r7, #4]
 8004f30:	f7ff fe69 	bl	8004c06 <JPEG_Set_HuffDC_Mem>
 8004f34:	4603      	mov	r3, r0
 8004f36:	73fb      	strb	r3, [r7, #15]
  if (error != HAL_OK)
 8004f38:	7bfb      	ldrb	r3, [r7, #15]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d001      	beq.n	8004f42 <JPEG_Set_HuffEnc_Mem+0x6e>
  {
    return  error;
 8004f3e:	7bfb      	ldrb	r3, [r7, #15]
 8004f40:	e010      	b.n	8004f64 <JPEG_Set_HuffEnc_Mem+0x90>
  }

  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCCHROM_HuffTable,
                              hjpeg->Instance->HUFFENC_DC1);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f503 63fc 	add.w	r3, r3, #2016	; 0x7e0
  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCCHROM_HuffTable,
 8004f4a:	461a      	mov	r2, r3
 8004f4c:	490a      	ldr	r1, [pc, #40]	; (8004f78 <JPEG_Set_HuffEnc_Mem+0xa4>)
 8004f4e:	6878      	ldr	r0, [r7, #4]
 8004f50:	f7ff fe59 	bl	8004c06 <JPEG_Set_HuffDC_Mem>
 8004f54:	4603      	mov	r3, r0
 8004f56:	73fb      	strb	r3, [r7, #15]
  if (error != HAL_OK)
 8004f58:	7bfb      	ldrb	r3, [r7, #15]
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d001      	beq.n	8004f62 <JPEG_Set_HuffEnc_Mem+0x8e>
  {
    return  error;
 8004f5e:	7bfb      	ldrb	r3, [r7, #15]
 8004f60:	e000      	b.n	8004f64 <JPEG_Set_HuffEnc_Mem+0x90>
  }
  /* Return function status */
  return HAL_OK;
 8004f62:	2300      	movs	r3, #0
}
 8004f64:	4618      	mov	r0, r3
 8004f66:	3710      	adds	r7, #16
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	bd80      	pop	{r7, pc}
 8004f6c:	08011a30 	.word	0x08011a30
 8004f70:	08011ae4 	.word	0x08011ae4
 8004f74:	080119f8 	.word	0x080119f8
 8004f78:	08011a14 	.word	0x08011a14

08004f7c <JPEG_Set_Huff_DHTMem>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
static void JPEG_Set_Huff_DHTMem(JPEG_HandleTypeDef *hjpeg)
{
 8004f7c:	b480      	push	{r7}
 8004f7e:	b08b      	sub	sp, #44	; 0x2c
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
  JPEG_ACHuffTableTypeDef *HuffTableAC0 = (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACLUM_HuffTable;
 8004f84:	4b80      	ldr	r3, [pc, #512]	; (8005188 <JPEG_Set_Huff_DHTMem+0x20c>)
 8004f86:	61fb      	str	r3, [r7, #28]
  JPEG_ACHuffTableTypeDef *HuffTableAC1 = (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACCHROM_HuffTable;
 8004f88:	4b80      	ldr	r3, [pc, #512]	; (800518c <JPEG_Set_Huff_DHTMem+0x210>)
 8004f8a:	61bb      	str	r3, [r7, #24]
  JPEG_DCHuffTableTypeDef *HuffTableDC0 = (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCLUM_HuffTable;
 8004f8c:	4b80      	ldr	r3, [pc, #512]	; (8005190 <JPEG_Set_Huff_DHTMem+0x214>)
 8004f8e:	617b      	str	r3, [r7, #20]
  JPEG_DCHuffTableTypeDef *HuffTableDC1 = (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCCHROM_HuffTable;
 8004f90:	4b80      	ldr	r3, [pc, #512]	; (8005194 <JPEG_Set_Huff_DHTMem+0x218>)
 8004f92:	613b      	str	r3, [r7, #16]
  uint32_t value, index;
  __IO uint32_t *address;

  /* DC0 Huffman Table : BITS*/
  /* DC0 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM base address to DHTMEM + 3*/
  address = (hjpeg->Instance->DHTMEM + 3);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8004f9c:	330c      	adds	r3, #12
 8004f9e:	623b      	str	r3, [r7, #32]
  index = 16;
 8004fa0:	2310      	movs	r3, #16
 8004fa2:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 8004fa4:	e01d      	b.n	8004fe2 <JPEG_Set_Huff_DHTMem+0x66>
  {

    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8004fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fa8:	3b01      	subs	r3, #1
 8004faa:	697a      	ldr	r2, [r7, #20]
 8004fac:	5cd3      	ldrb	r3, [r2, r3]
 8004fae:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableDC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 8004fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fb2:	3b02      	subs	r3, #2
 8004fb4:	6979      	ldr	r1, [r7, #20]
 8004fb6:	5ccb      	ldrb	r3, [r1, r3]
 8004fb8:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8004fba:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableDC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 8004fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fbe:	3b03      	subs	r3, #3
 8004fc0:	6979      	ldr	r1, [r7, #20]
 8004fc2:	5ccb      	ldrb	r3, [r1, r3]
 8004fc4:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableDC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 8004fc6:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableDC0->Bits[index - 4UL] & 0xFFUL);
 8004fc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004fca:	3a04      	subs	r2, #4
 8004fcc:	6979      	ldr	r1, [r7, #20]
 8004fce:	5c8a      	ldrb	r2, [r1, r2]
               (((uint32_t)HuffTableDC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 8004fd0:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8004fd2:	6a3b      	ldr	r3, [r7, #32]
 8004fd4:	601a      	str	r2, [r3, #0]
    address--;
 8004fd6:	6a3b      	ldr	r3, [r7, #32]
 8004fd8:	3b04      	subs	r3, #4
 8004fda:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 8004fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fde:	3b04      	subs	r3, #4
 8004fe0:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 8004fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fe4:	2b03      	cmp	r3, #3
 8004fe6:	d8de      	bhi.n	8004fa6 <JPEG_Set_Huff_DHTMem+0x2a>

  }
  /* DC0 Huffman Table : Val*/
  /* DC0 VALS is a 12 Bytes table i.e 3x32bits words from DHTMEM base address +4 to DHTMEM + 6 */
  address = (hjpeg->Instance->DHTMEM + 6);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8004ff0:	3318      	adds	r3, #24
 8004ff2:	623b      	str	r3, [r7, #32]
  index = 12;
 8004ff4:	230c      	movs	r3, #12
 8004ff6:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 8004ff8:	e021      	b.n	800503e <JPEG_Set_Huff_DHTMem+0xc2>
  {
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8004ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ffc:	3b01      	subs	r3, #1
 8004ffe:	697a      	ldr	r2, [r7, #20]
 8005000:	4413      	add	r3, r2
 8005002:	7c1b      	ldrb	r3, [r3, #16]
 8005004:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableDC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 8005006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005008:	3b02      	subs	r3, #2
 800500a:	6979      	ldr	r1, [r7, #20]
 800500c:	440b      	add	r3, r1
 800500e:	7c1b      	ldrb	r3, [r3, #16]
 8005010:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8005012:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableDC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 8005014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005016:	3b03      	subs	r3, #3
 8005018:	6979      	ldr	r1, [r7, #20]
 800501a:	440b      	add	r3, r1
 800501c:	7c1b      	ldrb	r3, [r3, #16]
 800501e:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableDC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 8005020:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableDC0->HuffVal[index - 4UL] & 0xFFUL);
 8005022:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005024:	3a04      	subs	r2, #4
 8005026:	6979      	ldr	r1, [r7, #20]
 8005028:	440a      	add	r2, r1
 800502a:	7c12      	ldrb	r2, [r2, #16]
               (((uint32_t)HuffTableDC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 800502c:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 800502e:	6a3b      	ldr	r3, [r7, #32]
 8005030:	601a      	str	r2, [r3, #0]
    address--;
 8005032:	6a3b      	ldr	r3, [r7, #32]
 8005034:	3b04      	subs	r3, #4
 8005036:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 8005038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800503a:	3b04      	subs	r3, #4
 800503c:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 800503e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005040:	2b03      	cmp	r3, #3
 8005042:	d8da      	bhi.n	8004ffa <JPEG_Set_Huff_DHTMem+0x7e>
  }

  /* AC0 Huffman Table : BITS*/
  /* AC0 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM base address + 7 to DHTMEM + 10*/
  address = (hjpeg->Instance->DHTMEM + 10UL);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f503 7358 	add.w	r3, r3, #864	; 0x360
 800504c:	3328      	adds	r3, #40	; 0x28
 800504e:	623b      	str	r3, [r7, #32]
  index = 16;
 8005050:	2310      	movs	r3, #16
 8005052:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 8005054:	e01d      	b.n	8005092 <JPEG_Set_Huff_DHTMem+0x116>
  {

    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8005056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005058:	3b01      	subs	r3, #1
 800505a:	69fa      	ldr	r2, [r7, #28]
 800505c:	5cd3      	ldrb	r3, [r2, r3]
 800505e:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableAC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 8005060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005062:	3b02      	subs	r3, #2
 8005064:	69f9      	ldr	r1, [r7, #28]
 8005066:	5ccb      	ldrb	r3, [r1, r3]
 8005068:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 800506a:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableAC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 800506c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800506e:	3b03      	subs	r3, #3
 8005070:	69f9      	ldr	r1, [r7, #28]
 8005072:	5ccb      	ldrb	r3, [r1, r3]
 8005074:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableAC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 8005076:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableAC0->Bits[index - 4UL] & 0xFFUL);
 8005078:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800507a:	3a04      	subs	r2, #4
 800507c:	69f9      	ldr	r1, [r7, #28]
 800507e:	5c8a      	ldrb	r2, [r1, r2]
               (((uint32_t)HuffTableAC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 8005080:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8005082:	6a3b      	ldr	r3, [r7, #32]
 8005084:	601a      	str	r2, [r3, #0]
    address--;
 8005086:	6a3b      	ldr	r3, [r7, #32]
 8005088:	3b04      	subs	r3, #4
 800508a:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 800508c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800508e:	3b04      	subs	r3, #4
 8005090:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 8005092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005094:	2b03      	cmp	r3, #3
 8005096:	d8de      	bhi.n	8005056 <JPEG_Set_Huff_DHTMem+0xda>

  }
  /* AC0 Huffman Table : Val*/
  /* AC0 VALS is a 162 Bytes table i.e 41x32bits words from DHTMEM base address + 11 to DHTMEM + 51 */
  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 51) belong to AC0 VALS table */
  address = (hjpeg->Instance->DHTMEM + 51);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f503 7358 	add.w	r3, r3, #864	; 0x360
 80050a0:	33cc      	adds	r3, #204	; 0xcc
 80050a2:	623b      	str	r3, [r7, #32]
  value = *address & 0xFFFF0000U;
 80050a4:	6a3b      	ldr	r3, [r7, #32]
 80050a6:	681a      	ldr	r2, [r3, #0]
 80050a8:	4b3b      	ldr	r3, [pc, #236]	; (8005198 <JPEG_Set_Huff_DHTMem+0x21c>)
 80050aa:	4013      	ands	r3, r2
 80050ac:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableAC0->HuffVal[161] & 0xFFUL) << 8) | ((uint32_t)HuffTableAC0->HuffVal[160] & 0xFFUL);
 80050ae:	69fb      	ldr	r3, [r7, #28]
 80050b0:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80050b4:	021a      	lsls	r2, r3, #8
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	4313      	orrs	r3, r2
 80050ba:	69fa      	ldr	r2, [r7, #28]
 80050bc:	f892 20b0 	ldrb.w	r2, [r2, #176]	; 0xb0
 80050c0:	4313      	orrs	r3, r2
 80050c2:	60fb      	str	r3, [r7, #12]
  *address = value;
 80050c4:	6a3b      	ldr	r3, [r7, #32]
 80050c6:	68fa      	ldr	r2, [r7, #12]
 80050c8:	601a      	str	r2, [r3, #0]

  /*continue setting 160 AC0 huffman values */
  address--; /* address = hjpeg->Instance->DHTMEM + 50*/
 80050ca:	6a3b      	ldr	r3, [r7, #32]
 80050cc:	3b04      	subs	r3, #4
 80050ce:	623b      	str	r3, [r7, #32]
  index = 160;
 80050d0:	23a0      	movs	r3, #160	; 0xa0
 80050d2:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 80050d4:	e021      	b.n	800511a <JPEG_Set_Huff_DHTMem+0x19e>
  {
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 80050d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050d8:	3b01      	subs	r3, #1
 80050da:	69fa      	ldr	r2, [r7, #28]
 80050dc:	4413      	add	r3, r2
 80050de:	7c1b      	ldrb	r3, [r3, #16]
 80050e0:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableAC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 80050e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050e4:	3b02      	subs	r3, #2
 80050e6:	69f9      	ldr	r1, [r7, #28]
 80050e8:	440b      	add	r3, r1
 80050ea:	7c1b      	ldrb	r3, [r3, #16]
 80050ec:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 80050ee:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableAC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 80050f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050f2:	3b03      	subs	r3, #3
 80050f4:	69f9      	ldr	r1, [r7, #28]
 80050f6:	440b      	add	r3, r1
 80050f8:	7c1b      	ldrb	r3, [r3, #16]
 80050fa:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableAC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 80050fc:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableAC0->HuffVal[index - 4UL] & 0xFFUL);
 80050fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005100:	3a04      	subs	r2, #4
 8005102:	69f9      	ldr	r1, [r7, #28]
 8005104:	440a      	add	r2, r1
 8005106:	7c12      	ldrb	r2, [r2, #16]
               (((uint32_t)HuffTableAC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 8005108:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 800510a:	6a3b      	ldr	r3, [r7, #32]
 800510c:	601a      	str	r2, [r3, #0]
    address--;
 800510e:	6a3b      	ldr	r3, [r7, #32]
 8005110:	3b04      	subs	r3, #4
 8005112:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 8005114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005116:	3b04      	subs	r3, #4
 8005118:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 800511a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800511c:	2b03      	cmp	r3, #3
 800511e:	d8da      	bhi.n	80050d6 <JPEG_Set_Huff_DHTMem+0x15a>
  }

  /* DC1 Huffman Table : BITS*/
  /* DC1 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM + 51 base address to DHTMEM + 55*/
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 51) belong to DC1 Bits table */
  address = (hjpeg->Instance->DHTMEM + 51);
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8005128:	33cc      	adds	r3, #204	; 0xcc
 800512a:	623b      	str	r3, [r7, #32]
  value = *address & 0x0000FFFFU;
 800512c:	6a3b      	ldr	r3, [r7, #32]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	b29b      	uxth	r3, r3
 8005132:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableDC1->Bits[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableDC1->Bits[0] & 0xFFUL) << 16);
 8005134:	693b      	ldr	r3, [r7, #16]
 8005136:	785b      	ldrb	r3, [r3, #1]
 8005138:	061a      	lsls	r2, r3, #24
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	431a      	orrs	r2, r3
 800513e:	693b      	ldr	r3, [r7, #16]
 8005140:	781b      	ldrb	r3, [r3, #0]
 8005142:	041b      	lsls	r3, r3, #16
 8005144:	4313      	orrs	r3, r2
 8005146:	60fb      	str	r3, [r7, #12]
  *address = value;
 8005148:	6a3b      	ldr	r3, [r7, #32]
 800514a:	68fa      	ldr	r2, [r7, #12]
 800514c:	601a      	str	r2, [r3, #0]

  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 55) belong to DC1 Bits table */
  address = (hjpeg->Instance->DHTMEM + 55);
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8005156:	33dc      	adds	r3, #220	; 0xdc
 8005158:	623b      	str	r3, [r7, #32]
  value = *address & 0xFFFF0000U;
 800515a:	6a3b      	ldr	r3, [r7, #32]
 800515c:	681a      	ldr	r2, [r3, #0]
 800515e:	4b0e      	ldr	r3, [pc, #56]	; (8005198 <JPEG_Set_Huff_DHTMem+0x21c>)
 8005160:	4013      	ands	r3, r2
 8005162:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableDC1->Bits[15] & 0xFFUL) << 8) | ((uint32_t)HuffTableDC1->Bits[14] & 0xFFUL);
 8005164:	693b      	ldr	r3, [r7, #16]
 8005166:	7bdb      	ldrb	r3, [r3, #15]
 8005168:	021a      	lsls	r2, r3, #8
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	4313      	orrs	r3, r2
 800516e:	693a      	ldr	r2, [r7, #16]
 8005170:	7b92      	ldrb	r2, [r2, #14]
 8005172:	4313      	orrs	r3, r2
 8005174:	60fb      	str	r3, [r7, #12]
  *address = value;
 8005176:	6a3b      	ldr	r3, [r7, #32]
 8005178:	68fa      	ldr	r2, [r7, #12]
 800517a:	601a      	str	r2, [r3, #0]

  /*continue setting 12 DC1 huffman Bits from DHTMEM + 54 down to DHTMEM + 52*/
  address--;
 800517c:	6a3b      	ldr	r3, [r7, #32]
 800517e:	3b04      	subs	r3, #4
 8005180:	623b      	str	r3, [r7, #32]
  index = 12;
 8005182:	230c      	movs	r3, #12
 8005184:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 8005186:	e027      	b.n	80051d8 <JPEG_Set_Huff_DHTMem+0x25c>
 8005188:	08011a30 	.word	0x08011a30
 800518c:	08011ae4 	.word	0x08011ae4
 8005190:	080119f8 	.word	0x080119f8
 8005194:	08011a14 	.word	0x08011a14
 8005198:	ffff0000 	.word	0xffff0000
  {

    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 800519c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800519e:	3301      	adds	r3, #1
 80051a0:	693a      	ldr	r2, [r7, #16]
 80051a2:	5cd3      	ldrb	r3, [r2, r3]
 80051a4:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableDC1->Bits[index] & 0xFFUL) << 16) |
 80051a6:	6939      	ldr	r1, [r7, #16]
 80051a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051aa:	440b      	add	r3, r1
 80051ac:	781b      	ldrb	r3, [r3, #0]
 80051ae:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 80051b0:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableDC1->Bits[index - 1UL] & 0xFFUL) << 8) |
 80051b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051b4:	3b01      	subs	r3, #1
 80051b6:	6939      	ldr	r1, [r7, #16]
 80051b8:	5ccb      	ldrb	r3, [r1, r3]
 80051ba:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableDC1->Bits[index] & 0xFFUL) << 16) |
 80051bc:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableDC1->Bits[index - 2UL] & 0xFFUL);
 80051be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051c0:	3a02      	subs	r2, #2
 80051c2:	6939      	ldr	r1, [r7, #16]
 80051c4:	5c8a      	ldrb	r2, [r1, r2]
               (((uint32_t)HuffTableDC1->Bits[index - 1UL] & 0xFFUL) << 8) |
 80051c6:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 80051c8:	6a3b      	ldr	r3, [r7, #32]
 80051ca:	601a      	str	r2, [r3, #0]
    address--;
 80051cc:	6a3b      	ldr	r3, [r7, #32]
 80051ce:	3b04      	subs	r3, #4
 80051d0:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 80051d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051d4:	3b04      	subs	r3, #4
 80051d6:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 80051d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051da:	2b03      	cmp	r3, #3
 80051dc:	d8de      	bhi.n	800519c <JPEG_Set_Huff_DHTMem+0x220>

  }
  /* DC1 Huffman Table : Val*/
  /* DC1 VALS is a 12 Bytes table i.e 3x32bits words from DHTMEM base address +55 to DHTMEM + 58 */
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 55) belong to DC1 Val table */
  address = (hjpeg->Instance->DHTMEM + 55);
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f503 7358 	add.w	r3, r3, #864	; 0x360
 80051e6:	33dc      	adds	r3, #220	; 0xdc
 80051e8:	623b      	str	r3, [r7, #32]
  value = *address & 0x0000FFFFUL;
 80051ea:	6a3b      	ldr	r3, [r7, #32]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	b29b      	uxth	r3, r3
 80051f0:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableDC1->HuffVal[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableDC1->HuffVal[0] & 0xFFUL) <<
 80051f2:	693b      	ldr	r3, [r7, #16]
 80051f4:	7c5b      	ldrb	r3, [r3, #17]
 80051f6:	061a      	lsls	r2, r3, #24
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	431a      	orrs	r2, r3
 80051fc:	693b      	ldr	r3, [r7, #16]
 80051fe:	7c1b      	ldrb	r3, [r3, #16]
 8005200:	041b      	lsls	r3, r3, #16
 8005202:	4313      	orrs	r3, r2
 8005204:	60fb      	str	r3, [r7, #12]
                                                                         16);
  *address = value;
 8005206:	6a3b      	ldr	r3, [r7, #32]
 8005208:	68fa      	ldr	r2, [r7, #12]
 800520a:	601a      	str	r2, [r3, #0]

  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 58) belong to DC1 Val table */
  address = (hjpeg->Instance->DHTMEM + 58);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8005214:	33e8      	adds	r3, #232	; 0xe8
 8005216:	623b      	str	r3, [r7, #32]
  value = *address & 0xFFFF0000UL;
 8005218:	6a3b      	ldr	r3, [r7, #32]
 800521a:	681a      	ldr	r2, [r3, #0]
 800521c:	4b6d      	ldr	r3, [pc, #436]	; (80053d4 <JPEG_Set_Huff_DHTMem+0x458>)
 800521e:	4013      	ands	r3, r2
 8005220:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableDC1->HuffVal[11] & 0xFFUL) << 8) | ((uint32_t)HuffTableDC1->HuffVal[10] & 0xFFUL);
 8005222:	693b      	ldr	r3, [r7, #16]
 8005224:	7edb      	ldrb	r3, [r3, #27]
 8005226:	021a      	lsls	r2, r3, #8
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	4313      	orrs	r3, r2
 800522c:	693a      	ldr	r2, [r7, #16]
 800522e:	7e92      	ldrb	r2, [r2, #26]
 8005230:	4313      	orrs	r3, r2
 8005232:	60fb      	str	r3, [r7, #12]
  *address = value;
 8005234:	6a3b      	ldr	r3, [r7, #32]
 8005236:	68fa      	ldr	r2, [r7, #12]
 8005238:	601a      	str	r2, [r3, #0]

  /*continue setting 8 DC1 huffman val from DHTMEM + 57 down to DHTMEM + 56*/
  address--;
 800523a:	6a3b      	ldr	r3, [r7, #32]
 800523c:	3b04      	subs	r3, #4
 800523e:	623b      	str	r3, [r7, #32]
  index = 8;
 8005240:	2308      	movs	r3, #8
 8005242:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 8005244:	e021      	b.n	800528a <JPEG_Set_Huff_DHTMem+0x30e>
  {
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 8005246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005248:	3301      	adds	r3, #1
 800524a:	693a      	ldr	r2, [r7, #16]
 800524c:	4413      	add	r3, r2
 800524e:	7c1b      	ldrb	r3, [r3, #16]
 8005250:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableDC1->HuffVal[index] & 0xFFUL) << 16) |
 8005252:	6939      	ldr	r1, [r7, #16]
 8005254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005256:	440b      	add	r3, r1
 8005258:	3310      	adds	r3, #16
 800525a:	781b      	ldrb	r3, [r3, #0]
 800525c:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 800525e:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableDC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 8005260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005262:	3b01      	subs	r3, #1
 8005264:	6939      	ldr	r1, [r7, #16]
 8005266:	440b      	add	r3, r1
 8005268:	7c1b      	ldrb	r3, [r3, #16]
 800526a:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableDC1->HuffVal[index] & 0xFFUL) << 16) |
 800526c:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableDC1->HuffVal[index - 2UL] & 0xFFUL);
 800526e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005270:	3a02      	subs	r2, #2
 8005272:	6939      	ldr	r1, [r7, #16]
 8005274:	440a      	add	r2, r1
 8005276:	7c12      	ldrb	r2, [r2, #16]
               (((uint32_t)HuffTableDC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 8005278:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 800527a:	6a3b      	ldr	r3, [r7, #32]
 800527c:	601a      	str	r2, [r3, #0]
    address--;
 800527e:	6a3b      	ldr	r3, [r7, #32]
 8005280:	3b04      	subs	r3, #4
 8005282:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 8005284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005286:	3b04      	subs	r3, #4
 8005288:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 800528a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800528c:	2b03      	cmp	r3, #3
 800528e:	d8da      	bhi.n	8005246 <JPEG_Set_Huff_DHTMem+0x2ca>
  }

  /* AC1 Huffman Table : BITS*/
  /* AC1 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM base address + 58 to DHTMEM + 62*/
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 58) belong to AC1 Bits table */
  address = (hjpeg->Instance->DHTMEM + 58);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8005298:	33e8      	adds	r3, #232	; 0xe8
 800529a:	623b      	str	r3, [r7, #32]
  value = *address & 0x0000FFFFU;
 800529c:	6a3b      	ldr	r3, [r7, #32]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	b29b      	uxth	r3, r3
 80052a2:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableAC1->Bits[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableAC1->Bits[0] & 0xFFUL) << 16);
 80052a4:	69bb      	ldr	r3, [r7, #24]
 80052a6:	785b      	ldrb	r3, [r3, #1]
 80052a8:	061a      	lsls	r2, r3, #24
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	431a      	orrs	r2, r3
 80052ae:	69bb      	ldr	r3, [r7, #24]
 80052b0:	781b      	ldrb	r3, [r3, #0]
 80052b2:	041b      	lsls	r3, r3, #16
 80052b4:	4313      	orrs	r3, r2
 80052b6:	60fb      	str	r3, [r7, #12]
  *address = value;
 80052b8:	6a3b      	ldr	r3, [r7, #32]
 80052ba:	68fa      	ldr	r2, [r7, #12]
 80052bc:	601a      	str	r2, [r3, #0]

  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 62) belong to Bits Val table */
  address = (hjpeg->Instance->DHTMEM + 62);
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f503 7358 	add.w	r3, r3, #864	; 0x360
 80052c6:	33f8      	adds	r3, #248	; 0xf8
 80052c8:	623b      	str	r3, [r7, #32]
  value = *address & 0xFFFF0000U;
 80052ca:	6a3b      	ldr	r3, [r7, #32]
 80052cc:	681a      	ldr	r2, [r3, #0]
 80052ce:	4b41      	ldr	r3, [pc, #260]	; (80053d4 <JPEG_Set_Huff_DHTMem+0x458>)
 80052d0:	4013      	ands	r3, r2
 80052d2:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableAC1->Bits[15] & 0xFFUL) << 8) | ((uint32_t)HuffTableAC1->Bits[14] & 0xFFUL);
 80052d4:	69bb      	ldr	r3, [r7, #24]
 80052d6:	7bdb      	ldrb	r3, [r3, #15]
 80052d8:	021a      	lsls	r2, r3, #8
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	4313      	orrs	r3, r2
 80052de:	69ba      	ldr	r2, [r7, #24]
 80052e0:	7b92      	ldrb	r2, [r2, #14]
 80052e2:	4313      	orrs	r3, r2
 80052e4:	60fb      	str	r3, [r7, #12]
  *address = value;
 80052e6:	6a3b      	ldr	r3, [r7, #32]
 80052e8:	68fa      	ldr	r2, [r7, #12]
 80052ea:	601a      	str	r2, [r3, #0]

  /*continue setting 12 AC1 huffman Bits from DHTMEM + 61 down to DHTMEM + 59*/
  address--;
 80052ec:	6a3b      	ldr	r3, [r7, #32]
 80052ee:	3b04      	subs	r3, #4
 80052f0:	623b      	str	r3, [r7, #32]
  index = 12;
 80052f2:	230c      	movs	r3, #12
 80052f4:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 80052f6:	e01d      	b.n	8005334 <JPEG_Set_Huff_DHTMem+0x3b8>
  {

    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 80052f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052fa:	3301      	adds	r3, #1
 80052fc:	69ba      	ldr	r2, [r7, #24]
 80052fe:	5cd3      	ldrb	r3, [r2, r3]
 8005300:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableAC1->Bits[index] & 0xFFUL) << 16) |
 8005302:	69b9      	ldr	r1, [r7, #24]
 8005304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005306:	440b      	add	r3, r1
 8005308:	781b      	ldrb	r3, [r3, #0]
 800530a:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 800530c:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableAC1->Bits[index - 1UL] & 0xFFUL) << 8) |
 800530e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005310:	3b01      	subs	r3, #1
 8005312:	69b9      	ldr	r1, [r7, #24]
 8005314:	5ccb      	ldrb	r3, [r1, r3]
 8005316:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableAC1->Bits[index] & 0xFFUL) << 16) |
 8005318:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableAC1->Bits[index - 2UL] & 0xFFUL);
 800531a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800531c:	3a02      	subs	r2, #2
 800531e:	69b9      	ldr	r1, [r7, #24]
 8005320:	5c8a      	ldrb	r2, [r1, r2]
               (((uint32_t)HuffTableAC1->Bits[index - 1UL] & 0xFFUL) << 8) |
 8005322:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 8005324:	6a3b      	ldr	r3, [r7, #32]
 8005326:	601a      	str	r2, [r3, #0]
    address--;
 8005328:	6a3b      	ldr	r3, [r7, #32]
 800532a:	3b04      	subs	r3, #4
 800532c:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 800532e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005330:	3b04      	subs	r3, #4
 8005332:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 8005334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005336:	2b03      	cmp	r3, #3
 8005338:	d8de      	bhi.n	80052f8 <JPEG_Set_Huff_DHTMem+0x37c>

  }
  /* AC1 Huffman Table : Val*/
  /* AC1 VALS is a 162 Bytes table i.e 41x32bits words from DHTMEM base address + 62 to DHTMEM + 102 */
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 62) belong to AC1 VALS table */
  address = (hjpeg->Instance->DHTMEM + 62);
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8005342:	33f8      	adds	r3, #248	; 0xf8
 8005344:	623b      	str	r3, [r7, #32]
  value = *address & 0x0000FFFFUL;
 8005346:	6a3b      	ldr	r3, [r7, #32]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	b29b      	uxth	r3, r3
 800534c:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableAC1->HuffVal[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableAC1->HuffVal[0] & 0xFFUL) <<
 800534e:	69bb      	ldr	r3, [r7, #24]
 8005350:	7c5b      	ldrb	r3, [r3, #17]
 8005352:	061a      	lsls	r2, r3, #24
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	431a      	orrs	r2, r3
 8005358:	69bb      	ldr	r3, [r7, #24]
 800535a:	7c1b      	ldrb	r3, [r3, #16]
 800535c:	041b      	lsls	r3, r3, #16
 800535e:	4313      	orrs	r3, r2
 8005360:	60fb      	str	r3, [r7, #12]
                                                                         16);
  *address = value;
 8005362:	6a3b      	ldr	r3, [r7, #32]
 8005364:	68fa      	ldr	r2, [r7, #12]
 8005366:	601a      	str	r2, [r3, #0]

  /*continue setting 160 AC1 huffman values from DHTMEM + 63 to DHTMEM+102 */
  address = (hjpeg->Instance->DHTMEM + 102);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8005370:	f503 73cc 	add.w	r3, r3, #408	; 0x198
 8005374:	623b      	str	r3, [r7, #32]
  index = 160;
 8005376:	23a0      	movs	r3, #160	; 0xa0
 8005378:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 800537a:	e021      	b.n	80053c0 <JPEG_Set_Huff_DHTMem+0x444>
  {
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 800537c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800537e:	3301      	adds	r3, #1
 8005380:	69ba      	ldr	r2, [r7, #24]
 8005382:	4413      	add	r3, r2
 8005384:	7c1b      	ldrb	r3, [r3, #16]
 8005386:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableAC1->HuffVal[index] & 0xFFUL) << 16) |
 8005388:	69b9      	ldr	r1, [r7, #24]
 800538a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800538c:	440b      	add	r3, r1
 800538e:	3310      	adds	r3, #16
 8005390:	781b      	ldrb	r3, [r3, #0]
 8005392:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 8005394:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableAC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 8005396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005398:	3b01      	subs	r3, #1
 800539a:	69b9      	ldr	r1, [r7, #24]
 800539c:	440b      	add	r3, r1
 800539e:	7c1b      	ldrb	r3, [r3, #16]
 80053a0:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableAC1->HuffVal[index] & 0xFFUL) << 16) |
 80053a2:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableAC1->HuffVal[index - 2UL] & 0xFFUL);
 80053a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053a6:	3a02      	subs	r2, #2
 80053a8:	69b9      	ldr	r1, [r7, #24]
 80053aa:	440a      	add	r2, r1
 80053ac:	7c12      	ldrb	r2, [r2, #16]
               (((uint32_t)HuffTableAC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 80053ae:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 80053b0:	6a3b      	ldr	r3, [r7, #32]
 80053b2:	601a      	str	r2, [r3, #0]
    address--;
 80053b4:	6a3b      	ldr	r3, [r7, #32]
 80053b6:	3b04      	subs	r3, #4
 80053b8:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 80053ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053bc:	3b04      	subs	r3, #4
 80053be:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 80053c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053c2:	2b03      	cmp	r3, #3
 80053c4:	d8da      	bhi.n	800537c <JPEG_Set_Huff_DHTMem+0x400>
  }

}
 80053c6:	bf00      	nop
 80053c8:	372c      	adds	r7, #44	; 0x2c
 80053ca:	46bd      	mov	sp, r7
 80053cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d0:	4770      	bx	lr
 80053d2:	bf00      	nop
 80053d4:	ffff0000 	.word	0xffff0000

080053d8 <JPEG_Init_Process>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
static void JPEG_Init_Process(JPEG_HandleTypeDef *hjpeg)
{
 80053d8:	b480      	push	{r7}
 80053da:	b083      	sub	sp, #12
 80053dc:	af00      	add	r7, sp, #0
 80053de:	6078      	str	r0, [r7, #4]
  /*Reset pause*/
  hjpeg->Context &= (~(JPEG_CONTEXT_PAUSE_INPUT | JPEG_CONTEXT_PAUSE_OUTPUT));
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053e4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	655a      	str	r2, [r3, #84]	; 0x54

  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053f0:	f003 0303 	and.w	r3, r3, #3
 80053f4:	2b02      	cmp	r3, #2
 80053f6:	d108      	bne.n	800540a <JPEG_Init_Process+0x32>
  {
    /*Set JPEG Codec to Decoding mode */
    hjpeg->Instance->CONFR1 |= JPEG_CONFR1_DE;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	685a      	ldr	r2, [r3, #4]
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f042 0208 	orr.w	r2, r2, #8
 8005406:	605a      	str	r2, [r3, #4]
 8005408:	e007      	b.n	800541a <JPEG_Init_Process+0x42>
  }
  else /* JPEG_CONTEXT_ENCODE */
  {
    /*Set JPEG Codec to Encoding mode */
    hjpeg->Instance->CONFR1 &= ~JPEG_CONFR1_DE;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	685a      	ldr	r2, [r3, #4]
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	f022 0208 	bic.w	r2, r2, #8
 8005418:	605a      	str	r2, [r3, #4]
  }

  /*Stop JPEG processing */
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	681a      	ldr	r2, [r3, #0]
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	f022 0201 	bic.w	r2, r2, #1
 8005428:	601a      	str	r2, [r3, #0]

  /* Disable All Interrupts */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	f022 027e 	bic.w	r2, r2, #126	; 0x7e
 8005438:	631a      	str	r2, [r3, #48]	; 0x30

  /* Flush input and output FIFOs*/
  hjpeg->Instance->CR |= JPEG_CR_IFF;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005448:	631a      	str	r2, [r3, #48]	; 0x30
  hjpeg->Instance->CR |= JPEG_CR_OFF;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005458:	631a      	str	r2, [r3, #48]	; 0x30

  /* Clear all flags */
  __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8005468:	639a      	str	r2, [r3, #56]	; 0x38

  /*Start Encoding/Decoding*/
  hjpeg->Instance->CONFR0 |=  JPEG_CONFR0_START;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	681a      	ldr	r2, [r3, #0]
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	f042 0201 	orr.w	r2, r2, #1
 8005478:	601a      	str	r2, [r3, #0]

  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800547e:	f003 030c 	and.w	r3, r3, #12
 8005482:	2b08      	cmp	r3, #8
 8005484:	d108      	bne.n	8005498 <JPEG_Init_Process+0xc0>
  {
    /*Enable IN/OUT, end of Conversation, and end of header parsing interruptions*/
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_IFT | JPEG_IT_IFNF | JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC | JPEG_IT_HPD);
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f042 026e 	orr.w	r2, r2, #110	; 0x6e
 8005494:	631a      	str	r2, [r3, #48]	; 0x30
  }
  else
  {
    /* Nothing to do */
  }
}
 8005496:	e00d      	b.n	80054b4 <JPEG_Init_Process+0xdc>
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800549c:	f003 030c 	and.w	r3, r3, #12
 80054a0:	2b0c      	cmp	r3, #12
 80054a2:	d107      	bne.n	80054b4 <JPEG_Init_Process+0xdc>
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 80054b2:	631a      	str	r2, [r3, #48]	; 0x30
}
 80054b4:	bf00      	nop
 80054b6:	370c      	adds	r7, #12
 80054b8:	46bd      	mov	sp, r7
 80054ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054be:	4770      	bx	lr

080054c0 <JPEG_Process>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval JPEG_PROCESS_DONE if the process has ends else JPEG_PROCESS_ONGOING
  */
static uint32_t JPEG_Process(JPEG_HandleTypeDef *hjpeg)
{
 80054c0:	b580      	push	{r7, lr}
 80054c2:	b084      	sub	sp, #16
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpContext;

  /*End of header processing flag rised*/
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054cc:	f003 0303 	and.w	r3, r3, #3
 80054d0:	2b02      	cmp	r3, #2
 80054d2:	d125      	bne.n	8005520 <JPEG_Process+0x60>
  {
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_HPDF) != 0UL)
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d01e      	beq.n	8005520 <JPEG_Process+0x60>
    {
      /*Call Header parsing complet callback */
      (void) HAL_JPEG_GetInfo(hjpeg, &hjpeg->Conf);
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	3304      	adds	r3, #4
 80054e6:	4619      	mov	r1, r3
 80054e8:	6878      	ldr	r0, [r7, #4]
 80054ea:	f7ff f887 	bl	80045fc <HAL_JPEG_GetInfo>
      /* Reset the ImageQuality */
      hjpeg->Conf.ImageQuality = 0;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	2200      	movs	r2, #0
 80054f2:	615a      	str	r2, [r3, #20]

      /*Call Info Ready callback */
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->InfoReadyCallback(hjpeg, &hjpeg->Conf);
#else
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	3304      	adds	r3, #4
 80054f8:	4619      	mov	r1, r3
 80054fa:	6878      	ldr	r0, [r7, #4]
 80054fc:	f7ff f9f3 	bl	80048e6 <HAL_JPEG_InfoReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_IT_HPD);
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800550e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Clear header processing done flag */
      __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_HPDF);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800551e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  /*Input FIFO status handling*/
  if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL)
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005524:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005528:	2b00      	cmp	r3, #0
 800552a:	d116      	bne.n	800555a <JPEG_Process+0x9a>
  {
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_IFTF) != 0UL)
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005532:	f003 0302 	and.w	r3, r3, #2
 8005536:	2b00      	cmp	r3, #0
 8005538:	d004      	beq.n	8005544 <JPEG_Process+0x84>
    {
      /*Input FIFO threshold flag rised*/
      /*JPEG_FIFO_TH_SIZE words can be written in */
      JPEG_ReadInputData(hjpeg, JPEG_FIFO_TH_SIZE);
 800553a:	2108      	movs	r1, #8
 800553c:	6878      	ldr	r0, [r7, #4]
 800553e:	f000 f988 	bl	8005852 <JPEG_ReadInputData>
 8005542:	e00a      	b.n	800555a <JPEG_Process+0x9a>
    }
    else if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_IFNFF) != 0UL)
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800554a:	f003 0304 	and.w	r3, r3, #4
 800554e:	2b00      	cmp	r3, #0
 8005550:	d003      	beq.n	800555a <JPEG_Process+0x9a>
    {
      /*Input FIFO Not Full flag rised*/
      /*32-bit value can be written in */
      JPEG_ReadInputData(hjpeg, 1);
 8005552:	2101      	movs	r1, #1
 8005554:	6878      	ldr	r0, [r7, #4]
 8005556:	f000 f97c 	bl	8005852 <JPEG_ReadInputData>
    }
  }


  /*Output FIFO flag handling*/
  if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800555e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005562:	2b00      	cmp	r3, #0
 8005564:	d116      	bne.n	8005594 <JPEG_Process+0xd4>
  {
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFTF) != 0UL)
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800556c:	f003 0308 	and.w	r3, r3, #8
 8005570:	2b00      	cmp	r3, #0
 8005572:	d004      	beq.n	800557e <JPEG_Process+0xbe>
    {
      /*Output FIFO threshold flag rised*/
      /*JPEG_FIFO_TH_SIZE words can be read out */
      JPEG_StoreOutputData(hjpeg, JPEG_FIFO_TH_SIZE);
 8005574:	2108      	movs	r1, #8
 8005576:	6878      	ldr	r0, [r7, #4]
 8005578:	f000 f864 	bl	8005644 <JPEG_StoreOutputData>
 800557c:	e00a      	b.n	8005594 <JPEG_Process+0xd4>
    }
    else if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) != 0UL)
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005584:	f003 0310 	and.w	r3, r3, #16
 8005588:	2b00      	cmp	r3, #0
 800558a:	d003      	beq.n	8005594 <JPEG_Process+0xd4>
    {
      /*Output FIFO Not Empty flag rised*/
      /*32-bit value can be read out */
      JPEG_StoreOutputData(hjpeg, 1);
 800558c:	2101      	movs	r1, #1
 800558e:	6878      	ldr	r0, [r7, #4]
 8005590:	f000 f858 	bl	8005644 <JPEG_StoreOutputData>
      /* Nothing to do */
    }
  }

  /*End of Conversion handling :i.e EOC flag is high and OFTF low and OFNEF low*/
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF | JPEG_FLAG_OFTF | JPEG_FLAG_OFNEF) == JPEG_FLAG_EOCF)
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800559a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800559e:	2b20      	cmp	r3, #32
 80055a0:	d14b      	bne.n	800563a <JPEG_Process+0x17a>
  {
    /*Stop Encoding/Decoding*/
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	681a      	ldr	r2, [r3, #0]
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	f022 0201 	bic.w	r2, r2, #1
 80055b0:	601a      	str	r2, [r3, #0]

    if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055b6:	f003 030c 	and.w	r3, r3, #12
 80055ba:	2b08      	cmp	r3, #8
 80055bc:	d107      	bne.n	80055ce <JPEG_Process+0x10e>
    {
      /* Disable All Interrupts */
      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	f022 027e 	bic.w	r2, r2, #126	; 0x7e
 80055cc:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Clear all flags */
    __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 80055dc:	639a      	str	r2, [r3, #56]	; 0x38

    /*Call End of conversion callback */
    if (hjpeg->JpegOutCount > 0UL)
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d00a      	beq.n	80055fc <JPEG_Process+0x13c>
    {
      /*Output Buffer is not empty, call DecodedDataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	69d9      	ldr	r1, [r3, #28]
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055ee:	461a      	mov	r2, r3
 80055f0:	6878      	ldr	r0, [r7, #4]
 80055f2:	f7ff f9a2 	bl	800493a <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      hjpeg->JpegOutCount = 0;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	2200      	movs	r2, #0
 80055fa:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /*Reset Context Operation*/
    tmpContext = hjpeg->Context;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005600:	60fb      	str	r3, [r7, #12]
    /*Clear all context fields execpt JPEG_CONTEXT_CONF_ENCODING and JPEG_CONTEXT_CUSTOM_TABLES*/
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005606:	f403 4282 	and.w	r2, r3, #16640	; 0x4100
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hjpeg);
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	2200      	movs	r2, #0
 8005612:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

    /* Change the JPEG state */
    hjpeg->State = HAL_JPEG_STATE_READY;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	2201      	movs	r2, #1
 800561a:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

    /*Call End of Encoding/Decoding callback */
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	f003 0303 	and.w	r3, r3, #3
 8005624:	2b02      	cmp	r3, #2
 8005626:	d103      	bne.n	8005630 <JPEG_Process+0x170>
    {
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DecodeCpltCallback(hjpeg);
#else
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 8005628:	6878      	ldr	r0, [r7, #4]
 800562a:	f7ff f971 	bl	8004910 <HAL_JPEG_DecodeCpltCallback>
 800562e:	e002      	b.n	8005636 <JPEG_Process+0x176>
    else /* JPEG_CONTEXT_ENCODE */
    {
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->EncodeCpltCallback(hjpeg);
#else
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 8005630:	6878      	ldr	r0, [r7, #4]
 8005632:	f7ff f963 	bl	80048fc <HAL_JPEG_EncodeCpltCallback>
#endif
    }

    return JPEG_PROCESS_DONE;
 8005636:	2301      	movs	r3, #1
 8005638:	e000      	b.n	800563c <JPEG_Process+0x17c>
  }


  return JPEG_PROCESS_ONGOING;
 800563a:	2300      	movs	r3, #0
}
 800563c:	4618      	mov	r0, r3
 800563e:	3710      	adds	r7, #16
 8005640:	46bd      	mov	sp, r7
 8005642:	bd80      	pop	{r7, pc}

08005644 <JPEG_StoreOutputData>:
  *         the configuration information for JPEG module
  * @param  nbOutputWords Number of output words (of 32 bits) ready from the JPEG peripheral
  * @retval None
  */
static void JPEG_StoreOutputData(JPEG_HandleTypeDef *hjpeg, uint32_t nbOutputWords)
{
 8005644:	b580      	push	{r7, lr}
 8005646:	b086      	sub	sp, #24
 8005648:	af00      	add	r7, sp, #0
 800564a:	6078      	str	r0, [r7, #4]
 800564c:	6039      	str	r1, [r7, #0]
  uint32_t index, nBwords, nbBytes, dataword;

  if (hjpeg->OutDataLength >= (hjpeg->JpegOutCount + (nbOutputWords * 4UL)))
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8005656:	683b      	ldr	r3, [r7, #0]
 8005658:	009b      	lsls	r3, r3, #2
 800565a:	440b      	add	r3, r1
 800565c:	429a      	cmp	r2, r3
 800565e:	d34b      	bcc.n	80056f8 <JPEG_StoreOutputData+0xb4>
  {
    for (index = 0; index < nbOutputWords; index++)
 8005660:	2300      	movs	r3, #0
 8005662:	617b      	str	r3, [r7, #20]
 8005664:	e031      	b.n	80056ca <JPEG_StoreOutputData+0x86>
    {
      /*Transfer 32 bits from the JPEG output FIFO*/
      dataword = hjpeg->Instance->DOR;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800566c:	60bb      	str	r3, [r7, #8]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	69da      	ldr	r2, [r3, #28]
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005676:	4413      	add	r3, r2
 8005678:	68ba      	ldr	r2, [r7, #8]
 800567a:	b2d2      	uxtb	r2, r2
 800567c:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
 800567e:	68bb      	ldr	r3, [r7, #8]
 8005680:	0a19      	lsrs	r1, r3, #8
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	69da      	ldr	r2, [r3, #28]
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800568a:	3301      	adds	r3, #1
 800568c:	4413      	add	r3, r2
 800568e:	b2ca      	uxtb	r2, r1
 8005690:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 8005692:	68bb      	ldr	r3, [r7, #8]
 8005694:	0c19      	lsrs	r1, r3, #16
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	69da      	ldr	r2, [r3, #28]
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800569e:	3302      	adds	r3, #2
 80056a0:	4413      	add	r3, r2
 80056a2:	b2ca      	uxtb	r2, r1
 80056a4:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 80056a6:	68bb      	ldr	r3, [r7, #8]
 80056a8:	0e19      	lsrs	r1, r3, #24
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	69da      	ldr	r2, [r3, #28]
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056b2:	3303      	adds	r3, #3
 80056b4:	4413      	add	r3, r2
 80056b6:	b2ca      	uxtb	r2, r1
 80056b8:	701a      	strb	r2, [r3, #0]
      hjpeg->JpegOutCount += 4UL;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056be:	1d1a      	adds	r2, r3, #4
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	625a      	str	r2, [r3, #36]	; 0x24
    for (index = 0; index < nbOutputWords; index++)
 80056c4:	697b      	ldr	r3, [r7, #20]
 80056c6:	3301      	adds	r3, #1
 80056c8:	617b      	str	r3, [r7, #20]
 80056ca:	697a      	ldr	r2, [r7, #20]
 80056cc:	683b      	ldr	r3, [r7, #0]
 80056ce:	429a      	cmp	r2, r3
 80056d0:	d3c9      	bcc.n	8005666 <JPEG_StoreOutputData+0x22>
    }
    if (hjpeg->OutDataLength == hjpeg->JpegOutCount)
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056da:	429a      	cmp	r2, r3
 80056dc:	f040 80b5 	bne.w	800584a <JPEG_StoreOutputData+0x206>
    {
      /*Output Buffer is full, call DecodedDataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	69d9      	ldr	r1, [r3, #28]
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056e8:	461a      	mov	r2, r3
 80056ea:	6878      	ldr	r0, [r7, #4]
 80056ec:	f7ff f925 	bl	800493a <HAL_JPEG_DataReadyCallback>
#endif /*USE_HAL_JPEG_REGISTER_CALLBACKS*/
      hjpeg->JpegOutCount = 0;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	2200      	movs	r2, #0
 80056f4:	625a      	str	r2, [r3, #36]	; 0x24
  }
  else
  {
    /* Nothing to do */
  }
}
 80056f6:	e0a8      	b.n	800584a <JPEG_StoreOutputData+0x206>
  else if (hjpeg->OutDataLength > hjpeg->JpegOutCount)
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005700:	429a      	cmp	r2, r3
 8005702:	f240 80a2 	bls.w	800584a <JPEG_StoreOutputData+0x206>
    nBwords = (hjpeg->OutDataLength - hjpeg->JpegOutCount) / 4UL;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800570e:	1ad3      	subs	r3, r2, r3
 8005710:	089b      	lsrs	r3, r3, #2
 8005712:	613b      	str	r3, [r7, #16]
    for (index = 0; index < nBwords; index++)
 8005714:	2300      	movs	r3, #0
 8005716:	617b      	str	r3, [r7, #20]
 8005718:	e031      	b.n	800577e <JPEG_StoreOutputData+0x13a>
      dataword = hjpeg->Instance->DOR;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005720:	60bb      	str	r3, [r7, #8]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	69da      	ldr	r2, [r3, #28]
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800572a:	4413      	add	r3, r2
 800572c:	68ba      	ldr	r2, [r7, #8]
 800572e:	b2d2      	uxtb	r2, r2
 8005730:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
 8005732:	68bb      	ldr	r3, [r7, #8]
 8005734:	0a19      	lsrs	r1, r3, #8
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	69da      	ldr	r2, [r3, #28]
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800573e:	3301      	adds	r3, #1
 8005740:	4413      	add	r3, r2
 8005742:	b2ca      	uxtb	r2, r1
 8005744:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 8005746:	68bb      	ldr	r3, [r7, #8]
 8005748:	0c19      	lsrs	r1, r3, #16
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	69da      	ldr	r2, [r3, #28]
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005752:	3302      	adds	r3, #2
 8005754:	4413      	add	r3, r2
 8005756:	b2ca      	uxtb	r2, r1
 8005758:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 800575a:	68bb      	ldr	r3, [r7, #8]
 800575c:	0e19      	lsrs	r1, r3, #24
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	69da      	ldr	r2, [r3, #28]
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005766:	3303      	adds	r3, #3
 8005768:	4413      	add	r3, r2
 800576a:	b2ca      	uxtb	r2, r1
 800576c:	701a      	strb	r2, [r3, #0]
      hjpeg->JpegOutCount += 4UL;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005772:	1d1a      	adds	r2, r3, #4
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	625a      	str	r2, [r3, #36]	; 0x24
    for (index = 0; index < nBwords; index++)
 8005778:	697b      	ldr	r3, [r7, #20]
 800577a:	3301      	adds	r3, #1
 800577c:	617b      	str	r3, [r7, #20]
 800577e:	697a      	ldr	r2, [r7, #20]
 8005780:	693b      	ldr	r3, [r7, #16]
 8005782:	429a      	cmp	r2, r3
 8005784:	d3c9      	bcc.n	800571a <JPEG_StoreOutputData+0xd6>
    if (hjpeg->OutDataLength == hjpeg->JpegOutCount)
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800578e:	429a      	cmp	r2, r3
 8005790:	d10b      	bne.n	80057aa <JPEG_StoreOutputData+0x166>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	69d9      	ldr	r1, [r3, #28]
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800579a:	461a      	mov	r2, r3
 800579c:	6878      	ldr	r0, [r7, #4]
 800579e:	f7ff f8cc 	bl	800493a <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	2200      	movs	r2, #0
 80057a6:	625a      	str	r2, [r3, #36]	; 0x24
}
 80057a8:	e04f      	b.n	800584a <JPEG_StoreOutputData+0x206>
      nbBytes = hjpeg->OutDataLength - hjpeg->JpegOutCount;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057b2:	1ad3      	subs	r3, r2, r3
 80057b4:	60fb      	str	r3, [r7, #12]
      dataword = hjpeg->Instance->DOR;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057bc:	60bb      	str	r3, [r7, #8]
      for (index = 0; index < nbBytes; index++)
 80057be:	2300      	movs	r3, #0
 80057c0:	617b      	str	r3, [r7, #20]
 80057c2:	e015      	b.n	80057f0 <JPEG_StoreOutputData+0x1ac>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * (index & 0x3UL))) & 0xFFUL);
 80057c4:	697b      	ldr	r3, [r7, #20]
 80057c6:	f003 0303 	and.w	r3, r3, #3
 80057ca:	00db      	lsls	r3, r3, #3
 80057cc:	68ba      	ldr	r2, [r7, #8]
 80057ce:	fa22 f103 	lsr.w	r1, r2, r3
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	69da      	ldr	r2, [r3, #28]
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057da:	4413      	add	r3, r2
 80057dc:	b2ca      	uxtb	r2, r1
 80057de:	701a      	strb	r2, [r3, #0]
        hjpeg->JpegOutCount++;
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057e4:	1c5a      	adds	r2, r3, #1
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	625a      	str	r2, [r3, #36]	; 0x24
      for (index = 0; index < nbBytes; index++)
 80057ea:	697b      	ldr	r3, [r7, #20]
 80057ec:	3301      	adds	r3, #1
 80057ee:	617b      	str	r3, [r7, #20]
 80057f0:	697a      	ldr	r2, [r7, #20]
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	429a      	cmp	r2, r3
 80057f6:	d3e5      	bcc.n	80057c4 <JPEG_StoreOutputData+0x180>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	69d9      	ldr	r1, [r3, #28]
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005800:	461a      	mov	r2, r3
 8005802:	6878      	ldr	r0, [r7, #4]
 8005804:	f7ff f899 	bl	800493a <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2200      	movs	r2, #0
 800580c:	625a      	str	r2, [r3, #36]	; 0x24
      nbBytes = 4UL - nbBytes;
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	f1c3 0304 	rsb	r3, r3, #4
 8005814:	60fb      	str	r3, [r7, #12]
      for (index = nbBytes; index < 4UL; index++)
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	617b      	str	r3, [r7, #20]
 800581a:	e013      	b.n	8005844 <JPEG_StoreOutputData+0x200>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * index)) & 0xFFUL);
 800581c:	697b      	ldr	r3, [r7, #20]
 800581e:	00db      	lsls	r3, r3, #3
 8005820:	68ba      	ldr	r2, [r7, #8]
 8005822:	fa22 f103 	lsr.w	r1, r2, r3
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	69da      	ldr	r2, [r3, #28]
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800582e:	4413      	add	r3, r2
 8005830:	b2ca      	uxtb	r2, r1
 8005832:	701a      	strb	r2, [r3, #0]
        hjpeg->JpegOutCount++;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005838:	1c5a      	adds	r2, r3, #1
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	625a      	str	r2, [r3, #36]	; 0x24
      for (index = nbBytes; index < 4UL; index++)
 800583e:	697b      	ldr	r3, [r7, #20]
 8005840:	3301      	adds	r3, #1
 8005842:	617b      	str	r3, [r7, #20]
 8005844:	697b      	ldr	r3, [r7, #20]
 8005846:	2b03      	cmp	r3, #3
 8005848:	d9e8      	bls.n	800581c <JPEG_StoreOutputData+0x1d8>
}
 800584a:	bf00      	nop
 800584c:	3718      	adds	r7, #24
 800584e:	46bd      	mov	sp, r7
 8005850:	bd80      	pop	{r7, pc}

08005852 <JPEG_ReadInputData>:
  *         the configuration information for JPEG module
  * @param  nbRequestWords Number of input words (of 32 bits) that the JPE peripheral request
  * @retval None
  */
static void JPEG_ReadInputData(JPEG_HandleTypeDef *hjpeg, uint32_t nbRequestWords)
{
 8005852:	b580      	push	{r7, lr}
 8005854:	b088      	sub	sp, #32
 8005856:	af00      	add	r7, sp, #0
 8005858:	6078      	str	r0, [r7, #4]
 800585a:	6039      	str	r1, [r7, #0]
  uint32_t nbBytes = 0, nBwords, index, Dataword, inputCount;
 800585c:	2300      	movs	r3, #0
 800585e:	61fb      	str	r3, [r7, #28]

  if ((hjpeg->InDataLength == 0UL) || (nbRequestWords == 0UL))
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005864:	2b00      	cmp	r3, #0
 8005866:	d002      	beq.n	800586e <JPEG_ReadInputData+0x1c>
 8005868:	683b      	ldr	r3, [r7, #0]
 800586a:	2b00      	cmp	r3, #0
 800586c:	d104      	bne.n	8005878 <JPEG_ReadInputData+0x26>
  {
    /* No more Input data : nothing to do*/
    (void) HAL_JPEG_Pause(hjpeg, JPEG_PAUSE_RESUME_INPUT);
 800586e:	2101      	movs	r1, #1
 8005870:	6878      	ldr	r0, [r7, #4]
 8005872:	f7fe ffe0 	bl	8004836 <HAL_JPEG_Pause>
 8005876:	e028      	b.n	80058ca <JPEG_ReadInputData+0x78>
  }
  else if (hjpeg->InDataLength > hjpeg->JpegInCount)
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	6a1b      	ldr	r3, [r3, #32]
 8005880:	429a      	cmp	r2, r3
 8005882:	d906      	bls.n	8005892 <JPEG_ReadInputData+0x40>
  {
    nbBytes = hjpeg->InDataLength - hjpeg->JpegInCount;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	6a1b      	ldr	r3, [r3, #32]
 800588c:	1ad3      	subs	r3, r2, r3
 800588e:	61fb      	str	r3, [r7, #28]
 8005890:	e01b      	b.n	80058ca <JPEG_ReadInputData+0x78>
  }
  else if (hjpeg->InDataLength == hjpeg->JpegInCount)
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	6a1b      	ldr	r3, [r3, #32]
 800589a:	429a      	cmp	r2, r3
 800589c:	d115      	bne.n	80058ca <JPEG_ReadInputData+0x78>
  {
    /*Call HAL_JPEG_GetDataCallback to get new data */
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
    hjpeg->GetDataCallback(hjpeg, hjpeg->JpegInCount);
#else
    HAL_JPEG_GetDataCallback(hjpeg, hjpeg->JpegInCount);
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	6a1b      	ldr	r3, [r3, #32]
 80058a2:	4619      	mov	r1, r3
 80058a4:	6878      	ldr	r0, [r7, #4]
 80058a6:	f7ff f83d 	bl	8004924 <HAL_JPEG_GetDataCallback>
#endif /*USE_HAL_JPEG_REGISTER_CALLBACKS*/

    if (hjpeg->InDataLength > 4UL)
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058ae:	2b04      	cmp	r3, #4
 80058b0:	d905      	bls.n	80058be <JPEG_ReadInputData+0x6c>
    {
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % 4UL);
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058b6:	f023 0203 	bic.w	r2, r3, #3
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	629a      	str	r2, [r3, #40]	; 0x28
    }
    hjpeg->JpegInCount = 0;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	2200      	movs	r2, #0
 80058c2:	621a      	str	r2, [r3, #32]
    nbBytes = hjpeg->InDataLength;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058c8:	61fb      	str	r3, [r7, #28]
  }
  else
  {
    /* Nothing to do */
  }
  if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (nbBytes > 0UL))
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058ce:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	f040 809f 	bne.w	8005a16 <JPEG_ReadInputData+0x1c4>
 80058d8:	69fb      	ldr	r3, [r7, #28]
 80058da:	2b00      	cmp	r3, #0
 80058dc:	f000 809b 	beq.w	8005a16 <JPEG_ReadInputData+0x1c4>
  {
    nBwords = nbBytes / 4UL;
 80058e0:	69fb      	ldr	r3, [r7, #28]
 80058e2:	089b      	lsrs	r3, r3, #2
 80058e4:	613b      	str	r3, [r7, #16]
    if (nBwords >= nbRequestWords)
 80058e6:	693a      	ldr	r2, [r7, #16]
 80058e8:	683b      	ldr	r3, [r7, #0]
 80058ea:	429a      	cmp	r2, r3
 80058ec:	d335      	bcc.n	800595a <JPEG_ReadInputData+0x108>
    {
      for (index = 0; index < nbRequestWords; index++)
 80058ee:	2300      	movs	r3, #0
 80058f0:	61bb      	str	r3, [r7, #24]
 80058f2:	e02d      	b.n	8005950 <JPEG_ReadInputData+0xfe>
      {
        inputCount = hjpeg->JpegInCount;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	6a1b      	ldr	r3, [r3, #32]
 80058f8:	60fb      	str	r3, [r7, #12]
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[inputCount])) | \
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	699a      	ldr	r2, [r3, #24]
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	4413      	add	r3, r2
 8005902:	781b      	ldrb	r3, [r3, #0]
 8005904:	4619      	mov	r1, r3
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[inputCount + 1UL])) << 8) | \
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	699a      	ldr	r2, [r3, #24]
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	3301      	adds	r3, #1
 800590e:	4413      	add	r3, r2
 8005910:	781b      	ldrb	r3, [r3, #0]
 8005912:	021b      	lsls	r3, r3, #8
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[inputCount])) | \
 8005914:	ea41 0203 	orr.w	r2, r1, r3
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[inputCount + 2UL])) << 16) | \
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	6999      	ldr	r1, [r3, #24]
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	3302      	adds	r3, #2
 8005920:	440b      	add	r3, r1
 8005922:	781b      	ldrb	r3, [r3, #0]
 8005924:	041b      	lsls	r3, r3, #16
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[inputCount + 1UL])) << 8) | \
 8005926:	ea42 0103 	orr.w	r1, r2, r3
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[inputCount + 3UL])) << 24));
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	699a      	ldr	r2, [r3, #24]
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	3303      	adds	r3, #3
 8005932:	4413      	add	r3, r2
 8005934:	781b      	ldrb	r3, [r3, #0]
 8005936:	061a      	lsls	r2, r3, #24
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[inputCount])) | \
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[inputCount + 2UL])) << 16) | \
 800593c:	430a      	orrs	r2, r1
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[inputCount])) | \
 800593e:	641a      	str	r2, [r3, #64]	; 0x40

        hjpeg->JpegInCount += 4UL;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	6a1b      	ldr	r3, [r3, #32]
 8005944:	1d1a      	adds	r2, r3, #4
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	621a      	str	r2, [r3, #32]
      for (index = 0; index < nbRequestWords; index++)
 800594a:	69bb      	ldr	r3, [r7, #24]
 800594c:	3301      	adds	r3, #1
 800594e:	61bb      	str	r3, [r7, #24]
 8005950:	69ba      	ldr	r2, [r7, #24]
 8005952:	683b      	ldr	r3, [r7, #0]
 8005954:	429a      	cmp	r2, r3
 8005956:	d3cd      	bcc.n	80058f4 <JPEG_ReadInputData+0xa2>
        }
        hjpeg->Instance->DIR = Dataword;
      }
    }
  }
}
 8005958:	e05d      	b.n	8005a16 <JPEG_ReadInputData+0x1c4>
      if (nBwords > 0UL)
 800595a:	693b      	ldr	r3, [r7, #16]
 800595c:	2b00      	cmp	r3, #0
 800595e:	d035      	beq.n	80059cc <JPEG_ReadInputData+0x17a>
        for (index = 0; index < nBwords; index++)
 8005960:	2300      	movs	r3, #0
 8005962:	61bb      	str	r3, [r7, #24]
 8005964:	e02d      	b.n	80059c2 <JPEG_ReadInputData+0x170>
          inputCount = hjpeg->JpegInCount;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	6a1b      	ldr	r3, [r3, #32]
 800596a:	60fb      	str	r3, [r7, #12]
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[inputCount])) | \
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	699a      	ldr	r2, [r3, #24]
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	4413      	add	r3, r2
 8005974:	781b      	ldrb	r3, [r3, #0]
 8005976:	4619      	mov	r1, r3
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[inputCount + 1UL])) << 8) | \
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	699a      	ldr	r2, [r3, #24]
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	3301      	adds	r3, #1
 8005980:	4413      	add	r3, r2
 8005982:	781b      	ldrb	r3, [r3, #0]
 8005984:	021b      	lsls	r3, r3, #8
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[inputCount])) | \
 8005986:	ea41 0203 	orr.w	r2, r1, r3
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[inputCount + 2UL])) << 16) | \
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	6999      	ldr	r1, [r3, #24]
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	3302      	adds	r3, #2
 8005992:	440b      	add	r3, r1
 8005994:	781b      	ldrb	r3, [r3, #0]
 8005996:	041b      	lsls	r3, r3, #16
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[inputCount + 1UL])) << 8) | \
 8005998:	ea42 0103 	orr.w	r1, r2, r3
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[inputCount + 3UL])) << 24));
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	699a      	ldr	r2, [r3, #24]
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	3303      	adds	r3, #3
 80059a4:	4413      	add	r3, r2
 80059a6:	781b      	ldrb	r3, [r3, #0]
 80059a8:	061a      	lsls	r2, r3, #24
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[inputCount])) | \
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[inputCount + 2UL])) << 16) | \
 80059ae:	430a      	orrs	r2, r1
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[inputCount])) | \
 80059b0:	641a      	str	r2, [r3, #64]	; 0x40
          hjpeg->JpegInCount += 4UL;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	6a1b      	ldr	r3, [r3, #32]
 80059b6:	1d1a      	adds	r2, r3, #4
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	621a      	str	r2, [r3, #32]
        for (index = 0; index < nBwords; index++)
 80059bc:	69bb      	ldr	r3, [r7, #24]
 80059be:	3301      	adds	r3, #1
 80059c0:	61bb      	str	r3, [r7, #24]
 80059c2:	69ba      	ldr	r2, [r7, #24]
 80059c4:	693b      	ldr	r3, [r7, #16]
 80059c6:	429a      	cmp	r2, r3
 80059c8:	d3cd      	bcc.n	8005966 <JPEG_ReadInputData+0x114>
}
 80059ca:	e024      	b.n	8005a16 <JPEG_ReadInputData+0x1c4>
        Dataword = 0;
 80059cc:	2300      	movs	r3, #0
 80059ce:	617b      	str	r3, [r7, #20]
        for (index = 0; index < nbBytes; index++)
 80059d0:	2300      	movs	r3, #0
 80059d2:	61bb      	str	r3, [r7, #24]
 80059d4:	e017      	b.n	8005a06 <JPEG_ReadInputData+0x1b4>
          Dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	699a      	ldr	r2, [r3, #24]
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	6a1b      	ldr	r3, [r3, #32]
 80059de:	4413      	add	r3, r2
 80059e0:	781b      	ldrb	r3, [r3, #0]
 80059e2:	461a      	mov	r2, r3
 80059e4:	69bb      	ldr	r3, [r7, #24]
 80059e6:	f003 0303 	and.w	r3, r3, #3
 80059ea:	00db      	lsls	r3, r3, #3
 80059ec:	fa02 f303 	lsl.w	r3, r2, r3
 80059f0:	697a      	ldr	r2, [r7, #20]
 80059f2:	4313      	orrs	r3, r2
 80059f4:	617b      	str	r3, [r7, #20]
          hjpeg->JpegInCount++;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	6a1b      	ldr	r3, [r3, #32]
 80059fa:	1c5a      	adds	r2, r3, #1
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	621a      	str	r2, [r3, #32]
        for (index = 0; index < nbBytes; index++)
 8005a00:	69bb      	ldr	r3, [r7, #24]
 8005a02:	3301      	adds	r3, #1
 8005a04:	61bb      	str	r3, [r7, #24]
 8005a06:	69ba      	ldr	r2, [r7, #24]
 8005a08:	69fb      	ldr	r3, [r7, #28]
 8005a0a:	429a      	cmp	r2, r3
 8005a0c:	d3e3      	bcc.n	80059d6 <JPEG_ReadInputData+0x184>
        hjpeg->Instance->DIR = Dataword;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	697a      	ldr	r2, [r7, #20]
 8005a14:	641a      	str	r2, [r3, #64]	; 0x40
}
 8005a16:	bf00      	nop
 8005a18:	3720      	adds	r7, #32
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	bd80      	pop	{r7, pc}
	...

08005a20 <JPEG_GetQuality>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval JPEG image quality from 1 to 100.
  */
static uint32_t JPEG_GetQuality(JPEG_HandleTypeDef *hjpeg)
{
 8005a20:	b480      	push	{r7}
 8005a22:	b08b      	sub	sp, #44	; 0x2c
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	6078      	str	r0, [r7, #4]
  uint32_t quality = 0;
 8005a28:	2300      	movs	r3, #0
 8005a2a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t quantRow, quantVal, scale, i, j;
  __IO uint32_t *tableAddress = hjpeg->Instance->QMEM0;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	3350      	adds	r3, #80	; 0x50
 8005a32:	61bb      	str	r3, [r7, #24]

  i = 0;
 8005a34:	2300      	movs	r3, #0
 8005a36:	623b      	str	r3, [r7, #32]
  while (i < (JPEG_QUANT_TABLE_SIZE - 3UL))
 8005a38:	e042      	b.n	8005ac0 <JPEG_GetQuality+0xa0>
  {
    quantRow = *tableAddress;
 8005a3a:	69bb      	ldr	r3, [r7, #24]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	617b      	str	r3, [r7, #20]
    for (j = 0; j < 4UL; j++)
 8005a40:	2300      	movs	r3, #0
 8005a42:	61fb      	str	r3, [r7, #28]
 8005a44:	e033      	b.n	8005aae <JPEG_GetQuality+0x8e>
    {
      quantVal = (quantRow >> (8UL * j)) & 0xFFUL;
 8005a46:	69fb      	ldr	r3, [r7, #28]
 8005a48:	00db      	lsls	r3, r3, #3
 8005a4a:	697a      	ldr	r2, [r7, #20]
 8005a4c:	fa22 f303 	lsr.w	r3, r2, r3
 8005a50:	b2db      	uxtb	r3, r3
 8005a52:	613b      	str	r3, [r7, #16]
      if (quantVal == 1UL)
 8005a54:	693b      	ldr	r3, [r7, #16]
 8005a56:	2b01      	cmp	r3, #1
 8005a58:	d103      	bne.n	8005a62 <JPEG_GetQuality+0x42>
      {
        /* if Quantization value = 1 then quality is 100%*/
        quality += 100UL;
 8005a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a5c:	3364      	adds	r3, #100	; 0x64
 8005a5e:	627b      	str	r3, [r7, #36]	; 0x24
 8005a60:	e022      	b.n	8005aa8 <JPEG_GetQuality+0x88>
      }
      else
      {
        /* Note that the quantization coefficients must be specified in the table in zigzag order */
        scale = (quantVal * 100UL) / ((uint32_t) hjpeg->QuantTable0[JPEG_ZIGZAG_ORDER[i + j]]);
 8005a62:	693b      	ldr	r3, [r7, #16]
 8005a64:	2264      	movs	r2, #100	; 0x64
 8005a66:	fb02 f303 	mul.w	r3, r2, r3
 8005a6a:	687a      	ldr	r2, [r7, #4]
 8005a6c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005a6e:	6a38      	ldr	r0, [r7, #32]
 8005a70:	69f9      	ldr	r1, [r7, #28]
 8005a72:	4401      	add	r1, r0
 8005a74:	4818      	ldr	r0, [pc, #96]	; (8005ad8 <JPEG_GetQuality+0xb8>)
 8005a76:	5c41      	ldrb	r1, [r0, r1]
 8005a78:	440a      	add	r2, r1
 8005a7a:	7812      	ldrb	r2, [r2, #0]
 8005a7c:	fbb3 f3f2 	udiv	r3, r3, r2
 8005a80:	60fb      	str	r3, [r7, #12]

        if (scale <= 100UL)
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	2b64      	cmp	r3, #100	; 0x64
 8005a86:	d807      	bhi.n	8005a98 <JPEG_GetQuality+0x78>
        {
          quality += (200UL - scale) / 2UL;
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	f1c3 03c8 	rsb	r3, r3, #200	; 0xc8
 8005a8e:	085b      	lsrs	r3, r3, #1
 8005a90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a92:	4413      	add	r3, r2
 8005a94:	627b      	str	r3, [r7, #36]	; 0x24
 8005a96:	e007      	b.n	8005aa8 <JPEG_GetQuality+0x88>
        }
        else
        {
          quality += 5000UL / scale;
 8005a98:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005aa2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005aa4:	4413      	add	r3, r2
 8005aa6:	627b      	str	r3, [r7, #36]	; 0x24
    for (j = 0; j < 4UL; j++)
 8005aa8:	69fb      	ldr	r3, [r7, #28]
 8005aaa:	3301      	adds	r3, #1
 8005aac:	61fb      	str	r3, [r7, #28]
 8005aae:	69fb      	ldr	r3, [r7, #28]
 8005ab0:	2b03      	cmp	r3, #3
 8005ab2:	d9c8      	bls.n	8005a46 <JPEG_GetQuality+0x26>
        }
      }
    }

    i += 4UL;
 8005ab4:	6a3b      	ldr	r3, [r7, #32]
 8005ab6:	3304      	adds	r3, #4
 8005ab8:	623b      	str	r3, [r7, #32]
    tableAddress ++;
 8005aba:	69bb      	ldr	r3, [r7, #24]
 8005abc:	3304      	adds	r3, #4
 8005abe:	61bb      	str	r3, [r7, #24]
  while (i < (JPEG_QUANT_TABLE_SIZE - 3UL))
 8005ac0:	6a3b      	ldr	r3, [r7, #32]
 8005ac2:	2b3c      	cmp	r3, #60	; 0x3c
 8005ac4:	d9b9      	bls.n	8005a3a <JPEG_GetQuality+0x1a>
  }

  return (quality / 64UL);
 8005ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ac8:	099b      	lsrs	r3, r3, #6
}
 8005aca:	4618      	mov	r0, r3
 8005acc:	372c      	adds	r7, #44	; 0x2c
 8005ace:	46bd      	mov	sp, r7
 8005ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad4:	4770      	bx	lr
 8005ad6:	bf00      	nop
 8005ad8:	08011b98 	.word	0x08011b98

08005adc <HAL_PWREx_ConfigSupply>:
  *            @arg PWR_EXTERNAL_SOURCE_SUPPLY          The LDO regulator is Bypassed.
  *                                                     The Vcore Power Domains are supplied from external source.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 8005adc:	b580      	push	{r7, lr}
 8005ade:	b084      	sub	sp, #16
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  if(!__HAL_PWR_GET_FLAG(PWR_FLAG_SCUEN))
 8005ae4:	4b18      	ldr	r3, [pc, #96]	; (8005b48 <HAL_PWREx_ConfigSupply+0x6c>)
 8005ae6:	68db      	ldr	r3, [r3, #12]
 8005ae8:	f003 0304 	and.w	r3, r3, #4
 8005aec:	2b04      	cmp	r3, #4
 8005aee:	d008      	beq.n	8005b02 <HAL_PWREx_ConfigSupply+0x26>
  {
    if((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8005af0:	4b15      	ldr	r3, [pc, #84]	; (8005b48 <HAL_PWREx_ConfigSupply+0x6c>)
 8005af2:	68db      	ldr	r3, [r3, #12]
 8005af4:	f003 0307 	and.w	r3, r3, #7
 8005af8:	687a      	ldr	r2, [r7, #4]
 8005afa:	429a      	cmp	r2, r3
 8005afc:	d001      	beq.n	8005b02 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new regulator config */
      return HAL_ERROR;
 8005afe:	2301      	movs	r3, #1
 8005b00:	e01d      	b.n	8005b3e <HAL_PWREx_ConfigSupply+0x62>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG(PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8005b02:	4b11      	ldr	r3, [pc, #68]	; (8005b48 <HAL_PWREx_ConfigSupply+0x6c>)
 8005b04:	68db      	ldr	r3, [r3, #12]
 8005b06:	f023 0207 	bic.w	r2, r3, #7
 8005b0a:	490f      	ldr	r1, [pc, #60]	; (8005b48 <HAL_PWREx_ConfigSupply+0x6c>)
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	4313      	orrs	r3, r2
 8005b10:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005b12:	f7fc fff9 	bl	8002b08 <HAL_GetTick>
 8005b16:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ACTVOSRDY))
 8005b18:	e009      	b.n	8005b2e <HAL_PWREx_ConfigSupply+0x52>
  {
    if((HAL_GetTick() - tickstart ) > PWR_FLAG_SETTING_DELAY_US)
 8005b1a:	f7fc fff5 	bl	8002b08 <HAL_GetTick>
 8005b1e:	4602      	mov	r2, r0
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	1ad3      	subs	r3, r2, r3
 8005b24:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005b28:	d901      	bls.n	8005b2e <HAL_PWREx_ConfigSupply+0x52>
    {
      return HAL_TIMEOUT;
 8005b2a:	2303      	movs	r3, #3
 8005b2c:	e007      	b.n	8005b3e <HAL_PWREx_ConfigSupply+0x62>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ACTVOSRDY))
 8005b2e:	4b06      	ldr	r3, [pc, #24]	; (8005b48 <HAL_PWREx_ConfigSupply+0x6c>)
 8005b30:	685b      	ldr	r3, [r3, #4]
 8005b32:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005b36:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b3a:	d1ee      	bne.n	8005b1a <HAL_PWREx_ConfigSupply+0x3e>
    }
  }

  return HAL_OK;
 8005b3c:	2300      	movs	r3, #0
}
 8005b3e:	4618      	mov	r0, r3
 8005b40:	3710      	adds	r7, #16
 8005b42:	46bd      	mov	sp, r7
 8005b44:	bd80      	pop	{r7, pc}
 8005b46:	bf00      	nop
 8005b48:	58024800 	.word	0x58024800

08005b4c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005b4c:	b580      	push	{r7, lr}
 8005b4e:	b08a      	sub	sp, #40	; 0x28
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d101      	bne.n	8005b5e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005b5a:	2301      	movs	r3, #1
 8005b5c:	e3a4      	b.n	80062a8 <HAL_RCC_OscConfig+0x75c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	f003 0301 	and.w	r3, r3, #1
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	f000 8087 	beq.w	8005c7a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005b6c:	4b9a      	ldr	r3, [pc, #616]	; (8005dd8 <HAL_RCC_OscConfig+0x28c>)
 8005b6e:	691b      	ldr	r3, [r3, #16]
 8005b70:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005b74:	627b      	str	r3, [r7, #36]	; 0x24
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005b76:	4b98      	ldr	r3, [pc, #608]	; (8005dd8 <HAL_RCC_OscConfig+0x28c>)
 8005b78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b7a:	623b      	str	r3, [r7, #32]
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8005b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b7e:	2b10      	cmp	r3, #16
 8005b80:	d007      	beq.n	8005b92 <HAL_RCC_OscConfig+0x46>
 8005b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b84:	2b18      	cmp	r3, #24
 8005b86:	d110      	bne.n	8005baa <HAL_RCC_OscConfig+0x5e>
 8005b88:	6a3b      	ldr	r3, [r7, #32]
 8005b8a:	f003 0303 	and.w	r3, r3, #3
 8005b8e:	2b02      	cmp	r3, #2
 8005b90:	d10b      	bne.n	8005baa <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005b92:	4b91      	ldr	r3, [pc, #580]	; (8005dd8 <HAL_RCC_OscConfig+0x28c>)
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d06c      	beq.n	8005c78 <HAL_RCC_OscConfig+0x12c>
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	685b      	ldr	r3, [r3, #4]
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d168      	bne.n	8005c78 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005ba6:	2301      	movs	r3, #1
 8005ba8:	e37e      	b.n	80062a8 <HAL_RCC_OscConfig+0x75c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	685b      	ldr	r3, [r3, #4]
 8005bae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005bb2:	d106      	bne.n	8005bc2 <HAL_RCC_OscConfig+0x76>
 8005bb4:	4b88      	ldr	r3, [pc, #544]	; (8005dd8 <HAL_RCC_OscConfig+0x28c>)
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	4a87      	ldr	r2, [pc, #540]	; (8005dd8 <HAL_RCC_OscConfig+0x28c>)
 8005bba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005bbe:	6013      	str	r3, [r2, #0]
 8005bc0:	e02e      	b.n	8005c20 <HAL_RCC_OscConfig+0xd4>
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	685b      	ldr	r3, [r3, #4]
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d10c      	bne.n	8005be4 <HAL_RCC_OscConfig+0x98>
 8005bca:	4b83      	ldr	r3, [pc, #524]	; (8005dd8 <HAL_RCC_OscConfig+0x28c>)
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	4a82      	ldr	r2, [pc, #520]	; (8005dd8 <HAL_RCC_OscConfig+0x28c>)
 8005bd0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005bd4:	6013      	str	r3, [r2, #0]
 8005bd6:	4b80      	ldr	r3, [pc, #512]	; (8005dd8 <HAL_RCC_OscConfig+0x28c>)
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	4a7f      	ldr	r2, [pc, #508]	; (8005dd8 <HAL_RCC_OscConfig+0x28c>)
 8005bdc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005be0:	6013      	str	r3, [r2, #0]
 8005be2:	e01d      	b.n	8005c20 <HAL_RCC_OscConfig+0xd4>
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	685b      	ldr	r3, [r3, #4]
 8005be8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005bec:	d10c      	bne.n	8005c08 <HAL_RCC_OscConfig+0xbc>
 8005bee:	4b7a      	ldr	r3, [pc, #488]	; (8005dd8 <HAL_RCC_OscConfig+0x28c>)
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	4a79      	ldr	r2, [pc, #484]	; (8005dd8 <HAL_RCC_OscConfig+0x28c>)
 8005bf4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005bf8:	6013      	str	r3, [r2, #0]
 8005bfa:	4b77      	ldr	r3, [pc, #476]	; (8005dd8 <HAL_RCC_OscConfig+0x28c>)
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	4a76      	ldr	r2, [pc, #472]	; (8005dd8 <HAL_RCC_OscConfig+0x28c>)
 8005c00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005c04:	6013      	str	r3, [r2, #0]
 8005c06:	e00b      	b.n	8005c20 <HAL_RCC_OscConfig+0xd4>
 8005c08:	4b73      	ldr	r3, [pc, #460]	; (8005dd8 <HAL_RCC_OscConfig+0x28c>)
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	4a72      	ldr	r2, [pc, #456]	; (8005dd8 <HAL_RCC_OscConfig+0x28c>)
 8005c0e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005c12:	6013      	str	r3, [r2, #0]
 8005c14:	4b70      	ldr	r3, [pc, #448]	; (8005dd8 <HAL_RCC_OscConfig+0x28c>)
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	4a6f      	ldr	r2, [pc, #444]	; (8005dd8 <HAL_RCC_OscConfig+0x28c>)
 8005c1a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005c1e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	685b      	ldr	r3, [r3, #4]
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d013      	beq.n	8005c50 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c28:	f7fc ff6e 	bl	8002b08 <HAL_GetTick>
 8005c2c:	61f8      	str	r0, [r7, #28]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005c2e:	e008      	b.n	8005c42 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005c30:	f7fc ff6a 	bl	8002b08 <HAL_GetTick>
 8005c34:	4602      	mov	r2, r0
 8005c36:	69fb      	ldr	r3, [r7, #28]
 8005c38:	1ad3      	subs	r3, r2, r3
 8005c3a:	2b64      	cmp	r3, #100	; 0x64
 8005c3c:	d901      	bls.n	8005c42 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005c3e:	2303      	movs	r3, #3
 8005c40:	e332      	b.n	80062a8 <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005c42:	4b65      	ldr	r3, [pc, #404]	; (8005dd8 <HAL_RCC_OscConfig+0x28c>)
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d0f0      	beq.n	8005c30 <HAL_RCC_OscConfig+0xe4>
 8005c4e:	e014      	b.n	8005c7a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c50:	f7fc ff5a 	bl	8002b08 <HAL_GetTick>
 8005c54:	61f8      	str	r0, [r7, #28]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005c56:	e008      	b.n	8005c6a <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005c58:	f7fc ff56 	bl	8002b08 <HAL_GetTick>
 8005c5c:	4602      	mov	r2, r0
 8005c5e:	69fb      	ldr	r3, [r7, #28]
 8005c60:	1ad3      	subs	r3, r2, r3
 8005c62:	2b64      	cmp	r3, #100	; 0x64
 8005c64:	d901      	bls.n	8005c6a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005c66:	2303      	movs	r3, #3
 8005c68:	e31e      	b.n	80062a8 <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005c6a:	4b5b      	ldr	r3, [pc, #364]	; (8005dd8 <HAL_RCC_OscConfig+0x28c>)
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d1f0      	bne.n	8005c58 <HAL_RCC_OscConfig+0x10c>
 8005c76:	e000      	b.n	8005c7a <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005c78:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	f003 0302 	and.w	r3, r3, #2
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	f000 80b0 	beq.w	8005de8 <HAL_RCC_OscConfig+0x29c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005c88:	4b53      	ldr	r3, [pc, #332]	; (8005dd8 <HAL_RCC_OscConfig+0x28c>)
 8005c8a:	691b      	ldr	r3, [r3, #16]
 8005c8c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005c90:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005c92:	4b51      	ldr	r3, [pc, #324]	; (8005dd8 <HAL_RCC_OscConfig+0x28c>)
 8005c94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c96:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8005c98:	69bb      	ldr	r3, [r7, #24]
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d007      	beq.n	8005cae <HAL_RCC_OscConfig+0x162>
 8005c9e:	69bb      	ldr	r3, [r7, #24]
 8005ca0:	2b18      	cmp	r3, #24
 8005ca2:	d149      	bne.n	8005d38 <HAL_RCC_OscConfig+0x1ec>
 8005ca4:	697b      	ldr	r3, [r7, #20]
 8005ca6:	f003 0303 	and.w	r3, r3, #3
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d144      	bne.n	8005d38 <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005cae:	4b4a      	ldr	r3, [pc, #296]	; (8005dd8 <HAL_RCC_OscConfig+0x28c>)
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	f003 0304 	and.w	r3, r3, #4
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d005      	beq.n	8005cc6 <HAL_RCC_OscConfig+0x17a>
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	68db      	ldr	r3, [r3, #12]
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d101      	bne.n	8005cc6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8005cc2:	2301      	movs	r3, #1
 8005cc4:	e2f0      	b.n	80062a8 <HAL_RCC_OscConfig+0x75c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
      /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005cc6:	4b44      	ldr	r3, [pc, #272]	; (8005dd8 <HAL_RCC_OscConfig+0x28c>)
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	f023 0219 	bic.w	r2, r3, #25
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	68db      	ldr	r3, [r3, #12]
 8005cd2:	4941      	ldr	r1, [pc, #260]	; (8005dd8 <HAL_RCC_OscConfig+0x28c>)
 8005cd4:	4313      	orrs	r3, r2
 8005cd6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005cd8:	f7fc ff16 	bl	8002b08 <HAL_GetTick>
 8005cdc:	61f8      	str	r0, [r7, #28]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005cde:	e008      	b.n	8005cf2 <HAL_RCC_OscConfig+0x1a6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005ce0:	f7fc ff12 	bl	8002b08 <HAL_GetTick>
 8005ce4:	4602      	mov	r2, r0
 8005ce6:	69fb      	ldr	r3, [r7, #28]
 8005ce8:	1ad3      	subs	r3, r2, r3
 8005cea:	2b02      	cmp	r3, #2
 8005cec:	d901      	bls.n	8005cf2 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8005cee:	2303      	movs	r3, #3
 8005cf0:	e2da      	b.n	80062a8 <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005cf2:	4b39      	ldr	r3, [pc, #228]	; (8005dd8 <HAL_RCC_OscConfig+0x28c>)
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	f003 0304 	and.w	r3, r3, #4
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d0f0      	beq.n	8005ce0 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005cfe:	f7fc ff31 	bl	8002b64 <HAL_GetREVID>
 8005d02:	4602      	mov	r2, r0
 8005d04:	f241 0303 	movw	r3, #4099	; 0x1003
 8005d08:	429a      	cmp	r2, r3
 8005d0a:	d80a      	bhi.n	8005d22 <HAL_RCC_OscConfig+0x1d6>
 8005d0c:	4b32      	ldr	r3, [pc, #200]	; (8005dd8 <HAL_RCC_OscConfig+0x28c>)
 8005d0e:	685b      	ldr	r3, [r3, #4]
 8005d10:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	691b      	ldr	r3, [r3, #16]
 8005d18:	031b      	lsls	r3, r3, #12
 8005d1a:	492f      	ldr	r1, [pc, #188]	; (8005dd8 <HAL_RCC_OscConfig+0x28c>)
 8005d1c:	4313      	orrs	r3, r2
 8005d1e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005d20:	e062      	b.n	8005de8 <HAL_RCC_OscConfig+0x29c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005d22:	4b2d      	ldr	r3, [pc, #180]	; (8005dd8 <HAL_RCC_OscConfig+0x28c>)
 8005d24:	685b      	ldr	r3, [r3, #4]
 8005d26:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	691b      	ldr	r3, [r3, #16]
 8005d2e:	061b      	lsls	r3, r3, #24
 8005d30:	4929      	ldr	r1, [pc, #164]	; (8005dd8 <HAL_RCC_OscConfig+0x28c>)
 8005d32:	4313      	orrs	r3, r2
 8005d34:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005d36:	e057      	b.n	8005de8 <HAL_RCC_OscConfig+0x29c>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	68db      	ldr	r3, [r3, #12]
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d038      	beq.n	8005db2 <HAL_RCC_OscConfig+0x266>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005d40:	4b25      	ldr	r3, [pc, #148]	; (8005dd8 <HAL_RCC_OscConfig+0x28c>)
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	f023 0219 	bic.w	r2, r3, #25
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	68db      	ldr	r3, [r3, #12]
 8005d4c:	4922      	ldr	r1, [pc, #136]	; (8005dd8 <HAL_RCC_OscConfig+0x28c>)
 8005d4e:	4313      	orrs	r3, r2
 8005d50:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d52:	f7fc fed9 	bl	8002b08 <HAL_GetTick>
 8005d56:	61f8      	str	r0, [r7, #28]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005d58:	e008      	b.n	8005d6c <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005d5a:	f7fc fed5 	bl	8002b08 <HAL_GetTick>
 8005d5e:	4602      	mov	r2, r0
 8005d60:	69fb      	ldr	r3, [r7, #28]
 8005d62:	1ad3      	subs	r3, r2, r3
 8005d64:	2b02      	cmp	r3, #2
 8005d66:	d901      	bls.n	8005d6c <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 8005d68:	2303      	movs	r3, #3
 8005d6a:	e29d      	b.n	80062a8 <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005d6c:	4b1a      	ldr	r3, [pc, #104]	; (8005dd8 <HAL_RCC_OscConfig+0x28c>)
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	f003 0304 	and.w	r3, r3, #4
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d0f0      	beq.n	8005d5a <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005d78:	f7fc fef4 	bl	8002b64 <HAL_GetREVID>
 8005d7c:	4602      	mov	r2, r0
 8005d7e:	f241 0303 	movw	r3, #4099	; 0x1003
 8005d82:	429a      	cmp	r2, r3
 8005d84:	d80a      	bhi.n	8005d9c <HAL_RCC_OscConfig+0x250>
 8005d86:	4b14      	ldr	r3, [pc, #80]	; (8005dd8 <HAL_RCC_OscConfig+0x28c>)
 8005d88:	685b      	ldr	r3, [r3, #4]
 8005d8a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	691b      	ldr	r3, [r3, #16]
 8005d92:	031b      	lsls	r3, r3, #12
 8005d94:	4910      	ldr	r1, [pc, #64]	; (8005dd8 <HAL_RCC_OscConfig+0x28c>)
 8005d96:	4313      	orrs	r3, r2
 8005d98:	604b      	str	r3, [r1, #4]
 8005d9a:	e025      	b.n	8005de8 <HAL_RCC_OscConfig+0x29c>
 8005d9c:	4b0e      	ldr	r3, [pc, #56]	; (8005dd8 <HAL_RCC_OscConfig+0x28c>)
 8005d9e:	685b      	ldr	r3, [r3, #4]
 8005da0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	691b      	ldr	r3, [r3, #16]
 8005da8:	061b      	lsls	r3, r3, #24
 8005daa:	490b      	ldr	r1, [pc, #44]	; (8005dd8 <HAL_RCC_OscConfig+0x28c>)
 8005dac:	4313      	orrs	r3, r2
 8005dae:	604b      	str	r3, [r1, #4]
 8005db0:	e01a      	b.n	8005de8 <HAL_RCC_OscConfig+0x29c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005db2:	4b09      	ldr	r3, [pc, #36]	; (8005dd8 <HAL_RCC_OscConfig+0x28c>)
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	4a08      	ldr	r2, [pc, #32]	; (8005dd8 <HAL_RCC_OscConfig+0x28c>)
 8005db8:	f023 0301 	bic.w	r3, r3, #1
 8005dbc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005dbe:	f7fc fea3 	bl	8002b08 <HAL_GetTick>
 8005dc2:	61f8      	str	r0, [r7, #28]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005dc4:	e00a      	b.n	8005ddc <HAL_RCC_OscConfig+0x290>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005dc6:	f7fc fe9f 	bl	8002b08 <HAL_GetTick>
 8005dca:	4602      	mov	r2, r0
 8005dcc:	69fb      	ldr	r3, [r7, #28]
 8005dce:	1ad3      	subs	r3, r2, r3
 8005dd0:	2b02      	cmp	r3, #2
 8005dd2:	d903      	bls.n	8005ddc <HAL_RCC_OscConfig+0x290>
          {
            return HAL_TIMEOUT;
 8005dd4:	2303      	movs	r3, #3
 8005dd6:	e267      	b.n	80062a8 <HAL_RCC_OscConfig+0x75c>
 8005dd8:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005ddc:	4ba0      	ldr	r3, [pc, #640]	; (8006060 <HAL_RCC_OscConfig+0x514>)
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	f003 0304 	and.w	r3, r3, #4
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d1ee      	bne.n	8005dc6 <HAL_RCC_OscConfig+0x27a>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	f003 0310 	and.w	r3, r3, #16
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	f000 808f 	beq.w	8005f14 <HAL_RCC_OscConfig+0x3c8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005df6:	4b9a      	ldr	r3, [pc, #616]	; (8006060 <HAL_RCC_OscConfig+0x514>)
 8005df8:	691b      	ldr	r3, [r3, #16]
 8005dfa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005dfe:	613b      	str	r3, [r7, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005e00:	4b97      	ldr	r3, [pc, #604]	; (8006060 <HAL_RCC_OscConfig+0x514>)
 8005e02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e04:	60fb      	str	r3, [r7, #12]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8005e06:	693b      	ldr	r3, [r7, #16]
 8005e08:	2b08      	cmp	r3, #8
 8005e0a:	d007      	beq.n	8005e1c <HAL_RCC_OscConfig+0x2d0>
 8005e0c:	693b      	ldr	r3, [r7, #16]
 8005e0e:	2b18      	cmp	r3, #24
 8005e10:	d12d      	bne.n	8005e6e <HAL_RCC_OscConfig+0x322>
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	f003 0303 	and.w	r3, r3, #3
 8005e18:	2b01      	cmp	r3, #1
 8005e1a:	d128      	bne.n	8005e6e <HAL_RCC_OscConfig+0x322>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005e1c:	4b90      	ldr	r3, [pc, #576]	; (8006060 <HAL_RCC_OscConfig+0x514>)
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d005      	beq.n	8005e34 <HAL_RCC_OscConfig+0x2e8>
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	69db      	ldr	r3, [r3, #28]
 8005e2c:	2b80      	cmp	r3, #128	; 0x80
 8005e2e:	d001      	beq.n	8005e34 <HAL_RCC_OscConfig+0x2e8>
      {
        return HAL_ERROR;
 8005e30:	2301      	movs	r3, #1
 8005e32:	e239      	b.n	80062a8 <HAL_RCC_OscConfig+0x75c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005e34:	f7fc fe96 	bl	8002b64 <HAL_GetREVID>
 8005e38:	4602      	mov	r2, r0
 8005e3a:	f241 0303 	movw	r3, #4099	; 0x1003
 8005e3e:	429a      	cmp	r2, r3
 8005e40:	d80a      	bhi.n	8005e58 <HAL_RCC_OscConfig+0x30c>
 8005e42:	4b87      	ldr	r3, [pc, #540]	; (8006060 <HAL_RCC_OscConfig+0x514>)
 8005e44:	685b      	ldr	r3, [r3, #4]
 8005e46:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	6a1b      	ldr	r3, [r3, #32]
 8005e4e:	069b      	lsls	r3, r3, #26
 8005e50:	4983      	ldr	r1, [pc, #524]	; (8006060 <HAL_RCC_OscConfig+0x514>)
 8005e52:	4313      	orrs	r3, r2
 8005e54:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005e56:	e05d      	b.n	8005f14 <HAL_RCC_OscConfig+0x3c8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005e58:	4b81      	ldr	r3, [pc, #516]	; (8006060 <HAL_RCC_OscConfig+0x514>)
 8005e5a:	68db      	ldr	r3, [r3, #12]
 8005e5c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	6a1b      	ldr	r3, [r3, #32]
 8005e64:	061b      	lsls	r3, r3, #24
 8005e66:	497e      	ldr	r1, [pc, #504]	; (8006060 <HAL_RCC_OscConfig+0x514>)
 8005e68:	4313      	orrs	r3, r2
 8005e6a:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005e6c:	e052      	b.n	8005f14 <HAL_RCC_OscConfig+0x3c8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	69db      	ldr	r3, [r3, #28]
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d035      	beq.n	8005ee2 <HAL_RCC_OscConfig+0x396>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8005e76:	4b7a      	ldr	r3, [pc, #488]	; (8006060 <HAL_RCC_OscConfig+0x514>)
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	4a79      	ldr	r2, [pc, #484]	; (8006060 <HAL_RCC_OscConfig+0x514>)
 8005e7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e80:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e82:	f7fc fe41 	bl	8002b08 <HAL_GetTick>
 8005e86:	61f8      	str	r0, [r7, #28]

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005e88:	e008      	b.n	8005e9c <HAL_RCC_OscConfig+0x350>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8005e8a:	f7fc fe3d 	bl	8002b08 <HAL_GetTick>
 8005e8e:	4602      	mov	r2, r0
 8005e90:	69fb      	ldr	r3, [r7, #28]
 8005e92:	1ad3      	subs	r3, r2, r3
 8005e94:	2b02      	cmp	r3, #2
 8005e96:	d901      	bls.n	8005e9c <HAL_RCC_OscConfig+0x350>
          {
            return HAL_TIMEOUT;
 8005e98:	2303      	movs	r3, #3
 8005e9a:	e205      	b.n	80062a8 <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005e9c:	4b70      	ldr	r3, [pc, #448]	; (8006060 <HAL_RCC_OscConfig+0x514>)
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d0f0      	beq.n	8005e8a <HAL_RCC_OscConfig+0x33e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005ea8:	f7fc fe5c 	bl	8002b64 <HAL_GetREVID>
 8005eac:	4602      	mov	r2, r0
 8005eae:	f241 0303 	movw	r3, #4099	; 0x1003
 8005eb2:	429a      	cmp	r2, r3
 8005eb4:	d80a      	bhi.n	8005ecc <HAL_RCC_OscConfig+0x380>
 8005eb6:	4b6a      	ldr	r3, [pc, #424]	; (8006060 <HAL_RCC_OscConfig+0x514>)
 8005eb8:	685b      	ldr	r3, [r3, #4]
 8005eba:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	6a1b      	ldr	r3, [r3, #32]
 8005ec2:	069b      	lsls	r3, r3, #26
 8005ec4:	4966      	ldr	r1, [pc, #408]	; (8006060 <HAL_RCC_OscConfig+0x514>)
 8005ec6:	4313      	orrs	r3, r2
 8005ec8:	604b      	str	r3, [r1, #4]
 8005eca:	e023      	b.n	8005f14 <HAL_RCC_OscConfig+0x3c8>
 8005ecc:	4b64      	ldr	r3, [pc, #400]	; (8006060 <HAL_RCC_OscConfig+0x514>)
 8005ece:	68db      	ldr	r3, [r3, #12]
 8005ed0:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	6a1b      	ldr	r3, [r3, #32]
 8005ed8:	061b      	lsls	r3, r3, #24
 8005eda:	4961      	ldr	r1, [pc, #388]	; (8006060 <HAL_RCC_OscConfig+0x514>)
 8005edc:	4313      	orrs	r3, r2
 8005ede:	60cb      	str	r3, [r1, #12]
 8005ee0:	e018      	b.n	8005f14 <HAL_RCC_OscConfig+0x3c8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8005ee2:	4b5f      	ldr	r3, [pc, #380]	; (8006060 <HAL_RCC_OscConfig+0x514>)
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	4a5e      	ldr	r2, [pc, #376]	; (8006060 <HAL_RCC_OscConfig+0x514>)
 8005ee8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005eec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005eee:	f7fc fe0b 	bl	8002b08 <HAL_GetTick>
 8005ef2:	61f8      	str	r0, [r7, #28]

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005ef4:	e008      	b.n	8005f08 <HAL_RCC_OscConfig+0x3bc>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8005ef6:	f7fc fe07 	bl	8002b08 <HAL_GetTick>
 8005efa:	4602      	mov	r2, r0
 8005efc:	69fb      	ldr	r3, [r7, #28]
 8005efe:	1ad3      	subs	r3, r2, r3
 8005f00:	2b02      	cmp	r3, #2
 8005f02:	d901      	bls.n	8005f08 <HAL_RCC_OscConfig+0x3bc>
          {
            return HAL_TIMEOUT;
 8005f04:	2303      	movs	r3, #3
 8005f06:	e1cf      	b.n	80062a8 <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005f08:	4b55      	ldr	r3, [pc, #340]	; (8006060 <HAL_RCC_OscConfig+0x514>)
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d1f0      	bne.n	8005ef6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	f003 0308 	and.w	r3, r3, #8
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d036      	beq.n	8005f8e <HAL_RCC_OscConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	695b      	ldr	r3, [r3, #20]
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d019      	beq.n	8005f5c <HAL_RCC_OscConfig+0x410>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005f28:	4b4d      	ldr	r3, [pc, #308]	; (8006060 <HAL_RCC_OscConfig+0x514>)
 8005f2a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f2c:	4a4c      	ldr	r2, [pc, #304]	; (8006060 <HAL_RCC_OscConfig+0x514>)
 8005f2e:	f043 0301 	orr.w	r3, r3, #1
 8005f32:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f34:	f7fc fde8 	bl	8002b08 <HAL_GetTick>
 8005f38:	61f8      	str	r0, [r7, #28]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005f3a:	e008      	b.n	8005f4e <HAL_RCC_OscConfig+0x402>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005f3c:	f7fc fde4 	bl	8002b08 <HAL_GetTick>
 8005f40:	4602      	mov	r2, r0
 8005f42:	69fb      	ldr	r3, [r7, #28]
 8005f44:	1ad3      	subs	r3, r2, r3
 8005f46:	2b02      	cmp	r3, #2
 8005f48:	d901      	bls.n	8005f4e <HAL_RCC_OscConfig+0x402>
        {
          return HAL_TIMEOUT;
 8005f4a:	2303      	movs	r3, #3
 8005f4c:	e1ac      	b.n	80062a8 <HAL_RCC_OscConfig+0x75c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005f4e:	4b44      	ldr	r3, [pc, #272]	; (8006060 <HAL_RCC_OscConfig+0x514>)
 8005f50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f52:	f003 0302 	and.w	r3, r3, #2
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d0f0      	beq.n	8005f3c <HAL_RCC_OscConfig+0x3f0>
 8005f5a:	e018      	b.n	8005f8e <HAL_RCC_OscConfig+0x442>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005f5c:	4b40      	ldr	r3, [pc, #256]	; (8006060 <HAL_RCC_OscConfig+0x514>)
 8005f5e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f60:	4a3f      	ldr	r2, [pc, #252]	; (8006060 <HAL_RCC_OscConfig+0x514>)
 8005f62:	f023 0301 	bic.w	r3, r3, #1
 8005f66:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f68:	f7fc fdce 	bl	8002b08 <HAL_GetTick>
 8005f6c:	61f8      	str	r0, [r7, #28]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005f6e:	e008      	b.n	8005f82 <HAL_RCC_OscConfig+0x436>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005f70:	f7fc fdca 	bl	8002b08 <HAL_GetTick>
 8005f74:	4602      	mov	r2, r0
 8005f76:	69fb      	ldr	r3, [r7, #28]
 8005f78:	1ad3      	subs	r3, r2, r3
 8005f7a:	2b02      	cmp	r3, #2
 8005f7c:	d901      	bls.n	8005f82 <HAL_RCC_OscConfig+0x436>
        {
          return HAL_TIMEOUT;
 8005f7e:	2303      	movs	r3, #3
 8005f80:	e192      	b.n	80062a8 <HAL_RCC_OscConfig+0x75c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005f82:	4b37      	ldr	r3, [pc, #220]	; (8006060 <HAL_RCC_OscConfig+0x514>)
 8005f84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f86:	f003 0302 	and.w	r3, r3, #2
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d1f0      	bne.n	8005f70 <HAL_RCC_OscConfig+0x424>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	f003 0320 	and.w	r3, r3, #32
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d036      	beq.n	8006008 <HAL_RCC_OscConfig+0x4bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	699b      	ldr	r3, [r3, #24]
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d019      	beq.n	8005fd6 <HAL_RCC_OscConfig+0x48a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005fa2:	4b2f      	ldr	r3, [pc, #188]	; (8006060 <HAL_RCC_OscConfig+0x514>)
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	4a2e      	ldr	r2, [pc, #184]	; (8006060 <HAL_RCC_OscConfig+0x514>)
 8005fa8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005fac:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005fae:	f7fc fdab 	bl	8002b08 <HAL_GetTick>
 8005fb2:	61f8      	str	r0, [r7, #28]

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005fb4:	e008      	b.n	8005fc8 <HAL_RCC_OscConfig+0x47c>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8005fb6:	f7fc fda7 	bl	8002b08 <HAL_GetTick>
 8005fba:	4602      	mov	r2, r0
 8005fbc:	69fb      	ldr	r3, [r7, #28]
 8005fbe:	1ad3      	subs	r3, r2, r3
 8005fc0:	2b02      	cmp	r3, #2
 8005fc2:	d901      	bls.n	8005fc8 <HAL_RCC_OscConfig+0x47c>
        {
          return HAL_TIMEOUT;
 8005fc4:	2303      	movs	r3, #3
 8005fc6:	e16f      	b.n	80062a8 <HAL_RCC_OscConfig+0x75c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005fc8:	4b25      	ldr	r3, [pc, #148]	; (8006060 <HAL_RCC_OscConfig+0x514>)
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d0f0      	beq.n	8005fb6 <HAL_RCC_OscConfig+0x46a>
 8005fd4:	e018      	b.n	8006008 <HAL_RCC_OscConfig+0x4bc>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005fd6:	4b22      	ldr	r3, [pc, #136]	; (8006060 <HAL_RCC_OscConfig+0x514>)
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	4a21      	ldr	r2, [pc, #132]	; (8006060 <HAL_RCC_OscConfig+0x514>)
 8005fdc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005fe0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005fe2:	f7fc fd91 	bl	8002b08 <HAL_GetTick>
 8005fe6:	61f8      	str	r0, [r7, #28]

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005fe8:	e008      	b.n	8005ffc <HAL_RCC_OscConfig+0x4b0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8005fea:	f7fc fd8d 	bl	8002b08 <HAL_GetTick>
 8005fee:	4602      	mov	r2, r0
 8005ff0:	69fb      	ldr	r3, [r7, #28]
 8005ff2:	1ad3      	subs	r3, r2, r3
 8005ff4:	2b02      	cmp	r3, #2
 8005ff6:	d901      	bls.n	8005ffc <HAL_RCC_OscConfig+0x4b0>
        {
          return HAL_TIMEOUT;
 8005ff8:	2303      	movs	r3, #3
 8005ffa:	e155      	b.n	80062a8 <HAL_RCC_OscConfig+0x75c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005ffc:	4b18      	ldr	r3, [pc, #96]	; (8006060 <HAL_RCC_OscConfig+0x514>)
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006004:	2b00      	cmp	r3, #0
 8006006:	d1f0      	bne.n	8005fea <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	f003 0304 	and.w	r3, r3, #4
 8006010:	2b00      	cmp	r3, #0
 8006012:	f000 8086 	beq.w	8006122 <HAL_RCC_OscConfig+0x5d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006016:	4b13      	ldr	r3, [pc, #76]	; (8006064 <HAL_RCC_OscConfig+0x518>)
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	4a12      	ldr	r2, [pc, #72]	; (8006064 <HAL_RCC_OscConfig+0x518>)
 800601c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006020:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006022:	f7fc fd71 	bl	8002b08 <HAL_GetTick>
 8006026:	61f8      	str	r0, [r7, #28]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006028:	e008      	b.n	800603c <HAL_RCC_OscConfig+0x4f0>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800602a:	f7fc fd6d 	bl	8002b08 <HAL_GetTick>
 800602e:	4602      	mov	r2, r0
 8006030:	69fb      	ldr	r3, [r7, #28]
 8006032:	1ad3      	subs	r3, r2, r3
 8006034:	2b64      	cmp	r3, #100	; 0x64
 8006036:	d901      	bls.n	800603c <HAL_RCC_OscConfig+0x4f0>
      {
        return HAL_TIMEOUT;
 8006038:	2303      	movs	r3, #3
 800603a:	e135      	b.n	80062a8 <HAL_RCC_OscConfig+0x75c>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800603c:	4b09      	ldr	r3, [pc, #36]	; (8006064 <HAL_RCC_OscConfig+0x518>)
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006044:	2b00      	cmp	r3, #0
 8006046:	d0f0      	beq.n	800602a <HAL_RCC_OscConfig+0x4de>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	689b      	ldr	r3, [r3, #8]
 800604c:	2b01      	cmp	r3, #1
 800604e:	d10b      	bne.n	8006068 <HAL_RCC_OscConfig+0x51c>
 8006050:	4b03      	ldr	r3, [pc, #12]	; (8006060 <HAL_RCC_OscConfig+0x514>)
 8006052:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006054:	4a02      	ldr	r2, [pc, #8]	; (8006060 <HAL_RCC_OscConfig+0x514>)
 8006056:	f043 0301 	orr.w	r3, r3, #1
 800605a:	6713      	str	r3, [r2, #112]	; 0x70
 800605c:	e032      	b.n	80060c4 <HAL_RCC_OscConfig+0x578>
 800605e:	bf00      	nop
 8006060:	58024400 	.word	0x58024400
 8006064:	58024800 	.word	0x58024800
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	689b      	ldr	r3, [r3, #8]
 800606c:	2b00      	cmp	r3, #0
 800606e:	d10c      	bne.n	800608a <HAL_RCC_OscConfig+0x53e>
 8006070:	4b8f      	ldr	r3, [pc, #572]	; (80062b0 <HAL_RCC_OscConfig+0x764>)
 8006072:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006074:	4a8e      	ldr	r2, [pc, #568]	; (80062b0 <HAL_RCC_OscConfig+0x764>)
 8006076:	f023 0301 	bic.w	r3, r3, #1
 800607a:	6713      	str	r3, [r2, #112]	; 0x70
 800607c:	4b8c      	ldr	r3, [pc, #560]	; (80062b0 <HAL_RCC_OscConfig+0x764>)
 800607e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006080:	4a8b      	ldr	r2, [pc, #556]	; (80062b0 <HAL_RCC_OscConfig+0x764>)
 8006082:	f023 0304 	bic.w	r3, r3, #4
 8006086:	6713      	str	r3, [r2, #112]	; 0x70
 8006088:	e01c      	b.n	80060c4 <HAL_RCC_OscConfig+0x578>
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	689b      	ldr	r3, [r3, #8]
 800608e:	2b05      	cmp	r3, #5
 8006090:	d10c      	bne.n	80060ac <HAL_RCC_OscConfig+0x560>
 8006092:	4b87      	ldr	r3, [pc, #540]	; (80062b0 <HAL_RCC_OscConfig+0x764>)
 8006094:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006096:	4a86      	ldr	r2, [pc, #536]	; (80062b0 <HAL_RCC_OscConfig+0x764>)
 8006098:	f043 0304 	orr.w	r3, r3, #4
 800609c:	6713      	str	r3, [r2, #112]	; 0x70
 800609e:	4b84      	ldr	r3, [pc, #528]	; (80062b0 <HAL_RCC_OscConfig+0x764>)
 80060a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060a2:	4a83      	ldr	r2, [pc, #524]	; (80062b0 <HAL_RCC_OscConfig+0x764>)
 80060a4:	f043 0301 	orr.w	r3, r3, #1
 80060a8:	6713      	str	r3, [r2, #112]	; 0x70
 80060aa:	e00b      	b.n	80060c4 <HAL_RCC_OscConfig+0x578>
 80060ac:	4b80      	ldr	r3, [pc, #512]	; (80062b0 <HAL_RCC_OscConfig+0x764>)
 80060ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060b0:	4a7f      	ldr	r2, [pc, #508]	; (80062b0 <HAL_RCC_OscConfig+0x764>)
 80060b2:	f023 0301 	bic.w	r3, r3, #1
 80060b6:	6713      	str	r3, [r2, #112]	; 0x70
 80060b8:	4b7d      	ldr	r3, [pc, #500]	; (80062b0 <HAL_RCC_OscConfig+0x764>)
 80060ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060bc:	4a7c      	ldr	r2, [pc, #496]	; (80062b0 <HAL_RCC_OscConfig+0x764>)
 80060be:	f023 0304 	bic.w	r3, r3, #4
 80060c2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	689b      	ldr	r3, [r3, #8]
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d015      	beq.n	80060f8 <HAL_RCC_OscConfig+0x5ac>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80060cc:	f7fc fd1c 	bl	8002b08 <HAL_GetTick>
 80060d0:	61f8      	str	r0, [r7, #28]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80060d2:	e00a      	b.n	80060ea <HAL_RCC_OscConfig+0x59e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80060d4:	f7fc fd18 	bl	8002b08 <HAL_GetTick>
 80060d8:	4602      	mov	r2, r0
 80060da:	69fb      	ldr	r3, [r7, #28]
 80060dc:	1ad3      	subs	r3, r2, r3
 80060de:	f241 3288 	movw	r2, #5000	; 0x1388
 80060e2:	4293      	cmp	r3, r2
 80060e4:	d901      	bls.n	80060ea <HAL_RCC_OscConfig+0x59e>
        {
          return HAL_TIMEOUT;
 80060e6:	2303      	movs	r3, #3
 80060e8:	e0de      	b.n	80062a8 <HAL_RCC_OscConfig+0x75c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80060ea:	4b71      	ldr	r3, [pc, #452]	; (80062b0 <HAL_RCC_OscConfig+0x764>)
 80060ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060ee:	f003 0302 	and.w	r3, r3, #2
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d0ee      	beq.n	80060d4 <HAL_RCC_OscConfig+0x588>
 80060f6:	e014      	b.n	8006122 <HAL_RCC_OscConfig+0x5d6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80060f8:	f7fc fd06 	bl	8002b08 <HAL_GetTick>
 80060fc:	61f8      	str	r0, [r7, #28]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80060fe:	e00a      	b.n	8006116 <HAL_RCC_OscConfig+0x5ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006100:	f7fc fd02 	bl	8002b08 <HAL_GetTick>
 8006104:	4602      	mov	r2, r0
 8006106:	69fb      	ldr	r3, [r7, #28]
 8006108:	1ad3      	subs	r3, r2, r3
 800610a:	f241 3288 	movw	r2, #5000	; 0x1388
 800610e:	4293      	cmp	r3, r2
 8006110:	d901      	bls.n	8006116 <HAL_RCC_OscConfig+0x5ca>
        {
          return HAL_TIMEOUT;
 8006112:	2303      	movs	r3, #3
 8006114:	e0c8      	b.n	80062a8 <HAL_RCC_OscConfig+0x75c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006116:	4b66      	ldr	r3, [pc, #408]	; (80062b0 <HAL_RCC_OscConfig+0x764>)
 8006118:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800611a:	f003 0302 	and.w	r3, r3, #2
 800611e:	2b00      	cmp	r3, #0
 8006120:	d1ee      	bne.n	8006100 <HAL_RCC_OscConfig+0x5b4>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006126:	2b00      	cmp	r3, #0
 8006128:	f000 80bd 	beq.w	80062a6 <HAL_RCC_OscConfig+0x75a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800612c:	4b60      	ldr	r3, [pc, #384]	; (80062b0 <HAL_RCC_OscConfig+0x764>)
 800612e:	691b      	ldr	r3, [r3, #16]
 8006130:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006134:	2b18      	cmp	r3, #24
 8006136:	f000 80b4 	beq.w	80062a2 <HAL_RCC_OscConfig+0x756>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800613e:	2b02      	cmp	r3, #2
 8006140:	f040 8095 	bne.w	800626e <HAL_RCC_OscConfig+0x722>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006144:	4b5a      	ldr	r3, [pc, #360]	; (80062b0 <HAL_RCC_OscConfig+0x764>)
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	4a59      	ldr	r2, [pc, #356]	; (80062b0 <HAL_RCC_OscConfig+0x764>)
 800614a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800614e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006150:	f7fc fcda 	bl	8002b08 <HAL_GetTick>
 8006154:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006156:	e008      	b.n	800616a <HAL_RCC_OscConfig+0x61e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006158:	f7fc fcd6 	bl	8002b08 <HAL_GetTick>
 800615c:	4602      	mov	r2, r0
 800615e:	69fb      	ldr	r3, [r7, #28]
 8006160:	1ad3      	subs	r3, r2, r3
 8006162:	2b02      	cmp	r3, #2
 8006164:	d901      	bls.n	800616a <HAL_RCC_OscConfig+0x61e>
          {
            return HAL_TIMEOUT;
 8006166:	2303      	movs	r3, #3
 8006168:	e09e      	b.n	80062a8 <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800616a:	4b51      	ldr	r3, [pc, #324]	; (80062b0 <HAL_RCC_OscConfig+0x764>)
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006172:	2b00      	cmp	r3, #0
 8006174:	d1f0      	bne.n	8006158 <HAL_RCC_OscConfig+0x60c>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006176:	4b4e      	ldr	r3, [pc, #312]	; (80062b0 <HAL_RCC_OscConfig+0x764>)
 8006178:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800617a:	4b4e      	ldr	r3, [pc, #312]	; (80062b4 <HAL_RCC_OscConfig+0x768>)
 800617c:	4013      	ands	r3, r2
 800617e:	687a      	ldr	r2, [r7, #4]
 8006180:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8006182:	687a      	ldr	r2, [r7, #4]
 8006184:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8006186:	0112      	lsls	r2, r2, #4
 8006188:	430a      	orrs	r2, r1
 800618a:	4949      	ldr	r1, [pc, #292]	; (80062b0 <HAL_RCC_OscConfig+0x764>)
 800618c:	4313      	orrs	r3, r2
 800618e:	628b      	str	r3, [r1, #40]	; 0x28
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006194:	3b01      	subs	r3, #1
 8006196:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800619e:	3b01      	subs	r3, #1
 80061a0:	025b      	lsls	r3, r3, #9
 80061a2:	b29b      	uxth	r3, r3
 80061a4:	431a      	orrs	r2, r3
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061aa:	3b01      	subs	r3, #1
 80061ac:	041b      	lsls	r3, r3, #16
 80061ae:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80061b2:	431a      	orrs	r2, r3
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061b8:	3b01      	subs	r3, #1
 80061ba:	061b      	lsls	r3, r3, #24
 80061bc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80061c0:	493b      	ldr	r1, [pc, #236]	; (80062b0 <HAL_RCC_OscConfig+0x764>)
 80061c2:	4313      	orrs	r3, r2
 80061c4:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80061c6:	4b3a      	ldr	r3, [pc, #232]	; (80062b0 <HAL_RCC_OscConfig+0x764>)
 80061c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061ca:	4a39      	ldr	r2, [pc, #228]	; (80062b0 <HAL_RCC_OscConfig+0x764>)
 80061cc:	f023 0301 	bic.w	r3, r3, #1
 80061d0:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL  PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80061d2:	4b37      	ldr	r3, [pc, #220]	; (80062b0 <HAL_RCC_OscConfig+0x764>)
 80061d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80061d6:	4b38      	ldr	r3, [pc, #224]	; (80062b8 <HAL_RCC_OscConfig+0x76c>)
 80061d8:	4013      	ands	r3, r2
 80061da:	687a      	ldr	r2, [r7, #4]
 80061dc:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80061de:	00d2      	lsls	r2, r2, #3
 80061e0:	4933      	ldr	r1, [pc, #204]	; (80062b0 <HAL_RCC_OscConfig+0x764>)
 80061e2:	4313      	orrs	r3, r2
 80061e4:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80061e6:	4b32      	ldr	r3, [pc, #200]	; (80062b0 <HAL_RCC_OscConfig+0x764>)
 80061e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061ea:	f023 020c 	bic.w	r2, r3, #12
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061f2:	492f      	ldr	r1, [pc, #188]	; (80062b0 <HAL_RCC_OscConfig+0x764>)
 80061f4:	4313      	orrs	r3, r2
 80061f6:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80061f8:	4b2d      	ldr	r3, [pc, #180]	; (80062b0 <HAL_RCC_OscConfig+0x764>)
 80061fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061fc:	f023 0202 	bic.w	r2, r3, #2
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006204:	492a      	ldr	r1, [pc, #168]	; (80062b0 <HAL_RCC_OscConfig+0x764>)
 8006206:	4313      	orrs	r3, r2
 8006208:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800620a:	4b29      	ldr	r3, [pc, #164]	; (80062b0 <HAL_RCC_OscConfig+0x764>)
 800620c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800620e:	4a28      	ldr	r2, [pc, #160]	; (80062b0 <HAL_RCC_OscConfig+0x764>)
 8006210:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006214:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006216:	4b26      	ldr	r3, [pc, #152]	; (80062b0 <HAL_RCC_OscConfig+0x764>)
 8006218:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800621a:	4a25      	ldr	r2, [pc, #148]	; (80062b0 <HAL_RCC_OscConfig+0x764>)
 800621c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006220:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8006222:	4b23      	ldr	r3, [pc, #140]	; (80062b0 <HAL_RCC_OscConfig+0x764>)
 8006224:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006226:	4a22      	ldr	r2, [pc, #136]	; (80062b0 <HAL_RCC_OscConfig+0x764>)
 8006228:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800622c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 800622e:	4b20      	ldr	r3, [pc, #128]	; (80062b0 <HAL_RCC_OscConfig+0x764>)
 8006230:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006232:	4a1f      	ldr	r2, [pc, #124]	; (80062b0 <HAL_RCC_OscConfig+0x764>)
 8006234:	f043 0301 	orr.w	r3, r3, #1
 8006238:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800623a:	4b1d      	ldr	r3, [pc, #116]	; (80062b0 <HAL_RCC_OscConfig+0x764>)
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	4a1c      	ldr	r2, [pc, #112]	; (80062b0 <HAL_RCC_OscConfig+0x764>)
 8006240:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006244:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006246:	f7fc fc5f 	bl	8002b08 <HAL_GetTick>
 800624a:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800624c:	e008      	b.n	8006260 <HAL_RCC_OscConfig+0x714>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800624e:	f7fc fc5b 	bl	8002b08 <HAL_GetTick>
 8006252:	4602      	mov	r2, r0
 8006254:	69fb      	ldr	r3, [r7, #28]
 8006256:	1ad3      	subs	r3, r2, r3
 8006258:	2b02      	cmp	r3, #2
 800625a:	d901      	bls.n	8006260 <HAL_RCC_OscConfig+0x714>
          {
            return HAL_TIMEOUT;
 800625c:	2303      	movs	r3, #3
 800625e:	e023      	b.n	80062a8 <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006260:	4b13      	ldr	r3, [pc, #76]	; (80062b0 <HAL_RCC_OscConfig+0x764>)
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006268:	2b00      	cmp	r3, #0
 800626a:	d0f0      	beq.n	800624e <HAL_RCC_OscConfig+0x702>
 800626c:	e01b      	b.n	80062a6 <HAL_RCC_OscConfig+0x75a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800626e:	4b10      	ldr	r3, [pc, #64]	; (80062b0 <HAL_RCC_OscConfig+0x764>)
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	4a0f      	ldr	r2, [pc, #60]	; (80062b0 <HAL_RCC_OscConfig+0x764>)
 8006274:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006278:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800627a:	f7fc fc45 	bl	8002b08 <HAL_GetTick>
 800627e:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006280:	e008      	b.n	8006294 <HAL_RCC_OscConfig+0x748>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006282:	f7fc fc41 	bl	8002b08 <HAL_GetTick>
 8006286:	4602      	mov	r2, r0
 8006288:	69fb      	ldr	r3, [r7, #28]
 800628a:	1ad3      	subs	r3, r2, r3
 800628c:	2b02      	cmp	r3, #2
 800628e:	d901      	bls.n	8006294 <HAL_RCC_OscConfig+0x748>
          {
            return HAL_TIMEOUT;
 8006290:	2303      	movs	r3, #3
 8006292:	e009      	b.n	80062a8 <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006294:	4b06      	ldr	r3, [pc, #24]	; (80062b0 <HAL_RCC_OscConfig+0x764>)
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800629c:	2b00      	cmp	r3, #0
 800629e:	d1f0      	bne.n	8006282 <HAL_RCC_OscConfig+0x736>
 80062a0:	e001      	b.n	80062a6 <HAL_RCC_OscConfig+0x75a>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80062a2:	2301      	movs	r3, #1
 80062a4:	e000      	b.n	80062a8 <HAL_RCC_OscConfig+0x75c>
    }
  }
  return HAL_OK;
 80062a6:	2300      	movs	r3, #0
}
 80062a8:	4618      	mov	r0, r3
 80062aa:	3728      	adds	r7, #40	; 0x28
 80062ac:	46bd      	mov	sp, r7
 80062ae:	bd80      	pop	{r7, pc}
 80062b0:	58024400 	.word	0x58024400
 80062b4:	fffffc0c 	.word	0xfffffc0c
 80062b8:	ffff0007 	.word	0xffff0007

080062bc <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80062bc:	b580      	push	{r7, lr}
 80062be:	b084      	sub	sp, #16
 80062c0:	af00      	add	r7, sp, #0
 80062c2:	6078      	str	r0, [r7, #4]
 80062c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d101      	bne.n	80062d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80062cc:	2301      	movs	r3, #1
 80062ce:	e18d      	b.n	80065ec <HAL_RCC_ClockConfig+0x330>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80062d0:	4b8a      	ldr	r3, [pc, #552]	; (80064fc <HAL_RCC_ClockConfig+0x240>)
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	f003 030f 	and.w	r3, r3, #15
 80062d8:	683a      	ldr	r2, [r7, #0]
 80062da:	429a      	cmp	r2, r3
 80062dc:	d910      	bls.n	8006300 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80062de:	4b87      	ldr	r3, [pc, #540]	; (80064fc <HAL_RCC_ClockConfig+0x240>)
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	f023 020f 	bic.w	r2, r3, #15
 80062e6:	4985      	ldr	r1, [pc, #532]	; (80064fc <HAL_RCC_ClockConfig+0x240>)
 80062e8:	683b      	ldr	r3, [r7, #0]
 80062ea:	4313      	orrs	r3, r2
 80062ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80062ee:	4b83      	ldr	r3, [pc, #524]	; (80064fc <HAL_RCC_ClockConfig+0x240>)
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	f003 030f 	and.w	r3, r3, #15
 80062f6:	683a      	ldr	r2, [r7, #0]
 80062f8:	429a      	cmp	r2, r3
 80062fa:	d001      	beq.n	8006300 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80062fc:	2301      	movs	r3, #1
 80062fe:	e175      	b.n	80065ec <HAL_RCC_ClockConfig+0x330>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	f003 0304 	and.w	r3, r3, #4
 8006308:	2b00      	cmp	r3, #0
 800630a:	d010      	beq.n	800632e <HAL_RCC_ClockConfig+0x72>
  {
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	691a      	ldr	r2, [r3, #16]
 8006310:	4b7b      	ldr	r3, [pc, #492]	; (8006500 <HAL_RCC_ClockConfig+0x244>)
 8006312:	699b      	ldr	r3, [r3, #24]
 8006314:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006318:	429a      	cmp	r2, r3
 800631a:	d908      	bls.n	800632e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800631c:	4b78      	ldr	r3, [pc, #480]	; (8006500 <HAL_RCC_ClockConfig+0x244>)
 800631e:	699b      	ldr	r3, [r3, #24]
 8006320:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	691b      	ldr	r3, [r3, #16]
 8006328:	4975      	ldr	r1, [pc, #468]	; (8006500 <HAL_RCC_ClockConfig+0x244>)
 800632a:	4313      	orrs	r3, r2
 800632c:	618b      	str	r3, [r1, #24]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	f003 0308 	and.w	r3, r3, #8
 8006336:	2b00      	cmp	r3, #0
 8006338:	d010      	beq.n	800635c <HAL_RCC_ClockConfig+0xa0>
  {
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	695a      	ldr	r2, [r3, #20]
 800633e:	4b70      	ldr	r3, [pc, #448]	; (8006500 <HAL_RCC_ClockConfig+0x244>)
 8006340:	69db      	ldr	r3, [r3, #28]
 8006342:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006346:	429a      	cmp	r2, r3
 8006348:	d908      	bls.n	800635c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800634a:	4b6d      	ldr	r3, [pc, #436]	; (8006500 <HAL_RCC_ClockConfig+0x244>)
 800634c:	69db      	ldr	r3, [r3, #28]
 800634e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	695b      	ldr	r3, [r3, #20]
 8006356:	496a      	ldr	r1, [pc, #424]	; (8006500 <HAL_RCC_ClockConfig+0x244>)
 8006358:	4313      	orrs	r3, r2
 800635a:	61cb      	str	r3, [r1, #28]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	f003 0310 	and.w	r3, r3, #16
 8006364:	2b00      	cmp	r3, #0
 8006366:	d010      	beq.n	800638a <HAL_RCC_ClockConfig+0xce>
  {
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	699a      	ldr	r2, [r3, #24]
 800636c:	4b64      	ldr	r3, [pc, #400]	; (8006500 <HAL_RCC_ClockConfig+0x244>)
 800636e:	69db      	ldr	r3, [r3, #28]
 8006370:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006374:	429a      	cmp	r2, r3
 8006376:	d908      	bls.n	800638a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006378:	4b61      	ldr	r3, [pc, #388]	; (8006500 <HAL_RCC_ClockConfig+0x244>)
 800637a:	69db      	ldr	r3, [r3, #28]
 800637c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	699b      	ldr	r3, [r3, #24]
 8006384:	495e      	ldr	r1, [pc, #376]	; (8006500 <HAL_RCC_ClockConfig+0x244>)
 8006386:	4313      	orrs	r3, r2
 8006388:	61cb      	str	r3, [r1, #28]
    }
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	f003 0320 	and.w	r3, r3, #32
 8006392:	2b00      	cmp	r3, #0
 8006394:	d010      	beq.n	80063b8 <HAL_RCC_ClockConfig+0xfc>
  {
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	69da      	ldr	r2, [r3, #28]
 800639a:	4b59      	ldr	r3, [pc, #356]	; (8006500 <HAL_RCC_ClockConfig+0x244>)
 800639c:	6a1b      	ldr	r3, [r3, #32]
 800639e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80063a2:	429a      	cmp	r2, r3
 80063a4:	d908      	bls.n	80063b8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80063a6:	4b56      	ldr	r3, [pc, #344]	; (8006500 <HAL_RCC_ClockConfig+0x244>)
 80063a8:	6a1b      	ldr	r3, [r3, #32]
 80063aa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	69db      	ldr	r3, [r3, #28]
 80063b2:	4953      	ldr	r1, [pc, #332]	; (8006500 <HAL_RCC_ClockConfig+0x244>)
 80063b4:	4313      	orrs	r3, r2
 80063b6:	620b      	str	r3, [r1, #32]
    }
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	f003 0302 	and.w	r3, r3, #2
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d010      	beq.n	80063e6 <HAL_RCC_ClockConfig+0x12a>
  {
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	68da      	ldr	r2, [r3, #12]
 80063c8:	4b4d      	ldr	r3, [pc, #308]	; (8006500 <HAL_RCC_ClockConfig+0x244>)
 80063ca:	699b      	ldr	r3, [r3, #24]
 80063cc:	f003 030f 	and.w	r3, r3, #15
 80063d0:	429a      	cmp	r2, r3
 80063d2:	d908      	bls.n	80063e6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80063d4:	4b4a      	ldr	r3, [pc, #296]	; (8006500 <HAL_RCC_ClockConfig+0x244>)
 80063d6:	699b      	ldr	r3, [r3, #24]
 80063d8:	f023 020f 	bic.w	r2, r3, #15
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	68db      	ldr	r3, [r3, #12]
 80063e0:	4947      	ldr	r1, [pc, #284]	; (8006500 <HAL_RCC_ClockConfig+0x244>)
 80063e2:	4313      	orrs	r3, r2
 80063e4:	618b      	str	r3, [r1, #24]
    }
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	f003 0301 	and.w	r3, r3, #1
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d055      	beq.n	800649e <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80063f2:	4b43      	ldr	r3, [pc, #268]	; (8006500 <HAL_RCC_ClockConfig+0x244>)
 80063f4:	699b      	ldr	r3, [r3, #24]
 80063f6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	689b      	ldr	r3, [r3, #8]
 80063fe:	4940      	ldr	r1, [pc, #256]	; (8006500 <HAL_RCC_ClockConfig+0x244>)
 8006400:	4313      	orrs	r3, r2
 8006402:	618b      	str	r3, [r1, #24]
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	685b      	ldr	r3, [r3, #4]
 8006408:	2b02      	cmp	r3, #2
 800640a:	d107      	bne.n	800641c <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800640c:	4b3c      	ldr	r3, [pc, #240]	; (8006500 <HAL_RCC_ClockConfig+0x244>)
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006414:	2b00      	cmp	r3, #0
 8006416:	d121      	bne.n	800645c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006418:	2301      	movs	r3, #1
 800641a:	e0e7      	b.n	80065ec <HAL_RCC_ClockConfig+0x330>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	685b      	ldr	r3, [r3, #4]
 8006420:	2b03      	cmp	r3, #3
 8006422:	d107      	bne.n	8006434 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006424:	4b36      	ldr	r3, [pc, #216]	; (8006500 <HAL_RCC_ClockConfig+0x244>)
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800642c:	2b00      	cmp	r3, #0
 800642e:	d115      	bne.n	800645c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006430:	2301      	movs	r3, #1
 8006432:	e0db      	b.n	80065ec <HAL_RCC_ClockConfig+0x330>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	685b      	ldr	r3, [r3, #4]
 8006438:	2b01      	cmp	r3, #1
 800643a:	d107      	bne.n	800644c <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800643c:	4b30      	ldr	r3, [pc, #192]	; (8006500 <HAL_RCC_ClockConfig+0x244>)
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006444:	2b00      	cmp	r3, #0
 8006446:	d109      	bne.n	800645c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006448:	2301      	movs	r3, #1
 800644a:	e0cf      	b.n	80065ec <HAL_RCC_ClockConfig+0x330>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800644c:	4b2c      	ldr	r3, [pc, #176]	; (8006500 <HAL_RCC_ClockConfig+0x244>)
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	f003 0304 	and.w	r3, r3, #4
 8006454:	2b00      	cmp	r3, #0
 8006456:	d101      	bne.n	800645c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006458:	2301      	movs	r3, #1
 800645a:	e0c7      	b.n	80065ec <HAL_RCC_ClockConfig+0x330>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800645c:	4b28      	ldr	r3, [pc, #160]	; (8006500 <HAL_RCC_ClockConfig+0x244>)
 800645e:	691b      	ldr	r3, [r3, #16]
 8006460:	f023 0207 	bic.w	r2, r3, #7
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	685b      	ldr	r3, [r3, #4]
 8006468:	4925      	ldr	r1, [pc, #148]	; (8006500 <HAL_RCC_ClockConfig+0x244>)
 800646a:	4313      	orrs	r3, r2
 800646c:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800646e:	f7fc fb4b 	bl	8002b08 <HAL_GetTick>
 8006472:	60f8      	str	r0, [r7, #12]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006474:	e00a      	b.n	800648c <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006476:	f7fc fb47 	bl	8002b08 <HAL_GetTick>
 800647a:	4602      	mov	r2, r0
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	1ad3      	subs	r3, r2, r3
 8006480:	f241 3288 	movw	r2, #5000	; 0x1388
 8006484:	4293      	cmp	r3, r2
 8006486:	d901      	bls.n	800648c <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8006488:	2303      	movs	r3, #3
 800648a:	e0af      	b.n	80065ec <HAL_RCC_ClockConfig+0x330>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800648c:	4b1c      	ldr	r3, [pc, #112]	; (8006500 <HAL_RCC_ClockConfig+0x244>)
 800648e:	691b      	ldr	r3, [r3, #16]
 8006490:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	685b      	ldr	r3, [r3, #4]
 8006498:	00db      	lsls	r3, r3, #3
 800649a:	429a      	cmp	r2, r3
 800649c:	d1eb      	bne.n	8006476 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	f003 0302 	and.w	r3, r3, #2
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d010      	beq.n	80064cc <HAL_RCC_ClockConfig+0x210>
  {
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	68da      	ldr	r2, [r3, #12]
 80064ae:	4b14      	ldr	r3, [pc, #80]	; (8006500 <HAL_RCC_ClockConfig+0x244>)
 80064b0:	699b      	ldr	r3, [r3, #24]
 80064b2:	f003 030f 	and.w	r3, r3, #15
 80064b6:	429a      	cmp	r2, r3
 80064b8:	d208      	bcs.n	80064cc <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80064ba:	4b11      	ldr	r3, [pc, #68]	; (8006500 <HAL_RCC_ClockConfig+0x244>)
 80064bc:	699b      	ldr	r3, [r3, #24]
 80064be:	f023 020f 	bic.w	r2, r3, #15
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	68db      	ldr	r3, [r3, #12]
 80064c6:	490e      	ldr	r1, [pc, #56]	; (8006500 <HAL_RCC_ClockConfig+0x244>)
 80064c8:	4313      	orrs	r3, r2
 80064ca:	618b      	str	r3, [r1, #24]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80064cc:	4b0b      	ldr	r3, [pc, #44]	; (80064fc <HAL_RCC_ClockConfig+0x240>)
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	f003 030f 	and.w	r3, r3, #15
 80064d4:	683a      	ldr	r2, [r7, #0]
 80064d6:	429a      	cmp	r2, r3
 80064d8:	d214      	bcs.n	8006504 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80064da:	4b08      	ldr	r3, [pc, #32]	; (80064fc <HAL_RCC_ClockConfig+0x240>)
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	f023 020f 	bic.w	r2, r3, #15
 80064e2:	4906      	ldr	r1, [pc, #24]	; (80064fc <HAL_RCC_ClockConfig+0x240>)
 80064e4:	683b      	ldr	r3, [r7, #0]
 80064e6:	4313      	orrs	r3, r2
 80064e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80064ea:	4b04      	ldr	r3, [pc, #16]	; (80064fc <HAL_RCC_ClockConfig+0x240>)
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	f003 030f 	and.w	r3, r3, #15
 80064f2:	683a      	ldr	r2, [r7, #0]
 80064f4:	429a      	cmp	r2, r3
 80064f6:	d005      	beq.n	8006504 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80064f8:	2301      	movs	r3, #1
 80064fa:	e077      	b.n	80065ec <HAL_RCC_ClockConfig+0x330>
 80064fc:	52002000 	.word	0x52002000
 8006500:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	f003 0304 	and.w	r3, r3, #4
 800650c:	2b00      	cmp	r3, #0
 800650e:	d010      	beq.n	8006532 <HAL_RCC_ClockConfig+0x276>
 {
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	691a      	ldr	r2, [r3, #16]
 8006514:	4b37      	ldr	r3, [pc, #220]	; (80065f4 <HAL_RCC_ClockConfig+0x338>)
 8006516:	699b      	ldr	r3, [r3, #24]
 8006518:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800651c:	429a      	cmp	r2, r3
 800651e:	d208      	bcs.n	8006532 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006520:	4b34      	ldr	r3, [pc, #208]	; (80065f4 <HAL_RCC_ClockConfig+0x338>)
 8006522:	699b      	ldr	r3, [r3, #24]
 8006524:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	691b      	ldr	r3, [r3, #16]
 800652c:	4931      	ldr	r1, [pc, #196]	; (80065f4 <HAL_RCC_ClockConfig+0x338>)
 800652e:	4313      	orrs	r3, r2
 8006530:	618b      	str	r3, [r1, #24]
   }
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	f003 0308 	and.w	r3, r3, #8
 800653a:	2b00      	cmp	r3, #0
 800653c:	d010      	beq.n	8006560 <HAL_RCC_ClockConfig+0x2a4>
 {
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	695a      	ldr	r2, [r3, #20]
 8006542:	4b2c      	ldr	r3, [pc, #176]	; (80065f4 <HAL_RCC_ClockConfig+0x338>)
 8006544:	69db      	ldr	r3, [r3, #28]
 8006546:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800654a:	429a      	cmp	r2, r3
 800654c:	d208      	bcs.n	8006560 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800654e:	4b29      	ldr	r3, [pc, #164]	; (80065f4 <HAL_RCC_ClockConfig+0x338>)
 8006550:	69db      	ldr	r3, [r3, #28]
 8006552:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	695b      	ldr	r3, [r3, #20]
 800655a:	4926      	ldr	r1, [pc, #152]	; (80065f4 <HAL_RCC_ClockConfig+0x338>)
 800655c:	4313      	orrs	r3, r2
 800655e:	61cb      	str	r3, [r1, #28]
   }
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	f003 0310 	and.w	r3, r3, #16
 8006568:	2b00      	cmp	r3, #0
 800656a:	d010      	beq.n	800658e <HAL_RCC_ClockConfig+0x2d2>
 {
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	699a      	ldr	r2, [r3, #24]
 8006570:	4b20      	ldr	r3, [pc, #128]	; (80065f4 <HAL_RCC_ClockConfig+0x338>)
 8006572:	69db      	ldr	r3, [r3, #28]
 8006574:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006578:	429a      	cmp	r2, r3
 800657a:	d208      	bcs.n	800658e <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800657c:	4b1d      	ldr	r3, [pc, #116]	; (80065f4 <HAL_RCC_ClockConfig+0x338>)
 800657e:	69db      	ldr	r3, [r3, #28]
 8006580:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	699b      	ldr	r3, [r3, #24]
 8006588:	491a      	ldr	r1, [pc, #104]	; (80065f4 <HAL_RCC_ClockConfig+0x338>)
 800658a:	4313      	orrs	r3, r2
 800658c:	61cb      	str	r3, [r1, #28]
   }
 }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	f003 0320 	and.w	r3, r3, #32
 8006596:	2b00      	cmp	r3, #0
 8006598:	d010      	beq.n	80065bc <HAL_RCC_ClockConfig+0x300>
 {
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	69da      	ldr	r2, [r3, #28]
 800659e:	4b15      	ldr	r3, [pc, #84]	; (80065f4 <HAL_RCC_ClockConfig+0x338>)
 80065a0:	6a1b      	ldr	r3, [r3, #32]
 80065a2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80065a6:	429a      	cmp	r2, r3
 80065a8:	d208      	bcs.n	80065bc <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80065aa:	4b12      	ldr	r3, [pc, #72]	; (80065f4 <HAL_RCC_ClockConfig+0x338>)
 80065ac:	6a1b      	ldr	r3, [r3, #32]
 80065ae:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	69db      	ldr	r3, [r3, #28]
 80065b6:	490f      	ldr	r1, [pc, #60]	; (80065f4 <HAL_RCC_ClockConfig+0x338>)
 80065b8:	4313      	orrs	r3, r2
 80065ba:	620b      	str	r3, [r1, #32]
   }
 }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80065bc:	f000 f822 	bl	8006604 <HAL_RCC_GetSysClockFreq>
 80065c0:	4601      	mov	r1, r0
 80065c2:	4b0c      	ldr	r3, [pc, #48]	; (80065f4 <HAL_RCC_ClockConfig+0x338>)
 80065c4:	699b      	ldr	r3, [r3, #24]
 80065c6:	0a1b      	lsrs	r3, r3, #8
 80065c8:	f003 030f 	and.w	r3, r3, #15
 80065cc:	4a0a      	ldr	r2, [pc, #40]	; (80065f8 <HAL_RCC_ClockConfig+0x33c>)
 80065ce:	5cd3      	ldrb	r3, [r2, r3]
 80065d0:	f003 031f 	and.w	r3, r3, #31
 80065d4:	fa21 f303 	lsr.w	r3, r1, r3
 80065d8:	4a08      	ldr	r2, [pc, #32]	; (80065fc <HAL_RCC_ClockConfig+0x340>)
 80065da:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80065dc:	4b08      	ldr	r3, [pc, #32]	; (8006600 <HAL_RCC_ClockConfig+0x344>)
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	4618      	mov	r0, r3
 80065e2:	f7fc fa47 	bl	8002a74 <HAL_InitTick>
 80065e6:	4603      	mov	r3, r0
 80065e8:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 80065ea:	7afb      	ldrb	r3, [r7, #11]
}
 80065ec:	4618      	mov	r0, r3
 80065ee:	3710      	adds	r7, #16
 80065f0:	46bd      	mov	sp, r7
 80065f2:	bd80      	pop	{r7, pc}
 80065f4:	58024400 	.word	0x58024400
 80065f8:	080119e8 	.word	0x080119e8
 80065fc:	24000088 	.word	0x24000088
 8006600:	24000090 	.word	0x24000090

08006604 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006604:	b480      	push	{r7}
 8006606:	b089      	sub	sp, #36	; 0x24
 8006608:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800660a:	4baf      	ldr	r3, [pc, #700]	; (80068c8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800660c:	691b      	ldr	r3, [r3, #16]
 800660e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006612:	2b18      	cmp	r3, #24
 8006614:	f200 814e 	bhi.w	80068b4 <HAL_RCC_GetSysClockFreq+0x2b0>
 8006618:	a201      	add	r2, pc, #4	; (adr r2, 8006620 <HAL_RCC_GetSysClockFreq+0x1c>)
 800661a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800661e:	bf00      	nop
 8006620:	08006685 	.word	0x08006685
 8006624:	080068b5 	.word	0x080068b5
 8006628:	080068b5 	.word	0x080068b5
 800662c:	080068b5 	.word	0x080068b5
 8006630:	080068b5 	.word	0x080068b5
 8006634:	080068b5 	.word	0x080068b5
 8006638:	080068b5 	.word	0x080068b5
 800663c:	080068b5 	.word	0x080068b5
 8006640:	080066ab 	.word	0x080066ab
 8006644:	080068b5 	.word	0x080068b5
 8006648:	080068b5 	.word	0x080068b5
 800664c:	080068b5 	.word	0x080068b5
 8006650:	080068b5 	.word	0x080068b5
 8006654:	080068b5 	.word	0x080068b5
 8006658:	080068b5 	.word	0x080068b5
 800665c:	080068b5 	.word	0x080068b5
 8006660:	080066b1 	.word	0x080066b1
 8006664:	080068b5 	.word	0x080068b5
 8006668:	080068b5 	.word	0x080068b5
 800666c:	080068b5 	.word	0x080068b5
 8006670:	080068b5 	.word	0x080068b5
 8006674:	080068b5 	.word	0x080068b5
 8006678:	080068b5 	.word	0x080068b5
 800667c:	080068b5 	.word	0x080068b5
 8006680:	080066b7 	.word	0x080066b7
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006684:	4b90      	ldr	r3, [pc, #576]	; (80068c8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	f003 0320 	and.w	r3, r3, #32
 800668c:	2b00      	cmp	r3, #0
 800668e:	d009      	beq.n	80066a4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006690:	4b8d      	ldr	r3, [pc, #564]	; (80068c8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	08db      	lsrs	r3, r3, #3
 8006696:	f003 0303 	and.w	r3, r3, #3
 800669a:	4a8c      	ldr	r2, [pc, #560]	; (80068cc <HAL_RCC_GetSysClockFreq+0x2c8>)
 800669c:	fa22 f303 	lsr.w	r3, r2, r3
 80066a0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80066a2:	e10a      	b.n	80068ba <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80066a4:	4b89      	ldr	r3, [pc, #548]	; (80068cc <HAL_RCC_GetSysClockFreq+0x2c8>)
 80066a6:	61bb      	str	r3, [r7, #24]
    break;
 80066a8:	e107      	b.n	80068ba <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80066aa:	4b89      	ldr	r3, [pc, #548]	; (80068d0 <HAL_RCC_GetSysClockFreq+0x2cc>)
 80066ac:	61bb      	str	r3, [r7, #24]
    break;
 80066ae:	e104      	b.n	80068ba <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80066b0:	4b88      	ldr	r3, [pc, #544]	; (80068d4 <HAL_RCC_GetSysClockFreq+0x2d0>)
 80066b2:	61bb      	str	r3, [r7, #24]
    break;
 80066b4:	e101      	b.n	80068ba <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80066b6:	4b84      	ldr	r3, [pc, #528]	; (80068c8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80066b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066ba:	f003 0303 	and.w	r3, r3, #3
 80066be:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80066c0:	4b81      	ldr	r3, [pc, #516]	; (80068c8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80066c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066c4:	091b      	lsrs	r3, r3, #4
 80066c6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80066ca:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80066cc:	4b7e      	ldr	r3, [pc, #504]	; (80068c8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80066ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066d0:	f003 0301 	and.w	r3, r3, #1
 80066d4:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80066d6:	4b7c      	ldr	r3, [pc, #496]	; (80068c8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80066d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066da:	08db      	lsrs	r3, r3, #3
 80066dc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80066e0:	68fa      	ldr	r2, [r7, #12]
 80066e2:	fb02 f303 	mul.w	r3, r2, r3
 80066e6:	ee07 3a90 	vmov	s15, r3
 80066ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80066ee:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80066f2:	693b      	ldr	r3, [r7, #16]
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	f000 80da 	beq.w	80068ae <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 80066fa:	697b      	ldr	r3, [r7, #20]
 80066fc:	2b01      	cmp	r3, #1
 80066fe:	d05a      	beq.n	80067b6 <HAL_RCC_GetSysClockFreq+0x1b2>
 8006700:	2b01      	cmp	r3, #1
 8006702:	d302      	bcc.n	800670a <HAL_RCC_GetSysClockFreq+0x106>
 8006704:	2b02      	cmp	r3, #2
 8006706:	d078      	beq.n	80067fa <HAL_RCC_GetSysClockFreq+0x1f6>
 8006708:	e099      	b.n	800683e <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800670a:	4b6f      	ldr	r3, [pc, #444]	; (80068c8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	f003 0320 	and.w	r3, r3, #32
 8006712:	2b00      	cmp	r3, #0
 8006714:	d02d      	beq.n	8006772 <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006716:	4b6c      	ldr	r3, [pc, #432]	; (80068c8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	08db      	lsrs	r3, r3, #3
 800671c:	f003 0303 	and.w	r3, r3, #3
 8006720:	4a6a      	ldr	r2, [pc, #424]	; (80068cc <HAL_RCC_GetSysClockFreq+0x2c8>)
 8006722:	fa22 f303 	lsr.w	r3, r2, r3
 8006726:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	ee07 3a90 	vmov	s15, r3
 800672e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006732:	693b      	ldr	r3, [r7, #16]
 8006734:	ee07 3a90 	vmov	s15, r3
 8006738:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800673c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006740:	4b61      	ldr	r3, [pc, #388]	; (80068c8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006742:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006744:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006748:	ee07 3a90 	vmov	s15, r3
 800674c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006750:	ed97 6a02 	vldr	s12, [r7, #8]
 8006754:	eddf 5a60 	vldr	s11, [pc, #384]	; 80068d8 <HAL_RCC_GetSysClockFreq+0x2d4>
 8006758:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800675c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006760:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006764:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006768:	ee67 7a27 	vmul.f32	s15, s14, s15
 800676c:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8006770:	e087      	b.n	8006882 <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006772:	693b      	ldr	r3, [r7, #16]
 8006774:	ee07 3a90 	vmov	s15, r3
 8006778:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800677c:	eddf 6a57 	vldr	s13, [pc, #348]	; 80068dc <HAL_RCC_GetSysClockFreq+0x2d8>
 8006780:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006784:	4b50      	ldr	r3, [pc, #320]	; (80068c8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006786:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006788:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800678c:	ee07 3a90 	vmov	s15, r3
 8006790:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006794:	ed97 6a02 	vldr	s12, [r7, #8]
 8006798:	eddf 5a4f 	vldr	s11, [pc, #316]	; 80068d8 <HAL_RCC_GetSysClockFreq+0x2d4>
 800679c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80067a0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80067a4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80067a8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80067ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80067b0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80067b4:	e065      	b.n	8006882 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80067b6:	693b      	ldr	r3, [r7, #16]
 80067b8:	ee07 3a90 	vmov	s15, r3
 80067bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80067c0:	eddf 6a47 	vldr	s13, [pc, #284]	; 80068e0 <HAL_RCC_GetSysClockFreq+0x2dc>
 80067c4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80067c8:	4b3f      	ldr	r3, [pc, #252]	; (80068c8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80067ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80067d0:	ee07 3a90 	vmov	s15, r3
 80067d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80067d8:	ed97 6a02 	vldr	s12, [r7, #8]
 80067dc:	eddf 5a3e 	vldr	s11, [pc, #248]	; 80068d8 <HAL_RCC_GetSysClockFreq+0x2d4>
 80067e0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80067e4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80067e8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80067ec:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80067f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80067f4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80067f8:	e043      	b.n	8006882 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80067fa:	693b      	ldr	r3, [r7, #16]
 80067fc:	ee07 3a90 	vmov	s15, r3
 8006800:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006804:	eddf 6a37 	vldr	s13, [pc, #220]	; 80068e4 <HAL_RCC_GetSysClockFreq+0x2e0>
 8006808:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800680c:	4b2e      	ldr	r3, [pc, #184]	; (80068c8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800680e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006810:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006814:	ee07 3a90 	vmov	s15, r3
 8006818:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800681c:	ed97 6a02 	vldr	s12, [r7, #8]
 8006820:	eddf 5a2d 	vldr	s11, [pc, #180]	; 80068d8 <HAL_RCC_GetSysClockFreq+0x2d4>
 8006824:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006828:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800682c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006830:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006834:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006838:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800683c:	e021      	b.n	8006882 <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800683e:	693b      	ldr	r3, [r7, #16]
 8006840:	ee07 3a90 	vmov	s15, r3
 8006844:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006848:	eddf 6a25 	vldr	s13, [pc, #148]	; 80068e0 <HAL_RCC_GetSysClockFreq+0x2dc>
 800684c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006850:	4b1d      	ldr	r3, [pc, #116]	; (80068c8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006852:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006854:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006858:	ee07 3a90 	vmov	s15, r3
 800685c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006860:	ed97 6a02 	vldr	s12, [r7, #8]
 8006864:	eddf 5a1c 	vldr	s11, [pc, #112]	; 80068d8 <HAL_RCC_GetSysClockFreq+0x2d4>
 8006868:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800686c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006870:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006874:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006878:	ee67 7a27 	vmul.f32	s15, s14, s15
 800687c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006880:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8006882:	4b11      	ldr	r3, [pc, #68]	; (80068c8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006886:	0a5b      	lsrs	r3, r3, #9
 8006888:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800688c:	3301      	adds	r3, #1
 800688e:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8006890:	683b      	ldr	r3, [r7, #0]
 8006892:	ee07 3a90 	vmov	s15, r3
 8006896:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800689a:	edd7 6a07 	vldr	s13, [r7, #28]
 800689e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80068a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80068a6:	ee17 3a90 	vmov	r3, s15
 80068aa:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80068ac:	e005      	b.n	80068ba <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 80068ae:	2300      	movs	r3, #0
 80068b0:	61bb      	str	r3, [r7, #24]
    break;
 80068b2:	e002      	b.n	80068ba <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 80068b4:	4b06      	ldr	r3, [pc, #24]	; (80068d0 <HAL_RCC_GetSysClockFreq+0x2cc>)
 80068b6:	61bb      	str	r3, [r7, #24]
    break;
 80068b8:	bf00      	nop
  }

  return sysclockfreq;
 80068ba:	69bb      	ldr	r3, [r7, #24]
}
 80068bc:	4618      	mov	r0, r3
 80068be:	3724      	adds	r7, #36	; 0x24
 80068c0:	46bd      	mov	sp, r7
 80068c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c6:	4770      	bx	lr
 80068c8:	58024400 	.word	0x58024400
 80068cc:	03d09000 	.word	0x03d09000
 80068d0:	003d0900 	.word	0x003d0900
 80068d4:	017d7840 	.word	0x017d7840
 80068d8:	46000000 	.word	0x46000000
 80068dc:	4c742400 	.word	0x4c742400
 80068e0:	4a742400 	.word	0x4a742400
 80068e4:	4bbebc20 	.word	0x4bbebc20

080068e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80068e8:	b580      	push	{r7, lr}
 80068ea:	af00      	add	r7, sp, #0
  SystemD2Clock = (HAL_RCCEx_GetD1SysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80068ec:	f001 f9e2 	bl	8007cb4 <HAL_RCCEx_GetD1SysClockFreq>
 80068f0:	4601      	mov	r1, r0
 80068f2:	4b08      	ldr	r3, [pc, #32]	; (8006914 <HAL_RCC_GetHCLKFreq+0x2c>)
 80068f4:	699b      	ldr	r3, [r3, #24]
 80068f6:	f003 030f 	and.w	r3, r3, #15
 80068fa:	4a07      	ldr	r2, [pc, #28]	; (8006918 <HAL_RCC_GetHCLKFreq+0x30>)
 80068fc:	5cd3      	ldrb	r3, [r2, r3]
 80068fe:	f003 031f 	and.w	r3, r3, #31
 8006902:	fa21 f303 	lsr.w	r3, r1, r3
 8006906:	4a05      	ldr	r2, [pc, #20]	; (800691c <HAL_RCC_GetHCLKFreq+0x34>)
 8006908:	6013      	str	r3, [r2, #0]
  return SystemD2Clock;
 800690a:	4b04      	ldr	r3, [pc, #16]	; (800691c <HAL_RCC_GetHCLKFreq+0x34>)
 800690c:	681b      	ldr	r3, [r3, #0]
}
 800690e:	4618      	mov	r0, r3
 8006910:	bd80      	pop	{r7, pc}
 8006912:	bf00      	nop
 8006914:	58024400 	.word	0x58024400
 8006918:	080119e8 	.word	0x080119e8
 800691c:	2400008c 	.word	0x2400008c

08006920 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006920:	b580      	push	{r7, lr}
 8006922:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8006924:	f7ff ffe0 	bl	80068e8 <HAL_RCC_GetHCLKFreq>
 8006928:	4601      	mov	r1, r0
 800692a:	4b06      	ldr	r3, [pc, #24]	; (8006944 <HAL_RCC_GetPCLK1Freq+0x24>)
 800692c:	69db      	ldr	r3, [r3, #28]
 800692e:	091b      	lsrs	r3, r3, #4
 8006930:	f003 0307 	and.w	r3, r3, #7
 8006934:	4a04      	ldr	r2, [pc, #16]	; (8006948 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006936:	5cd3      	ldrb	r3, [r2, r3]
 8006938:	f003 031f 	and.w	r3, r3, #31
 800693c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006940:	4618      	mov	r0, r3
 8006942:	bd80      	pop	{r7, pc}
 8006944:	58024400 	.word	0x58024400
 8006948:	080119e8 	.word	0x080119e8

0800694c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800694c:	b580      	push	{r7, lr}
 800694e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8006950:	f7ff ffca 	bl	80068e8 <HAL_RCC_GetHCLKFreq>
 8006954:	4601      	mov	r1, r0
 8006956:	4b06      	ldr	r3, [pc, #24]	; (8006970 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006958:	69db      	ldr	r3, [r3, #28]
 800695a:	0a1b      	lsrs	r3, r3, #8
 800695c:	f003 0307 	and.w	r3, r3, #7
 8006960:	4a04      	ldr	r2, [pc, #16]	; (8006974 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006962:	5cd3      	ldrb	r3, [r2, r3]
 8006964:	f003 031f 	and.w	r3, r3, #31
 8006968:	fa21 f303 	lsr.w	r3, r1, r3
}
 800696c:	4618      	mov	r0, r3
 800696e:	bd80      	pop	{r7, pc}
 8006970:	58024400 	.word	0x58024400
 8006974:	080119e8 	.word	0x080119e8

08006978 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006978:	b580      	push	{r7, lr}
 800697a:	b086      	sub	sp, #24
 800697c:	af00      	add	r7, sp, #0
 800697e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006980:	2300      	movs	r3, #0
 8006982:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006984:	2300      	movs	r3, #0
 8006986:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006990:	2b00      	cmp	r3, #0
 8006992:	d03d      	beq.n	8006a10 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006998:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800699c:	d013      	beq.n	80069c6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 800699e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80069a2:	d802      	bhi.n	80069aa <HAL_RCCEx_PeriphCLKConfig+0x32>
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d007      	beq.n	80069b8 <HAL_RCCEx_PeriphCLKConfig+0x40>
 80069a8:	e01f      	b.n	80069ea <HAL_RCCEx_PeriphCLKConfig+0x72>
 80069aa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80069ae:	d013      	beq.n	80069d8 <HAL_RCCEx_PeriphCLKConfig+0x60>
 80069b0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80069b4:	d01c      	beq.n	80069f0 <HAL_RCCEx_PeriphCLKConfig+0x78>
 80069b6:	e018      	b.n	80069ea <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80069b8:	4baf      	ldr	r3, [pc, #700]	; (8006c78 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80069ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069bc:	4aae      	ldr	r2, [pc, #696]	; (8006c78 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80069be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80069c2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80069c4:	e015      	b.n	80069f2 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	3304      	adds	r3, #4
 80069ca:	2102      	movs	r1, #2
 80069cc:	4618      	mov	r0, r3
 80069ce:	f001 f98d 	bl	8007cec <RCCEx_PLL2_Config>
 80069d2:	4603      	mov	r3, r0
 80069d4:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80069d6:	e00c      	b.n	80069f2 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	3324      	adds	r3, #36	; 0x24
 80069dc:	2102      	movs	r1, #2
 80069de:	4618      	mov	r0, r3
 80069e0:	f001 fa36 	bl	8007e50 <RCCEx_PLL3_Config>
 80069e4:	4603      	mov	r3, r0
 80069e6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80069e8:	e003      	b.n	80069f2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80069ea:	2301      	movs	r3, #1
 80069ec:	75fb      	strb	r3, [r7, #23]
      break;
 80069ee:	e000      	b.n	80069f2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 80069f0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80069f2:	7dfb      	ldrb	r3, [r7, #23]
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d109      	bne.n	8006a0c <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80069f8:	4b9f      	ldr	r3, [pc, #636]	; (8006c78 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80069fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80069fc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006a04:	499c      	ldr	r1, [pc, #624]	; (8006c78 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006a06:	4313      	orrs	r3, r2
 8006a08:	650b      	str	r3, [r1, #80]	; 0x50
 8006a0a:	e001      	b.n	8006a10 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a0c:	7dfb      	ldrb	r3, [r7, #23]
 8006a0e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d03d      	beq.n	8006a98 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a20:	2b04      	cmp	r3, #4
 8006a22:	d826      	bhi.n	8006a72 <HAL_RCCEx_PeriphCLKConfig+0xfa>
 8006a24:	a201      	add	r2, pc, #4	; (adr r2, 8006a2c <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 8006a26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a2a:	bf00      	nop
 8006a2c:	08006a41 	.word	0x08006a41
 8006a30:	08006a4f 	.word	0x08006a4f
 8006a34:	08006a61 	.word	0x08006a61
 8006a38:	08006a79 	.word	0x08006a79
 8006a3c:	08006a79 	.word	0x08006a79
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006a40:	4b8d      	ldr	r3, [pc, #564]	; (8006c78 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006a42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a44:	4a8c      	ldr	r2, [pc, #560]	; (8006c78 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006a46:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006a4a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006a4c:	e015      	b.n	8006a7a <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	3304      	adds	r3, #4
 8006a52:	2100      	movs	r1, #0
 8006a54:	4618      	mov	r0, r3
 8006a56:	f001 f949 	bl	8007cec <RCCEx_PLL2_Config>
 8006a5a:	4603      	mov	r3, r0
 8006a5c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006a5e:	e00c      	b.n	8006a7a <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	3324      	adds	r3, #36	; 0x24
 8006a64:	2100      	movs	r1, #0
 8006a66:	4618      	mov	r0, r3
 8006a68:	f001 f9f2 	bl	8007e50 <RCCEx_PLL3_Config>
 8006a6c:	4603      	mov	r3, r0
 8006a6e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006a70:	e003      	b.n	8006a7a <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006a72:	2301      	movs	r3, #1
 8006a74:	75fb      	strb	r3, [r7, #23]
      break;
 8006a76:	e000      	b.n	8006a7a <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 8006a78:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006a7a:	7dfb      	ldrb	r3, [r7, #23]
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d109      	bne.n	8006a94 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006a80:	4b7d      	ldr	r3, [pc, #500]	; (8006c78 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006a82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a84:	f023 0207 	bic.w	r2, r3, #7
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a8c:	497a      	ldr	r1, [pc, #488]	; (8006c78 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006a8e:	4313      	orrs	r3, r2
 8006a90:	650b      	str	r3, [r1, #80]	; 0x50
 8006a92:	e001      	b.n	8006a98 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a94:	7dfb      	ldrb	r3, [r7, #23]
 8006a96:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d03e      	beq.n	8006b22 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006aa8:	2b80      	cmp	r3, #128	; 0x80
 8006aaa:	d01c      	beq.n	8006ae6 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8006aac:	2b80      	cmp	r3, #128	; 0x80
 8006aae:	d804      	bhi.n	8006aba <HAL_RCCEx_PeriphCLKConfig+0x142>
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d008      	beq.n	8006ac6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8006ab4:	2b40      	cmp	r3, #64	; 0x40
 8006ab6:	d00d      	beq.n	8006ad4 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8006ab8:	e01e      	b.n	8006af8 <HAL_RCCEx_PeriphCLKConfig+0x180>
 8006aba:	2bc0      	cmp	r3, #192	; 0xc0
 8006abc:	d01f      	beq.n	8006afe <HAL_RCCEx_PeriphCLKConfig+0x186>
 8006abe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006ac2:	d01e      	beq.n	8006b02 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8006ac4:	e018      	b.n	8006af8 <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006ac6:	4b6c      	ldr	r3, [pc, #432]	; (8006c78 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006ac8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006aca:	4a6b      	ldr	r2, [pc, #428]	; (8006c78 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006acc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006ad0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8006ad2:	e017      	b.n	8006b04 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	3304      	adds	r3, #4
 8006ad8:	2100      	movs	r1, #0
 8006ada:	4618      	mov	r0, r3
 8006adc:	f001 f906 	bl	8007cec <RCCEx_PLL2_Config>
 8006ae0:	4603      	mov	r3, r0
 8006ae2:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8006ae4:	e00e      	b.n	8006b04 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	3324      	adds	r3, #36	; 0x24
 8006aea:	2100      	movs	r1, #0
 8006aec:	4618      	mov	r0, r3
 8006aee:	f001 f9af 	bl	8007e50 <RCCEx_PLL3_Config>
 8006af2:	4603      	mov	r3, r0
 8006af4:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8006af6:	e005      	b.n	8006b04 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006af8:	2301      	movs	r3, #1
 8006afa:	75fb      	strb	r3, [r7, #23]
      break;
 8006afc:	e002      	b.n	8006b04 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 8006afe:	bf00      	nop
 8006b00:	e000      	b.n	8006b04 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 8006b02:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006b04:	7dfb      	ldrb	r3, [r7, #23]
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d109      	bne.n	8006b1e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8006b0a:	4b5b      	ldr	r3, [pc, #364]	; (8006c78 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006b0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b0e:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b16:	4958      	ldr	r1, [pc, #352]	; (8006c78 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006b18:	4313      	orrs	r3, r2
 8006b1a:	650b      	str	r3, [r1, #80]	; 0x50
 8006b1c:	e001      	b.n	8006b22 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b1e:	7dfb      	ldrb	r3, [r7, #23]
 8006b20:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d044      	beq.n	8006bb8 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006b34:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006b38:	d01f      	beq.n	8006b7a <HAL_RCCEx_PeriphCLKConfig+0x202>
 8006b3a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006b3e:	d805      	bhi.n	8006b4c <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d00a      	beq.n	8006b5a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8006b44:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006b48:	d00e      	beq.n	8006b68 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 8006b4a:	e01f      	b.n	8006b8c <HAL_RCCEx_PeriphCLKConfig+0x214>
 8006b4c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006b50:	d01f      	beq.n	8006b92 <HAL_RCCEx_PeriphCLKConfig+0x21a>
 8006b52:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006b56:	d01e      	beq.n	8006b96 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8006b58:	e018      	b.n	8006b8c <HAL_RCCEx_PeriphCLKConfig+0x214>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006b5a:	4b47      	ldr	r3, [pc, #284]	; (8006c78 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006b5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b5e:	4a46      	ldr	r2, [pc, #280]	; (8006c78 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006b60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006b64:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006b66:	e017      	b.n	8006b98 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	3304      	adds	r3, #4
 8006b6c:	2100      	movs	r1, #0
 8006b6e:	4618      	mov	r0, r3
 8006b70:	f001 f8bc 	bl	8007cec <RCCEx_PLL2_Config>
 8006b74:	4603      	mov	r3, r0
 8006b76:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8006b78:	e00e      	b.n	8006b98 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	3324      	adds	r3, #36	; 0x24
 8006b7e:	2100      	movs	r1, #0
 8006b80:	4618      	mov	r0, r3
 8006b82:	f001 f965 	bl	8007e50 <RCCEx_PLL3_Config>
 8006b86:	4603      	mov	r3, r0
 8006b88:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006b8a:	e005      	b.n	8006b98 <HAL_RCCEx_PeriphCLKConfig+0x220>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006b8c:	2301      	movs	r3, #1
 8006b8e:	75fb      	strb	r3, [r7, #23]
      break;
 8006b90:	e002      	b.n	8006b98 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8006b92:	bf00      	nop
 8006b94:	e000      	b.n	8006b98 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8006b96:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006b98:	7dfb      	ldrb	r3, [r7, #23]
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d10a      	bne.n	8006bb4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8006b9e:	4b36      	ldr	r3, [pc, #216]	; (8006c78 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006ba0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ba2:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006bac:	4932      	ldr	r1, [pc, #200]	; (8006c78 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006bae:	4313      	orrs	r3, r2
 8006bb0:	658b      	str	r3, [r1, #88]	; 0x58
 8006bb2:	e001      	b.n	8006bb8 <HAL_RCCEx_PeriphCLKConfig+0x240>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006bb4:	7dfb      	ldrb	r3, [r7, #23]
 8006bb6:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d044      	beq.n	8006c4e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006bca:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006bce:	d01f      	beq.n	8006c10 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8006bd0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006bd4:	d805      	bhi.n	8006be2 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d00a      	beq.n	8006bf0 <HAL_RCCEx_PeriphCLKConfig+0x278>
 8006bda:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006bde:	d00e      	beq.n	8006bfe <HAL_RCCEx_PeriphCLKConfig+0x286>
 8006be0:	e01f      	b.n	8006c22 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 8006be2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006be6:	d01f      	beq.n	8006c28 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8006be8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006bec:	d01e      	beq.n	8006c2c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8006bee:	e018      	b.n	8006c22 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006bf0:	4b21      	ldr	r3, [pc, #132]	; (8006c78 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006bf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bf4:	4a20      	ldr	r2, [pc, #128]	; (8006c78 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006bf6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006bfa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006bfc:	e017      	b.n	8006c2e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	3304      	adds	r3, #4
 8006c02:	2100      	movs	r1, #0
 8006c04:	4618      	mov	r0, r3
 8006c06:	f001 f871 	bl	8007cec <RCCEx_PLL2_Config>
 8006c0a:	4603      	mov	r3, r0
 8006c0c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8006c0e:	e00e      	b.n	8006c2e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	3324      	adds	r3, #36	; 0x24
 8006c14:	2100      	movs	r1, #0
 8006c16:	4618      	mov	r0, r3
 8006c18:	f001 f91a 	bl	8007e50 <RCCEx_PLL3_Config>
 8006c1c:	4603      	mov	r3, r0
 8006c1e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006c20:	e005      	b.n	8006c2e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006c22:	2301      	movs	r3, #1
 8006c24:	75fb      	strb	r3, [r7, #23]
      break;
 8006c26:	e002      	b.n	8006c2e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8006c28:	bf00      	nop
 8006c2a:	e000      	b.n	8006c2e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8006c2c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006c2e:	7dfb      	ldrb	r3, [r7, #23]
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d10a      	bne.n	8006c4a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8006c34:	4b10      	ldr	r3, [pc, #64]	; (8006c78 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006c36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c38:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006c42:	490d      	ldr	r1, [pc, #52]	; (8006c78 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006c44:	4313      	orrs	r3, r2
 8006c46:	658b      	str	r3, [r1, #88]	; 0x58
 8006c48:	e001      	b.n	8006c4e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c4a:	7dfb      	ldrb	r3, [r7, #23]
 8006c4c:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d035      	beq.n	8006cc6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c5e:	2b10      	cmp	r3, #16
 8006c60:	d00c      	beq.n	8006c7c <HAL_RCCEx_PeriphCLKConfig+0x304>
 8006c62:	2b10      	cmp	r3, #16
 8006c64:	d802      	bhi.n	8006c6c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d01b      	beq.n	8006ca2 <HAL_RCCEx_PeriphCLKConfig+0x32a>
 8006c6a:	e017      	b.n	8006c9c <HAL_RCCEx_PeriphCLKConfig+0x324>
 8006c6c:	2b20      	cmp	r3, #32
 8006c6e:	d00c      	beq.n	8006c8a <HAL_RCCEx_PeriphCLKConfig+0x312>
 8006c70:	2b30      	cmp	r3, #48	; 0x30
 8006c72:	d018      	beq.n	8006ca6 <HAL_RCCEx_PeriphCLKConfig+0x32e>
 8006c74:	e012      	b.n	8006c9c <HAL_RCCEx_PeriphCLKConfig+0x324>
 8006c76:	bf00      	nop
 8006c78:	58024400 	.word	0x58024400
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006c7c:	4baf      	ldr	r3, [pc, #700]	; (8006f3c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006c7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c80:	4aae      	ldr	r2, [pc, #696]	; (8006f3c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006c82:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006c86:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8006c88:	e00e      	b.n	8006ca8 <HAL_RCCEx_PeriphCLKConfig+0x330>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	3304      	adds	r3, #4
 8006c8e:	2102      	movs	r1, #2
 8006c90:	4618      	mov	r0, r3
 8006c92:	f001 f82b 	bl	8007cec <RCCEx_PLL2_Config>
 8006c96:	4603      	mov	r3, r0
 8006c98:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8006c9a:	e005      	b.n	8006ca8 <HAL_RCCEx_PeriphCLKConfig+0x330>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8006c9c:	2301      	movs	r3, #1
 8006c9e:	75fb      	strb	r3, [r7, #23]
      break;
 8006ca0:	e002      	b.n	8006ca8 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8006ca2:	bf00      	nop
 8006ca4:	e000      	b.n	8006ca8 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8006ca6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006ca8:	7dfb      	ldrb	r3, [r7, #23]
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d109      	bne.n	8006cc2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8006cae:	4ba3      	ldr	r3, [pc, #652]	; (8006f3c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006cb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006cb2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006cba:	49a0      	ldr	r1, [pc, #640]	; (8006f3c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006cbc:	4313      	orrs	r3, r2
 8006cbe:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006cc0:	e001      	b.n	8006cc6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006cc2:	7dfb      	ldrb	r3, [r7, #23]
 8006cc4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d042      	beq.n	8006d58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006cd6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006cda:	d01f      	beq.n	8006d1c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 8006cdc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006ce0:	d805      	bhi.n	8006cee <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d00a      	beq.n	8006cfc <HAL_RCCEx_PeriphCLKConfig+0x384>
 8006ce6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006cea:	d00e      	beq.n	8006d0a <HAL_RCCEx_PeriphCLKConfig+0x392>
 8006cec:	e01f      	b.n	8006d2e <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 8006cee:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006cf2:	d01f      	beq.n	8006d34 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8006cf4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006cf8:	d01e      	beq.n	8006d38 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 8006cfa:	e018      	b.n	8006d2e <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006cfc:	4b8f      	ldr	r3, [pc, #572]	; (8006f3c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006cfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d00:	4a8e      	ldr	r2, [pc, #568]	; (8006f3c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006d02:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006d06:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006d08:	e017      	b.n	8006d3a <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	3304      	adds	r3, #4
 8006d0e:	2100      	movs	r1, #0
 8006d10:	4618      	mov	r0, r3
 8006d12:	f000 ffeb 	bl	8007cec <RCCEx_PLL2_Config>
 8006d16:	4603      	mov	r3, r0
 8006d18:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006d1a:	e00e      	b.n	8006d3a <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	3324      	adds	r3, #36	; 0x24
 8006d20:	2100      	movs	r1, #0
 8006d22:	4618      	mov	r0, r3
 8006d24:	f001 f894 	bl	8007e50 <RCCEx_PLL3_Config>
 8006d28:	4603      	mov	r3, r0
 8006d2a:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006d2c:	e005      	b.n	8006d3a <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006d2e:	2301      	movs	r3, #1
 8006d30:	75fb      	strb	r3, [r7, #23]
      break;
 8006d32:	e002      	b.n	8006d3a <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8006d34:	bf00      	nop
 8006d36:	e000      	b.n	8006d3a <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8006d38:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006d3a:	7dfb      	ldrb	r3, [r7, #23]
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d109      	bne.n	8006d54 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8006d40:	4b7e      	ldr	r3, [pc, #504]	; (8006f3c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006d42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d44:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d4c:	497b      	ldr	r1, [pc, #492]	; (8006f3c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006d4e:	4313      	orrs	r3, r2
 8006d50:	650b      	str	r3, [r1, #80]	; 0x50
 8006d52:	e001      	b.n	8006d58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d54:	7dfb      	ldrb	r3, [r7, #23]
 8006d56:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d042      	beq.n	8006dea <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d68:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006d6c:	d01b      	beq.n	8006da6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8006d6e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006d72:	d805      	bhi.n	8006d80 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d022      	beq.n	8006dbe <HAL_RCCEx_PeriphCLKConfig+0x446>
 8006d78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d7c:	d00a      	beq.n	8006d94 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8006d7e:	e01b      	b.n	8006db8 <HAL_RCCEx_PeriphCLKConfig+0x440>
 8006d80:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006d84:	d01d      	beq.n	8006dc2 <HAL_RCCEx_PeriphCLKConfig+0x44a>
 8006d86:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006d8a:	d01c      	beq.n	8006dc6 <HAL_RCCEx_PeriphCLKConfig+0x44e>
 8006d8c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006d90:	d01b      	beq.n	8006dca <HAL_RCCEx_PeriphCLKConfig+0x452>
 8006d92:	e011      	b.n	8006db8 <HAL_RCCEx_PeriphCLKConfig+0x440>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	3304      	adds	r3, #4
 8006d98:	2101      	movs	r1, #1
 8006d9a:	4618      	mov	r0, r3
 8006d9c:	f000 ffa6 	bl	8007cec <RCCEx_PLL2_Config>
 8006da0:	4603      	mov	r3, r0
 8006da2:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8006da4:	e012      	b.n	8006dcc <HAL_RCCEx_PeriphCLKConfig+0x454>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	3324      	adds	r3, #36	; 0x24
 8006daa:	2101      	movs	r1, #1
 8006dac:	4618      	mov	r0, r3
 8006dae:	f001 f84f 	bl	8007e50 <RCCEx_PLL3_Config>
 8006db2:	4603      	mov	r3, r0
 8006db4:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8006db6:	e009      	b.n	8006dcc <HAL_RCCEx_PeriphCLKConfig+0x454>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006db8:	2301      	movs	r3, #1
 8006dba:	75fb      	strb	r3, [r7, #23]
      break;
 8006dbc:	e006      	b.n	8006dcc <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8006dbe:	bf00      	nop
 8006dc0:	e004      	b.n	8006dcc <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8006dc2:	bf00      	nop
 8006dc4:	e002      	b.n	8006dcc <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8006dc6:	bf00      	nop
 8006dc8:	e000      	b.n	8006dcc <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8006dca:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006dcc:	7dfb      	ldrb	r3, [r7, #23]
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d109      	bne.n	8006de6 <HAL_RCCEx_PeriphCLKConfig+0x46e>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8006dd2:	4b5a      	ldr	r3, [pc, #360]	; (8006f3c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006dd4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006dd6:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006dde:	4957      	ldr	r1, [pc, #348]	; (8006f3c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006de0:	4313      	orrs	r3, r2
 8006de2:	650b      	str	r3, [r1, #80]	; 0x50
 8006de4:	e001      	b.n	8006dea <HAL_RCCEx_PeriphCLKConfig+0x472>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006de6:	7dfb      	ldrb	r3, [r7, #23]
 8006de8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d044      	beq.n	8006e80 <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006dfc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006e00:	d01b      	beq.n	8006e3a <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8006e02:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006e06:	d805      	bhi.n	8006e14 <HAL_RCCEx_PeriphCLKConfig+0x49c>
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d022      	beq.n	8006e52 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8006e0c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006e10:	d00a      	beq.n	8006e28 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8006e12:	e01b      	b.n	8006e4c <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 8006e14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e18:	d01d      	beq.n	8006e56 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8006e1a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006e1e:	d01c      	beq.n	8006e5a <HAL_RCCEx_PeriphCLKConfig+0x4e2>
 8006e20:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006e24:	d01b      	beq.n	8006e5e <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8006e26:	e011      	b.n	8006e4c <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	3304      	adds	r3, #4
 8006e2c:	2101      	movs	r1, #1
 8006e2e:	4618      	mov	r0, r3
 8006e30:	f000 ff5c 	bl	8007cec <RCCEx_PLL2_Config>
 8006e34:	4603      	mov	r3, r0
 8006e36:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8006e38:	e012      	b.n	8006e60 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	3324      	adds	r3, #36	; 0x24
 8006e3e:	2101      	movs	r1, #1
 8006e40:	4618      	mov	r0, r3
 8006e42:	f001 f805 	bl	8007e50 <RCCEx_PLL3_Config>
 8006e46:	4603      	mov	r3, r0
 8006e48:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8006e4a:	e009      	b.n	8006e60 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      /* HSE,  oscillator is used as source of SPI6 clock */
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006e4c:	2301      	movs	r3, #1
 8006e4e:	75fb      	strb	r3, [r7, #23]
      break;
 8006e50:	e006      	b.n	8006e60 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8006e52:	bf00      	nop
 8006e54:	e004      	b.n	8006e60 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8006e56:	bf00      	nop
 8006e58:	e002      	b.n	8006e60 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8006e5a:	bf00      	nop
 8006e5c:	e000      	b.n	8006e60 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8006e5e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006e60:	7dfb      	ldrb	r3, [r7, #23]
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d10a      	bne.n	8006e7c <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8006e66:	4b35      	ldr	r3, [pc, #212]	; (8006f3c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006e68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e6a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006e74:	4931      	ldr	r1, [pc, #196]	; (8006f3c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006e76:	4313      	orrs	r3, r2
 8006e78:	658b      	str	r3, [r1, #88]	; 0x58
 8006e7a:	e001      	b.n	8006e80 <HAL_RCCEx_PeriphCLKConfig+0x508>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e7c:	7dfb      	ldrb	r3, [r7, #23]
 8006e7e:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d02d      	beq.n	8006ee8 <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006e90:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006e94:	d005      	beq.n	8006ea2 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8006e96:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006e9a:	d009      	beq.n	8006eb0 <HAL_RCCEx_PeriphCLKConfig+0x538>
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d013      	beq.n	8006ec8 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8006ea0:	e00f      	b.n	8006ec2 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006ea2:	4b26      	ldr	r3, [pc, #152]	; (8006f3c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006ea4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ea6:	4a25      	ldr	r2, [pc, #148]	; (8006f3c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006ea8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006eac:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8006eae:	e00c      	b.n	8006eca <HAL_RCCEx_PeriphCLKConfig+0x552>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	3304      	adds	r3, #4
 8006eb4:	2101      	movs	r1, #1
 8006eb6:	4618      	mov	r0, r3
 8006eb8:	f000 ff18 	bl	8007cec <RCCEx_PLL2_Config>
 8006ebc:	4603      	mov	r3, r0
 8006ebe:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8006ec0:	e003      	b.n	8006eca <HAL_RCCEx_PeriphCLKConfig+0x552>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006ec2:	2301      	movs	r3, #1
 8006ec4:	75fb      	strb	r3, [r7, #23]
      break;
 8006ec6:	e000      	b.n	8006eca <HAL_RCCEx_PeriphCLKConfig+0x552>
      break;
 8006ec8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006eca:	7dfb      	ldrb	r3, [r7, #23]
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d109      	bne.n	8006ee4 <HAL_RCCEx_PeriphCLKConfig+0x56c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006ed0:	4b1a      	ldr	r3, [pc, #104]	; (8006f3c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006ed2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ed4:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006edc:	4917      	ldr	r1, [pc, #92]	; (8006f3c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006ede:	4313      	orrs	r3, r2
 8006ee0:	650b      	str	r3, [r1, #80]	; 0x50
 8006ee2:	e001      	b.n	8006ee8 <HAL_RCCEx_PeriphCLKConfig+0x570>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ee4:	7dfb      	ldrb	r3, [r7, #23]
 8006ee6:	75bb      	strb	r3, [r7, #22]
    }
  }

#endif /*FDCAN1 || FDCAN2*/
  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d035      	beq.n	8006f60 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ef8:	2b03      	cmp	r3, #3
 8006efa:	d81b      	bhi.n	8006f34 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8006efc:	a201      	add	r2, pc, #4	; (adr r2, 8006f04 <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 8006efe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f02:	bf00      	nop
 8006f04:	08006f41 	.word	0x08006f41
 8006f08:	08006f15 	.word	0x08006f15
 8006f0c:	08006f23 	.word	0x08006f23
 8006f10:	08006f41 	.word	0x08006f41
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006f14:	4b09      	ldr	r3, [pc, #36]	; (8006f3c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006f16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f18:	4a08      	ldr	r2, [pc, #32]	; (8006f3c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006f1a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006f1e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8006f20:	e00f      	b.n	8006f42 <HAL_RCCEx_PeriphCLKConfig+0x5ca>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	3304      	adds	r3, #4
 8006f26:	2102      	movs	r1, #2
 8006f28:	4618      	mov	r0, r3
 8006f2a:	f000 fedf 	bl	8007cec <RCCEx_PLL2_Config>
 8006f2e:	4603      	mov	r3, r0
 8006f30:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8006f32:	e006      	b.n	8006f42 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    case RCC_FMCCLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8006f34:	2301      	movs	r3, #1
 8006f36:	75fb      	strb	r3, [r7, #23]
      break;
 8006f38:	e003      	b.n	8006f42 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 8006f3a:	bf00      	nop
 8006f3c:	58024400 	.word	0x58024400
      break;
 8006f40:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006f42:	7dfb      	ldrb	r3, [r7, #23]
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d109      	bne.n	8006f5c <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8006f48:	4bba      	ldr	r3, [pc, #744]	; (8007234 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006f4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f4c:	f023 0203 	bic.w	r2, r3, #3
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f54:	49b7      	ldr	r1, [pc, #732]	; (8007234 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006f56:	4313      	orrs	r3, r2
 8006f58:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006f5a:	e001      	b.n	8006f60 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f5c:	7dfb      	ldrb	r3, [r7, #23]
 8006f5e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	f000 8086 	beq.w	800707a <HAL_RCCEx_PeriphCLKConfig+0x702>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006f6e:	4bb2      	ldr	r3, [pc, #712]	; (8007238 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	4ab1      	ldr	r2, [pc, #708]	; (8007238 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8006f74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006f78:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006f7a:	f7fb fdc5 	bl	8002b08 <HAL_GetTick>
 8006f7e:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006f80:	e009      	b.n	8006f96 <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006f82:	f7fb fdc1 	bl	8002b08 <HAL_GetTick>
 8006f86:	4602      	mov	r2, r0
 8006f88:	693b      	ldr	r3, [r7, #16]
 8006f8a:	1ad3      	subs	r3, r2, r3
 8006f8c:	2b64      	cmp	r3, #100	; 0x64
 8006f8e:	d902      	bls.n	8006f96 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        ret = HAL_TIMEOUT;
 8006f90:	2303      	movs	r3, #3
 8006f92:	75fb      	strb	r3, [r7, #23]
        break;
 8006f94:	e005      	b.n	8006fa2 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006f96:	4ba8      	ldr	r3, [pc, #672]	; (8007238 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d0ef      	beq.n	8006f82 <HAL_RCCEx_PeriphCLKConfig+0x60a>
      }
    }

    if(ret == HAL_OK)
 8006fa2:	7dfb      	ldrb	r3, [r7, #23]
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d166      	bne.n	8007076 <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8006fa8:	4ba2      	ldr	r3, [pc, #648]	; (8007234 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006faa:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006fb2:	4053      	eors	r3, r2
 8006fb4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d013      	beq.n	8006fe4 <HAL_RCCEx_PeriphCLKConfig+0x66c>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006fbc:	4b9d      	ldr	r3, [pc, #628]	; (8007234 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006fbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006fc0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006fc4:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006fc6:	4b9b      	ldr	r3, [pc, #620]	; (8007234 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006fc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006fca:	4a9a      	ldr	r2, [pc, #616]	; (8007234 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006fcc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006fd0:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006fd2:	4b98      	ldr	r3, [pc, #608]	; (8007234 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006fd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006fd6:	4a97      	ldr	r2, [pc, #604]	; (8007234 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006fd8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006fdc:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8006fde:	4a95      	ldr	r2, [pc, #596]	; (8007234 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source, wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006fea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006fee:	d115      	bne.n	800701c <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ff0:	f7fb fd8a 	bl	8002b08 <HAL_GetTick>
 8006ff4:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006ff6:	e00b      	b.n	8007010 <HAL_RCCEx_PeriphCLKConfig+0x698>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006ff8:	f7fb fd86 	bl	8002b08 <HAL_GetTick>
 8006ffc:	4602      	mov	r2, r0
 8006ffe:	693b      	ldr	r3, [r7, #16]
 8007000:	1ad3      	subs	r3, r2, r3
 8007002:	f241 3288 	movw	r2, #5000	; 0x1388
 8007006:	4293      	cmp	r3, r2
 8007008:	d902      	bls.n	8007010 <HAL_RCCEx_PeriphCLKConfig+0x698>
          {
            ret = HAL_TIMEOUT;
 800700a:	2303      	movs	r3, #3
 800700c:	75fb      	strb	r3, [r7, #23]
            break;
 800700e:	e005      	b.n	800701c <HAL_RCCEx_PeriphCLKConfig+0x6a4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007010:	4b88      	ldr	r3, [pc, #544]	; (8007234 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007012:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007014:	f003 0302 	and.w	r3, r3, #2
 8007018:	2b00      	cmp	r3, #0
 800701a:	d0ed      	beq.n	8006ff8 <HAL_RCCEx_PeriphCLKConfig+0x680>
          }
        }
      }

      if(ret == HAL_OK)
 800701c:	7dfb      	ldrb	r3, [r7, #23]
 800701e:	2b00      	cmp	r3, #0
 8007020:	d126      	bne.n	8007070 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007028:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800702c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007030:	d10d      	bne.n	800704e <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 8007032:	4b80      	ldr	r3, [pc, #512]	; (8007234 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007034:	691b      	ldr	r3, [r3, #16]
 8007036:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007040:	0919      	lsrs	r1, r3, #4
 8007042:	4b7e      	ldr	r3, [pc, #504]	; (800723c <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 8007044:	400b      	ands	r3, r1
 8007046:	497b      	ldr	r1, [pc, #492]	; (8007234 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007048:	4313      	orrs	r3, r2
 800704a:	610b      	str	r3, [r1, #16]
 800704c:	e005      	b.n	800705a <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 800704e:	4b79      	ldr	r3, [pc, #484]	; (8007234 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007050:	691b      	ldr	r3, [r3, #16]
 8007052:	4a78      	ldr	r2, [pc, #480]	; (8007234 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007054:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8007058:	6113      	str	r3, [r2, #16]
 800705a:	4b76      	ldr	r3, [pc, #472]	; (8007234 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800705c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007064:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007068:	4972      	ldr	r1, [pc, #456]	; (8007234 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800706a:	4313      	orrs	r3, r2
 800706c:	670b      	str	r3, [r1, #112]	; 0x70
 800706e:	e004      	b.n	800707a <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007070:	7dfb      	ldrb	r3, [r7, #23]
 8007072:	75bb      	strb	r3, [r7, #22]
 8007074:	e001      	b.n	800707a <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007076:	7dfb      	ldrb	r3, [r7, #23]
 8007078:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	f003 0301 	and.w	r3, r3, #1
 8007082:	2b00      	cmp	r3, #0
 8007084:	d07d      	beq.n	8007182 <HAL_RCCEx_PeriphCLKConfig+0x80a>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800708a:	2b28      	cmp	r3, #40	; 0x28
 800708c:	d866      	bhi.n	800715c <HAL_RCCEx_PeriphCLKConfig+0x7e4>
 800708e:	a201      	add	r2, pc, #4	; (adr r2, 8007094 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8007090:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007094:	08007163 	.word	0x08007163
 8007098:	0800715d 	.word	0x0800715d
 800709c:	0800715d 	.word	0x0800715d
 80070a0:	0800715d 	.word	0x0800715d
 80070a4:	0800715d 	.word	0x0800715d
 80070a8:	0800715d 	.word	0x0800715d
 80070ac:	0800715d 	.word	0x0800715d
 80070b0:	0800715d 	.word	0x0800715d
 80070b4:	08007139 	.word	0x08007139
 80070b8:	0800715d 	.word	0x0800715d
 80070bc:	0800715d 	.word	0x0800715d
 80070c0:	0800715d 	.word	0x0800715d
 80070c4:	0800715d 	.word	0x0800715d
 80070c8:	0800715d 	.word	0x0800715d
 80070cc:	0800715d 	.word	0x0800715d
 80070d0:	0800715d 	.word	0x0800715d
 80070d4:	0800714b 	.word	0x0800714b
 80070d8:	0800715d 	.word	0x0800715d
 80070dc:	0800715d 	.word	0x0800715d
 80070e0:	0800715d 	.word	0x0800715d
 80070e4:	0800715d 	.word	0x0800715d
 80070e8:	0800715d 	.word	0x0800715d
 80070ec:	0800715d 	.word	0x0800715d
 80070f0:	0800715d 	.word	0x0800715d
 80070f4:	08007163 	.word	0x08007163
 80070f8:	0800715d 	.word	0x0800715d
 80070fc:	0800715d 	.word	0x0800715d
 8007100:	0800715d 	.word	0x0800715d
 8007104:	0800715d 	.word	0x0800715d
 8007108:	0800715d 	.word	0x0800715d
 800710c:	0800715d 	.word	0x0800715d
 8007110:	0800715d 	.word	0x0800715d
 8007114:	08007163 	.word	0x08007163
 8007118:	0800715d 	.word	0x0800715d
 800711c:	0800715d 	.word	0x0800715d
 8007120:	0800715d 	.word	0x0800715d
 8007124:	0800715d 	.word	0x0800715d
 8007128:	0800715d 	.word	0x0800715d
 800712c:	0800715d 	.word	0x0800715d
 8007130:	0800715d 	.word	0x0800715d
 8007134:	08007163 	.word	0x08007163
    case RCC_USART16CLKSOURCE_D2PCLK2: /* D2PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	3304      	adds	r3, #4
 800713c:	2101      	movs	r1, #1
 800713e:	4618      	mov	r0, r3
 8007140:	f000 fdd4 	bl	8007cec <RCCEx_PLL2_Config>
 8007144:	4603      	mov	r3, r0
 8007146:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8007148:	e00c      	b.n	8007164 <HAL_RCCEx_PeriphCLKConfig+0x7ec>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	3324      	adds	r3, #36	; 0x24
 800714e:	2101      	movs	r1, #1
 8007150:	4618      	mov	r0, r3
 8007152:	f000 fe7d 	bl	8007e50 <RCCEx_PLL3_Config>
 8007156:	4603      	mov	r3, r0
 8007158:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800715a:	e003      	b.n	8007164 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800715c:	2301      	movs	r3, #1
 800715e:	75fb      	strb	r3, [r7, #23]
      break;
 8007160:	e000      	b.n	8007164 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      break;
 8007162:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007164:	7dfb      	ldrb	r3, [r7, #23]
 8007166:	2b00      	cmp	r3, #0
 8007168:	d109      	bne.n	800717e <HAL_RCCEx_PeriphCLKConfig+0x806>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800716a:	4b32      	ldr	r3, [pc, #200]	; (8007234 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800716c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800716e:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007176:	492f      	ldr	r1, [pc, #188]	; (8007234 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007178:	4313      	orrs	r3, r2
 800717a:	654b      	str	r3, [r1, #84]	; 0x54
 800717c:	e001      	b.n	8007182 <HAL_RCCEx_PeriphCLKConfig+0x80a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800717e:	7dfb      	ldrb	r3, [r7, #23]
 8007180:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	f003 0302 	and.w	r3, r3, #2
 800718a:	2b00      	cmp	r3, #0
 800718c:	d037      	beq.n	80071fe <HAL_RCCEx_PeriphCLKConfig+0x886>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007192:	2b05      	cmp	r3, #5
 8007194:	d820      	bhi.n	80071d8 <HAL_RCCEx_PeriphCLKConfig+0x860>
 8007196:	a201      	add	r2, pc, #4	; (adr r2, 800719c <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8007198:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800719c:	080071df 	.word	0x080071df
 80071a0:	080071b5 	.word	0x080071b5
 80071a4:	080071c7 	.word	0x080071c7
 80071a8:	080071df 	.word	0x080071df
 80071ac:	080071df 	.word	0x080071df
 80071b0:	080071df 	.word	0x080071df
    case RCC_USART234578CLKSOURCE_D2PCLK1: /* D2PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	3304      	adds	r3, #4
 80071b8:	2101      	movs	r1, #1
 80071ba:	4618      	mov	r0, r3
 80071bc:	f000 fd96 	bl	8007cec <RCCEx_PLL2_Config>
 80071c0:	4603      	mov	r3, r0
 80071c2:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80071c4:	e00c      	b.n	80071e0 <HAL_RCCEx_PeriphCLKConfig+0x868>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	3324      	adds	r3, #36	; 0x24
 80071ca:	2101      	movs	r1, #1
 80071cc:	4618      	mov	r0, r3
 80071ce:	f000 fe3f 	bl	8007e50 <RCCEx_PLL3_Config>
 80071d2:	4603      	mov	r3, r0
 80071d4:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80071d6:	e003      	b.n	80071e0 <HAL_RCCEx_PeriphCLKConfig+0x868>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80071d8:	2301      	movs	r3, #1
 80071da:	75fb      	strb	r3, [r7, #23]
      break;
 80071dc:	e000      	b.n	80071e0 <HAL_RCCEx_PeriphCLKConfig+0x868>
      break;
 80071de:	bf00      	nop
    }

    if(ret == HAL_OK)
 80071e0:	7dfb      	ldrb	r3, [r7, #23]
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d109      	bne.n	80071fa <HAL_RCCEx_PeriphCLKConfig+0x882>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80071e6:	4b13      	ldr	r3, [pc, #76]	; (8007234 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80071e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071ea:	f023 0207 	bic.w	r2, r3, #7
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80071f2:	4910      	ldr	r1, [pc, #64]	; (8007234 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80071f4:	4313      	orrs	r3, r2
 80071f6:	654b      	str	r3, [r1, #84]	; 0x54
 80071f8:	e001      	b.n	80071fe <HAL_RCCEx_PeriphCLKConfig+0x886>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80071fa:	7dfb      	ldrb	r3, [r7, #23]
 80071fc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	f003 0304 	and.w	r3, r3, #4
 8007206:	2b00      	cmp	r3, #0
 8007208:	d040      	beq.n	800728c <HAL_RCCEx_PeriphCLKConfig+0x914>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007210:	2b05      	cmp	r3, #5
 8007212:	d827      	bhi.n	8007264 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 8007214:	a201      	add	r2, pc, #4	; (adr r2, 800721c <HAL_RCCEx_PeriphCLKConfig+0x8a4>)
 8007216:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800721a:	bf00      	nop
 800721c:	0800726b 	.word	0x0800726b
 8007220:	08007241 	.word	0x08007241
 8007224:	08007253 	.word	0x08007253
 8007228:	0800726b 	.word	0x0800726b
 800722c:	0800726b 	.word	0x0800726b
 8007230:	0800726b 	.word	0x0800726b
 8007234:	58024400 	.word	0x58024400
 8007238:	58024800 	.word	0x58024800
 800723c:	00ffffcf 	.word	0x00ffffcf
    case RCC_LPUART1CLKSOURCE_D3PCLK1: /* D3PCLK1 as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	3304      	adds	r3, #4
 8007244:	2101      	movs	r1, #1
 8007246:	4618      	mov	r0, r3
 8007248:	f000 fd50 	bl	8007cec <RCCEx_PLL2_Config>
 800724c:	4603      	mov	r3, r0
 800724e:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8007250:	e00c      	b.n	800726c <HAL_RCCEx_PeriphCLKConfig+0x8f4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	3324      	adds	r3, #36	; 0x24
 8007256:	2101      	movs	r1, #1
 8007258:	4618      	mov	r0, r3
 800725a:	f000 fdf9 	bl	8007e50 <RCCEx_PLL3_Config>
 800725e:	4603      	mov	r3, r0
 8007260:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8007262:	e003      	b.n	800726c <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007264:	2301      	movs	r3, #1
 8007266:	75fb      	strb	r3, [r7, #23]
      break;
 8007268:	e000      	b.n	800726c <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      break;
 800726a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800726c:	7dfb      	ldrb	r3, [r7, #23]
 800726e:	2b00      	cmp	r3, #0
 8007270:	d10a      	bne.n	8007288 <HAL_RCCEx_PeriphCLKConfig+0x910>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007272:	4bb3      	ldr	r3, [pc, #716]	; (8007540 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8007274:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007276:	f023 0207 	bic.w	r2, r3, #7
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007280:	49af      	ldr	r1, [pc, #700]	; (8007540 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8007282:	4313      	orrs	r3, r2
 8007284:	658b      	str	r3, [r1, #88]	; 0x58
 8007286:	e001      	b.n	800728c <HAL_RCCEx_PeriphCLKConfig+0x914>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007288:	7dfb      	ldrb	r3, [r7, #23]
 800728a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	f003 0320 	and.w	r3, r3, #32
 8007294:	2b00      	cmp	r3, #0
 8007296:	d044      	beq.n	8007322 <HAL_RCCEx_PeriphCLKConfig+0x9aa>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800729e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80072a2:	d01b      	beq.n	80072dc <HAL_RCCEx_PeriphCLKConfig+0x964>
 80072a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80072a8:	d805      	bhi.n	80072b6 <HAL_RCCEx_PeriphCLKConfig+0x93e>
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d022      	beq.n	80072f4 <HAL_RCCEx_PeriphCLKConfig+0x97c>
 80072ae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80072b2:	d00a      	beq.n	80072ca <HAL_RCCEx_PeriphCLKConfig+0x952>
 80072b4:	e01b      	b.n	80072ee <HAL_RCCEx_PeriphCLKConfig+0x976>
 80072b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80072ba:	d01d      	beq.n	80072f8 <HAL_RCCEx_PeriphCLKConfig+0x980>
 80072bc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80072c0:	d01c      	beq.n	80072fc <HAL_RCCEx_PeriphCLKConfig+0x984>
 80072c2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80072c6:	d01b      	beq.n	8007300 <HAL_RCCEx_PeriphCLKConfig+0x988>
 80072c8:	e011      	b.n	80072ee <HAL_RCCEx_PeriphCLKConfig+0x976>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	3304      	adds	r3, #4
 80072ce:	2100      	movs	r1, #0
 80072d0:	4618      	mov	r0, r3
 80072d2:	f000 fd0b 	bl	8007cec <RCCEx_PLL2_Config>
 80072d6:	4603      	mov	r3, r0
 80072d8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80072da:	e012      	b.n	8007302 <HAL_RCCEx_PeriphCLKConfig+0x98a>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	3324      	adds	r3, #36	; 0x24
 80072e0:	2102      	movs	r1, #2
 80072e2:	4618      	mov	r0, r3
 80072e4:	f000 fdb4 	bl	8007e50 <RCCEx_PLL3_Config>
 80072e8:	4603      	mov	r3, r0
 80072ea:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80072ec:	e009      	b.n	8007302 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80072ee:	2301      	movs	r3, #1
 80072f0:	75fb      	strb	r3, [r7, #23]
      break;
 80072f2:	e006      	b.n	8007302 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 80072f4:	bf00      	nop
 80072f6:	e004      	b.n	8007302 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 80072f8:	bf00      	nop
 80072fa:	e002      	b.n	8007302 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 80072fc:	bf00      	nop
 80072fe:	e000      	b.n	8007302 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8007300:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007302:	7dfb      	ldrb	r3, [r7, #23]
 8007304:	2b00      	cmp	r3, #0
 8007306:	d10a      	bne.n	800731e <HAL_RCCEx_PeriphCLKConfig+0x9a6>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007308:	4b8d      	ldr	r3, [pc, #564]	; (8007540 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 800730a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800730c:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007316:	498a      	ldr	r1, [pc, #552]	; (8007540 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8007318:	4313      	orrs	r3, r2
 800731a:	654b      	str	r3, [r1, #84]	; 0x54
 800731c:	e001      	b.n	8007322 <HAL_RCCEx_PeriphCLKConfig+0x9aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800731e:	7dfb      	ldrb	r3, [r7, #23]
 8007320:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800732a:	2b00      	cmp	r3, #0
 800732c:	d044      	beq.n	80073b8 <HAL_RCCEx_PeriphCLKConfig+0xa40>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007334:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007338:	d01b      	beq.n	8007372 <HAL_RCCEx_PeriphCLKConfig+0x9fa>
 800733a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800733e:	d805      	bhi.n	800734c <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 8007340:	2b00      	cmp	r3, #0
 8007342:	d022      	beq.n	800738a <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8007344:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007348:	d00a      	beq.n	8007360 <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 800734a:	e01b      	b.n	8007384 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
 800734c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007350:	d01d      	beq.n	800738e <HAL_RCCEx_PeriphCLKConfig+0xa16>
 8007352:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8007356:	d01c      	beq.n	8007392 <HAL_RCCEx_PeriphCLKConfig+0xa1a>
 8007358:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800735c:	d01b      	beq.n	8007396 <HAL_RCCEx_PeriphCLKConfig+0xa1e>
 800735e:	e011      	b.n	8007384 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	3304      	adds	r3, #4
 8007364:	2100      	movs	r1, #0
 8007366:	4618      	mov	r0, r3
 8007368:	f000 fcc0 	bl	8007cec <RCCEx_PLL2_Config>
 800736c:	4603      	mov	r3, r0
 800736e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8007370:	e012      	b.n	8007398 <HAL_RCCEx_PeriphCLKConfig+0xa20>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	3324      	adds	r3, #36	; 0x24
 8007376:	2102      	movs	r1, #2
 8007378:	4618      	mov	r0, r3
 800737a:	f000 fd69 	bl	8007e50 <RCCEx_PLL3_Config>
 800737e:	4603      	mov	r3, r0
 8007380:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8007382:	e009      	b.n	8007398 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007384:	2301      	movs	r3, #1
 8007386:	75fb      	strb	r3, [r7, #23]
      break;
 8007388:	e006      	b.n	8007398 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 800738a:	bf00      	nop
 800738c:	e004      	b.n	8007398 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 800738e:	bf00      	nop
 8007390:	e002      	b.n	8007398 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8007392:	bf00      	nop
 8007394:	e000      	b.n	8007398 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8007396:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007398:	7dfb      	ldrb	r3, [r7, #23]
 800739a:	2b00      	cmp	r3, #0
 800739c:	d10a      	bne.n	80073b4 <HAL_RCCEx_PeriphCLKConfig+0xa3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800739e:	4b68      	ldr	r3, [pc, #416]	; (8007540 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 80073a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80073a2:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80073ac:	4964      	ldr	r1, [pc, #400]	; (8007540 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 80073ae:	4313      	orrs	r3, r2
 80073b0:	658b      	str	r3, [r1, #88]	; 0x58
 80073b2:	e001      	b.n	80073b8 <HAL_RCCEx_PeriphCLKConfig+0xa40>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80073b4:	7dfb      	ldrb	r3, [r7, #23]
 80073b6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d044      	beq.n	800744e <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80073ca:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80073ce:	d01b      	beq.n	8007408 <HAL_RCCEx_PeriphCLKConfig+0xa90>
 80073d0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80073d4:	d805      	bhi.n	80073e2 <HAL_RCCEx_PeriphCLKConfig+0xa6a>
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d022      	beq.n	8007420 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 80073da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80073de:	d00a      	beq.n	80073f6 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 80073e0:	e01b      	b.n	800741a <HAL_RCCEx_PeriphCLKConfig+0xaa2>
 80073e2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80073e6:	d01d      	beq.n	8007424 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 80073e8:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80073ec:	d01c      	beq.n	8007428 <HAL_RCCEx_PeriphCLKConfig+0xab0>
 80073ee:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80073f2:	d01b      	beq.n	800742c <HAL_RCCEx_PeriphCLKConfig+0xab4>
 80073f4:	e011      	b.n	800741a <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    case RCC_LPTIM345CLKSOURCE_D3PCLK1:      /* D3PCLK1 as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	3304      	adds	r3, #4
 80073fa:	2100      	movs	r1, #0
 80073fc:	4618      	mov	r0, r3
 80073fe:	f000 fc75 	bl	8007cec <RCCEx_PLL2_Config>
 8007402:	4603      	mov	r3, r0
 8007404:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8007406:	e012      	b.n	800742e <HAL_RCCEx_PeriphCLKConfig+0xab6>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	3324      	adds	r3, #36	; 0x24
 800740c:	2102      	movs	r1, #2
 800740e:	4618      	mov	r0, r3
 8007410:	f000 fd1e 	bl	8007e50 <RCCEx_PLL3_Config>
 8007414:	4603      	mov	r3, r0
 8007416:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8007418:	e009      	b.n	800742e <HAL_RCCEx_PeriphCLKConfig+0xab6>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800741a:	2301      	movs	r3, #1
 800741c:	75fb      	strb	r3, [r7, #23]
      break;
 800741e:	e006      	b.n	800742e <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8007420:	bf00      	nop
 8007422:	e004      	b.n	800742e <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8007424:	bf00      	nop
 8007426:	e002      	b.n	800742e <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8007428:	bf00      	nop
 800742a:	e000      	b.n	800742e <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 800742c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800742e:	7dfb      	ldrb	r3, [r7, #23]
 8007430:	2b00      	cmp	r3, #0
 8007432:	d10a      	bne.n	800744a <HAL_RCCEx_PeriphCLKConfig+0xad2>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8007434:	4b42      	ldr	r3, [pc, #264]	; (8007540 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8007436:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007438:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007442:	493f      	ldr	r1, [pc, #252]	; (8007540 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8007444:	4313      	orrs	r3, r2
 8007446:	658b      	str	r3, [r1, #88]	; 0x58
 8007448:	e001      	b.n	800744e <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800744a:	7dfb      	ldrb	r3, [r7, #23]
 800744c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	f003 0308 	and.w	r3, r3, #8
 8007456:	2b00      	cmp	r3, #0
 8007458:	d01b      	beq.n	8007492 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007460:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007464:	d10b      	bne.n	800747e <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	3324      	adds	r3, #36	; 0x24
 800746a:	2102      	movs	r1, #2
 800746c:	4618      	mov	r0, r3
 800746e:	f000 fcef 	bl	8007e50 <RCCEx_PLL3_Config>
 8007472:	4603      	mov	r3, r0
 8007474:	2b00      	cmp	r3, #0
 8007476:	d00c      	beq.n	8007492 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
        {
          status = HAL_ERROR;
 8007478:	2301      	movs	r3, #1
 800747a:	75bb      	strb	r3, [r7, #22]
 800747c:	e009      	b.n	8007492 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
        }
    }

    else
    {
      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800747e:	4b30      	ldr	r3, [pc, #192]	; (8007540 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8007480:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007482:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800748c:	492c      	ldr	r1, [pc, #176]	; (8007540 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 800748e:	4313      	orrs	r3, r2
 8007490:	654b      	str	r3, [r1, #84]	; 0x54
    }

  }

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	f003 0310 	and.w	r3, r3, #16
 800749a:	2b00      	cmp	r3, #0
 800749c:	d01b      	beq.n	80074d6 <HAL_RCCEx_PeriphCLKConfig+0xb5e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80074a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80074a8:	d10b      	bne.n	80074c2 <HAL_RCCEx_PeriphCLKConfig+0xb4a>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	3324      	adds	r3, #36	; 0x24
 80074ae:	2102      	movs	r1, #2
 80074b0:	4618      	mov	r0, r3
 80074b2:	f000 fccd 	bl	8007e50 <RCCEx_PLL3_Config>
 80074b6:	4603      	mov	r3, r0
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d00c      	beq.n	80074d6 <HAL_RCCEx_PeriphCLKConfig+0xb5e>
      {
        status = HAL_ERROR;
 80074bc:	2301      	movs	r3, #1
 80074be:	75bb      	strb	r3, [r7, #22]
 80074c0:	e009      	b.n	80074d6 <HAL_RCCEx_PeriphCLKConfig+0xb5e>
      }
    }

    else
    {
      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80074c2:	4b1f      	ldr	r3, [pc, #124]	; (8007540 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 80074c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80074c6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80074d0:	491b      	ldr	r1, [pc, #108]	; (8007540 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 80074d2:	4313      	orrs	r3, r2
 80074d4:	658b      	str	r3, [r1, #88]	; 0x58
    }
  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d032      	beq.n	8007548 <HAL_RCCEx_PeriphCLKConfig+0xbd0>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80074e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80074ec:	d00d      	beq.n	800750a <HAL_RCCEx_PeriphCLKConfig+0xb92>
 80074ee:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80074f2:	d016      	beq.n	8007522 <HAL_RCCEx_PeriphCLKConfig+0xbaa>
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d111      	bne.n	800751c <HAL_RCCEx_PeriphCLKConfig+0xba4>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	3304      	adds	r3, #4
 80074fc:	2100      	movs	r1, #0
 80074fe:	4618      	mov	r0, r3
 8007500:	f000 fbf4 	bl	8007cec <RCCEx_PLL2_Config>
 8007504:	4603      	mov	r3, r0
 8007506:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8007508:	e00c      	b.n	8007524 <HAL_RCCEx_PeriphCLKConfig+0xbac>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	3324      	adds	r3, #36	; 0x24
 800750e:	2102      	movs	r1, #2
 8007510:	4618      	mov	r0, r3
 8007512:	f000 fc9d 	bl	8007e50 <RCCEx_PLL3_Config>
 8007516:	4603      	mov	r3, r0
 8007518:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800751a:	e003      	b.n	8007524 <HAL_RCCEx_PeriphCLKConfig+0xbac>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800751c:	2301      	movs	r3, #1
 800751e:	75fb      	strb	r3, [r7, #23]
      break;
 8007520:	e000      	b.n	8007524 <HAL_RCCEx_PeriphCLKConfig+0xbac>
      break;
 8007522:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007524:	7dfb      	ldrb	r3, [r7, #23]
 8007526:	2b00      	cmp	r3, #0
 8007528:	d10c      	bne.n	8007544 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800752a:	4b05      	ldr	r3, [pc, #20]	; (8007540 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 800752c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800752e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007538:	4901      	ldr	r1, [pc, #4]	; (8007540 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 800753a:	4313      	orrs	r3, r2
 800753c:	658b      	str	r3, [r1, #88]	; 0x58
 800753e:	e003      	b.n	8007548 <HAL_RCCEx_PeriphCLKConfig+0xbd0>
 8007540:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007544:	7dfb      	ldrb	r3, [r7, #23]
 8007546:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007550:	2b00      	cmp	r3, #0
 8007552:	d02f      	beq.n	80075b4 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800755a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800755e:	d00c      	beq.n	800757a <HAL_RCCEx_PeriphCLKConfig+0xc02>
 8007560:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007564:	d015      	beq.n	8007592 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 8007566:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800756a:	d10f      	bne.n	800758c <HAL_RCCEx_PeriphCLKConfig+0xc14>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800756c:	4b79      	ldr	r3, [pc, #484]	; (8007754 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 800756e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007570:	4a78      	ldr	r2, [pc, #480]	; (8007754 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8007572:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007576:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8007578:	e00c      	b.n	8007594 <HAL_RCCEx_PeriphCLKConfig+0xc1c>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	3324      	adds	r3, #36	; 0x24
 800757e:	2101      	movs	r1, #1
 8007580:	4618      	mov	r0, r3
 8007582:	f000 fc65 	bl	8007e50 <RCCEx_PLL3_Config>
 8007586:	4603      	mov	r3, r0
 8007588:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800758a:	e003      	b.n	8007594 <HAL_RCCEx_PeriphCLKConfig+0xc1c>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800758c:	2301      	movs	r3, #1
 800758e:	75fb      	strb	r3, [r7, #23]
      break;
 8007590:	e000      	b.n	8007594 <HAL_RCCEx_PeriphCLKConfig+0xc1c>
      break;
 8007592:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007594:	7dfb      	ldrb	r3, [r7, #23]
 8007596:	2b00      	cmp	r3, #0
 8007598:	d10a      	bne.n	80075b0 <HAL_RCCEx_PeriphCLKConfig+0xc38>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800759a:	4b6e      	ldr	r3, [pc, #440]	; (8007754 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 800759c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800759e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80075a8:	496a      	ldr	r1, [pc, #424]	; (8007754 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 80075aa:	4313      	orrs	r3, r2
 80075ac:	654b      	str	r3, [r1, #84]	; 0x54
 80075ae:	e001      	b.n	80075b4 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80075b0:	7dfb      	ldrb	r3, [r7, #23]
 80075b2:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d029      	beq.n	8007614 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d003      	beq.n	80075d0 <HAL_RCCEx_PeriphCLKConfig+0xc58>
 80075c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80075cc:	d007      	beq.n	80075de <HAL_RCCEx_PeriphCLKConfig+0xc66>
 80075ce:	e00f      	b.n	80075f0 <HAL_RCCEx_PeriphCLKConfig+0xc78>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80075d0:	4b60      	ldr	r3, [pc, #384]	; (8007754 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 80075d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075d4:	4a5f      	ldr	r2, [pc, #380]	; (8007754 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 80075d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80075da:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80075dc:	e00b      	b.n	80075f6 <HAL_RCCEx_PeriphCLKConfig+0xc7e>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	3304      	adds	r3, #4
 80075e2:	2102      	movs	r1, #2
 80075e4:	4618      	mov	r0, r3
 80075e6:	f000 fb81 	bl	8007cec <RCCEx_PLL2_Config>
 80075ea:	4603      	mov	r3, r0
 80075ec:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80075ee:	e002      	b.n	80075f6 <HAL_RCCEx_PeriphCLKConfig+0xc7e>

    default:
      ret = HAL_ERROR;
 80075f0:	2301      	movs	r3, #1
 80075f2:	75fb      	strb	r3, [r7, #23]
      break;
 80075f4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80075f6:	7dfb      	ldrb	r3, [r7, #23]
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d109      	bne.n	8007610 <HAL_RCCEx_PeriphCLKConfig+0xc98>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80075fc:	4b55      	ldr	r3, [pc, #340]	; (8007754 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 80075fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007600:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007608:	4952      	ldr	r1, [pc, #328]	; (8007754 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 800760a:	4313      	orrs	r3, r2
 800760c:	64cb      	str	r3, [r1, #76]	; 0x4c
 800760e:	e001      	b.n	8007614 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007610:	7dfb      	ldrb	r3, [r7, #23]
 8007612:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800761c:	2b00      	cmp	r3, #0
 800761e:	d00a      	beq.n	8007636 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	3324      	adds	r3, #36	; 0x24
 8007624:	2102      	movs	r1, #2
 8007626:	4618      	mov	r0, r3
 8007628:	f000 fc12 	bl	8007e50 <RCCEx_PLL3_Config>
 800762c:	4603      	mov	r3, r0
 800762e:	2b00      	cmp	r3, #0
 8007630:	d001      	beq.n	8007636 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    {
      status=HAL_ERROR;
 8007632:	2301      	movs	r3, #1
 8007634:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800763e:	2b00      	cmp	r3, #0
 8007640:	d02f      	beq.n	80076a2 <HAL_RCCEx_PeriphCLKConfig+0xd2a>
  {

    switch(PeriphClkInit->RngClockSelection)
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007646:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800764a:	d00c      	beq.n	8007666 <HAL_RCCEx_PeriphCLKConfig+0xcee>
 800764c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007650:	d802      	bhi.n	8007658 <HAL_RCCEx_PeriphCLKConfig+0xce0>
 8007652:	2b00      	cmp	r3, #0
 8007654:	d011      	beq.n	800767a <HAL_RCCEx_PeriphCLKConfig+0xd02>
 8007656:	e00d      	b.n	8007674 <HAL_RCCEx_PeriphCLKConfig+0xcfc>
 8007658:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800765c:	d00f      	beq.n	800767e <HAL_RCCEx_PeriphCLKConfig+0xd06>
 800765e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007662:	d00e      	beq.n	8007682 <HAL_RCCEx_PeriphCLKConfig+0xd0a>
 8007664:	e006      	b.n	8007674 <HAL_RCCEx_PeriphCLKConfig+0xcfc>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007666:	4b3b      	ldr	r3, [pc, #236]	; (8007754 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8007668:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800766a:	4a3a      	ldr	r2, [pc, #232]	; (8007754 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 800766c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007670:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8007672:	e007      	b.n	8007684 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007674:	2301      	movs	r3, #1
 8007676:	75fb      	strb	r3, [r7, #23]
      break;
 8007678:	e004      	b.n	8007684 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
      break;
 800767a:	bf00      	nop
 800767c:	e002      	b.n	8007684 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
      break;
 800767e:	bf00      	nop
 8007680:	e000      	b.n	8007684 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
      break;
 8007682:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007684:	7dfb      	ldrb	r3, [r7, #23]
 8007686:	2b00      	cmp	r3, #0
 8007688:	d109      	bne.n	800769e <HAL_RCCEx_PeriphCLKConfig+0xd26>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800768a:	4b32      	ldr	r3, [pc, #200]	; (8007754 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 800768c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800768e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007696:	492f      	ldr	r1, [pc, #188]	; (8007754 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8007698:	4313      	orrs	r3, r2
 800769a:	654b      	str	r3, [r1, #84]	; 0x54
 800769c:	e001      	b.n	80076a2 <HAL_RCCEx_PeriphCLKConfig+0xd2a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800769e:	7dfb      	ldrb	r3, [r7, #23]
 80076a0:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d008      	beq.n	80076c0 <HAL_RCCEx_PeriphCLKConfig+0xd48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80076ae:	4b29      	ldr	r3, [pc, #164]	; (8007754 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 80076b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80076b2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80076ba:	4926      	ldr	r1, [pc, #152]	; (8007754 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 80076bc:	4313      	orrs	r3, r2
 80076be:	650b      	str	r3, [r1, #80]	; 0x50
  }

  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d009      	beq.n	80076e0 <HAL_RCCEx_PeriphCLKConfig+0xd68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80076cc:	4b21      	ldr	r3, [pc, #132]	; (8007754 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 80076ce:	691b      	ldr	r3, [r3, #16]
 80076d0:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80076da:	491e      	ldr	r1, [pc, #120]	; (8007754 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 80076dc:	4313      	orrs	r3, r2
 80076de:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d008      	beq.n	80076fe <HAL_RCCEx_PeriphCLKConfig+0xd86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80076ec:	4b19      	ldr	r3, [pc, #100]	; (8007754 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 80076ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80076f0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80076f8:	4916      	ldr	r1, [pc, #88]	; (8007754 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 80076fa:	4313      	orrs	r3, r2
 80076fc:	650b      	str	r3, [r1, #80]	; 0x50
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007706:	2b00      	cmp	r3, #0
 8007708:	d00d      	beq.n	8007726 <HAL_RCCEx_PeriphCLKConfig+0xdae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800770a:	4b12      	ldr	r3, [pc, #72]	; (8007754 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 800770c:	691b      	ldr	r3, [r3, #16]
 800770e:	4a11      	ldr	r2, [pc, #68]	; (8007754 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8007710:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007714:	6113      	str	r3, [r2, #16]
 8007716:	4b0f      	ldr	r3, [pc, #60]	; (8007754 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8007718:	691a      	ldr	r2, [r3, #16]
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8007720:	490c      	ldr	r1, [pc, #48]	; (8007754 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8007722:	4313      	orrs	r3, r2
 8007724:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	2b00      	cmp	r3, #0
 800772c:	da08      	bge.n	8007740 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800772e:	4b09      	ldr	r3, [pc, #36]	; (8007754 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8007730:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007732:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800773a:	4906      	ldr	r1, [pc, #24]	; (8007754 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 800773c:	4313      	orrs	r3, r2
 800773e:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 8007740:	7dbb      	ldrb	r3, [r7, #22]
 8007742:	2b00      	cmp	r3, #0
 8007744:	d101      	bne.n	800774a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    return HAL_OK;
 8007746:	2300      	movs	r3, #0
 8007748:	e000      	b.n	800774c <HAL_RCCEx_PeriphCLKConfig+0xdd4>
  }
  return HAL_ERROR;
 800774a:	2301      	movs	r3, #1
}
 800774c:	4618      	mov	r0, r3
 800774e:	3718      	adds	r7, #24
 8007750:	46bd      	mov	sp, r7
 8007752:	bd80      	pop	{r7, pc}
 8007754:	58024400 	.word	0x58024400

08007758 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8007758:	b580      	push	{r7, lr}
 800775a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800775c:	f7ff f8c4 	bl	80068e8 <HAL_RCC_GetHCLKFreq>
 8007760:	4601      	mov	r1, r0
 8007762:	4b06      	ldr	r3, [pc, #24]	; (800777c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8007764:	6a1b      	ldr	r3, [r3, #32]
 8007766:	091b      	lsrs	r3, r3, #4
 8007768:	f003 0307 	and.w	r3, r3, #7
 800776c:	4a04      	ldr	r2, [pc, #16]	; (8007780 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800776e:	5cd3      	ldrb	r3, [r2, r3]
 8007770:	f003 031f 	and.w	r3, r3, #31
 8007774:	fa21 f303 	lsr.w	r3, r1, r3
}
 8007778:	4618      	mov	r0, r3
 800777a:	bd80      	pop	{r7, pc}
 800777c:	58024400 	.word	0x58024400
 8007780:	080119e8 	.word	0x080119e8

08007784 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8007784:	b480      	push	{r7}
 8007786:	b089      	sub	sp, #36	; 0x24
 8007788:	af00      	add	r7, sp, #0
 800778a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800778c:	4b9d      	ldr	r3, [pc, #628]	; (8007a04 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800778e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007790:	f003 0303 	and.w	r3, r3, #3
 8007794:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12)  ;
 8007796:	4b9b      	ldr	r3, [pc, #620]	; (8007a04 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007798:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800779a:	0b1b      	lsrs	r3, r3, #12
 800779c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80077a0:	617b      	str	r3, [r7, #20]
  pll2fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN;
 80077a2:	4b98      	ldr	r3, [pc, #608]	; (8007a04 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80077a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077a6:	f003 0310 	and.w	r3, r3, #16
 80077aa:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80077ac:	4b95      	ldr	r3, [pc, #596]	; (8007a04 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80077ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80077b0:	08db      	lsrs	r3, r3, #3
 80077b2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80077b6:	693a      	ldr	r2, [r7, #16]
 80077b8:	fb02 f303 	mul.w	r3, r2, r3
 80077bc:	ee07 3a90 	vmov	s15, r3
 80077c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80077c4:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80077c8:	697b      	ldr	r3, [r7, #20]
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	f000 810a 	beq.w	80079e4 <HAL_RCCEx_GetPLL2ClockFreq+0x260>
  {
    switch (pllsource)
 80077d0:	69bb      	ldr	r3, [r7, #24]
 80077d2:	2b01      	cmp	r3, #1
 80077d4:	d05a      	beq.n	800788c <HAL_RCCEx_GetPLL2ClockFreq+0x108>
 80077d6:	2b01      	cmp	r3, #1
 80077d8:	d302      	bcc.n	80077e0 <HAL_RCCEx_GetPLL2ClockFreq+0x5c>
 80077da:	2b02      	cmp	r3, #2
 80077dc:	d078      	beq.n	80078d0 <HAL_RCCEx_GetPLL2ClockFreq+0x14c>
 80077de:	e099      	b.n	8007914 <HAL_RCCEx_GetPLL2ClockFreq+0x190>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80077e0:	4b88      	ldr	r3, [pc, #544]	; (8007a04 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	f003 0320 	and.w	r3, r3, #32
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d02d      	beq.n	8007848 <HAL_RCCEx_GetPLL2ClockFreq+0xc4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80077ec:	4b85      	ldr	r3, [pc, #532]	; (8007a04 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	08db      	lsrs	r3, r3, #3
 80077f2:	f003 0303 	and.w	r3, r3, #3
 80077f6:	4a84      	ldr	r2, [pc, #528]	; (8007a08 <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 80077f8:	fa22 f303 	lsr.w	r3, r2, r3
 80077fc:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80077fe:	68bb      	ldr	r3, [r7, #8]
 8007800:	ee07 3a90 	vmov	s15, r3
 8007804:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007808:	697b      	ldr	r3, [r7, #20]
 800780a:	ee07 3a90 	vmov	s15, r3
 800780e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007812:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007816:	4b7b      	ldr	r3, [pc, #492]	; (8007a04 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007818:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800781a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800781e:	ee07 3a90 	vmov	s15, r3
 8007822:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007826:	ed97 6a03 	vldr	s12, [r7, #12]
 800782a:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007a0c <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 800782e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007832:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007836:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800783a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800783e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007842:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8007846:	e087      	b.n	8007958 <HAL_RCCEx_GetPLL2ClockFreq+0x1d4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007848:	697b      	ldr	r3, [r7, #20]
 800784a:	ee07 3a90 	vmov	s15, r3
 800784e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007852:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8007a10 <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 8007856:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800785a:	4b6a      	ldr	r3, [pc, #424]	; (8007a04 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800785c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800785e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007862:	ee07 3a90 	vmov	s15, r3
 8007866:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800786a:	ed97 6a03 	vldr	s12, [r7, #12]
 800786e:	eddf 5a67 	vldr	s11, [pc, #412]	; 8007a0c <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8007872:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007876:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800787a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800787e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007882:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007886:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800788a:	e065      	b.n	8007958 <HAL_RCCEx_GetPLL2ClockFreq+0x1d4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800788c:	697b      	ldr	r3, [r7, #20]
 800788e:	ee07 3a90 	vmov	s15, r3
 8007892:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007896:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8007a14 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 800789a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800789e:	4b59      	ldr	r3, [pc, #356]	; (8007a04 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80078a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80078a6:	ee07 3a90 	vmov	s15, r3
 80078aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80078ae:	ed97 6a03 	vldr	s12, [r7, #12]
 80078b2:	eddf 5a56 	vldr	s11, [pc, #344]	; 8007a0c <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80078b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80078ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80078be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80078c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80078c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80078ca:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80078ce:	e043      	b.n	8007958 <HAL_RCCEx_GetPLL2ClockFreq+0x1d4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80078d0:	697b      	ldr	r3, [r7, #20]
 80078d2:	ee07 3a90 	vmov	s15, r3
 80078d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80078da:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8007a18 <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 80078de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80078e2:	4b48      	ldr	r3, [pc, #288]	; (8007a04 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80078e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80078ea:	ee07 3a90 	vmov	s15, r3
 80078ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80078f2:	ed97 6a03 	vldr	s12, [r7, #12]
 80078f6:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007a0c <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80078fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80078fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007902:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007906:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800790a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800790e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007912:	e021      	b.n	8007958 <HAL_RCCEx_GetPLL2ClockFreq+0x1d4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007914:	697b      	ldr	r3, [r7, #20]
 8007916:	ee07 3a90 	vmov	s15, r3
 800791a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800791e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007a14 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8007922:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007926:	4b37      	ldr	r3, [pc, #220]	; (8007a04 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007928:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800792a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800792e:	ee07 3a90 	vmov	s15, r3
 8007932:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007936:	ed97 6a03 	vldr	s12, [r7, #12]
 800793a:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007a0c <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 800793e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007942:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007946:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800794a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800794e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007952:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007956:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8007958:	4b2a      	ldr	r3, [pc, #168]	; (8007a04 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800795a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800795c:	0a5b      	lsrs	r3, r3, #9
 800795e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007962:	ee07 3a90 	vmov	s15, r3
 8007966:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800796a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800796e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007972:	edd7 6a07 	vldr	s13, [r7, #28]
 8007976:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800797a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800797e:	ee17 2a90 	vmov	r2, s15
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8007986:	4b1f      	ldr	r3, [pc, #124]	; (8007a04 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007988:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800798a:	0c1b      	lsrs	r3, r3, #16
 800798c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007990:	ee07 3a90 	vmov	s15, r3
 8007994:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007998:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800799c:	ee37 7a87 	vadd.f32	s14, s15, s14
 80079a0:	edd7 6a07 	vldr	s13, [r7, #28]
 80079a4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80079a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80079ac:	ee17 2a90 	vmov	r2, s15
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 80079b4:	4b13      	ldr	r3, [pc, #76]	; (8007a04 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80079b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079b8:	0e1b      	lsrs	r3, r3, #24
 80079ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80079be:	ee07 3a90 	vmov	s15, r3
 80079c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80079c6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80079ca:	ee37 7a87 	vadd.f32	s14, s15, s14
 80079ce:	edd7 6a07 	vldr	s13, [r7, #28]
 80079d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80079d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80079da:	ee17 2a90 	vmov	r2, s15
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80079e2:	e008      	b.n	80079f6 <HAL_RCCEx_GetPLL2ClockFreq+0x272>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	2200      	movs	r2, #0
 80079e8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	2200      	movs	r2, #0
 80079ee:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	2200      	movs	r2, #0
 80079f4:	609a      	str	r2, [r3, #8]
}
 80079f6:	bf00      	nop
 80079f8:	3724      	adds	r7, #36	; 0x24
 80079fa:	46bd      	mov	sp, r7
 80079fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a00:	4770      	bx	lr
 8007a02:	bf00      	nop
 8007a04:	58024400 	.word	0x58024400
 8007a08:	03d09000 	.word	0x03d09000
 8007a0c:	46000000 	.word	0x46000000
 8007a10:	4c742400 	.word	0x4c742400
 8007a14:	4a742400 	.word	0x4a742400
 8007a18:	4bbebc20 	.word	0x4bbebc20

08007a1c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8007a1c:	b480      	push	{r7}
 8007a1e:	b089      	sub	sp, #36	; 0x24
 8007a20:	af00      	add	r7, sp, #0
 8007a22:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007a24:	4b9d      	ldr	r3, [pc, #628]	; (8007c9c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007a26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a28:	f003 0303 	and.w	r3, r3, #3
 8007a2c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8007a2e:	4b9b      	ldr	r3, [pc, #620]	; (8007c9c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007a30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a32:	0d1b      	lsrs	r3, r3, #20
 8007a34:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007a38:	617b      	str	r3, [r7, #20]
  pll3fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN;
 8007a3a:	4b98      	ldr	r3, [pc, #608]	; (8007c9c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007a3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a42:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8007a44:	4b95      	ldr	r3, [pc, #596]	; (8007c9c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007a46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a48:	08db      	lsrs	r3, r3, #3
 8007a4a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007a4e:	693a      	ldr	r2, [r7, #16]
 8007a50:	fb02 f303 	mul.w	r3, r2, r3
 8007a54:	ee07 3a90 	vmov	s15, r3
 8007a58:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a5c:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8007a60:	697b      	ldr	r3, [r7, #20]
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	f000 810a 	beq.w	8007c7c <HAL_RCCEx_GetPLL3ClockFreq+0x260>
  {
    switch (pllsource)
 8007a68:	69bb      	ldr	r3, [r7, #24]
 8007a6a:	2b01      	cmp	r3, #1
 8007a6c:	d05a      	beq.n	8007b24 <HAL_RCCEx_GetPLL3ClockFreq+0x108>
 8007a6e:	2b01      	cmp	r3, #1
 8007a70:	d302      	bcc.n	8007a78 <HAL_RCCEx_GetPLL3ClockFreq+0x5c>
 8007a72:	2b02      	cmp	r3, #2
 8007a74:	d078      	beq.n	8007b68 <HAL_RCCEx_GetPLL3ClockFreq+0x14c>
 8007a76:	e099      	b.n	8007bac <HAL_RCCEx_GetPLL3ClockFreq+0x190>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007a78:	4b88      	ldr	r3, [pc, #544]	; (8007c9c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	f003 0320 	and.w	r3, r3, #32
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d02d      	beq.n	8007ae0 <HAL_RCCEx_GetPLL3ClockFreq+0xc4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007a84:	4b85      	ldr	r3, [pc, #532]	; (8007c9c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	08db      	lsrs	r3, r3, #3
 8007a8a:	f003 0303 	and.w	r3, r3, #3
 8007a8e:	4a84      	ldr	r2, [pc, #528]	; (8007ca0 <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 8007a90:	fa22 f303 	lsr.w	r3, r2, r3
 8007a94:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007a96:	68bb      	ldr	r3, [r7, #8]
 8007a98:	ee07 3a90 	vmov	s15, r3
 8007a9c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007aa0:	697b      	ldr	r3, [r7, #20]
 8007aa2:	ee07 3a90 	vmov	s15, r3
 8007aa6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007aaa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007aae:	4b7b      	ldr	r3, [pc, #492]	; (8007c9c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ab2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ab6:	ee07 3a90 	vmov	s15, r3
 8007aba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007abe:	ed97 6a03 	vldr	s12, [r7, #12]
 8007ac2:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007ca4 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8007ac6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007aca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007ace:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007ad2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007ad6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007ada:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8007ade:	e087      	b.n	8007bf0 <HAL_RCCEx_GetPLL3ClockFreq+0x1d4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007ae0:	697b      	ldr	r3, [r7, #20]
 8007ae2:	ee07 3a90 	vmov	s15, r3
 8007ae6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007aea:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8007ca8 <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 8007aee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007af2:	4b6a      	ldr	r3, [pc, #424]	; (8007c9c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007af6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007afa:	ee07 3a90 	vmov	s15, r3
 8007afe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b02:	ed97 6a03 	vldr	s12, [r7, #12]
 8007b06:	eddf 5a67 	vldr	s11, [pc, #412]	; 8007ca4 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8007b0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007b0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007b12:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007b16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007b1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b1e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007b22:	e065      	b.n	8007bf0 <HAL_RCCEx_GetPLL3ClockFreq+0x1d4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007b24:	697b      	ldr	r3, [r7, #20]
 8007b26:	ee07 3a90 	vmov	s15, r3
 8007b2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b2e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8007cac <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8007b32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007b36:	4b59      	ldr	r3, [pc, #356]	; (8007c9c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b3e:	ee07 3a90 	vmov	s15, r3
 8007b42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b46:	ed97 6a03 	vldr	s12, [r7, #12]
 8007b4a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8007ca4 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8007b4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007b52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007b56:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007b5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007b5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b62:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007b66:	e043      	b.n	8007bf0 <HAL_RCCEx_GetPLL3ClockFreq+0x1d4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007b68:	697b      	ldr	r3, [r7, #20]
 8007b6a:	ee07 3a90 	vmov	s15, r3
 8007b6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b72:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8007cb0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 8007b76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007b7a:	4b48      	ldr	r3, [pc, #288]	; (8007c9c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b82:	ee07 3a90 	vmov	s15, r3
 8007b86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b8a:	ed97 6a03 	vldr	s12, [r7, #12]
 8007b8e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007ca4 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8007b92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007b96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007b9a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007b9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007ba2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007ba6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007baa:	e021      	b.n	8007bf0 <HAL_RCCEx_GetPLL3ClockFreq+0x1d4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007bac:	697b      	ldr	r3, [r7, #20]
 8007bae:	ee07 3a90 	vmov	s15, r3
 8007bb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007bb6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007cac <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8007bba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007bbe:	4b37      	ldr	r3, [pc, #220]	; (8007c9c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007bc6:	ee07 3a90 	vmov	s15, r3
 8007bca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007bce:	ed97 6a03 	vldr	s12, [r7, #12]
 8007bd2:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007ca4 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8007bd6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007bda:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007bde:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007be2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007be6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007bea:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007bee:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8007bf0:	4b2a      	ldr	r3, [pc, #168]	; (8007c9c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007bf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bf4:	0a5b      	lsrs	r3, r3, #9
 8007bf6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007bfa:	ee07 3a90 	vmov	s15, r3
 8007bfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c02:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007c06:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007c0a:	edd7 6a07 	vldr	s13, [r7, #28]
 8007c0e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007c12:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007c16:	ee17 2a90 	vmov	r2, s15
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8007c1e:	4b1f      	ldr	r3, [pc, #124]	; (8007c9c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c22:	0c1b      	lsrs	r3, r3, #16
 8007c24:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007c28:	ee07 3a90 	vmov	s15, r3
 8007c2c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c30:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007c34:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007c38:	edd7 6a07 	vldr	s13, [r7, #28]
 8007c3c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007c40:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007c44:	ee17 2a90 	vmov	r2, s15
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8007c4c:	4b13      	ldr	r3, [pc, #76]	; (8007c9c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007c4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c50:	0e1b      	lsrs	r3, r3, #24
 8007c52:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007c56:	ee07 3a90 	vmov	s15, r3
 8007c5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c5e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007c62:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007c66:	edd7 6a07 	vldr	s13, [r7, #28]
 8007c6a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007c6e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007c72:	ee17 2a90 	vmov	r2, s15
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8007c7a:	e008      	b.n	8007c8e <HAL_RCCEx_GetPLL3ClockFreq+0x272>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	2200      	movs	r2, #0
 8007c80:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	2200      	movs	r2, #0
 8007c86:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	2200      	movs	r2, #0
 8007c8c:	609a      	str	r2, [r3, #8]
}
 8007c8e:	bf00      	nop
 8007c90:	3724      	adds	r7, #36	; 0x24
 8007c92:	46bd      	mov	sp, r7
 8007c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c98:	4770      	bx	lr
 8007c9a:	bf00      	nop
 8007c9c:	58024400 	.word	0x58024400
 8007ca0:	03d09000 	.word	0x03d09000
 8007ca4:	46000000 	.word	0x46000000
 8007ca8:	4c742400 	.word	0x4c742400
 8007cac:	4a742400 	.word	0x4a742400
 8007cb0:	4bbebc20 	.word	0x4bbebc20

08007cb4 <HAL_RCCEx_GetD1SysClockFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCCEx_GetD1SysClockFreq(void)
{
 8007cb4:	b580      	push	{r7, lr}
 8007cb6:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8007cb8:	f7fe fca4 	bl	8006604 <HAL_RCC_GetSysClockFreq>
 8007cbc:	4601      	mov	r1, r0
 8007cbe:	4b08      	ldr	r3, [pc, #32]	; (8007ce0 <HAL_RCCEx_GetD1SysClockFreq+0x2c>)
 8007cc0:	699b      	ldr	r3, [r3, #24]
 8007cc2:	0a1b      	lsrs	r3, r3, #8
 8007cc4:	f003 030f 	and.w	r3, r3, #15
 8007cc8:	4a06      	ldr	r2, [pc, #24]	; (8007ce4 <HAL_RCCEx_GetD1SysClockFreq+0x30>)
 8007cca:	5cd3      	ldrb	r3, [r2, r3]
 8007ccc:	f003 031f 	and.w	r3, r3, #31
 8007cd0:	fa21 f303 	lsr.w	r3, r1, r3
 8007cd4:	4a04      	ldr	r2, [pc, #16]	; (8007ce8 <HAL_RCCEx_GetD1SysClockFreq+0x34>)
 8007cd6:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 8007cd8:	4b03      	ldr	r3, [pc, #12]	; (8007ce8 <HAL_RCCEx_GetD1SysClockFreq+0x34>)
 8007cda:	681b      	ldr	r3, [r3, #0]
}
 8007cdc:	4618      	mov	r0, r3
 8007cde:	bd80      	pop	{r7, pc}
 8007ce0:	58024400 	.word	0x58024400
 8007ce4:	080119e8 	.word	0x080119e8
 8007ce8:	24000088 	.word	0x24000088

08007cec <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007cec:	b580      	push	{r7, lr}
 8007cee:	b084      	sub	sp, #16
 8007cf0:	af00      	add	r7, sp, #0
 8007cf2:	6078      	str	r0, [r7, #4]
 8007cf4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007cf6:	2300      	movs	r3, #0
 8007cf8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007cfa:	4b53      	ldr	r3, [pc, #332]	; (8007e48 <RCCEx_PLL2_Config+0x15c>)
 8007cfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cfe:	f003 0303 	and.w	r3, r3, #3
 8007d02:	2b03      	cmp	r3, #3
 8007d04:	d101      	bne.n	8007d0a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8007d06:	2301      	movs	r3, #1
 8007d08:	e099      	b.n	8007e3e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8007d0a:	4b4f      	ldr	r3, [pc, #316]	; (8007e48 <RCCEx_PLL2_Config+0x15c>)
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	4a4e      	ldr	r2, [pc, #312]	; (8007e48 <RCCEx_PLL2_Config+0x15c>)
 8007d10:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007d14:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007d16:	f7fa fef7 	bl	8002b08 <HAL_GetTick>
 8007d1a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007d1c:	e008      	b.n	8007d30 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8007d1e:	f7fa fef3 	bl	8002b08 <HAL_GetTick>
 8007d22:	4602      	mov	r2, r0
 8007d24:	68bb      	ldr	r3, [r7, #8]
 8007d26:	1ad3      	subs	r3, r2, r3
 8007d28:	2b02      	cmp	r3, #2
 8007d2a:	d901      	bls.n	8007d30 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007d2c:	2303      	movs	r3, #3
 8007d2e:	e086      	b.n	8007e3e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007d30:	4b45      	ldr	r3, [pc, #276]	; (8007e48 <RCCEx_PLL2_Config+0x15c>)
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d1f0      	bne.n	8007d1e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007d3c:	4b42      	ldr	r3, [pc, #264]	; (8007e48 <RCCEx_PLL2_Config+0x15c>)
 8007d3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d40:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	031b      	lsls	r3, r3, #12
 8007d4a:	493f      	ldr	r1, [pc, #252]	; (8007e48 <RCCEx_PLL2_Config+0x15c>)
 8007d4c:	4313      	orrs	r3, r2
 8007d4e:	628b      	str	r3, [r1, #40]	; 0x28
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	685b      	ldr	r3, [r3, #4]
 8007d54:	3b01      	subs	r3, #1
 8007d56:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	689b      	ldr	r3, [r3, #8]
 8007d5e:	3b01      	subs	r3, #1
 8007d60:	025b      	lsls	r3, r3, #9
 8007d62:	b29b      	uxth	r3, r3
 8007d64:	431a      	orrs	r2, r3
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	68db      	ldr	r3, [r3, #12]
 8007d6a:	3b01      	subs	r3, #1
 8007d6c:	041b      	lsls	r3, r3, #16
 8007d6e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007d72:	431a      	orrs	r2, r3
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	691b      	ldr	r3, [r3, #16]
 8007d78:	3b01      	subs	r3, #1
 8007d7a:	061b      	lsls	r3, r3, #24
 8007d7c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007d80:	4931      	ldr	r1, [pc, #196]	; (8007e48 <RCCEx_PLL2_Config+0x15c>)
 8007d82:	4313      	orrs	r3, r2
 8007d84:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8007d86:	4b30      	ldr	r3, [pc, #192]	; (8007e48 <RCCEx_PLL2_Config+0x15c>)
 8007d88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d8a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	695b      	ldr	r3, [r3, #20]
 8007d92:	492d      	ldr	r1, [pc, #180]	; (8007e48 <RCCEx_PLL2_Config+0x15c>)
 8007d94:	4313      	orrs	r3, r2
 8007d96:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007d98:	4b2b      	ldr	r3, [pc, #172]	; (8007e48 <RCCEx_PLL2_Config+0x15c>)
 8007d9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d9c:	f023 0220 	bic.w	r2, r3, #32
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	699b      	ldr	r3, [r3, #24]
 8007da4:	4928      	ldr	r1, [pc, #160]	; (8007e48 <RCCEx_PLL2_Config+0x15c>)
 8007da6:	4313      	orrs	r3, r2
 8007da8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8007daa:	4b27      	ldr	r3, [pc, #156]	; (8007e48 <RCCEx_PLL2_Config+0x15c>)
 8007dac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dae:	4a26      	ldr	r2, [pc, #152]	; (8007e48 <RCCEx_PLL2_Config+0x15c>)
 8007db0:	f023 0310 	bic.w	r3, r3, #16
 8007db4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8007db6:	4b24      	ldr	r3, [pc, #144]	; (8007e48 <RCCEx_PLL2_Config+0x15c>)
 8007db8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007dba:	4b24      	ldr	r3, [pc, #144]	; (8007e4c <RCCEx_PLL2_Config+0x160>)
 8007dbc:	4013      	ands	r3, r2
 8007dbe:	687a      	ldr	r2, [r7, #4]
 8007dc0:	69d2      	ldr	r2, [r2, #28]
 8007dc2:	00d2      	lsls	r2, r2, #3
 8007dc4:	4920      	ldr	r1, [pc, #128]	; (8007e48 <RCCEx_PLL2_Config+0x15c>)
 8007dc6:	4313      	orrs	r3, r2
 8007dc8:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8007dca:	4b1f      	ldr	r3, [pc, #124]	; (8007e48 <RCCEx_PLL2_Config+0x15c>)
 8007dcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dce:	4a1e      	ldr	r2, [pc, #120]	; (8007e48 <RCCEx_PLL2_Config+0x15c>)
 8007dd0:	f043 0310 	orr.w	r3, r3, #16
 8007dd4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8007dd6:	683b      	ldr	r3, [r7, #0]
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d106      	bne.n	8007dea <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007ddc:	4b1a      	ldr	r3, [pc, #104]	; (8007e48 <RCCEx_PLL2_Config+0x15c>)
 8007dde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007de0:	4a19      	ldr	r2, [pc, #100]	; (8007e48 <RCCEx_PLL2_Config+0x15c>)
 8007de2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007de6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007de8:	e00f      	b.n	8007e0a <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8007dea:	683b      	ldr	r3, [r7, #0]
 8007dec:	2b01      	cmp	r3, #1
 8007dee:	d106      	bne.n	8007dfe <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007df0:	4b15      	ldr	r3, [pc, #84]	; (8007e48 <RCCEx_PLL2_Config+0x15c>)
 8007df2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007df4:	4a14      	ldr	r2, [pc, #80]	; (8007e48 <RCCEx_PLL2_Config+0x15c>)
 8007df6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007dfa:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007dfc:	e005      	b.n	8007e0a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8007dfe:	4b12      	ldr	r3, [pc, #72]	; (8007e48 <RCCEx_PLL2_Config+0x15c>)
 8007e00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e02:	4a11      	ldr	r2, [pc, #68]	; (8007e48 <RCCEx_PLL2_Config+0x15c>)
 8007e04:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007e08:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8007e0a:	4b0f      	ldr	r3, [pc, #60]	; (8007e48 <RCCEx_PLL2_Config+0x15c>)
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	4a0e      	ldr	r2, [pc, #56]	; (8007e48 <RCCEx_PLL2_Config+0x15c>)
 8007e10:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007e14:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007e16:	f7fa fe77 	bl	8002b08 <HAL_GetTick>
 8007e1a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007e1c:	e008      	b.n	8007e30 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8007e1e:	f7fa fe73 	bl	8002b08 <HAL_GetTick>
 8007e22:	4602      	mov	r2, r0
 8007e24:	68bb      	ldr	r3, [r7, #8]
 8007e26:	1ad3      	subs	r3, r2, r3
 8007e28:	2b02      	cmp	r3, #2
 8007e2a:	d901      	bls.n	8007e30 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007e2c:	2303      	movs	r3, #3
 8007e2e:	e006      	b.n	8007e3e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007e30:	4b05      	ldr	r3, [pc, #20]	; (8007e48 <RCCEx_PLL2_Config+0x15c>)
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d0f0      	beq.n	8007e1e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8007e3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e3e:	4618      	mov	r0, r3
 8007e40:	3710      	adds	r7, #16
 8007e42:	46bd      	mov	sp, r7
 8007e44:	bd80      	pop	{r7, pc}
 8007e46:	bf00      	nop
 8007e48:	58024400 	.word	0x58024400
 8007e4c:	ffff0007 	.word	0xffff0007

08007e50 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8007e50:	b580      	push	{r7, lr}
 8007e52:	b084      	sub	sp, #16
 8007e54:	af00      	add	r7, sp, #0
 8007e56:	6078      	str	r0, [r7, #4]
 8007e58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007e5a:	2300      	movs	r3, #0
 8007e5c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007e5e:	4b53      	ldr	r3, [pc, #332]	; (8007fac <RCCEx_PLL3_Config+0x15c>)
 8007e60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e62:	f003 0303 	and.w	r3, r3, #3
 8007e66:	2b03      	cmp	r3, #3
 8007e68:	d101      	bne.n	8007e6e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8007e6a:	2301      	movs	r3, #1
 8007e6c:	e099      	b.n	8007fa2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8007e6e:	4b4f      	ldr	r3, [pc, #316]	; (8007fac <RCCEx_PLL3_Config+0x15c>)
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	4a4e      	ldr	r2, [pc, #312]	; (8007fac <RCCEx_PLL3_Config+0x15c>)
 8007e74:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007e78:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007e7a:	f7fa fe45 	bl	8002b08 <HAL_GetTick>
 8007e7e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007e80:	e008      	b.n	8007e94 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8007e82:	f7fa fe41 	bl	8002b08 <HAL_GetTick>
 8007e86:	4602      	mov	r2, r0
 8007e88:	68bb      	ldr	r3, [r7, #8]
 8007e8a:	1ad3      	subs	r3, r2, r3
 8007e8c:	2b02      	cmp	r3, #2
 8007e8e:	d901      	bls.n	8007e94 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007e90:	2303      	movs	r3, #3
 8007e92:	e086      	b.n	8007fa2 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007e94:	4b45      	ldr	r3, [pc, #276]	; (8007fac <RCCEx_PLL3_Config+0x15c>)
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d1f0      	bne.n	8007e82 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8007ea0:	4b42      	ldr	r3, [pc, #264]	; (8007fac <RCCEx_PLL3_Config+0x15c>)
 8007ea2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ea4:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	051b      	lsls	r3, r3, #20
 8007eae:	493f      	ldr	r1, [pc, #252]	; (8007fac <RCCEx_PLL3_Config+0x15c>)
 8007eb0:	4313      	orrs	r3, r2
 8007eb2:	628b      	str	r3, [r1, #40]	; 0x28
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	685b      	ldr	r3, [r3, #4]
 8007eb8:	3b01      	subs	r3, #1
 8007eba:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	689b      	ldr	r3, [r3, #8]
 8007ec2:	3b01      	subs	r3, #1
 8007ec4:	025b      	lsls	r3, r3, #9
 8007ec6:	b29b      	uxth	r3, r3
 8007ec8:	431a      	orrs	r2, r3
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	68db      	ldr	r3, [r3, #12]
 8007ece:	3b01      	subs	r3, #1
 8007ed0:	041b      	lsls	r3, r3, #16
 8007ed2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007ed6:	431a      	orrs	r2, r3
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	691b      	ldr	r3, [r3, #16]
 8007edc:	3b01      	subs	r3, #1
 8007ede:	061b      	lsls	r3, r3, #24
 8007ee0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007ee4:	4931      	ldr	r1, [pc, #196]	; (8007fac <RCCEx_PLL3_Config+0x15c>)
 8007ee6:	4313      	orrs	r3, r2
 8007ee8:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8007eea:	4b30      	ldr	r3, [pc, #192]	; (8007fac <RCCEx_PLL3_Config+0x15c>)
 8007eec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007eee:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	695b      	ldr	r3, [r3, #20]
 8007ef6:	492d      	ldr	r1, [pc, #180]	; (8007fac <RCCEx_PLL3_Config+0x15c>)
 8007ef8:	4313      	orrs	r3, r2
 8007efa:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007efc:	4b2b      	ldr	r3, [pc, #172]	; (8007fac <RCCEx_PLL3_Config+0x15c>)
 8007efe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f00:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	699b      	ldr	r3, [r3, #24]
 8007f08:	4928      	ldr	r1, [pc, #160]	; (8007fac <RCCEx_PLL3_Config+0x15c>)
 8007f0a:	4313      	orrs	r3, r2
 8007f0c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8007f0e:	4b27      	ldr	r3, [pc, #156]	; (8007fac <RCCEx_PLL3_Config+0x15c>)
 8007f10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f12:	4a26      	ldr	r2, [pc, #152]	; (8007fac <RCCEx_PLL3_Config+0x15c>)
 8007f14:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007f18:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8007f1a:	4b24      	ldr	r3, [pc, #144]	; (8007fac <RCCEx_PLL3_Config+0x15c>)
 8007f1c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007f1e:	4b24      	ldr	r3, [pc, #144]	; (8007fb0 <RCCEx_PLL3_Config+0x160>)
 8007f20:	4013      	ands	r3, r2
 8007f22:	687a      	ldr	r2, [r7, #4]
 8007f24:	69d2      	ldr	r2, [r2, #28]
 8007f26:	00d2      	lsls	r2, r2, #3
 8007f28:	4920      	ldr	r1, [pc, #128]	; (8007fac <RCCEx_PLL3_Config+0x15c>)
 8007f2a:	4313      	orrs	r3, r2
 8007f2c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8007f2e:	4b1f      	ldr	r3, [pc, #124]	; (8007fac <RCCEx_PLL3_Config+0x15c>)
 8007f30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f32:	4a1e      	ldr	r2, [pc, #120]	; (8007fac <RCCEx_PLL3_Config+0x15c>)
 8007f34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007f38:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8007f3a:	683b      	ldr	r3, [r7, #0]
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d106      	bne.n	8007f4e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007f40:	4b1a      	ldr	r3, [pc, #104]	; (8007fac <RCCEx_PLL3_Config+0x15c>)
 8007f42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f44:	4a19      	ldr	r2, [pc, #100]	; (8007fac <RCCEx_PLL3_Config+0x15c>)
 8007f46:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8007f4a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007f4c:	e00f      	b.n	8007f6e <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8007f4e:	683b      	ldr	r3, [r7, #0]
 8007f50:	2b01      	cmp	r3, #1
 8007f52:	d106      	bne.n	8007f62 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007f54:	4b15      	ldr	r3, [pc, #84]	; (8007fac <RCCEx_PLL3_Config+0x15c>)
 8007f56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f58:	4a14      	ldr	r2, [pc, #80]	; (8007fac <RCCEx_PLL3_Config+0x15c>)
 8007f5a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007f5e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007f60:	e005      	b.n	8007f6e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8007f62:	4b12      	ldr	r3, [pc, #72]	; (8007fac <RCCEx_PLL3_Config+0x15c>)
 8007f64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f66:	4a11      	ldr	r2, [pc, #68]	; (8007fac <RCCEx_PLL3_Config+0x15c>)
 8007f68:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007f6c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8007f6e:	4b0f      	ldr	r3, [pc, #60]	; (8007fac <RCCEx_PLL3_Config+0x15c>)
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	4a0e      	ldr	r2, [pc, #56]	; (8007fac <RCCEx_PLL3_Config+0x15c>)
 8007f74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007f78:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007f7a:	f7fa fdc5 	bl	8002b08 <HAL_GetTick>
 8007f7e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007f80:	e008      	b.n	8007f94 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8007f82:	f7fa fdc1 	bl	8002b08 <HAL_GetTick>
 8007f86:	4602      	mov	r2, r0
 8007f88:	68bb      	ldr	r3, [r7, #8]
 8007f8a:	1ad3      	subs	r3, r2, r3
 8007f8c:	2b02      	cmp	r3, #2
 8007f8e:	d901      	bls.n	8007f94 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007f90:	2303      	movs	r3, #3
 8007f92:	e006      	b.n	8007fa2 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007f94:	4b05      	ldr	r3, [pc, #20]	; (8007fac <RCCEx_PLL3_Config+0x15c>)
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d0f0      	beq.n	8007f82 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8007fa0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fa2:	4618      	mov	r0, r3
 8007fa4:	3710      	adds	r7, #16
 8007fa6:	46bd      	mov	sp, r7
 8007fa8:	bd80      	pop	{r7, pc}
 8007faa:	bf00      	nop
 8007fac:	58024400 	.word	0x58024400
 8007fb0:	ffff0007 	.word	0xffff0007

08007fb4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007fb4:	b580      	push	{r7, lr}
 8007fb6:	b082      	sub	sp, #8
 8007fb8:	af00      	add	r7, sp, #0
 8007fba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d101      	bne.n	8007fc6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007fc2:	2301      	movs	r3, #1
 8007fc4:	e042      	b.n	800804c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d106      	bne.n	8007fde <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	2200      	movs	r2, #0
 8007fd4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007fd8:	6878      	ldr	r0, [r7, #4]
 8007fda:	f7fa f811 	bl	8002000 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	2224      	movs	r2, #36	; 0x24
 8007fe2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	681a      	ldr	r2, [r3, #0]
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	f022 0201 	bic.w	r2, r2, #1
 8007ff4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007ff6:	6878      	ldr	r0, [r7, #4]
 8007ff8:	f000 faca 	bl	8008590 <UART_SetConfig>
 8007ffc:	4603      	mov	r3, r0
 8007ffe:	2b01      	cmp	r3, #1
 8008000:	d101      	bne.n	8008006 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8008002:	2301      	movs	r3, #1
 8008004:	e022      	b.n	800804c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800800a:	2b00      	cmp	r3, #0
 800800c:	d002      	beq.n	8008014 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800800e:	6878      	ldr	r0, [r7, #4]
 8008010:	f002 fc3c 	bl	800a88c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	685a      	ldr	r2, [r3, #4]
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008022:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	689a      	ldr	r2, [r3, #8]
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008032:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	681a      	ldr	r2, [r3, #0]
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	f042 0201 	orr.w	r2, r2, #1
 8008042:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008044:	6878      	ldr	r0, [r7, #4]
 8008046:	f002 fcc3 	bl	800a9d0 <UART_CheckIdleState>
 800804a:	4603      	mov	r3, r0
}
 800804c:	4618      	mov	r0, r3
 800804e:	3708      	adds	r7, #8
 8008050:	46bd      	mov	sp, r7
 8008052:	bd80      	pop	{r7, pc}

08008054 <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8008054:	b580      	push	{r7, lr}
 8008056:	b082      	sub	sp, #8
 8008058:	af00      	add	r7, sp, #0
 800805a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	2b00      	cmp	r3, #0
 8008060:	d101      	bne.n	8008066 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8008062:	2301      	movs	r3, #1
 8008064:	e02b      	b.n	80080be <HAL_UART_DeInit+0x6a>
  }

  /* Check the parameters */
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));

  huart->gState = HAL_UART_STATE_BUSY;
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	2224      	movs	r2, #36	; 0x24
 800806a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	681a      	ldr	r2, [r3, #0]
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	f022 0201 	bic.w	r2, r2, #1
 800807c:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	2200      	movs	r2, #0
 8008084:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	2200      	movs	r2, #0
 800808c:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	2200      	movs	r2, #0
 8008094:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8008096:	6878      	ldr	r0, [r7, #4]
 8008098:	f7fa f804 	bl	80020a4 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	2200      	movs	r2, #0
 80080a0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->gState = HAL_UART_STATE_RESET;
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	2200      	movs	r2, #0
 80080a8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_RESET;
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	2200      	movs	r2, #0
 80080b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	2200      	movs	r2, #0
 80080b8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80080bc:	2300      	movs	r3, #0
}
 80080be:	4618      	mov	r0, r3
 80080c0:	3708      	adds	r7, #8
 80080c2:	46bd      	mov	sp, r7
 80080c4:	bd80      	pop	{r7, pc}

080080c6 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80080c6:	b580      	push	{r7, lr}
 80080c8:	b08a      	sub	sp, #40	; 0x28
 80080ca:	af02      	add	r7, sp, #8
 80080cc:	60f8      	str	r0, [r7, #12]
 80080ce:	60b9      	str	r1, [r7, #8]
 80080d0:	603b      	str	r3, [r7, #0]
 80080d2:	4613      	mov	r3, r2
 80080d4:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80080dc:	2b20      	cmp	r3, #32
 80080de:	f040 80bd 	bne.w	800825c <HAL_UART_Receive+0x196>
  {
    if ((pData == NULL) || (Size == 0U))
 80080e2:	68bb      	ldr	r3, [r7, #8]
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d002      	beq.n	80080ee <HAL_UART_Receive+0x28>
 80080e8:	88fb      	ldrh	r3, [r7, #6]
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d101      	bne.n	80080f2 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 80080ee:	2301      	movs	r3, #1
 80080f0:	e0b5      	b.n	800825e <HAL_UART_Receive+0x198>
    }

    __HAL_LOCK(huart);
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80080f8:	2b01      	cmp	r3, #1
 80080fa:	d101      	bne.n	8008100 <HAL_UART_Receive+0x3a>
 80080fc:	2302      	movs	r3, #2
 80080fe:	e0ae      	b.n	800825e <HAL_UART_Receive+0x198>
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	2201      	movs	r2, #1
 8008104:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	2200      	movs	r2, #0
 800810c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	2222      	movs	r2, #34	; 0x22
 8008114:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8008118:	f7fa fcf6 	bl	8002b08 <HAL_GetTick>
 800811c:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	88fa      	ldrh	r2, [r7, #6]
 8008122:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	88fa      	ldrh	r2, [r7, #6]
 800812a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	689b      	ldr	r3, [r3, #8]
 8008132:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008136:	d10e      	bne.n	8008156 <HAL_UART_Receive+0x90>
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	691b      	ldr	r3, [r3, #16]
 800813c:	2b00      	cmp	r3, #0
 800813e:	d105      	bne.n	800814c <HAL_UART_Receive+0x86>
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	f240 12ff 	movw	r2, #511	; 0x1ff
 8008146:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800814a:	e02d      	b.n	80081a8 <HAL_UART_Receive+0xe2>
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	22ff      	movs	r2, #255	; 0xff
 8008150:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008154:	e028      	b.n	80081a8 <HAL_UART_Receive+0xe2>
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	689b      	ldr	r3, [r3, #8]
 800815a:	2b00      	cmp	r3, #0
 800815c:	d10d      	bne.n	800817a <HAL_UART_Receive+0xb4>
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	691b      	ldr	r3, [r3, #16]
 8008162:	2b00      	cmp	r3, #0
 8008164:	d104      	bne.n	8008170 <HAL_UART_Receive+0xaa>
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	22ff      	movs	r2, #255	; 0xff
 800816a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800816e:	e01b      	b.n	80081a8 <HAL_UART_Receive+0xe2>
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	227f      	movs	r2, #127	; 0x7f
 8008174:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008178:	e016      	b.n	80081a8 <HAL_UART_Receive+0xe2>
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	689b      	ldr	r3, [r3, #8]
 800817e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008182:	d10d      	bne.n	80081a0 <HAL_UART_Receive+0xda>
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	691b      	ldr	r3, [r3, #16]
 8008188:	2b00      	cmp	r3, #0
 800818a:	d104      	bne.n	8008196 <HAL_UART_Receive+0xd0>
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	227f      	movs	r2, #127	; 0x7f
 8008190:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008194:	e008      	b.n	80081a8 <HAL_UART_Receive+0xe2>
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	223f      	movs	r2, #63	; 0x3f
 800819a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800819e:	e003      	b.n	80081a8 <HAL_UART_Receive+0xe2>
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	2200      	movs	r2, #0
 80081a4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80081ae:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	689b      	ldr	r3, [r3, #8]
 80081b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80081b8:	d108      	bne.n	80081cc <HAL_UART_Receive+0x106>
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	691b      	ldr	r3, [r3, #16]
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d104      	bne.n	80081cc <HAL_UART_Receive+0x106>
    {
      pdata8bits  = NULL;
 80081c2:	2300      	movs	r3, #0
 80081c4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80081c6:	68bb      	ldr	r3, [r7, #8]
 80081c8:	61bb      	str	r3, [r7, #24]
 80081ca:	e003      	b.n	80081d4 <HAL_UART_Receive+0x10e>
    }
    else
    {
      pdata8bits  = pData;
 80081cc:	68bb      	ldr	r3, [r7, #8]
 80081ce:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80081d0:	2300      	movs	r3, #0
 80081d2:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80081d4:	e032      	b.n	800823c <HAL_UART_Receive+0x176>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80081d6:	683b      	ldr	r3, [r7, #0]
 80081d8:	9300      	str	r3, [sp, #0]
 80081da:	697b      	ldr	r3, [r7, #20]
 80081dc:	2200      	movs	r2, #0
 80081de:	2120      	movs	r1, #32
 80081e0:	68f8      	ldr	r0, [r7, #12]
 80081e2:	f002 fc3d 	bl	800aa60 <UART_WaitOnFlagUntilTimeout>
 80081e6:	4603      	mov	r3, r0
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d001      	beq.n	80081f0 <HAL_UART_Receive+0x12a>
      {
        return HAL_TIMEOUT;
 80081ec:	2303      	movs	r3, #3
 80081ee:	e036      	b.n	800825e <HAL_UART_Receive+0x198>
      }
      if (pdata8bits == NULL)
 80081f0:	69fb      	ldr	r3, [r7, #28]
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d10c      	bne.n	8008210 <HAL_UART_Receive+0x14a>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081fc:	b29a      	uxth	r2, r3
 80081fe:	8a7b      	ldrh	r3, [r7, #18]
 8008200:	4013      	ands	r3, r2
 8008202:	b29a      	uxth	r2, r3
 8008204:	69bb      	ldr	r3, [r7, #24]
 8008206:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8008208:	69bb      	ldr	r3, [r7, #24]
 800820a:	3302      	adds	r3, #2
 800820c:	61bb      	str	r3, [r7, #24]
 800820e:	e00c      	b.n	800822a <HAL_UART_Receive+0x164>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008216:	b2da      	uxtb	r2, r3
 8008218:	8a7b      	ldrh	r3, [r7, #18]
 800821a:	b2db      	uxtb	r3, r3
 800821c:	4013      	ands	r3, r2
 800821e:	b2da      	uxtb	r2, r3
 8008220:	69fb      	ldr	r3, [r7, #28]
 8008222:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8008224:	69fb      	ldr	r3, [r7, #28]
 8008226:	3301      	adds	r3, #1
 8008228:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008230:	b29b      	uxth	r3, r3
 8008232:	3b01      	subs	r3, #1
 8008234:	b29a      	uxth	r2, r3
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008242:	b29b      	uxth	r3, r3
 8008244:	2b00      	cmp	r3, #0
 8008246:	d1c6      	bne.n	80081d6 <HAL_UART_Receive+0x110>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	2220      	movs	r2, #32
 800824c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    __HAL_UNLOCK(huart);
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	2200      	movs	r2, #0
 8008254:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8008258:	2300      	movs	r3, #0
 800825a:	e000      	b.n	800825e <HAL_UART_Receive+0x198>
  }
  else
  {
    return HAL_BUSY;
 800825c:	2302      	movs	r3, #2
  }
}
 800825e:	4618      	mov	r0, r3
 8008260:	3720      	adds	r7, #32
 8008262:	46bd      	mov	sp, r7
 8008264:	bd80      	pop	{r7, pc}
	...

08008268 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008268:	b580      	push	{r7, lr}
 800826a:	b088      	sub	sp, #32
 800826c:	af00      	add	r7, sp, #0
 800826e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	69db      	ldr	r3, [r3, #28]
 8008276:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	689b      	ldr	r3, [r3, #8]
 8008286:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008288:	69fa      	ldr	r2, [r7, #28]
 800828a:	f640 030f 	movw	r3, #2063	; 0x80f
 800828e:	4013      	ands	r3, r2
 8008290:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8008292:	693b      	ldr	r3, [r7, #16]
 8008294:	2b00      	cmp	r3, #0
 8008296:	d118      	bne.n	80082ca <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008298:	69fb      	ldr	r3, [r7, #28]
 800829a:	f003 0320 	and.w	r3, r3, #32
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d013      	beq.n	80082ca <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80082a2:	69bb      	ldr	r3, [r7, #24]
 80082a4:	f003 0320 	and.w	r3, r3, #32
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d104      	bne.n	80082b6 <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80082ac:	697b      	ldr	r3, [r7, #20]
 80082ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d009      	beq.n	80082ca <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	f000 8145 	beq.w	800854a <HAL_UART_IRQHandler+0x2e2>
      {
        huart->RxISR(huart);
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80082c4:	6878      	ldr	r0, [r7, #4]
 80082c6:	4798      	blx	r3
      }
      return;
 80082c8:	e13f      	b.n	800854a <HAL_UART_IRQHandler+0x2e2>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80082ca:	693b      	ldr	r3, [r7, #16]
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	f000 80e8 	beq.w	80084a2 <HAL_UART_IRQHandler+0x23a>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80082d2:	697a      	ldr	r2, [r7, #20]
 80082d4:	4ba1      	ldr	r3, [pc, #644]	; (800855c <HAL_UART_IRQHandler+0x2f4>)
 80082d6:	4013      	ands	r3, r2
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d105      	bne.n	80082e8 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80082dc:	69ba      	ldr	r2, [r7, #24]
 80082de:	4ba0      	ldr	r3, [pc, #640]	; (8008560 <HAL_UART_IRQHandler+0x2f8>)
 80082e0:	4013      	ands	r3, r2
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	f000 80dd 	beq.w	80084a2 <HAL_UART_IRQHandler+0x23a>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80082e8:	69fb      	ldr	r3, [r7, #28]
 80082ea:	f003 0301 	and.w	r3, r3, #1
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d010      	beq.n	8008314 <HAL_UART_IRQHandler+0xac>
 80082f2:	69bb      	ldr	r3, [r7, #24]
 80082f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d00b      	beq.n	8008314 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	2201      	movs	r2, #1
 8008302:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800830a:	f043 0201 	orr.w	r2, r3, #1
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008314:	69fb      	ldr	r3, [r7, #28]
 8008316:	f003 0302 	and.w	r3, r3, #2
 800831a:	2b00      	cmp	r3, #0
 800831c:	d010      	beq.n	8008340 <HAL_UART_IRQHandler+0xd8>
 800831e:	697b      	ldr	r3, [r7, #20]
 8008320:	f003 0301 	and.w	r3, r3, #1
 8008324:	2b00      	cmp	r3, #0
 8008326:	d00b      	beq.n	8008340 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	2202      	movs	r2, #2
 800832e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008336:	f043 0204 	orr.w	r2, r3, #4
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008340:	69fb      	ldr	r3, [r7, #28]
 8008342:	f003 0304 	and.w	r3, r3, #4
 8008346:	2b00      	cmp	r3, #0
 8008348:	d010      	beq.n	800836c <HAL_UART_IRQHandler+0x104>
 800834a:	697b      	ldr	r3, [r7, #20]
 800834c:	f003 0301 	and.w	r3, r3, #1
 8008350:	2b00      	cmp	r3, #0
 8008352:	d00b      	beq.n	800836c <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	2204      	movs	r2, #4
 800835a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008362:	f043 0202 	orr.w	r2, r3, #2
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800836c:	69fb      	ldr	r3, [r7, #28]
 800836e:	f003 0308 	and.w	r3, r3, #8
 8008372:	2b00      	cmp	r3, #0
 8008374:	d015      	beq.n	80083a2 <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008376:	69bb      	ldr	r3, [r7, #24]
 8008378:	f003 0320 	and.w	r3, r3, #32
 800837c:	2b00      	cmp	r3, #0
 800837e:	d104      	bne.n	800838a <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8008380:	697a      	ldr	r2, [r7, #20]
 8008382:	4b76      	ldr	r3, [pc, #472]	; (800855c <HAL_UART_IRQHandler+0x2f4>)
 8008384:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008386:	2b00      	cmp	r3, #0
 8008388:	d00b      	beq.n	80083a2 <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	2208      	movs	r2, #8
 8008390:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008398:	f043 0208 	orr.w	r2, r3, #8
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80083a2:	69fb      	ldr	r3, [r7, #28]
 80083a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d011      	beq.n	80083d0 <HAL_UART_IRQHandler+0x168>
 80083ac:	69bb      	ldr	r3, [r7, #24]
 80083ae:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d00c      	beq.n	80083d0 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80083be:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80083c6:	f043 0220 	orr.w	r2, r3, #32
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	f000 80b9 	beq.w	800854e <HAL_UART_IRQHandler+0x2e6>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80083dc:	69fb      	ldr	r3, [r7, #28]
 80083de:	f003 0320 	and.w	r3, r3, #32
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d011      	beq.n	800840a <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80083e6:	69bb      	ldr	r3, [r7, #24]
 80083e8:	f003 0320 	and.w	r3, r3, #32
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d104      	bne.n	80083fa <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80083f0:	697b      	ldr	r3, [r7, #20]
 80083f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d007      	beq.n	800840a <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d003      	beq.n	800840a <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008406:	6878      	ldr	r0, [r7, #4]
 8008408:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008410:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	689b      	ldr	r3, [r3, #8]
 8008418:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800841c:	2b40      	cmp	r3, #64	; 0x40
 800841e:	d004      	beq.n	800842a <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008426:	2b00      	cmp	r3, #0
 8008428:	d031      	beq.n	800848e <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800842a:	6878      	ldr	r0, [r7, #4]
 800842c:	f002 fb98 	bl	800ab60 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	689b      	ldr	r3, [r3, #8]
 8008436:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800843a:	2b40      	cmp	r3, #64	; 0x40
 800843c:	d123      	bne.n	8008486 <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	689a      	ldr	r2, [r3, #8]
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800844c:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008452:	2b00      	cmp	r3, #0
 8008454:	d013      	beq.n	800847e <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800845a:	4a42      	ldr	r2, [pc, #264]	; (8008564 <HAL_UART_IRQHandler+0x2fc>)
 800845c:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008462:	4618      	mov	r0, r3
 8008464:	f7fa fcca 	bl	8002dfc <HAL_DMA_Abort_IT>
 8008468:	4603      	mov	r3, r0
 800846a:	2b00      	cmp	r3, #0
 800846c:	d017      	beq.n	800849e <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008472:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008474:	687a      	ldr	r2, [r7, #4]
 8008476:	6f92      	ldr	r2, [r2, #120]	; 0x78
 8008478:	4610      	mov	r0, r2
 800847a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800847c:	e00f      	b.n	800849e <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800847e:	6878      	ldr	r0, [r7, #4]
 8008480:	f000 f87c 	bl	800857c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008484:	e00b      	b.n	800849e <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008486:	6878      	ldr	r0, [r7, #4]
 8008488:	f000 f878 	bl	800857c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800848c:	e007      	b.n	800849e <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800848e:	6878      	ldr	r0, [r7, #4]
 8008490:	f000 f874 	bl	800857c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	2200      	movs	r2, #0
 8008498:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      }
    }
    return;
 800849c:	e057      	b.n	800854e <HAL_UART_IRQHandler+0x2e6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800849e:	bf00      	nop
    return;
 80084a0:	e055      	b.n	800854e <HAL_UART_IRQHandler+0x2e6>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80084a2:	69fb      	ldr	r3, [r7, #28]
 80084a4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d00d      	beq.n	80084c8 <HAL_UART_IRQHandler+0x260>
 80084ac:	697b      	ldr	r3, [r7, #20]
 80084ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d008      	beq.n	80084c8 <HAL_UART_IRQHandler+0x260>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80084be:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80084c0:	6878      	ldr	r0, [r7, #4]
 80084c2:	f002 fba1 	bl	800ac08 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80084c6:	e045      	b.n	8008554 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80084c8:	69fb      	ldr	r3, [r7, #28]
 80084ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d012      	beq.n	80084f8 <HAL_UART_IRQHandler+0x290>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80084d2:	69bb      	ldr	r3, [r7, #24]
 80084d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d104      	bne.n	80084e6 <HAL_UART_IRQHandler+0x27e>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80084dc:	697b      	ldr	r3, [r7, #20]
 80084de:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d008      	beq.n	80084f8 <HAL_UART_IRQHandler+0x290>
  {
    if (huart->TxISR != NULL)
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d031      	beq.n	8008552 <HAL_UART_IRQHandler+0x2ea>
    {
      huart->TxISR(huart);
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80084f2:	6878      	ldr	r0, [r7, #4]
 80084f4:	4798      	blx	r3
    }
    return;
 80084f6:	e02c      	b.n	8008552 <HAL_UART_IRQHandler+0x2ea>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80084f8:	69fb      	ldr	r3, [r7, #28]
 80084fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d008      	beq.n	8008514 <HAL_UART_IRQHandler+0x2ac>
 8008502:	69bb      	ldr	r3, [r7, #24]
 8008504:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008508:	2b00      	cmp	r3, #0
 800850a:	d003      	beq.n	8008514 <HAL_UART_IRQHandler+0x2ac>
  {
    UART_EndTransmit_IT(huart);
 800850c:	6878      	ldr	r0, [r7, #4]
 800850e:	f002 fb61 	bl	800abd4 <UART_EndTransmit_IT>
    return;
 8008512:	e01f      	b.n	8008554 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8008514:	69fb      	ldr	r3, [r7, #28]
 8008516:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800851a:	2b00      	cmp	r3, #0
 800851c:	d008      	beq.n	8008530 <HAL_UART_IRQHandler+0x2c8>
 800851e:	69bb      	ldr	r3, [r7, #24]
 8008520:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008524:	2b00      	cmp	r3, #0
 8008526:	d003      	beq.n	8008530 <HAL_UART_IRQHandler+0x2c8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8008528:	6878      	ldr	r0, [r7, #4]
 800852a:	f002 fb81 	bl	800ac30 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800852e:	e011      	b.n	8008554 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8008530:	69fb      	ldr	r3, [r7, #28]
 8008532:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008536:	2b00      	cmp	r3, #0
 8008538:	d00c      	beq.n	8008554 <HAL_UART_IRQHandler+0x2ec>
 800853a:	69bb      	ldr	r3, [r7, #24]
 800853c:	2b00      	cmp	r3, #0
 800853e:	da09      	bge.n	8008554 <HAL_UART_IRQHandler+0x2ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8008540:	6878      	ldr	r0, [r7, #4]
 8008542:	f002 fb6b 	bl	800ac1c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008546:	bf00      	nop
 8008548:	e004      	b.n	8008554 <HAL_UART_IRQHandler+0x2ec>
      return;
 800854a:	bf00      	nop
 800854c:	e002      	b.n	8008554 <HAL_UART_IRQHandler+0x2ec>
    return;
 800854e:	bf00      	nop
 8008550:	e000      	b.n	8008554 <HAL_UART_IRQHandler+0x2ec>
    return;
 8008552:	bf00      	nop
  }
}
 8008554:	3720      	adds	r7, #32
 8008556:	46bd      	mov	sp, r7
 8008558:	bd80      	pop	{r7, pc}
 800855a:	bf00      	nop
 800855c:	10000001 	.word	0x10000001
 8008560:	04000120 	.word	0x04000120
 8008564:	0800aba9 	.word	0x0800aba9

08008568 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008568:	b480      	push	{r7}
 800856a:	b083      	sub	sp, #12
 800856c:	af00      	add	r7, sp, #0
 800856e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8008570:	bf00      	nop
 8008572:	370c      	adds	r7, #12
 8008574:	46bd      	mov	sp, r7
 8008576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800857a:	4770      	bx	lr

0800857c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800857c:	b480      	push	{r7}
 800857e:	b083      	sub	sp, #12
 8008580:	af00      	add	r7, sp, #0
 8008582:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008584:	bf00      	nop
 8008586:	370c      	adds	r7, #12
 8008588:	46bd      	mov	sp, r7
 800858a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800858e:	4770      	bx	lr

08008590 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008590:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8008594:	b090      	sub	sp, #64	; 0x40
 8008596:	af00      	add	r7, sp, #0
 8008598:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800859a:	2300      	movs	r3, #0
 800859c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_StatusTypeDef ret               = HAL_OK;
 800859e:	2300      	movs	r3, #0
 80085a0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 80085a4:	2300      	movs	r3, #0
 80085a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	689a      	ldr	r2, [r3, #8]
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	691b      	ldr	r3, [r3, #16]
 80085b0:	431a      	orrs	r2, r3
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	695b      	ldr	r3, [r3, #20]
 80085b6:	431a      	orrs	r2, r3
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	69db      	ldr	r3, [r3, #28]
 80085bc:	4313      	orrs	r3, r2
 80085be:	63fb      	str	r3, [r7, #60]	; 0x3c
  tmpreg |= (uint32_t)huart->FifoMode;
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80085c4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80085c6:	4313      	orrs	r3, r2
 80085c8:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	681a      	ldr	r2, [r3, #0]
 80085d0:	4bc1      	ldr	r3, [pc, #772]	; (80088d8 <UART_SetConfig+0x348>)
 80085d2:	4013      	ands	r3, r2
 80085d4:	687a      	ldr	r2, [r7, #4]
 80085d6:	6812      	ldr	r2, [r2, #0]
 80085d8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80085da:	430b      	orrs	r3, r1
 80085dc:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	685b      	ldr	r3, [r3, #4]
 80085e4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	68da      	ldr	r2, [r3, #12]
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	430a      	orrs	r2, r1
 80085f2:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	699b      	ldr	r3, [r3, #24]
 80085f8:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	4ab7      	ldr	r2, [pc, #732]	; (80088dc <UART_SetConfig+0x34c>)
 8008600:	4293      	cmp	r3, r2
 8008602:	d004      	beq.n	800860e <UART_SetConfig+0x7e>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	6a1b      	ldr	r3, [r3, #32]
 8008608:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800860a:	4313      	orrs	r3, r2
 800860c:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	689a      	ldr	r2, [r3, #8]
 8008614:	4bb2      	ldr	r3, [pc, #712]	; (80088e0 <UART_SetConfig+0x350>)
 8008616:	4013      	ands	r3, r2
 8008618:	687a      	ldr	r2, [r7, #4]
 800861a:	6812      	ldr	r2, [r2, #0]
 800861c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800861e:	430b      	orrs	r3, r1
 8008620:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008628:	f023 010f 	bic.w	r1, r3, #15
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	430a      	orrs	r2, r1
 8008636:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	4aa9      	ldr	r2, [pc, #676]	; (80088e4 <UART_SetConfig+0x354>)
 800863e:	4293      	cmp	r3, r2
 8008640:	d177      	bne.n	8008732 <UART_SetConfig+0x1a2>
 8008642:	4ba9      	ldr	r3, [pc, #676]	; (80088e8 <UART_SetConfig+0x358>)
 8008644:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008646:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800864a:	2b28      	cmp	r3, #40	; 0x28
 800864c:	d86c      	bhi.n	8008728 <UART_SetConfig+0x198>
 800864e:	a201      	add	r2, pc, #4	; (adr r2, 8008654 <UART_SetConfig+0xc4>)
 8008650:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008654:	080086f9 	.word	0x080086f9
 8008658:	08008729 	.word	0x08008729
 800865c:	08008729 	.word	0x08008729
 8008660:	08008729 	.word	0x08008729
 8008664:	08008729 	.word	0x08008729
 8008668:	08008729 	.word	0x08008729
 800866c:	08008729 	.word	0x08008729
 8008670:	08008729 	.word	0x08008729
 8008674:	08008701 	.word	0x08008701
 8008678:	08008729 	.word	0x08008729
 800867c:	08008729 	.word	0x08008729
 8008680:	08008729 	.word	0x08008729
 8008684:	08008729 	.word	0x08008729
 8008688:	08008729 	.word	0x08008729
 800868c:	08008729 	.word	0x08008729
 8008690:	08008729 	.word	0x08008729
 8008694:	08008709 	.word	0x08008709
 8008698:	08008729 	.word	0x08008729
 800869c:	08008729 	.word	0x08008729
 80086a0:	08008729 	.word	0x08008729
 80086a4:	08008729 	.word	0x08008729
 80086a8:	08008729 	.word	0x08008729
 80086ac:	08008729 	.word	0x08008729
 80086b0:	08008729 	.word	0x08008729
 80086b4:	08008711 	.word	0x08008711
 80086b8:	08008729 	.word	0x08008729
 80086bc:	08008729 	.word	0x08008729
 80086c0:	08008729 	.word	0x08008729
 80086c4:	08008729 	.word	0x08008729
 80086c8:	08008729 	.word	0x08008729
 80086cc:	08008729 	.word	0x08008729
 80086d0:	08008729 	.word	0x08008729
 80086d4:	08008719 	.word	0x08008719
 80086d8:	08008729 	.word	0x08008729
 80086dc:	08008729 	.word	0x08008729
 80086e0:	08008729 	.word	0x08008729
 80086e4:	08008729 	.word	0x08008729
 80086e8:	08008729 	.word	0x08008729
 80086ec:	08008729 	.word	0x08008729
 80086f0:	08008729 	.word	0x08008729
 80086f4:	08008721 	.word	0x08008721
 80086f8:	2301      	movs	r3, #1
 80086fa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80086fe:	e233      	b.n	8008b68 <UART_SetConfig+0x5d8>
 8008700:	2304      	movs	r3, #4
 8008702:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008706:	e22f      	b.n	8008b68 <UART_SetConfig+0x5d8>
 8008708:	2308      	movs	r3, #8
 800870a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800870e:	e22b      	b.n	8008b68 <UART_SetConfig+0x5d8>
 8008710:	2310      	movs	r3, #16
 8008712:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008716:	e227      	b.n	8008b68 <UART_SetConfig+0x5d8>
 8008718:	2320      	movs	r3, #32
 800871a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800871e:	e223      	b.n	8008b68 <UART_SetConfig+0x5d8>
 8008720:	2340      	movs	r3, #64	; 0x40
 8008722:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008726:	e21f      	b.n	8008b68 <UART_SetConfig+0x5d8>
 8008728:	2380      	movs	r3, #128	; 0x80
 800872a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800872e:	bf00      	nop
 8008730:	e21a      	b.n	8008b68 <UART_SetConfig+0x5d8>
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	4a6d      	ldr	r2, [pc, #436]	; (80088ec <UART_SetConfig+0x35c>)
 8008738:	4293      	cmp	r3, r2
 800873a:	d132      	bne.n	80087a2 <UART_SetConfig+0x212>
 800873c:	4b6a      	ldr	r3, [pc, #424]	; (80088e8 <UART_SetConfig+0x358>)
 800873e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008740:	f003 0307 	and.w	r3, r3, #7
 8008744:	2b05      	cmp	r3, #5
 8008746:	d827      	bhi.n	8008798 <UART_SetConfig+0x208>
 8008748:	a201      	add	r2, pc, #4	; (adr r2, 8008750 <UART_SetConfig+0x1c0>)
 800874a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800874e:	bf00      	nop
 8008750:	08008769 	.word	0x08008769
 8008754:	08008771 	.word	0x08008771
 8008758:	08008779 	.word	0x08008779
 800875c:	08008781 	.word	0x08008781
 8008760:	08008789 	.word	0x08008789
 8008764:	08008791 	.word	0x08008791
 8008768:	2300      	movs	r3, #0
 800876a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800876e:	e1fb      	b.n	8008b68 <UART_SetConfig+0x5d8>
 8008770:	2304      	movs	r3, #4
 8008772:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008776:	e1f7      	b.n	8008b68 <UART_SetConfig+0x5d8>
 8008778:	2308      	movs	r3, #8
 800877a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800877e:	e1f3      	b.n	8008b68 <UART_SetConfig+0x5d8>
 8008780:	2310      	movs	r3, #16
 8008782:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008786:	e1ef      	b.n	8008b68 <UART_SetConfig+0x5d8>
 8008788:	2320      	movs	r3, #32
 800878a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800878e:	e1eb      	b.n	8008b68 <UART_SetConfig+0x5d8>
 8008790:	2340      	movs	r3, #64	; 0x40
 8008792:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008796:	e1e7      	b.n	8008b68 <UART_SetConfig+0x5d8>
 8008798:	2380      	movs	r3, #128	; 0x80
 800879a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800879e:	bf00      	nop
 80087a0:	e1e2      	b.n	8008b68 <UART_SetConfig+0x5d8>
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	4a52      	ldr	r2, [pc, #328]	; (80088f0 <UART_SetConfig+0x360>)
 80087a8:	4293      	cmp	r3, r2
 80087aa:	d132      	bne.n	8008812 <UART_SetConfig+0x282>
 80087ac:	4b4e      	ldr	r3, [pc, #312]	; (80088e8 <UART_SetConfig+0x358>)
 80087ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80087b0:	f003 0307 	and.w	r3, r3, #7
 80087b4:	2b05      	cmp	r3, #5
 80087b6:	d827      	bhi.n	8008808 <UART_SetConfig+0x278>
 80087b8:	a201      	add	r2, pc, #4	; (adr r2, 80087c0 <UART_SetConfig+0x230>)
 80087ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087be:	bf00      	nop
 80087c0:	080087d9 	.word	0x080087d9
 80087c4:	080087e1 	.word	0x080087e1
 80087c8:	080087e9 	.word	0x080087e9
 80087cc:	080087f1 	.word	0x080087f1
 80087d0:	080087f9 	.word	0x080087f9
 80087d4:	08008801 	.word	0x08008801
 80087d8:	2300      	movs	r3, #0
 80087da:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80087de:	e1c3      	b.n	8008b68 <UART_SetConfig+0x5d8>
 80087e0:	2304      	movs	r3, #4
 80087e2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80087e6:	e1bf      	b.n	8008b68 <UART_SetConfig+0x5d8>
 80087e8:	2308      	movs	r3, #8
 80087ea:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80087ee:	e1bb      	b.n	8008b68 <UART_SetConfig+0x5d8>
 80087f0:	2310      	movs	r3, #16
 80087f2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80087f6:	e1b7      	b.n	8008b68 <UART_SetConfig+0x5d8>
 80087f8:	2320      	movs	r3, #32
 80087fa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80087fe:	e1b3      	b.n	8008b68 <UART_SetConfig+0x5d8>
 8008800:	2340      	movs	r3, #64	; 0x40
 8008802:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008806:	e1af      	b.n	8008b68 <UART_SetConfig+0x5d8>
 8008808:	2380      	movs	r3, #128	; 0x80
 800880a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800880e:	bf00      	nop
 8008810:	e1aa      	b.n	8008b68 <UART_SetConfig+0x5d8>
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	4a37      	ldr	r2, [pc, #220]	; (80088f4 <UART_SetConfig+0x364>)
 8008818:	4293      	cmp	r3, r2
 800881a:	d132      	bne.n	8008882 <UART_SetConfig+0x2f2>
 800881c:	4b32      	ldr	r3, [pc, #200]	; (80088e8 <UART_SetConfig+0x358>)
 800881e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008820:	f003 0307 	and.w	r3, r3, #7
 8008824:	2b05      	cmp	r3, #5
 8008826:	d827      	bhi.n	8008878 <UART_SetConfig+0x2e8>
 8008828:	a201      	add	r2, pc, #4	; (adr r2, 8008830 <UART_SetConfig+0x2a0>)
 800882a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800882e:	bf00      	nop
 8008830:	08008849 	.word	0x08008849
 8008834:	08008851 	.word	0x08008851
 8008838:	08008859 	.word	0x08008859
 800883c:	08008861 	.word	0x08008861
 8008840:	08008869 	.word	0x08008869
 8008844:	08008871 	.word	0x08008871
 8008848:	2300      	movs	r3, #0
 800884a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800884e:	e18b      	b.n	8008b68 <UART_SetConfig+0x5d8>
 8008850:	2304      	movs	r3, #4
 8008852:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008856:	e187      	b.n	8008b68 <UART_SetConfig+0x5d8>
 8008858:	2308      	movs	r3, #8
 800885a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800885e:	e183      	b.n	8008b68 <UART_SetConfig+0x5d8>
 8008860:	2310      	movs	r3, #16
 8008862:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008866:	e17f      	b.n	8008b68 <UART_SetConfig+0x5d8>
 8008868:	2320      	movs	r3, #32
 800886a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800886e:	e17b      	b.n	8008b68 <UART_SetConfig+0x5d8>
 8008870:	2340      	movs	r3, #64	; 0x40
 8008872:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008876:	e177      	b.n	8008b68 <UART_SetConfig+0x5d8>
 8008878:	2380      	movs	r3, #128	; 0x80
 800887a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800887e:	bf00      	nop
 8008880:	e172      	b.n	8008b68 <UART_SetConfig+0x5d8>
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	4a1c      	ldr	r2, [pc, #112]	; (80088f8 <UART_SetConfig+0x368>)
 8008888:	4293      	cmp	r3, r2
 800888a:	d144      	bne.n	8008916 <UART_SetConfig+0x386>
 800888c:	4b16      	ldr	r3, [pc, #88]	; (80088e8 <UART_SetConfig+0x358>)
 800888e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008890:	f003 0307 	and.w	r3, r3, #7
 8008894:	2b05      	cmp	r3, #5
 8008896:	d839      	bhi.n	800890c <UART_SetConfig+0x37c>
 8008898:	a201      	add	r2, pc, #4	; (adr r2, 80088a0 <UART_SetConfig+0x310>)
 800889a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800889e:	bf00      	nop
 80088a0:	080088b9 	.word	0x080088b9
 80088a4:	080088c1 	.word	0x080088c1
 80088a8:	080088c9 	.word	0x080088c9
 80088ac:	080088d1 	.word	0x080088d1
 80088b0:	080088fd 	.word	0x080088fd
 80088b4:	08008905 	.word	0x08008905
 80088b8:	2300      	movs	r3, #0
 80088ba:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80088be:	e153      	b.n	8008b68 <UART_SetConfig+0x5d8>
 80088c0:	2304      	movs	r3, #4
 80088c2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80088c6:	e14f      	b.n	8008b68 <UART_SetConfig+0x5d8>
 80088c8:	2308      	movs	r3, #8
 80088ca:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80088ce:	e14b      	b.n	8008b68 <UART_SetConfig+0x5d8>
 80088d0:	2310      	movs	r3, #16
 80088d2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80088d6:	e147      	b.n	8008b68 <UART_SetConfig+0x5d8>
 80088d8:	cfff69f3 	.word	0xcfff69f3
 80088dc:	58000c00 	.word	0x58000c00
 80088e0:	11fff4ff 	.word	0x11fff4ff
 80088e4:	40011000 	.word	0x40011000
 80088e8:	58024400 	.word	0x58024400
 80088ec:	40004400 	.word	0x40004400
 80088f0:	40004800 	.word	0x40004800
 80088f4:	40004c00 	.word	0x40004c00
 80088f8:	40005000 	.word	0x40005000
 80088fc:	2320      	movs	r3, #32
 80088fe:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008902:	e131      	b.n	8008b68 <UART_SetConfig+0x5d8>
 8008904:	2340      	movs	r3, #64	; 0x40
 8008906:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800890a:	e12d      	b.n	8008b68 <UART_SetConfig+0x5d8>
 800890c:	2380      	movs	r3, #128	; 0x80
 800890e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008912:	bf00      	nop
 8008914:	e128      	b.n	8008b68 <UART_SetConfig+0x5d8>
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	4ac3      	ldr	r2, [pc, #780]	; (8008c28 <UART_SetConfig+0x698>)
 800891c:	4293      	cmp	r3, r2
 800891e:	d178      	bne.n	8008a12 <UART_SetConfig+0x482>
 8008920:	4bc2      	ldr	r3, [pc, #776]	; (8008c2c <UART_SetConfig+0x69c>)
 8008922:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008924:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008928:	2b28      	cmp	r3, #40	; 0x28
 800892a:	d86d      	bhi.n	8008a08 <UART_SetConfig+0x478>
 800892c:	a201      	add	r2, pc, #4	; (adr r2, 8008934 <UART_SetConfig+0x3a4>)
 800892e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008932:	bf00      	nop
 8008934:	080089d9 	.word	0x080089d9
 8008938:	08008a09 	.word	0x08008a09
 800893c:	08008a09 	.word	0x08008a09
 8008940:	08008a09 	.word	0x08008a09
 8008944:	08008a09 	.word	0x08008a09
 8008948:	08008a09 	.word	0x08008a09
 800894c:	08008a09 	.word	0x08008a09
 8008950:	08008a09 	.word	0x08008a09
 8008954:	080089e1 	.word	0x080089e1
 8008958:	08008a09 	.word	0x08008a09
 800895c:	08008a09 	.word	0x08008a09
 8008960:	08008a09 	.word	0x08008a09
 8008964:	08008a09 	.word	0x08008a09
 8008968:	08008a09 	.word	0x08008a09
 800896c:	08008a09 	.word	0x08008a09
 8008970:	08008a09 	.word	0x08008a09
 8008974:	080089e9 	.word	0x080089e9
 8008978:	08008a09 	.word	0x08008a09
 800897c:	08008a09 	.word	0x08008a09
 8008980:	08008a09 	.word	0x08008a09
 8008984:	08008a09 	.word	0x08008a09
 8008988:	08008a09 	.word	0x08008a09
 800898c:	08008a09 	.word	0x08008a09
 8008990:	08008a09 	.word	0x08008a09
 8008994:	080089f1 	.word	0x080089f1
 8008998:	08008a09 	.word	0x08008a09
 800899c:	08008a09 	.word	0x08008a09
 80089a0:	08008a09 	.word	0x08008a09
 80089a4:	08008a09 	.word	0x08008a09
 80089a8:	08008a09 	.word	0x08008a09
 80089ac:	08008a09 	.word	0x08008a09
 80089b0:	08008a09 	.word	0x08008a09
 80089b4:	080089f9 	.word	0x080089f9
 80089b8:	08008a09 	.word	0x08008a09
 80089bc:	08008a09 	.word	0x08008a09
 80089c0:	08008a09 	.word	0x08008a09
 80089c4:	08008a09 	.word	0x08008a09
 80089c8:	08008a09 	.word	0x08008a09
 80089cc:	08008a09 	.word	0x08008a09
 80089d0:	08008a09 	.word	0x08008a09
 80089d4:	08008a01 	.word	0x08008a01
 80089d8:	2301      	movs	r3, #1
 80089da:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80089de:	e0c3      	b.n	8008b68 <UART_SetConfig+0x5d8>
 80089e0:	2304      	movs	r3, #4
 80089e2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80089e6:	e0bf      	b.n	8008b68 <UART_SetConfig+0x5d8>
 80089e8:	2308      	movs	r3, #8
 80089ea:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80089ee:	e0bb      	b.n	8008b68 <UART_SetConfig+0x5d8>
 80089f0:	2310      	movs	r3, #16
 80089f2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80089f6:	e0b7      	b.n	8008b68 <UART_SetConfig+0x5d8>
 80089f8:	2320      	movs	r3, #32
 80089fa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80089fe:	e0b3      	b.n	8008b68 <UART_SetConfig+0x5d8>
 8008a00:	2340      	movs	r3, #64	; 0x40
 8008a02:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008a06:	e0af      	b.n	8008b68 <UART_SetConfig+0x5d8>
 8008a08:	2380      	movs	r3, #128	; 0x80
 8008a0a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008a0e:	bf00      	nop
 8008a10:	e0aa      	b.n	8008b68 <UART_SetConfig+0x5d8>
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	4a86      	ldr	r2, [pc, #536]	; (8008c30 <UART_SetConfig+0x6a0>)
 8008a18:	4293      	cmp	r3, r2
 8008a1a:	d132      	bne.n	8008a82 <UART_SetConfig+0x4f2>
 8008a1c:	4b83      	ldr	r3, [pc, #524]	; (8008c2c <UART_SetConfig+0x69c>)
 8008a1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a20:	f003 0307 	and.w	r3, r3, #7
 8008a24:	2b05      	cmp	r3, #5
 8008a26:	d827      	bhi.n	8008a78 <UART_SetConfig+0x4e8>
 8008a28:	a201      	add	r2, pc, #4	; (adr r2, 8008a30 <UART_SetConfig+0x4a0>)
 8008a2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a2e:	bf00      	nop
 8008a30:	08008a49 	.word	0x08008a49
 8008a34:	08008a51 	.word	0x08008a51
 8008a38:	08008a59 	.word	0x08008a59
 8008a3c:	08008a61 	.word	0x08008a61
 8008a40:	08008a69 	.word	0x08008a69
 8008a44:	08008a71 	.word	0x08008a71
 8008a48:	2300      	movs	r3, #0
 8008a4a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008a4e:	e08b      	b.n	8008b68 <UART_SetConfig+0x5d8>
 8008a50:	2304      	movs	r3, #4
 8008a52:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008a56:	e087      	b.n	8008b68 <UART_SetConfig+0x5d8>
 8008a58:	2308      	movs	r3, #8
 8008a5a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008a5e:	e083      	b.n	8008b68 <UART_SetConfig+0x5d8>
 8008a60:	2310      	movs	r3, #16
 8008a62:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008a66:	e07f      	b.n	8008b68 <UART_SetConfig+0x5d8>
 8008a68:	2320      	movs	r3, #32
 8008a6a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008a6e:	e07b      	b.n	8008b68 <UART_SetConfig+0x5d8>
 8008a70:	2340      	movs	r3, #64	; 0x40
 8008a72:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008a76:	e077      	b.n	8008b68 <UART_SetConfig+0x5d8>
 8008a78:	2380      	movs	r3, #128	; 0x80
 8008a7a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008a7e:	bf00      	nop
 8008a80:	e072      	b.n	8008b68 <UART_SetConfig+0x5d8>
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	4a6b      	ldr	r2, [pc, #428]	; (8008c34 <UART_SetConfig+0x6a4>)
 8008a88:	4293      	cmp	r3, r2
 8008a8a:	d132      	bne.n	8008af2 <UART_SetConfig+0x562>
 8008a8c:	4b67      	ldr	r3, [pc, #412]	; (8008c2c <UART_SetConfig+0x69c>)
 8008a8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a90:	f003 0307 	and.w	r3, r3, #7
 8008a94:	2b05      	cmp	r3, #5
 8008a96:	d827      	bhi.n	8008ae8 <UART_SetConfig+0x558>
 8008a98:	a201      	add	r2, pc, #4	; (adr r2, 8008aa0 <UART_SetConfig+0x510>)
 8008a9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a9e:	bf00      	nop
 8008aa0:	08008ab9 	.word	0x08008ab9
 8008aa4:	08008ac1 	.word	0x08008ac1
 8008aa8:	08008ac9 	.word	0x08008ac9
 8008aac:	08008ad1 	.word	0x08008ad1
 8008ab0:	08008ad9 	.word	0x08008ad9
 8008ab4:	08008ae1 	.word	0x08008ae1
 8008ab8:	2300      	movs	r3, #0
 8008aba:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008abe:	e053      	b.n	8008b68 <UART_SetConfig+0x5d8>
 8008ac0:	2304      	movs	r3, #4
 8008ac2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008ac6:	e04f      	b.n	8008b68 <UART_SetConfig+0x5d8>
 8008ac8:	2308      	movs	r3, #8
 8008aca:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008ace:	e04b      	b.n	8008b68 <UART_SetConfig+0x5d8>
 8008ad0:	2310      	movs	r3, #16
 8008ad2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008ad6:	e047      	b.n	8008b68 <UART_SetConfig+0x5d8>
 8008ad8:	2320      	movs	r3, #32
 8008ada:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008ade:	e043      	b.n	8008b68 <UART_SetConfig+0x5d8>
 8008ae0:	2340      	movs	r3, #64	; 0x40
 8008ae2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008ae6:	e03f      	b.n	8008b68 <UART_SetConfig+0x5d8>
 8008ae8:	2380      	movs	r3, #128	; 0x80
 8008aea:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008aee:	bf00      	nop
 8008af0:	e03a      	b.n	8008b68 <UART_SetConfig+0x5d8>
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	4a50      	ldr	r2, [pc, #320]	; (8008c38 <UART_SetConfig+0x6a8>)
 8008af8:	4293      	cmp	r3, r2
 8008afa:	d132      	bne.n	8008b62 <UART_SetConfig+0x5d2>
 8008afc:	4b4b      	ldr	r3, [pc, #300]	; (8008c2c <UART_SetConfig+0x69c>)
 8008afe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008b00:	f003 0307 	and.w	r3, r3, #7
 8008b04:	2b05      	cmp	r3, #5
 8008b06:	d827      	bhi.n	8008b58 <UART_SetConfig+0x5c8>
 8008b08:	a201      	add	r2, pc, #4	; (adr r2, 8008b10 <UART_SetConfig+0x580>)
 8008b0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b0e:	bf00      	nop
 8008b10:	08008b29 	.word	0x08008b29
 8008b14:	08008b31 	.word	0x08008b31
 8008b18:	08008b39 	.word	0x08008b39
 8008b1c:	08008b41 	.word	0x08008b41
 8008b20:	08008b49 	.word	0x08008b49
 8008b24:	08008b51 	.word	0x08008b51
 8008b28:	2302      	movs	r3, #2
 8008b2a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008b2e:	e01b      	b.n	8008b68 <UART_SetConfig+0x5d8>
 8008b30:	2304      	movs	r3, #4
 8008b32:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008b36:	e017      	b.n	8008b68 <UART_SetConfig+0x5d8>
 8008b38:	2308      	movs	r3, #8
 8008b3a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008b3e:	e013      	b.n	8008b68 <UART_SetConfig+0x5d8>
 8008b40:	2310      	movs	r3, #16
 8008b42:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008b46:	e00f      	b.n	8008b68 <UART_SetConfig+0x5d8>
 8008b48:	2320      	movs	r3, #32
 8008b4a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008b4e:	e00b      	b.n	8008b68 <UART_SetConfig+0x5d8>
 8008b50:	2340      	movs	r3, #64	; 0x40
 8008b52:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008b56:	e007      	b.n	8008b68 <UART_SetConfig+0x5d8>
 8008b58:	2380      	movs	r3, #128	; 0x80
 8008b5a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008b5e:	bf00      	nop
 8008b60:	e002      	b.n	8008b68 <UART_SetConfig+0x5d8>
 8008b62:	2380      	movs	r3, #128	; 0x80
 8008b64:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	4a32      	ldr	r2, [pc, #200]	; (8008c38 <UART_SetConfig+0x6a8>)
 8008b6e:	4293      	cmp	r3, r2
 8008b70:	f040 86f7 	bne.w	8009962 <UART_SetConfig+0x13d2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008b74:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8008b78:	2b08      	cmp	r3, #8
 8008b7a:	f000 80c0 	beq.w	8008cfe <UART_SetConfig+0x76e>
 8008b7e:	2b08      	cmp	r3, #8
 8008b80:	dc04      	bgt.n	8008b8c <UART_SetConfig+0x5fc>
 8008b82:	2b02      	cmp	r3, #2
 8008b84:	d00c      	beq.n	8008ba0 <UART_SetConfig+0x610>
 8008b86:	2b04      	cmp	r3, #4
 8008b88:	d065      	beq.n	8008c56 <UART_SetConfig+0x6c6>
 8008b8a:	e27a      	b.n	8009082 <UART_SetConfig+0xaf2>
 8008b8c:	2b20      	cmp	r3, #32
 8008b8e:	f000 81b0 	beq.w	8008ef2 <UART_SetConfig+0x962>
 8008b92:	2b40      	cmp	r3, #64	; 0x40
 8008b94:	f000 821e 	beq.w	8008fd4 <UART_SetConfig+0xa44>
 8008b98:	2b10      	cmp	r3, #16
 8008b9a:	f000 8104 	beq.w	8008da6 <UART_SetConfig+0x816>
 8008b9e:	e270      	b.n	8009082 <UART_SetConfig+0xaf2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        lpuart_ker_ck_pres = (HAL_RCCEx_GetD3PCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8008ba0:	f7fe fdda 	bl	8007758 <HAL_RCCEx_GetD3PCLK1Freq>
 8008ba4:	4602      	mov	r2, r0
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d04e      	beq.n	8008c4c <UART_SetConfig+0x6bc>
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bb2:	2b01      	cmp	r3, #1
 8008bb4:	d048      	beq.n	8008c48 <UART_SetConfig+0x6b8>
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bba:	2b02      	cmp	r3, #2
 8008bbc:	d042      	beq.n	8008c44 <UART_SetConfig+0x6b4>
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bc2:	2b03      	cmp	r3, #3
 8008bc4:	d03c      	beq.n	8008c40 <UART_SetConfig+0x6b0>
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bca:	2b04      	cmp	r3, #4
 8008bcc:	d036      	beq.n	8008c3c <UART_SetConfig+0x6ac>
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bd2:	2b05      	cmp	r3, #5
 8008bd4:	d026      	beq.n	8008c24 <UART_SetConfig+0x694>
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bda:	2b06      	cmp	r3, #6
 8008bdc:	d020      	beq.n	8008c20 <UART_SetConfig+0x690>
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008be2:	2b07      	cmp	r3, #7
 8008be4:	d01a      	beq.n	8008c1c <UART_SetConfig+0x68c>
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bea:	2b08      	cmp	r3, #8
 8008bec:	d014      	beq.n	8008c18 <UART_SetConfig+0x688>
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bf2:	2b09      	cmp	r3, #9
 8008bf4:	d00e      	beq.n	8008c14 <UART_SetConfig+0x684>
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bfa:	2b0a      	cmp	r3, #10
 8008bfc:	d008      	beq.n	8008c10 <UART_SetConfig+0x680>
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c02:	2b0b      	cmp	r3, #11
 8008c04:	d102      	bne.n	8008c0c <UART_SetConfig+0x67c>
 8008c06:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008c0a:	e020      	b.n	8008c4e <UART_SetConfig+0x6be>
 8008c0c:	2301      	movs	r3, #1
 8008c0e:	e01e      	b.n	8008c4e <UART_SetConfig+0x6be>
 8008c10:	2380      	movs	r3, #128	; 0x80
 8008c12:	e01c      	b.n	8008c4e <UART_SetConfig+0x6be>
 8008c14:	2340      	movs	r3, #64	; 0x40
 8008c16:	e01a      	b.n	8008c4e <UART_SetConfig+0x6be>
 8008c18:	2320      	movs	r3, #32
 8008c1a:	e018      	b.n	8008c4e <UART_SetConfig+0x6be>
 8008c1c:	2310      	movs	r3, #16
 8008c1e:	e016      	b.n	8008c4e <UART_SetConfig+0x6be>
 8008c20:	230c      	movs	r3, #12
 8008c22:	e014      	b.n	8008c4e <UART_SetConfig+0x6be>
 8008c24:	230a      	movs	r3, #10
 8008c26:	e012      	b.n	8008c4e <UART_SetConfig+0x6be>
 8008c28:	40011400 	.word	0x40011400
 8008c2c:	58024400 	.word	0x58024400
 8008c30:	40007800 	.word	0x40007800
 8008c34:	40007c00 	.word	0x40007c00
 8008c38:	58000c00 	.word	0x58000c00
 8008c3c:	2308      	movs	r3, #8
 8008c3e:	e006      	b.n	8008c4e <UART_SetConfig+0x6be>
 8008c40:	2306      	movs	r3, #6
 8008c42:	e004      	b.n	8008c4e <UART_SetConfig+0x6be>
 8008c44:	2304      	movs	r3, #4
 8008c46:	e002      	b.n	8008c4e <UART_SetConfig+0x6be>
 8008c48:	2302      	movs	r3, #2
 8008c4a:	e000      	b.n	8008c4e <UART_SetConfig+0x6be>
 8008c4c:	2301      	movs	r3, #1
 8008c4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c52:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008c54:	e219      	b.n	800908a <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008c56:	f107 0318 	add.w	r3, r7, #24
 8008c5a:	4618      	mov	r0, r3
 8008c5c:	f7fe fd92 	bl	8007784 <HAL_RCCEx_GetPLL2ClockFreq>
        lpuart_ker_ck_pres = (pll2_clocks.PLL2_Q_Frequency / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8008c60:	69fa      	ldr	r2, [r7, #28]
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d044      	beq.n	8008cf4 <UART_SetConfig+0x764>
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c6e:	2b01      	cmp	r3, #1
 8008c70:	d03e      	beq.n	8008cf0 <UART_SetConfig+0x760>
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c76:	2b02      	cmp	r3, #2
 8008c78:	d038      	beq.n	8008cec <UART_SetConfig+0x75c>
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c7e:	2b03      	cmp	r3, #3
 8008c80:	d032      	beq.n	8008ce8 <UART_SetConfig+0x758>
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c86:	2b04      	cmp	r3, #4
 8008c88:	d02c      	beq.n	8008ce4 <UART_SetConfig+0x754>
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c8e:	2b05      	cmp	r3, #5
 8008c90:	d026      	beq.n	8008ce0 <UART_SetConfig+0x750>
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c96:	2b06      	cmp	r3, #6
 8008c98:	d020      	beq.n	8008cdc <UART_SetConfig+0x74c>
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c9e:	2b07      	cmp	r3, #7
 8008ca0:	d01a      	beq.n	8008cd8 <UART_SetConfig+0x748>
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ca6:	2b08      	cmp	r3, #8
 8008ca8:	d014      	beq.n	8008cd4 <UART_SetConfig+0x744>
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cae:	2b09      	cmp	r3, #9
 8008cb0:	d00e      	beq.n	8008cd0 <UART_SetConfig+0x740>
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cb6:	2b0a      	cmp	r3, #10
 8008cb8:	d008      	beq.n	8008ccc <UART_SetConfig+0x73c>
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cbe:	2b0b      	cmp	r3, #11
 8008cc0:	d102      	bne.n	8008cc8 <UART_SetConfig+0x738>
 8008cc2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008cc6:	e016      	b.n	8008cf6 <UART_SetConfig+0x766>
 8008cc8:	2301      	movs	r3, #1
 8008cca:	e014      	b.n	8008cf6 <UART_SetConfig+0x766>
 8008ccc:	2380      	movs	r3, #128	; 0x80
 8008cce:	e012      	b.n	8008cf6 <UART_SetConfig+0x766>
 8008cd0:	2340      	movs	r3, #64	; 0x40
 8008cd2:	e010      	b.n	8008cf6 <UART_SetConfig+0x766>
 8008cd4:	2320      	movs	r3, #32
 8008cd6:	e00e      	b.n	8008cf6 <UART_SetConfig+0x766>
 8008cd8:	2310      	movs	r3, #16
 8008cda:	e00c      	b.n	8008cf6 <UART_SetConfig+0x766>
 8008cdc:	230c      	movs	r3, #12
 8008cde:	e00a      	b.n	8008cf6 <UART_SetConfig+0x766>
 8008ce0:	230a      	movs	r3, #10
 8008ce2:	e008      	b.n	8008cf6 <UART_SetConfig+0x766>
 8008ce4:	2308      	movs	r3, #8
 8008ce6:	e006      	b.n	8008cf6 <UART_SetConfig+0x766>
 8008ce8:	2306      	movs	r3, #6
 8008cea:	e004      	b.n	8008cf6 <UART_SetConfig+0x766>
 8008cec:	2304      	movs	r3, #4
 8008cee:	e002      	b.n	8008cf6 <UART_SetConfig+0x766>
 8008cf0:	2302      	movs	r3, #2
 8008cf2:	e000      	b.n	8008cf6 <UART_SetConfig+0x766>
 8008cf4:	2301      	movs	r3, #1
 8008cf6:	fbb2 f3f3 	udiv	r3, r2, r3
 8008cfa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008cfc:	e1c5      	b.n	800908a <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008cfe:	f107 030c 	add.w	r3, r7, #12
 8008d02:	4618      	mov	r0, r3
 8008d04:	f7fe fe8a 	bl	8007a1c <HAL_RCCEx_GetPLL3ClockFreq>
        lpuart_ker_ck_pres = (pll3_clocks.PLL3_Q_Frequency / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8008d08:	693a      	ldr	r2, [r7, #16]
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d044      	beq.n	8008d9c <UART_SetConfig+0x80c>
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d16:	2b01      	cmp	r3, #1
 8008d18:	d03e      	beq.n	8008d98 <UART_SetConfig+0x808>
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d1e:	2b02      	cmp	r3, #2
 8008d20:	d038      	beq.n	8008d94 <UART_SetConfig+0x804>
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d26:	2b03      	cmp	r3, #3
 8008d28:	d032      	beq.n	8008d90 <UART_SetConfig+0x800>
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d2e:	2b04      	cmp	r3, #4
 8008d30:	d02c      	beq.n	8008d8c <UART_SetConfig+0x7fc>
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d36:	2b05      	cmp	r3, #5
 8008d38:	d026      	beq.n	8008d88 <UART_SetConfig+0x7f8>
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d3e:	2b06      	cmp	r3, #6
 8008d40:	d020      	beq.n	8008d84 <UART_SetConfig+0x7f4>
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d46:	2b07      	cmp	r3, #7
 8008d48:	d01a      	beq.n	8008d80 <UART_SetConfig+0x7f0>
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d4e:	2b08      	cmp	r3, #8
 8008d50:	d014      	beq.n	8008d7c <UART_SetConfig+0x7ec>
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d56:	2b09      	cmp	r3, #9
 8008d58:	d00e      	beq.n	8008d78 <UART_SetConfig+0x7e8>
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d5e:	2b0a      	cmp	r3, #10
 8008d60:	d008      	beq.n	8008d74 <UART_SetConfig+0x7e4>
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d66:	2b0b      	cmp	r3, #11
 8008d68:	d102      	bne.n	8008d70 <UART_SetConfig+0x7e0>
 8008d6a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008d6e:	e016      	b.n	8008d9e <UART_SetConfig+0x80e>
 8008d70:	2301      	movs	r3, #1
 8008d72:	e014      	b.n	8008d9e <UART_SetConfig+0x80e>
 8008d74:	2380      	movs	r3, #128	; 0x80
 8008d76:	e012      	b.n	8008d9e <UART_SetConfig+0x80e>
 8008d78:	2340      	movs	r3, #64	; 0x40
 8008d7a:	e010      	b.n	8008d9e <UART_SetConfig+0x80e>
 8008d7c:	2320      	movs	r3, #32
 8008d7e:	e00e      	b.n	8008d9e <UART_SetConfig+0x80e>
 8008d80:	2310      	movs	r3, #16
 8008d82:	e00c      	b.n	8008d9e <UART_SetConfig+0x80e>
 8008d84:	230c      	movs	r3, #12
 8008d86:	e00a      	b.n	8008d9e <UART_SetConfig+0x80e>
 8008d88:	230a      	movs	r3, #10
 8008d8a:	e008      	b.n	8008d9e <UART_SetConfig+0x80e>
 8008d8c:	2308      	movs	r3, #8
 8008d8e:	e006      	b.n	8008d9e <UART_SetConfig+0x80e>
 8008d90:	2306      	movs	r3, #6
 8008d92:	e004      	b.n	8008d9e <UART_SetConfig+0x80e>
 8008d94:	2304      	movs	r3, #4
 8008d96:	e002      	b.n	8008d9e <UART_SetConfig+0x80e>
 8008d98:	2302      	movs	r3, #2
 8008d9a:	e000      	b.n	8008d9e <UART_SetConfig+0x80e>
 8008d9c:	2301      	movs	r3, #1
 8008d9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008da2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008da4:	e171      	b.n	800908a <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008da6:	4b7a      	ldr	r3, [pc, #488]	; (8008f90 <UART_SetConfig+0xa00>)
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	f003 0320 	and.w	r3, r3, #32
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d054      	beq.n	8008e5c <UART_SetConfig+0x8cc>
        {
          lpuart_ker_ck_pres = ((uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)) / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8008db2:	4b77      	ldr	r3, [pc, #476]	; (8008f90 <UART_SetConfig+0xa00>)
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	08db      	lsrs	r3, r3, #3
 8008db8:	f003 0303 	and.w	r3, r3, #3
 8008dbc:	4a75      	ldr	r2, [pc, #468]	; (8008f94 <UART_SetConfig+0xa04>)
 8008dbe:	40da      	lsrs	r2, r3
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d044      	beq.n	8008e52 <UART_SetConfig+0x8c2>
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dcc:	2b01      	cmp	r3, #1
 8008dce:	d03e      	beq.n	8008e4e <UART_SetConfig+0x8be>
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dd4:	2b02      	cmp	r3, #2
 8008dd6:	d038      	beq.n	8008e4a <UART_SetConfig+0x8ba>
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ddc:	2b03      	cmp	r3, #3
 8008dde:	d032      	beq.n	8008e46 <UART_SetConfig+0x8b6>
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008de4:	2b04      	cmp	r3, #4
 8008de6:	d02c      	beq.n	8008e42 <UART_SetConfig+0x8b2>
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dec:	2b05      	cmp	r3, #5
 8008dee:	d026      	beq.n	8008e3e <UART_SetConfig+0x8ae>
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008df4:	2b06      	cmp	r3, #6
 8008df6:	d020      	beq.n	8008e3a <UART_SetConfig+0x8aa>
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dfc:	2b07      	cmp	r3, #7
 8008dfe:	d01a      	beq.n	8008e36 <UART_SetConfig+0x8a6>
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e04:	2b08      	cmp	r3, #8
 8008e06:	d014      	beq.n	8008e32 <UART_SetConfig+0x8a2>
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e0c:	2b09      	cmp	r3, #9
 8008e0e:	d00e      	beq.n	8008e2e <UART_SetConfig+0x89e>
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e14:	2b0a      	cmp	r3, #10
 8008e16:	d008      	beq.n	8008e2a <UART_SetConfig+0x89a>
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e1c:	2b0b      	cmp	r3, #11
 8008e1e:	d102      	bne.n	8008e26 <UART_SetConfig+0x896>
 8008e20:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008e24:	e016      	b.n	8008e54 <UART_SetConfig+0x8c4>
 8008e26:	2301      	movs	r3, #1
 8008e28:	e014      	b.n	8008e54 <UART_SetConfig+0x8c4>
 8008e2a:	2380      	movs	r3, #128	; 0x80
 8008e2c:	e012      	b.n	8008e54 <UART_SetConfig+0x8c4>
 8008e2e:	2340      	movs	r3, #64	; 0x40
 8008e30:	e010      	b.n	8008e54 <UART_SetConfig+0x8c4>
 8008e32:	2320      	movs	r3, #32
 8008e34:	e00e      	b.n	8008e54 <UART_SetConfig+0x8c4>
 8008e36:	2310      	movs	r3, #16
 8008e38:	e00c      	b.n	8008e54 <UART_SetConfig+0x8c4>
 8008e3a:	230c      	movs	r3, #12
 8008e3c:	e00a      	b.n	8008e54 <UART_SetConfig+0x8c4>
 8008e3e:	230a      	movs	r3, #10
 8008e40:	e008      	b.n	8008e54 <UART_SetConfig+0x8c4>
 8008e42:	2308      	movs	r3, #8
 8008e44:	e006      	b.n	8008e54 <UART_SetConfig+0x8c4>
 8008e46:	2306      	movs	r3, #6
 8008e48:	e004      	b.n	8008e54 <UART_SetConfig+0x8c4>
 8008e4a:	2304      	movs	r3, #4
 8008e4c:	e002      	b.n	8008e54 <UART_SetConfig+0x8c4>
 8008e4e:	2302      	movs	r3, #2
 8008e50:	e000      	b.n	8008e54 <UART_SetConfig+0x8c4>
 8008e52:	2301      	movs	r3, #1
 8008e54:	fbb2 f3f3 	udiv	r3, r2, r3
 8008e58:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          lpuart_ker_ck_pres = ((uint32_t) HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
        }
        break;
 8008e5a:	e116      	b.n	800908a <UART_SetConfig+0xafa>
          lpuart_ker_ck_pres = ((uint32_t) HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d043      	beq.n	8008eec <UART_SetConfig+0x95c>
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e68:	2b01      	cmp	r3, #1
 8008e6a:	d03d      	beq.n	8008ee8 <UART_SetConfig+0x958>
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e70:	2b02      	cmp	r3, #2
 8008e72:	d037      	beq.n	8008ee4 <UART_SetConfig+0x954>
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e78:	2b03      	cmp	r3, #3
 8008e7a:	d031      	beq.n	8008ee0 <UART_SetConfig+0x950>
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e80:	2b04      	cmp	r3, #4
 8008e82:	d02b      	beq.n	8008edc <UART_SetConfig+0x94c>
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e88:	2b05      	cmp	r3, #5
 8008e8a:	d025      	beq.n	8008ed8 <UART_SetConfig+0x948>
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e90:	2b06      	cmp	r3, #6
 8008e92:	d01f      	beq.n	8008ed4 <UART_SetConfig+0x944>
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e98:	2b07      	cmp	r3, #7
 8008e9a:	d019      	beq.n	8008ed0 <UART_SetConfig+0x940>
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ea0:	2b08      	cmp	r3, #8
 8008ea2:	d013      	beq.n	8008ecc <UART_SetConfig+0x93c>
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ea8:	2b09      	cmp	r3, #9
 8008eaa:	d00d      	beq.n	8008ec8 <UART_SetConfig+0x938>
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008eb0:	2b0a      	cmp	r3, #10
 8008eb2:	d007      	beq.n	8008ec4 <UART_SetConfig+0x934>
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008eb8:	2b0b      	cmp	r3, #11
 8008eba:	d101      	bne.n	8008ec0 <UART_SetConfig+0x930>
 8008ebc:	4b36      	ldr	r3, [pc, #216]	; (8008f98 <UART_SetConfig+0xa08>)
 8008ebe:	e016      	b.n	8008eee <UART_SetConfig+0x95e>
 8008ec0:	4b34      	ldr	r3, [pc, #208]	; (8008f94 <UART_SetConfig+0xa04>)
 8008ec2:	e014      	b.n	8008eee <UART_SetConfig+0x95e>
 8008ec4:	4b35      	ldr	r3, [pc, #212]	; (8008f9c <UART_SetConfig+0xa0c>)
 8008ec6:	e012      	b.n	8008eee <UART_SetConfig+0x95e>
 8008ec8:	4b35      	ldr	r3, [pc, #212]	; (8008fa0 <UART_SetConfig+0xa10>)
 8008eca:	e010      	b.n	8008eee <UART_SetConfig+0x95e>
 8008ecc:	4b35      	ldr	r3, [pc, #212]	; (8008fa4 <UART_SetConfig+0xa14>)
 8008ece:	e00e      	b.n	8008eee <UART_SetConfig+0x95e>
 8008ed0:	4b35      	ldr	r3, [pc, #212]	; (8008fa8 <UART_SetConfig+0xa18>)
 8008ed2:	e00c      	b.n	8008eee <UART_SetConfig+0x95e>
 8008ed4:	4b35      	ldr	r3, [pc, #212]	; (8008fac <UART_SetConfig+0xa1c>)
 8008ed6:	e00a      	b.n	8008eee <UART_SetConfig+0x95e>
 8008ed8:	4b35      	ldr	r3, [pc, #212]	; (8008fb0 <UART_SetConfig+0xa20>)
 8008eda:	e008      	b.n	8008eee <UART_SetConfig+0x95e>
 8008edc:	4b35      	ldr	r3, [pc, #212]	; (8008fb4 <UART_SetConfig+0xa24>)
 8008ede:	e006      	b.n	8008eee <UART_SetConfig+0x95e>
 8008ee0:	4b35      	ldr	r3, [pc, #212]	; (8008fb8 <UART_SetConfig+0xa28>)
 8008ee2:	e004      	b.n	8008eee <UART_SetConfig+0x95e>
 8008ee4:	4b35      	ldr	r3, [pc, #212]	; (8008fbc <UART_SetConfig+0xa2c>)
 8008ee6:	e002      	b.n	8008eee <UART_SetConfig+0x95e>
 8008ee8:	4b35      	ldr	r3, [pc, #212]	; (8008fc0 <UART_SetConfig+0xa30>)
 8008eea:	e000      	b.n	8008eee <UART_SetConfig+0x95e>
 8008eec:	4b29      	ldr	r3, [pc, #164]	; (8008f94 <UART_SetConfig+0xa04>)
 8008eee:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008ef0:	e0cb      	b.n	800908a <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_CSI:
        lpuart_ker_ck_pres = ((uint32_t)CSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d046      	beq.n	8008f88 <UART_SetConfig+0x9f8>
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008efe:	2b01      	cmp	r3, #1
 8008f00:	d040      	beq.n	8008f84 <UART_SetConfig+0x9f4>
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f06:	2b02      	cmp	r3, #2
 8008f08:	d03a      	beq.n	8008f80 <UART_SetConfig+0x9f0>
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f0e:	2b03      	cmp	r3, #3
 8008f10:	d034      	beq.n	8008f7c <UART_SetConfig+0x9ec>
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f16:	2b04      	cmp	r3, #4
 8008f18:	d02e      	beq.n	8008f78 <UART_SetConfig+0x9e8>
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f1e:	2b05      	cmp	r3, #5
 8008f20:	d028      	beq.n	8008f74 <UART_SetConfig+0x9e4>
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f26:	2b06      	cmp	r3, #6
 8008f28:	d022      	beq.n	8008f70 <UART_SetConfig+0x9e0>
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f2e:	2b07      	cmp	r3, #7
 8008f30:	d01c      	beq.n	8008f6c <UART_SetConfig+0x9dc>
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f36:	2b08      	cmp	r3, #8
 8008f38:	d016      	beq.n	8008f68 <UART_SetConfig+0x9d8>
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f3e:	2b09      	cmp	r3, #9
 8008f40:	d00f      	beq.n	8008f62 <UART_SetConfig+0x9d2>
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f46:	2b0a      	cmp	r3, #10
 8008f48:	d008      	beq.n	8008f5c <UART_SetConfig+0x9cc>
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f4e:	2b0b      	cmp	r3, #11
 8008f50:	d102      	bne.n	8008f58 <UART_SetConfig+0x9c8>
 8008f52:	f643 5309 	movw	r3, #15625	; 0x3d09
 8008f56:	e018      	b.n	8008f8a <UART_SetConfig+0x9fa>
 8008f58:	4b13      	ldr	r3, [pc, #76]	; (8008fa8 <UART_SetConfig+0xa18>)
 8008f5a:	e016      	b.n	8008f8a <UART_SetConfig+0x9fa>
 8008f5c:	f647 2312 	movw	r3, #31250	; 0x7a12
 8008f60:	e013      	b.n	8008f8a <UART_SetConfig+0x9fa>
 8008f62:	f24f 4324 	movw	r3, #62500	; 0xf424
 8008f66:	e010      	b.n	8008f8a <UART_SetConfig+0x9fa>
 8008f68:	4b16      	ldr	r3, [pc, #88]	; (8008fc4 <UART_SetConfig+0xa34>)
 8008f6a:	e00e      	b.n	8008f8a <UART_SetConfig+0x9fa>
 8008f6c:	4b0a      	ldr	r3, [pc, #40]	; (8008f98 <UART_SetConfig+0xa08>)
 8008f6e:	e00c      	b.n	8008f8a <UART_SetConfig+0x9fa>
 8008f70:	4b15      	ldr	r3, [pc, #84]	; (8008fc8 <UART_SetConfig+0xa38>)
 8008f72:	e00a      	b.n	8008f8a <UART_SetConfig+0x9fa>
 8008f74:	4b15      	ldr	r3, [pc, #84]	; (8008fcc <UART_SetConfig+0xa3c>)
 8008f76:	e008      	b.n	8008f8a <UART_SetConfig+0x9fa>
 8008f78:	4b08      	ldr	r3, [pc, #32]	; (8008f9c <UART_SetConfig+0xa0c>)
 8008f7a:	e006      	b.n	8008f8a <UART_SetConfig+0x9fa>
 8008f7c:	4b14      	ldr	r3, [pc, #80]	; (8008fd0 <UART_SetConfig+0xa40>)
 8008f7e:	e004      	b.n	8008f8a <UART_SetConfig+0x9fa>
 8008f80:	4b07      	ldr	r3, [pc, #28]	; (8008fa0 <UART_SetConfig+0xa10>)
 8008f82:	e002      	b.n	8008f8a <UART_SetConfig+0x9fa>
 8008f84:	4b07      	ldr	r3, [pc, #28]	; (8008fa4 <UART_SetConfig+0xa14>)
 8008f86:	e000      	b.n	8008f8a <UART_SetConfig+0x9fa>
 8008f88:	4b07      	ldr	r3, [pc, #28]	; (8008fa8 <UART_SetConfig+0xa18>)
 8008f8a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008f8c:	e07d      	b.n	800908a <UART_SetConfig+0xafa>
 8008f8e:	bf00      	nop
 8008f90:	58024400 	.word	0x58024400
 8008f94:	03d09000 	.word	0x03d09000
 8008f98:	0003d090 	.word	0x0003d090
 8008f9c:	0007a120 	.word	0x0007a120
 8008fa0:	000f4240 	.word	0x000f4240
 8008fa4:	001e8480 	.word	0x001e8480
 8008fa8:	003d0900 	.word	0x003d0900
 8008fac:	00516155 	.word	0x00516155
 8008fb0:	0061a800 	.word	0x0061a800
 8008fb4:	007a1200 	.word	0x007a1200
 8008fb8:	00a2c2aa 	.word	0x00a2c2aa
 8008fbc:	00f42400 	.word	0x00f42400
 8008fc0:	01e84800 	.word	0x01e84800
 8008fc4:	0001e848 	.word	0x0001e848
 8008fc8:	00051615 	.word	0x00051615
 8008fcc:	00061a80 	.word	0x00061a80
 8008fd0:	000a2c2a 	.word	0x000a2c2a
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d04e      	beq.n	800907a <UART_SetConfig+0xaea>
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fe0:	2b01      	cmp	r3, #1
 8008fe2:	d047      	beq.n	8009074 <UART_SetConfig+0xae4>
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fe8:	2b02      	cmp	r3, #2
 8008fea:	d040      	beq.n	800906e <UART_SetConfig+0xade>
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ff0:	2b03      	cmp	r3, #3
 8008ff2:	d039      	beq.n	8009068 <UART_SetConfig+0xad8>
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ff8:	2b04      	cmp	r3, #4
 8008ffa:	d032      	beq.n	8009062 <UART_SetConfig+0xad2>
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009000:	2b05      	cmp	r3, #5
 8009002:	d02b      	beq.n	800905c <UART_SetConfig+0xacc>
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009008:	2b06      	cmp	r3, #6
 800900a:	d024      	beq.n	8009056 <UART_SetConfig+0xac6>
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009010:	2b07      	cmp	r3, #7
 8009012:	d01d      	beq.n	8009050 <UART_SetConfig+0xac0>
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009018:	2b08      	cmp	r3, #8
 800901a:	d016      	beq.n	800904a <UART_SetConfig+0xaba>
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009020:	2b09      	cmp	r3, #9
 8009022:	d00f      	beq.n	8009044 <UART_SetConfig+0xab4>
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009028:	2b0a      	cmp	r3, #10
 800902a:	d008      	beq.n	800903e <UART_SetConfig+0xaae>
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009030:	2b0b      	cmp	r3, #11
 8009032:	d101      	bne.n	8009038 <UART_SetConfig+0xaa8>
 8009034:	2380      	movs	r3, #128	; 0x80
 8009036:	e022      	b.n	800907e <UART_SetConfig+0xaee>
 8009038:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800903c:	e01f      	b.n	800907e <UART_SetConfig+0xaee>
 800903e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009042:	e01c      	b.n	800907e <UART_SetConfig+0xaee>
 8009044:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009048:	e019      	b.n	800907e <UART_SetConfig+0xaee>
 800904a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800904e:	e016      	b.n	800907e <UART_SetConfig+0xaee>
 8009050:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009054:	e013      	b.n	800907e <UART_SetConfig+0xaee>
 8009056:	f640 23aa 	movw	r3, #2730	; 0xaaa
 800905a:	e010      	b.n	800907e <UART_SetConfig+0xaee>
 800905c:	f640 43cc 	movw	r3, #3276	; 0xccc
 8009060:	e00d      	b.n	800907e <UART_SetConfig+0xaee>
 8009062:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009066:	e00a      	b.n	800907e <UART_SetConfig+0xaee>
 8009068:	f241 5355 	movw	r3, #5461	; 0x1555
 800906c:	e007      	b.n	800907e <UART_SetConfig+0xaee>
 800906e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009072:	e004      	b.n	800907e <UART_SetConfig+0xaee>
 8009074:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8009078:	e001      	b.n	800907e <UART_SetConfig+0xaee>
 800907a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800907e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009080:	e003      	b.n	800908a <UART_SetConfig+0xafa>
      default:
        ret = HAL_ERROR;
 8009082:	2301      	movs	r3, #1
 8009084:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 8009088:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 800908a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800908c:	2b00      	cmp	r3, #0
 800908e:	f001 83e8 	beq.w	800a862 <UART_SetConfig+0x22d2>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	685a      	ldr	r2, [r3, #4]
 8009096:	4613      	mov	r3, r2
 8009098:	005b      	lsls	r3, r3, #1
 800909a:	4413      	add	r3, r2
 800909c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800909e:	429a      	cmp	r2, r3
 80090a0:	d305      	bcc.n	80090ae <UART_SetConfig+0xb1e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	685b      	ldr	r3, [r3, #4]
 80090a6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80090a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80090aa:	429a      	cmp	r2, r3
 80090ac:	d904      	bls.n	80090b8 <UART_SetConfig+0xb28>
      {
        ret = HAL_ERROR;
 80090ae:	2301      	movs	r3, #1
 80090b0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80090b4:	f001 bbd5 	b.w	800a862 <UART_SetConfig+0x22d2>
      }
      else
      {
        switch (clocksource)
 80090b8:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80090bc:	2b08      	cmp	r3, #8
 80090be:	f000 8154 	beq.w	800936a <UART_SetConfig+0xdda>
 80090c2:	2b08      	cmp	r3, #8
 80090c4:	dc06      	bgt.n	80090d4 <UART_SetConfig+0xb44>
 80090c6:	2b02      	cmp	r3, #2
 80090c8:	d00f      	beq.n	80090ea <UART_SetConfig+0xb5a>
 80090ca:	2b04      	cmp	r3, #4
 80090cc:	f000 80ac 	beq.w	8009228 <UART_SetConfig+0xc98>
 80090d0:	f000 bc30 	b.w	8009934 <UART_SetConfig+0x13a4>
 80090d4:	2b20      	cmp	r3, #32
 80090d6:	f000 832d 	beq.w	8009734 <UART_SetConfig+0x11a4>
 80090da:	2b40      	cmp	r3, #64	; 0x40
 80090dc:	f000 83a5 	beq.w	800982a <UART_SetConfig+0x129a>
 80090e0:	2b10      	cmp	r3, #16
 80090e2:	f000 81e3 	beq.w	80094ac <UART_SetConfig+0xf1c>
 80090e6:	f000 bc25 	b.w	8009934 <UART_SetConfig+0x13a4>
        {
          case UART_CLOCKSOURCE_D3PCLK1:
            pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80090ea:	f7fe fb35 	bl	8007758 <HAL_RCCEx_GetD3PCLK1Freq>
 80090ee:	62b8      	str	r0, [r7, #40]	; 0x28
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80090f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090f2:	4618      	mov	r0, r3
 80090f4:	f04f 0100 	mov.w	r1, #0
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	d067      	beq.n	80091d0 <UART_SetConfig+0xc40>
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009104:	2b01      	cmp	r3, #1
 8009106:	d05e      	beq.n	80091c6 <UART_SetConfig+0xc36>
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800910c:	2b02      	cmp	r3, #2
 800910e:	d055      	beq.n	80091bc <UART_SetConfig+0xc2c>
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009114:	2b03      	cmp	r3, #3
 8009116:	d04c      	beq.n	80091b2 <UART_SetConfig+0xc22>
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800911c:	2b04      	cmp	r3, #4
 800911e:	d043      	beq.n	80091a8 <UART_SetConfig+0xc18>
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009124:	2b05      	cmp	r3, #5
 8009126:	d03a      	beq.n	800919e <UART_SetConfig+0xc0e>
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800912c:	2b06      	cmp	r3, #6
 800912e:	d031      	beq.n	8009194 <UART_SetConfig+0xc04>
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009134:	2b07      	cmp	r3, #7
 8009136:	d028      	beq.n	800918a <UART_SetConfig+0xbfa>
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800913c:	2b08      	cmp	r3, #8
 800913e:	d01f      	beq.n	8009180 <UART_SetConfig+0xbf0>
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009144:	2b09      	cmp	r3, #9
 8009146:	d016      	beq.n	8009176 <UART_SetConfig+0xbe6>
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800914c:	2b0a      	cmp	r3, #10
 800914e:	d00d      	beq.n	800916c <UART_SetConfig+0xbdc>
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009154:	2b0b      	cmp	r3, #11
 8009156:	d104      	bne.n	8009162 <UART_SetConfig+0xbd2>
 8009158:	f44f 7380 	mov.w	r3, #256	; 0x100
 800915c:	f04f 0400 	mov.w	r4, #0
 8009160:	e03a      	b.n	80091d8 <UART_SetConfig+0xc48>
 8009162:	f04f 0301 	mov.w	r3, #1
 8009166:	f04f 0400 	mov.w	r4, #0
 800916a:	e035      	b.n	80091d8 <UART_SetConfig+0xc48>
 800916c:	f04f 0380 	mov.w	r3, #128	; 0x80
 8009170:	f04f 0400 	mov.w	r4, #0
 8009174:	e030      	b.n	80091d8 <UART_SetConfig+0xc48>
 8009176:	f04f 0340 	mov.w	r3, #64	; 0x40
 800917a:	f04f 0400 	mov.w	r4, #0
 800917e:	e02b      	b.n	80091d8 <UART_SetConfig+0xc48>
 8009180:	f04f 0320 	mov.w	r3, #32
 8009184:	f04f 0400 	mov.w	r4, #0
 8009188:	e026      	b.n	80091d8 <UART_SetConfig+0xc48>
 800918a:	f04f 0310 	mov.w	r3, #16
 800918e:	f04f 0400 	mov.w	r4, #0
 8009192:	e021      	b.n	80091d8 <UART_SetConfig+0xc48>
 8009194:	f04f 030c 	mov.w	r3, #12
 8009198:	f04f 0400 	mov.w	r4, #0
 800919c:	e01c      	b.n	80091d8 <UART_SetConfig+0xc48>
 800919e:	f04f 030a 	mov.w	r3, #10
 80091a2:	f04f 0400 	mov.w	r4, #0
 80091a6:	e017      	b.n	80091d8 <UART_SetConfig+0xc48>
 80091a8:	f04f 0308 	mov.w	r3, #8
 80091ac:	f04f 0400 	mov.w	r4, #0
 80091b0:	e012      	b.n	80091d8 <UART_SetConfig+0xc48>
 80091b2:	f04f 0306 	mov.w	r3, #6
 80091b6:	f04f 0400 	mov.w	r4, #0
 80091ba:	e00d      	b.n	80091d8 <UART_SetConfig+0xc48>
 80091bc:	f04f 0304 	mov.w	r3, #4
 80091c0:	f04f 0400 	mov.w	r4, #0
 80091c4:	e008      	b.n	80091d8 <UART_SetConfig+0xc48>
 80091c6:	f04f 0302 	mov.w	r3, #2
 80091ca:	f04f 0400 	mov.w	r4, #0
 80091ce:	e003      	b.n	80091d8 <UART_SetConfig+0xc48>
 80091d0:	f04f 0301 	mov.w	r3, #1
 80091d4:	f04f 0400 	mov.w	r4, #0
 80091d8:	461a      	mov	r2, r3
 80091da:	4623      	mov	r3, r4
 80091dc:	f7f7 f8d0 	bl	8000380 <__aeabi_uldivmod>
 80091e0:	4603      	mov	r3, r0
 80091e2:	460c      	mov	r4, r1
 80091e4:	4619      	mov	r1, r3
 80091e6:	4622      	mov	r2, r4
 80091e8:	f04f 0300 	mov.w	r3, #0
 80091ec:	f04f 0400 	mov.w	r4, #0
 80091f0:	0214      	lsls	r4, r2, #8
 80091f2:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80091f6:	020b      	lsls	r3, r1, #8
 80091f8:	687a      	ldr	r2, [r7, #4]
 80091fa:	6852      	ldr	r2, [r2, #4]
 80091fc:	0852      	lsrs	r2, r2, #1
 80091fe:	4611      	mov	r1, r2
 8009200:	f04f 0200 	mov.w	r2, #0
 8009204:	eb13 0b01 	adds.w	fp, r3, r1
 8009208:	eb44 0c02 	adc.w	ip, r4, r2
 800920c:	4658      	mov	r0, fp
 800920e:	4661      	mov	r1, ip
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	685b      	ldr	r3, [r3, #4]
 8009214:	f04f 0400 	mov.w	r4, #0
 8009218:	461a      	mov	r2, r3
 800921a:	4623      	mov	r3, r4
 800921c:	f7f7 f8b0 	bl	8000380 <__aeabi_uldivmod>
 8009220:	4603      	mov	r3, r0
 8009222:	460c      	mov	r4, r1
 8009224:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8009226:	e389      	b.n	800993c <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_PLL2:
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009228:	f107 0318 	add.w	r3, r7, #24
 800922c:	4618      	mov	r0, r3
 800922e:	f7fe faa9 	bl	8007784 <HAL_RCCEx_GetPLL2ClockFreq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009232:	69fb      	ldr	r3, [r7, #28]
 8009234:	4618      	mov	r0, r3
 8009236:	f04f 0100 	mov.w	r1, #0
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800923e:	2b00      	cmp	r3, #0
 8009240:	d067      	beq.n	8009312 <UART_SetConfig+0xd82>
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009246:	2b01      	cmp	r3, #1
 8009248:	d05e      	beq.n	8009308 <UART_SetConfig+0xd78>
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800924e:	2b02      	cmp	r3, #2
 8009250:	d055      	beq.n	80092fe <UART_SetConfig+0xd6e>
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009256:	2b03      	cmp	r3, #3
 8009258:	d04c      	beq.n	80092f4 <UART_SetConfig+0xd64>
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800925e:	2b04      	cmp	r3, #4
 8009260:	d043      	beq.n	80092ea <UART_SetConfig+0xd5a>
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009266:	2b05      	cmp	r3, #5
 8009268:	d03a      	beq.n	80092e0 <UART_SetConfig+0xd50>
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800926e:	2b06      	cmp	r3, #6
 8009270:	d031      	beq.n	80092d6 <UART_SetConfig+0xd46>
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009276:	2b07      	cmp	r3, #7
 8009278:	d028      	beq.n	80092cc <UART_SetConfig+0xd3c>
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800927e:	2b08      	cmp	r3, #8
 8009280:	d01f      	beq.n	80092c2 <UART_SetConfig+0xd32>
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009286:	2b09      	cmp	r3, #9
 8009288:	d016      	beq.n	80092b8 <UART_SetConfig+0xd28>
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800928e:	2b0a      	cmp	r3, #10
 8009290:	d00d      	beq.n	80092ae <UART_SetConfig+0xd1e>
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009296:	2b0b      	cmp	r3, #11
 8009298:	d104      	bne.n	80092a4 <UART_SetConfig+0xd14>
 800929a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800929e:	f04f 0400 	mov.w	r4, #0
 80092a2:	e03a      	b.n	800931a <UART_SetConfig+0xd8a>
 80092a4:	f04f 0301 	mov.w	r3, #1
 80092a8:	f04f 0400 	mov.w	r4, #0
 80092ac:	e035      	b.n	800931a <UART_SetConfig+0xd8a>
 80092ae:	f04f 0380 	mov.w	r3, #128	; 0x80
 80092b2:	f04f 0400 	mov.w	r4, #0
 80092b6:	e030      	b.n	800931a <UART_SetConfig+0xd8a>
 80092b8:	f04f 0340 	mov.w	r3, #64	; 0x40
 80092bc:	f04f 0400 	mov.w	r4, #0
 80092c0:	e02b      	b.n	800931a <UART_SetConfig+0xd8a>
 80092c2:	f04f 0320 	mov.w	r3, #32
 80092c6:	f04f 0400 	mov.w	r4, #0
 80092ca:	e026      	b.n	800931a <UART_SetConfig+0xd8a>
 80092cc:	f04f 0310 	mov.w	r3, #16
 80092d0:	f04f 0400 	mov.w	r4, #0
 80092d4:	e021      	b.n	800931a <UART_SetConfig+0xd8a>
 80092d6:	f04f 030c 	mov.w	r3, #12
 80092da:	f04f 0400 	mov.w	r4, #0
 80092de:	e01c      	b.n	800931a <UART_SetConfig+0xd8a>
 80092e0:	f04f 030a 	mov.w	r3, #10
 80092e4:	f04f 0400 	mov.w	r4, #0
 80092e8:	e017      	b.n	800931a <UART_SetConfig+0xd8a>
 80092ea:	f04f 0308 	mov.w	r3, #8
 80092ee:	f04f 0400 	mov.w	r4, #0
 80092f2:	e012      	b.n	800931a <UART_SetConfig+0xd8a>
 80092f4:	f04f 0306 	mov.w	r3, #6
 80092f8:	f04f 0400 	mov.w	r4, #0
 80092fc:	e00d      	b.n	800931a <UART_SetConfig+0xd8a>
 80092fe:	f04f 0304 	mov.w	r3, #4
 8009302:	f04f 0400 	mov.w	r4, #0
 8009306:	e008      	b.n	800931a <UART_SetConfig+0xd8a>
 8009308:	f04f 0302 	mov.w	r3, #2
 800930c:	f04f 0400 	mov.w	r4, #0
 8009310:	e003      	b.n	800931a <UART_SetConfig+0xd8a>
 8009312:	f04f 0301 	mov.w	r3, #1
 8009316:	f04f 0400 	mov.w	r4, #0
 800931a:	461a      	mov	r2, r3
 800931c:	4623      	mov	r3, r4
 800931e:	f7f7 f82f 	bl	8000380 <__aeabi_uldivmod>
 8009322:	4603      	mov	r3, r0
 8009324:	460c      	mov	r4, r1
 8009326:	4619      	mov	r1, r3
 8009328:	4622      	mov	r2, r4
 800932a:	f04f 0300 	mov.w	r3, #0
 800932e:	f04f 0400 	mov.w	r4, #0
 8009332:	0214      	lsls	r4, r2, #8
 8009334:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8009338:	020b      	lsls	r3, r1, #8
 800933a:	687a      	ldr	r2, [r7, #4]
 800933c:	6852      	ldr	r2, [r2, #4]
 800933e:	0852      	lsrs	r2, r2, #1
 8009340:	4611      	mov	r1, r2
 8009342:	f04f 0200 	mov.w	r2, #0
 8009346:	eb13 0b01 	adds.w	fp, r3, r1
 800934a:	eb44 0c02 	adc.w	ip, r4, r2
 800934e:	4658      	mov	r0, fp
 8009350:	4661      	mov	r1, ip
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	685b      	ldr	r3, [r3, #4]
 8009356:	f04f 0400 	mov.w	r4, #0
 800935a:	461a      	mov	r2, r3
 800935c:	4623      	mov	r3, r4
 800935e:	f7f7 f80f 	bl	8000380 <__aeabi_uldivmod>
 8009362:	4603      	mov	r3, r0
 8009364:	460c      	mov	r4, r1
 8009366:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8009368:	e2e8      	b.n	800993c <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_PLL3:
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800936a:	f107 030c 	add.w	r3, r7, #12
 800936e:	4618      	mov	r0, r3
 8009370:	f7fe fb54 	bl	8007a1c <HAL_RCCEx_GetPLL3ClockFreq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009374:	693b      	ldr	r3, [r7, #16]
 8009376:	4618      	mov	r0, r3
 8009378:	f04f 0100 	mov.w	r1, #0
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009380:	2b00      	cmp	r3, #0
 8009382:	d067      	beq.n	8009454 <UART_SetConfig+0xec4>
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009388:	2b01      	cmp	r3, #1
 800938a:	d05e      	beq.n	800944a <UART_SetConfig+0xeba>
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009390:	2b02      	cmp	r3, #2
 8009392:	d055      	beq.n	8009440 <UART_SetConfig+0xeb0>
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009398:	2b03      	cmp	r3, #3
 800939a:	d04c      	beq.n	8009436 <UART_SetConfig+0xea6>
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093a0:	2b04      	cmp	r3, #4
 80093a2:	d043      	beq.n	800942c <UART_SetConfig+0xe9c>
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093a8:	2b05      	cmp	r3, #5
 80093aa:	d03a      	beq.n	8009422 <UART_SetConfig+0xe92>
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093b0:	2b06      	cmp	r3, #6
 80093b2:	d031      	beq.n	8009418 <UART_SetConfig+0xe88>
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093b8:	2b07      	cmp	r3, #7
 80093ba:	d028      	beq.n	800940e <UART_SetConfig+0xe7e>
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093c0:	2b08      	cmp	r3, #8
 80093c2:	d01f      	beq.n	8009404 <UART_SetConfig+0xe74>
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093c8:	2b09      	cmp	r3, #9
 80093ca:	d016      	beq.n	80093fa <UART_SetConfig+0xe6a>
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093d0:	2b0a      	cmp	r3, #10
 80093d2:	d00d      	beq.n	80093f0 <UART_SetConfig+0xe60>
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093d8:	2b0b      	cmp	r3, #11
 80093da:	d104      	bne.n	80093e6 <UART_SetConfig+0xe56>
 80093dc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80093e0:	f04f 0400 	mov.w	r4, #0
 80093e4:	e03a      	b.n	800945c <UART_SetConfig+0xecc>
 80093e6:	f04f 0301 	mov.w	r3, #1
 80093ea:	f04f 0400 	mov.w	r4, #0
 80093ee:	e035      	b.n	800945c <UART_SetConfig+0xecc>
 80093f0:	f04f 0380 	mov.w	r3, #128	; 0x80
 80093f4:	f04f 0400 	mov.w	r4, #0
 80093f8:	e030      	b.n	800945c <UART_SetConfig+0xecc>
 80093fa:	f04f 0340 	mov.w	r3, #64	; 0x40
 80093fe:	f04f 0400 	mov.w	r4, #0
 8009402:	e02b      	b.n	800945c <UART_SetConfig+0xecc>
 8009404:	f04f 0320 	mov.w	r3, #32
 8009408:	f04f 0400 	mov.w	r4, #0
 800940c:	e026      	b.n	800945c <UART_SetConfig+0xecc>
 800940e:	f04f 0310 	mov.w	r3, #16
 8009412:	f04f 0400 	mov.w	r4, #0
 8009416:	e021      	b.n	800945c <UART_SetConfig+0xecc>
 8009418:	f04f 030c 	mov.w	r3, #12
 800941c:	f04f 0400 	mov.w	r4, #0
 8009420:	e01c      	b.n	800945c <UART_SetConfig+0xecc>
 8009422:	f04f 030a 	mov.w	r3, #10
 8009426:	f04f 0400 	mov.w	r4, #0
 800942a:	e017      	b.n	800945c <UART_SetConfig+0xecc>
 800942c:	f04f 0308 	mov.w	r3, #8
 8009430:	f04f 0400 	mov.w	r4, #0
 8009434:	e012      	b.n	800945c <UART_SetConfig+0xecc>
 8009436:	f04f 0306 	mov.w	r3, #6
 800943a:	f04f 0400 	mov.w	r4, #0
 800943e:	e00d      	b.n	800945c <UART_SetConfig+0xecc>
 8009440:	f04f 0304 	mov.w	r3, #4
 8009444:	f04f 0400 	mov.w	r4, #0
 8009448:	e008      	b.n	800945c <UART_SetConfig+0xecc>
 800944a:	f04f 0302 	mov.w	r3, #2
 800944e:	f04f 0400 	mov.w	r4, #0
 8009452:	e003      	b.n	800945c <UART_SetConfig+0xecc>
 8009454:	f04f 0301 	mov.w	r3, #1
 8009458:	f04f 0400 	mov.w	r4, #0
 800945c:	461a      	mov	r2, r3
 800945e:	4623      	mov	r3, r4
 8009460:	f7f6 ff8e 	bl	8000380 <__aeabi_uldivmod>
 8009464:	4603      	mov	r3, r0
 8009466:	460c      	mov	r4, r1
 8009468:	4619      	mov	r1, r3
 800946a:	4622      	mov	r2, r4
 800946c:	f04f 0300 	mov.w	r3, #0
 8009470:	f04f 0400 	mov.w	r4, #0
 8009474:	0214      	lsls	r4, r2, #8
 8009476:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800947a:	020b      	lsls	r3, r1, #8
 800947c:	687a      	ldr	r2, [r7, #4]
 800947e:	6852      	ldr	r2, [r2, #4]
 8009480:	0852      	lsrs	r2, r2, #1
 8009482:	4611      	mov	r1, r2
 8009484:	f04f 0200 	mov.w	r2, #0
 8009488:	eb13 0b01 	adds.w	fp, r3, r1
 800948c:	eb44 0c02 	adc.w	ip, r4, r2
 8009490:	4658      	mov	r0, fp
 8009492:	4661      	mov	r1, ip
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	685b      	ldr	r3, [r3, #4]
 8009498:	f04f 0400 	mov.w	r4, #0
 800949c:	461a      	mov	r2, r3
 800949e:	4623      	mov	r3, r4
 80094a0:	f7f6 ff6e 	bl	8000380 <__aeabi_uldivmod>
 80094a4:	4603      	mov	r3, r0
 80094a6:	460c      	mov	r4, r1
 80094a8:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80094aa:	e247      	b.n	800993c <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_HSI:
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80094ac:	4b96      	ldr	r3, [pc, #600]	; (8009708 <UART_SetConfig+0x1178>)
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	f003 0320 	and.w	r3, r3, #32
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	f000 80a3 	beq.w	8009600 <UART_SetConfig+0x1070>
            {
              usartdiv = (uint32_t)(UART_DIV_LPUART((uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80094ba:	4b93      	ldr	r3, [pc, #588]	; (8009708 <UART_SetConfig+0x1178>)
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	08db      	lsrs	r3, r3, #3
 80094c0:	f003 0303 	and.w	r3, r3, #3
 80094c4:	4a91      	ldr	r2, [pc, #580]	; (800970c <UART_SetConfig+0x117c>)
 80094c6:	fa22 f303 	lsr.w	r3, r2, r3
 80094ca:	4618      	mov	r0, r3
 80094cc:	f04f 0100 	mov.w	r1, #0
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	d067      	beq.n	80095a8 <UART_SetConfig+0x1018>
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094dc:	2b01      	cmp	r3, #1
 80094de:	d05e      	beq.n	800959e <UART_SetConfig+0x100e>
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094e4:	2b02      	cmp	r3, #2
 80094e6:	d055      	beq.n	8009594 <UART_SetConfig+0x1004>
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094ec:	2b03      	cmp	r3, #3
 80094ee:	d04c      	beq.n	800958a <UART_SetConfig+0xffa>
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094f4:	2b04      	cmp	r3, #4
 80094f6:	d043      	beq.n	8009580 <UART_SetConfig+0xff0>
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094fc:	2b05      	cmp	r3, #5
 80094fe:	d03a      	beq.n	8009576 <UART_SetConfig+0xfe6>
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009504:	2b06      	cmp	r3, #6
 8009506:	d031      	beq.n	800956c <UART_SetConfig+0xfdc>
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800950c:	2b07      	cmp	r3, #7
 800950e:	d028      	beq.n	8009562 <UART_SetConfig+0xfd2>
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009514:	2b08      	cmp	r3, #8
 8009516:	d01f      	beq.n	8009558 <UART_SetConfig+0xfc8>
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800951c:	2b09      	cmp	r3, #9
 800951e:	d016      	beq.n	800954e <UART_SetConfig+0xfbe>
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009524:	2b0a      	cmp	r3, #10
 8009526:	d00d      	beq.n	8009544 <UART_SetConfig+0xfb4>
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800952c:	2b0b      	cmp	r3, #11
 800952e:	d104      	bne.n	800953a <UART_SetConfig+0xfaa>
 8009530:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009534:	f04f 0400 	mov.w	r4, #0
 8009538:	e03a      	b.n	80095b0 <UART_SetConfig+0x1020>
 800953a:	f04f 0301 	mov.w	r3, #1
 800953e:	f04f 0400 	mov.w	r4, #0
 8009542:	e035      	b.n	80095b0 <UART_SetConfig+0x1020>
 8009544:	f04f 0380 	mov.w	r3, #128	; 0x80
 8009548:	f04f 0400 	mov.w	r4, #0
 800954c:	e030      	b.n	80095b0 <UART_SetConfig+0x1020>
 800954e:	f04f 0340 	mov.w	r3, #64	; 0x40
 8009552:	f04f 0400 	mov.w	r4, #0
 8009556:	e02b      	b.n	80095b0 <UART_SetConfig+0x1020>
 8009558:	f04f 0320 	mov.w	r3, #32
 800955c:	f04f 0400 	mov.w	r4, #0
 8009560:	e026      	b.n	80095b0 <UART_SetConfig+0x1020>
 8009562:	f04f 0310 	mov.w	r3, #16
 8009566:	f04f 0400 	mov.w	r4, #0
 800956a:	e021      	b.n	80095b0 <UART_SetConfig+0x1020>
 800956c:	f04f 030c 	mov.w	r3, #12
 8009570:	f04f 0400 	mov.w	r4, #0
 8009574:	e01c      	b.n	80095b0 <UART_SetConfig+0x1020>
 8009576:	f04f 030a 	mov.w	r3, #10
 800957a:	f04f 0400 	mov.w	r4, #0
 800957e:	e017      	b.n	80095b0 <UART_SetConfig+0x1020>
 8009580:	f04f 0308 	mov.w	r3, #8
 8009584:	f04f 0400 	mov.w	r4, #0
 8009588:	e012      	b.n	80095b0 <UART_SetConfig+0x1020>
 800958a:	f04f 0306 	mov.w	r3, #6
 800958e:	f04f 0400 	mov.w	r4, #0
 8009592:	e00d      	b.n	80095b0 <UART_SetConfig+0x1020>
 8009594:	f04f 0304 	mov.w	r3, #4
 8009598:	f04f 0400 	mov.w	r4, #0
 800959c:	e008      	b.n	80095b0 <UART_SetConfig+0x1020>
 800959e:	f04f 0302 	mov.w	r3, #2
 80095a2:	f04f 0400 	mov.w	r4, #0
 80095a6:	e003      	b.n	80095b0 <UART_SetConfig+0x1020>
 80095a8:	f04f 0301 	mov.w	r3, #1
 80095ac:	f04f 0400 	mov.w	r4, #0
 80095b0:	461a      	mov	r2, r3
 80095b2:	4623      	mov	r3, r4
 80095b4:	f7f6 fee4 	bl	8000380 <__aeabi_uldivmod>
 80095b8:	4603      	mov	r3, r0
 80095ba:	460c      	mov	r4, r1
 80095bc:	4619      	mov	r1, r3
 80095be:	4622      	mov	r2, r4
 80095c0:	f04f 0300 	mov.w	r3, #0
 80095c4:	f04f 0400 	mov.w	r4, #0
 80095c8:	0214      	lsls	r4, r2, #8
 80095ca:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80095ce:	020b      	lsls	r3, r1, #8
 80095d0:	687a      	ldr	r2, [r7, #4]
 80095d2:	6852      	ldr	r2, [r2, #4]
 80095d4:	0852      	lsrs	r2, r2, #1
 80095d6:	4611      	mov	r1, r2
 80095d8:	f04f 0200 	mov.w	r2, #0
 80095dc:	eb13 0b01 	adds.w	fp, r3, r1
 80095e0:	eb44 0c02 	adc.w	ip, r4, r2
 80095e4:	4658      	mov	r0, fp
 80095e6:	4661      	mov	r1, ip
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	685b      	ldr	r3, [r3, #4]
 80095ec:	f04f 0400 	mov.w	r4, #0
 80095f0:	461a      	mov	r2, r3
 80095f2:	4623      	mov	r3, r4
 80095f4:	f7f6 fec4 	bl	8000380 <__aeabi_uldivmod>
 80095f8:	4603      	mov	r3, r0
 80095fa:	460c      	mov	r4, r1
 80095fc:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
            }
            break;
 80095fe:	e19d      	b.n	800993c <UART_SetConfig+0x13ac>
              usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009604:	2b00      	cmp	r3, #0
 8009606:	d05b      	beq.n	80096c0 <UART_SetConfig+0x1130>
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800960c:	2b01      	cmp	r3, #1
 800960e:	d053      	beq.n	80096b8 <UART_SetConfig+0x1128>
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009614:	2b02      	cmp	r3, #2
 8009616:	d04b      	beq.n	80096b0 <UART_SetConfig+0x1120>
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800961c:	2b03      	cmp	r3, #3
 800961e:	d043      	beq.n	80096a8 <UART_SetConfig+0x1118>
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009624:	2b04      	cmp	r3, #4
 8009626:	d03b      	beq.n	80096a0 <UART_SetConfig+0x1110>
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800962c:	2b05      	cmp	r3, #5
 800962e:	d033      	beq.n	8009698 <UART_SetConfig+0x1108>
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009634:	2b06      	cmp	r3, #6
 8009636:	d02b      	beq.n	8009690 <UART_SetConfig+0x1100>
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800963c:	2b07      	cmp	r3, #7
 800963e:	d023      	beq.n	8009688 <UART_SetConfig+0x10f8>
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009644:	2b08      	cmp	r3, #8
 8009646:	d01b      	beq.n	8009680 <UART_SetConfig+0x10f0>
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800964c:	2b09      	cmp	r3, #9
 800964e:	d013      	beq.n	8009678 <UART_SetConfig+0x10e8>
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009654:	2b0a      	cmp	r3, #10
 8009656:	d00b      	beq.n	8009670 <UART_SetConfig+0x10e0>
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800965c:	2b0b      	cmp	r3, #11
 800965e:	d103      	bne.n	8009668 <UART_SetConfig+0x10d8>
 8009660:	4b2a      	ldr	r3, [pc, #168]	; (800970c <UART_SetConfig+0x117c>)
 8009662:	f04f 0400 	mov.w	r4, #0
 8009666:	e02e      	b.n	80096c6 <UART_SetConfig+0x1136>
 8009668:	4b29      	ldr	r3, [pc, #164]	; (8009710 <UART_SetConfig+0x1180>)
 800966a:	f04f 0403 	mov.w	r4, #3
 800966e:	e02a      	b.n	80096c6 <UART_SetConfig+0x1136>
 8009670:	4b28      	ldr	r3, [pc, #160]	; (8009714 <UART_SetConfig+0x1184>)
 8009672:	f04f 0400 	mov.w	r4, #0
 8009676:	e026      	b.n	80096c6 <UART_SetConfig+0x1136>
 8009678:	4b27      	ldr	r3, [pc, #156]	; (8009718 <UART_SetConfig+0x1188>)
 800967a:	f04f 0400 	mov.w	r4, #0
 800967e:	e022      	b.n	80096c6 <UART_SetConfig+0x1136>
 8009680:	4b26      	ldr	r3, [pc, #152]	; (800971c <UART_SetConfig+0x118c>)
 8009682:	f04f 0400 	mov.w	r4, #0
 8009686:	e01e      	b.n	80096c6 <UART_SetConfig+0x1136>
 8009688:	4b25      	ldr	r3, [pc, #148]	; (8009720 <UART_SetConfig+0x1190>)
 800968a:	f04f 0400 	mov.w	r4, #0
 800968e:	e01a      	b.n	80096c6 <UART_SetConfig+0x1136>
 8009690:	a419      	add	r4, pc, #100	; (adr r4, 80096f8 <UART_SetConfig+0x1168>)
 8009692:	e9d4 3400 	ldrd	r3, r4, [r4]
 8009696:	e016      	b.n	80096c6 <UART_SetConfig+0x1136>
 8009698:	4b22      	ldr	r3, [pc, #136]	; (8009724 <UART_SetConfig+0x1194>)
 800969a:	f04f 0400 	mov.w	r4, #0
 800969e:	e012      	b.n	80096c6 <UART_SetConfig+0x1136>
 80096a0:	4b21      	ldr	r3, [pc, #132]	; (8009728 <UART_SetConfig+0x1198>)
 80096a2:	f04f 0400 	mov.w	r4, #0
 80096a6:	e00e      	b.n	80096c6 <UART_SetConfig+0x1136>
 80096a8:	a415      	add	r4, pc, #84	; (adr r4, 8009700 <UART_SetConfig+0x1170>)
 80096aa:	e9d4 3400 	ldrd	r3, r4, [r4]
 80096ae:	e00a      	b.n	80096c6 <UART_SetConfig+0x1136>
 80096b0:	4b1e      	ldr	r3, [pc, #120]	; (800972c <UART_SetConfig+0x119c>)
 80096b2:	f04f 0400 	mov.w	r4, #0
 80096b6:	e006      	b.n	80096c6 <UART_SetConfig+0x1136>
 80096b8:	4b1d      	ldr	r3, [pc, #116]	; (8009730 <UART_SetConfig+0x11a0>)
 80096ba:	f04f 0401 	mov.w	r4, #1
 80096be:	e002      	b.n	80096c6 <UART_SetConfig+0x1136>
 80096c0:	4b13      	ldr	r3, [pc, #76]	; (8009710 <UART_SetConfig+0x1180>)
 80096c2:	f04f 0403 	mov.w	r4, #3
 80096c6:	687a      	ldr	r2, [r7, #4]
 80096c8:	6852      	ldr	r2, [r2, #4]
 80096ca:	0852      	lsrs	r2, r2, #1
 80096cc:	4611      	mov	r1, r2
 80096ce:	f04f 0200 	mov.w	r2, #0
 80096d2:	eb13 0b01 	adds.w	fp, r3, r1
 80096d6:	eb44 0c02 	adc.w	ip, r4, r2
 80096da:	4658      	mov	r0, fp
 80096dc:	4661      	mov	r1, ip
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	685b      	ldr	r3, [r3, #4]
 80096e2:	f04f 0400 	mov.w	r4, #0
 80096e6:	461a      	mov	r2, r3
 80096e8:	4623      	mov	r3, r4
 80096ea:	f7f6 fe49 	bl	8000380 <__aeabi_uldivmod>
 80096ee:	4603      	mov	r3, r0
 80096f0:	460c      	mov	r4, r1
 80096f2:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80096f4:	e122      	b.n	800993c <UART_SetConfig+0x13ac>
 80096f6:	bf00      	nop
 80096f8:	51615500 	.word	0x51615500
 80096fc:	00000000 	.word	0x00000000
 8009700:	a2c2aa00 	.word	0xa2c2aa00
 8009704:	00000000 	.word	0x00000000
 8009708:	58024400 	.word	0x58024400
 800970c:	03d09000 	.word	0x03d09000
 8009710:	d0900000 	.word	0xd0900000
 8009714:	07a12000 	.word	0x07a12000
 8009718:	0f424000 	.word	0x0f424000
 800971c:	1e848000 	.word	0x1e848000
 8009720:	3d090000 	.word	0x3d090000
 8009724:	61a80000 	.word	0x61a80000
 8009728:	7a120000 	.word	0x7a120000
 800972c:	f4240000 	.word	0xf4240000
 8009730:	e8480000 	.word	0xe8480000
          case UART_CLOCKSOURCE_CSI:
            usartdiv = (uint32_t)(UART_DIV_LPUART(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009738:	2b00      	cmp	r3, #0
 800973a:	d05b      	beq.n	80097f4 <UART_SetConfig+0x1264>
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009740:	2b01      	cmp	r3, #1
 8009742:	d053      	beq.n	80097ec <UART_SetConfig+0x125c>
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009748:	2b02      	cmp	r3, #2
 800974a:	d04b      	beq.n	80097e4 <UART_SetConfig+0x1254>
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009750:	2b03      	cmp	r3, #3
 8009752:	d043      	beq.n	80097dc <UART_SetConfig+0x124c>
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009758:	2b04      	cmp	r3, #4
 800975a:	d03b      	beq.n	80097d4 <UART_SetConfig+0x1244>
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009760:	2b05      	cmp	r3, #5
 8009762:	d033      	beq.n	80097cc <UART_SetConfig+0x123c>
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009768:	2b06      	cmp	r3, #6
 800976a:	d02b      	beq.n	80097c4 <UART_SetConfig+0x1234>
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009770:	2b07      	cmp	r3, #7
 8009772:	d023      	beq.n	80097bc <UART_SetConfig+0x122c>
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009778:	2b08      	cmp	r3, #8
 800977a:	d01b      	beq.n	80097b4 <UART_SetConfig+0x1224>
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009780:	2b09      	cmp	r3, #9
 8009782:	d013      	beq.n	80097ac <UART_SetConfig+0x121c>
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009788:	2b0a      	cmp	r3, #10
 800978a:	d00b      	beq.n	80097a4 <UART_SetConfig+0x1214>
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009790:	2b0b      	cmp	r3, #11
 8009792:	d103      	bne.n	800979c <UART_SetConfig+0x120c>
 8009794:	4bc0      	ldr	r3, [pc, #768]	; (8009a98 <UART_SetConfig+0x1508>)
 8009796:	f04f 0400 	mov.w	r4, #0
 800979a:	e02e      	b.n	80097fa <UART_SetConfig+0x126a>
 800979c:	4bbf      	ldr	r3, [pc, #764]	; (8009a9c <UART_SetConfig+0x150c>)
 800979e:	f04f 0400 	mov.w	r4, #0
 80097a2:	e02a      	b.n	80097fa <UART_SetConfig+0x126a>
 80097a4:	4bbe      	ldr	r3, [pc, #760]	; (8009aa0 <UART_SetConfig+0x1510>)
 80097a6:	f04f 0400 	mov.w	r4, #0
 80097aa:	e026      	b.n	80097fa <UART_SetConfig+0x126a>
 80097ac:	4bbd      	ldr	r3, [pc, #756]	; (8009aa4 <UART_SetConfig+0x1514>)
 80097ae:	f04f 0400 	mov.w	r4, #0
 80097b2:	e022      	b.n	80097fa <UART_SetConfig+0x126a>
 80097b4:	4bbc      	ldr	r3, [pc, #752]	; (8009aa8 <UART_SetConfig+0x1518>)
 80097b6:	f04f 0400 	mov.w	r4, #0
 80097ba:	e01e      	b.n	80097fa <UART_SetConfig+0x126a>
 80097bc:	4bbb      	ldr	r3, [pc, #748]	; (8009aac <UART_SetConfig+0x151c>)
 80097be:	f04f 0400 	mov.w	r4, #0
 80097c2:	e01a      	b.n	80097fa <UART_SetConfig+0x126a>
 80097c4:	a4b0      	add	r4, pc, #704	; (adr r4, 8009a88 <UART_SetConfig+0x14f8>)
 80097c6:	e9d4 3400 	ldrd	r3, r4, [r4]
 80097ca:	e016      	b.n	80097fa <UART_SetConfig+0x126a>
 80097cc:	4bb8      	ldr	r3, [pc, #736]	; (8009ab0 <UART_SetConfig+0x1520>)
 80097ce:	f04f 0400 	mov.w	r4, #0
 80097d2:	e012      	b.n	80097fa <UART_SetConfig+0x126a>
 80097d4:	4bb7      	ldr	r3, [pc, #732]	; (8009ab4 <UART_SetConfig+0x1524>)
 80097d6:	f04f 0400 	mov.w	r4, #0
 80097da:	e00e      	b.n	80097fa <UART_SetConfig+0x126a>
 80097dc:	a4ac      	add	r4, pc, #688	; (adr r4, 8009a90 <UART_SetConfig+0x1500>)
 80097de:	e9d4 3400 	ldrd	r3, r4, [r4]
 80097e2:	e00a      	b.n	80097fa <UART_SetConfig+0x126a>
 80097e4:	4bb4      	ldr	r3, [pc, #720]	; (8009ab8 <UART_SetConfig+0x1528>)
 80097e6:	f04f 0400 	mov.w	r4, #0
 80097ea:	e006      	b.n	80097fa <UART_SetConfig+0x126a>
 80097ec:	4bb3      	ldr	r3, [pc, #716]	; (8009abc <UART_SetConfig+0x152c>)
 80097ee:	f04f 0400 	mov.w	r4, #0
 80097f2:	e002      	b.n	80097fa <UART_SetConfig+0x126a>
 80097f4:	4ba9      	ldr	r3, [pc, #676]	; (8009a9c <UART_SetConfig+0x150c>)
 80097f6:	f04f 0400 	mov.w	r4, #0
 80097fa:	687a      	ldr	r2, [r7, #4]
 80097fc:	6852      	ldr	r2, [r2, #4]
 80097fe:	0852      	lsrs	r2, r2, #1
 8009800:	4611      	mov	r1, r2
 8009802:	f04f 0200 	mov.w	r2, #0
 8009806:	eb13 0b01 	adds.w	fp, r3, r1
 800980a:	eb44 0c02 	adc.w	ip, r4, r2
 800980e:	4658      	mov	r0, fp
 8009810:	4661      	mov	r1, ip
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	685b      	ldr	r3, [r3, #4]
 8009816:	f04f 0400 	mov.w	r4, #0
 800981a:	461a      	mov	r2, r3
 800981c:	4623      	mov	r3, r4
 800981e:	f7f6 fdaf 	bl	8000380 <__aeabi_uldivmod>
 8009822:	4603      	mov	r3, r0
 8009824:	460c      	mov	r4, r1
 8009826:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8009828:	e088      	b.n	800993c <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_LSE:
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800982e:	2b00      	cmp	r3, #0
 8009830:	d064      	beq.n	80098fc <UART_SetConfig+0x136c>
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009836:	2b01      	cmp	r3, #1
 8009838:	d05b      	beq.n	80098f2 <UART_SetConfig+0x1362>
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800983e:	2b02      	cmp	r3, #2
 8009840:	d052      	beq.n	80098e8 <UART_SetConfig+0x1358>
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009846:	2b03      	cmp	r3, #3
 8009848:	d04a      	beq.n	80098e0 <UART_SetConfig+0x1350>
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800984e:	2b04      	cmp	r3, #4
 8009850:	d041      	beq.n	80098d6 <UART_SetConfig+0x1346>
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009856:	2b05      	cmp	r3, #5
 8009858:	d039      	beq.n	80098ce <UART_SetConfig+0x133e>
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800985e:	2b06      	cmp	r3, #6
 8009860:	d031      	beq.n	80098c6 <UART_SetConfig+0x1336>
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009866:	2b07      	cmp	r3, #7
 8009868:	d028      	beq.n	80098bc <UART_SetConfig+0x132c>
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800986e:	2b08      	cmp	r3, #8
 8009870:	d01f      	beq.n	80098b2 <UART_SetConfig+0x1322>
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009876:	2b09      	cmp	r3, #9
 8009878:	d016      	beq.n	80098a8 <UART_SetConfig+0x1318>
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800987e:	2b0a      	cmp	r3, #10
 8009880:	d00d      	beq.n	800989e <UART_SetConfig+0x130e>
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009886:	2b0b      	cmp	r3, #11
 8009888:	d104      	bne.n	8009894 <UART_SetConfig+0x1304>
 800988a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800988e:	f04f 0400 	mov.w	r4, #0
 8009892:	e037      	b.n	8009904 <UART_SetConfig+0x1374>
 8009894:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8009898:	f04f 0400 	mov.w	r4, #0
 800989c:	e032      	b.n	8009904 <UART_SetConfig+0x1374>
 800989e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80098a2:	f04f 0400 	mov.w	r4, #0
 80098a6:	e02d      	b.n	8009904 <UART_SetConfig+0x1374>
 80098a8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80098ac:	f04f 0400 	mov.w	r4, #0
 80098b0:	e028      	b.n	8009904 <UART_SetConfig+0x1374>
 80098b2:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80098b6:	f04f 0400 	mov.w	r4, #0
 80098ba:	e023      	b.n	8009904 <UART_SetConfig+0x1374>
 80098bc:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80098c0:	f04f 0400 	mov.w	r4, #0
 80098c4:	e01e      	b.n	8009904 <UART_SetConfig+0x1374>
 80098c6:	4b7e      	ldr	r3, [pc, #504]	; (8009ac0 <UART_SetConfig+0x1530>)
 80098c8:	f04f 0400 	mov.w	r4, #0
 80098cc:	e01a      	b.n	8009904 <UART_SetConfig+0x1374>
 80098ce:	4b7d      	ldr	r3, [pc, #500]	; (8009ac4 <UART_SetConfig+0x1534>)
 80098d0:	f04f 0400 	mov.w	r4, #0
 80098d4:	e016      	b.n	8009904 <UART_SetConfig+0x1374>
 80098d6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80098da:	f04f 0400 	mov.w	r4, #0
 80098de:	e011      	b.n	8009904 <UART_SetConfig+0x1374>
 80098e0:	4b79      	ldr	r3, [pc, #484]	; (8009ac8 <UART_SetConfig+0x1538>)
 80098e2:	f04f 0400 	mov.w	r4, #0
 80098e6:	e00d      	b.n	8009904 <UART_SetConfig+0x1374>
 80098e8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80098ec:	f04f 0400 	mov.w	r4, #0
 80098f0:	e008      	b.n	8009904 <UART_SetConfig+0x1374>
 80098f2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80098f6:	f04f 0400 	mov.w	r4, #0
 80098fa:	e003      	b.n	8009904 <UART_SetConfig+0x1374>
 80098fc:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8009900:	f04f 0400 	mov.w	r4, #0
 8009904:	687a      	ldr	r2, [r7, #4]
 8009906:	6852      	ldr	r2, [r2, #4]
 8009908:	0852      	lsrs	r2, r2, #1
 800990a:	4611      	mov	r1, r2
 800990c:	f04f 0200 	mov.w	r2, #0
 8009910:	eb13 0b01 	adds.w	fp, r3, r1
 8009914:	eb44 0c02 	adc.w	ip, r4, r2
 8009918:	4658      	mov	r0, fp
 800991a:	4661      	mov	r1, ip
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	685b      	ldr	r3, [r3, #4]
 8009920:	f04f 0400 	mov.w	r4, #0
 8009924:	461a      	mov	r2, r3
 8009926:	4623      	mov	r3, r4
 8009928:	f7f6 fd2a 	bl	8000380 <__aeabi_uldivmod>
 800992c:	4603      	mov	r3, r0
 800992e:	460c      	mov	r4, r1
 8009930:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8009932:	e003      	b.n	800993c <UART_SetConfig+0x13ac>
          default:
            ret = HAL_ERROR;
 8009934:	2301      	movs	r3, #1
 8009936:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            break;
 800993a:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800993c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800993e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009942:	d309      	bcc.n	8009958 <UART_SetConfig+0x13c8>
 8009944:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009946:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800994a:	d205      	bcs.n	8009958 <UART_SetConfig+0x13c8>
        {
          huart->Instance->BRR = usartdiv;
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009952:	60da      	str	r2, [r3, #12]
 8009954:	f000 bf85 	b.w	800a862 <UART_SetConfig+0x22d2>
        }
        else
        {
          ret = HAL_ERROR;
 8009958:	2301      	movs	r3, #1
 800995a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800995e:	f000 bf80 	b.w	800a862 <UART_SetConfig+0x22d2>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	69db      	ldr	r3, [r3, #28]
 8009966:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800996a:	f040 83da 	bne.w	800a122 <UART_SetConfig+0x1b92>
  {
    switch (clocksource)
 800996e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8009972:	2b40      	cmp	r3, #64	; 0x40
 8009974:	f200 83b3 	bhi.w	800a0de <UART_SetConfig+0x1b4e>
 8009978:	a201      	add	r2, pc, #4	; (adr r2, 8009980 <UART_SetConfig+0x13f0>)
 800997a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800997e:	bf00      	nop
 8009980:	08009acd 	.word	0x08009acd
 8009984:	08009b85 	.word	0x08009b85
 8009988:	0800a0df 	.word	0x0800a0df
 800998c:	0800a0df 	.word	0x0800a0df
 8009990:	08009c3d 	.word	0x08009c3d
 8009994:	0800a0df 	.word	0x0800a0df
 8009998:	0800a0df 	.word	0x0800a0df
 800999c:	0800a0df 	.word	0x0800a0df
 80099a0:	08009cf9 	.word	0x08009cf9
 80099a4:	0800a0df 	.word	0x0800a0df
 80099a8:	0800a0df 	.word	0x0800a0df
 80099ac:	0800a0df 	.word	0x0800a0df
 80099b0:	0800a0df 	.word	0x0800a0df
 80099b4:	0800a0df 	.word	0x0800a0df
 80099b8:	0800a0df 	.word	0x0800a0df
 80099bc:	0800a0df 	.word	0x0800a0df
 80099c0:	08009db5 	.word	0x08009db5
 80099c4:	0800a0df 	.word	0x0800a0df
 80099c8:	0800a0df 	.word	0x0800a0df
 80099cc:	0800a0df 	.word	0x0800a0df
 80099d0:	0800a0df 	.word	0x0800a0df
 80099d4:	0800a0df 	.word	0x0800a0df
 80099d8:	0800a0df 	.word	0x0800a0df
 80099dc:	0800a0df 	.word	0x0800a0df
 80099e0:	0800a0df 	.word	0x0800a0df
 80099e4:	0800a0df 	.word	0x0800a0df
 80099e8:	0800a0df 	.word	0x0800a0df
 80099ec:	0800a0df 	.word	0x0800a0df
 80099f0:	0800a0df 	.word	0x0800a0df
 80099f4:	0800a0df 	.word	0x0800a0df
 80099f8:	0800a0df 	.word	0x0800a0df
 80099fc:	0800a0df 	.word	0x0800a0df
 8009a00:	08009f27 	.word	0x08009f27
 8009a04:	0800a0df 	.word	0x0800a0df
 8009a08:	0800a0df 	.word	0x0800a0df
 8009a0c:	0800a0df 	.word	0x0800a0df
 8009a10:	0800a0df 	.word	0x0800a0df
 8009a14:	0800a0df 	.word	0x0800a0df
 8009a18:	0800a0df 	.word	0x0800a0df
 8009a1c:	0800a0df 	.word	0x0800a0df
 8009a20:	0800a0df 	.word	0x0800a0df
 8009a24:	0800a0df 	.word	0x0800a0df
 8009a28:	0800a0df 	.word	0x0800a0df
 8009a2c:	0800a0df 	.word	0x0800a0df
 8009a30:	0800a0df 	.word	0x0800a0df
 8009a34:	0800a0df 	.word	0x0800a0df
 8009a38:	0800a0df 	.word	0x0800a0df
 8009a3c:	0800a0df 	.word	0x0800a0df
 8009a40:	0800a0df 	.word	0x0800a0df
 8009a44:	0800a0df 	.word	0x0800a0df
 8009a48:	0800a0df 	.word	0x0800a0df
 8009a4c:	0800a0df 	.word	0x0800a0df
 8009a50:	0800a0df 	.word	0x0800a0df
 8009a54:	0800a0df 	.word	0x0800a0df
 8009a58:	0800a0df 	.word	0x0800a0df
 8009a5c:	0800a0df 	.word	0x0800a0df
 8009a60:	0800a0df 	.word	0x0800a0df
 8009a64:	0800a0df 	.word	0x0800a0df
 8009a68:	0800a0df 	.word	0x0800a0df
 8009a6c:	0800a0df 	.word	0x0800a0df
 8009a70:	0800a0df 	.word	0x0800a0df
 8009a74:	0800a0df 	.word	0x0800a0df
 8009a78:	0800a0df 	.word	0x0800a0df
 8009a7c:	0800a0df 	.word	0x0800a0df
 8009a80:	0800a01d 	.word	0x0800a01d
 8009a84:	f3af 8000 	nop.w
 8009a88:	05161500 	.word	0x05161500
 8009a8c:	00000000 	.word	0x00000000
 8009a90:	0a2c2a00 	.word	0x0a2c2a00
 8009a94:	00000000 	.word	0x00000000
 8009a98:	003d0900 	.word	0x003d0900
 8009a9c:	3d090000 	.word	0x3d090000
 8009aa0:	007a1200 	.word	0x007a1200
 8009aa4:	00f42400 	.word	0x00f42400
 8009aa8:	01e84800 	.word	0x01e84800
 8009aac:	03d09000 	.word	0x03d09000
 8009ab0:	061a8000 	.word	0x061a8000
 8009ab4:	07a12000 	.word	0x07a12000
 8009ab8:	0f424000 	.word	0x0f424000
 8009abc:	1e848000 	.word	0x1e848000
 8009ac0:	000aaa00 	.word	0x000aaa00
 8009ac4:	000ccc00 	.word	0x000ccc00
 8009ac8:	00155500 	.word	0x00155500
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009acc:	f7fc ff28 	bl	8006920 <HAL_RCC_GetPCLK1Freq>
 8009ad0:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	d044      	beq.n	8009b64 <UART_SetConfig+0x15d4>
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ade:	2b01      	cmp	r3, #1
 8009ae0:	d03e      	beq.n	8009b60 <UART_SetConfig+0x15d0>
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ae6:	2b02      	cmp	r3, #2
 8009ae8:	d038      	beq.n	8009b5c <UART_SetConfig+0x15cc>
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009aee:	2b03      	cmp	r3, #3
 8009af0:	d032      	beq.n	8009b58 <UART_SetConfig+0x15c8>
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009af6:	2b04      	cmp	r3, #4
 8009af8:	d02c      	beq.n	8009b54 <UART_SetConfig+0x15c4>
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009afe:	2b05      	cmp	r3, #5
 8009b00:	d026      	beq.n	8009b50 <UART_SetConfig+0x15c0>
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b06:	2b06      	cmp	r3, #6
 8009b08:	d020      	beq.n	8009b4c <UART_SetConfig+0x15bc>
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b0e:	2b07      	cmp	r3, #7
 8009b10:	d01a      	beq.n	8009b48 <UART_SetConfig+0x15b8>
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b16:	2b08      	cmp	r3, #8
 8009b18:	d014      	beq.n	8009b44 <UART_SetConfig+0x15b4>
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b1e:	2b09      	cmp	r3, #9
 8009b20:	d00e      	beq.n	8009b40 <UART_SetConfig+0x15b0>
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b26:	2b0a      	cmp	r3, #10
 8009b28:	d008      	beq.n	8009b3c <UART_SetConfig+0x15ac>
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b2e:	2b0b      	cmp	r3, #11
 8009b30:	d102      	bne.n	8009b38 <UART_SetConfig+0x15a8>
 8009b32:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009b36:	e016      	b.n	8009b66 <UART_SetConfig+0x15d6>
 8009b38:	2301      	movs	r3, #1
 8009b3a:	e014      	b.n	8009b66 <UART_SetConfig+0x15d6>
 8009b3c:	2380      	movs	r3, #128	; 0x80
 8009b3e:	e012      	b.n	8009b66 <UART_SetConfig+0x15d6>
 8009b40:	2340      	movs	r3, #64	; 0x40
 8009b42:	e010      	b.n	8009b66 <UART_SetConfig+0x15d6>
 8009b44:	2320      	movs	r3, #32
 8009b46:	e00e      	b.n	8009b66 <UART_SetConfig+0x15d6>
 8009b48:	2310      	movs	r3, #16
 8009b4a:	e00c      	b.n	8009b66 <UART_SetConfig+0x15d6>
 8009b4c:	230c      	movs	r3, #12
 8009b4e:	e00a      	b.n	8009b66 <UART_SetConfig+0x15d6>
 8009b50:	230a      	movs	r3, #10
 8009b52:	e008      	b.n	8009b66 <UART_SetConfig+0x15d6>
 8009b54:	2308      	movs	r3, #8
 8009b56:	e006      	b.n	8009b66 <UART_SetConfig+0x15d6>
 8009b58:	2306      	movs	r3, #6
 8009b5a:	e004      	b.n	8009b66 <UART_SetConfig+0x15d6>
 8009b5c:	2304      	movs	r3, #4
 8009b5e:	e002      	b.n	8009b66 <UART_SetConfig+0x15d6>
 8009b60:	2302      	movs	r3, #2
 8009b62:	e000      	b.n	8009b66 <UART_SetConfig+0x15d6>
 8009b64:	2301      	movs	r3, #1
 8009b66:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009b68:	fbb2 f3f3 	udiv	r3, r2, r3
 8009b6c:	005a      	lsls	r2, r3, #1
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	685b      	ldr	r3, [r3, #4]
 8009b72:	085b      	lsrs	r3, r3, #1
 8009b74:	441a      	add	r2, r3
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	685b      	ldr	r3, [r3, #4]
 8009b7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8009b7e:	b29b      	uxth	r3, r3
 8009b80:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009b82:	e2b0      	b.n	800a0e6 <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009b84:	f7fc fee2 	bl	800694c <HAL_RCC_GetPCLK2Freq>
 8009b88:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d044      	beq.n	8009c1c <UART_SetConfig+0x168c>
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b96:	2b01      	cmp	r3, #1
 8009b98:	d03e      	beq.n	8009c18 <UART_SetConfig+0x1688>
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b9e:	2b02      	cmp	r3, #2
 8009ba0:	d038      	beq.n	8009c14 <UART_SetConfig+0x1684>
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ba6:	2b03      	cmp	r3, #3
 8009ba8:	d032      	beq.n	8009c10 <UART_SetConfig+0x1680>
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bae:	2b04      	cmp	r3, #4
 8009bb0:	d02c      	beq.n	8009c0c <UART_SetConfig+0x167c>
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bb6:	2b05      	cmp	r3, #5
 8009bb8:	d026      	beq.n	8009c08 <UART_SetConfig+0x1678>
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bbe:	2b06      	cmp	r3, #6
 8009bc0:	d020      	beq.n	8009c04 <UART_SetConfig+0x1674>
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bc6:	2b07      	cmp	r3, #7
 8009bc8:	d01a      	beq.n	8009c00 <UART_SetConfig+0x1670>
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bce:	2b08      	cmp	r3, #8
 8009bd0:	d014      	beq.n	8009bfc <UART_SetConfig+0x166c>
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bd6:	2b09      	cmp	r3, #9
 8009bd8:	d00e      	beq.n	8009bf8 <UART_SetConfig+0x1668>
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bde:	2b0a      	cmp	r3, #10
 8009be0:	d008      	beq.n	8009bf4 <UART_SetConfig+0x1664>
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009be6:	2b0b      	cmp	r3, #11
 8009be8:	d102      	bne.n	8009bf0 <UART_SetConfig+0x1660>
 8009bea:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009bee:	e016      	b.n	8009c1e <UART_SetConfig+0x168e>
 8009bf0:	2301      	movs	r3, #1
 8009bf2:	e014      	b.n	8009c1e <UART_SetConfig+0x168e>
 8009bf4:	2380      	movs	r3, #128	; 0x80
 8009bf6:	e012      	b.n	8009c1e <UART_SetConfig+0x168e>
 8009bf8:	2340      	movs	r3, #64	; 0x40
 8009bfa:	e010      	b.n	8009c1e <UART_SetConfig+0x168e>
 8009bfc:	2320      	movs	r3, #32
 8009bfe:	e00e      	b.n	8009c1e <UART_SetConfig+0x168e>
 8009c00:	2310      	movs	r3, #16
 8009c02:	e00c      	b.n	8009c1e <UART_SetConfig+0x168e>
 8009c04:	230c      	movs	r3, #12
 8009c06:	e00a      	b.n	8009c1e <UART_SetConfig+0x168e>
 8009c08:	230a      	movs	r3, #10
 8009c0a:	e008      	b.n	8009c1e <UART_SetConfig+0x168e>
 8009c0c:	2308      	movs	r3, #8
 8009c0e:	e006      	b.n	8009c1e <UART_SetConfig+0x168e>
 8009c10:	2306      	movs	r3, #6
 8009c12:	e004      	b.n	8009c1e <UART_SetConfig+0x168e>
 8009c14:	2304      	movs	r3, #4
 8009c16:	e002      	b.n	8009c1e <UART_SetConfig+0x168e>
 8009c18:	2302      	movs	r3, #2
 8009c1a:	e000      	b.n	8009c1e <UART_SetConfig+0x168e>
 8009c1c:	2301      	movs	r3, #1
 8009c1e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009c20:	fbb2 f3f3 	udiv	r3, r2, r3
 8009c24:	005a      	lsls	r2, r3, #1
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	685b      	ldr	r3, [r3, #4]
 8009c2a:	085b      	lsrs	r3, r3, #1
 8009c2c:	441a      	add	r2, r3
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	685b      	ldr	r3, [r3, #4]
 8009c32:	fbb2 f3f3 	udiv	r3, r2, r3
 8009c36:	b29b      	uxth	r3, r3
 8009c38:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009c3a:	e254      	b.n	800a0e6 <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009c3c:	f107 0318 	add.w	r3, r7, #24
 8009c40:	4618      	mov	r0, r3
 8009c42:	f7fd fd9f 	bl	8007784 <HAL_RCCEx_GetPLL2ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009c46:	69fa      	ldr	r2, [r7, #28]
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	d044      	beq.n	8009cda <UART_SetConfig+0x174a>
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c54:	2b01      	cmp	r3, #1
 8009c56:	d03e      	beq.n	8009cd6 <UART_SetConfig+0x1746>
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c5c:	2b02      	cmp	r3, #2
 8009c5e:	d038      	beq.n	8009cd2 <UART_SetConfig+0x1742>
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c64:	2b03      	cmp	r3, #3
 8009c66:	d032      	beq.n	8009cce <UART_SetConfig+0x173e>
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c6c:	2b04      	cmp	r3, #4
 8009c6e:	d02c      	beq.n	8009cca <UART_SetConfig+0x173a>
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c74:	2b05      	cmp	r3, #5
 8009c76:	d026      	beq.n	8009cc6 <UART_SetConfig+0x1736>
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c7c:	2b06      	cmp	r3, #6
 8009c7e:	d020      	beq.n	8009cc2 <UART_SetConfig+0x1732>
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c84:	2b07      	cmp	r3, #7
 8009c86:	d01a      	beq.n	8009cbe <UART_SetConfig+0x172e>
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c8c:	2b08      	cmp	r3, #8
 8009c8e:	d014      	beq.n	8009cba <UART_SetConfig+0x172a>
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c94:	2b09      	cmp	r3, #9
 8009c96:	d00e      	beq.n	8009cb6 <UART_SetConfig+0x1726>
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c9c:	2b0a      	cmp	r3, #10
 8009c9e:	d008      	beq.n	8009cb2 <UART_SetConfig+0x1722>
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ca4:	2b0b      	cmp	r3, #11
 8009ca6:	d102      	bne.n	8009cae <UART_SetConfig+0x171e>
 8009ca8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009cac:	e016      	b.n	8009cdc <UART_SetConfig+0x174c>
 8009cae:	2301      	movs	r3, #1
 8009cb0:	e014      	b.n	8009cdc <UART_SetConfig+0x174c>
 8009cb2:	2380      	movs	r3, #128	; 0x80
 8009cb4:	e012      	b.n	8009cdc <UART_SetConfig+0x174c>
 8009cb6:	2340      	movs	r3, #64	; 0x40
 8009cb8:	e010      	b.n	8009cdc <UART_SetConfig+0x174c>
 8009cba:	2320      	movs	r3, #32
 8009cbc:	e00e      	b.n	8009cdc <UART_SetConfig+0x174c>
 8009cbe:	2310      	movs	r3, #16
 8009cc0:	e00c      	b.n	8009cdc <UART_SetConfig+0x174c>
 8009cc2:	230c      	movs	r3, #12
 8009cc4:	e00a      	b.n	8009cdc <UART_SetConfig+0x174c>
 8009cc6:	230a      	movs	r3, #10
 8009cc8:	e008      	b.n	8009cdc <UART_SetConfig+0x174c>
 8009cca:	2308      	movs	r3, #8
 8009ccc:	e006      	b.n	8009cdc <UART_SetConfig+0x174c>
 8009cce:	2306      	movs	r3, #6
 8009cd0:	e004      	b.n	8009cdc <UART_SetConfig+0x174c>
 8009cd2:	2304      	movs	r3, #4
 8009cd4:	e002      	b.n	8009cdc <UART_SetConfig+0x174c>
 8009cd6:	2302      	movs	r3, #2
 8009cd8:	e000      	b.n	8009cdc <UART_SetConfig+0x174c>
 8009cda:	2301      	movs	r3, #1
 8009cdc:	fbb2 f3f3 	udiv	r3, r2, r3
 8009ce0:	005a      	lsls	r2, r3, #1
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	685b      	ldr	r3, [r3, #4]
 8009ce6:	085b      	lsrs	r3, r3, #1
 8009ce8:	441a      	add	r2, r3
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	685b      	ldr	r3, [r3, #4]
 8009cee:	fbb2 f3f3 	udiv	r3, r2, r3
 8009cf2:	b29b      	uxth	r3, r3
 8009cf4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009cf6:	e1f6      	b.n	800a0e6 <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009cf8:	f107 030c 	add.w	r3, r7, #12
 8009cfc:	4618      	mov	r0, r3
 8009cfe:	f7fd fe8d 	bl	8007a1c <HAL_RCCEx_GetPLL3ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009d02:	693a      	ldr	r2, [r7, #16]
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	d044      	beq.n	8009d96 <UART_SetConfig+0x1806>
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d10:	2b01      	cmp	r3, #1
 8009d12:	d03e      	beq.n	8009d92 <UART_SetConfig+0x1802>
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d18:	2b02      	cmp	r3, #2
 8009d1a:	d038      	beq.n	8009d8e <UART_SetConfig+0x17fe>
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d20:	2b03      	cmp	r3, #3
 8009d22:	d032      	beq.n	8009d8a <UART_SetConfig+0x17fa>
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d28:	2b04      	cmp	r3, #4
 8009d2a:	d02c      	beq.n	8009d86 <UART_SetConfig+0x17f6>
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d30:	2b05      	cmp	r3, #5
 8009d32:	d026      	beq.n	8009d82 <UART_SetConfig+0x17f2>
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d38:	2b06      	cmp	r3, #6
 8009d3a:	d020      	beq.n	8009d7e <UART_SetConfig+0x17ee>
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d40:	2b07      	cmp	r3, #7
 8009d42:	d01a      	beq.n	8009d7a <UART_SetConfig+0x17ea>
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d48:	2b08      	cmp	r3, #8
 8009d4a:	d014      	beq.n	8009d76 <UART_SetConfig+0x17e6>
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d50:	2b09      	cmp	r3, #9
 8009d52:	d00e      	beq.n	8009d72 <UART_SetConfig+0x17e2>
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d58:	2b0a      	cmp	r3, #10
 8009d5a:	d008      	beq.n	8009d6e <UART_SetConfig+0x17de>
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d60:	2b0b      	cmp	r3, #11
 8009d62:	d102      	bne.n	8009d6a <UART_SetConfig+0x17da>
 8009d64:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009d68:	e016      	b.n	8009d98 <UART_SetConfig+0x1808>
 8009d6a:	2301      	movs	r3, #1
 8009d6c:	e014      	b.n	8009d98 <UART_SetConfig+0x1808>
 8009d6e:	2380      	movs	r3, #128	; 0x80
 8009d70:	e012      	b.n	8009d98 <UART_SetConfig+0x1808>
 8009d72:	2340      	movs	r3, #64	; 0x40
 8009d74:	e010      	b.n	8009d98 <UART_SetConfig+0x1808>
 8009d76:	2320      	movs	r3, #32
 8009d78:	e00e      	b.n	8009d98 <UART_SetConfig+0x1808>
 8009d7a:	2310      	movs	r3, #16
 8009d7c:	e00c      	b.n	8009d98 <UART_SetConfig+0x1808>
 8009d7e:	230c      	movs	r3, #12
 8009d80:	e00a      	b.n	8009d98 <UART_SetConfig+0x1808>
 8009d82:	230a      	movs	r3, #10
 8009d84:	e008      	b.n	8009d98 <UART_SetConfig+0x1808>
 8009d86:	2308      	movs	r3, #8
 8009d88:	e006      	b.n	8009d98 <UART_SetConfig+0x1808>
 8009d8a:	2306      	movs	r3, #6
 8009d8c:	e004      	b.n	8009d98 <UART_SetConfig+0x1808>
 8009d8e:	2304      	movs	r3, #4
 8009d90:	e002      	b.n	8009d98 <UART_SetConfig+0x1808>
 8009d92:	2302      	movs	r3, #2
 8009d94:	e000      	b.n	8009d98 <UART_SetConfig+0x1808>
 8009d96:	2301      	movs	r3, #1
 8009d98:	fbb2 f3f3 	udiv	r3, r2, r3
 8009d9c:	005a      	lsls	r2, r3, #1
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	685b      	ldr	r3, [r3, #4]
 8009da2:	085b      	lsrs	r3, r3, #1
 8009da4:	441a      	add	r2, r3
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	685b      	ldr	r3, [r3, #4]
 8009daa:	fbb2 f3f3 	udiv	r3, r2, r3
 8009dae:	b29b      	uxth	r3, r3
 8009db0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009db2:	e198      	b.n	800a0e6 <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009db4:	4b87      	ldr	r3, [pc, #540]	; (8009fd4 <UART_SetConfig+0x1a44>)
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	f003 0320 	and.w	r3, r3, #32
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d05e      	beq.n	8009e7e <UART_SetConfig+0x18ee>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009dc0:	4b84      	ldr	r3, [pc, #528]	; (8009fd4 <UART_SetConfig+0x1a44>)
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	08db      	lsrs	r3, r3, #3
 8009dc6:	f003 0303 	and.w	r3, r3, #3
 8009dca:	4a83      	ldr	r2, [pc, #524]	; (8009fd8 <UART_SetConfig+0x1a48>)
 8009dcc:	40da      	lsrs	r2, r3
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	d044      	beq.n	8009e60 <UART_SetConfig+0x18d0>
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dda:	2b01      	cmp	r3, #1
 8009ddc:	d03e      	beq.n	8009e5c <UART_SetConfig+0x18cc>
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009de2:	2b02      	cmp	r3, #2
 8009de4:	d038      	beq.n	8009e58 <UART_SetConfig+0x18c8>
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dea:	2b03      	cmp	r3, #3
 8009dec:	d032      	beq.n	8009e54 <UART_SetConfig+0x18c4>
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009df2:	2b04      	cmp	r3, #4
 8009df4:	d02c      	beq.n	8009e50 <UART_SetConfig+0x18c0>
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dfa:	2b05      	cmp	r3, #5
 8009dfc:	d026      	beq.n	8009e4c <UART_SetConfig+0x18bc>
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e02:	2b06      	cmp	r3, #6
 8009e04:	d020      	beq.n	8009e48 <UART_SetConfig+0x18b8>
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e0a:	2b07      	cmp	r3, #7
 8009e0c:	d01a      	beq.n	8009e44 <UART_SetConfig+0x18b4>
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e12:	2b08      	cmp	r3, #8
 8009e14:	d014      	beq.n	8009e40 <UART_SetConfig+0x18b0>
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e1a:	2b09      	cmp	r3, #9
 8009e1c:	d00e      	beq.n	8009e3c <UART_SetConfig+0x18ac>
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e22:	2b0a      	cmp	r3, #10
 8009e24:	d008      	beq.n	8009e38 <UART_SetConfig+0x18a8>
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e2a:	2b0b      	cmp	r3, #11
 8009e2c:	d102      	bne.n	8009e34 <UART_SetConfig+0x18a4>
 8009e2e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009e32:	e016      	b.n	8009e62 <UART_SetConfig+0x18d2>
 8009e34:	2301      	movs	r3, #1
 8009e36:	e014      	b.n	8009e62 <UART_SetConfig+0x18d2>
 8009e38:	2380      	movs	r3, #128	; 0x80
 8009e3a:	e012      	b.n	8009e62 <UART_SetConfig+0x18d2>
 8009e3c:	2340      	movs	r3, #64	; 0x40
 8009e3e:	e010      	b.n	8009e62 <UART_SetConfig+0x18d2>
 8009e40:	2320      	movs	r3, #32
 8009e42:	e00e      	b.n	8009e62 <UART_SetConfig+0x18d2>
 8009e44:	2310      	movs	r3, #16
 8009e46:	e00c      	b.n	8009e62 <UART_SetConfig+0x18d2>
 8009e48:	230c      	movs	r3, #12
 8009e4a:	e00a      	b.n	8009e62 <UART_SetConfig+0x18d2>
 8009e4c:	230a      	movs	r3, #10
 8009e4e:	e008      	b.n	8009e62 <UART_SetConfig+0x18d2>
 8009e50:	2308      	movs	r3, #8
 8009e52:	e006      	b.n	8009e62 <UART_SetConfig+0x18d2>
 8009e54:	2306      	movs	r3, #6
 8009e56:	e004      	b.n	8009e62 <UART_SetConfig+0x18d2>
 8009e58:	2304      	movs	r3, #4
 8009e5a:	e002      	b.n	8009e62 <UART_SetConfig+0x18d2>
 8009e5c:	2302      	movs	r3, #2
 8009e5e:	e000      	b.n	8009e62 <UART_SetConfig+0x18d2>
 8009e60:	2301      	movs	r3, #1
 8009e62:	fbb2 f3f3 	udiv	r3, r2, r3
 8009e66:	005a      	lsls	r2, r3, #1
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	685b      	ldr	r3, [r3, #4]
 8009e6c:	085b      	lsrs	r3, r3, #1
 8009e6e:	441a      	add	r2, r3
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	685b      	ldr	r3, [r3, #4]
 8009e74:	fbb2 f3f3 	udiv	r3, r2, r3
 8009e78:	b29b      	uxth	r3, r3
 8009e7a:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
        }
        break;
 8009e7c:	e133      	b.n	800a0e6 <UART_SetConfig+0x1b56>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	d043      	beq.n	8009f0e <UART_SetConfig+0x197e>
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e8a:	2b01      	cmp	r3, #1
 8009e8c:	d03d      	beq.n	8009f0a <UART_SetConfig+0x197a>
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e92:	2b02      	cmp	r3, #2
 8009e94:	d037      	beq.n	8009f06 <UART_SetConfig+0x1976>
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e9a:	2b03      	cmp	r3, #3
 8009e9c:	d031      	beq.n	8009f02 <UART_SetConfig+0x1972>
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ea2:	2b04      	cmp	r3, #4
 8009ea4:	d02b      	beq.n	8009efe <UART_SetConfig+0x196e>
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009eaa:	2b05      	cmp	r3, #5
 8009eac:	d025      	beq.n	8009efa <UART_SetConfig+0x196a>
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009eb2:	2b06      	cmp	r3, #6
 8009eb4:	d01f      	beq.n	8009ef6 <UART_SetConfig+0x1966>
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009eba:	2b07      	cmp	r3, #7
 8009ebc:	d019      	beq.n	8009ef2 <UART_SetConfig+0x1962>
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ec2:	2b08      	cmp	r3, #8
 8009ec4:	d013      	beq.n	8009eee <UART_SetConfig+0x195e>
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009eca:	2b09      	cmp	r3, #9
 8009ecc:	d00d      	beq.n	8009eea <UART_SetConfig+0x195a>
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ed2:	2b0a      	cmp	r3, #10
 8009ed4:	d007      	beq.n	8009ee6 <UART_SetConfig+0x1956>
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009eda:	2b0b      	cmp	r3, #11
 8009edc:	d101      	bne.n	8009ee2 <UART_SetConfig+0x1952>
 8009ede:	4b3f      	ldr	r3, [pc, #252]	; (8009fdc <UART_SetConfig+0x1a4c>)
 8009ee0:	e016      	b.n	8009f10 <UART_SetConfig+0x1980>
 8009ee2:	4b3f      	ldr	r3, [pc, #252]	; (8009fe0 <UART_SetConfig+0x1a50>)
 8009ee4:	e014      	b.n	8009f10 <UART_SetConfig+0x1980>
 8009ee6:	4b3f      	ldr	r3, [pc, #252]	; (8009fe4 <UART_SetConfig+0x1a54>)
 8009ee8:	e012      	b.n	8009f10 <UART_SetConfig+0x1980>
 8009eea:	4b3f      	ldr	r3, [pc, #252]	; (8009fe8 <UART_SetConfig+0x1a58>)
 8009eec:	e010      	b.n	8009f10 <UART_SetConfig+0x1980>
 8009eee:	4b3f      	ldr	r3, [pc, #252]	; (8009fec <UART_SetConfig+0x1a5c>)
 8009ef0:	e00e      	b.n	8009f10 <UART_SetConfig+0x1980>
 8009ef2:	4b3f      	ldr	r3, [pc, #252]	; (8009ff0 <UART_SetConfig+0x1a60>)
 8009ef4:	e00c      	b.n	8009f10 <UART_SetConfig+0x1980>
 8009ef6:	4b3f      	ldr	r3, [pc, #252]	; (8009ff4 <UART_SetConfig+0x1a64>)
 8009ef8:	e00a      	b.n	8009f10 <UART_SetConfig+0x1980>
 8009efa:	4b3f      	ldr	r3, [pc, #252]	; (8009ff8 <UART_SetConfig+0x1a68>)
 8009efc:	e008      	b.n	8009f10 <UART_SetConfig+0x1980>
 8009efe:	4b3f      	ldr	r3, [pc, #252]	; (8009ffc <UART_SetConfig+0x1a6c>)
 8009f00:	e006      	b.n	8009f10 <UART_SetConfig+0x1980>
 8009f02:	4b3f      	ldr	r3, [pc, #252]	; (800a000 <UART_SetConfig+0x1a70>)
 8009f04:	e004      	b.n	8009f10 <UART_SetConfig+0x1980>
 8009f06:	4b3f      	ldr	r3, [pc, #252]	; (800a004 <UART_SetConfig+0x1a74>)
 8009f08:	e002      	b.n	8009f10 <UART_SetConfig+0x1980>
 8009f0a:	4b33      	ldr	r3, [pc, #204]	; (8009fd8 <UART_SetConfig+0x1a48>)
 8009f0c:	e000      	b.n	8009f10 <UART_SetConfig+0x1980>
 8009f0e:	4b34      	ldr	r3, [pc, #208]	; (8009fe0 <UART_SetConfig+0x1a50>)
 8009f10:	687a      	ldr	r2, [r7, #4]
 8009f12:	6852      	ldr	r2, [r2, #4]
 8009f14:	0852      	lsrs	r2, r2, #1
 8009f16:	441a      	add	r2, r3
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	685b      	ldr	r3, [r3, #4]
 8009f1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009f20:	b29b      	uxth	r3, r3
 8009f22:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009f24:	e0df      	b.n	800a0e6 <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_CSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	d045      	beq.n	8009fba <UART_SetConfig+0x1a2a>
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f32:	2b01      	cmp	r3, #1
 8009f34:	d03f      	beq.n	8009fb6 <UART_SetConfig+0x1a26>
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f3a:	2b02      	cmp	r3, #2
 8009f3c:	d039      	beq.n	8009fb2 <UART_SetConfig+0x1a22>
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f42:	2b03      	cmp	r3, #3
 8009f44:	d033      	beq.n	8009fae <UART_SetConfig+0x1a1e>
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f4a:	2b04      	cmp	r3, #4
 8009f4c:	d02d      	beq.n	8009faa <UART_SetConfig+0x1a1a>
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f52:	2b05      	cmp	r3, #5
 8009f54:	d027      	beq.n	8009fa6 <UART_SetConfig+0x1a16>
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f5a:	2b06      	cmp	r3, #6
 8009f5c:	d021      	beq.n	8009fa2 <UART_SetConfig+0x1a12>
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f62:	2b07      	cmp	r3, #7
 8009f64:	d01b      	beq.n	8009f9e <UART_SetConfig+0x1a0e>
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f6a:	2b08      	cmp	r3, #8
 8009f6c:	d015      	beq.n	8009f9a <UART_SetConfig+0x1a0a>
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f72:	2b09      	cmp	r3, #9
 8009f74:	d00f      	beq.n	8009f96 <UART_SetConfig+0x1a06>
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f7a:	2b0a      	cmp	r3, #10
 8009f7c:	d008      	beq.n	8009f90 <UART_SetConfig+0x1a00>
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f82:	2b0b      	cmp	r3, #11
 8009f84:	d102      	bne.n	8009f8c <UART_SetConfig+0x19fc>
 8009f86:	f647 2312 	movw	r3, #31250	; 0x7a12
 8009f8a:	e017      	b.n	8009fbc <UART_SetConfig+0x1a2c>
 8009f8c:	4b18      	ldr	r3, [pc, #96]	; (8009ff0 <UART_SetConfig+0x1a60>)
 8009f8e:	e015      	b.n	8009fbc <UART_SetConfig+0x1a2c>
 8009f90:	f24f 4324 	movw	r3, #62500	; 0xf424
 8009f94:	e012      	b.n	8009fbc <UART_SetConfig+0x1a2c>
 8009f96:	4b1c      	ldr	r3, [pc, #112]	; (800a008 <UART_SetConfig+0x1a78>)
 8009f98:	e010      	b.n	8009fbc <UART_SetConfig+0x1a2c>
 8009f9a:	4b1c      	ldr	r3, [pc, #112]	; (800a00c <UART_SetConfig+0x1a7c>)
 8009f9c:	e00e      	b.n	8009fbc <UART_SetConfig+0x1a2c>
 8009f9e:	4b0f      	ldr	r3, [pc, #60]	; (8009fdc <UART_SetConfig+0x1a4c>)
 8009fa0:	e00c      	b.n	8009fbc <UART_SetConfig+0x1a2c>
 8009fa2:	4b1b      	ldr	r3, [pc, #108]	; (800a010 <UART_SetConfig+0x1a80>)
 8009fa4:	e00a      	b.n	8009fbc <UART_SetConfig+0x1a2c>
 8009fa6:	4b1b      	ldr	r3, [pc, #108]	; (800a014 <UART_SetConfig+0x1a84>)
 8009fa8:	e008      	b.n	8009fbc <UART_SetConfig+0x1a2c>
 8009faa:	4b0e      	ldr	r3, [pc, #56]	; (8009fe4 <UART_SetConfig+0x1a54>)
 8009fac:	e006      	b.n	8009fbc <UART_SetConfig+0x1a2c>
 8009fae:	4b1a      	ldr	r3, [pc, #104]	; (800a018 <UART_SetConfig+0x1a88>)
 8009fb0:	e004      	b.n	8009fbc <UART_SetConfig+0x1a2c>
 8009fb2:	4b0d      	ldr	r3, [pc, #52]	; (8009fe8 <UART_SetConfig+0x1a58>)
 8009fb4:	e002      	b.n	8009fbc <UART_SetConfig+0x1a2c>
 8009fb6:	4b0d      	ldr	r3, [pc, #52]	; (8009fec <UART_SetConfig+0x1a5c>)
 8009fb8:	e000      	b.n	8009fbc <UART_SetConfig+0x1a2c>
 8009fba:	4b0d      	ldr	r3, [pc, #52]	; (8009ff0 <UART_SetConfig+0x1a60>)
 8009fbc:	687a      	ldr	r2, [r7, #4]
 8009fbe:	6852      	ldr	r2, [r2, #4]
 8009fc0:	0852      	lsrs	r2, r2, #1
 8009fc2:	441a      	add	r2, r3
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	685b      	ldr	r3, [r3, #4]
 8009fc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8009fcc:	b29b      	uxth	r3, r3
 8009fce:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009fd0:	e089      	b.n	800a0e6 <UART_SetConfig+0x1b56>
 8009fd2:	bf00      	nop
 8009fd4:	58024400 	.word	0x58024400
 8009fd8:	03d09000 	.word	0x03d09000
 8009fdc:	0007a120 	.word	0x0007a120
 8009fe0:	07a12000 	.word	0x07a12000
 8009fe4:	000f4240 	.word	0x000f4240
 8009fe8:	001e8480 	.word	0x001e8480
 8009fec:	003d0900 	.word	0x003d0900
 8009ff0:	007a1200 	.word	0x007a1200
 8009ff4:	00a2c2aa 	.word	0x00a2c2aa
 8009ff8:	00c35000 	.word	0x00c35000
 8009ffc:	00f42400 	.word	0x00f42400
 800a000:	01458554 	.word	0x01458554
 800a004:	01e84800 	.word	0x01e84800
 800a008:	0001e848 	.word	0x0001e848
 800a00c:	0003d090 	.word	0x0003d090
 800a010:	000a2c2a 	.word	0x000a2c2a
 800a014:	000c3500 	.word	0x000c3500
 800a018:	00145854 	.word	0x00145854
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a020:	2b00      	cmp	r3, #0
 800a022:	d04f      	beq.n	800a0c4 <UART_SetConfig+0x1b34>
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a028:	2b01      	cmp	r3, #1
 800a02a:	d048      	beq.n	800a0be <UART_SetConfig+0x1b2e>
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a030:	2b02      	cmp	r3, #2
 800a032:	d041      	beq.n	800a0b8 <UART_SetConfig+0x1b28>
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a038:	2b03      	cmp	r3, #3
 800a03a:	d03a      	beq.n	800a0b2 <UART_SetConfig+0x1b22>
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a040:	2b04      	cmp	r3, #4
 800a042:	d033      	beq.n	800a0ac <UART_SetConfig+0x1b1c>
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a048:	2b05      	cmp	r3, #5
 800a04a:	d02c      	beq.n	800a0a6 <UART_SetConfig+0x1b16>
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a050:	2b06      	cmp	r3, #6
 800a052:	d025      	beq.n	800a0a0 <UART_SetConfig+0x1b10>
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a058:	2b07      	cmp	r3, #7
 800a05a:	d01e      	beq.n	800a09a <UART_SetConfig+0x1b0a>
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a060:	2b08      	cmp	r3, #8
 800a062:	d017      	beq.n	800a094 <UART_SetConfig+0x1b04>
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a068:	2b09      	cmp	r3, #9
 800a06a:	d010      	beq.n	800a08e <UART_SetConfig+0x1afe>
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a070:	2b0a      	cmp	r3, #10
 800a072:	d009      	beq.n	800a088 <UART_SetConfig+0x1af8>
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a078:	2b0b      	cmp	r3, #11
 800a07a:	d102      	bne.n	800a082 <UART_SetConfig+0x1af2>
 800a07c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a080:	e022      	b.n	800a0c8 <UART_SetConfig+0x1b38>
 800a082:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800a086:	e01f      	b.n	800a0c8 <UART_SetConfig+0x1b38>
 800a088:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a08c:	e01c      	b.n	800a0c8 <UART_SetConfig+0x1b38>
 800a08e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a092:	e019      	b.n	800a0c8 <UART_SetConfig+0x1b38>
 800a094:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a098:	e016      	b.n	800a0c8 <UART_SetConfig+0x1b38>
 800a09a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a09e:	e013      	b.n	800a0c8 <UART_SetConfig+0x1b38>
 800a0a0:	f241 5354 	movw	r3, #5460	; 0x1554
 800a0a4:	e010      	b.n	800a0c8 <UART_SetConfig+0x1b38>
 800a0a6:	f641 1398 	movw	r3, #6552	; 0x1998
 800a0aa:	e00d      	b.n	800a0c8 <UART_SetConfig+0x1b38>
 800a0ac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a0b0:	e00a      	b.n	800a0c8 <UART_SetConfig+0x1b38>
 800a0b2:	f642 23aa 	movw	r3, #10922	; 0x2aaa
 800a0b6:	e007      	b.n	800a0c8 <UART_SetConfig+0x1b38>
 800a0b8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800a0bc:	e004      	b.n	800a0c8 <UART_SetConfig+0x1b38>
 800a0be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a0c2:	e001      	b.n	800a0c8 <UART_SetConfig+0x1b38>
 800a0c4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800a0c8:	687a      	ldr	r2, [r7, #4]
 800a0ca:	6852      	ldr	r2, [r2, #4]
 800a0cc:	0852      	lsrs	r2, r2, #1
 800a0ce:	441a      	add	r2, r3
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	685b      	ldr	r3, [r3, #4]
 800a0d4:	fbb2 f3f3 	udiv	r3, r2, r3
 800a0d8:	b29b      	uxth	r3, r3
 800a0da:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800a0dc:	e003      	b.n	800a0e6 <UART_SetConfig+0x1b56>
      default:
        ret = HAL_ERROR;
 800a0de:	2301      	movs	r3, #1
 800a0e0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 800a0e4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a0e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a0e8:	2b0f      	cmp	r3, #15
 800a0ea:	d916      	bls.n	800a11a <UART_SetConfig+0x1b8a>
 800a0ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a0ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a0f2:	d212      	bcs.n	800a11a <UART_SetConfig+0x1b8a>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a0f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a0f6:	b29b      	uxth	r3, r3
 800a0f8:	f023 030f 	bic.w	r3, r3, #15
 800a0fc:	84fb      	strh	r3, [r7, #38]	; 0x26
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a0fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a100:	085b      	lsrs	r3, r3, #1
 800a102:	b29b      	uxth	r3, r3
 800a104:	f003 0307 	and.w	r3, r3, #7
 800a108:	b29a      	uxth	r2, r3
 800a10a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a10c:	4313      	orrs	r3, r2
 800a10e:	84fb      	strh	r3, [r7, #38]	; 0x26
      huart->Instance->BRR = brrtemp;
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800a116:	60da      	str	r2, [r3, #12]
 800a118:	e3a3      	b.n	800a862 <UART_SetConfig+0x22d2>
    }
    else
    {
      ret = HAL_ERROR;
 800a11a:	2301      	movs	r3, #1
 800a11c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a120:	e39f      	b.n	800a862 <UART_SetConfig+0x22d2>
    }
  }
  else
  {
    switch (clocksource)
 800a122:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800a126:	2b40      	cmp	r3, #64	; 0x40
 800a128:	f200 8388 	bhi.w	800a83c <UART_SetConfig+0x22ac>
 800a12c:	a201      	add	r2, pc, #4	; (adr r2, 800a134 <UART_SetConfig+0x1ba4>)
 800a12e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a132:	bf00      	nop
 800a134:	0800a239 	.word	0x0800a239
 800a138:	0800a2ef 	.word	0x0800a2ef
 800a13c:	0800a83d 	.word	0x0800a83d
 800a140:	0800a83d 	.word	0x0800a83d
 800a144:	0800a3a5 	.word	0x0800a3a5
 800a148:	0800a83d 	.word	0x0800a83d
 800a14c:	0800a83d 	.word	0x0800a83d
 800a150:	0800a83d 	.word	0x0800a83d
 800a154:	0800a45f 	.word	0x0800a45f
 800a158:	0800a83d 	.word	0x0800a83d
 800a15c:	0800a83d 	.word	0x0800a83d
 800a160:	0800a83d 	.word	0x0800a83d
 800a164:	0800a83d 	.word	0x0800a83d
 800a168:	0800a83d 	.word	0x0800a83d
 800a16c:	0800a83d 	.word	0x0800a83d
 800a170:	0800a83d 	.word	0x0800a83d
 800a174:	0800a519 	.word	0x0800a519
 800a178:	0800a83d 	.word	0x0800a83d
 800a17c:	0800a83d 	.word	0x0800a83d
 800a180:	0800a83d 	.word	0x0800a83d
 800a184:	0800a83d 	.word	0x0800a83d
 800a188:	0800a83d 	.word	0x0800a83d
 800a18c:	0800a83d 	.word	0x0800a83d
 800a190:	0800a83d 	.word	0x0800a83d
 800a194:	0800a83d 	.word	0x0800a83d
 800a198:	0800a83d 	.word	0x0800a83d
 800a19c:	0800a83d 	.word	0x0800a83d
 800a1a0:	0800a83d 	.word	0x0800a83d
 800a1a4:	0800a83d 	.word	0x0800a83d
 800a1a8:	0800a83d 	.word	0x0800a83d
 800a1ac:	0800a83d 	.word	0x0800a83d
 800a1b0:	0800a83d 	.word	0x0800a83d
 800a1b4:	0800a689 	.word	0x0800a689
 800a1b8:	0800a83d 	.word	0x0800a83d
 800a1bc:	0800a83d 	.word	0x0800a83d
 800a1c0:	0800a83d 	.word	0x0800a83d
 800a1c4:	0800a83d 	.word	0x0800a83d
 800a1c8:	0800a83d 	.word	0x0800a83d
 800a1cc:	0800a83d 	.word	0x0800a83d
 800a1d0:	0800a83d 	.word	0x0800a83d
 800a1d4:	0800a83d 	.word	0x0800a83d
 800a1d8:	0800a83d 	.word	0x0800a83d
 800a1dc:	0800a83d 	.word	0x0800a83d
 800a1e0:	0800a83d 	.word	0x0800a83d
 800a1e4:	0800a83d 	.word	0x0800a83d
 800a1e8:	0800a83d 	.word	0x0800a83d
 800a1ec:	0800a83d 	.word	0x0800a83d
 800a1f0:	0800a83d 	.word	0x0800a83d
 800a1f4:	0800a83d 	.word	0x0800a83d
 800a1f8:	0800a83d 	.word	0x0800a83d
 800a1fc:	0800a83d 	.word	0x0800a83d
 800a200:	0800a83d 	.word	0x0800a83d
 800a204:	0800a83d 	.word	0x0800a83d
 800a208:	0800a83d 	.word	0x0800a83d
 800a20c:	0800a83d 	.word	0x0800a83d
 800a210:	0800a83d 	.word	0x0800a83d
 800a214:	0800a83d 	.word	0x0800a83d
 800a218:	0800a83d 	.word	0x0800a83d
 800a21c:	0800a83d 	.word	0x0800a83d
 800a220:	0800a83d 	.word	0x0800a83d
 800a224:	0800a83d 	.word	0x0800a83d
 800a228:	0800a83d 	.word	0x0800a83d
 800a22c:	0800a83d 	.word	0x0800a83d
 800a230:	0800a83d 	.word	0x0800a83d
 800a234:	0800a77d 	.word	0x0800a77d
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a238:	f7fc fb72 	bl	8006920 <HAL_RCC_GetPCLK1Freq>
 800a23c:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a242:	2b00      	cmp	r3, #0
 800a244:	d044      	beq.n	800a2d0 <UART_SetConfig+0x1d40>
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a24a:	2b01      	cmp	r3, #1
 800a24c:	d03e      	beq.n	800a2cc <UART_SetConfig+0x1d3c>
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a252:	2b02      	cmp	r3, #2
 800a254:	d038      	beq.n	800a2c8 <UART_SetConfig+0x1d38>
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a25a:	2b03      	cmp	r3, #3
 800a25c:	d032      	beq.n	800a2c4 <UART_SetConfig+0x1d34>
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a262:	2b04      	cmp	r3, #4
 800a264:	d02c      	beq.n	800a2c0 <UART_SetConfig+0x1d30>
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a26a:	2b05      	cmp	r3, #5
 800a26c:	d026      	beq.n	800a2bc <UART_SetConfig+0x1d2c>
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a272:	2b06      	cmp	r3, #6
 800a274:	d020      	beq.n	800a2b8 <UART_SetConfig+0x1d28>
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a27a:	2b07      	cmp	r3, #7
 800a27c:	d01a      	beq.n	800a2b4 <UART_SetConfig+0x1d24>
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a282:	2b08      	cmp	r3, #8
 800a284:	d014      	beq.n	800a2b0 <UART_SetConfig+0x1d20>
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a28a:	2b09      	cmp	r3, #9
 800a28c:	d00e      	beq.n	800a2ac <UART_SetConfig+0x1d1c>
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a292:	2b0a      	cmp	r3, #10
 800a294:	d008      	beq.n	800a2a8 <UART_SetConfig+0x1d18>
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a29a:	2b0b      	cmp	r3, #11
 800a29c:	d102      	bne.n	800a2a4 <UART_SetConfig+0x1d14>
 800a29e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a2a2:	e016      	b.n	800a2d2 <UART_SetConfig+0x1d42>
 800a2a4:	2301      	movs	r3, #1
 800a2a6:	e014      	b.n	800a2d2 <UART_SetConfig+0x1d42>
 800a2a8:	2380      	movs	r3, #128	; 0x80
 800a2aa:	e012      	b.n	800a2d2 <UART_SetConfig+0x1d42>
 800a2ac:	2340      	movs	r3, #64	; 0x40
 800a2ae:	e010      	b.n	800a2d2 <UART_SetConfig+0x1d42>
 800a2b0:	2320      	movs	r3, #32
 800a2b2:	e00e      	b.n	800a2d2 <UART_SetConfig+0x1d42>
 800a2b4:	2310      	movs	r3, #16
 800a2b6:	e00c      	b.n	800a2d2 <UART_SetConfig+0x1d42>
 800a2b8:	230c      	movs	r3, #12
 800a2ba:	e00a      	b.n	800a2d2 <UART_SetConfig+0x1d42>
 800a2bc:	230a      	movs	r3, #10
 800a2be:	e008      	b.n	800a2d2 <UART_SetConfig+0x1d42>
 800a2c0:	2308      	movs	r3, #8
 800a2c2:	e006      	b.n	800a2d2 <UART_SetConfig+0x1d42>
 800a2c4:	2306      	movs	r3, #6
 800a2c6:	e004      	b.n	800a2d2 <UART_SetConfig+0x1d42>
 800a2c8:	2304      	movs	r3, #4
 800a2ca:	e002      	b.n	800a2d2 <UART_SetConfig+0x1d42>
 800a2cc:	2302      	movs	r3, #2
 800a2ce:	e000      	b.n	800a2d2 <UART_SetConfig+0x1d42>
 800a2d0:	2301      	movs	r3, #1
 800a2d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a2d4:	fbb2 f2f3 	udiv	r2, r2, r3
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	685b      	ldr	r3, [r3, #4]
 800a2dc:	085b      	lsrs	r3, r3, #1
 800a2de:	441a      	add	r2, r3
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	685b      	ldr	r3, [r3, #4]
 800a2e4:	fbb2 f3f3 	udiv	r3, r2, r3
 800a2e8:	b29b      	uxth	r3, r3
 800a2ea:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800a2ec:	e2aa      	b.n	800a844 <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a2ee:	f7fc fb2d 	bl	800694c <HAL_RCC_GetPCLK2Freq>
 800a2f2:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	d044      	beq.n	800a386 <UART_SetConfig+0x1df6>
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a300:	2b01      	cmp	r3, #1
 800a302:	d03e      	beq.n	800a382 <UART_SetConfig+0x1df2>
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a308:	2b02      	cmp	r3, #2
 800a30a:	d038      	beq.n	800a37e <UART_SetConfig+0x1dee>
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a310:	2b03      	cmp	r3, #3
 800a312:	d032      	beq.n	800a37a <UART_SetConfig+0x1dea>
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a318:	2b04      	cmp	r3, #4
 800a31a:	d02c      	beq.n	800a376 <UART_SetConfig+0x1de6>
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a320:	2b05      	cmp	r3, #5
 800a322:	d026      	beq.n	800a372 <UART_SetConfig+0x1de2>
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a328:	2b06      	cmp	r3, #6
 800a32a:	d020      	beq.n	800a36e <UART_SetConfig+0x1dde>
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a330:	2b07      	cmp	r3, #7
 800a332:	d01a      	beq.n	800a36a <UART_SetConfig+0x1dda>
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a338:	2b08      	cmp	r3, #8
 800a33a:	d014      	beq.n	800a366 <UART_SetConfig+0x1dd6>
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a340:	2b09      	cmp	r3, #9
 800a342:	d00e      	beq.n	800a362 <UART_SetConfig+0x1dd2>
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a348:	2b0a      	cmp	r3, #10
 800a34a:	d008      	beq.n	800a35e <UART_SetConfig+0x1dce>
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a350:	2b0b      	cmp	r3, #11
 800a352:	d102      	bne.n	800a35a <UART_SetConfig+0x1dca>
 800a354:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a358:	e016      	b.n	800a388 <UART_SetConfig+0x1df8>
 800a35a:	2301      	movs	r3, #1
 800a35c:	e014      	b.n	800a388 <UART_SetConfig+0x1df8>
 800a35e:	2380      	movs	r3, #128	; 0x80
 800a360:	e012      	b.n	800a388 <UART_SetConfig+0x1df8>
 800a362:	2340      	movs	r3, #64	; 0x40
 800a364:	e010      	b.n	800a388 <UART_SetConfig+0x1df8>
 800a366:	2320      	movs	r3, #32
 800a368:	e00e      	b.n	800a388 <UART_SetConfig+0x1df8>
 800a36a:	2310      	movs	r3, #16
 800a36c:	e00c      	b.n	800a388 <UART_SetConfig+0x1df8>
 800a36e:	230c      	movs	r3, #12
 800a370:	e00a      	b.n	800a388 <UART_SetConfig+0x1df8>
 800a372:	230a      	movs	r3, #10
 800a374:	e008      	b.n	800a388 <UART_SetConfig+0x1df8>
 800a376:	2308      	movs	r3, #8
 800a378:	e006      	b.n	800a388 <UART_SetConfig+0x1df8>
 800a37a:	2306      	movs	r3, #6
 800a37c:	e004      	b.n	800a388 <UART_SetConfig+0x1df8>
 800a37e:	2304      	movs	r3, #4
 800a380:	e002      	b.n	800a388 <UART_SetConfig+0x1df8>
 800a382:	2302      	movs	r3, #2
 800a384:	e000      	b.n	800a388 <UART_SetConfig+0x1df8>
 800a386:	2301      	movs	r3, #1
 800a388:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a38a:	fbb2 f2f3 	udiv	r2, r2, r3
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	685b      	ldr	r3, [r3, #4]
 800a392:	085b      	lsrs	r3, r3, #1
 800a394:	441a      	add	r2, r3
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	685b      	ldr	r3, [r3, #4]
 800a39a:	fbb2 f3f3 	udiv	r3, r2, r3
 800a39e:	b29b      	uxth	r3, r3
 800a3a0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800a3a2:	e24f      	b.n	800a844 <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a3a4:	f107 0318 	add.w	r3, r7, #24
 800a3a8:	4618      	mov	r0, r3
 800a3aa:	f7fd f9eb 	bl	8007784 <HAL_RCCEx_GetPLL2ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a3ae:	69fa      	ldr	r2, [r7, #28]
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	d044      	beq.n	800a442 <UART_SetConfig+0x1eb2>
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3bc:	2b01      	cmp	r3, #1
 800a3be:	d03e      	beq.n	800a43e <UART_SetConfig+0x1eae>
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3c4:	2b02      	cmp	r3, #2
 800a3c6:	d038      	beq.n	800a43a <UART_SetConfig+0x1eaa>
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3cc:	2b03      	cmp	r3, #3
 800a3ce:	d032      	beq.n	800a436 <UART_SetConfig+0x1ea6>
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3d4:	2b04      	cmp	r3, #4
 800a3d6:	d02c      	beq.n	800a432 <UART_SetConfig+0x1ea2>
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3dc:	2b05      	cmp	r3, #5
 800a3de:	d026      	beq.n	800a42e <UART_SetConfig+0x1e9e>
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3e4:	2b06      	cmp	r3, #6
 800a3e6:	d020      	beq.n	800a42a <UART_SetConfig+0x1e9a>
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3ec:	2b07      	cmp	r3, #7
 800a3ee:	d01a      	beq.n	800a426 <UART_SetConfig+0x1e96>
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3f4:	2b08      	cmp	r3, #8
 800a3f6:	d014      	beq.n	800a422 <UART_SetConfig+0x1e92>
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3fc:	2b09      	cmp	r3, #9
 800a3fe:	d00e      	beq.n	800a41e <UART_SetConfig+0x1e8e>
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a404:	2b0a      	cmp	r3, #10
 800a406:	d008      	beq.n	800a41a <UART_SetConfig+0x1e8a>
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a40c:	2b0b      	cmp	r3, #11
 800a40e:	d102      	bne.n	800a416 <UART_SetConfig+0x1e86>
 800a410:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a414:	e016      	b.n	800a444 <UART_SetConfig+0x1eb4>
 800a416:	2301      	movs	r3, #1
 800a418:	e014      	b.n	800a444 <UART_SetConfig+0x1eb4>
 800a41a:	2380      	movs	r3, #128	; 0x80
 800a41c:	e012      	b.n	800a444 <UART_SetConfig+0x1eb4>
 800a41e:	2340      	movs	r3, #64	; 0x40
 800a420:	e010      	b.n	800a444 <UART_SetConfig+0x1eb4>
 800a422:	2320      	movs	r3, #32
 800a424:	e00e      	b.n	800a444 <UART_SetConfig+0x1eb4>
 800a426:	2310      	movs	r3, #16
 800a428:	e00c      	b.n	800a444 <UART_SetConfig+0x1eb4>
 800a42a:	230c      	movs	r3, #12
 800a42c:	e00a      	b.n	800a444 <UART_SetConfig+0x1eb4>
 800a42e:	230a      	movs	r3, #10
 800a430:	e008      	b.n	800a444 <UART_SetConfig+0x1eb4>
 800a432:	2308      	movs	r3, #8
 800a434:	e006      	b.n	800a444 <UART_SetConfig+0x1eb4>
 800a436:	2306      	movs	r3, #6
 800a438:	e004      	b.n	800a444 <UART_SetConfig+0x1eb4>
 800a43a:	2304      	movs	r3, #4
 800a43c:	e002      	b.n	800a444 <UART_SetConfig+0x1eb4>
 800a43e:	2302      	movs	r3, #2
 800a440:	e000      	b.n	800a444 <UART_SetConfig+0x1eb4>
 800a442:	2301      	movs	r3, #1
 800a444:	fbb2 f2f3 	udiv	r2, r2, r3
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	685b      	ldr	r3, [r3, #4]
 800a44c:	085b      	lsrs	r3, r3, #1
 800a44e:	441a      	add	r2, r3
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	685b      	ldr	r3, [r3, #4]
 800a454:	fbb2 f3f3 	udiv	r3, r2, r3
 800a458:	b29b      	uxth	r3, r3
 800a45a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800a45c:	e1f2      	b.n	800a844 <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a45e:	f107 030c 	add.w	r3, r7, #12
 800a462:	4618      	mov	r0, r3
 800a464:	f7fd fada 	bl	8007a1c <HAL_RCCEx_GetPLL3ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a468:	693a      	ldr	r2, [r7, #16]
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a46e:	2b00      	cmp	r3, #0
 800a470:	d044      	beq.n	800a4fc <UART_SetConfig+0x1f6c>
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a476:	2b01      	cmp	r3, #1
 800a478:	d03e      	beq.n	800a4f8 <UART_SetConfig+0x1f68>
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a47e:	2b02      	cmp	r3, #2
 800a480:	d038      	beq.n	800a4f4 <UART_SetConfig+0x1f64>
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a486:	2b03      	cmp	r3, #3
 800a488:	d032      	beq.n	800a4f0 <UART_SetConfig+0x1f60>
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a48e:	2b04      	cmp	r3, #4
 800a490:	d02c      	beq.n	800a4ec <UART_SetConfig+0x1f5c>
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a496:	2b05      	cmp	r3, #5
 800a498:	d026      	beq.n	800a4e8 <UART_SetConfig+0x1f58>
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a49e:	2b06      	cmp	r3, #6
 800a4a0:	d020      	beq.n	800a4e4 <UART_SetConfig+0x1f54>
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4a6:	2b07      	cmp	r3, #7
 800a4a8:	d01a      	beq.n	800a4e0 <UART_SetConfig+0x1f50>
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4ae:	2b08      	cmp	r3, #8
 800a4b0:	d014      	beq.n	800a4dc <UART_SetConfig+0x1f4c>
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4b6:	2b09      	cmp	r3, #9
 800a4b8:	d00e      	beq.n	800a4d8 <UART_SetConfig+0x1f48>
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4be:	2b0a      	cmp	r3, #10
 800a4c0:	d008      	beq.n	800a4d4 <UART_SetConfig+0x1f44>
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4c6:	2b0b      	cmp	r3, #11
 800a4c8:	d102      	bne.n	800a4d0 <UART_SetConfig+0x1f40>
 800a4ca:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a4ce:	e016      	b.n	800a4fe <UART_SetConfig+0x1f6e>
 800a4d0:	2301      	movs	r3, #1
 800a4d2:	e014      	b.n	800a4fe <UART_SetConfig+0x1f6e>
 800a4d4:	2380      	movs	r3, #128	; 0x80
 800a4d6:	e012      	b.n	800a4fe <UART_SetConfig+0x1f6e>
 800a4d8:	2340      	movs	r3, #64	; 0x40
 800a4da:	e010      	b.n	800a4fe <UART_SetConfig+0x1f6e>
 800a4dc:	2320      	movs	r3, #32
 800a4de:	e00e      	b.n	800a4fe <UART_SetConfig+0x1f6e>
 800a4e0:	2310      	movs	r3, #16
 800a4e2:	e00c      	b.n	800a4fe <UART_SetConfig+0x1f6e>
 800a4e4:	230c      	movs	r3, #12
 800a4e6:	e00a      	b.n	800a4fe <UART_SetConfig+0x1f6e>
 800a4e8:	230a      	movs	r3, #10
 800a4ea:	e008      	b.n	800a4fe <UART_SetConfig+0x1f6e>
 800a4ec:	2308      	movs	r3, #8
 800a4ee:	e006      	b.n	800a4fe <UART_SetConfig+0x1f6e>
 800a4f0:	2306      	movs	r3, #6
 800a4f2:	e004      	b.n	800a4fe <UART_SetConfig+0x1f6e>
 800a4f4:	2304      	movs	r3, #4
 800a4f6:	e002      	b.n	800a4fe <UART_SetConfig+0x1f6e>
 800a4f8:	2302      	movs	r3, #2
 800a4fa:	e000      	b.n	800a4fe <UART_SetConfig+0x1f6e>
 800a4fc:	2301      	movs	r3, #1
 800a4fe:	fbb2 f2f3 	udiv	r2, r2, r3
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	685b      	ldr	r3, [r3, #4]
 800a506:	085b      	lsrs	r3, r3, #1
 800a508:	441a      	add	r2, r3
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	685b      	ldr	r3, [r3, #4]
 800a50e:	fbb2 f3f3 	udiv	r3, r2, r3
 800a512:	b29b      	uxth	r3, r3
 800a514:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800a516:	e195      	b.n	800a844 <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a518:	4b87      	ldr	r3, [pc, #540]	; (800a738 <UART_SetConfig+0x21a8>)
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	f003 0320 	and.w	r3, r3, #32
 800a520:	2b00      	cmp	r3, #0
 800a522:	d05d      	beq.n	800a5e0 <UART_SetConfig+0x2050>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a524:	4b84      	ldr	r3, [pc, #528]	; (800a738 <UART_SetConfig+0x21a8>)
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	08db      	lsrs	r3, r3, #3
 800a52a:	f003 0303 	and.w	r3, r3, #3
 800a52e:	4a83      	ldr	r2, [pc, #524]	; (800a73c <UART_SetConfig+0x21ac>)
 800a530:	40da      	lsrs	r2, r3
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a536:	2b00      	cmp	r3, #0
 800a538:	d044      	beq.n	800a5c4 <UART_SetConfig+0x2034>
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a53e:	2b01      	cmp	r3, #1
 800a540:	d03e      	beq.n	800a5c0 <UART_SetConfig+0x2030>
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a546:	2b02      	cmp	r3, #2
 800a548:	d038      	beq.n	800a5bc <UART_SetConfig+0x202c>
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a54e:	2b03      	cmp	r3, #3
 800a550:	d032      	beq.n	800a5b8 <UART_SetConfig+0x2028>
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a556:	2b04      	cmp	r3, #4
 800a558:	d02c      	beq.n	800a5b4 <UART_SetConfig+0x2024>
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a55e:	2b05      	cmp	r3, #5
 800a560:	d026      	beq.n	800a5b0 <UART_SetConfig+0x2020>
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a566:	2b06      	cmp	r3, #6
 800a568:	d020      	beq.n	800a5ac <UART_SetConfig+0x201c>
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a56e:	2b07      	cmp	r3, #7
 800a570:	d01a      	beq.n	800a5a8 <UART_SetConfig+0x2018>
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a576:	2b08      	cmp	r3, #8
 800a578:	d014      	beq.n	800a5a4 <UART_SetConfig+0x2014>
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a57e:	2b09      	cmp	r3, #9
 800a580:	d00e      	beq.n	800a5a0 <UART_SetConfig+0x2010>
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a586:	2b0a      	cmp	r3, #10
 800a588:	d008      	beq.n	800a59c <UART_SetConfig+0x200c>
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a58e:	2b0b      	cmp	r3, #11
 800a590:	d102      	bne.n	800a598 <UART_SetConfig+0x2008>
 800a592:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a596:	e016      	b.n	800a5c6 <UART_SetConfig+0x2036>
 800a598:	2301      	movs	r3, #1
 800a59a:	e014      	b.n	800a5c6 <UART_SetConfig+0x2036>
 800a59c:	2380      	movs	r3, #128	; 0x80
 800a59e:	e012      	b.n	800a5c6 <UART_SetConfig+0x2036>
 800a5a0:	2340      	movs	r3, #64	; 0x40
 800a5a2:	e010      	b.n	800a5c6 <UART_SetConfig+0x2036>
 800a5a4:	2320      	movs	r3, #32
 800a5a6:	e00e      	b.n	800a5c6 <UART_SetConfig+0x2036>
 800a5a8:	2310      	movs	r3, #16
 800a5aa:	e00c      	b.n	800a5c6 <UART_SetConfig+0x2036>
 800a5ac:	230c      	movs	r3, #12
 800a5ae:	e00a      	b.n	800a5c6 <UART_SetConfig+0x2036>
 800a5b0:	230a      	movs	r3, #10
 800a5b2:	e008      	b.n	800a5c6 <UART_SetConfig+0x2036>
 800a5b4:	2308      	movs	r3, #8
 800a5b6:	e006      	b.n	800a5c6 <UART_SetConfig+0x2036>
 800a5b8:	2306      	movs	r3, #6
 800a5ba:	e004      	b.n	800a5c6 <UART_SetConfig+0x2036>
 800a5bc:	2304      	movs	r3, #4
 800a5be:	e002      	b.n	800a5c6 <UART_SetConfig+0x2036>
 800a5c0:	2302      	movs	r3, #2
 800a5c2:	e000      	b.n	800a5c6 <UART_SetConfig+0x2036>
 800a5c4:	2301      	movs	r3, #1
 800a5c6:	fbb2 f2f3 	udiv	r2, r2, r3
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	685b      	ldr	r3, [r3, #4]
 800a5ce:	085b      	lsrs	r3, r3, #1
 800a5d0:	441a      	add	r2, r3
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	685b      	ldr	r3, [r3, #4]
 800a5d6:	fbb2 f3f3 	udiv	r3, r2, r3
 800a5da:	b29b      	uxth	r3, r3
 800a5dc:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
        }
        break;
 800a5de:	e131      	b.n	800a844 <UART_SetConfig+0x22b4>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5e4:	2b00      	cmp	r3, #0
 800a5e6:	d043      	beq.n	800a670 <UART_SetConfig+0x20e0>
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5ec:	2b01      	cmp	r3, #1
 800a5ee:	d03d      	beq.n	800a66c <UART_SetConfig+0x20dc>
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5f4:	2b02      	cmp	r3, #2
 800a5f6:	d037      	beq.n	800a668 <UART_SetConfig+0x20d8>
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5fc:	2b03      	cmp	r3, #3
 800a5fe:	d031      	beq.n	800a664 <UART_SetConfig+0x20d4>
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a604:	2b04      	cmp	r3, #4
 800a606:	d02b      	beq.n	800a660 <UART_SetConfig+0x20d0>
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a60c:	2b05      	cmp	r3, #5
 800a60e:	d025      	beq.n	800a65c <UART_SetConfig+0x20cc>
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a614:	2b06      	cmp	r3, #6
 800a616:	d01f      	beq.n	800a658 <UART_SetConfig+0x20c8>
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a61c:	2b07      	cmp	r3, #7
 800a61e:	d019      	beq.n	800a654 <UART_SetConfig+0x20c4>
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a624:	2b08      	cmp	r3, #8
 800a626:	d013      	beq.n	800a650 <UART_SetConfig+0x20c0>
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a62c:	2b09      	cmp	r3, #9
 800a62e:	d00d      	beq.n	800a64c <UART_SetConfig+0x20bc>
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a634:	2b0a      	cmp	r3, #10
 800a636:	d007      	beq.n	800a648 <UART_SetConfig+0x20b8>
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a63c:	2b0b      	cmp	r3, #11
 800a63e:	d101      	bne.n	800a644 <UART_SetConfig+0x20b4>
 800a640:	4b3f      	ldr	r3, [pc, #252]	; (800a740 <UART_SetConfig+0x21b0>)
 800a642:	e016      	b.n	800a672 <UART_SetConfig+0x20e2>
 800a644:	4b3d      	ldr	r3, [pc, #244]	; (800a73c <UART_SetConfig+0x21ac>)
 800a646:	e014      	b.n	800a672 <UART_SetConfig+0x20e2>
 800a648:	4b3e      	ldr	r3, [pc, #248]	; (800a744 <UART_SetConfig+0x21b4>)
 800a64a:	e012      	b.n	800a672 <UART_SetConfig+0x20e2>
 800a64c:	4b3e      	ldr	r3, [pc, #248]	; (800a748 <UART_SetConfig+0x21b8>)
 800a64e:	e010      	b.n	800a672 <UART_SetConfig+0x20e2>
 800a650:	4b3e      	ldr	r3, [pc, #248]	; (800a74c <UART_SetConfig+0x21bc>)
 800a652:	e00e      	b.n	800a672 <UART_SetConfig+0x20e2>
 800a654:	4b3e      	ldr	r3, [pc, #248]	; (800a750 <UART_SetConfig+0x21c0>)
 800a656:	e00c      	b.n	800a672 <UART_SetConfig+0x20e2>
 800a658:	4b3e      	ldr	r3, [pc, #248]	; (800a754 <UART_SetConfig+0x21c4>)
 800a65a:	e00a      	b.n	800a672 <UART_SetConfig+0x20e2>
 800a65c:	4b3e      	ldr	r3, [pc, #248]	; (800a758 <UART_SetConfig+0x21c8>)
 800a65e:	e008      	b.n	800a672 <UART_SetConfig+0x20e2>
 800a660:	4b3e      	ldr	r3, [pc, #248]	; (800a75c <UART_SetConfig+0x21cc>)
 800a662:	e006      	b.n	800a672 <UART_SetConfig+0x20e2>
 800a664:	4b3e      	ldr	r3, [pc, #248]	; (800a760 <UART_SetConfig+0x21d0>)
 800a666:	e004      	b.n	800a672 <UART_SetConfig+0x20e2>
 800a668:	4b3e      	ldr	r3, [pc, #248]	; (800a764 <UART_SetConfig+0x21d4>)
 800a66a:	e002      	b.n	800a672 <UART_SetConfig+0x20e2>
 800a66c:	4b3e      	ldr	r3, [pc, #248]	; (800a768 <UART_SetConfig+0x21d8>)
 800a66e:	e000      	b.n	800a672 <UART_SetConfig+0x20e2>
 800a670:	4b32      	ldr	r3, [pc, #200]	; (800a73c <UART_SetConfig+0x21ac>)
 800a672:	687a      	ldr	r2, [r7, #4]
 800a674:	6852      	ldr	r2, [r2, #4]
 800a676:	0852      	lsrs	r2, r2, #1
 800a678:	441a      	add	r2, r3
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	685b      	ldr	r3, [r3, #4]
 800a67e:	fbb2 f3f3 	udiv	r3, r2, r3
 800a682:	b29b      	uxth	r3, r3
 800a684:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800a686:	e0dd      	b.n	800a844 <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_CSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	d046      	beq.n	800a71e <UART_SetConfig+0x218e>
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a694:	2b01      	cmp	r3, #1
 800a696:	d040      	beq.n	800a71a <UART_SetConfig+0x218a>
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a69c:	2b02      	cmp	r3, #2
 800a69e:	d03a      	beq.n	800a716 <UART_SetConfig+0x2186>
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6a4:	2b03      	cmp	r3, #3
 800a6a6:	d034      	beq.n	800a712 <UART_SetConfig+0x2182>
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6ac:	2b04      	cmp	r3, #4
 800a6ae:	d02e      	beq.n	800a70e <UART_SetConfig+0x217e>
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6b4:	2b05      	cmp	r3, #5
 800a6b6:	d028      	beq.n	800a70a <UART_SetConfig+0x217a>
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6bc:	2b06      	cmp	r3, #6
 800a6be:	d022      	beq.n	800a706 <UART_SetConfig+0x2176>
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6c4:	2b07      	cmp	r3, #7
 800a6c6:	d01c      	beq.n	800a702 <UART_SetConfig+0x2172>
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6cc:	2b08      	cmp	r3, #8
 800a6ce:	d016      	beq.n	800a6fe <UART_SetConfig+0x216e>
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6d4:	2b09      	cmp	r3, #9
 800a6d6:	d00f      	beq.n	800a6f8 <UART_SetConfig+0x2168>
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6dc:	2b0a      	cmp	r3, #10
 800a6de:	d008      	beq.n	800a6f2 <UART_SetConfig+0x2162>
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6e4:	2b0b      	cmp	r3, #11
 800a6e6:	d102      	bne.n	800a6ee <UART_SetConfig+0x215e>
 800a6e8:	f643 5309 	movw	r3, #15625	; 0x3d09
 800a6ec:	e018      	b.n	800a720 <UART_SetConfig+0x2190>
 800a6ee:	4b18      	ldr	r3, [pc, #96]	; (800a750 <UART_SetConfig+0x21c0>)
 800a6f0:	e016      	b.n	800a720 <UART_SetConfig+0x2190>
 800a6f2:	f647 2312 	movw	r3, #31250	; 0x7a12
 800a6f6:	e013      	b.n	800a720 <UART_SetConfig+0x2190>
 800a6f8:	f24f 4324 	movw	r3, #62500	; 0xf424
 800a6fc:	e010      	b.n	800a720 <UART_SetConfig+0x2190>
 800a6fe:	4b1b      	ldr	r3, [pc, #108]	; (800a76c <UART_SetConfig+0x21dc>)
 800a700:	e00e      	b.n	800a720 <UART_SetConfig+0x2190>
 800a702:	4b0f      	ldr	r3, [pc, #60]	; (800a740 <UART_SetConfig+0x21b0>)
 800a704:	e00c      	b.n	800a720 <UART_SetConfig+0x2190>
 800a706:	4b1a      	ldr	r3, [pc, #104]	; (800a770 <UART_SetConfig+0x21e0>)
 800a708:	e00a      	b.n	800a720 <UART_SetConfig+0x2190>
 800a70a:	4b1a      	ldr	r3, [pc, #104]	; (800a774 <UART_SetConfig+0x21e4>)
 800a70c:	e008      	b.n	800a720 <UART_SetConfig+0x2190>
 800a70e:	4b0d      	ldr	r3, [pc, #52]	; (800a744 <UART_SetConfig+0x21b4>)
 800a710:	e006      	b.n	800a720 <UART_SetConfig+0x2190>
 800a712:	4b19      	ldr	r3, [pc, #100]	; (800a778 <UART_SetConfig+0x21e8>)
 800a714:	e004      	b.n	800a720 <UART_SetConfig+0x2190>
 800a716:	4b0c      	ldr	r3, [pc, #48]	; (800a748 <UART_SetConfig+0x21b8>)
 800a718:	e002      	b.n	800a720 <UART_SetConfig+0x2190>
 800a71a:	4b0c      	ldr	r3, [pc, #48]	; (800a74c <UART_SetConfig+0x21bc>)
 800a71c:	e000      	b.n	800a720 <UART_SetConfig+0x2190>
 800a71e:	4b0c      	ldr	r3, [pc, #48]	; (800a750 <UART_SetConfig+0x21c0>)
 800a720:	687a      	ldr	r2, [r7, #4]
 800a722:	6852      	ldr	r2, [r2, #4]
 800a724:	0852      	lsrs	r2, r2, #1
 800a726:	441a      	add	r2, r3
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	685b      	ldr	r3, [r3, #4]
 800a72c:	fbb2 f3f3 	udiv	r3, r2, r3
 800a730:	b29b      	uxth	r3, r3
 800a732:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800a734:	e086      	b.n	800a844 <UART_SetConfig+0x22b4>
 800a736:	bf00      	nop
 800a738:	58024400 	.word	0x58024400
 800a73c:	03d09000 	.word	0x03d09000
 800a740:	0003d090 	.word	0x0003d090
 800a744:	0007a120 	.word	0x0007a120
 800a748:	000f4240 	.word	0x000f4240
 800a74c:	001e8480 	.word	0x001e8480
 800a750:	003d0900 	.word	0x003d0900
 800a754:	00516155 	.word	0x00516155
 800a758:	0061a800 	.word	0x0061a800
 800a75c:	007a1200 	.word	0x007a1200
 800a760:	00a2c2aa 	.word	0x00a2c2aa
 800a764:	00f42400 	.word	0x00f42400
 800a768:	01e84800 	.word	0x01e84800
 800a76c:	0001e848 	.word	0x0001e848
 800a770:	00051615 	.word	0x00051615
 800a774:	00061a80 	.word	0x00061a80
 800a778:	000a2c2a 	.word	0x000a2c2a
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a780:	2b00      	cmp	r3, #0
 800a782:	d04e      	beq.n	800a822 <UART_SetConfig+0x2292>
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a788:	2b01      	cmp	r3, #1
 800a78a:	d047      	beq.n	800a81c <UART_SetConfig+0x228c>
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a790:	2b02      	cmp	r3, #2
 800a792:	d040      	beq.n	800a816 <UART_SetConfig+0x2286>
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a798:	2b03      	cmp	r3, #3
 800a79a:	d039      	beq.n	800a810 <UART_SetConfig+0x2280>
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7a0:	2b04      	cmp	r3, #4
 800a7a2:	d032      	beq.n	800a80a <UART_SetConfig+0x227a>
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7a8:	2b05      	cmp	r3, #5
 800a7aa:	d02b      	beq.n	800a804 <UART_SetConfig+0x2274>
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7b0:	2b06      	cmp	r3, #6
 800a7b2:	d024      	beq.n	800a7fe <UART_SetConfig+0x226e>
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7b8:	2b07      	cmp	r3, #7
 800a7ba:	d01d      	beq.n	800a7f8 <UART_SetConfig+0x2268>
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7c0:	2b08      	cmp	r3, #8
 800a7c2:	d016      	beq.n	800a7f2 <UART_SetConfig+0x2262>
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7c8:	2b09      	cmp	r3, #9
 800a7ca:	d00f      	beq.n	800a7ec <UART_SetConfig+0x225c>
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7d0:	2b0a      	cmp	r3, #10
 800a7d2:	d008      	beq.n	800a7e6 <UART_SetConfig+0x2256>
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7d8:	2b0b      	cmp	r3, #11
 800a7da:	d101      	bne.n	800a7e0 <UART_SetConfig+0x2250>
 800a7dc:	2380      	movs	r3, #128	; 0x80
 800a7de:	e022      	b.n	800a826 <UART_SetConfig+0x2296>
 800a7e0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a7e4:	e01f      	b.n	800a826 <UART_SetConfig+0x2296>
 800a7e6:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a7ea:	e01c      	b.n	800a826 <UART_SetConfig+0x2296>
 800a7ec:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a7f0:	e019      	b.n	800a826 <UART_SetConfig+0x2296>
 800a7f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a7f6:	e016      	b.n	800a826 <UART_SetConfig+0x2296>
 800a7f8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a7fc:	e013      	b.n	800a826 <UART_SetConfig+0x2296>
 800a7fe:	f640 23aa 	movw	r3, #2730	; 0xaaa
 800a802:	e010      	b.n	800a826 <UART_SetConfig+0x2296>
 800a804:	f640 43cc 	movw	r3, #3276	; 0xccc
 800a808:	e00d      	b.n	800a826 <UART_SetConfig+0x2296>
 800a80a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a80e:	e00a      	b.n	800a826 <UART_SetConfig+0x2296>
 800a810:	f241 5355 	movw	r3, #5461	; 0x1555
 800a814:	e007      	b.n	800a826 <UART_SetConfig+0x2296>
 800a816:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a81a:	e004      	b.n	800a826 <UART_SetConfig+0x2296>
 800a81c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800a820:	e001      	b.n	800a826 <UART_SetConfig+0x2296>
 800a822:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a826:	687a      	ldr	r2, [r7, #4]
 800a828:	6852      	ldr	r2, [r2, #4]
 800a82a:	0852      	lsrs	r2, r2, #1
 800a82c:	441a      	add	r2, r3
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	685b      	ldr	r3, [r3, #4]
 800a832:	fbb2 f3f3 	udiv	r3, r2, r3
 800a836:	b29b      	uxth	r3, r3
 800a838:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800a83a:	e003      	b.n	800a844 <UART_SetConfig+0x22b4>
      default:
        ret = HAL_ERROR;
 800a83c:	2301      	movs	r3, #1
 800a83e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 800a842:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a844:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a846:	2b0f      	cmp	r3, #15
 800a848:	d908      	bls.n	800a85c <UART_SetConfig+0x22cc>
 800a84a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a84c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a850:	d204      	bcs.n	800a85c <UART_SetConfig+0x22cc>
    {
      huart->Instance->BRR = usartdiv;
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	681b      	ldr	r3, [r3, #0]
 800a856:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a858:	60da      	str	r2, [r3, #12]
 800a85a:	e002      	b.n	800a862 <UART_SetConfig+0x22d2>
    }
    else
    {
      ret = HAL_ERROR;
 800a85c:	2301      	movs	r3, #1
 800a85e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	2201      	movs	r2, #1
 800a866:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	2201      	movs	r2, #1
 800a86e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	2200      	movs	r2, #0
 800a876:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	2200      	movs	r2, #0
 800a87c:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 800a87e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 800a882:	4618      	mov	r0, r3
 800a884:	3740      	adds	r7, #64	; 0x40
 800a886:	46bd      	mov	sp, r7
 800a888:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

0800a88c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a88c:	b480      	push	{r7}
 800a88e:	b083      	sub	sp, #12
 800a890:	af00      	add	r7, sp, #0
 800a892:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a898:	f003 0301 	and.w	r3, r3, #1
 800a89c:	2b00      	cmp	r3, #0
 800a89e:	d00a      	beq.n	800a8b6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	681b      	ldr	r3, [r3, #0]
 800a8a4:	685b      	ldr	r3, [r3, #4]
 800a8a6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	681b      	ldr	r3, [r3, #0]
 800a8b2:	430a      	orrs	r2, r1
 800a8b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a8ba:	f003 0302 	and.w	r3, r3, #2
 800a8be:	2b00      	cmp	r3, #0
 800a8c0:	d00a      	beq.n	800a8d8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	681b      	ldr	r3, [r3, #0]
 800a8c6:	685b      	ldr	r3, [r3, #4]
 800a8c8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	430a      	orrs	r2, r1
 800a8d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a8dc:	f003 0304 	and.w	r3, r3, #4
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	d00a      	beq.n	800a8fa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	681b      	ldr	r3, [r3, #0]
 800a8e8:	685b      	ldr	r3, [r3, #4]
 800a8ea:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	430a      	orrs	r2, r1
 800a8f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a8fe:	f003 0308 	and.w	r3, r3, #8
 800a902:	2b00      	cmp	r3, #0
 800a904:	d00a      	beq.n	800a91c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	681b      	ldr	r3, [r3, #0]
 800a90a:	685b      	ldr	r3, [r3, #4]
 800a90c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	430a      	orrs	r2, r1
 800a91a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a920:	f003 0310 	and.w	r3, r3, #16
 800a924:	2b00      	cmp	r3, #0
 800a926:	d00a      	beq.n	800a93e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	689b      	ldr	r3, [r3, #8]
 800a92e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	681b      	ldr	r3, [r3, #0]
 800a93a:	430a      	orrs	r2, r1
 800a93c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a942:	f003 0320 	and.w	r3, r3, #32
 800a946:	2b00      	cmp	r3, #0
 800a948:	d00a      	beq.n	800a960 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	681b      	ldr	r3, [r3, #0]
 800a94e:	689b      	ldr	r3, [r3, #8]
 800a950:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	681b      	ldr	r3, [r3, #0]
 800a95c:	430a      	orrs	r2, r1
 800a95e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a964:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a968:	2b00      	cmp	r3, #0
 800a96a:	d01a      	beq.n	800a9a2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	685b      	ldr	r3, [r3, #4]
 800a972:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	681b      	ldr	r3, [r3, #0]
 800a97e:	430a      	orrs	r2, r1
 800a980:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a986:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a98a:	d10a      	bne.n	800a9a2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	681b      	ldr	r3, [r3, #0]
 800a990:	685b      	ldr	r3, [r3, #4]
 800a992:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	681b      	ldr	r3, [r3, #0]
 800a99e:	430a      	orrs	r2, r1
 800a9a0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a9a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	d00a      	beq.n	800a9c4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	681b      	ldr	r3, [r3, #0]
 800a9b2:	685b      	ldr	r3, [r3, #4]
 800a9b4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	430a      	orrs	r2, r1
 800a9c2:	605a      	str	r2, [r3, #4]
  }
}
 800a9c4:	bf00      	nop
 800a9c6:	370c      	adds	r7, #12
 800a9c8:	46bd      	mov	sp, r7
 800a9ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ce:	4770      	bx	lr

0800a9d0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a9d0:	b580      	push	{r7, lr}
 800a9d2:	b086      	sub	sp, #24
 800a9d4:	af02      	add	r7, sp, #8
 800a9d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	2200      	movs	r2, #0
 800a9dc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800a9e0:	f7f8 f892 	bl	8002b08 <HAL_GetTick>
 800a9e4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	681b      	ldr	r3, [r3, #0]
 800a9ea:	681b      	ldr	r3, [r3, #0]
 800a9ec:	f003 0308 	and.w	r3, r3, #8
 800a9f0:	2b08      	cmp	r3, #8
 800a9f2:	d10e      	bne.n	800aa12 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a9f4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a9f8:	9300      	str	r3, [sp, #0]
 800a9fa:	68fb      	ldr	r3, [r7, #12]
 800a9fc:	2200      	movs	r2, #0
 800a9fe:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800aa02:	6878      	ldr	r0, [r7, #4]
 800aa04:	f000 f82c 	bl	800aa60 <UART_WaitOnFlagUntilTimeout>
 800aa08:	4603      	mov	r3, r0
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	d001      	beq.n	800aa12 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800aa0e:	2303      	movs	r3, #3
 800aa10:	e022      	b.n	800aa58 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	681b      	ldr	r3, [r3, #0]
 800aa16:	681b      	ldr	r3, [r3, #0]
 800aa18:	f003 0304 	and.w	r3, r3, #4
 800aa1c:	2b04      	cmp	r3, #4
 800aa1e:	d10e      	bne.n	800aa3e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800aa20:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800aa24:	9300      	str	r3, [sp, #0]
 800aa26:	68fb      	ldr	r3, [r7, #12]
 800aa28:	2200      	movs	r2, #0
 800aa2a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800aa2e:	6878      	ldr	r0, [r7, #4]
 800aa30:	f000 f816 	bl	800aa60 <UART_WaitOnFlagUntilTimeout>
 800aa34:	4603      	mov	r3, r0
 800aa36:	2b00      	cmp	r3, #0
 800aa38:	d001      	beq.n	800aa3e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800aa3a:	2303      	movs	r3, #3
 800aa3c:	e00c      	b.n	800aa58 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	2220      	movs	r2, #32
 800aa42:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	2220      	movs	r2, #32
 800aa4a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	2200      	movs	r2, #0
 800aa52:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800aa56:	2300      	movs	r3, #0
}
 800aa58:	4618      	mov	r0, r3
 800aa5a:	3710      	adds	r7, #16
 800aa5c:	46bd      	mov	sp, r7
 800aa5e:	bd80      	pop	{r7, pc}

0800aa60 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800aa60:	b580      	push	{r7, lr}
 800aa62:	b084      	sub	sp, #16
 800aa64:	af00      	add	r7, sp, #0
 800aa66:	60f8      	str	r0, [r7, #12]
 800aa68:	60b9      	str	r1, [r7, #8]
 800aa6a:	603b      	str	r3, [r7, #0]
 800aa6c:	4613      	mov	r3, r2
 800aa6e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800aa70:	e062      	b.n	800ab38 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800aa72:	69bb      	ldr	r3, [r7, #24]
 800aa74:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa78:	d05e      	beq.n	800ab38 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800aa7a:	f7f8 f845 	bl	8002b08 <HAL_GetTick>
 800aa7e:	4602      	mov	r2, r0
 800aa80:	683b      	ldr	r3, [r7, #0]
 800aa82:	1ad3      	subs	r3, r2, r3
 800aa84:	69ba      	ldr	r2, [r7, #24]
 800aa86:	429a      	cmp	r2, r3
 800aa88:	d302      	bcc.n	800aa90 <UART_WaitOnFlagUntilTimeout+0x30>
 800aa8a:	69bb      	ldr	r3, [r7, #24]
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	d11d      	bne.n	800aacc <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800aa90:	68fb      	ldr	r3, [r7, #12]
 800aa92:	681b      	ldr	r3, [r3, #0]
 800aa94:	681a      	ldr	r2, [r3, #0]
 800aa96:	68fb      	ldr	r3, [r7, #12]
 800aa98:	681b      	ldr	r3, [r3, #0]
 800aa9a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800aa9e:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aaa0:	68fb      	ldr	r3, [r7, #12]
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	689a      	ldr	r2, [r3, #8]
 800aaa6:	68fb      	ldr	r3, [r7, #12]
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	f022 0201 	bic.w	r2, r2, #1
 800aaae:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800aab0:	68fb      	ldr	r3, [r7, #12]
 800aab2:	2220      	movs	r2, #32
 800aab4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 800aab8:	68fb      	ldr	r3, [r7, #12]
 800aaba:	2220      	movs	r2, #32
 800aabc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 800aac0:	68fb      	ldr	r3, [r7, #12]
 800aac2:	2200      	movs	r2, #0
 800aac4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800aac8:	2303      	movs	r3, #3
 800aaca:	e045      	b.n	800ab58 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800aacc:	68fb      	ldr	r3, [r7, #12]
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	681b      	ldr	r3, [r3, #0]
 800aad2:	f003 0304 	and.w	r3, r3, #4
 800aad6:	2b00      	cmp	r3, #0
 800aad8:	d02e      	beq.n	800ab38 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800aada:	68fb      	ldr	r3, [r7, #12]
 800aadc:	681b      	ldr	r3, [r3, #0]
 800aade:	69db      	ldr	r3, [r3, #28]
 800aae0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800aae4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800aae8:	d126      	bne.n	800ab38 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800aaea:	68fb      	ldr	r3, [r7, #12]
 800aaec:	681b      	ldr	r3, [r3, #0]
 800aaee:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800aaf2:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800aaf4:	68fb      	ldr	r3, [r7, #12]
 800aaf6:	681b      	ldr	r3, [r3, #0]
 800aaf8:	681a      	ldr	r2, [r3, #0]
 800aafa:	68fb      	ldr	r3, [r7, #12]
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800ab02:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ab04:	68fb      	ldr	r3, [r7, #12]
 800ab06:	681b      	ldr	r3, [r3, #0]
 800ab08:	689a      	ldr	r2, [r3, #8]
 800ab0a:	68fb      	ldr	r3, [r7, #12]
 800ab0c:	681b      	ldr	r3, [r3, #0]
 800ab0e:	f022 0201 	bic.w	r2, r2, #1
 800ab12:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800ab14:	68fb      	ldr	r3, [r7, #12]
 800ab16:	2220      	movs	r2, #32
 800ab18:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 800ab1c:	68fb      	ldr	r3, [r7, #12]
 800ab1e:	2220      	movs	r2, #32
 800ab20:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800ab24:	68fb      	ldr	r3, [r7, #12]
 800ab26:	2220      	movs	r2, #32
 800ab28:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ab2c:	68fb      	ldr	r3, [r7, #12]
 800ab2e:	2200      	movs	r2, #0
 800ab30:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
          
          return HAL_TIMEOUT;
 800ab34:	2303      	movs	r3, #3
 800ab36:	e00f      	b.n	800ab58 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ab38:	68fb      	ldr	r3, [r7, #12]
 800ab3a:	681b      	ldr	r3, [r3, #0]
 800ab3c:	69da      	ldr	r2, [r3, #28]
 800ab3e:	68bb      	ldr	r3, [r7, #8]
 800ab40:	4013      	ands	r3, r2
 800ab42:	68ba      	ldr	r2, [r7, #8]
 800ab44:	429a      	cmp	r2, r3
 800ab46:	bf0c      	ite	eq
 800ab48:	2301      	moveq	r3, #1
 800ab4a:	2300      	movne	r3, #0
 800ab4c:	b2db      	uxtb	r3, r3
 800ab4e:	461a      	mov	r2, r3
 800ab50:	79fb      	ldrb	r3, [r7, #7]
 800ab52:	429a      	cmp	r2, r3
 800ab54:	d08d      	beq.n	800aa72 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800ab56:	2300      	movs	r3, #0
}
 800ab58:	4618      	mov	r0, r3
 800ab5a:	3710      	adds	r7, #16
 800ab5c:	46bd      	mov	sp, r7
 800ab5e:	bd80      	pop	{r7, pc}

0800ab60 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ab60:	b480      	push	{r7}
 800ab62:	b083      	sub	sp, #12
 800ab64:	af00      	add	r7, sp, #0
 800ab66:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	681b      	ldr	r3, [r3, #0]
 800ab6c:	681a      	ldr	r2, [r3, #0]
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	681b      	ldr	r3, [r3, #0]
 800ab72:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800ab76:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	681b      	ldr	r3, [r3, #0]
 800ab7c:	6899      	ldr	r1, [r3, #8]
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	681a      	ldr	r2, [r3, #0]
 800ab82:	4b08      	ldr	r3, [pc, #32]	; (800aba4 <UART_EndRxTransfer+0x44>)
 800ab84:	400b      	ands	r3, r1
 800ab86:	6093      	str	r3, [r2, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	2220      	movs	r2, #32
 800ab8c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	2200      	movs	r2, #0
 800ab94:	66da      	str	r2, [r3, #108]	; 0x6c
}
 800ab96:	bf00      	nop
 800ab98:	370c      	adds	r7, #12
 800ab9a:	46bd      	mov	sp, r7
 800ab9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aba0:	4770      	bx	lr
 800aba2:	bf00      	nop
 800aba4:	effffffe 	.word	0xeffffffe

0800aba8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800aba8:	b580      	push	{r7, lr}
 800abaa:	b084      	sub	sp, #16
 800abac:	af00      	add	r7, sp, #0
 800abae:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800abb4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800abb6:	68fb      	ldr	r3, [r7, #12]
 800abb8:	2200      	movs	r2, #0
 800abba:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800abbe:	68fb      	ldr	r3, [r7, #12]
 800abc0:	2200      	movs	r2, #0
 800abc2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800abc6:	68f8      	ldr	r0, [r7, #12]
 800abc8:	f7fd fcd8 	bl	800857c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800abcc:	bf00      	nop
 800abce:	3710      	adds	r7, #16
 800abd0:	46bd      	mov	sp, r7
 800abd2:	bd80      	pop	{r7, pc}

0800abd4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800abd4:	b580      	push	{r7, lr}
 800abd6:	b082      	sub	sp, #8
 800abd8:	af00      	add	r7, sp, #0
 800abda:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	681a      	ldr	r2, [r3, #0]
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	681b      	ldr	r3, [r3, #0]
 800abe6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800abea:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	2220      	movs	r2, #32
 800abf0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	2200      	movs	r2, #0
 800abf8:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800abfa:	6878      	ldr	r0, [r7, #4]
 800abfc:	f7fd fcb4 	bl	8008568 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ac00:	bf00      	nop
 800ac02:	3708      	adds	r7, #8
 800ac04:	46bd      	mov	sp, r7
 800ac06:	bd80      	pop	{r7, pc}

0800ac08 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800ac08:	b480      	push	{r7}
 800ac0a:	b083      	sub	sp, #12
 800ac0c:	af00      	add	r7, sp, #0
 800ac0e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800ac10:	bf00      	nop
 800ac12:	370c      	adds	r7, #12
 800ac14:	46bd      	mov	sp, r7
 800ac16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac1a:	4770      	bx	lr

0800ac1c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800ac1c:	b480      	push	{r7}
 800ac1e:	b083      	sub	sp, #12
 800ac20:	af00      	add	r7, sp, #0
 800ac22:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800ac24:	bf00      	nop
 800ac26:	370c      	adds	r7, #12
 800ac28:	46bd      	mov	sp, r7
 800ac2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac2e:	4770      	bx	lr

0800ac30 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800ac30:	b480      	push	{r7}
 800ac32:	b083      	sub	sp, #12
 800ac34:	af00      	add	r7, sp, #0
 800ac36:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800ac38:	bf00      	nop
 800ac3a:	370c      	adds	r7, #12
 800ac3c:	46bd      	mov	sp, r7
 800ac3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac42:	4770      	bx	lr

0800ac44 <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 800ac44:	b580      	push	{r7, lr}
 800ac46:	b084      	sub	sp, #16
 800ac48:	af00      	add	r7, sp, #0
 800ac4a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800ac52:	2b01      	cmp	r3, #1
 800ac54:	d101      	bne.n	800ac5a <HAL_UARTEx_EnableFifoMode+0x16>
 800ac56:	2302      	movs	r3, #2
 800ac58:	e02b      	b.n	800acb2 <HAL_UARTEx_EnableFifoMode+0x6e>
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	2201      	movs	r2, #1
 800ac5e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	2224      	movs	r2, #36	; 0x24
 800ac66:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	681b      	ldr	r3, [r3, #0]
 800ac6e:	681b      	ldr	r3, [r3, #0]
 800ac70:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	681b      	ldr	r3, [r3, #0]
 800ac76:	681a      	ldr	r2, [r3, #0]
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	f022 0201 	bic.w	r2, r2, #1
 800ac80:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 800ac82:	68fb      	ldr	r3, [r7, #12]
 800ac84:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800ac88:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800ac90:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	681b      	ldr	r3, [r3, #0]
 800ac96:	68fa      	ldr	r2, [r7, #12]
 800ac98:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ac9a:	6878      	ldr	r0, [r7, #4]
 800ac9c:	f000 f88a 	bl	800adb4 <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	2220      	movs	r2, #32
 800aca4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	2200      	movs	r2, #0
 800acac:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800acb0:	2300      	movs	r3, #0
}
 800acb2:	4618      	mov	r0, r3
 800acb4:	3710      	adds	r7, #16
 800acb6:	46bd      	mov	sp, r7
 800acb8:	bd80      	pop	{r7, pc}

0800acba <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800acba:	b580      	push	{r7, lr}
 800acbc:	b084      	sub	sp, #16
 800acbe:	af00      	add	r7, sp, #0
 800acc0:	6078      	str	r0, [r7, #4]
 800acc2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800acca:	2b01      	cmp	r3, #1
 800accc:	d101      	bne.n	800acd2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800acce:	2302      	movs	r3, #2
 800acd0:	e02d      	b.n	800ad2e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	2201      	movs	r2, #1
 800acd6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	2224      	movs	r2, #36	; 0x24
 800acde:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	681b      	ldr	r3, [r3, #0]
 800ace6:	681b      	ldr	r3, [r3, #0]
 800ace8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	681b      	ldr	r3, [r3, #0]
 800acee:	681a      	ldr	r2, [r3, #0]
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	681b      	ldr	r3, [r3, #0]
 800acf4:	f022 0201 	bic.w	r2, r2, #1
 800acf8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	681b      	ldr	r3, [r3, #0]
 800acfe:	689b      	ldr	r3, [r3, #8]
 800ad00:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	681b      	ldr	r3, [r3, #0]
 800ad08:	683a      	ldr	r2, [r7, #0]
 800ad0a:	430a      	orrs	r2, r1
 800ad0c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ad0e:	6878      	ldr	r0, [r7, #4]
 800ad10:	f000 f850 	bl	800adb4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	681b      	ldr	r3, [r3, #0]
 800ad18:	68fa      	ldr	r2, [r7, #12]
 800ad1a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	2220      	movs	r2, #32
 800ad20:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	2200      	movs	r2, #0
 800ad28:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800ad2c:	2300      	movs	r3, #0
}
 800ad2e:	4618      	mov	r0, r3
 800ad30:	3710      	adds	r7, #16
 800ad32:	46bd      	mov	sp, r7
 800ad34:	bd80      	pop	{r7, pc}

0800ad36 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ad36:	b580      	push	{r7, lr}
 800ad38:	b084      	sub	sp, #16
 800ad3a:	af00      	add	r7, sp, #0
 800ad3c:	6078      	str	r0, [r7, #4]
 800ad3e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800ad46:	2b01      	cmp	r3, #1
 800ad48:	d101      	bne.n	800ad4e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800ad4a:	2302      	movs	r3, #2
 800ad4c:	e02d      	b.n	800adaa <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	2201      	movs	r2, #1
 800ad52:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	2224      	movs	r2, #36	; 0x24
 800ad5a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	681b      	ldr	r3, [r3, #0]
 800ad62:	681b      	ldr	r3, [r3, #0]
 800ad64:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	681b      	ldr	r3, [r3, #0]
 800ad6a:	681a      	ldr	r2, [r3, #0]
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	681b      	ldr	r3, [r3, #0]
 800ad70:	f022 0201 	bic.w	r2, r2, #1
 800ad74:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	681b      	ldr	r3, [r3, #0]
 800ad7a:	689b      	ldr	r3, [r3, #8]
 800ad7c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	681b      	ldr	r3, [r3, #0]
 800ad84:	683a      	ldr	r2, [r7, #0]
 800ad86:	430a      	orrs	r2, r1
 800ad88:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ad8a:	6878      	ldr	r0, [r7, #4]
 800ad8c:	f000 f812 	bl	800adb4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	681b      	ldr	r3, [r3, #0]
 800ad94:	68fa      	ldr	r2, [r7, #12]
 800ad96:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	2220      	movs	r2, #32
 800ad9c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	2200      	movs	r2, #0
 800ada4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800ada8:	2300      	movs	r3, #0
}
 800adaa:	4618      	mov	r0, r3
 800adac:	3710      	adds	r7, #16
 800adae:	46bd      	mov	sp, r7
 800adb0:	bd80      	pop	{r7, pc}
	...

0800adb4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800adb4:	b480      	push	{r7}
 800adb6:	b089      	sub	sp, #36	; 0x24
 800adb8:	af00      	add	r7, sp, #0
 800adba:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 800adbc:	4a2f      	ldr	r2, [pc, #188]	; (800ae7c <UARTEx_SetNbDataToProcess+0xc8>)
 800adbe:	f107 0314 	add.w	r3, r7, #20
 800adc2:	e892 0003 	ldmia.w	r2, {r0, r1}
 800adc6:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 800adca:	4a2d      	ldr	r2, [pc, #180]	; (800ae80 <UARTEx_SetNbDataToProcess+0xcc>)
 800adcc:	f107 030c 	add.w	r3, r7, #12
 800add0:	e892 0003 	ldmia.w	r2, {r0, r1}
 800add4:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800addc:	2b00      	cmp	r3, #0
 800adde:	d108      	bne.n	800adf2 <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	2201      	movs	r2, #1
 800ade4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	2201      	movs	r2, #1
 800adec:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800adf0:	e03d      	b.n	800ae6e <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800adf2:	2308      	movs	r3, #8
 800adf4:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800adf6:	2308      	movs	r3, #8
 800adf8:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	681b      	ldr	r3, [r3, #0]
 800adfe:	689b      	ldr	r3, [r3, #8]
 800ae00:	0e5b      	lsrs	r3, r3, #25
 800ae02:	b2db      	uxtb	r3, r3
 800ae04:	f003 0307 	and.w	r3, r3, #7
 800ae08:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	681b      	ldr	r3, [r3, #0]
 800ae0e:	689b      	ldr	r3, [r3, #8]
 800ae10:	0f5b      	lsrs	r3, r3, #29
 800ae12:	b2db      	uxtb	r3, r3
 800ae14:	f003 0307 	and.w	r3, r3, #7
 800ae18:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 800ae1a:	7fbb      	ldrb	r3, [r7, #30]
 800ae1c:	7f3a      	ldrb	r2, [r7, #28]
 800ae1e:	f107 0120 	add.w	r1, r7, #32
 800ae22:	440a      	add	r2, r1
 800ae24:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800ae28:	fb02 f303 	mul.w	r3, r2, r3
 800ae2c:	7f3a      	ldrb	r2, [r7, #28]
 800ae2e:	f107 0120 	add.w	r1, r7, #32
 800ae32:	440a      	add	r2, r1
 800ae34:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800ae38:	fb93 f3f2 	sdiv	r3, r3, r2
 800ae3c:	b29a      	uxth	r2, r3
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 800ae44:	7ffb      	ldrb	r3, [r7, #31]
 800ae46:	7f7a      	ldrb	r2, [r7, #29]
 800ae48:	f107 0120 	add.w	r1, r7, #32
 800ae4c:	440a      	add	r2, r1
 800ae4e:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800ae52:	fb02 f303 	mul.w	r3, r2, r3
 800ae56:	7f7a      	ldrb	r2, [r7, #29]
 800ae58:	f107 0120 	add.w	r1, r7, #32
 800ae5c:	440a      	add	r2, r1
 800ae5e:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800ae62:	fb93 f3f2 	sdiv	r3, r3, r2
 800ae66:	b29a      	uxth	r2, r3
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800ae6e:	bf00      	nop
 800ae70:	3724      	adds	r7, #36	; 0x24
 800ae72:	46bd      	mov	sp, r7
 800ae74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae78:	4770      	bx	lr
 800ae7a:	bf00      	nop
 800ae7c:	08011520 	.word	0x08011520
 800ae80:	08011528 	.word	0x08011528

0800ae84 <_ZN11HAL_VL53L0X5beginEhbP19__I2C_HandleTypeDef>:
   via Serial.print during setup. Defaults to false.
    @param  i2c Optional I2C bus the sensor is located on. Default is Wire
    @returns True if device is set up, false on any failure
*/
/**************************************************************************/
bool HAL_VL53L0X::begin(uint8_t i2c_addr, bool debug, I2C_HandleTypeDef* hi2c) {
 800ae84:	b580      	push	{r7, lr}
 800ae86:	b088      	sub	sp, #32
 800ae88:	af00      	add	r7, sp, #0
 800ae8a:	60f8      	str	r0, [r7, #12]
 800ae8c:	607b      	str	r3, [r7, #4]
 800ae8e:	460b      	mov	r3, r1
 800ae90:	72fb      	strb	r3, [r7, #11]
 800ae92:	4613      	mov	r3, r2
 800ae94:	72bb      	strb	r3, [r7, #10]
  int32_t status_int;
  int32_t init_done = 0;
 800ae96:	2300      	movs	r3, #0
 800ae98:	61fb      	str	r3, [r7, #28]
  uint8_t isApertureSpads;
  uint8_t VhvSettings;
  uint8_t PhaseCal;

  // Initialize Comms
  pMyDevice->I2cDevAddr = VL53L0X_I2C_ADDR; // default
 800ae9a:	68fb      	ldr	r3, [r7, #12]
 800ae9c:	f8d3 3168 	ldr.w	r3, [r3, #360]	; 0x168
 800aea0:	2229      	movs	r2, #41	; 0x29
 800aea2:	f883 215c 	strb.w	r2, [r3, #348]	; 0x15c
  pMyDevice->comms_type = 1;
 800aea6:	68fb      	ldr	r3, [r7, #12]
 800aea8:	f8d3 3168 	ldr.w	r3, [r3, #360]	; 0x168
 800aeac:	2201      	movs	r2, #1
 800aeae:	f883 215d 	strb.w	r2, [r3, #349]	; 0x15d
  pMyDevice->comms_speed_khz = 400;
 800aeb2:	68fb      	ldr	r3, [r7, #12]
 800aeb4:	f8d3 3168 	ldr.w	r3, [r3, #360]	; 0x168
 800aeb8:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800aebc:	f8a3 215e 	strh.w	r2, [r3, #350]	; 0x15e
  pMyDevice->hi2c = hi2c;
 800aec0:	68fb      	ldr	r3, [r7, #12]
 800aec2:	f8d3 3168 	ldr.w	r3, [r3, #360]	; 0x168
 800aec6:	687a      	ldr	r2, [r7, #4]
 800aec8:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160
    Status = VL53L0X_ERROR_NOT_SUPPORTED;

    return false;
  }

  Status = VL53L0X_DataInit(&MyDevice); // Data initialization
 800aecc:	68fb      	ldr	r3, [r7, #12]
 800aece:	3304      	adds	r3, #4
 800aed0:	4618      	mov	r0, r3
 800aed2:	f000 f983 	bl	800b1dc <VL53L0X_DataInit>
 800aed6:	4603      	mov	r3, r0
 800aed8:	461a      	mov	r2, r3
 800aeda:	68fb      	ldr	r3, [r7, #12]
 800aedc:	701a      	strb	r2, [r3, #0]

  if (!setAddress(i2c_addr)) {
 800aede:	7afb      	ldrb	r3, [r7, #11]
 800aee0:	4619      	mov	r1, r3
 800aee2:	68f8      	ldr	r0, [r7, #12]
 800aee4:	f000 f8ab 	bl	800b03e <_ZN11HAL_VL53L0X10setAddressEh>
 800aee8:	4603      	mov	r3, r0
 800aeea:	f083 0301 	eor.w	r3, r3, #1
 800aeee:	b2db      	uxtb	r3, r3
 800aef0:	2b00      	cmp	r3, #0
 800aef2:	d001      	beq.n	800aef8 <_ZN11HAL_VL53L0X5beginEhbP19__I2C_HandleTypeDef+0x74>
    return false;
 800aef4:	2300      	movs	r3, #0
 800aef6:	e09e      	b.n	800b036 <_ZN11HAL_VL53L0X5beginEhbP19__I2C_HandleTypeDef+0x1b2>
  }

  Status = VL53L0X_GetDeviceInfo(&MyDevice, &DeviceInfo);
 800aef8:	68fb      	ldr	r3, [r7, #12]
 800aefa:	1d1a      	adds	r2, r3, #4
 800aefc:	68fb      	ldr	r3, [r7, #12]
 800aefe:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800af02:	4619      	mov	r1, r3
 800af04:	4610      	mov	r0, r2
 800af06:	f000 f915 	bl	800b134 <VL53L0X_GetDeviceInfo>
 800af0a:	4603      	mov	r3, r0
 800af0c:	461a      	mov	r2, r3
 800af0e:	68fb      	ldr	r3, [r7, #12]
 800af10:	701a      	strb	r2, [r3, #0]


  if (Status == VL53L0X_ERROR_NONE) {
 800af12:	68fb      	ldr	r3, [r7, #12]
 800af14:	f993 3000 	ldrsb.w	r3, [r3]
 800af18:	2b00      	cmp	r3, #0
 800af1a:	d109      	bne.n	800af30 <_ZN11HAL_VL53L0X5beginEhbP19__I2C_HandleTypeDef+0xac>

    Status = VL53L0X_StaticInit(pMyDevice); // Device Initialization
 800af1c:	68fb      	ldr	r3, [r7, #12]
 800af1e:	f8d3 3168 	ldr.w	r3, [r3, #360]	; 0x168
 800af22:	4618      	mov	r0, r3
 800af24:	f000 fad0 	bl	800b4c8 <VL53L0X_StaticInit>
 800af28:	4603      	mov	r3, r0
 800af2a:	461a      	mov	r2, r3
 800af2c:	68fb      	ldr	r3, [r7, #12]
 800af2e:	701a      	strb	r2, [r3, #0]
  }

  if (Status == VL53L0X_ERROR_NONE) {
 800af30:	68fb      	ldr	r3, [r7, #12]
 800af32:	f993 3000 	ldrsb.w	r3, [r3]
 800af36:	2b00      	cmp	r3, #0
 800af38:	d10d      	bne.n	800af56 <_ZN11HAL_VL53L0X5beginEhbP19__I2C_HandleTypeDef+0xd2>

    Status = VL53L0X_PerformRefSpadManagement(
 800af3a:	68fb      	ldr	r3, [r7, #12]
 800af3c:	f8d3 3168 	ldr.w	r3, [r3, #360]	; 0x168
 800af40:	f107 0217 	add.w	r2, r7, #23
 800af44:	f107 0118 	add.w	r1, r7, #24
 800af48:	4618      	mov	r0, r3
 800af4a:	f001 fe92 	bl	800cc72 <VL53L0X_PerformRefSpadManagement>
 800af4e:	4603      	mov	r3, r0
 800af50:	461a      	mov	r2, r3
 800af52:	68fb      	ldr	r3, [r7, #12]
 800af54:	701a      	strb	r2, [r3, #0]
        pMyDevice, &refSpadCount, &isApertureSpads); // Device Initialization

  }

  if (Status == VL53L0X_ERROR_NONE) {
 800af56:	68fb      	ldr	r3, [r7, #12]
 800af58:	f993 3000 	ldrsb.w	r3, [r3]
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	d10d      	bne.n	800af7c <_ZN11HAL_VL53L0X5beginEhbP19__I2C_HandleTypeDef+0xf8>

    Status = VL53L0X_PerformRefCalibration(pMyDevice, &VhvSettings,
 800af60:	68fb      	ldr	r3, [r7, #12]
 800af62:	f8d3 3168 	ldr.w	r3, [r3, #360]	; 0x168
 800af66:	f107 0215 	add.w	r2, r7, #21
 800af6a:	f107 0116 	add.w	r1, r7, #22
 800af6e:	4618      	mov	r0, r3
 800af70:	f001 fa02 	bl	800c378 <VL53L0X_PerformRefCalibration>
 800af74:	4603      	mov	r3, r0
 800af76:	461a      	mov	r2, r3
 800af78:	68fb      	ldr	r3, [r7, #12]
 800af7a:	701a      	strb	r2, [r3, #0]
                                           &PhaseCal); // Device Initialization
  }

  if (Status == VL53L0X_ERROR_NONE) {
 800af7c:	68fb      	ldr	r3, [r7, #12]
 800af7e:	f993 3000 	ldrsb.w	r3, [r3]
 800af82:	2b00      	cmp	r3, #0
 800af84:	d10a      	bne.n	800af9c <_ZN11HAL_VL53L0X5beginEhbP19__I2C_HandleTypeDef+0x118>
    // no need to do this when we use VL53L0X_PerformSingleRangingMeasurement

    Status = VL53L0X_SetDeviceMode(
 800af86:	68fb      	ldr	r3, [r7, #12]
 800af88:	f8d3 3168 	ldr.w	r3, [r3, #360]	; 0x168
 800af8c:	2100      	movs	r1, #0
 800af8e:	4618      	mov	r0, r3
 800af90:	f000 fcac 	bl	800b8ec <VL53L0X_SetDeviceMode>
 800af94:	4603      	mov	r3, r0
 800af96:	461a      	mov	r2, r3
 800af98:	68fb      	ldr	r3, [r7, #12]
 800af9a:	701a      	strb	r2, [r3, #0]
        pMyDevice,
        VL53L0X_DEVICEMODE_SINGLE_RANGING); // Setup in single ranging mode
  }

  // Enable/Disable Sigma and Signal check
  if (Status == VL53L0X_ERROR_NONE) {
 800af9c:	68fb      	ldr	r3, [r7, #12]
 800af9e:	f993 3000 	ldrsb.w	r3, [r3]
 800afa2:	2b00      	cmp	r3, #0
 800afa4:	d10b      	bne.n	800afbe <_ZN11HAL_VL53L0X5beginEhbP19__I2C_HandleTypeDef+0x13a>
    Status = VL53L0X_SetLimitCheckEnable(
 800afa6:	68fb      	ldr	r3, [r7, #12]
 800afa8:	f8d3 3168 	ldr.w	r3, [r3, #360]	; 0x168
 800afac:	2201      	movs	r2, #1
 800afae:	2100      	movs	r1, #0
 800afb0:	4618      	mov	r0, r3
 800afb2:	f000 ff65 	bl	800be80 <VL53L0X_SetLimitCheckEnable>
 800afb6:	4603      	mov	r3, r0
 800afb8:	461a      	mov	r2, r3
 800afba:	68fb      	ldr	r3, [r7, #12]
 800afbc:	701a      	strb	r2, [r3, #0]
        pMyDevice, VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, 1);
  }

  if (Status == VL53L0X_ERROR_NONE) {
 800afbe:	68fb      	ldr	r3, [r7, #12]
 800afc0:	f993 3000 	ldrsb.w	r3, [r3]
 800afc4:	2b00      	cmp	r3, #0
 800afc6:	d10b      	bne.n	800afe0 <_ZN11HAL_VL53L0X5beginEhbP19__I2C_HandleTypeDef+0x15c>
    Status = VL53L0X_SetLimitCheckEnable(
 800afc8:	68fb      	ldr	r3, [r7, #12]
 800afca:	f8d3 3168 	ldr.w	r3, [r3, #360]	; 0x168
 800afce:	2201      	movs	r2, #1
 800afd0:	2101      	movs	r1, #1
 800afd2:	4618      	mov	r0, r3
 800afd4:	f000 ff54 	bl	800be80 <VL53L0X_SetLimitCheckEnable>
 800afd8:	4603      	mov	r3, r0
 800afda:	461a      	mov	r2, r3
 800afdc:	68fb      	ldr	r3, [r7, #12]
 800afde:	701a      	strb	r2, [r3, #0]
        pMyDevice, VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, 1);
  }

  if (Status == VL53L0X_ERROR_NONE) {
 800afe0:	68fb      	ldr	r3, [r7, #12]
 800afe2:	f993 3000 	ldrsb.w	r3, [r3]
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	d10b      	bne.n	800b002 <_ZN11HAL_VL53L0X5beginEhbP19__I2C_HandleTypeDef+0x17e>
    Status = VL53L0X_SetLimitCheckEnable(
 800afea:	68fb      	ldr	r3, [r7, #12]
 800afec:	f8d3 3168 	ldr.w	r3, [r3, #360]	; 0x168
 800aff0:	2201      	movs	r2, #1
 800aff2:	2103      	movs	r1, #3
 800aff4:	4618      	mov	r0, r3
 800aff6:	f000 ff43 	bl	800be80 <VL53L0X_SetLimitCheckEnable>
 800affa:	4603      	mov	r3, r0
 800affc:	461a      	mov	r2, r3
 800affe:	68fb      	ldr	r3, [r7, #12]
 800b000:	701a      	strb	r2, [r3, #0]
        pMyDevice, VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, 1);
  }

  if (Status == VL53L0X_ERROR_NONE) {
 800b002:	68fb      	ldr	r3, [r7, #12]
 800b004:	f993 3000 	ldrsb.w	r3, [r3]
 800b008:	2b00      	cmp	r3, #0
 800b00a:	d10c      	bne.n	800b026 <_ZN11HAL_VL53L0X5beginEhbP19__I2C_HandleTypeDef+0x1a2>
    Status = VL53L0X_SetLimitCheckValue(
 800b00c:	68fb      	ldr	r3, [r7, #12]
 800b00e:	f8d3 3168 	ldr.w	r3, [r3, #360]	; 0x168
 800b012:	f640 02d4 	movw	r2, #2260	; 0x8d4
 800b016:	2103      	movs	r1, #3
 800b018:	4618      	mov	r0, r3
 800b01a:	f000 ffe1 	bl	800bfe0 <VL53L0X_SetLimitCheckValue>
 800b01e:	4603      	mov	r3, r0
 800b020:	461a      	mov	r2, r3
 800b022:	68fb      	ldr	r3, [r7, #12]
 800b024:	701a      	strb	r2, [r3, #0]
        pMyDevice, VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
        (FixPoint1616_t)(1.5 * 0.023 * 65536));
  }

  if (Status == VL53L0X_ERROR_NONE) {
 800b026:	68fb      	ldr	r3, [r7, #12]
 800b028:	f993 3000 	ldrsb.w	r3, [r3]
 800b02c:	2b00      	cmp	r3, #0
 800b02e:	d101      	bne.n	800b034 <_ZN11HAL_VL53L0X5beginEhbP19__I2C_HandleTypeDef+0x1b0>
    return true;
 800b030:	2301      	movs	r3, #1
 800b032:	e000      	b.n	800b036 <_ZN11HAL_VL53L0X5beginEhbP19__I2C_HandleTypeDef+0x1b2>
  } else {

    return false;
 800b034:	2300      	movs	r3, #0
  }
}
 800b036:	4618      	mov	r0, r3
 800b038:	3720      	adds	r7, #32
 800b03a:	46bd      	mov	sp, r7
 800b03c:	bd80      	pop	{r7, pc}

0800b03e <_ZN11HAL_VL53L0X10setAddressEh>:
    @brief  Change the I2C address of the sensor
    @param  newAddr the new address to set the sensor to
    @returns True if address was set successfully, False otherwise
*/
/**************************************************************************/
bool HAL_VL53L0X::setAddress(uint8_t newAddr) {
 800b03e:	b580      	push	{r7, lr}
 800b040:	b082      	sub	sp, #8
 800b042:	af00      	add	r7, sp, #0
 800b044:	6078      	str	r0, [r7, #4]
 800b046:	460b      	mov	r3, r1
 800b048:	70fb      	strb	r3, [r7, #3]
  newAddr &= 0x7F;
 800b04a:	78fb      	ldrb	r3, [r7, #3]
 800b04c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b050:	70fb      	strb	r3, [r7, #3]

  Status = VL53L0X_SetDeviceAddress(pMyDevice, newAddr * 2); // 7->8 bit
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	f8d3 2168 	ldr.w	r2, [r3, #360]	; 0x168
 800b058:	78fb      	ldrb	r3, [r7, #3]
 800b05a:	005b      	lsls	r3, r3, #1
 800b05c:	b2db      	uxtb	r3, r3
 800b05e:	4619      	mov	r1, r3
 800b060:	4610      	mov	r0, r2
 800b062:	f000 f8a2 	bl	800b1aa <VL53L0X_SetDeviceAddress>
 800b066:	4603      	mov	r3, r0
 800b068:	461a      	mov	r2, r3
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	701a      	strb	r2, [r3, #0]

  HAL_Delay(10);
 800b06e:	200a      	movs	r0, #10
 800b070:	f7f7 fd56 	bl	8002b20 <HAL_Delay>

  if (Status == VL53L0X_ERROR_NONE) {
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	f993 3000 	ldrsb.w	r3, [r3]
 800b07a:	2b00      	cmp	r3, #0
 800b07c:	d107      	bne.n	800b08e <_ZN11HAL_VL53L0X10setAddressEh+0x50>
    pMyDevice->I2cDevAddr = newAddr; // 7 bit addr
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	f8d3 3168 	ldr.w	r3, [r3, #360]	; 0x168
 800b084:	78fa      	ldrb	r2, [r7, #3]
 800b086:	f883 215c 	strb.w	r2, [r3, #348]	; 0x15c
    return true;
 800b08a:	2301      	movs	r3, #1
 800b08c:	e000      	b.n	800b090 <_ZN11HAL_VL53L0X10setAddressEh+0x52>
  }
  return false;
 800b08e:	2300      	movs	r3, #0
}
 800b090:	4618      	mov	r0, r3
 800b092:	3708      	adds	r7, #8
 800b094:	46bd      	mov	sp, r7
 800b096:	bd80      	pop	{r7, pc}

0800b098 <_ZN11HAL_VL53L0X27getSingleRangingMeasurementEP32VL53L0X_RangingMeasurementData_tb>:
   Serial.print during execution. Defaults to false.
    @returns True if address was set successfully, False otherwise
*/
/**************************************************************************/
VL53L0X_Error HAL_VL53L0X::getSingleRangingMeasurement(
    VL53L0X_RangingMeasurementData_t *RangingMeasurementData, bool debug) {
 800b098:	b580      	push	{r7, lr}
 800b09a:	b086      	sub	sp, #24
 800b09c:	af00      	add	r7, sp, #0
 800b09e:	60f8      	str	r0, [r7, #12]
 800b0a0:	60b9      	str	r1, [r7, #8]
 800b0a2:	4613      	mov	r3, r2
 800b0a4:	71fb      	strb	r3, [r7, #7]
  VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b0a6:	2300      	movs	r3, #0
 800b0a8:	75fb      	strb	r3, [r7, #23]

  /*
   *  Step  4 : Test ranging mode
   */

  if (Status == VL53L0X_ERROR_NONE) {
 800b0aa:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	d11b      	bne.n	800b0ea <_ZN11HAL_VL53L0X27getSingleRangingMeasurementEP32VL53L0X_RangingMeasurementData_tb+0x52>
    Status = VL53L0X_PerformSingleRangingMeasurement(pMyDevice,
 800b0b2:	68fb      	ldr	r3, [r7, #12]
 800b0b4:	f8d3 3168 	ldr.w	r3, [r3, #360]	; 0x168
 800b0b8:	68b9      	ldr	r1, [r7, #8]
 800b0ba:	4618      	mov	r0, r3
 800b0bc:	f001 fbee 	bl	800c89c <VL53L0X_PerformSingleRangingMeasurement>
 800b0c0:	4603      	mov	r3, r0
 800b0c2:	75fb      	strb	r3, [r7, #23]
                                                     RangingMeasurementData);

    if (debug) {
 800b0c4:	79fb      	ldrb	r3, [r7, #7]
 800b0c6:	2b00      	cmp	r3, #0
 800b0c8:	d003      	beq.n	800b0d2 <_ZN11HAL_VL53L0X27getSingleRangingMeasurementEP32VL53L0X_RangingMeasurementData_tb+0x3a>
      printRangeStatus(RangingMeasurementData);
 800b0ca:	68b9      	ldr	r1, [r7, #8]
 800b0cc:	68f8      	ldr	r0, [r7, #12]
 800b0ce:	f000 f813 	bl	800b0f8 <_ZN11HAL_VL53L0X16printRangeStatusEP32VL53L0X_RangingMeasurementData_t>
    }

    if (debug) {
 800b0d2:	79fb      	ldrb	r3, [r7, #7]
 800b0d4:	2b00      	cmp	r3, #0
 800b0d6:	d008      	beq.n	800b0ea <_ZN11HAL_VL53L0X27getSingleRangingMeasurementEP32VL53L0X_RangingMeasurementData_tb+0x52>
      VL53L0X_GetLimitCheckCurrent(pMyDevice,
 800b0d8:	68fb      	ldr	r3, [r7, #12]
 800b0da:	f8d3 3168 	ldr.w	r3, [r3, #360]	; 0x168
 800b0de:	f107 0210 	add.w	r2, r7, #16
 800b0e2:	2103      	movs	r1, #3
 800b0e4:	4618      	mov	r0, r3
 800b0e6:	f001 f86b 	bl	800c1c0 <VL53L0X_GetLimitCheckCurrent>
                                   &LimitCheckCurrent);

    }
  }

  return Status;
 800b0ea:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b0ee:	4618      	mov	r0, r3
 800b0f0:	3718      	adds	r7, #24
 800b0f2:	46bd      	mov	sp, r7
 800b0f4:	bd80      	pop	{r7, pc}
	...

0800b0f8 <_ZN11HAL_VL53L0X16printRangeStatusEP32VL53L0X_RangingMeasurementData_t>:
   format
    @param pRangingMeasurementData a pointer to the ranging measurement data
*/
/**************************************************************************/
void HAL_VL53L0X::printRangeStatus(
    VL53L0X_RangingMeasurementData_t *pRangingMeasurementData) {
 800b0f8:	b580      	push	{r7, lr}
 800b0fa:	b08c      	sub	sp, #48	; 0x30
 800b0fc:	af00      	add	r7, sp, #0
 800b0fe:	6078      	str	r0, [r7, #4]
 800b100:	6039      	str	r1, [r7, #0]
  /*
   * New Range Status: data is valid when pRangingMeasurementData->RangeStatus =
   * 0
   */

  RangeStatus = pRangingMeasurementData->RangeStatus;
 800b102:	683b      	ldr	r3, [r7, #0]
 800b104:	7e1b      	ldrb	r3, [r3, #24]
 800b106:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  VL53L0X_GetRangeStatusString(RangeStatus, buf);
 800b10a:	f107 020c 	add.w	r2, r7, #12
 800b10e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b112:	4611      	mov	r1, r2
 800b114:	4618      	mov	r0, r3
 800b116:	f000 f820 	bl	800b15a <VL53L0X_GetRangeStatusString>

  printf("Range Status: %d\n", RangeStatus);
 800b11a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b11e:	4619      	mov	r1, r3
 800b120:	4803      	ldr	r0, [pc, #12]	; (800b130 <_ZN11HAL_VL53L0X16printRangeStatusEP32VL53L0X_RangingMeasurementData_t+0x38>)
 800b122:	f005 f843 	bl	80101ac <iprintf>
}
 800b126:	bf00      	nop
 800b128:	3730      	adds	r7, #48	; 0x30
 800b12a:	46bd      	mov	sp, r7
 800b12c:	bd80      	pop	{r7, pc}
 800b12e:	bf00      	nop
 800b130:	08011530 	.word	0x08011530

0800b134 <VL53L0X_GetDeviceInfo>:
  LOG_FUNCTION_END(Status);
  return Status;
}

VL53L0X_Error VL53L0X_GetDeviceInfo(VL53L0X_DEV Dev,
                                    VL53L0X_DeviceInfo_t *pVL53L0X_DeviceInfo) {
 800b134:	b580      	push	{r7, lr}
 800b136:	b084      	sub	sp, #16
 800b138:	af00      	add	r7, sp, #0
 800b13a:	6078      	str	r0, [r7, #4]
 800b13c:	6039      	str	r1, [r7, #0]
  VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b13e:	2300      	movs	r3, #0
 800b140:	73fb      	strb	r3, [r7, #15]
  LOG_FUNCTION_START("");

  Status = VL53L0X_get_device_info(Dev, pVL53L0X_DeviceInfo);
 800b142:	6839      	ldr	r1, [r7, #0]
 800b144:	6878      	ldr	r0, [r7, #4]
 800b146:	f004 fc9b 	bl	800fa80 <VL53L0X_get_device_info>
 800b14a:	4603      	mov	r3, r0
 800b14c:	73fb      	strb	r3, [r7, #15]

  LOG_FUNCTION_END(Status);
  return Status;
 800b14e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b152:	4618      	mov	r0, r3
 800b154:	3710      	adds	r7, #16
 800b156:	46bd      	mov	sp, r7
 800b158:	bd80      	pop	{r7, pc}

0800b15a <VL53L0X_GetRangeStatusString>:
  LOG_FUNCTION_END(Status);
  return Status;
}

VL53L0X_Error VL53L0X_GetRangeStatusString(uint8_t RangeStatus,
                                           char *pRangeStatusString) {
 800b15a:	b580      	push	{r7, lr}
 800b15c:	b084      	sub	sp, #16
 800b15e:	af00      	add	r7, sp, #0
 800b160:	4603      	mov	r3, r0
 800b162:	6039      	str	r1, [r7, #0]
 800b164:	71fb      	strb	r3, [r7, #7]
  VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b166:	2300      	movs	r3, #0
 800b168:	73fb      	strb	r3, [r7, #15]
  LOG_FUNCTION_START("");

  Status = VL53L0X_get_range_status_string(RangeStatus, pRangeStatusString);
 800b16a:	79fb      	ldrb	r3, [r7, #7]
 800b16c:	6839      	ldr	r1, [r7, #0]
 800b16e:	4618      	mov	r0, r3
 800b170:	f004 fd0a 	bl	800fb88 <VL53L0X_get_range_status_string>
 800b174:	4603      	mov	r3, r0
 800b176:	73fb      	strb	r3, [r7, #15]

  LOG_FUNCTION_END(Status);
  return Status;
 800b178:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b17c:	4618      	mov	r0, r3
 800b17e:	3710      	adds	r7, #16
 800b180:	46bd      	mov	sp, r7
 800b182:	bd80      	pop	{r7, pc}

0800b184 <VL53L0X_GetOffsetCalibrationDataMicroMeter>:
  LOG_FUNCTION_END(Status);
  return Status;
}

VL53L0X_Error VL53L0X_GetOffsetCalibrationDataMicroMeter(
    VL53L0X_DEV Dev, int32_t *pOffsetCalibrationDataMicroMeter) {
 800b184:	b580      	push	{r7, lr}
 800b186:	b084      	sub	sp, #16
 800b188:	af00      	add	r7, sp, #0
 800b18a:	6078      	str	r0, [r7, #4]
 800b18c:	6039      	str	r1, [r7, #0]
  VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b18e:	2300      	movs	r3, #0
 800b190:	73fb      	strb	r3, [r7, #15]
  LOG_FUNCTION_START("");

  Status = VL53L0X_get_offset_calibration_data_micro_meter(
 800b192:	6839      	ldr	r1, [r7, #0]
 800b194:	6878      	ldr	r0, [r7, #4]
 800b196:	f001 fd81 	bl	800cc9c <VL53L0X_get_offset_calibration_data_micro_meter>
 800b19a:	4603      	mov	r3, r0
 800b19c:	73fb      	strb	r3, [r7, #15]
      Dev, pOffsetCalibrationDataMicroMeter);

  LOG_FUNCTION_END(Status);
  return Status;
 800b19e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b1a2:	4618      	mov	r0, r3
 800b1a4:	3710      	adds	r7, #16
 800b1a6:	46bd      	mov	sp, r7
 800b1a8:	bd80      	pop	{r7, pc}

0800b1aa <VL53L0X_SetDeviceAddress>:
}

/* End Group PAL General Functions */

/* Group PAL Init Functions */
VL53L0X_Error VL53L0X_SetDeviceAddress(VL53L0X_DEV Dev, uint8_t DeviceAddress) {
 800b1aa:	b580      	push	{r7, lr}
 800b1ac:	b084      	sub	sp, #16
 800b1ae:	af00      	add	r7, sp, #0
 800b1b0:	6078      	str	r0, [r7, #4]
 800b1b2:	460b      	mov	r3, r1
 800b1b4:	70fb      	strb	r3, [r7, #3]
  VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b1b6:	2300      	movs	r3, #0
 800b1b8:	73fb      	strb	r3, [r7, #15]
  LOG_FUNCTION_START("");

  Status = VL53L0X_WrByte(Dev, VL53L0X_REG_I2C_SLAVE_DEVICE_ADDRESS,
 800b1ba:	78fb      	ldrb	r3, [r7, #3]
 800b1bc:	085b      	lsrs	r3, r3, #1
 800b1be:	b2db      	uxtb	r3, r3
 800b1c0:	461a      	mov	r2, r3
 800b1c2:	218a      	movs	r1, #138	; 0x8a
 800b1c4:	6878      	ldr	r0, [r7, #4]
 800b1c6:	f004 feac 	bl	800ff22 <VL53L0X_WrByte>
 800b1ca:	4603      	mov	r3, r0
 800b1cc:	73fb      	strb	r3, [r7, #15]
                          DeviceAddress / 2);

  LOG_FUNCTION_END(Status);
  return Status;
 800b1ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b1d2:	4618      	mov	r0, r3
 800b1d4:	3710      	adds	r7, #16
 800b1d6:	46bd      	mov	sp, r7
 800b1d8:	bd80      	pop	{r7, pc}
	...

0800b1dc <VL53L0X_DataInit>:

VL53L0X_Error VL53L0X_DataInit(VL53L0X_DEV Dev) {
 800b1dc:	b5b0      	push	{r4, r5, r7, lr}
 800b1de:	b096      	sub	sp, #88	; 0x58
 800b1e0:	af00      	add	r7, sp, #0
 800b1e2:	6078      	str	r0, [r7, #4]
  VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b1e4:	2300      	movs	r3, #0
 800b1e6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
  LOG_FUNCTION_START("");

  /* by default the I2C is running at 1V8 if you want to change it you
   * need to include this define at compilation level. */
#ifdef USE_I2C_2V8
  Status = VL53L0X_UpdateByte(
 800b1ea:	2301      	movs	r3, #1
 800b1ec:	22fe      	movs	r2, #254	; 0xfe
 800b1ee:	2189      	movs	r1, #137	; 0x89
 800b1f0:	6878      	ldr	r0, [r7, #4]
 800b1f2:	f004 feda 	bl	800ffaa <VL53L0X_UpdateByte>
 800b1f6:	4603      	mov	r3, r0
 800b1f8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      Dev, VL53L0X_REG_VHV_CONFIG_PAD_SCL_SDA__EXTSUP_HV, 0xFE, 0x01);
#endif

  /* Set I2C standard mode */
  if (Status == VL53L0X_ERROR_NONE)
 800b1fc:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800b200:	2b00      	cmp	r3, #0
 800b202:	d107      	bne.n	800b214 <VL53L0X_DataInit+0x38>
    Status = VL53L0X_WrByte(Dev, 0x88, 0x00);
 800b204:	2200      	movs	r2, #0
 800b206:	2188      	movs	r1, #136	; 0x88
 800b208:	6878      	ldr	r0, [r7, #4]
 800b20a:	f004 fe8a 	bl	800ff22 <VL53L0X_WrByte>
 800b20e:	4603      	mov	r3, r0
 800b210:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

  /* read WHO_AM_I */
  uint8_t b;
  Status = VL53L0X_RdByte(Dev, 0xC0, &b);
 800b214:	f107 030e 	add.w	r3, r7, #14
 800b218:	461a      	mov	r2, r3
 800b21a:	21c0      	movs	r1, #192	; 0xc0
 800b21c:	6878      	ldr	r0, [r7, #4]
 800b21e:	f004 ff06 	bl	801002e <VL53L0X_RdByte>
 800b222:	4603      	mov	r3, r0
 800b224:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
  // Serial.print("WHOAMI: 0x"); Serial.println(b, HEX);

  /* read WHO_AM_I */

  VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone, 0);
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	2200      	movs	r2, #0
 800b22c:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
  if (Status == VL53L0X_ERROR_NONE)
    Status = VL53L0X_apply_offset_adjustment(Dev);
#endif

  /* Default value is 1000 for Linearity Corrective Gain */
  PALDevDataSet(Dev, LinearityCorrectiveGain, 1000);
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800b236:	f8a3 2152 	strh.w	r2, [r3, #338]	; 0x152

  /* Dmax default Parameter */
  PALDevDataSet(Dev, DmaxCalRangeMilliMeter, 400);
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800b240:	f8a3 2154 	strh.w	r2, [r3, #340]	; 0x154
  PALDevDataSet(Dev, DmaxCalSignalRateRtnMegaCps,
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	4a9e      	ldr	r2, [pc, #632]	; (800b4c0 <VL53L0X_DataInit+0x2e4>)
 800b248:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
                (FixPoint1616_t)((0x00016B85))); /* 1.42 No Cover Glass*/

  /* Set Default static parameters
   *set first temporary values 9.44MHz * 65536 = 618660 */
  VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz, 618660);
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	4a9d      	ldr	r2, [pc, #628]	; (800b4c4 <VL53L0X_DataInit+0x2e8>)
 800b250:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4

  /* Set Default XTalkCompensationRateMegaCps to 0  */
  VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps, 0);
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	2200      	movs	r2, #0
 800b258:	621a      	str	r2, [r3, #32]

  /* Get default parameters */
  Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 800b25a:	f107 0310 	add.w	r3, r7, #16
 800b25e:	4619      	mov	r1, r3
 800b260:	6878      	ldr	r0, [r7, #4]
 800b262:	f000 fab3 	bl	800b7cc <VL53L0X_GetDeviceParameters>
 800b266:	4603      	mov	r3, r0
 800b268:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

  if (Status == VL53L0X_ERROR_NONE) {
 800b26c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800b270:	2b00      	cmp	r3, #0
 800b272:	d112      	bne.n	800b29a <VL53L0X_DataInit+0xbe>
    /* initialize PAL values */
    CurrentParameters.DeviceMode = VL53L0X_DEVICEMODE_SINGLE_RANGING;
 800b274:	2300      	movs	r3, #0
 800b276:	743b      	strb	r3, [r7, #16]
    CurrentParameters.HistogramMode = VL53L0X_HISTOGRAMMODE_DISABLED;
 800b278:	2300      	movs	r3, #0
 800b27a:	747b      	strb	r3, [r7, #17]
    PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	f103 0410 	add.w	r4, r3, #16
 800b282:	f107 0510 	add.w	r5, r7, #16
 800b286:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b288:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b28a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b28c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b28e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b290:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b292:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800b296:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  }

  /* Sigma estimator variable */
  PALDevDataSet(Dev, SigmaEstRefArray, 100);
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	2264      	movs	r2, #100	; 0x64
 800b29e:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
  PALDevDataSet(Dev, SigmaEstEffPulseWidth, 900);
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	f44f 7261 	mov.w	r2, #900	; 0x384
 800b2a8:	f8a3 2136 	strh.w	r2, [r3, #310]	; 0x136
  PALDevDataSet(Dev, SigmaEstEffAmbWidth, 500);
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800b2b2:	f8a3 2138 	strh.w	r2, [r3, #312]	; 0x138
  PALDevDataSet(Dev, targetRefRate, 0x0A00); /* 20 MCPS in 9:7 format */
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 800b2bc:	f8a3 213c 	strh.w	r2, [r3, #316]	; 0x13c

  /* Use internal default settings */
  PALDevDataSet(Dev, UseInternalTuningSettings, 1);
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	2201      	movs	r2, #1
 800b2c4:	f883 2150 	strb.w	r2, [r3, #336]	; 0x150

  Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 800b2c8:	2201      	movs	r2, #1
 800b2ca:	2180      	movs	r1, #128	; 0x80
 800b2cc:	6878      	ldr	r0, [r7, #4]
 800b2ce:	f004 fe28 	bl	800ff22 <VL53L0X_WrByte>
 800b2d2:	4603      	mov	r3, r0
 800b2d4:	461a      	mov	r2, r3
 800b2d6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b2da:	4313      	orrs	r3, r2
 800b2dc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
  Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800b2e0:	2201      	movs	r2, #1
 800b2e2:	21ff      	movs	r1, #255	; 0xff
 800b2e4:	6878      	ldr	r0, [r7, #4]
 800b2e6:	f004 fe1c 	bl	800ff22 <VL53L0X_WrByte>
 800b2ea:	4603      	mov	r3, r0
 800b2ec:	461a      	mov	r2, r3
 800b2ee:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b2f2:	4313      	orrs	r3, r2
 800b2f4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
  Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800b2f8:	2200      	movs	r2, #0
 800b2fa:	2100      	movs	r1, #0
 800b2fc:	6878      	ldr	r0, [r7, #4]
 800b2fe:	f004 fe10 	bl	800ff22 <VL53L0X_WrByte>
 800b302:	4603      	mov	r3, r0
 800b304:	461a      	mov	r2, r3
 800b306:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b30a:	4313      	orrs	r3, r2
 800b30c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
  Status |= VL53L0X_RdByte(Dev, 0x91, &StopVariable);
 800b310:	f107 030f 	add.w	r3, r7, #15
 800b314:	461a      	mov	r2, r3
 800b316:	2191      	movs	r1, #145	; 0x91
 800b318:	6878      	ldr	r0, [r7, #4]
 800b31a:	f004 fe88 	bl	801002e <VL53L0X_RdByte>
 800b31e:	4603      	mov	r3, r0
 800b320:	461a      	mov	r2, r3
 800b322:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b326:	4313      	orrs	r3, r2
 800b328:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
  PALDevDataSet(Dev, StopVariable, StopVariable);
 800b32c:	7bfa      	ldrb	r2, [r7, #15]
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	f883 213a 	strb.w	r2, [r3, #314]	; 0x13a
  Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 800b334:	2201      	movs	r2, #1
 800b336:	2100      	movs	r1, #0
 800b338:	6878      	ldr	r0, [r7, #4]
 800b33a:	f004 fdf2 	bl	800ff22 <VL53L0X_WrByte>
 800b33e:	4603      	mov	r3, r0
 800b340:	461a      	mov	r2, r3
 800b342:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b346:	4313      	orrs	r3, r2
 800b348:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
  Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800b34c:	2200      	movs	r2, #0
 800b34e:	21ff      	movs	r1, #255	; 0xff
 800b350:	6878      	ldr	r0, [r7, #4]
 800b352:	f004 fde6 	bl	800ff22 <VL53L0X_WrByte>
 800b356:	4603      	mov	r3, r0
 800b358:	461a      	mov	r2, r3
 800b35a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b35e:	4313      	orrs	r3, r2
 800b360:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
  Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 800b364:	2200      	movs	r2, #0
 800b366:	2180      	movs	r1, #128	; 0x80
 800b368:	6878      	ldr	r0, [r7, #4]
 800b36a:	f004 fdda 	bl	800ff22 <VL53L0X_WrByte>
 800b36e:	4603      	mov	r3, r0
 800b370:	461a      	mov	r2, r3
 800b372:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b376:	4313      	orrs	r3, r2
 800b378:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

  /* Enable all check */
  for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 800b37c:	2300      	movs	r3, #0
 800b37e:	653b      	str	r3, [r7, #80]	; 0x50
 800b380:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b382:	2b05      	cmp	r3, #5
 800b384:	dc16      	bgt.n	800b3b4 <VL53L0X_DataInit+0x1d8>
    if (Status == VL53L0X_ERROR_NONE)
 800b386:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800b38a:	2b00      	cmp	r3, #0
 800b38c:	d111      	bne.n	800b3b2 <VL53L0X_DataInit+0x1d6>
      Status |= VL53L0X_SetLimitCheckEnable(Dev, i, 1);
 800b38e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b390:	b29b      	uxth	r3, r3
 800b392:	2201      	movs	r2, #1
 800b394:	4619      	mov	r1, r3
 800b396:	6878      	ldr	r0, [r7, #4]
 800b398:	f000 fd72 	bl	800be80 <VL53L0X_SetLimitCheckEnable>
 800b39c:	4603      	mov	r3, r0
 800b39e:	461a      	mov	r2, r3
 800b3a0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b3a4:	4313      	orrs	r3, r2
 800b3a6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
  for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 800b3aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b3ac:	3301      	adds	r3, #1
 800b3ae:	653b      	str	r3, [r7, #80]	; 0x50
 800b3b0:	e7e6      	b.n	800b380 <VL53L0X_DataInit+0x1a4>
    else
      break;
 800b3b2:	bf00      	nop
  }

  /* Disable the following checks */
  if (Status == VL53L0X_ERROR_NONE)
 800b3b4:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800b3b8:	2b00      	cmp	r3, #0
 800b3ba:	d107      	bne.n	800b3cc <VL53L0X_DataInit+0x1f0>
    Status = VL53L0X_SetLimitCheckEnable(
 800b3bc:	2200      	movs	r2, #0
 800b3be:	2102      	movs	r1, #2
 800b3c0:	6878      	ldr	r0, [r7, #4]
 800b3c2:	f000 fd5d 	bl	800be80 <VL53L0X_SetLimitCheckEnable>
 800b3c6:	4603      	mov	r3, r0
 800b3c8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        Dev, VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, 0);

  if (Status == VL53L0X_ERROR_NONE)
 800b3cc:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800b3d0:	2b00      	cmp	r3, #0
 800b3d2:	d107      	bne.n	800b3e4 <VL53L0X_DataInit+0x208>
    Status = VL53L0X_SetLimitCheckEnable(
 800b3d4:	2200      	movs	r2, #0
 800b3d6:	2103      	movs	r1, #3
 800b3d8:	6878      	ldr	r0, [r7, #4]
 800b3da:	f000 fd51 	bl	800be80 <VL53L0X_SetLimitCheckEnable>
 800b3de:	4603      	mov	r3, r0
 800b3e0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        Dev, VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, 0);

  if (Status == VL53L0X_ERROR_NONE)
 800b3e4:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800b3e8:	2b00      	cmp	r3, #0
 800b3ea:	d107      	bne.n	800b3fc <VL53L0X_DataInit+0x220>
    Status = VL53L0X_SetLimitCheckEnable(
 800b3ec:	2200      	movs	r2, #0
 800b3ee:	2104      	movs	r1, #4
 800b3f0:	6878      	ldr	r0, [r7, #4]
 800b3f2:	f000 fd45 	bl	800be80 <VL53L0X_SetLimitCheckEnable>
 800b3f6:	4603      	mov	r3, r0
 800b3f8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        Dev, VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC, 0);

  if (Status == VL53L0X_ERROR_NONE)
 800b3fc:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800b400:	2b00      	cmp	r3, #0
 800b402:	d107      	bne.n	800b414 <VL53L0X_DataInit+0x238>
    Status = VL53L0X_SetLimitCheckEnable(
 800b404:	2200      	movs	r2, #0
 800b406:	2105      	movs	r1, #5
 800b408:	6878      	ldr	r0, [r7, #4]
 800b40a:	f000 fd39 	bl	800be80 <VL53L0X_SetLimitCheckEnable>
 800b40e:	4603      	mov	r3, r0
 800b410:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        Dev, VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE, 0);

  /* Limit default values */
  if (Status == VL53L0X_ERROR_NONE) {
 800b414:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800b418:	2b00      	cmp	r3, #0
 800b41a:	d108      	bne.n	800b42e <VL53L0X_DataInit+0x252>
    Status =
 800b41c:	f44f 1290 	mov.w	r2, #1179648	; 0x120000
 800b420:	2100      	movs	r1, #0
 800b422:	6878      	ldr	r0, [r7, #4]
 800b424:	f000 fddc 	bl	800bfe0 <VL53L0X_SetLimitCheckValue>
 800b428:	4603      	mov	r3, r0
 800b42a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        VL53L0X_SetLimitCheckValue(Dev, VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
                                   (FixPoint1616_t)(18 * 65536));
  }
  if (Status == VL53L0X_ERROR_NONE) {
 800b42e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800b432:	2b00      	cmp	r3, #0
 800b434:	d108      	bne.n	800b448 <VL53L0X_DataInit+0x26c>
    Status = VL53L0X_SetLimitCheckValue(
 800b436:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800b43a:	2101      	movs	r1, #1
 800b43c:	6878      	ldr	r0, [r7, #4]
 800b43e:	f000 fdcf 	bl	800bfe0 <VL53L0X_SetLimitCheckValue>
 800b442:	4603      	mov	r3, r0
 800b444:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        Dev, VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
        (FixPoint1616_t)(25 * 65536 / 100));
    /* 0.25 * 65536 */
  }

  if (Status == VL53L0X_ERROR_NONE) {
 800b448:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800b44c:	2b00      	cmp	r3, #0
 800b44e:	d108      	bne.n	800b462 <VL53L0X_DataInit+0x286>
    Status = VL53L0X_SetLimitCheckValue(
 800b450:	f44f 120c 	mov.w	r2, #2293760	; 0x230000
 800b454:	2102      	movs	r1, #2
 800b456:	6878      	ldr	r0, [r7, #4]
 800b458:	f000 fdc2 	bl	800bfe0 <VL53L0X_SetLimitCheckValue>
 800b45c:	4603      	mov	r3, r0
 800b45e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        Dev, VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, (FixPoint1616_t)(35 * 65536));
  }

  if (Status == VL53L0X_ERROR_NONE) {
 800b462:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800b466:	2b00      	cmp	r3, #0
 800b468:	d107      	bne.n	800b47a <VL53L0X_DataInit+0x29e>
    Status = VL53L0X_SetLimitCheckValue(
 800b46a:	2200      	movs	r2, #0
 800b46c:	2103      	movs	r1, #3
 800b46e:	6878      	ldr	r0, [r7, #4]
 800b470:	f000 fdb6 	bl	800bfe0 <VL53L0X_SetLimitCheckValue>
 800b474:	4603      	mov	r3, r0
 800b476:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        Dev, VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
        (FixPoint1616_t)(0 * 65536));
  }

  if (Status == VL53L0X_ERROR_NONE) {
 800b47a:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800b47e:	2b00      	cmp	r3, #0
 800b480:	d10f      	bne.n	800b4a2 <VL53L0X_DataInit+0x2c6>

    PALDevDataSet(Dev, SequenceConfig, 0xFF);
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	22ff      	movs	r2, #255	; 0xff
 800b486:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
    Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0xFF);
 800b48a:	22ff      	movs	r2, #255	; 0xff
 800b48c:	2101      	movs	r1, #1
 800b48e:	6878      	ldr	r0, [r7, #4]
 800b490:	f004 fd47 	bl	800ff22 <VL53L0X_WrByte>
 800b494:	4603      	mov	r3, r0
 800b496:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

    /* Set PAL state to tell that we are waiting for call to
     * VL53L0X_StaticInit */
    PALDevDataSet(Dev, PalState, VL53L0X_STATE_WAIT_STATICINIT);
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	2201      	movs	r2, #1
 800b49e:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
  }

  if (Status == VL53L0X_ERROR_NONE)
 800b4a2:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800b4a6:	2b00      	cmp	r3, #0
 800b4a8:	d103      	bne.n	800b4b2 <VL53L0X_DataInit+0x2d6>
    VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 0);
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	2200      	movs	r2, #0
 800b4ae:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115

  LOG_FUNCTION_END(Status);
  return Status;
 800b4b2:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 800b4b6:	4618      	mov	r0, r3
 800b4b8:	3758      	adds	r7, #88	; 0x58
 800b4ba:	46bd      	mov	sp, r7
 800b4bc:	bdb0      	pop	{r4, r5, r7, pc}
 800b4be:	bf00      	nop
 800b4c0:	00016b85 	.word	0x00016b85
 800b4c4:	000970a4 	.word	0x000970a4

0800b4c8 <VL53L0X_StaticInit>:

  LOG_FUNCTION_END(Status);
  return Status;
}

VL53L0X_Error VL53L0X_StaticInit(VL53L0X_DEV Dev) {
 800b4c8:	b5b0      	push	{r4, r5, r7, lr}
 800b4ca:	b09e      	sub	sp, #120	; 0x78
 800b4cc:	af02      	add	r7, sp, #8
 800b4ce:	6078      	str	r0, [r7, #4]
  VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b4d0:	2300      	movs	r3, #0
 800b4d2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  VL53L0X_DeviceParameters_t CurrentParameters = {0};
 800b4d6:	f107 031c 	add.w	r3, r7, #28
 800b4da:	2240      	movs	r2, #64	; 0x40
 800b4dc:	2100      	movs	r1, #0
 800b4de:	4618      	mov	r0, r3
 800b4e0:	f004 fe5b 	bl	801019a <memset>
  uint8_t *pTuningSettingBuffer;
  uint16_t tempword = 0;
 800b4e4:	2300      	movs	r3, #0
 800b4e6:	837b      	strh	r3, [r7, #26]
  uint8_t tempbyte = 0;
 800b4e8:	2300      	movs	r3, #0
 800b4ea:	767b      	strb	r3, [r7, #25]
  uint8_t UseInternalTuningSettings = 0;
 800b4ec:	2300      	movs	r3, #0
 800b4ee:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint32_t count = 0;
 800b4f2:	2300      	movs	r3, #0
 800b4f4:	663b      	str	r3, [r7, #96]	; 0x60
  uint8_t isApertureSpads = 0;
 800b4f6:	2300      	movs	r3, #0
 800b4f8:	763b      	strb	r3, [r7, #24]
  uint32_t refSpadCount = 0;
 800b4fa:	2300      	movs	r3, #0
 800b4fc:	617b      	str	r3, [r7, #20]
  uint8_t ApertureSpads = 0;
 800b4fe:	2300      	movs	r3, #0
 800b500:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  uint8_t vcselPulsePeriodPCLK;
  FixPoint1616_t seqTimeoutMilliSecs;

  LOG_FUNCTION_START("");

  Status = VL53L0X_get_info_from_device(Dev, 1);
 800b504:	2101      	movs	r1, #1
 800b506:	6878      	ldr	r0, [r7, #4]
 800b508:	f002 fb2a 	bl	800db60 <VL53L0X_get_info_from_device>
 800b50c:	4603      	mov	r3, r0
 800b50e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

  /* set the ref spad from NVM */
  count = (uint32_t)VL53L0X_GETDEVICESPECIFICPARAMETER(Dev, ReferenceSpadCount);
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	f893 3113 	ldrb.w	r3, [r3, #275]	; 0x113
 800b518:	663b      	str	r3, [r7, #96]	; 0x60
  ApertureSpads = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev, ReferenceSpadType);
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	f893 3114 	ldrb.w	r3, [r3, #276]	; 0x114
 800b520:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

  /* NVM value invalid */
  if ((ApertureSpads > 1) || ((ApertureSpads == 1) && (count > 32)) ||
 800b524:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b528:	2b01      	cmp	r3, #1
 800b52a:	d80d      	bhi.n	800b548 <VL53L0X_StaticInit+0x80>
 800b52c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b530:	2b01      	cmp	r3, #1
 800b532:	d102      	bne.n	800b53a <VL53L0X_StaticInit+0x72>
 800b534:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b536:	2b20      	cmp	r3, #32
 800b538:	d806      	bhi.n	800b548 <VL53L0X_StaticInit+0x80>
 800b53a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b53e:	2b00      	cmp	r3, #0
 800b540:	d10e      	bne.n	800b560 <VL53L0X_StaticInit+0x98>
      ((ApertureSpads == 0) && (count > 12)))
 800b542:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b544:	2b0c      	cmp	r3, #12
 800b546:	d90b      	bls.n	800b560 <VL53L0X_StaticInit+0x98>
    Status = VL53L0X_perform_ref_spad_management(Dev, &refSpadCount,
 800b548:	f107 0218 	add.w	r2, r7, #24
 800b54c:	f107 0314 	add.w	r3, r7, #20
 800b550:	4619      	mov	r1, r3
 800b552:	6878      	ldr	r0, [r7, #4]
 800b554:	f001 fd9f 	bl	800d096 <VL53L0X_perform_ref_spad_management>
 800b558:	4603      	mov	r3, r0
 800b55a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 800b55e:	e009      	b.n	800b574 <VL53L0X_StaticInit+0xac>
                                                 &isApertureSpads);
  else
    Status = VL53L0X_set_reference_spads(Dev, count, ApertureSpads);
 800b560:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b564:	461a      	mov	r2, r3
 800b566:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800b568:	6878      	ldr	r0, [r7, #4]
 800b56a:	f001 ffa9 	bl	800d4c0 <VL53L0X_set_reference_spads>
 800b56e:	4603      	mov	r3, r0
 800b570:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

  /* Initialize tuning settings buffer to prevent compiler warning. */
  pTuningSettingBuffer = DefaultTuningSettings;
 800b574:	4b94      	ldr	r3, [pc, #592]	; (800b7c8 <VL53L0X_StaticInit+0x300>)
 800b576:	66bb      	str	r3, [r7, #104]	; 0x68

  if (Status == VL53L0X_ERROR_NONE) {
 800b578:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800b57c:	2b00      	cmp	r3, #0
 800b57e:	d10f      	bne.n	800b5a0 <VL53L0X_StaticInit+0xd8>
    UseInternalTuningSettings = PALDevDataGet(Dev, UseInternalTuningSettings);
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	f893 3150 	ldrb.w	r3, [r3, #336]	; 0x150
 800b586:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67

    if (UseInternalTuningSettings == 0)
 800b58a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800b58e:	2b00      	cmp	r3, #0
 800b590:	d104      	bne.n	800b59c <VL53L0X_StaticInit+0xd4>
      pTuningSettingBuffer = PALDevDataGet(Dev, pTuningSettingsPointer);
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 800b598:	66bb      	str	r3, [r7, #104]	; 0x68
 800b59a:	e001      	b.n	800b5a0 <VL53L0X_StaticInit+0xd8>
    else
      pTuningSettingBuffer = DefaultTuningSettings;
 800b59c:	4b8a      	ldr	r3, [pc, #552]	; (800b7c8 <VL53L0X_StaticInit+0x300>)
 800b59e:	66bb      	str	r3, [r7, #104]	; 0x68
  }

  if (Status == VL53L0X_ERROR_NONE)
 800b5a0:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800b5a4:	2b00      	cmp	r3, #0
 800b5a6:	d106      	bne.n	800b5b6 <VL53L0X_StaticInit+0xee>
    Status = VL53L0X_load_tuning_settings(Dev, pTuningSettingBuffer);
 800b5a8:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800b5aa:	6878      	ldr	r0, [r7, #4]
 800b5ac:	f003 fbee 	bl	800ed8c <VL53L0X_load_tuning_settings>
 800b5b0:	4603      	mov	r3, r0
 800b5b2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

  /* Set interrupt config to new sample ready */
  if (Status == VL53L0X_ERROR_NONE) {
 800b5b6:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800b5ba:	2b00      	cmp	r3, #0
 800b5bc:	d10a      	bne.n	800b5d4 <VL53L0X_StaticInit+0x10c>
    Status = VL53L0X_SetGpioConfig(
 800b5be:	2300      	movs	r3, #0
 800b5c0:	9300      	str	r3, [sp, #0]
 800b5c2:	2304      	movs	r3, #4
 800b5c4:	2200      	movs	r2, #0
 800b5c6:	2100      	movs	r1, #0
 800b5c8:	6878      	ldr	r0, [r7, #4]
 800b5ca:	f001 f997 	bl	800c8fc <VL53L0X_SetGpioConfig>
 800b5ce:	4603      	mov	r3, r0
 800b5d0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
        Dev, 0, 0, VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY,
        VL53L0X_INTERRUPTPOLARITY_LOW);
  }

  if (Status == VL53L0X_ERROR_NONE) {
 800b5d4:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	d121      	bne.n	800b620 <VL53L0X_StaticInit+0x158>
    Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800b5dc:	2201      	movs	r2, #1
 800b5de:	21ff      	movs	r1, #255	; 0xff
 800b5e0:	6878      	ldr	r0, [r7, #4]
 800b5e2:	f004 fc9e 	bl	800ff22 <VL53L0X_WrByte>
 800b5e6:	4603      	mov	r3, r0
 800b5e8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
    Status |= VL53L0X_RdWord(Dev, 0x84, &tempword);
 800b5ec:	f107 031a 	add.w	r3, r7, #26
 800b5f0:	461a      	mov	r2, r3
 800b5f2:	2184      	movs	r1, #132	; 0x84
 800b5f4:	6878      	ldr	r0, [r7, #4]
 800b5f6:	f004 fd3b 	bl	8010070 <VL53L0X_RdWord>
 800b5fa:	4603      	mov	r3, r0
 800b5fc:	461a      	mov	r2, r3
 800b5fe:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800b602:	4313      	orrs	r3, r2
 800b604:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
    Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800b608:	2200      	movs	r2, #0
 800b60a:	21ff      	movs	r1, #255	; 0xff
 800b60c:	6878      	ldr	r0, [r7, #4]
 800b60e:	f004 fc88 	bl	800ff22 <VL53L0X_WrByte>
 800b612:	4603      	mov	r3, r0
 800b614:	461a      	mov	r2, r3
 800b616:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800b61a:	4313      	orrs	r3, r2
 800b61c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  }

  if (Status == VL53L0X_ERROR_NONE) {
 800b620:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800b624:	2b00      	cmp	r3, #0
 800b626:	d105      	bne.n	800b634 <VL53L0X_StaticInit+0x16c>
    VL53L0X_SETDEVICESPECIFICPARAMETER(
 800b628:	8b7b      	ldrh	r3, [r7, #26]
 800b62a:	011b      	lsls	r3, r3, #4
 800b62c:	461a      	mov	r2, r3
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
        Dev, OscFrequencyMHz, VL53L0X_FIXPOINT412TOFIXPOINT1616(tempword));
  }

  /* After static init, some device parameters may be changed,
   * so update them */
  if (Status == VL53L0X_ERROR_NONE)
 800b634:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800b638:	2b00      	cmp	r3, #0
 800b63a:	d108      	bne.n	800b64e <VL53L0X_StaticInit+0x186>
    Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 800b63c:	f107 031c 	add.w	r3, r7, #28
 800b640:	4619      	mov	r1, r3
 800b642:	6878      	ldr	r0, [r7, #4]
 800b644:	f000 f8c2 	bl	800b7cc <VL53L0X_GetDeviceParameters>
 800b648:	4603      	mov	r3, r0
 800b64a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

  if (Status == VL53L0X_ERROR_NONE) {
 800b64e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800b652:	2b00      	cmp	r3, #0
 800b654:	d110      	bne.n	800b678 <VL53L0X_StaticInit+0x1b0>
    Status = VL53L0X_GetFractionEnable(Dev, &tempbyte);
 800b656:	f107 0319 	add.w	r3, r7, #25
 800b65a:	4619      	mov	r1, r3
 800b65c:	6878      	ldr	r0, [r7, #4]
 800b65e:	f000 f9a0 	bl	800b9a2 <VL53L0X_GetFractionEnable>
 800b662:	4603      	mov	r3, r0
 800b664:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
    if (Status == VL53L0X_ERROR_NONE)
 800b668:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800b66c:	2b00      	cmp	r3, #0
 800b66e:	d103      	bne.n	800b678 <VL53L0X_StaticInit+0x1b0>
      PALDevDataSet(Dev, RangeFractionalEnable, tempbyte);
 800b670:	7e7a      	ldrb	r2, [r7, #25]
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	f883 2131 	strb.w	r2, [r3, #305]	; 0x131
  }

  if (Status == VL53L0X_ERROR_NONE)
 800b678:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800b67c:	2b00      	cmp	r3, #0
 800b67e:	d10e      	bne.n	800b69e <VL53L0X_StaticInit+0x1d6>
    PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	f103 0410 	add.w	r4, r3, #16
 800b686:	f107 051c 	add.w	r5, r7, #28
 800b68a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b68c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b68e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b690:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b692:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b694:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b696:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800b69a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  /* read the sequence config and save it */
  if (Status == VL53L0X_ERROR_NONE) {
 800b69e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800b6a2:	2b00      	cmp	r3, #0
 800b6a4:	d111      	bne.n	800b6ca <VL53L0X_StaticInit+0x202>
    Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &tempbyte);
 800b6a6:	f107 0319 	add.w	r3, r7, #25
 800b6aa:	461a      	mov	r2, r3
 800b6ac:	2101      	movs	r1, #1
 800b6ae:	6878      	ldr	r0, [r7, #4]
 800b6b0:	f004 fcbd 	bl	801002e <VL53L0X_RdByte>
 800b6b4:	4603      	mov	r3, r0
 800b6b6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
    if (Status == VL53L0X_ERROR_NONE)
 800b6ba:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800b6be:	2b00      	cmp	r3, #0
 800b6c0:	d103      	bne.n	800b6ca <VL53L0X_StaticInit+0x202>
      PALDevDataSet(Dev, SequenceConfig, tempbyte);
 800b6c2:	7e7a      	ldrb	r2, [r7, #25]
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
  }

  /* Disable MSRC and TCC by default */
  if (Status == VL53L0X_ERROR_NONE)
 800b6ca:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800b6ce:	2b00      	cmp	r3, #0
 800b6d0:	d107      	bne.n	800b6e2 <VL53L0X_StaticInit+0x21a>
    Status = VL53L0X_SetSequenceStepEnable(Dev, VL53L0X_SEQUENCESTEP_TCC, 0);
 800b6d2:	2200      	movs	r2, #0
 800b6d4:	2100      	movs	r1, #0
 800b6d6:	6878      	ldr	r0, [r7, #4]
 800b6d8:	f000 f9c0 	bl	800ba5c <VL53L0X_SetSequenceStepEnable>
 800b6dc:	4603      	mov	r3, r0
 800b6de:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

  if (Status == VL53L0X_ERROR_NONE)
 800b6e2:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800b6e6:	2b00      	cmp	r3, #0
 800b6e8:	d107      	bne.n	800b6fa <VL53L0X_StaticInit+0x232>
    Status = VL53L0X_SetSequenceStepEnable(Dev, VL53L0X_SEQUENCESTEP_MSRC, 0);
 800b6ea:	2200      	movs	r2, #0
 800b6ec:	2102      	movs	r1, #2
 800b6ee:	6878      	ldr	r0, [r7, #4]
 800b6f0:	f000 f9b4 	bl	800ba5c <VL53L0X_SetSequenceStepEnable>
 800b6f4:	4603      	mov	r3, r0
 800b6f6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

  /* Set PAL State to standby */
  if (Status == VL53L0X_ERROR_NONE)
 800b6fa:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800b6fe:	2b00      	cmp	r3, #0
 800b700:	d103      	bne.n	800b70a <VL53L0X_StaticInit+0x242>
    PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	2203      	movs	r2, #3
 800b706:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132

  /* Store pre-range vcsel period */
  if (Status == VL53L0X_ERROR_NONE) {
 800b70a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800b70e:	2b00      	cmp	r3, #0
 800b710:	d109      	bne.n	800b726 <VL53L0X_StaticInit+0x25e>
    Status = VL53L0X_GetVcselPulsePeriod(Dev, VL53L0X_VCSEL_PERIOD_PRE_RANGE,
 800b712:	f107 0313 	add.w	r3, r7, #19
 800b716:	461a      	mov	r2, r3
 800b718:	2100      	movs	r1, #0
 800b71a:	6878      	ldr	r0, [r7, #4]
 800b71c:	f000 f986 	bl	800ba2c <VL53L0X_GetVcselPulsePeriod>
 800b720:	4603      	mov	r3, r0
 800b722:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
                                         &vcselPulsePeriodPCLK);
  }

  if (Status == VL53L0X_ERROR_NONE) {
 800b726:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800b72a:	2b00      	cmp	r3, #0
 800b72c:	d103      	bne.n	800b736 <VL53L0X_StaticInit+0x26e>
    VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, PreRangeVcselPulsePeriod,
 800b72e:	7cfa      	ldrb	r2, [r7, #19]
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
                                       vcselPulsePeriodPCLK);
  }

  /* Store final-range vcsel period */
  if (Status == VL53L0X_ERROR_NONE) {
 800b736:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800b73a:	2b00      	cmp	r3, #0
 800b73c:	d109      	bne.n	800b752 <VL53L0X_StaticInit+0x28a>
    Status = VL53L0X_GetVcselPulsePeriod(Dev, VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
 800b73e:	f107 0313 	add.w	r3, r7, #19
 800b742:	461a      	mov	r2, r3
 800b744:	2101      	movs	r1, #1
 800b746:	6878      	ldr	r0, [r7, #4]
 800b748:	f000 f970 	bl	800ba2c <VL53L0X_GetVcselPulsePeriod>
 800b74c:	4603      	mov	r3, r0
 800b74e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
                                         &vcselPulsePeriodPCLK);
  }

  if (Status == VL53L0X_ERROR_NONE) {
 800b752:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800b756:	2b00      	cmp	r3, #0
 800b758:	d103      	bne.n	800b762 <VL53L0X_StaticInit+0x29a>
    VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, FinalRangeVcselPulsePeriod,
 800b75a:	7cfa      	ldrb	r2, [r7, #19]
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
                                       vcselPulsePeriodPCLK);
  }

  /* Store pre-range timeout */
  if (Status == VL53L0X_ERROR_NONE) {
 800b762:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800b766:	2b00      	cmp	r3, #0
 800b768:	d109      	bne.n	800b77e <VL53L0X_StaticInit+0x2b6>
    Status = VL53L0X_GetSequenceStepTimeout(Dev, VL53L0X_SEQUENCESTEP_PRE_RANGE,
 800b76a:	f107 030c 	add.w	r3, r7, #12
 800b76e:	461a      	mov	r2, r3
 800b770:	2103      	movs	r1, #3
 800b772:	6878      	ldr	r0, [r7, #4]
 800b774:	f000 fac8 	bl	800bd08 <VL53L0X_GetSequenceStepTimeout>
 800b778:	4603      	mov	r3, r0
 800b77a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
                                            &seqTimeoutMilliSecs);
  }

  if (Status == VL53L0X_ERROR_NONE) {
 800b77e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800b782:	2b00      	cmp	r3, #0
 800b784:	d103      	bne.n	800b78e <VL53L0X_StaticInit+0x2c6>
    VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, PreRangeTimeoutMicroSecs,
 800b786:	68fa      	ldr	r2, [r7, #12]
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
                                       seqTimeoutMilliSecs);
  }

  /* Store final-range timeout */
  if (Status == VL53L0X_ERROR_NONE) {
 800b78e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800b792:	2b00      	cmp	r3, #0
 800b794:	d109      	bne.n	800b7aa <VL53L0X_StaticInit+0x2e2>
    Status = VL53L0X_GetSequenceStepTimeout(
 800b796:	f107 030c 	add.w	r3, r7, #12
 800b79a:	461a      	mov	r2, r3
 800b79c:	2104      	movs	r1, #4
 800b79e:	6878      	ldr	r0, [r7, #4]
 800b7a0:	f000 fab2 	bl	800bd08 <VL53L0X_GetSequenceStepTimeout>
 800b7a4:	4603      	mov	r3, r0
 800b7a6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
        Dev, VL53L0X_SEQUENCESTEP_FINAL_RANGE, &seqTimeoutMilliSecs);
  }

  if (Status == VL53L0X_ERROR_NONE) {
 800b7aa:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800b7ae:	2b00      	cmp	r3, #0
 800b7b0:	d103      	bne.n	800b7ba <VL53L0X_StaticInit+0x2f2>
    VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, FinalRangeTimeoutMicroSecs,
 800b7b2:	68fa      	ldr	r2, [r7, #12]
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
                                       seqTimeoutMilliSecs);
  }

  LOG_FUNCTION_END(Status);
  return Status;
 800b7ba:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
}
 800b7be:	4618      	mov	r0, r3
 800b7c0:	3770      	adds	r7, #112	; 0x70
 800b7c2:	46bd      	mov	sp, r7
 800b7c4:	bdb0      	pop	{r4, r5, r7, pc}
 800b7c6:	bf00      	nop
 800b7c8:	24000250 	.word	0x24000250

0800b7cc <VL53L0X_GetDeviceParameters>:
  return Status;
}

VL53L0X_Error
VL53L0X_GetDeviceParameters(VL53L0X_DEV Dev,
                            VL53L0X_DeviceParameters_t *pDeviceParameters) {
 800b7cc:	b580      	push	{r7, lr}
 800b7ce:	b084      	sub	sp, #16
 800b7d0:	af00      	add	r7, sp, #0
 800b7d2:	6078      	str	r0, [r7, #4]
 800b7d4:	6039      	str	r1, [r7, #0]
  VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b7d6:	2300      	movs	r3, #0
 800b7d8:	73fb      	strb	r3, [r7, #15]
  int i;

  LOG_FUNCTION_START("");

  Status = VL53L0X_GetDeviceMode(Dev, &(pDeviceParameters->DeviceMode));
 800b7da:	683b      	ldr	r3, [r7, #0]
 800b7dc:	4619      	mov	r1, r3
 800b7de:	6878      	ldr	r0, [r7, #4]
 800b7e0:	f000 f8cc 	bl	800b97c <VL53L0X_GetDeviceMode>
 800b7e4:	4603      	mov	r3, r0
 800b7e6:	73fb      	strb	r3, [r7, #15]

  if (Status == VL53L0X_ERROR_NONE)
 800b7e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b7ec:	2b00      	cmp	r3, #0
 800b7ee:	d107      	bne.n	800b800 <VL53L0X_GetDeviceParameters+0x34>
    Status = VL53L0X_GetInterMeasurementPeriodMilliSeconds(
 800b7f0:	683b      	ldr	r3, [r7, #0]
 800b7f2:	3308      	adds	r3, #8
 800b7f4:	4619      	mov	r1, r3
 800b7f6:	6878      	ldr	r0, [r7, #4]
 800b7f8:	f000 fac6 	bl	800bd88 <VL53L0X_GetInterMeasurementPeriodMilliSeconds>
 800b7fc:	4603      	mov	r3, r0
 800b7fe:	73fb      	strb	r3, [r7, #15]
        Dev, &(pDeviceParameters->InterMeasurementPeriodMilliSeconds));

  if (Status == VL53L0X_ERROR_NONE)
 800b800:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b804:	2b00      	cmp	r3, #0
 800b806:	d102      	bne.n	800b80e <VL53L0X_GetDeviceParameters+0x42>
    pDeviceParameters->XTalkCompensationEnable = 0;
 800b808:	683b      	ldr	r3, [r7, #0]
 800b80a:	2200      	movs	r2, #0
 800b80c:	731a      	strb	r2, [r3, #12]

  if (Status == VL53L0X_ERROR_NONE)
 800b80e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b812:	2b00      	cmp	r3, #0
 800b814:	d107      	bne.n	800b826 <VL53L0X_GetDeviceParameters+0x5a>
    Status = VL53L0X_GetXTalkCompensationRateMegaCps(
 800b816:	683b      	ldr	r3, [r7, #0]
 800b818:	3310      	adds	r3, #16
 800b81a:	4619      	mov	r1, r3
 800b81c:	6878      	ldr	r0, [r7, #4]
 800b81e:	f000 fafc 	bl	800be1a <VL53L0X_GetXTalkCompensationRateMegaCps>
 800b822:	4603      	mov	r3, r0
 800b824:	73fb      	strb	r3, [r7, #15]
        Dev, &(pDeviceParameters->XTalkCompensationRateMegaCps));

  if (Status == VL53L0X_ERROR_NONE)
 800b826:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b82a:	2b00      	cmp	r3, #0
 800b82c:	d107      	bne.n	800b83e <VL53L0X_GetDeviceParameters+0x72>
    Status = VL53L0X_GetOffsetCalibrationDataMicroMeter(
 800b82e:	683b      	ldr	r3, [r7, #0]
 800b830:	3314      	adds	r3, #20
 800b832:	4619      	mov	r1, r3
 800b834:	6878      	ldr	r0, [r7, #4]
 800b836:	f7ff fca5 	bl	800b184 <VL53L0X_GetOffsetCalibrationDataMicroMeter>
 800b83a:	4603      	mov	r3, r0
 800b83c:	73fb      	strb	r3, [r7, #15]
        Dev, &(pDeviceParameters->RangeOffsetMicroMeters));

  if (Status == VL53L0X_ERROR_NONE) {
 800b83e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b842:	2b00      	cmp	r3, #0
 800b844:	d133      	bne.n	800b8ae <VL53L0X_GetDeviceParameters+0xe2>
    for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 800b846:	2300      	movs	r3, #0
 800b848:	60bb      	str	r3, [r7, #8]
 800b84a:	68bb      	ldr	r3, [r7, #8]
 800b84c:	2b05      	cmp	r3, #5
 800b84e:	dc2e      	bgt.n	800b8ae <VL53L0X_GetDeviceParameters+0xe2>
      /* get first the values, then the enables.
       * VL53L0X_GetLimitCheckValue will modify the enable
       * flags
       */
      if (Status == VL53L0X_ERROR_NONE) {
 800b850:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b854:	2b00      	cmp	r3, #0
 800b856:	d127      	bne.n	800b8a8 <VL53L0X_GetDeviceParameters+0xdc>
        Status |= VL53L0X_GetLimitCheckValue(
 800b858:	68bb      	ldr	r3, [r7, #8]
 800b85a:	b299      	uxth	r1, r3
 800b85c:	68bb      	ldr	r3, [r7, #8]
 800b85e:	3308      	adds	r3, #8
 800b860:	009b      	lsls	r3, r3, #2
 800b862:	683a      	ldr	r2, [r7, #0]
 800b864:	4413      	add	r3, r2
 800b866:	3304      	adds	r3, #4
 800b868:	461a      	mov	r2, r3
 800b86a:	6878      	ldr	r0, [r7, #4]
 800b86c:	f000 fc1a 	bl	800c0a4 <VL53L0X_GetLimitCheckValue>
 800b870:	4603      	mov	r3, r0
 800b872:	461a      	mov	r2, r3
 800b874:	7bfb      	ldrb	r3, [r7, #15]
 800b876:	4313      	orrs	r3, r2
 800b878:	73fb      	strb	r3, [r7, #15]
            Dev, i, &(pDeviceParameters->LimitChecksValue[i]));
      } else {
        break;
      }
      if (Status == VL53L0X_ERROR_NONE) {
 800b87a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b87e:	2b00      	cmp	r3, #0
 800b880:	d114      	bne.n	800b8ac <VL53L0X_GetDeviceParameters+0xe0>
        Status |= VL53L0X_GetLimitCheckEnable(
 800b882:	68bb      	ldr	r3, [r7, #8]
 800b884:	b299      	uxth	r1, r3
 800b886:	68bb      	ldr	r3, [r7, #8]
 800b888:	3318      	adds	r3, #24
 800b88a:	683a      	ldr	r2, [r7, #0]
 800b88c:	4413      	add	r3, r2
 800b88e:	461a      	mov	r2, r3
 800b890:	6878      	ldr	r0, [r7, #4]
 800b892:	f000 fb81 	bl	800bf98 <VL53L0X_GetLimitCheckEnable>
 800b896:	4603      	mov	r3, r0
 800b898:	461a      	mov	r2, r3
 800b89a:	7bfb      	ldrb	r3, [r7, #15]
 800b89c:	4313      	orrs	r3, r2
 800b89e:	73fb      	strb	r3, [r7, #15]
    for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 800b8a0:	68bb      	ldr	r3, [r7, #8]
 800b8a2:	3301      	adds	r3, #1
 800b8a4:	60bb      	str	r3, [r7, #8]
 800b8a6:	e7d0      	b.n	800b84a <VL53L0X_GetDeviceParameters+0x7e>
        break;
 800b8a8:	bf00      	nop
 800b8aa:	e000      	b.n	800b8ae <VL53L0X_GetDeviceParameters+0xe2>
            Dev, i, &(pDeviceParameters->LimitChecksEnable[i]));
      } else {
        break;
 800b8ac:	bf00      	nop
      }
    }
  }

  if (Status == VL53L0X_ERROR_NONE) {
 800b8ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b8b2:	2b00      	cmp	r3, #0
 800b8b4:	d107      	bne.n	800b8c6 <VL53L0X_GetDeviceParameters+0xfa>
    Status = VL53L0X_GetWrapAroundCheckEnable(
 800b8b6:	683b      	ldr	r3, [r7, #0]
 800b8b8:	333c      	adds	r3, #60	; 0x3c
 800b8ba:	4619      	mov	r1, r3
 800b8bc:	6878      	ldr	r0, [r7, #4]
 800b8be:	f000 fcf5 	bl	800c2ac <VL53L0X_GetWrapAroundCheckEnable>
 800b8c2:	4603      	mov	r3, r0
 800b8c4:	73fb      	strb	r3, [r7, #15]
        Dev, &(pDeviceParameters->WrapAroundCheckEnable));
  }

  /* Need to be done at the end as it uses VCSELPulsePeriod */
  if (Status == VL53L0X_ERROR_NONE) {
 800b8c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b8ca:	2b00      	cmp	r3, #0
 800b8cc:	d107      	bne.n	800b8de <VL53L0X_GetDeviceParameters+0x112>
    Status = VL53L0X_GetMeasurementTimingBudgetMicroSeconds(
 800b8ce:	683b      	ldr	r3, [r7, #0]
 800b8d0:	3304      	adds	r3, #4
 800b8d2:	4619      	mov	r1, r3
 800b8d4:	6878      	ldr	r0, [r7, #4]
 800b8d6:	f000 f896 	bl	800ba06 <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>
 800b8da:	4603      	mov	r3, r0
 800b8dc:	73fb      	strb	r3, [r7, #15]
        Dev, &(pDeviceParameters->MeasurementTimingBudgetMicroSeconds));
  }

  LOG_FUNCTION_END(Status);
  return Status;
 800b8de:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b8e2:	4618      	mov	r0, r3
 800b8e4:	3710      	adds	r7, #16
 800b8e6:	46bd      	mov	sp, r7
 800b8e8:	bd80      	pop	{r7, pc}
	...

0800b8ec <VL53L0X_SetDeviceMode>:

VL53L0X_Error VL53L0X_SetDeviceMode(VL53L0X_DEV Dev,
                                    VL53L0X_DeviceModes DeviceMode) {
 800b8ec:	b480      	push	{r7}
 800b8ee:	b085      	sub	sp, #20
 800b8f0:	af00      	add	r7, sp, #0
 800b8f2:	6078      	str	r0, [r7, #4]
 800b8f4:	460b      	mov	r3, r1
 800b8f6:	70fb      	strb	r3, [r7, #3]
  VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b8f8:	2300      	movs	r3, #0
 800b8fa:	73fb      	strb	r3, [r7, #15]

  LOG_FUNCTION_START("%d", (int)DeviceMode);

  switch (DeviceMode) {
 800b8fc:	78fb      	ldrb	r3, [r7, #3]
 800b8fe:	2b15      	cmp	r3, #21
 800b900:	d832      	bhi.n	800b968 <VL53L0X_SetDeviceMode+0x7c>
 800b902:	a201      	add	r2, pc, #4	; (adr r2, 800b908 <VL53L0X_SetDeviceMode+0x1c>)
 800b904:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b908:	0800b961 	.word	0x0800b961
 800b90c:	0800b961 	.word	0x0800b961
 800b910:	0800b969 	.word	0x0800b969
 800b914:	0800b961 	.word	0x0800b961
 800b918:	0800b969 	.word	0x0800b969
 800b91c:	0800b969 	.word	0x0800b969
 800b920:	0800b969 	.word	0x0800b969
 800b924:	0800b969 	.word	0x0800b969
 800b928:	0800b969 	.word	0x0800b969
 800b92c:	0800b969 	.word	0x0800b969
 800b930:	0800b969 	.word	0x0800b969
 800b934:	0800b969 	.word	0x0800b969
 800b938:	0800b969 	.word	0x0800b969
 800b93c:	0800b969 	.word	0x0800b969
 800b940:	0800b969 	.word	0x0800b969
 800b944:	0800b969 	.word	0x0800b969
 800b948:	0800b969 	.word	0x0800b969
 800b94c:	0800b969 	.word	0x0800b969
 800b950:	0800b969 	.word	0x0800b969
 800b954:	0800b969 	.word	0x0800b969
 800b958:	0800b961 	.word	0x0800b961
 800b95c:	0800b961 	.word	0x0800b961
  case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
  case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
  case VL53L0X_DEVICEMODE_GPIO_DRIVE:
  case VL53L0X_DEVICEMODE_GPIO_OSC:
    /* Supported modes */
    VL53L0X_SETPARAMETERFIELD(Dev, DeviceMode, DeviceMode);
 800b960:	78fa      	ldrb	r2, [r7, #3]
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	741a      	strb	r2, [r3, #16]
    break;
 800b966:	e001      	b.n	800b96c <VL53L0X_SetDeviceMode+0x80>
  default:
    /* Unsupported mode */
    Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 800b968:	23f8      	movs	r3, #248	; 0xf8
 800b96a:	73fb      	strb	r3, [r7, #15]
  }

  LOG_FUNCTION_END(Status);
  return Status;
 800b96c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b970:	4618      	mov	r0, r3
 800b972:	3714      	adds	r7, #20
 800b974:	46bd      	mov	sp, r7
 800b976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b97a:	4770      	bx	lr

0800b97c <VL53L0X_GetDeviceMode>:

VL53L0X_Error VL53L0X_GetDeviceMode(VL53L0X_DEV Dev,
                                    VL53L0X_DeviceModes *pDeviceMode) {
 800b97c:	b480      	push	{r7}
 800b97e:	b085      	sub	sp, #20
 800b980:	af00      	add	r7, sp, #0
 800b982:	6078      	str	r0, [r7, #4]
 800b984:	6039      	str	r1, [r7, #0]
  VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b986:	2300      	movs	r3, #0
 800b988:	73fb      	strb	r3, [r7, #15]
  LOG_FUNCTION_START("");

  VL53L0X_GETPARAMETERFIELD(Dev, DeviceMode, *pDeviceMode);
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	7c1a      	ldrb	r2, [r3, #16]
 800b98e:	683b      	ldr	r3, [r7, #0]
 800b990:	701a      	strb	r2, [r3, #0]

  LOG_FUNCTION_END(Status);
  return Status;
 800b992:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b996:	4618      	mov	r0, r3
 800b998:	3714      	adds	r7, #20
 800b99a:	46bd      	mov	sp, r7
 800b99c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9a0:	4770      	bx	lr

0800b9a2 <VL53L0X_GetFractionEnable>:

  LOG_FUNCTION_END(Status);
  return Status;
}

VL53L0X_Error VL53L0X_GetFractionEnable(VL53L0X_DEV Dev, uint8_t *pEnabled) {
 800b9a2:	b580      	push	{r7, lr}
 800b9a4:	b084      	sub	sp, #16
 800b9a6:	af00      	add	r7, sp, #0
 800b9a8:	6078      	str	r0, [r7, #4]
 800b9aa:	6039      	str	r1, [r7, #0]
  VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b9ac:	2300      	movs	r3, #0
 800b9ae:	73fb      	strb	r3, [r7, #15]
  LOG_FUNCTION_START("");

  Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_RANGE_CONFIG, pEnabled);
 800b9b0:	683a      	ldr	r2, [r7, #0]
 800b9b2:	2109      	movs	r1, #9
 800b9b4:	6878      	ldr	r0, [r7, #4]
 800b9b6:	f004 fb3a 	bl	801002e <VL53L0X_RdByte>
 800b9ba:	4603      	mov	r3, r0
 800b9bc:	73fb      	strb	r3, [r7, #15]

  if (Status == VL53L0X_ERROR_NONE)
 800b9be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b9c2:	2b00      	cmp	r3, #0
 800b9c4:	d106      	bne.n	800b9d4 <VL53L0X_GetFractionEnable+0x32>
    *pEnabled = (*pEnabled & 1);
 800b9c6:	683b      	ldr	r3, [r7, #0]
 800b9c8:	781b      	ldrb	r3, [r3, #0]
 800b9ca:	f003 0301 	and.w	r3, r3, #1
 800b9ce:	b2da      	uxtb	r2, r3
 800b9d0:	683b      	ldr	r3, [r7, #0]
 800b9d2:	701a      	strb	r2, [r3, #0]

  LOG_FUNCTION_END(Status);
  return Status;
 800b9d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b9d8:	4618      	mov	r0, r3
 800b9da:	3710      	adds	r7, #16
 800b9dc:	46bd      	mov	sp, r7
 800b9de:	bd80      	pop	{r7, pc}

0800b9e0 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>:
  LOG_FUNCTION_END(Status);
  return Status;
}

VL53L0X_Error VL53L0X_SetMeasurementTimingBudgetMicroSeconds(
    VL53L0X_DEV Dev, uint32_t MeasurementTimingBudgetMicroSeconds) {
 800b9e0:	b580      	push	{r7, lr}
 800b9e2:	b084      	sub	sp, #16
 800b9e4:	af00      	add	r7, sp, #0
 800b9e6:	6078      	str	r0, [r7, #4]
 800b9e8:	6039      	str	r1, [r7, #0]
  VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b9ea:	2300      	movs	r3, #0
 800b9ec:	73fb      	strb	r3, [r7, #15]
  LOG_FUNCTION_START("");

  Status = VL53L0X_set_measurement_timing_budget_micro_seconds(
 800b9ee:	6839      	ldr	r1, [r7, #0]
 800b9f0:	6878      	ldr	r0, [r7, #4]
 800b9f2:	f003 f83a 	bl	800ea6a <VL53L0X_set_measurement_timing_budget_micro_seconds>
 800b9f6:	4603      	mov	r3, r0
 800b9f8:	73fb      	strb	r3, [r7, #15]
      Dev, MeasurementTimingBudgetMicroSeconds);

  LOG_FUNCTION_END(Status);

  return Status;
 800b9fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b9fe:	4618      	mov	r0, r3
 800ba00:	3710      	adds	r7, #16
 800ba02:	46bd      	mov	sp, r7
 800ba04:	bd80      	pop	{r7, pc}

0800ba06 <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>:

VL53L0X_Error VL53L0X_GetMeasurementTimingBudgetMicroSeconds(
    VL53L0X_DEV Dev, uint32_t *pMeasurementTimingBudgetMicroSeconds) {
 800ba06:	b580      	push	{r7, lr}
 800ba08:	b084      	sub	sp, #16
 800ba0a:	af00      	add	r7, sp, #0
 800ba0c:	6078      	str	r0, [r7, #4]
 800ba0e:	6039      	str	r1, [r7, #0]
  VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ba10:	2300      	movs	r3, #0
 800ba12:	73fb      	strb	r3, [r7, #15]
  LOG_FUNCTION_START("");

  Status = VL53L0X_get_measurement_timing_budget_micro_seconds(
 800ba14:	6839      	ldr	r1, [r7, #0]
 800ba16:	6878      	ldr	r0, [r7, #4]
 800ba18:	f003 f907 	bl	800ec2a <VL53L0X_get_measurement_timing_budget_micro_seconds>
 800ba1c:	4603      	mov	r3, r0
 800ba1e:	73fb      	strb	r3, [r7, #15]
      Dev, pMeasurementTimingBudgetMicroSeconds);

  LOG_FUNCTION_END(Status);
  return Status;
 800ba20:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ba24:	4618      	mov	r0, r3
 800ba26:	3710      	adds	r7, #16
 800ba28:	46bd      	mov	sp, r7
 800ba2a:	bd80      	pop	{r7, pc}

0800ba2c <VL53L0X_GetVcselPulsePeriod>:
  return Status;
}

VL53L0X_Error VL53L0X_GetVcselPulsePeriod(VL53L0X_DEV Dev,
                                          VL53L0X_VcselPeriod VcselPeriodType,
                                          uint8_t *pVCSELPulsePeriodPCLK) {
 800ba2c:	b580      	push	{r7, lr}
 800ba2e:	b086      	sub	sp, #24
 800ba30:	af00      	add	r7, sp, #0
 800ba32:	60f8      	str	r0, [r7, #12]
 800ba34:	460b      	mov	r3, r1
 800ba36:	607a      	str	r2, [r7, #4]
 800ba38:	72fb      	strb	r3, [r7, #11]
  VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ba3a:	2300      	movs	r3, #0
 800ba3c:	75fb      	strb	r3, [r7, #23]
  LOG_FUNCTION_START("");

  Status = VL53L0X_get_vcsel_pulse_period(Dev, VcselPeriodType,
 800ba3e:	7afb      	ldrb	r3, [r7, #11]
 800ba40:	687a      	ldr	r2, [r7, #4]
 800ba42:	4619      	mov	r1, r3
 800ba44:	68f8      	ldr	r0, [r7, #12]
 800ba46:	f002 ffd9 	bl	800e9fc <VL53L0X_get_vcsel_pulse_period>
 800ba4a:	4603      	mov	r3, r0
 800ba4c:	75fb      	strb	r3, [r7, #23]
                                          pVCSELPulsePeriodPCLK);

  LOG_FUNCTION_END(Status);
  return Status;
 800ba4e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ba52:	4618      	mov	r0, r3
 800ba54:	3718      	adds	r7, #24
 800ba56:	46bd      	mov	sp, r7
 800ba58:	bd80      	pop	{r7, pc}
	...

0800ba5c <VL53L0X_SetSequenceStepEnable>:

VL53L0X_Error
VL53L0X_SetSequenceStepEnable(VL53L0X_DEV Dev,
                              VL53L0X_SequenceStepId SequenceStepId,
                              uint8_t SequenceStepEnabled) {
 800ba5c:	b580      	push	{r7, lr}
 800ba5e:	b086      	sub	sp, #24
 800ba60:	af00      	add	r7, sp, #0
 800ba62:	6078      	str	r0, [r7, #4]
 800ba64:	460b      	mov	r3, r1
 800ba66:	70fb      	strb	r3, [r7, #3]
 800ba68:	4613      	mov	r3, r2
 800ba6a:	70bb      	strb	r3, [r7, #2]
  VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ba6c:	2300      	movs	r3, #0
 800ba6e:	75fb      	strb	r3, [r7, #23]
  uint8_t SequenceConfig = 0;
 800ba70:	2300      	movs	r3, #0
 800ba72:	73fb      	strb	r3, [r7, #15]
  uint8_t SequenceConfigNew = 0;
 800ba74:	2300      	movs	r3, #0
 800ba76:	73bb      	strb	r3, [r7, #14]
  uint32_t MeasurementTimingBudgetMicroSeconds;
  LOG_FUNCTION_START("");

  Status =
 800ba78:	f107 030f 	add.w	r3, r7, #15
 800ba7c:	461a      	mov	r2, r3
 800ba7e:	2101      	movs	r1, #1
 800ba80:	6878      	ldr	r0, [r7, #4]
 800ba82:	f004 fad4 	bl	801002e <VL53L0X_RdByte>
 800ba86:	4603      	mov	r3, r0
 800ba88:	75fb      	strb	r3, [r7, #23]
      VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &SequenceConfig);

  SequenceConfigNew = SequenceConfig;
 800ba8a:	7bfb      	ldrb	r3, [r7, #15]
 800ba8c:	73bb      	strb	r3, [r7, #14]

  if (Status == VL53L0X_ERROR_NONE) {
 800ba8e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ba92:	2b00      	cmp	r3, #0
 800ba94:	d164      	bne.n	800bb60 <VL53L0X_SetSequenceStepEnable+0x104>
    if (SequenceStepEnabled == 1) {
 800ba96:	78bb      	ldrb	r3, [r7, #2]
 800ba98:	2b01      	cmp	r3, #1
 800ba9a:	d130      	bne.n	800bafe <VL53L0X_SetSequenceStepEnable+0xa2>

      /* Enable requested sequence step
       */
      switch (SequenceStepId) {
 800ba9c:	78fb      	ldrb	r3, [r7, #3]
 800ba9e:	2b04      	cmp	r3, #4
 800baa0:	d82a      	bhi.n	800baf8 <VL53L0X_SetSequenceStepEnable+0x9c>
 800baa2:	a201      	add	r2, pc, #4	; (adr r2, 800baa8 <VL53L0X_SetSequenceStepEnable+0x4c>)
 800baa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800baa8:	0800babd 	.word	0x0800babd
 800baac:	0800bac9 	.word	0x0800bac9
 800bab0:	0800bad5 	.word	0x0800bad5
 800bab4:	0800bae1 	.word	0x0800bae1
 800bab8:	0800baed 	.word	0x0800baed
      case VL53L0X_SEQUENCESTEP_TCC:
        SequenceConfigNew |= 0x10;
 800babc:	7bbb      	ldrb	r3, [r7, #14]
 800babe:	f043 0310 	orr.w	r3, r3, #16
 800bac2:	b2db      	uxtb	r3, r3
 800bac4:	73bb      	strb	r3, [r7, #14]
        break;
 800bac6:	e04b      	b.n	800bb60 <VL53L0X_SetSequenceStepEnable+0x104>
      case VL53L0X_SEQUENCESTEP_DSS:
        SequenceConfigNew |= 0x28;
 800bac8:	7bbb      	ldrb	r3, [r7, #14]
 800baca:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 800bace:	b2db      	uxtb	r3, r3
 800bad0:	73bb      	strb	r3, [r7, #14]
        break;
 800bad2:	e045      	b.n	800bb60 <VL53L0X_SetSequenceStepEnable+0x104>
      case VL53L0X_SEQUENCESTEP_MSRC:
        SequenceConfigNew |= 0x04;
 800bad4:	7bbb      	ldrb	r3, [r7, #14]
 800bad6:	f043 0304 	orr.w	r3, r3, #4
 800bada:	b2db      	uxtb	r3, r3
 800badc:	73bb      	strb	r3, [r7, #14]
        break;
 800bade:	e03f      	b.n	800bb60 <VL53L0X_SetSequenceStepEnable+0x104>
      case VL53L0X_SEQUENCESTEP_PRE_RANGE:
        SequenceConfigNew |= 0x40;
 800bae0:	7bbb      	ldrb	r3, [r7, #14]
 800bae2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bae6:	b2db      	uxtb	r3, r3
 800bae8:	73bb      	strb	r3, [r7, #14]
        break;
 800baea:	e039      	b.n	800bb60 <VL53L0X_SetSequenceStepEnable+0x104>
      case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
        SequenceConfigNew |= 0x80;
 800baec:	7bbb      	ldrb	r3, [r7, #14]
 800baee:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800baf2:	b2db      	uxtb	r3, r3
 800baf4:	73bb      	strb	r3, [r7, #14]
        break;
 800baf6:	e033      	b.n	800bb60 <VL53L0X_SetSequenceStepEnable+0x104>
      default:
        Status = VL53L0X_ERROR_INVALID_PARAMS;
 800baf8:	23fc      	movs	r3, #252	; 0xfc
 800bafa:	75fb      	strb	r3, [r7, #23]
 800bafc:	e030      	b.n	800bb60 <VL53L0X_SetSequenceStepEnable+0x104>
      }
    } else {
      /* Disable requested sequence step
       */
      switch (SequenceStepId) {
 800bafe:	78fb      	ldrb	r3, [r7, #3]
 800bb00:	2b04      	cmp	r3, #4
 800bb02:	d82b      	bhi.n	800bb5c <VL53L0X_SetSequenceStepEnable+0x100>
 800bb04:	a201      	add	r2, pc, #4	; (adr r2, 800bb0c <VL53L0X_SetSequenceStepEnable+0xb0>)
 800bb06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb0a:	bf00      	nop
 800bb0c:	0800bb21 	.word	0x0800bb21
 800bb10:	0800bb2d 	.word	0x0800bb2d
 800bb14:	0800bb39 	.word	0x0800bb39
 800bb18:	0800bb45 	.word	0x0800bb45
 800bb1c:	0800bb51 	.word	0x0800bb51
      case VL53L0X_SEQUENCESTEP_TCC:
        SequenceConfigNew &= 0xef;
 800bb20:	7bbb      	ldrb	r3, [r7, #14]
 800bb22:	f023 0310 	bic.w	r3, r3, #16
 800bb26:	b2db      	uxtb	r3, r3
 800bb28:	73bb      	strb	r3, [r7, #14]
        break;
 800bb2a:	e019      	b.n	800bb60 <VL53L0X_SetSequenceStepEnable+0x104>
      case VL53L0X_SEQUENCESTEP_DSS:
        SequenceConfigNew &= 0xd7;
 800bb2c:	7bbb      	ldrb	r3, [r7, #14]
 800bb2e:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 800bb32:	b2db      	uxtb	r3, r3
 800bb34:	73bb      	strb	r3, [r7, #14]
        break;
 800bb36:	e013      	b.n	800bb60 <VL53L0X_SetSequenceStepEnable+0x104>
      case VL53L0X_SEQUENCESTEP_MSRC:
        SequenceConfigNew &= 0xfb;
 800bb38:	7bbb      	ldrb	r3, [r7, #14]
 800bb3a:	f023 0304 	bic.w	r3, r3, #4
 800bb3e:	b2db      	uxtb	r3, r3
 800bb40:	73bb      	strb	r3, [r7, #14]
        break;
 800bb42:	e00d      	b.n	800bb60 <VL53L0X_SetSequenceStepEnable+0x104>
      case VL53L0X_SEQUENCESTEP_PRE_RANGE:
        SequenceConfigNew &= 0xbf;
 800bb44:	7bbb      	ldrb	r3, [r7, #14]
 800bb46:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bb4a:	b2db      	uxtb	r3, r3
 800bb4c:	73bb      	strb	r3, [r7, #14]
        break;
 800bb4e:	e007      	b.n	800bb60 <VL53L0X_SetSequenceStepEnable+0x104>
      case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
        SequenceConfigNew &= 0x7f;
 800bb50:	7bbb      	ldrb	r3, [r7, #14]
 800bb52:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bb56:	b2db      	uxtb	r3, r3
 800bb58:	73bb      	strb	r3, [r7, #14]
        break;
 800bb5a:	e001      	b.n	800bb60 <VL53L0X_SetSequenceStepEnable+0x104>
      default:
        Status = VL53L0X_ERROR_INVALID_PARAMS;
 800bb5c:	23fc      	movs	r3, #252	; 0xfc
 800bb5e:	75fb      	strb	r3, [r7, #23]
      }
    }
  }

  if (SequenceConfigNew != SequenceConfig) {
 800bb60:	7bba      	ldrb	r2, [r7, #14]
 800bb62:	7bfb      	ldrb	r3, [r7, #15]
 800bb64:	429a      	cmp	r2, r3
 800bb66:	d01e      	beq.n	800bba6 <VL53L0X_SetSequenceStepEnable+0x14a>
    /* Apply New Setting */
    if (Status == VL53L0X_ERROR_NONE) {
 800bb68:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800bb6c:	2b00      	cmp	r3, #0
 800bb6e:	d107      	bne.n	800bb80 <VL53L0X_SetSequenceStepEnable+0x124>
      Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800bb70:	7bbb      	ldrb	r3, [r7, #14]
 800bb72:	461a      	mov	r2, r3
 800bb74:	2101      	movs	r1, #1
 800bb76:	6878      	ldr	r0, [r7, #4]
 800bb78:	f004 f9d3 	bl	800ff22 <VL53L0X_WrByte>
 800bb7c:	4603      	mov	r3, r0
 800bb7e:	75fb      	strb	r3, [r7, #23]
                              SequenceConfigNew);
    }
    if (Status == VL53L0X_ERROR_NONE)
 800bb80:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800bb84:	2b00      	cmp	r3, #0
 800bb86:	d103      	bne.n	800bb90 <VL53L0X_SetSequenceStepEnable+0x134>
      PALDevDataSet(Dev, SequenceConfig, SequenceConfigNew);
 800bb88:	7bba      	ldrb	r2, [r7, #14]
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

    /* Recalculate timing budget */
    if (Status == VL53L0X_ERROR_NONE) {
 800bb90:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800bb94:	2b00      	cmp	r3, #0
 800bb96:	d106      	bne.n	800bba6 <VL53L0X_SetSequenceStepEnable+0x14a>
      VL53L0X_GETPARAMETERFIELD(Dev, MeasurementTimingBudgetMicroSeconds,
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	695b      	ldr	r3, [r3, #20]
 800bb9c:	613b      	str	r3, [r7, #16]
                                MeasurementTimingBudgetMicroSeconds);

      VL53L0X_SetMeasurementTimingBudgetMicroSeconds(
 800bb9e:	6939      	ldr	r1, [r7, #16]
 800bba0:	6878      	ldr	r0, [r7, #4]
 800bba2:	f7ff ff1d 	bl	800b9e0 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
    }
  }

  LOG_FUNCTION_END(Status);

  return Status;
 800bba6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800bbaa:	4618      	mov	r0, r3
 800bbac:	3718      	adds	r7, #24
 800bbae:	46bd      	mov	sp, r7
 800bbb0:	bd80      	pop	{r7, pc}
 800bbb2:	bf00      	nop

0800bbb4 <_Z21sequence_step_enabledP13VL53L0X_Dev_thhPh>:

VL53L0X_Error sequence_step_enabled(VL53L0X_DEV Dev,
                                    VL53L0X_SequenceStepId SequenceStepId,
                                    uint8_t SequenceConfig,
                                    uint8_t *pSequenceStepEnabled) {
 800bbb4:	b480      	push	{r7}
 800bbb6:	b087      	sub	sp, #28
 800bbb8:	af00      	add	r7, sp, #0
 800bbba:	60f8      	str	r0, [r7, #12]
 800bbbc:	607b      	str	r3, [r7, #4]
 800bbbe:	460b      	mov	r3, r1
 800bbc0:	72fb      	strb	r3, [r7, #11]
 800bbc2:	4613      	mov	r3, r2
 800bbc4:	72bb      	strb	r3, [r7, #10]
  VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800bbc6:	2300      	movs	r3, #0
 800bbc8:	75fb      	strb	r3, [r7, #23]
  *pSequenceStepEnabled = 0;
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	2200      	movs	r2, #0
 800bbce:	701a      	strb	r2, [r3, #0]
  LOG_FUNCTION_START("");

  switch (SequenceStepId) {
 800bbd0:	7afb      	ldrb	r3, [r7, #11]
 800bbd2:	2b04      	cmp	r3, #4
 800bbd4:	d836      	bhi.n	800bc44 <_Z21sequence_step_enabledP13VL53L0X_Dev_thhPh+0x90>
 800bbd6:	a201      	add	r2, pc, #4	; (adr r2, 800bbdc <_Z21sequence_step_enabledP13VL53L0X_Dev_thhPh+0x28>)
 800bbd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bbdc:	0800bbf1 	.word	0x0800bbf1
 800bbe0:	0800bc03 	.word	0x0800bc03
 800bbe4:	0800bc15 	.word	0x0800bc15
 800bbe8:	0800bc27 	.word	0x0800bc27
 800bbec:	0800bc39 	.word	0x0800bc39
  case VL53L0X_SEQUENCESTEP_TCC:
    *pSequenceStepEnabled = (SequenceConfig & 0x10) >> 4;
 800bbf0:	7abb      	ldrb	r3, [r7, #10]
 800bbf2:	111b      	asrs	r3, r3, #4
 800bbf4:	b2db      	uxtb	r3, r3
 800bbf6:	f003 0301 	and.w	r3, r3, #1
 800bbfa:	b2da      	uxtb	r2, r3
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	701a      	strb	r2, [r3, #0]
    break;
 800bc00:	e022      	b.n	800bc48 <_Z21sequence_step_enabledP13VL53L0X_Dev_thhPh+0x94>
  case VL53L0X_SEQUENCESTEP_DSS:
    *pSequenceStepEnabled = (SequenceConfig & 0x08) >> 3;
 800bc02:	7abb      	ldrb	r3, [r7, #10]
 800bc04:	10db      	asrs	r3, r3, #3
 800bc06:	b2db      	uxtb	r3, r3
 800bc08:	f003 0301 	and.w	r3, r3, #1
 800bc0c:	b2da      	uxtb	r2, r3
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	701a      	strb	r2, [r3, #0]
    break;
 800bc12:	e019      	b.n	800bc48 <_Z21sequence_step_enabledP13VL53L0X_Dev_thhPh+0x94>
  case VL53L0X_SEQUENCESTEP_MSRC:
    *pSequenceStepEnabled = (SequenceConfig & 0x04) >> 2;
 800bc14:	7abb      	ldrb	r3, [r7, #10]
 800bc16:	109b      	asrs	r3, r3, #2
 800bc18:	b2db      	uxtb	r3, r3
 800bc1a:	f003 0301 	and.w	r3, r3, #1
 800bc1e:	b2da      	uxtb	r2, r3
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	701a      	strb	r2, [r3, #0]
    break;
 800bc24:	e010      	b.n	800bc48 <_Z21sequence_step_enabledP13VL53L0X_Dev_thhPh+0x94>
  case VL53L0X_SEQUENCESTEP_PRE_RANGE:
    *pSequenceStepEnabled = (SequenceConfig & 0x40) >> 6;
 800bc26:	7abb      	ldrb	r3, [r7, #10]
 800bc28:	119b      	asrs	r3, r3, #6
 800bc2a:	b2db      	uxtb	r3, r3
 800bc2c:	f003 0301 	and.w	r3, r3, #1
 800bc30:	b2da      	uxtb	r2, r3
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	701a      	strb	r2, [r3, #0]
    break;
 800bc36:	e007      	b.n	800bc48 <_Z21sequence_step_enabledP13VL53L0X_Dev_thhPh+0x94>
  case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
    *pSequenceStepEnabled = (SequenceConfig & 0x80) >> 7;
 800bc38:	7abb      	ldrb	r3, [r7, #10]
 800bc3a:	09db      	lsrs	r3, r3, #7
 800bc3c:	b2da      	uxtb	r2, r3
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	701a      	strb	r2, [r3, #0]
    break;
 800bc42:	e001      	b.n	800bc48 <_Z21sequence_step_enabledP13VL53L0X_Dev_thhPh+0x94>
  default:
    Status = VL53L0X_ERROR_INVALID_PARAMS;
 800bc44:	23fc      	movs	r3, #252	; 0xfc
 800bc46:	75fb      	strb	r3, [r7, #23]
  }

  LOG_FUNCTION_END(Status);
  return Status;
 800bc48:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800bc4c:	4618      	mov	r0, r3
 800bc4e:	371c      	adds	r7, #28
 800bc50:	46bd      	mov	sp, r7
 800bc52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc56:	4770      	bx	lr

0800bc58 <VL53L0X_GetSequenceStepEnables>:
  return Status;
}

VL53L0X_Error VL53L0X_GetSequenceStepEnables(
    VL53L0X_DEV Dev,
    VL53L0X_SchedulerSequenceSteps_t *pSchedulerSequenceSteps) {
 800bc58:	b580      	push	{r7, lr}
 800bc5a:	b084      	sub	sp, #16
 800bc5c:	af00      	add	r7, sp, #0
 800bc5e:	6078      	str	r0, [r7, #4]
 800bc60:	6039      	str	r1, [r7, #0]
  VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800bc62:	2300      	movs	r3, #0
 800bc64:	73fb      	strb	r3, [r7, #15]
  uint8_t SequenceConfig = 0;
 800bc66:	2300      	movs	r3, #0
 800bc68:	73bb      	strb	r3, [r7, #14]
  LOG_FUNCTION_START("");

  Status =
 800bc6a:	f107 030e 	add.w	r3, r7, #14
 800bc6e:	461a      	mov	r2, r3
 800bc70:	2101      	movs	r1, #1
 800bc72:	6878      	ldr	r0, [r7, #4]
 800bc74:	f004 f9db 	bl	801002e <VL53L0X_RdByte>
 800bc78:	4603      	mov	r3, r0
 800bc7a:	73fb      	strb	r3, [r7, #15]
      VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &SequenceConfig);

  if (Status == VL53L0X_ERROR_NONE) {
 800bc7c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bc80:	2b00      	cmp	r3, #0
 800bc82:	d107      	bne.n	800bc94 <VL53L0X_GetSequenceStepEnables+0x3c>
    Status =
        sequence_step_enabled(Dev, VL53L0X_SEQUENCESTEP_TCC, SequenceConfig,
 800bc84:	7bba      	ldrb	r2, [r7, #14]
 800bc86:	683b      	ldr	r3, [r7, #0]
    Status =
 800bc88:	2100      	movs	r1, #0
 800bc8a:	6878      	ldr	r0, [r7, #4]
 800bc8c:	f7ff ff92 	bl	800bbb4 <_Z21sequence_step_enabledP13VL53L0X_Dev_thhPh>
 800bc90:	4603      	mov	r3, r0
 800bc92:	73fb      	strb	r3, [r7, #15]
                              &pSchedulerSequenceSteps->TccOn);
  }
  if (Status == VL53L0X_ERROR_NONE) {
 800bc94:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bc98:	2b00      	cmp	r3, #0
 800bc9a:	d108      	bne.n	800bcae <VL53L0X_GetSequenceStepEnables+0x56>
    Status =
        sequence_step_enabled(Dev, VL53L0X_SEQUENCESTEP_DSS, SequenceConfig,
 800bc9c:	7bba      	ldrb	r2, [r7, #14]
 800bc9e:	683b      	ldr	r3, [r7, #0]
 800bca0:	3302      	adds	r3, #2
    Status =
 800bca2:	2101      	movs	r1, #1
 800bca4:	6878      	ldr	r0, [r7, #4]
 800bca6:	f7ff ff85 	bl	800bbb4 <_Z21sequence_step_enabledP13VL53L0X_Dev_thhPh>
 800bcaa:	4603      	mov	r3, r0
 800bcac:	73fb      	strb	r3, [r7, #15]
                              &pSchedulerSequenceSteps->DssOn);
  }
  if (Status == VL53L0X_ERROR_NONE) {
 800bcae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bcb2:	2b00      	cmp	r3, #0
 800bcb4:	d108      	bne.n	800bcc8 <VL53L0X_GetSequenceStepEnables+0x70>
    Status =
        sequence_step_enabled(Dev, VL53L0X_SEQUENCESTEP_MSRC, SequenceConfig,
 800bcb6:	7bba      	ldrb	r2, [r7, #14]
 800bcb8:	683b      	ldr	r3, [r7, #0]
 800bcba:	3301      	adds	r3, #1
    Status =
 800bcbc:	2102      	movs	r1, #2
 800bcbe:	6878      	ldr	r0, [r7, #4]
 800bcc0:	f7ff ff78 	bl	800bbb4 <_Z21sequence_step_enabledP13VL53L0X_Dev_thhPh>
 800bcc4:	4603      	mov	r3, r0
 800bcc6:	73fb      	strb	r3, [r7, #15]
                              &pSchedulerSequenceSteps->MsrcOn);
  }
  if (Status == VL53L0X_ERROR_NONE) {
 800bcc8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bccc:	2b00      	cmp	r3, #0
 800bcce:	d108      	bne.n	800bce2 <VL53L0X_GetSequenceStepEnables+0x8a>
    Status = sequence_step_enabled(Dev, VL53L0X_SEQUENCESTEP_PRE_RANGE,
 800bcd0:	7bba      	ldrb	r2, [r7, #14]
 800bcd2:	683b      	ldr	r3, [r7, #0]
 800bcd4:	3303      	adds	r3, #3
 800bcd6:	2103      	movs	r1, #3
 800bcd8:	6878      	ldr	r0, [r7, #4]
 800bcda:	f7ff ff6b 	bl	800bbb4 <_Z21sequence_step_enabledP13VL53L0X_Dev_thhPh>
 800bcde:	4603      	mov	r3, r0
 800bce0:	73fb      	strb	r3, [r7, #15]
                                   SequenceConfig,
                                   &pSchedulerSequenceSteps->PreRangeOn);
  }
  if (Status == VL53L0X_ERROR_NONE) {
 800bce2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bce6:	2b00      	cmp	r3, #0
 800bce8:	d108      	bne.n	800bcfc <VL53L0X_GetSequenceStepEnables+0xa4>
    Status = sequence_step_enabled(Dev, VL53L0X_SEQUENCESTEP_FINAL_RANGE,
 800bcea:	7bba      	ldrb	r2, [r7, #14]
 800bcec:	683b      	ldr	r3, [r7, #0]
 800bcee:	3304      	adds	r3, #4
 800bcf0:	2104      	movs	r1, #4
 800bcf2:	6878      	ldr	r0, [r7, #4]
 800bcf4:	f7ff ff5e 	bl	800bbb4 <_Z21sequence_step_enabledP13VL53L0X_Dev_thhPh>
 800bcf8:	4603      	mov	r3, r0
 800bcfa:	73fb      	strb	r3, [r7, #15]
                                   SequenceConfig,
                                   &pSchedulerSequenceSteps->FinalRangeOn);
  }

  LOG_FUNCTION_END(Status);
  return Status;
 800bcfc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800bd00:	4618      	mov	r0, r3
 800bd02:	3710      	adds	r7, #16
 800bd04:	46bd      	mov	sp, r7
 800bd06:	bd80      	pop	{r7, pc}

0800bd08 <VL53L0X_GetSequenceStepTimeout>:
}

VL53L0X_Error
VL53L0X_GetSequenceStepTimeout(VL53L0X_DEV Dev,
                               VL53L0X_SequenceStepId SequenceStepId,
                               FixPoint1616_t *pTimeOutMilliSecs) {
 800bd08:	b580      	push	{r7, lr}
 800bd0a:	b088      	sub	sp, #32
 800bd0c:	af00      	add	r7, sp, #0
 800bd0e:	60f8      	str	r0, [r7, #12]
 800bd10:	460b      	mov	r3, r1
 800bd12:	607a      	str	r2, [r7, #4]
 800bd14:	72fb      	strb	r3, [r7, #11]
  VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800bd16:	2300      	movs	r3, #0
 800bd18:	77fb      	strb	r3, [r7, #31]
  uint32_t TimeoutMicroSeconds;
  uint32_t WholeNumber_ms = 0;
 800bd1a:	2300      	movs	r3, #0
 800bd1c:	61bb      	str	r3, [r7, #24]
  uint32_t Fraction_ms = 0;
 800bd1e:	2300      	movs	r3, #0
 800bd20:	617b      	str	r3, [r7, #20]
  LOG_FUNCTION_START("");

  Status = get_sequence_step_timeout(Dev, SequenceStepId, &TimeoutMicroSeconds);
 800bd22:	f107 0210 	add.w	r2, r7, #16
 800bd26:	7afb      	ldrb	r3, [r7, #11]
 800bd28:	4619      	mov	r1, r3
 800bd2a:	68f8      	ldr	r0, [r7, #12]
 800bd2c:	f002 fc94 	bl	800e658 <get_sequence_step_timeout>
 800bd30:	4603      	mov	r3, r0
 800bd32:	77fb      	strb	r3, [r7, #31]
  if (Status == VL53L0X_ERROR_NONE) {
 800bd34:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800bd38:	2b00      	cmp	r3, #0
 800bd3a:	d11c      	bne.n	800bd76 <VL53L0X_GetSequenceStepTimeout+0x6e>
    WholeNumber_ms = TimeoutMicroSeconds / 1000;
 800bd3c:	693b      	ldr	r3, [r7, #16]
 800bd3e:	4a11      	ldr	r2, [pc, #68]	; (800bd84 <VL53L0X_GetSequenceStepTimeout+0x7c>)
 800bd40:	fba2 2303 	umull	r2, r3, r2, r3
 800bd44:	099b      	lsrs	r3, r3, #6
 800bd46:	61bb      	str	r3, [r7, #24]
    Fraction_ms = TimeoutMicroSeconds - (WholeNumber_ms * 1000);
 800bd48:	693a      	ldr	r2, [r7, #16]
 800bd4a:	69bb      	ldr	r3, [r7, #24]
 800bd4c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800bd50:	fb01 f303 	mul.w	r3, r1, r3
 800bd54:	1ad3      	subs	r3, r2, r3
 800bd56:	617b      	str	r3, [r7, #20]
    *pTimeOutMilliSecs =
        (WholeNumber_ms << 16) + (((Fraction_ms * 0xffff) + 500) / 1000);
 800bd58:	69bb      	ldr	r3, [r7, #24]
 800bd5a:	0419      	lsls	r1, r3, #16
 800bd5c:	697a      	ldr	r2, [r7, #20]
 800bd5e:	4613      	mov	r3, r2
 800bd60:	041b      	lsls	r3, r3, #16
 800bd62:	1a9b      	subs	r3, r3, r2
 800bd64:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800bd68:	4a06      	ldr	r2, [pc, #24]	; (800bd84 <VL53L0X_GetSequenceStepTimeout+0x7c>)
 800bd6a:	fba2 2303 	umull	r2, r3, r2, r3
 800bd6e:	099b      	lsrs	r3, r3, #6
 800bd70:	18ca      	adds	r2, r1, r3
    *pTimeOutMilliSecs =
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	601a      	str	r2, [r3, #0]
  }

  LOG_FUNCTION_END(Status);
  return Status;
 800bd76:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800bd7a:	4618      	mov	r0, r3
 800bd7c:	3720      	adds	r7, #32
 800bd7e:	46bd      	mov	sp, r7
 800bd80:	bd80      	pop	{r7, pc}
 800bd82:	bf00      	nop
 800bd84:	10624dd3 	.word	0x10624dd3

0800bd88 <VL53L0X_GetInterMeasurementPeriodMilliSeconds>:
  LOG_FUNCTION_END(Status);
  return Status;
}

VL53L0X_Error VL53L0X_GetInterMeasurementPeriodMilliSeconds(
    VL53L0X_DEV Dev, uint32_t *pInterMeasurementPeriodMilliSeconds) {
 800bd88:	b580      	push	{r7, lr}
 800bd8a:	b084      	sub	sp, #16
 800bd8c:	af00      	add	r7, sp, #0
 800bd8e:	6078      	str	r0, [r7, #4]
 800bd90:	6039      	str	r1, [r7, #0]
  VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800bd92:	2300      	movs	r3, #0
 800bd94:	73fb      	strb	r3, [r7, #15]
  uint16_t osc_calibrate_val;
  uint32_t IMPeriodMilliSeconds;

  LOG_FUNCTION_START("");

  Status =
 800bd96:	f107 030c 	add.w	r3, r7, #12
 800bd9a:	461a      	mov	r2, r3
 800bd9c:	21f8      	movs	r1, #248	; 0xf8
 800bd9e:	6878      	ldr	r0, [r7, #4]
 800bda0:	f004 f966 	bl	8010070 <VL53L0X_RdWord>
 800bda4:	4603      	mov	r3, r0
 800bda6:	73fb      	strb	r3, [r7, #15]
      VL53L0X_RdWord(Dev, VL53L0X_REG_OSC_CALIBRATE_VAL, &osc_calibrate_val);

  if (Status == VL53L0X_ERROR_NONE) {
 800bda8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bdac:	2b00      	cmp	r3, #0
 800bdae:	d108      	bne.n	800bdc2 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x3a>
    Status = VL53L0X_RdDWord(Dev, VL53L0X_REG_SYSTEM_INTERMEASUREMENT_PERIOD,
 800bdb0:	f107 0308 	add.w	r3, r7, #8
 800bdb4:	461a      	mov	r2, r3
 800bdb6:	2104      	movs	r1, #4
 800bdb8:	6878      	ldr	r0, [r7, #4]
 800bdba:	f004 f97a 	bl	80100b2 <VL53L0X_RdDWord>
 800bdbe:	4603      	mov	r3, r0
 800bdc0:	73fb      	strb	r3, [r7, #15]
                             &IMPeriodMilliSeconds);
  }

  if (Status == VL53L0X_ERROR_NONE) {
 800bdc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bdc6:	2b00      	cmp	r3, #0
 800bdc8:	d10c      	bne.n	800bde4 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x5c>
    if (osc_calibrate_val != 0) {
 800bdca:	89bb      	ldrh	r3, [r7, #12]
 800bdcc:	2b00      	cmp	r3, #0
 800bdce:	d005      	beq.n	800bddc <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x54>
      *pInterMeasurementPeriodMilliSeconds =
          IMPeriodMilliSeconds / osc_calibrate_val;
 800bdd0:	68bb      	ldr	r3, [r7, #8]
 800bdd2:	89ba      	ldrh	r2, [r7, #12]
 800bdd4:	fbb3 f2f2 	udiv	r2, r3, r2
      *pInterMeasurementPeriodMilliSeconds =
 800bdd8:	683b      	ldr	r3, [r7, #0]
 800bdda:	601a      	str	r2, [r3, #0]
    }
    VL53L0X_SETPARAMETERFIELD(Dev, InterMeasurementPeriodMilliSeconds,
 800bddc:	683b      	ldr	r3, [r7, #0]
 800bdde:	681a      	ldr	r2, [r3, #0]
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	619a      	str	r2, [r3, #24]
                              *pInterMeasurementPeriodMilliSeconds);
  }

  LOG_FUNCTION_END(Status);
  return Status;
 800bde4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800bde8:	4618      	mov	r0, r3
 800bdea:	3710      	adds	r7, #16
 800bdec:	46bd      	mov	sp, r7
 800bdee:	bd80      	pop	{r7, pc}

0800bdf0 <VL53L0X_GetXTalkCompensationEnable>:
  return Status;
}

VL53L0X_Error
VL53L0X_GetXTalkCompensationEnable(VL53L0X_DEV Dev,
                                   uint8_t *pXTalkCompensationEnable) {
 800bdf0:	b480      	push	{r7}
 800bdf2:	b085      	sub	sp, #20
 800bdf4:	af00      	add	r7, sp, #0
 800bdf6:	6078      	str	r0, [r7, #4]
 800bdf8:	6039      	str	r1, [r7, #0]
  VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800bdfa:	2300      	movs	r3, #0
 800bdfc:	73fb      	strb	r3, [r7, #15]
  uint8_t Temp8;
  LOG_FUNCTION_START("");

  VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable, Temp8);
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	7f1b      	ldrb	r3, [r3, #28]
 800be02:	73bb      	strb	r3, [r7, #14]
  *pXTalkCompensationEnable = Temp8;
 800be04:	683b      	ldr	r3, [r7, #0]
 800be06:	7bba      	ldrb	r2, [r7, #14]
 800be08:	701a      	strb	r2, [r3, #0]

  LOG_FUNCTION_END(Status);
  return Status;
 800be0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800be0e:	4618      	mov	r0, r3
 800be10:	3714      	adds	r7, #20
 800be12:	46bd      	mov	sp, r7
 800be14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be18:	4770      	bx	lr

0800be1a <VL53L0X_GetXTalkCompensationRateMegaCps>:
  LOG_FUNCTION_END(Status);
  return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationRateMegaCps(
    VL53L0X_DEV Dev, FixPoint1616_t *pXTalkCompensationRateMegaCps) {
 800be1a:	b580      	push	{r7, lr}
 800be1c:	b084      	sub	sp, #16
 800be1e:	af00      	add	r7, sp, #0
 800be20:	6078      	str	r0, [r7, #4]
 800be22:	6039      	str	r1, [r7, #0]
  VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800be24:	2300      	movs	r3, #0
 800be26:	73fb      	strb	r3, [r7, #15]
  uint16_t Value;
  FixPoint1616_t TempFix1616;

  LOG_FUNCTION_START("");

  Status =
 800be28:	f107 030c 	add.w	r3, r7, #12
 800be2c:	461a      	mov	r2, r3
 800be2e:	2120      	movs	r1, #32
 800be30:	6878      	ldr	r0, [r7, #4]
 800be32:	f004 f91d 	bl	8010070 <VL53L0X_RdWord>
 800be36:	4603      	mov	r3, r0
 800be38:	73fb      	strb	r3, [r7, #15]
      VL53L0X_RdWord(Dev, VL53L0X_REG_CROSSTALK_COMPENSATION_PEAK_RATE_MCPS,
                     (uint16_t *)&Value);
  if (Status == VL53L0X_ERROR_NONE) {
 800be3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800be3e:	2b00      	cmp	r3, #0
 800be40:	d118      	bne.n	800be74 <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
    if (Value == 0) {
 800be42:	89bb      	ldrh	r3, [r7, #12]
 800be44:	2b00      	cmp	r3, #0
 800be46:	d109      	bne.n	800be5c <VL53L0X_GetXTalkCompensationRateMegaCps+0x42>
      /* the Xtalk is disabled return value from memory */
      VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps, TempFix1616);
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	6a1b      	ldr	r3, [r3, #32]
 800be4c:	60bb      	str	r3, [r7, #8]
      *pXTalkCompensationRateMegaCps = TempFix1616;
 800be4e:	68ba      	ldr	r2, [r7, #8]
 800be50:	683b      	ldr	r3, [r7, #0]
 800be52:	601a      	str	r2, [r3, #0]
      VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable, 0);
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	2200      	movs	r2, #0
 800be58:	771a      	strb	r2, [r3, #28]
 800be5a:	e00b      	b.n	800be74 <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
    } else {
      TempFix1616 = VL53L0X_FIXPOINT313TOFIXPOINT1616(Value);
 800be5c:	89bb      	ldrh	r3, [r7, #12]
 800be5e:	00db      	lsls	r3, r3, #3
 800be60:	60bb      	str	r3, [r7, #8]
      *pXTalkCompensationRateMegaCps = TempFix1616;
 800be62:	68ba      	ldr	r2, [r7, #8]
 800be64:	683b      	ldr	r3, [r7, #0]
 800be66:	601a      	str	r2, [r3, #0]
      VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps, TempFix1616);
 800be68:	68ba      	ldr	r2, [r7, #8]
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	621a      	str	r2, [r3, #32]
      VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable, 1);
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	2201      	movs	r2, #1
 800be72:	771a      	strb	r2, [r3, #28]
    }
  }

  LOG_FUNCTION_END(Status);
  return Status;
 800be74:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800be78:	4618      	mov	r0, r3
 800be7a:	3710      	adds	r7, #16
 800be7c:	46bd      	mov	sp, r7
 800be7e:	bd80      	pop	{r7, pc}

0800be80 <VL53L0X_SetLimitCheckEnable>:
  return Status;
}

VL53L0X_Error VL53L0X_SetLimitCheckEnable(VL53L0X_DEV Dev,
                                          uint16_t LimitCheckId,
                                          uint8_t LimitCheckEnable) {
 800be80:	b580      	push	{r7, lr}
 800be82:	b086      	sub	sp, #24
 800be84:	af00      	add	r7, sp, #0
 800be86:	6078      	str	r0, [r7, #4]
 800be88:	460b      	mov	r3, r1
 800be8a:	807b      	strh	r3, [r7, #2]
 800be8c:	4613      	mov	r3, r2
 800be8e:	707b      	strb	r3, [r7, #1]
  VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800be90:	2300      	movs	r3, #0
 800be92:	75fb      	strb	r3, [r7, #23]
  FixPoint1616_t TempFix1616 = 0;
 800be94:	2300      	movs	r3, #0
 800be96:	613b      	str	r3, [r7, #16]
  uint8_t LimitCheckEnableInt = 0;
 800be98:	2300      	movs	r3, #0
 800be9a:	737b      	strb	r3, [r7, #13]
  uint8_t LimitCheckDisable = 0;
 800be9c:	2300      	movs	r3, #0
 800be9e:	73fb      	strb	r3, [r7, #15]
  uint8_t Temp8;

  LOG_FUNCTION_START("");

  if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 800bea0:	887b      	ldrh	r3, [r7, #2]
 800bea2:	2b05      	cmp	r3, #5
 800bea4:	d902      	bls.n	800beac <VL53L0X_SetLimitCheckEnable+0x2c>
    Status = VL53L0X_ERROR_INVALID_PARAMS;
 800bea6:	23fc      	movs	r3, #252	; 0xfc
 800bea8:	75fb      	strb	r3, [r7, #23]
 800beaa:	e05b      	b.n	800bf64 <VL53L0X_SetLimitCheckEnable+0xe4>
  } else {
    if (LimitCheckEnable == 0) {
 800beac:	787b      	ldrb	r3, [r7, #1]
 800beae:	2b00      	cmp	r3, #0
 800beb0:	d106      	bne.n	800bec0 <VL53L0X_SetLimitCheckEnable+0x40>
      TempFix1616 = 0;
 800beb2:	2300      	movs	r3, #0
 800beb4:	613b      	str	r3, [r7, #16]
      LimitCheckEnableInt = 0;
 800beb6:	2300      	movs	r3, #0
 800beb8:	737b      	strb	r3, [r7, #13]
      LimitCheckDisable = 1;
 800beba:	2301      	movs	r3, #1
 800bebc:	73fb      	strb	r3, [r7, #15]
 800bebe:	e00a      	b.n	800bed6 <VL53L0X_SetLimitCheckEnable+0x56>

    } else {
      VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue, LimitCheckId,
 800bec0:	887b      	ldrh	r3, [r7, #2]
 800bec2:	687a      	ldr	r2, [r7, #4]
 800bec4:	330c      	adds	r3, #12
 800bec6:	009b      	lsls	r3, r3, #2
 800bec8:	4413      	add	r3, r2
 800beca:	685b      	ldr	r3, [r3, #4]
 800becc:	613b      	str	r3, [r7, #16]
                                     TempFix1616);
      LimitCheckDisable = 0;
 800bece:	2300      	movs	r3, #0
 800bed0:	73fb      	strb	r3, [r7, #15]
      /* this to be sure to have either 0 or 1 */
      LimitCheckEnableInt = 1;
 800bed2:	2301      	movs	r3, #1
 800bed4:	737b      	strb	r3, [r7, #13]
    }

    switch (LimitCheckId) {
 800bed6:	887b      	ldrh	r3, [r7, #2]
 800bed8:	2b05      	cmp	r3, #5
 800beda:	d841      	bhi.n	800bf60 <VL53L0X_SetLimitCheckEnable+0xe0>
 800bedc:	a201      	add	r2, pc, #4	; (adr r2, 800bee4 <VL53L0X_SetLimitCheckEnable+0x64>)
 800bede:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bee2:	bf00      	nop
 800bee4:	0800befd 	.word	0x0800befd
 800bee8:	0800bf07 	.word	0x0800bf07
 800beec:	0800bf1d 	.word	0x0800bf1d
 800bef0:	0800bf27 	.word	0x0800bf27
 800bef4:	0800bf31 	.word	0x0800bf31
 800bef8:	0800bf49 	.word	0x0800bf49

    case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
      /* internal computation: */
      VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800befc:	7b7a      	ldrb	r2, [r7, #13]
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                     VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
                                     LimitCheckEnableInt);

      break;
 800bf04:	e02e      	b.n	800bf64 <VL53L0X_SetLimitCheckEnable+0xe4>

    case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

      Status = VL53L0X_WrWord(
          Dev, VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
          VL53L0X_FIXPOINT1616TOFIXPOINT97(TempFix1616));
 800bf06:	693b      	ldr	r3, [r7, #16]
 800bf08:	0a5b      	lsrs	r3, r3, #9
      Status = VL53L0X_WrWord(
 800bf0a:	b29b      	uxth	r3, r3
 800bf0c:	461a      	mov	r2, r3
 800bf0e:	2144      	movs	r1, #68	; 0x44
 800bf10:	6878      	ldr	r0, [r7, #4]
 800bf12:	f004 f828 	bl	800ff66 <VL53L0X_WrWord>
 800bf16:	4603      	mov	r3, r0
 800bf18:	75fb      	strb	r3, [r7, #23]

      break;
 800bf1a:	e023      	b.n	800bf64 <VL53L0X_SetLimitCheckEnable+0xe4>

    case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

      /* internal computation: */
      VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800bf1c:	7b7a      	ldrb	r2, [r7, #13]
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
                                     VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
                                     LimitCheckEnableInt);

      break;
 800bf24:	e01e      	b.n	800bf64 <VL53L0X_SetLimitCheckEnable+0xe4>

    case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

      /* internal computation: */
      VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800bf26:	7b7a      	ldrb	r2, [r7, #13]
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
                                     VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
                                     LimitCheckEnableInt);

      break;
 800bf2e:	e019      	b.n	800bf64 <VL53L0X_SetLimitCheckEnable+0xe4>

    case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:

      Temp8 = (uint8_t)(LimitCheckDisable << 1);
 800bf30:	7bfb      	ldrb	r3, [r7, #15]
 800bf32:	005b      	lsls	r3, r3, #1
 800bf34:	73bb      	strb	r3, [r7, #14]
      Status =
 800bf36:	7bbb      	ldrb	r3, [r7, #14]
 800bf38:	22fe      	movs	r2, #254	; 0xfe
 800bf3a:	2160      	movs	r1, #96	; 0x60
 800bf3c:	6878      	ldr	r0, [r7, #4]
 800bf3e:	f004 f834 	bl	800ffaa <VL53L0X_UpdateByte>
 800bf42:	4603      	mov	r3, r0
 800bf44:	75fb      	strb	r3, [r7, #23]
          VL53L0X_UpdateByte(Dev, VL53L0X_REG_MSRC_CONFIG_CONTROL, 0xFE, Temp8);

      break;
 800bf46:	e00d      	b.n	800bf64 <VL53L0X_SetLimitCheckEnable+0xe4>

    case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

      Temp8 = (uint8_t)(LimitCheckDisable << 4);
 800bf48:	7bfb      	ldrb	r3, [r7, #15]
 800bf4a:	011b      	lsls	r3, r3, #4
 800bf4c:	73bb      	strb	r3, [r7, #14]
      Status =
 800bf4e:	7bbb      	ldrb	r3, [r7, #14]
 800bf50:	22ef      	movs	r2, #239	; 0xef
 800bf52:	2160      	movs	r1, #96	; 0x60
 800bf54:	6878      	ldr	r0, [r7, #4]
 800bf56:	f004 f828 	bl	800ffaa <VL53L0X_UpdateByte>
 800bf5a:	4603      	mov	r3, r0
 800bf5c:	75fb      	strb	r3, [r7, #23]
          VL53L0X_UpdateByte(Dev, VL53L0X_REG_MSRC_CONFIG_CONTROL, 0xEF, Temp8);

      break;
 800bf5e:	e001      	b.n	800bf64 <VL53L0X_SetLimitCheckEnable+0xe4>

    default:
      Status = VL53L0X_ERROR_INVALID_PARAMS;
 800bf60:	23fc      	movs	r3, #252	; 0xfc
 800bf62:	75fb      	strb	r3, [r7, #23]
    }
  }

  if (Status == VL53L0X_ERROR_NONE) {
 800bf64:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800bf68:	2b00      	cmp	r3, #0
 800bf6a:	d10f      	bne.n	800bf8c <VL53L0X_SetLimitCheckEnable+0x10c>
    if (LimitCheckEnable == 0) {
 800bf6c:	787b      	ldrb	r3, [r7, #1]
 800bf6e:	2b00      	cmp	r3, #0
 800bf70:	d106      	bne.n	800bf80 <VL53L0X_SetLimitCheckEnable+0x100>
      VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable, LimitCheckId, 0);
 800bf72:	887b      	ldrh	r3, [r7, #2]
 800bf74:	687a      	ldr	r2, [r7, #4]
 800bf76:	4413      	add	r3, r2
 800bf78:	2200      	movs	r2, #0
 800bf7a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 800bf7e:	e005      	b.n	800bf8c <VL53L0X_SetLimitCheckEnable+0x10c>
    } else {
      VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable, LimitCheckId, 1);
 800bf80:	887b      	ldrh	r3, [r7, #2]
 800bf82:	687a      	ldr	r2, [r7, #4]
 800bf84:	4413      	add	r3, r2
 800bf86:	2201      	movs	r2, #1
 800bf88:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    }
  }

  LOG_FUNCTION_END(Status);
  return Status;
 800bf8c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800bf90:	4618      	mov	r0, r3
 800bf92:	3718      	adds	r7, #24
 800bf94:	46bd      	mov	sp, r7
 800bf96:	bd80      	pop	{r7, pc}

0800bf98 <VL53L0X_GetLimitCheckEnable>:

VL53L0X_Error VL53L0X_GetLimitCheckEnable(VL53L0X_DEV Dev,
                                          uint16_t LimitCheckId,
                                          uint8_t *pLimitCheckEnable) {
 800bf98:	b480      	push	{r7}
 800bf9a:	b087      	sub	sp, #28
 800bf9c:	af00      	add	r7, sp, #0
 800bf9e:	60f8      	str	r0, [r7, #12]
 800bfa0:	460b      	mov	r3, r1
 800bfa2:	607a      	str	r2, [r7, #4]
 800bfa4:	817b      	strh	r3, [r7, #10]
  VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800bfa6:	2300      	movs	r3, #0
 800bfa8:	75fb      	strb	r3, [r7, #23]
  uint8_t Temp8;

  LOG_FUNCTION_START("");

  if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 800bfaa:	897b      	ldrh	r3, [r7, #10]
 800bfac:	2b05      	cmp	r3, #5
 800bfae:	d905      	bls.n	800bfbc <VL53L0X_GetLimitCheckEnable+0x24>
    Status = VL53L0X_ERROR_INVALID_PARAMS;
 800bfb0:	23fc      	movs	r3, #252	; 0xfc
 800bfb2:	75fb      	strb	r3, [r7, #23]
    *pLimitCheckEnable = 0;
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	2200      	movs	r2, #0
 800bfb8:	701a      	strb	r2, [r3, #0]
 800bfba:	e008      	b.n	800bfce <VL53L0X_GetLimitCheckEnable+0x36>
  } else {
    VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable, LimitCheckId, Temp8);
 800bfbc:	897b      	ldrh	r3, [r7, #10]
 800bfbe:	68fa      	ldr	r2, [r7, #12]
 800bfc0:	4413      	add	r3, r2
 800bfc2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bfc6:	75bb      	strb	r3, [r7, #22]
    *pLimitCheckEnable = Temp8;
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	7dba      	ldrb	r2, [r7, #22]
 800bfcc:	701a      	strb	r2, [r3, #0]
  }

  LOG_FUNCTION_END(Status);
  return Status;
 800bfce:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800bfd2:	4618      	mov	r0, r3
 800bfd4:	371c      	adds	r7, #28
 800bfd6:	46bd      	mov	sp, r7
 800bfd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfdc:	4770      	bx	lr
	...

0800bfe0 <VL53L0X_SetLimitCheckValue>:

VL53L0X_Error VL53L0X_SetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
                                         FixPoint1616_t LimitCheckValue) {
 800bfe0:	b580      	push	{r7, lr}
 800bfe2:	b086      	sub	sp, #24
 800bfe4:	af00      	add	r7, sp, #0
 800bfe6:	60f8      	str	r0, [r7, #12]
 800bfe8:	460b      	mov	r3, r1
 800bfea:	607a      	str	r2, [r7, #4]
 800bfec:	817b      	strh	r3, [r7, #10]
  VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800bfee:	2300      	movs	r3, #0
 800bff0:	75fb      	strb	r3, [r7, #23]
  uint8_t Temp8;

  LOG_FUNCTION_START("");

  VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable, LimitCheckId, Temp8);
 800bff2:	897b      	ldrh	r3, [r7, #10]
 800bff4:	68fa      	ldr	r2, [r7, #12]
 800bff6:	4413      	add	r3, r2
 800bff8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bffc:	75bb      	strb	r3, [r7, #22]

  if (Temp8 == 0) { /* disabled write only internal value */
 800bffe:	7dbb      	ldrb	r3, [r7, #22]
 800c000:	2b00      	cmp	r3, #0
 800c002:	d107      	bne.n	800c014 <VL53L0X_SetLimitCheckValue+0x34>
    VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue, LimitCheckId,
 800c004:	897b      	ldrh	r3, [r7, #10]
 800c006:	687a      	ldr	r2, [r7, #4]
 800c008:	68f9      	ldr	r1, [r7, #12]
 800c00a:	330c      	adds	r3, #12
 800c00c:	009b      	lsls	r3, r3, #2
 800c00e:	440b      	add	r3, r1
 800c010:	605a      	str	r2, [r3, #4]
 800c012:	e040      	b.n	800c096 <VL53L0X_SetLimitCheckValue+0xb6>
                                   LimitCheckValue);
  } else {

    switch (LimitCheckId) {
 800c014:	897b      	ldrh	r3, [r7, #10]
 800c016:	2b05      	cmp	r3, #5
 800c018:	d830      	bhi.n	800c07c <VL53L0X_SetLimitCheckValue+0x9c>
 800c01a:	a201      	add	r2, pc, #4	; (adr r2, 800c020 <VL53L0X_SetLimitCheckValue+0x40>)
 800c01c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c020:	0800c039 	.word	0x0800c039
 800c024:	0800c041 	.word	0x0800c041
 800c028:	0800c057 	.word	0x0800c057
 800c02c:	0800c05f 	.word	0x0800c05f
 800c030:	0800c067 	.word	0x0800c067
 800c034:	0800c067 	.word	0x0800c067

    case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
      /* internal computation: */
      VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800c038:	687a      	ldr	r2, [r7, #4]
 800c03a:	68fb      	ldr	r3, [r7, #12]
 800c03c:	635a      	str	r2, [r3, #52]	; 0x34
                                     VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
                                     LimitCheckValue);
      break;
 800c03e:	e01f      	b.n	800c080 <VL53L0X_SetLimitCheckValue+0xa0>

    case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

      Status = VL53L0X_WrWord(
          Dev, VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
          VL53L0X_FIXPOINT1616TOFIXPOINT97(LimitCheckValue));
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	0a5b      	lsrs	r3, r3, #9
      Status = VL53L0X_WrWord(
 800c044:	b29b      	uxth	r3, r3
 800c046:	461a      	mov	r2, r3
 800c048:	2144      	movs	r1, #68	; 0x44
 800c04a:	68f8      	ldr	r0, [r7, #12]
 800c04c:	f003 ff8b 	bl	800ff66 <VL53L0X_WrWord>
 800c050:	4603      	mov	r3, r0
 800c052:	75fb      	strb	r3, [r7, #23]

      break;
 800c054:	e014      	b.n	800c080 <VL53L0X_SetLimitCheckValue+0xa0>

    case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

      /* internal computation: */
      VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800c056:	687a      	ldr	r2, [r7, #4]
 800c058:	68fb      	ldr	r3, [r7, #12]
 800c05a:	63da      	str	r2, [r3, #60]	; 0x3c
                                     VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
                                     LimitCheckValue);

      break;
 800c05c:	e010      	b.n	800c080 <VL53L0X_SetLimitCheckValue+0xa0>

    case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

      /* internal computation: */
      VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800c05e:	687a      	ldr	r2, [r7, #4]
 800c060:	68fb      	ldr	r3, [r7, #12]
 800c062:	641a      	str	r2, [r3, #64]	; 0x40
                                     VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
                                     LimitCheckValue);

      break;
 800c064:	e00c      	b.n	800c080 <VL53L0X_SetLimitCheckValue+0xa0>
    case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
    case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

      Status =
          VL53L0X_WrWord(Dev, VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
                         VL53L0X_FIXPOINT1616TOFIXPOINT97(LimitCheckValue));
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	0a5b      	lsrs	r3, r3, #9
          VL53L0X_WrWord(Dev, VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
 800c06a:	b29b      	uxth	r3, r3
      Status =
 800c06c:	461a      	mov	r2, r3
 800c06e:	2164      	movs	r1, #100	; 0x64
 800c070:	68f8      	ldr	r0, [r7, #12]
 800c072:	f003 ff78 	bl	800ff66 <VL53L0X_WrWord>
 800c076:	4603      	mov	r3, r0
 800c078:	75fb      	strb	r3, [r7, #23]

      break;
 800c07a:	e001      	b.n	800c080 <VL53L0X_SetLimitCheckValue+0xa0>

    default:
      Status = VL53L0X_ERROR_INVALID_PARAMS;
 800c07c:	23fc      	movs	r3, #252	; 0xfc
 800c07e:	75fb      	strb	r3, [r7, #23]
    }

    if (Status == VL53L0X_ERROR_NONE) {
 800c080:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c084:	2b00      	cmp	r3, #0
 800c086:	d106      	bne.n	800c096 <VL53L0X_SetLimitCheckValue+0xb6>
      VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue, LimitCheckId,
 800c088:	897b      	ldrh	r3, [r7, #10]
 800c08a:	687a      	ldr	r2, [r7, #4]
 800c08c:	68f9      	ldr	r1, [r7, #12]
 800c08e:	330c      	adds	r3, #12
 800c090:	009b      	lsls	r3, r3, #2
 800c092:	440b      	add	r3, r1
 800c094:	605a      	str	r2, [r3, #4]
                                     LimitCheckValue);
    }
  }

  LOG_FUNCTION_END(Status);
  return Status;
 800c096:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c09a:	4618      	mov	r0, r3
 800c09c:	3718      	adds	r7, #24
 800c09e:	46bd      	mov	sp, r7
 800c0a0:	bd80      	pop	{r7, pc}
 800c0a2:	bf00      	nop

0800c0a4 <VL53L0X_GetLimitCheckValue>:

VL53L0X_Error VL53L0X_GetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
                                         FixPoint1616_t *pLimitCheckValue) {
 800c0a4:	b580      	push	{r7, lr}
 800c0a6:	b086      	sub	sp, #24
 800c0a8:	af00      	add	r7, sp, #0
 800c0aa:	60f8      	str	r0, [r7, #12]
 800c0ac:	460b      	mov	r3, r1
 800c0ae:	607a      	str	r2, [r7, #4]
 800c0b0:	817b      	strh	r3, [r7, #10]
  VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c0b2:	2300      	movs	r3, #0
 800c0b4:	75fb      	strb	r3, [r7, #23]
  uint8_t EnableZeroValue = 0;
 800c0b6:	2300      	movs	r3, #0
 800c0b8:	75bb      	strb	r3, [r7, #22]
  uint16_t Temp16;
  FixPoint1616_t TempFix1616;

  LOG_FUNCTION_START("");

  switch (LimitCheckId) {
 800c0ba:	897b      	ldrh	r3, [r7, #10]
 800c0bc:	2b05      	cmp	r3, #5
 800c0be:	d847      	bhi.n	800c150 <VL53L0X_GetLimitCheckValue+0xac>
 800c0c0:	a201      	add	r2, pc, #4	; (adr r2, 800c0c8 <VL53L0X_GetLimitCheckValue+0x24>)
 800c0c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c0c6:	bf00      	nop
 800c0c8:	0800c0e1 	.word	0x0800c0e1
 800c0cc:	0800c0ed 	.word	0x0800c0ed
 800c0d0:	0800c113 	.word	0x0800c113
 800c0d4:	0800c11f 	.word	0x0800c11f
 800c0d8:	0800c12b 	.word	0x0800c12b
 800c0dc:	0800c12b 	.word	0x0800c12b

  case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
    /* internal computation: */
    VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800c0e0:	68fb      	ldr	r3, [r7, #12]
 800c0e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c0e4:	613b      	str	r3, [r7, #16]
                                   VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
                                   TempFix1616);
    EnableZeroValue = 0;
 800c0e6:	2300      	movs	r3, #0
 800c0e8:	75bb      	strb	r3, [r7, #22]
    break;
 800c0ea:	e033      	b.n	800c154 <VL53L0X_GetLimitCheckValue+0xb0>

  case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
    Status = VL53L0X_RdWord(
 800c0ec:	f107 0314 	add.w	r3, r7, #20
 800c0f0:	461a      	mov	r2, r3
 800c0f2:	2144      	movs	r1, #68	; 0x44
 800c0f4:	68f8      	ldr	r0, [r7, #12]
 800c0f6:	f003 ffbb 	bl	8010070 <VL53L0X_RdWord>
 800c0fa:	4603      	mov	r3, r0
 800c0fc:	75fb      	strb	r3, [r7, #23]
        Dev, VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT, &Temp16);
    if (Status == VL53L0X_ERROR_NONE)
 800c0fe:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c102:	2b00      	cmp	r3, #0
 800c104:	d102      	bne.n	800c10c <VL53L0X_GetLimitCheckValue+0x68>
      TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 800c106:	8abb      	ldrh	r3, [r7, #20]
 800c108:	025b      	lsls	r3, r3, #9
 800c10a:	613b      	str	r3, [r7, #16]

    EnableZeroValue = 1;
 800c10c:	2301      	movs	r3, #1
 800c10e:	75bb      	strb	r3, [r7, #22]
    break;
 800c110:	e020      	b.n	800c154 <VL53L0X_GetLimitCheckValue+0xb0>

  case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:
    /* internal computation: */
    VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800c112:	68fb      	ldr	r3, [r7, #12]
 800c114:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c116:	613b      	str	r3, [r7, #16]
                                   VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
                                   TempFix1616);
    EnableZeroValue = 0;
 800c118:	2300      	movs	r3, #0
 800c11a:	75bb      	strb	r3, [r7, #22]
    break;
 800c11c:	e01a      	b.n	800c154 <VL53L0X_GetLimitCheckValue+0xb0>

  case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:
    /* internal computation: */
    VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800c11e:	68fb      	ldr	r3, [r7, #12]
 800c120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c122:	613b      	str	r3, [r7, #16]
                                   VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
                                   TempFix1616);
    EnableZeroValue = 0;
 800c124:	2300      	movs	r3, #0
 800c126:	75bb      	strb	r3, [r7, #22]
    break;
 800c128:	e014      	b.n	800c154 <VL53L0X_GetLimitCheckValue+0xb0>

  case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
  case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:
    Status = VL53L0X_RdWord(Dev, VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
 800c12a:	f107 0314 	add.w	r3, r7, #20
 800c12e:	461a      	mov	r2, r3
 800c130:	2164      	movs	r1, #100	; 0x64
 800c132:	68f8      	ldr	r0, [r7, #12]
 800c134:	f003 ff9c 	bl	8010070 <VL53L0X_RdWord>
 800c138:	4603      	mov	r3, r0
 800c13a:	75fb      	strb	r3, [r7, #23]
                            &Temp16);
    if (Status == VL53L0X_ERROR_NONE)
 800c13c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c140:	2b00      	cmp	r3, #0
 800c142:	d102      	bne.n	800c14a <VL53L0X_GetLimitCheckValue+0xa6>
      TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 800c144:	8abb      	ldrh	r3, [r7, #20]
 800c146:	025b      	lsls	r3, r3, #9
 800c148:	613b      	str	r3, [r7, #16]

    EnableZeroValue = 0;
 800c14a:	2300      	movs	r3, #0
 800c14c:	75bb      	strb	r3, [r7, #22]
    break;
 800c14e:	e001      	b.n	800c154 <VL53L0X_GetLimitCheckValue+0xb0>

  default:
    Status = VL53L0X_ERROR_INVALID_PARAMS;
 800c150:	23fc      	movs	r3, #252	; 0xfc
 800c152:	75fb      	strb	r3, [r7, #23]
  }

  if (Status == VL53L0X_ERROR_NONE) {
 800c154:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c158:	2b00      	cmp	r3, #0
 800c15a:	d12a      	bne.n	800c1b2 <VL53L0X_GetLimitCheckValue+0x10e>

    if (EnableZeroValue == 1) {
 800c15c:	7dbb      	ldrb	r3, [r7, #22]
 800c15e:	2b01      	cmp	r3, #1
 800c160:	d124      	bne.n	800c1ac <VL53L0X_GetLimitCheckValue+0x108>

      if (TempFix1616 == 0) {
 800c162:	693b      	ldr	r3, [r7, #16]
 800c164:	2b00      	cmp	r3, #0
 800c166:	d110      	bne.n	800c18a <VL53L0X_GetLimitCheckValue+0xe6>
        /* disabled: return value from memory */
        VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue, LimitCheckId,
 800c168:	897b      	ldrh	r3, [r7, #10]
 800c16a:	68fa      	ldr	r2, [r7, #12]
 800c16c:	330c      	adds	r3, #12
 800c16e:	009b      	lsls	r3, r3, #2
 800c170:	4413      	add	r3, r2
 800c172:	685b      	ldr	r3, [r3, #4]
 800c174:	613b      	str	r3, [r7, #16]
                                       TempFix1616);
        *pLimitCheckValue = TempFix1616;
 800c176:	693a      	ldr	r2, [r7, #16]
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	601a      	str	r2, [r3, #0]
        VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable, LimitCheckId, 0);
 800c17c:	897b      	ldrh	r3, [r7, #10]
 800c17e:	68fa      	ldr	r2, [r7, #12]
 800c180:	4413      	add	r3, r2
 800c182:	2200      	movs	r2, #0
 800c184:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 800c188:	e013      	b.n	800c1b2 <VL53L0X_GetLimitCheckValue+0x10e>
      } else {
        *pLimitCheckValue = TempFix1616;
 800c18a:	693a      	ldr	r2, [r7, #16]
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	601a      	str	r2, [r3, #0]
        VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue, LimitCheckId,
 800c190:	897b      	ldrh	r3, [r7, #10]
 800c192:	693a      	ldr	r2, [r7, #16]
 800c194:	68f9      	ldr	r1, [r7, #12]
 800c196:	330c      	adds	r3, #12
 800c198:	009b      	lsls	r3, r3, #2
 800c19a:	440b      	add	r3, r1
 800c19c:	605a      	str	r2, [r3, #4]
                                       TempFix1616);
        VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable, LimitCheckId, 1);
 800c19e:	897b      	ldrh	r3, [r7, #10]
 800c1a0:	68fa      	ldr	r2, [r7, #12]
 800c1a2:	4413      	add	r3, r2
 800c1a4:	2201      	movs	r2, #1
 800c1a6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 800c1aa:	e002      	b.n	800c1b2 <VL53L0X_GetLimitCheckValue+0x10e>
      }
    } else {
      *pLimitCheckValue = TempFix1616;
 800c1ac:	693a      	ldr	r2, [r7, #16]
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	601a      	str	r2, [r3, #0]
    }
  }

  LOG_FUNCTION_END(Status);
  return Status;
 800c1b2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c1b6:	4618      	mov	r0, r3
 800c1b8:	3718      	adds	r7, #24
 800c1ba:	46bd      	mov	sp, r7
 800c1bc:	bd80      	pop	{r7, pc}
 800c1be:	bf00      	nop

0800c1c0 <VL53L0X_GetLimitCheckCurrent>:

VL53L0X_Error VL53L0X_GetLimitCheckCurrent(VL53L0X_DEV Dev,
                                           uint16_t LimitCheckId,
                                           FixPoint1616_t *pLimitCheckCurrent) {
 800c1c0:	b4b0      	push	{r4, r5, r7}
 800c1c2:	b08d      	sub	sp, #52	; 0x34
 800c1c4:	af00      	add	r7, sp, #0
 800c1c6:	60f8      	str	r0, [r7, #12]
 800c1c8:	460b      	mov	r3, r1
 800c1ca:	607a      	str	r2, [r7, #4]
 800c1cc:	817b      	strh	r3, [r7, #10]
  VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c1ce:	2300      	movs	r3, #0
 800c1d0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  VL53L0X_RangingMeasurementData_t LastRangeDataBuffer;

  LOG_FUNCTION_START("");

  if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 800c1d4:	897b      	ldrh	r3, [r7, #10]
 800c1d6:	2b05      	cmp	r3, #5
 800c1d8:	d903      	bls.n	800c1e2 <VL53L0X_GetLimitCheckCurrent+0x22>
    Status = VL53L0X_ERROR_INVALID_PARAMS;
 800c1da:	23fc      	movs	r3, #252	; 0xfc
 800c1dc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800c1e0:	e05d      	b.n	800c29e <VL53L0X_GetLimitCheckCurrent+0xde>
  } else {
    switch (LimitCheckId) {
 800c1e2:	897b      	ldrh	r3, [r7, #10]
 800c1e4:	2b05      	cmp	r3, #5
 800c1e6:	d857      	bhi.n	800c298 <VL53L0X_GetLimitCheckCurrent+0xd8>
 800c1e8:	a201      	add	r2, pc, #4	; (adr r2, 800c1f0 <VL53L0X_GetLimitCheckCurrent+0x30>)
 800c1ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c1ee:	bf00      	nop
 800c1f0:	0800c209 	.word	0x0800c209
 800c1f4:	0800c215 	.word	0x0800c215
 800c1f8:	0800c233 	.word	0x0800c233
 800c1fc:	0800c23f 	.word	0x0800c23f
 800c200:	0800c25d 	.word	0x0800c25d
 800c204:	0800c27b 	.word	0x0800c27b
    case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
      /* Need to run a ranging to have the latest values */
      *pLimitCheckCurrent = PALDevDataGet(Dev, SigmaEstimate);
 800c208:	68fb      	ldr	r3, [r7, #12]
 800c20a:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	601a      	str	r2, [r3, #0]

      break;
 800c212:	e044      	b.n	800c29e <VL53L0X_GetLimitCheckCurrent+0xde>

    case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
      /* Need to run a ranging to have the latest values */
      LastRangeDataBuffer = PALDevDataGet(Dev, LastRangeMeasure);
 800c214:	68fb      	ldr	r3, [r7, #12]
 800c216:	f107 0410 	add.w	r4, r7, #16
 800c21a:	f103 0550 	add.w	r5, r3, #80	; 0x50
 800c21e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c220:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c222:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800c226:	e884 0007 	stmia.w	r4, {r0, r1, r2}
      *pLimitCheckCurrent = LastRangeDataBuffer.SignalRateRtnMegaCps;
 800c22a:	69fa      	ldr	r2, [r7, #28]
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	601a      	str	r2, [r3, #0]

      break;
 800c230:	e035      	b.n	800c29e <VL53L0X_GetLimitCheckCurrent+0xde>

    case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:
      /* Need to run a ranging to have the latest values */
      *pLimitCheckCurrent = PALDevDataGet(Dev, LastSignalRefMcps);
 800c232:	68fb      	ldr	r3, [r7, #12]
 800c234:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	601a      	str	r2, [r3, #0]

      break;
 800c23c:	e02f      	b.n	800c29e <VL53L0X_GetLimitCheckCurrent+0xde>

    case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:
      /* Need to run a ranging to have the latest values */
      LastRangeDataBuffer = PALDevDataGet(Dev, LastRangeMeasure);
 800c23e:	68fb      	ldr	r3, [r7, #12]
 800c240:	f107 0410 	add.w	r4, r7, #16
 800c244:	f103 0550 	add.w	r5, r3, #80	; 0x50
 800c248:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c24a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c24c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800c250:	e884 0007 	stmia.w	r4, {r0, r1, r2}
      *pLimitCheckCurrent = LastRangeDataBuffer.SignalRateRtnMegaCps;
 800c254:	69fa      	ldr	r2, [r7, #28]
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	601a      	str	r2, [r3, #0]

      break;
 800c25a:	e020      	b.n	800c29e <VL53L0X_GetLimitCheckCurrent+0xde>

    case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
      /* Need to run a ranging to have the latest values */
      LastRangeDataBuffer = PALDevDataGet(Dev, LastRangeMeasure);
 800c25c:	68fb      	ldr	r3, [r7, #12]
 800c25e:	f107 0410 	add.w	r4, r7, #16
 800c262:	f103 0550 	add.w	r5, r3, #80	; 0x50
 800c266:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c268:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c26a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800c26e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
      *pLimitCheckCurrent = LastRangeDataBuffer.SignalRateRtnMegaCps;
 800c272:	69fa      	ldr	r2, [r7, #28]
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	601a      	str	r2, [r3, #0]

      break;
 800c278:	e011      	b.n	800c29e <VL53L0X_GetLimitCheckCurrent+0xde>

    case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:
      /* Need to run a ranging to have the latest values */
      LastRangeDataBuffer = PALDevDataGet(Dev, LastRangeMeasure);
 800c27a:	68fb      	ldr	r3, [r7, #12]
 800c27c:	f107 0410 	add.w	r4, r7, #16
 800c280:	f103 0550 	add.w	r5, r3, #80	; 0x50
 800c284:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c286:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c288:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800c28c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
      *pLimitCheckCurrent = LastRangeDataBuffer.SignalRateRtnMegaCps;
 800c290:	69fa      	ldr	r2, [r7, #28]
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	601a      	str	r2, [r3, #0]

      break;
 800c296:	e002      	b.n	800c29e <VL53L0X_GetLimitCheckCurrent+0xde>

    default:
      Status = VL53L0X_ERROR_INVALID_PARAMS;
 800c298:	23fc      	movs	r3, #252	; 0xfc
 800c29a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }
  }

  LOG_FUNCTION_END(Status);
  return Status;
 800c29e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800c2a2:	4618      	mov	r0, r3
 800c2a4:	3734      	adds	r7, #52	; 0x34
 800c2a6:	46bd      	mov	sp, r7
 800c2a8:	bcb0      	pop	{r4, r5, r7}
 800c2aa:	4770      	bx	lr

0800c2ac <VL53L0X_GetWrapAroundCheckEnable>:
  return Status;
}

VL53L0X_Error
VL53L0X_GetWrapAroundCheckEnable(VL53L0X_DEV Dev,
                                 uint8_t *pWrapAroundCheckEnable) {
 800c2ac:	b580      	push	{r7, lr}
 800c2ae:	b084      	sub	sp, #16
 800c2b0:	af00      	add	r7, sp, #0
 800c2b2:	6078      	str	r0, [r7, #4]
 800c2b4:	6039      	str	r1, [r7, #0]
  VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c2b6:	2300      	movs	r3, #0
 800c2b8:	73fb      	strb	r3, [r7, #15]
  uint8_t data;

  LOG_FUNCTION_START("");

  Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &data);
 800c2ba:	f107 030e 	add.w	r3, r7, #14
 800c2be:	461a      	mov	r2, r3
 800c2c0:	2101      	movs	r1, #1
 800c2c2:	6878      	ldr	r0, [r7, #4]
 800c2c4:	f003 feb3 	bl	801002e <VL53L0X_RdByte>
 800c2c8:	4603      	mov	r3, r0
 800c2ca:	73fb      	strb	r3, [r7, #15]
  if (Status == VL53L0X_ERROR_NONE) {
 800c2cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c2d0:	2b00      	cmp	r3, #0
 800c2d2:	d10e      	bne.n	800c2f2 <VL53L0X_GetWrapAroundCheckEnable+0x46>
    PALDevDataSet(Dev, SequenceConfig, data);
 800c2d4:	7bba      	ldrb	r2, [r7, #14]
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
    if (data & (0x01 << 7))
 800c2dc:	7bbb      	ldrb	r3, [r7, #14]
 800c2de:	b25b      	sxtb	r3, r3
 800c2e0:	2b00      	cmp	r3, #0
 800c2e2:	da03      	bge.n	800c2ec <VL53L0X_GetWrapAroundCheckEnable+0x40>
      *pWrapAroundCheckEnable = 0x01;
 800c2e4:	683b      	ldr	r3, [r7, #0]
 800c2e6:	2201      	movs	r2, #1
 800c2e8:	701a      	strb	r2, [r3, #0]
 800c2ea:	e002      	b.n	800c2f2 <VL53L0X_GetWrapAroundCheckEnable+0x46>
    else
      *pWrapAroundCheckEnable = 0x00;
 800c2ec:	683b      	ldr	r3, [r7, #0]
 800c2ee:	2200      	movs	r2, #0
 800c2f0:	701a      	strb	r2, [r3, #0]
  }
  if (Status == VL53L0X_ERROR_NONE) {
 800c2f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c2f6:	2b00      	cmp	r3, #0
 800c2f8:	d104      	bne.n	800c304 <VL53L0X_GetWrapAroundCheckEnable+0x58>
    VL53L0X_SETPARAMETERFIELD(Dev, WrapAroundCheckEnable,
 800c2fa:	683b      	ldr	r3, [r7, #0]
 800c2fc:	781a      	ldrb	r2, [r3, #0]
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
                              *pWrapAroundCheckEnable);
  }

  LOG_FUNCTION_END(Status);
  return Status;
 800c304:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c308:	4618      	mov	r0, r3
 800c30a:	3710      	adds	r7, #16
 800c30c:	46bd      	mov	sp, r7
 800c30e:	bd80      	pop	{r7, pc}

0800c310 <VL53L0X_PerformSingleMeasurement>:
}

/* End Group PAL Parameters Functions */

/* Group PAL Measurement Functions */
VL53L0X_Error VL53L0X_PerformSingleMeasurement(VL53L0X_DEV Dev) {
 800c310:	b580      	push	{r7, lr}
 800c312:	b084      	sub	sp, #16
 800c314:	af00      	add	r7, sp, #0
 800c316:	6078      	str	r0, [r7, #4]
  VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c318:	2300      	movs	r3, #0
 800c31a:	73fb      	strb	r3, [r7, #15]
  VL53L0X_DeviceModes DeviceMode;

  LOG_FUNCTION_START("");

  /* Get Current DeviceMode */
  Status = VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 800c31c:	f107 030e 	add.w	r3, r7, #14
 800c320:	4619      	mov	r1, r3
 800c322:	6878      	ldr	r0, [r7, #4]
 800c324:	f7ff fb2a 	bl	800b97c <VL53L0X_GetDeviceMode>
 800c328:	4603      	mov	r3, r0
 800c32a:	73fb      	strb	r3, [r7, #15]

  /* Start immediately to run a single ranging measurement in case of
   * single ranging or single histogram */
  if (Status == VL53L0X_ERROR_NONE &&
 800c32c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c330:	2b00      	cmp	r3, #0
 800c332:	d107      	bne.n	800c344 <VL53L0X_PerformSingleMeasurement+0x34>
      DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 800c334:	7bbb      	ldrb	r3, [r7, #14]
  if (Status == VL53L0X_ERROR_NONE &&
 800c336:	2b00      	cmp	r3, #0
 800c338:	d104      	bne.n	800c344 <VL53L0X_PerformSingleMeasurement+0x34>
    Status = VL53L0X_StartMeasurement(Dev);
 800c33a:	6878      	ldr	r0, [r7, #4]
 800c33c:	f000 f898 	bl	800c470 <VL53L0X_StartMeasurement>
 800c340:	4603      	mov	r3, r0
 800c342:	73fb      	strb	r3, [r7, #15]

  if (Status == VL53L0X_ERROR_NONE)
 800c344:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c348:	2b00      	cmp	r3, #0
 800c34a:	d104      	bne.n	800c356 <VL53L0X_PerformSingleMeasurement+0x46>
    Status = VL53L0X_measurement_poll_for_completion(Dev);
 800c34c:	6878      	ldr	r0, [r7, #4]
 800c34e:	f001 fb4f 	bl	800d9f0 <VL53L0X_measurement_poll_for_completion>
 800c352:	4603      	mov	r3, r0
 800c354:	73fb      	strb	r3, [r7, #15]

  /* Change PAL State in case of single ranging or single histogram */
  if (Status == VL53L0X_ERROR_NONE &&
 800c356:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c35a:	2b00      	cmp	r3, #0
 800c35c:	d106      	bne.n	800c36c <VL53L0X_PerformSingleMeasurement+0x5c>
      DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 800c35e:	7bbb      	ldrb	r3, [r7, #14]
  if (Status == VL53L0X_ERROR_NONE &&
 800c360:	2b00      	cmp	r3, #0
 800c362:	d103      	bne.n	800c36c <VL53L0X_PerformSingleMeasurement+0x5c>
    PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	2203      	movs	r2, #3
 800c368:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132

  LOG_FUNCTION_END(Status);
  return Status;
 800c36c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c370:	4618      	mov	r0, r3
 800c372:	3710      	adds	r7, #16
 800c374:	46bd      	mov	sp, r7
 800c376:	bd80      	pop	{r7, pc}

0800c378 <VL53L0X_PerformRefCalibration>:
  return Status;
}

VL53L0X_Error VL53L0X_PerformRefCalibration(VL53L0X_DEV Dev,
                                            uint8_t *pVhvSettings,
                                            uint8_t *pPhaseCal) {
 800c378:	b580      	push	{r7, lr}
 800c37a:	b086      	sub	sp, #24
 800c37c:	af00      	add	r7, sp, #0
 800c37e:	60f8      	str	r0, [r7, #12]
 800c380:	60b9      	str	r1, [r7, #8]
 800c382:	607a      	str	r2, [r7, #4]
  VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c384:	2300      	movs	r3, #0
 800c386:	75fb      	strb	r3, [r7, #23]
  LOG_FUNCTION_START("");

  Status = VL53L0X_perform_ref_calibration(Dev, pVhvSettings, pPhaseCal, 1);
 800c388:	2301      	movs	r3, #1
 800c38a:	687a      	ldr	r2, [r7, #4]
 800c38c:	68b9      	ldr	r1, [r7, #8]
 800c38e:	68f8      	ldr	r0, [r7, #12]
 800c390:	f001 fae1 	bl	800d956 <VL53L0X_perform_ref_calibration>
 800c394:	4603      	mov	r3, r0
 800c396:	75fb      	strb	r3, [r7, #23]

  LOG_FUNCTION_END(Status);
  return Status;
 800c398:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c39c:	4618      	mov	r0, r3
 800c39e:	3718      	adds	r7, #24
 800c3a0:	46bd      	mov	sp, r7
 800c3a2:	bd80      	pop	{r7, pc}

0800c3a4 <_Z37VL53L0X_CheckAndLoadInterruptSettingsP13VL53L0X_Dev_th>:
  LOG_FUNCTION_END(Status);
  return Status;
}

VL53L0X_Error VL53L0X_CheckAndLoadInterruptSettings(VL53L0X_DEV Dev,
                                                    uint8_t StartNotStopFlag) {
 800c3a4:	b580      	push	{r7, lr}
 800c3a6:	b086      	sub	sp, #24
 800c3a8:	af00      	add	r7, sp, #0
 800c3aa:	6078      	str	r0, [r7, #4]
 800c3ac:	460b      	mov	r3, r1
 800c3ae:	70fb      	strb	r3, [r7, #3]
  uint8_t InterruptConfig;
  FixPoint1616_t ThresholdLow;
  FixPoint1616_t ThresholdHigh;
  VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c3b0:	2300      	movs	r3, #0
 800c3b2:	75fb      	strb	r3, [r7, #23]

  InterruptConfig =
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	f893 30da 	ldrb.w	r3, [r3, #218]	; 0xda
 800c3ba:	75bb      	strb	r3, [r7, #22]
      VL53L0X_GETDEVICESPECIFICPARAMETER(Dev, Pin0GpioFunctionality);

  if ((InterruptConfig == VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW) ||
 800c3bc:	7dbb      	ldrb	r3, [r7, #22]
 800c3be:	2b01      	cmp	r3, #1
 800c3c0:	d005      	beq.n	800c3ce <_Z37VL53L0X_CheckAndLoadInterruptSettingsP13VL53L0X_Dev_th+0x2a>
 800c3c2:	7dbb      	ldrb	r3, [r7, #22]
 800c3c4:	2b02      	cmp	r3, #2
 800c3c6:	d002      	beq.n	800c3ce <_Z37VL53L0X_CheckAndLoadInterruptSettingsP13VL53L0X_Dev_th+0x2a>
      (InterruptConfig == VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH) ||
 800c3c8:	7dbb      	ldrb	r3, [r7, #22]
 800c3ca:	2b03      	cmp	r3, #3
 800c3cc:	d147      	bne.n	800c45e <_Z37VL53L0X_CheckAndLoadInterruptSettingsP13VL53L0X_Dev_th+0xba>
      (InterruptConfig == VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT)) {

    Status = VL53L0X_GetInterruptThresholds(
 800c3ce:	f107 030c 	add.w	r3, r7, #12
 800c3d2:	f107 0210 	add.w	r2, r7, #16
 800c3d6:	2101      	movs	r1, #1
 800c3d8:	6878      	ldr	r0, [r7, #4]
 800c3da:	f000 fbb1 	bl	800cb40 <VL53L0X_GetInterruptThresholds>
 800c3de:	4603      	mov	r3, r0
 800c3e0:	75fb      	strb	r3, [r7, #23]
        Dev, VL53L0X_DEVICEMODE_CONTINUOUS_RANGING, &ThresholdLow,
        &ThresholdHigh);

    if (((ThresholdLow > 255 * 65536) || (ThresholdHigh > 255 * 65536)) &&
 800c3e2:	693b      	ldr	r3, [r7, #16]
 800c3e4:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 800c3e8:	d803      	bhi.n	800c3f2 <_Z37VL53L0X_CheckAndLoadInterruptSettingsP13VL53L0X_Dev_th+0x4e>
 800c3ea:	68fb      	ldr	r3, [r7, #12]
 800c3ec:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 800c3f0:	d935      	bls.n	800c45e <_Z37VL53L0X_CheckAndLoadInterruptSettingsP13VL53L0X_Dev_th+0xba>
 800c3f2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c3f6:	2b00      	cmp	r3, #0
 800c3f8:	d131      	bne.n	800c45e <_Z37VL53L0X_CheckAndLoadInterruptSettingsP13VL53L0X_Dev_th+0xba>
        (Status == VL53L0X_ERROR_NONE)) {

      if (StartNotStopFlag != 0) {
 800c3fa:	78fb      	ldrb	r3, [r7, #3]
 800c3fc:	2b00      	cmp	r3, #0
 800c3fe:	d006      	beq.n	800c40e <_Z37VL53L0X_CheckAndLoadInterruptSettingsP13VL53L0X_Dev_th+0x6a>
        Status = VL53L0X_load_tuning_settings(Dev, InterruptThresholdSettings);
 800c400:	491a      	ldr	r1, [pc, #104]	; (800c46c <_Z37VL53L0X_CheckAndLoadInterruptSettingsP13VL53L0X_Dev_th+0xc8>)
 800c402:	6878      	ldr	r0, [r7, #4]
 800c404:	f002 fcc2 	bl	800ed8c <VL53L0X_load_tuning_settings>
 800c408:	4603      	mov	r3, r0
 800c40a:	75fb      	strb	r3, [r7, #23]
 800c40c:	e027      	b.n	800c45e <_Z37VL53L0X_CheckAndLoadInterruptSettingsP13VL53L0X_Dev_th+0xba>
      } else {
        Status |= VL53L0X_WrByte(Dev, 0xFF, 0x04);
 800c40e:	2204      	movs	r2, #4
 800c410:	21ff      	movs	r1, #255	; 0xff
 800c412:	6878      	ldr	r0, [r7, #4]
 800c414:	f003 fd85 	bl	800ff22 <VL53L0X_WrByte>
 800c418:	4603      	mov	r3, r0
 800c41a:	461a      	mov	r2, r3
 800c41c:	7dfb      	ldrb	r3, [r7, #23]
 800c41e:	4313      	orrs	r3, r2
 800c420:	75fb      	strb	r3, [r7, #23]
        Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
 800c422:	2200      	movs	r2, #0
 800c424:	2170      	movs	r1, #112	; 0x70
 800c426:	6878      	ldr	r0, [r7, #4]
 800c428:	f003 fd7b 	bl	800ff22 <VL53L0X_WrByte>
 800c42c:	4603      	mov	r3, r0
 800c42e:	461a      	mov	r2, r3
 800c430:	7dfb      	ldrb	r3, [r7, #23]
 800c432:	4313      	orrs	r3, r2
 800c434:	75fb      	strb	r3, [r7, #23]
        Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800c436:	2200      	movs	r2, #0
 800c438:	21ff      	movs	r1, #255	; 0xff
 800c43a:	6878      	ldr	r0, [r7, #4]
 800c43c:	f003 fd71 	bl	800ff22 <VL53L0X_WrByte>
 800c440:	4603      	mov	r3, r0
 800c442:	461a      	mov	r2, r3
 800c444:	7dfb      	ldrb	r3, [r7, #23]
 800c446:	4313      	orrs	r3, r2
 800c448:	75fb      	strb	r3, [r7, #23]
        Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 800c44a:	2200      	movs	r2, #0
 800c44c:	2180      	movs	r1, #128	; 0x80
 800c44e:	6878      	ldr	r0, [r7, #4]
 800c450:	f003 fd67 	bl	800ff22 <VL53L0X_WrByte>
 800c454:	4603      	mov	r3, r0
 800c456:	461a      	mov	r2, r3
 800c458:	7dfb      	ldrb	r3, [r7, #23]
 800c45a:	4313      	orrs	r3, r2
 800c45c:	75fb      	strb	r3, [r7, #23]
      }
    }
  }

  return Status;
 800c45e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c462:	4618      	mov	r0, r3
 800c464:	3718      	adds	r7, #24
 800c466:	46bd      	mov	sp, r7
 800c468:	bd80      	pop	{r7, pc}
 800c46a:	bf00      	nop
 800c46c:	24000098 	.word	0x24000098

0800c470 <VL53L0X_StartMeasurement>:

VL53L0X_Error VL53L0X_StartMeasurement(VL53L0X_DEV Dev) {
 800c470:	b580      	push	{r7, lr}
 800c472:	b086      	sub	sp, #24
 800c474:	af00      	add	r7, sp, #0
 800c476:	6078      	str	r0, [r7, #4]
  VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c478:	2300      	movs	r3, #0
 800c47a:	75fb      	strb	r3, [r7, #23]
  VL53L0X_DeviceModes DeviceMode;
  uint8_t Byte;
  uint8_t StartStopByte = VL53L0X_REG_SYSRANGE_MODE_START_STOP;
 800c47c:	2301      	movs	r3, #1
 800c47e:	73fb      	strb	r3, [r7, #15]
  uint32_t LoopNb;
  LOG_FUNCTION_START("");

  /* Get Current DeviceMode */
  VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 800c480:	f107 030e 	add.w	r3, r7, #14
 800c484:	4619      	mov	r1, r3
 800c486:	6878      	ldr	r0, [r7, #4]
 800c488:	f7ff fa78 	bl	800b97c <VL53L0X_GetDeviceMode>

  Status = VL53L0X_WrByte(Dev, 0x80, 0x01);
 800c48c:	2201      	movs	r2, #1
 800c48e:	2180      	movs	r1, #128	; 0x80
 800c490:	6878      	ldr	r0, [r7, #4]
 800c492:	f003 fd46 	bl	800ff22 <VL53L0X_WrByte>
 800c496:	4603      	mov	r3, r0
 800c498:	75fb      	strb	r3, [r7, #23]
  Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800c49a:	2201      	movs	r2, #1
 800c49c:	21ff      	movs	r1, #255	; 0xff
 800c49e:	6878      	ldr	r0, [r7, #4]
 800c4a0:	f003 fd3f 	bl	800ff22 <VL53L0X_WrByte>
 800c4a4:	4603      	mov	r3, r0
 800c4a6:	75fb      	strb	r3, [r7, #23]
  Status = VL53L0X_WrByte(Dev, 0x00, 0x00);
 800c4a8:	2200      	movs	r2, #0
 800c4aa:	2100      	movs	r1, #0
 800c4ac:	6878      	ldr	r0, [r7, #4]
 800c4ae:	f003 fd38 	bl	800ff22 <VL53L0X_WrByte>
 800c4b2:	4603      	mov	r3, r0
 800c4b4:	75fb      	strb	r3, [r7, #23]
  Status = VL53L0X_WrByte(Dev, 0x91, PALDevDataGet(Dev, StopVariable));
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 800c4bc:	461a      	mov	r2, r3
 800c4be:	2191      	movs	r1, #145	; 0x91
 800c4c0:	6878      	ldr	r0, [r7, #4]
 800c4c2:	f003 fd2e 	bl	800ff22 <VL53L0X_WrByte>
 800c4c6:	4603      	mov	r3, r0
 800c4c8:	75fb      	strb	r3, [r7, #23]
  Status = VL53L0X_WrByte(Dev, 0x00, 0x01);
 800c4ca:	2201      	movs	r2, #1
 800c4cc:	2100      	movs	r1, #0
 800c4ce:	6878      	ldr	r0, [r7, #4]
 800c4d0:	f003 fd27 	bl	800ff22 <VL53L0X_WrByte>
 800c4d4:	4603      	mov	r3, r0
 800c4d6:	75fb      	strb	r3, [r7, #23]
  Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800c4d8:	2200      	movs	r2, #0
 800c4da:	21ff      	movs	r1, #255	; 0xff
 800c4dc:	6878      	ldr	r0, [r7, #4]
 800c4de:	f003 fd20 	bl	800ff22 <VL53L0X_WrByte>
 800c4e2:	4603      	mov	r3, r0
 800c4e4:	75fb      	strb	r3, [r7, #23]
  Status = VL53L0X_WrByte(Dev, 0x80, 0x00);
 800c4e6:	2200      	movs	r2, #0
 800c4e8:	2180      	movs	r1, #128	; 0x80
 800c4ea:	6878      	ldr	r0, [r7, #4]
 800c4ec:	f003 fd19 	bl	800ff22 <VL53L0X_WrByte>
 800c4f0:	4603      	mov	r3, r0
 800c4f2:	75fb      	strb	r3, [r7, #23]

  switch (DeviceMode) {
 800c4f4:	7bbb      	ldrb	r3, [r7, #14]
 800c4f6:	2b01      	cmp	r3, #1
 800c4f8:	d036      	beq.n	800c568 <VL53L0X_StartMeasurement+0xf8>
 800c4fa:	2b03      	cmp	r3, #3
 800c4fc:	d04e      	beq.n	800c59c <VL53L0X_StartMeasurement+0x12c>
 800c4fe:	2b00      	cmp	r3, #0
 800c500:	d166      	bne.n	800c5d0 <VL53L0X_StartMeasurement+0x160>
  case VL53L0X_DEVICEMODE_SINGLE_RANGING:
    Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x01);
 800c502:	2201      	movs	r2, #1
 800c504:	2100      	movs	r1, #0
 800c506:	6878      	ldr	r0, [r7, #4]
 800c508:	f003 fd0b 	bl	800ff22 <VL53L0X_WrByte>
 800c50c:	4603      	mov	r3, r0
 800c50e:	75fb      	strb	r3, [r7, #23]

    Byte = StartStopByte;
 800c510:	7bfb      	ldrb	r3, [r7, #15]
 800c512:	737b      	strb	r3, [r7, #13]
    if (Status == VL53L0X_ERROR_NONE) {
 800c514:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c518:	2b00      	cmp	r3, #0
 800c51a:	d15c      	bne.n	800c5d6 <VL53L0X_StartMeasurement+0x166>
      /* Wait until start bit has been cleared */
      LoopNb = 0;
 800c51c:	2300      	movs	r3, #0
 800c51e:	613b      	str	r3, [r7, #16]
      do {
        if (LoopNb > 0)
 800c520:	693b      	ldr	r3, [r7, #16]
 800c522:	2b00      	cmp	r3, #0
 800c524:	d008      	beq.n	800c538 <VL53L0X_StartMeasurement+0xc8>
          Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSRANGE_START, &Byte);
 800c526:	f107 030d 	add.w	r3, r7, #13
 800c52a:	461a      	mov	r2, r3
 800c52c:	2100      	movs	r1, #0
 800c52e:	6878      	ldr	r0, [r7, #4]
 800c530:	f003 fd7d 	bl	801002e <VL53L0X_RdByte>
 800c534:	4603      	mov	r3, r0
 800c536:	75fb      	strb	r3, [r7, #23]
        LoopNb = LoopNb + 1;
 800c538:	693b      	ldr	r3, [r7, #16]
 800c53a:	3301      	adds	r3, #1
 800c53c:	613b      	str	r3, [r7, #16]
      } while (((Byte & StartStopByte) == StartStopByte) &&
 800c53e:	7b7a      	ldrb	r2, [r7, #13]
 800c540:	7bfb      	ldrb	r3, [r7, #15]
 800c542:	4013      	ands	r3, r2
 800c544:	b2db      	uxtb	r3, r3
               (Status == VL53L0X_ERROR_NONE) &&
 800c546:	7bfa      	ldrb	r2, [r7, #15]
 800c548:	429a      	cmp	r2, r3
 800c54a:	d107      	bne.n	800c55c <VL53L0X_StartMeasurement+0xec>
      } while (((Byte & StartStopByte) == StartStopByte) &&
 800c54c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c550:	2b00      	cmp	r3, #0
 800c552:	d103      	bne.n	800c55c <VL53L0X_StartMeasurement+0xec>
               (Status == VL53L0X_ERROR_NONE) &&
 800c554:	693b      	ldr	r3, [r7, #16]
 800c556:	2bc7      	cmp	r3, #199	; 0xc7
 800c558:	d800      	bhi.n	800c55c <VL53L0X_StartMeasurement+0xec>
      do {
 800c55a:	e7e1      	b.n	800c520 <VL53L0X_StartMeasurement+0xb0>
               (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));

      if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 800c55c:	693b      	ldr	r3, [r7, #16]
 800c55e:	2bc7      	cmp	r3, #199	; 0xc7
 800c560:	d939      	bls.n	800c5d6 <VL53L0X_StartMeasurement+0x166>
        Status = VL53L0X_ERROR_TIME_OUT;
 800c562:	23f9      	movs	r3, #249	; 0xf9
 800c564:	75fb      	strb	r3, [r7, #23]
    }

    break;
 800c566:	e036      	b.n	800c5d6 <VL53L0X_StartMeasurement+0x166>
  case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
    /* Back-to-back mode */

    /* Check if need to apply interrupt settings */
    if (Status == VL53L0X_ERROR_NONE)
 800c568:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c56c:	2b00      	cmp	r3, #0
 800c56e:	d105      	bne.n	800c57c <VL53L0X_StartMeasurement+0x10c>
      Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 800c570:	2101      	movs	r1, #1
 800c572:	6878      	ldr	r0, [r7, #4]
 800c574:	f7ff ff16 	bl	800c3a4 <_Z37VL53L0X_CheckAndLoadInterruptSettingsP13VL53L0X_Dev_th>
 800c578:	4603      	mov	r3, r0
 800c57a:	75fb      	strb	r3, [r7, #23]

    Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START,
 800c57c:	2202      	movs	r2, #2
 800c57e:	2100      	movs	r1, #0
 800c580:	6878      	ldr	r0, [r7, #4]
 800c582:	f003 fcce 	bl	800ff22 <VL53L0X_WrByte>
 800c586:	4603      	mov	r3, r0
 800c588:	75fb      	strb	r3, [r7, #23]
                            VL53L0X_REG_SYSRANGE_MODE_BACKTOBACK);
    if (Status == VL53L0X_ERROR_NONE) {
 800c58a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c58e:	2b00      	cmp	r3, #0
 800c590:	d123      	bne.n	800c5da <VL53L0X_StartMeasurement+0x16a>
      /* Set PAL State to Running */
      PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	2204      	movs	r2, #4
 800c596:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
    }
    break;
 800c59a:	e01e      	b.n	800c5da <VL53L0X_StartMeasurement+0x16a>
  case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
    /* Continuous mode */
    /* Check if need to apply interrupt settings */
    if (Status == VL53L0X_ERROR_NONE)
 800c59c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c5a0:	2b00      	cmp	r3, #0
 800c5a2:	d105      	bne.n	800c5b0 <VL53L0X_StartMeasurement+0x140>
      Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 800c5a4:	2101      	movs	r1, #1
 800c5a6:	6878      	ldr	r0, [r7, #4]
 800c5a8:	f7ff fefc 	bl	800c3a4 <_Z37VL53L0X_CheckAndLoadInterruptSettingsP13VL53L0X_Dev_th>
 800c5ac:	4603      	mov	r3, r0
 800c5ae:	75fb      	strb	r3, [r7, #23]

    Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START,
 800c5b0:	2204      	movs	r2, #4
 800c5b2:	2100      	movs	r1, #0
 800c5b4:	6878      	ldr	r0, [r7, #4]
 800c5b6:	f003 fcb4 	bl	800ff22 <VL53L0X_WrByte>
 800c5ba:	4603      	mov	r3, r0
 800c5bc:	75fb      	strb	r3, [r7, #23]
                            VL53L0X_REG_SYSRANGE_MODE_TIMED);

    if (Status == VL53L0X_ERROR_NONE) {
 800c5be:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c5c2:	2b00      	cmp	r3, #0
 800c5c4:	d10b      	bne.n	800c5de <VL53L0X_StartMeasurement+0x16e>
      /* Set PAL State to Running */
      PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	2204      	movs	r2, #4
 800c5ca:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
    }
    break;
 800c5ce:	e006      	b.n	800c5de <VL53L0X_StartMeasurement+0x16e>
  default:
    /* Selected mode not supported */
    Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 800c5d0:	23f8      	movs	r3, #248	; 0xf8
 800c5d2:	75fb      	strb	r3, [r7, #23]
 800c5d4:	e004      	b.n	800c5e0 <VL53L0X_StartMeasurement+0x170>
    break;
 800c5d6:	bf00      	nop
 800c5d8:	e002      	b.n	800c5e0 <VL53L0X_StartMeasurement+0x170>
    break;
 800c5da:	bf00      	nop
 800c5dc:	e000      	b.n	800c5e0 <VL53L0X_StartMeasurement+0x170>
    break;
 800c5de:	bf00      	nop
  }

  LOG_FUNCTION_END(Status);
  return Status;
 800c5e0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c5e4:	4618      	mov	r0, r3
 800c5e6:	3718      	adds	r7, #24
 800c5e8:	46bd      	mov	sp, r7
 800c5ea:	bd80      	pop	{r7, pc}

0800c5ec <VL53L0X_GetMeasurementDataReady>:
  LOG_FUNCTION_END(Status);
  return Status;
}

VL53L0X_Error VL53L0X_GetMeasurementDataReady(VL53L0X_DEV Dev,
                                              uint8_t *pMeasurementDataReady) {
 800c5ec:	b580      	push	{r7, lr}
 800c5ee:	b084      	sub	sp, #16
 800c5f0:	af00      	add	r7, sp, #0
 800c5f2:	6078      	str	r0, [r7, #4]
 800c5f4:	6039      	str	r1, [r7, #0]
  VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c5f6:	2300      	movs	r3, #0
 800c5f8:	73fb      	strb	r3, [r7, #15]
  uint8_t SysRangeStatusRegister;
  uint8_t InterruptConfig;
  uint32_t InterruptMask;
  LOG_FUNCTION_START("");

  InterruptConfig =
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	f893 30da 	ldrb.w	r3, [r3, #218]	; 0xda
 800c600:	73bb      	strb	r3, [r7, #14]
      VL53L0X_GETDEVICESPECIFICPARAMETER(Dev, Pin0GpioFunctionality);

  if (InterruptConfig == VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY) {
 800c602:	7bbb      	ldrb	r3, [r7, #14]
 800c604:	2b04      	cmp	r3, #4
 800c606:	d112      	bne.n	800c62e <VL53L0X_GetMeasurementDataReady+0x42>
    Status = VL53L0X_GetInterruptMaskStatus(Dev, &InterruptMask);
 800c608:	f107 0308 	add.w	r3, r7, #8
 800c60c:	4619      	mov	r1, r3
 800c60e:	6878      	ldr	r0, [r7, #4]
 800c610:	f000 fb0d 	bl	800cc2e <VL53L0X_GetInterruptMaskStatus>
 800c614:	4603      	mov	r3, r0
 800c616:	73fb      	strb	r3, [r7, #15]
    if (InterruptMask == VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY)
 800c618:	68bb      	ldr	r3, [r7, #8]
 800c61a:	2b04      	cmp	r3, #4
 800c61c:	d103      	bne.n	800c626 <VL53L0X_GetMeasurementDataReady+0x3a>
      *pMeasurementDataReady = 1;
 800c61e:	683b      	ldr	r3, [r7, #0]
 800c620:	2201      	movs	r2, #1
 800c622:	701a      	strb	r2, [r3, #0]
 800c624:	e01c      	b.n	800c660 <VL53L0X_GetMeasurementDataReady+0x74>
    else
      *pMeasurementDataReady = 0;
 800c626:	683b      	ldr	r3, [r7, #0]
 800c628:	2200      	movs	r2, #0
 800c62a:	701a      	strb	r2, [r3, #0]
 800c62c:	e018      	b.n	800c660 <VL53L0X_GetMeasurementDataReady+0x74>
  } else {
    Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_RANGE_STATUS,
 800c62e:	f107 030d 	add.w	r3, r7, #13
 800c632:	461a      	mov	r2, r3
 800c634:	2114      	movs	r1, #20
 800c636:	6878      	ldr	r0, [r7, #4]
 800c638:	f003 fcf9 	bl	801002e <VL53L0X_RdByte>
 800c63c:	4603      	mov	r3, r0
 800c63e:	73fb      	strb	r3, [r7, #15]
                            &SysRangeStatusRegister);
    if (Status == VL53L0X_ERROR_NONE) {
 800c640:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c644:	2b00      	cmp	r3, #0
 800c646:	d10b      	bne.n	800c660 <VL53L0X_GetMeasurementDataReady+0x74>
      if (SysRangeStatusRegister & 0x01)
 800c648:	7b7b      	ldrb	r3, [r7, #13]
 800c64a:	f003 0301 	and.w	r3, r3, #1
 800c64e:	2b00      	cmp	r3, #0
 800c650:	d003      	beq.n	800c65a <VL53L0X_GetMeasurementDataReady+0x6e>
        *pMeasurementDataReady = 1;
 800c652:	683b      	ldr	r3, [r7, #0]
 800c654:	2201      	movs	r2, #1
 800c656:	701a      	strb	r2, [r3, #0]
 800c658:	e002      	b.n	800c660 <VL53L0X_GetMeasurementDataReady+0x74>
      else
        *pMeasurementDataReady = 0;
 800c65a:	683b      	ldr	r3, [r7, #0]
 800c65c:	2200      	movs	r2, #0
 800c65e:	701a      	strb	r2, [r3, #0]
    }
  }

  LOG_FUNCTION_END(Status);
  return Status;
 800c660:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c664:	4618      	mov	r0, r3
 800c666:	3710      	adds	r7, #16
 800c668:	46bd      	mov	sp, r7
 800c66a:	bd80      	pop	{r7, pc}

0800c66c <VL53L0X_GetRangingMeasurementData>:
  return Status;
}

VL53L0X_Error VL53L0X_GetRangingMeasurementData(
    VL53L0X_DEV Dev,
    VL53L0X_RangingMeasurementData_t *pRangingMeasurementData) {
 800c66c:	b5b0      	push	{r4, r5, r7, lr}
 800c66e:	b094      	sub	sp, #80	; 0x50
 800c670:	af02      	add	r7, sp, #8
 800c672:	6078      	str	r0, [r7, #4]
 800c674:	6039      	str	r1, [r7, #0]
  VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c676:	2300      	movs	r3, #0
 800c678:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
   * use multi read even if some registers are not useful, result will
   * be more efficient
   * start reading at 0x14 dec20
   * end reading at 0x21 dec33 total 14 bytes to read
   */
  Status = VL53L0X_ReadMulti(Dev, 0x14, localBuffer, 12);
 800c67c:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800c680:	230c      	movs	r3, #12
 800c682:	2114      	movs	r1, #20
 800c684:	6878      	ldr	r0, [r7, #4]
 800c686:	f003 fc23 	bl	800fed0 <VL53L0X_ReadMulti>
 800c68a:	4603      	mov	r3, r0
 800c68c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

  if (Status == VL53L0X_ERROR_NONE) {
 800c690:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800c694:	2b00      	cmp	r3, #0
 800c696:	f040 80c5 	bne.w	800c824 <VL53L0X_GetRangingMeasurementData+0x1b8>

    pRangingMeasurementData->ZoneId = 0;    /* Only one zone */
 800c69a:	683b      	ldr	r3, [r7, #0]
 800c69c:	2200      	movs	r2, #0
 800c69e:	759a      	strb	r2, [r3, #22]
    pRangingMeasurementData->TimeStamp = 0; /* Not Implemented */
 800c6a0:	683b      	ldr	r3, [r7, #0]
 800c6a2:	2200      	movs	r2, #0
 800c6a4:	601a      	str	r2, [r3, #0]

    tmpuint16 = VL53L0X_MAKEUINT16(localBuffer[11], localBuffer[10]);
 800c6a6:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800c6aa:	b29b      	uxth	r3, r3
 800c6ac:	021b      	lsls	r3, r3, #8
 800c6ae:	b29a      	uxth	r2, r3
 800c6b0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c6b4:	b29b      	uxth	r3, r3
 800c6b6:	4413      	add	r3, r2
 800c6b8:	b29b      	uxth	r3, r3
 800c6ba:	863b      	strh	r3, [r7, #48]	; 0x30
    /* cut1.1 if SYSTEM__RANGE_CONFIG if 1 range is 2bits fractional
     *(format 11.2) else no fractional
     */

    pRangingMeasurementData->MeasurementTimeUsec = 0;
 800c6bc:	683b      	ldr	r3, [r7, #0]
 800c6be:	2200      	movs	r2, #0
 800c6c0:	605a      	str	r2, [r3, #4]

    SignalRate = VL53L0X_FIXPOINT97TOFIXPOINT1616(
 800c6c2:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800c6c6:	b29b      	uxth	r3, r3
 800c6c8:	021b      	lsls	r3, r3, #8
 800c6ca:	b29a      	uxth	r2, r3
 800c6cc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800c6d0:	b29b      	uxth	r3, r3
 800c6d2:	4413      	add	r3, r2
 800c6d4:	b29b      	uxth	r3, r3
 800c6d6:	025b      	lsls	r3, r3, #9
 800c6d8:	643b      	str	r3, [r7, #64]	; 0x40
        VL53L0X_MAKEUINT16(localBuffer[7], localBuffer[6]));
    /* peak_signal_count_rate_rtn_mcps */
    pRangingMeasurementData->SignalRateRtnMegaCps = SignalRate;
 800c6da:	683b      	ldr	r3, [r7, #0]
 800c6dc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c6de:	60da      	str	r2, [r3, #12]

    AmbientRate = VL53L0X_MAKEUINT16(localBuffer[9], localBuffer[8]);
 800c6e0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800c6e4:	b29b      	uxth	r3, r3
 800c6e6:	021b      	lsls	r3, r3, #8
 800c6e8:	b29a      	uxth	r2, r3
 800c6ea:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800c6ee:	b29b      	uxth	r3, r3
 800c6f0:	4413      	add	r3, r2
 800c6f2:	87fb      	strh	r3, [r7, #62]	; 0x3e
    pRangingMeasurementData->AmbientRateRtnMegaCps =
        VL53L0X_FIXPOINT97TOFIXPOINT1616(AmbientRate);
 800c6f4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800c6f6:	025b      	lsls	r3, r3, #9
 800c6f8:	461a      	mov	r2, r3
    pRangingMeasurementData->AmbientRateRtnMegaCps =
 800c6fa:	683b      	ldr	r3, [r7, #0]
 800c6fc:	611a      	str	r2, [r3, #16]

    EffectiveSpadRtnCount = VL53L0X_MAKEUINT16(localBuffer[3], localBuffer[2]);
 800c6fe:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c702:	b29b      	uxth	r3, r3
 800c704:	021b      	lsls	r3, r3, #8
 800c706:	b29a      	uxth	r2, r3
 800c708:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c70c:	b29b      	uxth	r3, r3
 800c70e:	4413      	add	r3, r2
 800c710:	87bb      	strh	r3, [r7, #60]	; 0x3c
    /* EffectiveSpadRtnCount is 8.8 format */
    pRangingMeasurementData->EffectiveSpadRtnCount = EffectiveSpadRtnCount;
 800c712:	683b      	ldr	r3, [r7, #0]
 800c714:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 800c716:	829a      	strh	r2, [r3, #20]

    DeviceRangeStatus = localBuffer[0];
 800c718:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800c71c:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

    /* Get Linearity Corrective Gain */
    LinearityCorrectiveGain = PALDevDataGet(Dev, LinearityCorrectiveGain);
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	f8b3 3152 	ldrh.w	r3, [r3, #338]	; 0x152
 800c726:	873b      	strh	r3, [r7, #56]	; 0x38

    /* Get ranging configuration */
    RangeFractionalEnable = PALDevDataGet(Dev, RangeFractionalEnable);
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	f893 3131 	ldrb.w	r3, [r3, #305]	; 0x131
 800c72e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

    if (LinearityCorrectiveGain != 1000) {
 800c732:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800c734:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c738:	d043      	beq.n	800c7c2 <VL53L0X_GetRangingMeasurementData+0x156>

      tmpuint16 =
          (uint16_t)((LinearityCorrectiveGain * tmpuint16 + 500) / 1000);
 800c73a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800c73c:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 800c73e:	fb02 f303 	mul.w	r3, r2, r3
 800c742:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800c746:	4a54      	ldr	r2, [pc, #336]	; (800c898 <VL53L0X_GetRangingMeasurementData+0x22c>)
 800c748:	fb82 1203 	smull	r1, r2, r2, r3
 800c74c:	1192      	asrs	r2, r2, #6
 800c74e:	17db      	asrs	r3, r3, #31
 800c750:	1ad3      	subs	r3, r2, r3
      tmpuint16 =
 800c752:	b29b      	uxth	r3, r3
 800c754:	863b      	strh	r3, [r7, #48]	; 0x30

      /* Implement Xtalk */
      VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps,
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	6a1b      	ldr	r3, [r3, #32]
 800c75a:	86bb      	strh	r3, [r7, #52]	; 0x34
                                XTalkCompensationRateMegaCps);
      VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	7f1b      	ldrb	r3, [r3, #28]
 800c760:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
                                XTalkCompensationEnable);

      if (XTalkCompensationEnable) {
 800c764:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800c768:	2b00      	cmp	r3, #0
 800c76a:	d02a      	beq.n	800c7c2 <VL53L0X_GetRangingMeasurementData+0x156>

        if ((SignalRate -
             ((XTalkCompensationRateMegaCps * EffectiveSpadRtnCount) >> 8)) <=
 800c76c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800c76e:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 800c770:	fb02 f303 	mul.w	r3, r2, r3
 800c774:	121b      	asrs	r3, r3, #8
 800c776:	461a      	mov	r2, r3
        if ((SignalRate -
 800c778:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c77a:	4293      	cmp	r3, r2
 800c77c:	d10d      	bne.n	800c79a <VL53L0X_GetRangingMeasurementData+0x12e>
            0) {
          if (RangeFractionalEnable)
 800c77e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c782:	2b00      	cmp	r3, #0
 800c784:	d004      	beq.n	800c790 <VL53L0X_GetRangingMeasurementData+0x124>
            XtalkRangeMilliMeter = 8888;
 800c786:	f242 23b8 	movw	r3, #8888	; 0x22b8
 800c78a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800c78e:	e015      	b.n	800c7bc <VL53L0X_GetRangingMeasurementData+0x150>
          else
            XtalkRangeMilliMeter = 8888 << 2;
 800c790:	f648 23e0 	movw	r3, #35552	; 0x8ae0
 800c794:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800c798:	e010      	b.n	800c7bc <VL53L0X_GetRangingMeasurementData+0x150>
        } else {
          XtalkRangeMilliMeter =
              (tmpuint16 * SignalRate) /
 800c79a:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800c79c:	461a      	mov	r2, r3
 800c79e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c7a0:	fb03 f202 	mul.w	r2, r3, r2
              (SignalRate -
               ((XTalkCompensationRateMegaCps * EffectiveSpadRtnCount) >> 8));
 800c7a4:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800c7a6:	8fb9      	ldrh	r1, [r7, #60]	; 0x3c
 800c7a8:	fb01 f303 	mul.w	r3, r1, r3
 800c7ac:	121b      	asrs	r3, r3, #8
 800c7ae:	4619      	mov	r1, r3
              (SignalRate -
 800c7b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c7b2:	1a5b      	subs	r3, r3, r1
              (tmpuint16 * SignalRate) /
 800c7b4:	fbb2 f3f3 	udiv	r3, r2, r3
          XtalkRangeMilliMeter =
 800c7b8:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
        }

        tmpuint16 = XtalkRangeMilliMeter;
 800c7bc:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800c7c0:	863b      	strh	r3, [r7, #48]	; 0x30
      }
    }

    if (RangeFractionalEnable) {
 800c7c2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c7c6:	2b00      	cmp	r3, #0
 800c7c8:	d00a      	beq.n	800c7e0 <VL53L0X_GetRangingMeasurementData+0x174>
      pRangingMeasurementData->RangeMilliMeter = (uint16_t)((tmpuint16) >> 2);
 800c7ca:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800c7cc:	109b      	asrs	r3, r3, #2
 800c7ce:	b29a      	uxth	r2, r3
 800c7d0:	683b      	ldr	r3, [r7, #0]
 800c7d2:	811a      	strh	r2, [r3, #8]
      pRangingMeasurementData->RangeFractionalPart =
          (uint8_t)((tmpuint16 & 0x03) << 6);
 800c7d4:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800c7d6:	019b      	lsls	r3, r3, #6
      pRangingMeasurementData->RangeFractionalPart =
 800c7d8:	b2da      	uxtb	r2, r3
 800c7da:	683b      	ldr	r3, [r7, #0]
 800c7dc:	75da      	strb	r2, [r3, #23]
 800c7de:	e005      	b.n	800c7ec <VL53L0X_GetRangingMeasurementData+0x180>
    } else {
      pRangingMeasurementData->RangeMilliMeter = tmpuint16;
 800c7e0:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 800c7e2:	683b      	ldr	r3, [r7, #0]
 800c7e4:	811a      	strh	r2, [r3, #8]
      pRangingMeasurementData->RangeFractionalPart = 0;
 800c7e6:	683b      	ldr	r3, [r7, #0]
 800c7e8:	2200      	movs	r2, #0
 800c7ea:	75da      	strb	r2, [r3, #23]
     * For a standard definition of RangeStatus, this should
     * return 0 in case of good result after a ranging
     * The range status depends on the device so call a device
     * specific function to obtain the right Status.
     */
    Status |= VL53L0X_get_pal_range_status(
 800c7ec:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 800c7ee:	f897 103b 	ldrb.w	r1, [r7, #59]	; 0x3b
 800c7f2:	f107 0332 	add.w	r3, r7, #50	; 0x32
 800c7f6:	9301      	str	r3, [sp, #4]
 800c7f8:	683b      	ldr	r3, [r7, #0]
 800c7fa:	9300      	str	r3, [sp, #0]
 800c7fc:	4613      	mov	r3, r2
 800c7fe:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c800:	6878      	ldr	r0, [r7, #4]
 800c802:	f002 ff39 	bl	800f678 <VL53L0X_get_pal_range_status>
 800c806:	4603      	mov	r3, r0
 800c808:	461a      	mov	r2, r3
 800c80a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800c80e:	4313      	orrs	r3, r2
 800c810:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
        Dev, DeviceRangeStatus, SignalRate, EffectiveSpadRtnCount,
        pRangingMeasurementData, &PalRangeStatus);

    if (Status == VL53L0X_ERROR_NONE)
 800c814:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800c818:	2b00      	cmp	r3, #0
 800c81a:	d103      	bne.n	800c824 <VL53L0X_GetRangingMeasurementData+0x1b8>
      pRangingMeasurementData->RangeStatus = PalRangeStatus;
 800c81c:	f897 2032 	ldrb.w	r2, [r7, #50]	; 0x32
 800c820:	683b      	ldr	r3, [r7, #0]
 800c822:	761a      	strb	r2, [r3, #24]
  }

  if (Status == VL53L0X_ERROR_NONE) {
 800c824:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800c828:	2b00      	cmp	r3, #0
 800c82a:	d12e      	bne.n	800c88a <VL53L0X_GetRangingMeasurementData+0x21e>
    /* Copy last read data into Dev buffer */
    LastRangeDataBuffer = PALDevDataGet(Dev, LastRangeMeasure);
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	f107 0408 	add.w	r4, r7, #8
 800c832:	f103 0550 	add.w	r5, r3, #80	; 0x50
 800c836:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c838:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c83a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800c83e:	e884 0007 	stmia.w	r4, {r0, r1, r2}

    LastRangeDataBuffer.RangeMilliMeter =
        pRangingMeasurementData->RangeMilliMeter;
 800c842:	683b      	ldr	r3, [r7, #0]
 800c844:	891b      	ldrh	r3, [r3, #8]
    LastRangeDataBuffer.RangeMilliMeter =
 800c846:	823b      	strh	r3, [r7, #16]
    LastRangeDataBuffer.RangeFractionalPart =
        pRangingMeasurementData->RangeFractionalPart;
 800c848:	683b      	ldr	r3, [r7, #0]
 800c84a:	7ddb      	ldrb	r3, [r3, #23]
    LastRangeDataBuffer.RangeFractionalPart =
 800c84c:	77fb      	strb	r3, [r7, #31]
    LastRangeDataBuffer.RangeDMaxMilliMeter =
        pRangingMeasurementData->RangeDMaxMilliMeter;
 800c84e:	683b      	ldr	r3, [r7, #0]
 800c850:	895b      	ldrh	r3, [r3, #10]
    LastRangeDataBuffer.RangeDMaxMilliMeter =
 800c852:	827b      	strh	r3, [r7, #18]
    LastRangeDataBuffer.MeasurementTimeUsec =
        pRangingMeasurementData->MeasurementTimeUsec;
 800c854:	683b      	ldr	r3, [r7, #0]
 800c856:	685b      	ldr	r3, [r3, #4]
    LastRangeDataBuffer.MeasurementTimeUsec =
 800c858:	60fb      	str	r3, [r7, #12]
    LastRangeDataBuffer.SignalRateRtnMegaCps =
        pRangingMeasurementData->SignalRateRtnMegaCps;
 800c85a:	683b      	ldr	r3, [r7, #0]
 800c85c:	68db      	ldr	r3, [r3, #12]
    LastRangeDataBuffer.SignalRateRtnMegaCps =
 800c85e:	617b      	str	r3, [r7, #20]
    LastRangeDataBuffer.AmbientRateRtnMegaCps =
        pRangingMeasurementData->AmbientRateRtnMegaCps;
 800c860:	683b      	ldr	r3, [r7, #0]
 800c862:	691b      	ldr	r3, [r3, #16]
    LastRangeDataBuffer.AmbientRateRtnMegaCps =
 800c864:	61bb      	str	r3, [r7, #24]
    LastRangeDataBuffer.EffectiveSpadRtnCount =
        pRangingMeasurementData->EffectiveSpadRtnCount;
 800c866:	683b      	ldr	r3, [r7, #0]
 800c868:	8a9b      	ldrh	r3, [r3, #20]
    LastRangeDataBuffer.EffectiveSpadRtnCount =
 800c86a:	83bb      	strh	r3, [r7, #28]
    LastRangeDataBuffer.RangeStatus = pRangingMeasurementData->RangeStatus;
 800c86c:	683b      	ldr	r3, [r7, #0]
 800c86e:	7e1b      	ldrb	r3, [r3, #24]
 800c870:	f887 3020 	strb.w	r3, [r7, #32]

    PALDevDataSet(Dev, LastRangeMeasure, LastRangeDataBuffer);
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	f103 0450 	add.w	r4, r3, #80	; 0x50
 800c87a:	f107 0508 	add.w	r5, r7, #8
 800c87e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c880:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c882:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800c886:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  }

  LOG_FUNCTION_END(Status);
  return Status;
 800c88a:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
}
 800c88e:	4618      	mov	r0, r3
 800c890:	3748      	adds	r7, #72	; 0x48
 800c892:	46bd      	mov	sp, r7
 800c894:	bdb0      	pop	{r4, r5, r7, pc}
 800c896:	bf00      	nop
 800c898:	10624dd3 	.word	0x10624dd3

0800c89c <VL53L0X_PerformSingleRangingMeasurement>:
  return Status;
}

VL53L0X_Error VL53L0X_PerformSingleRangingMeasurement(
    VL53L0X_DEV Dev,
    VL53L0X_RangingMeasurementData_t *pRangingMeasurementData) {
 800c89c:	b580      	push	{r7, lr}
 800c89e:	b084      	sub	sp, #16
 800c8a0:	af00      	add	r7, sp, #0
 800c8a2:	6078      	str	r0, [r7, #4]
 800c8a4:	6039      	str	r1, [r7, #0]
  VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c8a6:	2300      	movs	r3, #0
 800c8a8:	73fb      	strb	r3, [r7, #15]

  LOG_FUNCTION_START("");

  /* This function will do a complete single ranging
   * Here we fix the mode! */
  Status = VL53L0X_SetDeviceMode(Dev, VL53L0X_DEVICEMODE_SINGLE_RANGING);
 800c8aa:	2100      	movs	r1, #0
 800c8ac:	6878      	ldr	r0, [r7, #4]
 800c8ae:	f7ff f81d 	bl	800b8ec <VL53L0X_SetDeviceMode>
 800c8b2:	4603      	mov	r3, r0
 800c8b4:	73fb      	strb	r3, [r7, #15]

  if (Status == VL53L0X_ERROR_NONE)
 800c8b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c8ba:	2b00      	cmp	r3, #0
 800c8bc:	d104      	bne.n	800c8c8 <VL53L0X_PerformSingleRangingMeasurement+0x2c>
    Status = VL53L0X_PerformSingleMeasurement(Dev);
 800c8be:	6878      	ldr	r0, [r7, #4]
 800c8c0:	f7ff fd26 	bl	800c310 <VL53L0X_PerformSingleMeasurement>
 800c8c4:	4603      	mov	r3, r0
 800c8c6:	73fb      	strb	r3, [r7, #15]

  if (Status == VL53L0X_ERROR_NONE)
 800c8c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c8cc:	2b00      	cmp	r3, #0
 800c8ce:	d105      	bne.n	800c8dc <VL53L0X_PerformSingleRangingMeasurement+0x40>
    Status = VL53L0X_GetRangingMeasurementData(Dev, pRangingMeasurementData);
 800c8d0:	6839      	ldr	r1, [r7, #0]
 800c8d2:	6878      	ldr	r0, [r7, #4]
 800c8d4:	f7ff feca 	bl	800c66c <VL53L0X_GetRangingMeasurementData>
 800c8d8:	4603      	mov	r3, r0
 800c8da:	73fb      	strb	r3, [r7, #15]

  if (Status == VL53L0X_ERROR_NONE)
 800c8dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c8e0:	2b00      	cmp	r3, #0
 800c8e2:	d105      	bne.n	800c8f0 <VL53L0X_PerformSingleRangingMeasurement+0x54>
    Status = VL53L0X_ClearInterruptMask(Dev, 0);
 800c8e4:	2100      	movs	r1, #0
 800c8e6:	6878      	ldr	r0, [r7, #4]
 800c8e8:	f000 f960 	bl	800cbac <VL53L0X_ClearInterruptMask>
 800c8ec:	4603      	mov	r3, r0
 800c8ee:	73fb      	strb	r3, [r7, #15]

  LOG_FUNCTION_END(Status);
  return Status;
 800c8f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c8f4:	4618      	mov	r0, r3
 800c8f6:	3710      	adds	r7, #16
 800c8f8:	46bd      	mov	sp, r7
 800c8fa:	bd80      	pop	{r7, pc}

0800c8fc <VL53L0X_SetGpioConfig>:
/* End Group PAL Measurement Functions */

VL53L0X_Error VL53L0X_SetGpioConfig(VL53L0X_DEV Dev, uint8_t Pin,
                                    VL53L0X_DeviceModes DeviceMode,
                                    VL53L0X_GpioFunctionality Functionality,
                                    VL53L0X_InterruptPolarity Polarity) {
 800c8fc:	b580      	push	{r7, lr}
 800c8fe:	b084      	sub	sp, #16
 800c900:	af00      	add	r7, sp, #0
 800c902:	6078      	str	r0, [r7, #4]
 800c904:	4608      	mov	r0, r1
 800c906:	4611      	mov	r1, r2
 800c908:	461a      	mov	r2, r3
 800c90a:	4603      	mov	r3, r0
 800c90c:	70fb      	strb	r3, [r7, #3]
 800c90e:	460b      	mov	r3, r1
 800c910:	70bb      	strb	r3, [r7, #2]
 800c912:	4613      	mov	r3, r2
 800c914:	707b      	strb	r3, [r7, #1]
  VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c916:	2300      	movs	r3, #0
 800c918:	73fb      	strb	r3, [r7, #15]
  uint8_t data;

  LOG_FUNCTION_START("");

  if (Pin != 0) {
 800c91a:	78fb      	ldrb	r3, [r7, #3]
 800c91c:	2b00      	cmp	r3, #0
 800c91e:	d002      	beq.n	800c926 <VL53L0X_SetGpioConfig+0x2a>
    Status = VL53L0X_ERROR_GPIO_NOT_EXISTING;
 800c920:	23f6      	movs	r3, #246	; 0xf6
 800c922:	73fb      	strb	r3, [r7, #15]
 800c924:	e105      	b.n	800cb32 <VL53L0X_SetGpioConfig+0x236>
  } else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_DRIVE) {
 800c926:	78bb      	ldrb	r3, [r7, #2]
 800c928:	2b14      	cmp	r3, #20
 800c92a:	d110      	bne.n	800c94e <VL53L0X_SetGpioConfig+0x52>
    if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 800c92c:	7e3b      	ldrb	r3, [r7, #24]
 800c92e:	2b00      	cmp	r3, #0
 800c930:	d102      	bne.n	800c938 <VL53L0X_SetGpioConfig+0x3c>
      data = 0x10;
 800c932:	2310      	movs	r3, #16
 800c934:	73bb      	strb	r3, [r7, #14]
 800c936:	e001      	b.n	800c93c <VL53L0X_SetGpioConfig+0x40>
    else
      data = 1;
 800c938:	2301      	movs	r3, #1
 800c93a:	73bb      	strb	r3, [r7, #14]

    Status = VL53L0X_WrByte(Dev, VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, data);
 800c93c:	7bbb      	ldrb	r3, [r7, #14]
 800c93e:	461a      	mov	r2, r3
 800c940:	2184      	movs	r1, #132	; 0x84
 800c942:	6878      	ldr	r0, [r7, #4]
 800c944:	f003 faed 	bl	800ff22 <VL53L0X_WrByte>
 800c948:	4603      	mov	r3, r0
 800c94a:	73fb      	strb	r3, [r7, #15]
 800c94c:	e0f1      	b.n	800cb32 <VL53L0X_SetGpioConfig+0x236>

  } else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_OSC) {
 800c94e:	78bb      	ldrb	r3, [r7, #2]
 800c950:	2b15      	cmp	r3, #21
 800c952:	f040 8097 	bne.w	800ca84 <VL53L0X_SetGpioConfig+0x188>

    Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800c956:	2201      	movs	r2, #1
 800c958:	21ff      	movs	r1, #255	; 0xff
 800c95a:	6878      	ldr	r0, [r7, #4]
 800c95c:	f003 fae1 	bl	800ff22 <VL53L0X_WrByte>
 800c960:	4603      	mov	r3, r0
 800c962:	461a      	mov	r2, r3
 800c964:	7bfb      	ldrb	r3, [r7, #15]
 800c966:	4313      	orrs	r3, r2
 800c968:	73fb      	strb	r3, [r7, #15]
    Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800c96a:	2200      	movs	r2, #0
 800c96c:	2100      	movs	r1, #0
 800c96e:	6878      	ldr	r0, [r7, #4]
 800c970:	f003 fad7 	bl	800ff22 <VL53L0X_WrByte>
 800c974:	4603      	mov	r3, r0
 800c976:	461a      	mov	r2, r3
 800c978:	7bfb      	ldrb	r3, [r7, #15]
 800c97a:	4313      	orrs	r3, r2
 800c97c:	73fb      	strb	r3, [r7, #15]

    Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800c97e:	2200      	movs	r2, #0
 800c980:	21ff      	movs	r1, #255	; 0xff
 800c982:	6878      	ldr	r0, [r7, #4]
 800c984:	f003 facd 	bl	800ff22 <VL53L0X_WrByte>
 800c988:	4603      	mov	r3, r0
 800c98a:	461a      	mov	r2, r3
 800c98c:	7bfb      	ldrb	r3, [r7, #15]
 800c98e:	4313      	orrs	r3, r2
 800c990:	73fb      	strb	r3, [r7, #15]
    Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 800c992:	2201      	movs	r2, #1
 800c994:	2180      	movs	r1, #128	; 0x80
 800c996:	6878      	ldr	r0, [r7, #4]
 800c998:	f003 fac3 	bl	800ff22 <VL53L0X_WrByte>
 800c99c:	4603      	mov	r3, r0
 800c99e:	461a      	mov	r2, r3
 800c9a0:	7bfb      	ldrb	r3, [r7, #15]
 800c9a2:	4313      	orrs	r3, r2
 800c9a4:	73fb      	strb	r3, [r7, #15]
    Status |= VL53L0X_WrByte(Dev, 0x85, 0x02);
 800c9a6:	2202      	movs	r2, #2
 800c9a8:	2185      	movs	r1, #133	; 0x85
 800c9aa:	6878      	ldr	r0, [r7, #4]
 800c9ac:	f003 fab9 	bl	800ff22 <VL53L0X_WrByte>
 800c9b0:	4603      	mov	r3, r0
 800c9b2:	461a      	mov	r2, r3
 800c9b4:	7bfb      	ldrb	r3, [r7, #15]
 800c9b6:	4313      	orrs	r3, r2
 800c9b8:	73fb      	strb	r3, [r7, #15]

    Status |= VL53L0X_WrByte(Dev, 0xff, 0x04);
 800c9ba:	2204      	movs	r2, #4
 800c9bc:	21ff      	movs	r1, #255	; 0xff
 800c9be:	6878      	ldr	r0, [r7, #4]
 800c9c0:	f003 faaf 	bl	800ff22 <VL53L0X_WrByte>
 800c9c4:	4603      	mov	r3, r0
 800c9c6:	461a      	mov	r2, r3
 800c9c8:	7bfb      	ldrb	r3, [r7, #15]
 800c9ca:	4313      	orrs	r3, r2
 800c9cc:	73fb      	strb	r3, [r7, #15]
    Status |= VL53L0X_WrByte(Dev, 0xcd, 0x00);
 800c9ce:	2200      	movs	r2, #0
 800c9d0:	21cd      	movs	r1, #205	; 0xcd
 800c9d2:	6878      	ldr	r0, [r7, #4]
 800c9d4:	f003 faa5 	bl	800ff22 <VL53L0X_WrByte>
 800c9d8:	4603      	mov	r3, r0
 800c9da:	461a      	mov	r2, r3
 800c9dc:	7bfb      	ldrb	r3, [r7, #15]
 800c9de:	4313      	orrs	r3, r2
 800c9e0:	73fb      	strb	r3, [r7, #15]
    Status |= VL53L0X_WrByte(Dev, 0xcc, 0x11);
 800c9e2:	2211      	movs	r2, #17
 800c9e4:	21cc      	movs	r1, #204	; 0xcc
 800c9e6:	6878      	ldr	r0, [r7, #4]
 800c9e8:	f003 fa9b 	bl	800ff22 <VL53L0X_WrByte>
 800c9ec:	4603      	mov	r3, r0
 800c9ee:	461a      	mov	r2, r3
 800c9f0:	7bfb      	ldrb	r3, [r7, #15]
 800c9f2:	4313      	orrs	r3, r2
 800c9f4:	73fb      	strb	r3, [r7, #15]

    Status |= VL53L0X_WrByte(Dev, 0xff, 0x07);
 800c9f6:	2207      	movs	r2, #7
 800c9f8:	21ff      	movs	r1, #255	; 0xff
 800c9fa:	6878      	ldr	r0, [r7, #4]
 800c9fc:	f003 fa91 	bl	800ff22 <VL53L0X_WrByte>
 800ca00:	4603      	mov	r3, r0
 800ca02:	461a      	mov	r2, r3
 800ca04:	7bfb      	ldrb	r3, [r7, #15]
 800ca06:	4313      	orrs	r3, r2
 800ca08:	73fb      	strb	r3, [r7, #15]
    Status |= VL53L0X_WrByte(Dev, 0xbe, 0x00);
 800ca0a:	2200      	movs	r2, #0
 800ca0c:	21be      	movs	r1, #190	; 0xbe
 800ca0e:	6878      	ldr	r0, [r7, #4]
 800ca10:	f003 fa87 	bl	800ff22 <VL53L0X_WrByte>
 800ca14:	4603      	mov	r3, r0
 800ca16:	461a      	mov	r2, r3
 800ca18:	7bfb      	ldrb	r3, [r7, #15]
 800ca1a:	4313      	orrs	r3, r2
 800ca1c:	73fb      	strb	r3, [r7, #15]

    Status |= VL53L0X_WrByte(Dev, 0xff, 0x06);
 800ca1e:	2206      	movs	r2, #6
 800ca20:	21ff      	movs	r1, #255	; 0xff
 800ca22:	6878      	ldr	r0, [r7, #4]
 800ca24:	f003 fa7d 	bl	800ff22 <VL53L0X_WrByte>
 800ca28:	4603      	mov	r3, r0
 800ca2a:	461a      	mov	r2, r3
 800ca2c:	7bfb      	ldrb	r3, [r7, #15]
 800ca2e:	4313      	orrs	r3, r2
 800ca30:	73fb      	strb	r3, [r7, #15]
    Status |= VL53L0X_WrByte(Dev, 0xcc, 0x09);
 800ca32:	2209      	movs	r2, #9
 800ca34:	21cc      	movs	r1, #204	; 0xcc
 800ca36:	6878      	ldr	r0, [r7, #4]
 800ca38:	f003 fa73 	bl	800ff22 <VL53L0X_WrByte>
 800ca3c:	4603      	mov	r3, r0
 800ca3e:	461a      	mov	r2, r3
 800ca40:	7bfb      	ldrb	r3, [r7, #15]
 800ca42:	4313      	orrs	r3, r2
 800ca44:	73fb      	strb	r3, [r7, #15]

    Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800ca46:	2200      	movs	r2, #0
 800ca48:	21ff      	movs	r1, #255	; 0xff
 800ca4a:	6878      	ldr	r0, [r7, #4]
 800ca4c:	f003 fa69 	bl	800ff22 <VL53L0X_WrByte>
 800ca50:	4603      	mov	r3, r0
 800ca52:	461a      	mov	r2, r3
 800ca54:	7bfb      	ldrb	r3, [r7, #15]
 800ca56:	4313      	orrs	r3, r2
 800ca58:	73fb      	strb	r3, [r7, #15]
    Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800ca5a:	2201      	movs	r2, #1
 800ca5c:	21ff      	movs	r1, #255	; 0xff
 800ca5e:	6878      	ldr	r0, [r7, #4]
 800ca60:	f003 fa5f 	bl	800ff22 <VL53L0X_WrByte>
 800ca64:	4603      	mov	r3, r0
 800ca66:	461a      	mov	r2, r3
 800ca68:	7bfb      	ldrb	r3, [r7, #15]
 800ca6a:	4313      	orrs	r3, r2
 800ca6c:	73fb      	strb	r3, [r7, #15]
    Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800ca6e:	2200      	movs	r2, #0
 800ca70:	2100      	movs	r1, #0
 800ca72:	6878      	ldr	r0, [r7, #4]
 800ca74:	f003 fa55 	bl	800ff22 <VL53L0X_WrByte>
 800ca78:	4603      	mov	r3, r0
 800ca7a:	461a      	mov	r2, r3
 800ca7c:	7bfb      	ldrb	r3, [r7, #15]
 800ca7e:	4313      	orrs	r3, r2
 800ca80:	73fb      	strb	r3, [r7, #15]
 800ca82:	e056      	b.n	800cb32 <VL53L0X_SetGpioConfig+0x236>

  } else {

    if (Status == VL53L0X_ERROR_NONE) {
 800ca84:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ca88:	2b00      	cmp	r3, #0
 800ca8a:	d120      	bne.n	800cace <VL53L0X_SetGpioConfig+0x1d2>
      switch (Functionality) {
 800ca8c:	787b      	ldrb	r3, [r7, #1]
 800ca8e:	2b04      	cmp	r3, #4
 800ca90:	d81b      	bhi.n	800caca <VL53L0X_SetGpioConfig+0x1ce>
 800ca92:	a201      	add	r2, pc, #4	; (adr r2, 800ca98 <VL53L0X_SetGpioConfig+0x19c>)
 800ca94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca98:	0800caad 	.word	0x0800caad
 800ca9c:	0800cab3 	.word	0x0800cab3
 800caa0:	0800cab9 	.word	0x0800cab9
 800caa4:	0800cabf 	.word	0x0800cabf
 800caa8:	0800cac5 	.word	0x0800cac5
      case VL53L0X_GPIOFUNCTIONALITY_OFF:
        data = 0x00;
 800caac:	2300      	movs	r3, #0
 800caae:	73bb      	strb	r3, [r7, #14]
        break;
 800cab0:	e00d      	b.n	800cace <VL53L0X_SetGpioConfig+0x1d2>
      case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW:
        data = 0x01;
 800cab2:	2301      	movs	r3, #1
 800cab4:	73bb      	strb	r3, [r7, #14]
        break;
 800cab6:	e00a      	b.n	800cace <VL53L0X_SetGpioConfig+0x1d2>
      case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH:
        data = 0x02;
 800cab8:	2302      	movs	r3, #2
 800caba:	73bb      	strb	r3, [r7, #14]
        break;
 800cabc:	e007      	b.n	800cace <VL53L0X_SetGpioConfig+0x1d2>
      case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT:
        data = 0x03;
 800cabe:	2303      	movs	r3, #3
 800cac0:	73bb      	strb	r3, [r7, #14]
        break;
 800cac2:	e004      	b.n	800cace <VL53L0X_SetGpioConfig+0x1d2>
      case VL53L0X_GPIOFUNCTIONALITY_NEW_MEASURE_READY:
        data = 0x04;
 800cac4:	2304      	movs	r3, #4
 800cac6:	73bb      	strb	r3, [r7, #14]
        break;
 800cac8:	e001      	b.n	800cace <VL53L0X_SetGpioConfig+0x1d2>
      default:
        Status = VL53L0X_ERROR_GPIO_FUNCTIONALITY_NOT_SUPPORTED;
 800caca:	23f5      	movs	r3, #245	; 0xf5
 800cacc:	73fb      	strb	r3, [r7, #15]
      }
    }

    if (Status == VL53L0X_ERROR_NONE)
 800cace:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cad2:	2b00      	cmp	r3, #0
 800cad4:	d107      	bne.n	800cae6 <VL53L0X_SetGpioConfig+0x1ea>
      Status =
 800cad6:	7bbb      	ldrb	r3, [r7, #14]
 800cad8:	461a      	mov	r2, r3
 800cada:	210a      	movs	r1, #10
 800cadc:	6878      	ldr	r0, [r7, #4]
 800cade:	f003 fa20 	bl	800ff22 <VL53L0X_WrByte>
 800cae2:	4603      	mov	r3, r0
 800cae4:	73fb      	strb	r3, [r7, #15]
          VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_INTERRUPT_CONFIG_GPIO, data);

    if (Status == VL53L0X_ERROR_NONE) {
 800cae6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800caea:	2b00      	cmp	r3, #0
 800caec:	d10f      	bne.n	800cb0e <VL53L0X_SetGpioConfig+0x212>
      if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 800caee:	7e3b      	ldrb	r3, [r7, #24]
 800caf0:	2b00      	cmp	r3, #0
 800caf2:	d102      	bne.n	800cafa <VL53L0X_SetGpioConfig+0x1fe>
        data = 0;
 800caf4:	2300      	movs	r3, #0
 800caf6:	73bb      	strb	r3, [r7, #14]
 800caf8:	e001      	b.n	800cafe <VL53L0X_SetGpioConfig+0x202>
      else
        data = (uint8_t)(1 << 4);
 800cafa:	2310      	movs	r3, #16
 800cafc:	73bb      	strb	r3, [r7, #14]

      Status = VL53L0X_UpdateByte(Dev, VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH,
 800cafe:	7bbb      	ldrb	r3, [r7, #14]
 800cb00:	22ef      	movs	r2, #239	; 0xef
 800cb02:	2184      	movs	r1, #132	; 0x84
 800cb04:	6878      	ldr	r0, [r7, #4]
 800cb06:	f003 fa50 	bl	800ffaa <VL53L0X_UpdateByte>
 800cb0a:	4603      	mov	r3, r0
 800cb0c:	73fb      	strb	r3, [r7, #15]
                                  0xEF, data);
    }

    if (Status == VL53L0X_ERROR_NONE)
 800cb0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cb12:	2b00      	cmp	r3, #0
 800cb14:	d103      	bne.n	800cb1e <VL53L0X_SetGpioConfig+0x222>
      VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, Pin0GpioFunctionality,
 800cb16:	787a      	ldrb	r2, [r7, #1]
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	f883 20da 	strb.w	r2, [r3, #218]	; 0xda
                                         Functionality);

    if (Status == VL53L0X_ERROR_NONE)
 800cb1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cb22:	2b00      	cmp	r3, #0
 800cb24:	d105      	bne.n	800cb32 <VL53L0X_SetGpioConfig+0x236>
      Status = VL53L0X_ClearInterruptMask(Dev, 0);
 800cb26:	2100      	movs	r1, #0
 800cb28:	6878      	ldr	r0, [r7, #4]
 800cb2a:	f000 f83f 	bl	800cbac <VL53L0X_ClearInterruptMask>
 800cb2e:	4603      	mov	r3, r0
 800cb30:	73fb      	strb	r3, [r7, #15]
  }

  LOG_FUNCTION_END(Status);
  return Status;
 800cb32:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800cb36:	4618      	mov	r0, r3
 800cb38:	3710      	adds	r7, #16
 800cb3a:	46bd      	mov	sp, r7
 800cb3c:	bd80      	pop	{r7, pc}
 800cb3e:	bf00      	nop

0800cb40 <VL53L0X_GetInterruptThresholds>:
}

VL53L0X_Error VL53L0X_GetInterruptThresholds(VL53L0X_DEV Dev,
                                             VL53L0X_DeviceModes DeviceMode,
                                             FixPoint1616_t *pThresholdLow,
                                             FixPoint1616_t *pThresholdHigh) {
 800cb40:	b580      	push	{r7, lr}
 800cb42:	b086      	sub	sp, #24
 800cb44:	af00      	add	r7, sp, #0
 800cb46:	60f8      	str	r0, [r7, #12]
 800cb48:	607a      	str	r2, [r7, #4]
 800cb4a:	603b      	str	r3, [r7, #0]
 800cb4c:	460b      	mov	r3, r1
 800cb4e:	72fb      	strb	r3, [r7, #11]
  VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800cb50:	2300      	movs	r3, #0
 800cb52:	75fb      	strb	r3, [r7, #23]
  uint16_t Threshold16;
  LOG_FUNCTION_START("");

  /* no dependency on DeviceMode for Ewok */

  Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_LOW, &Threshold16);
 800cb54:	f107 0314 	add.w	r3, r7, #20
 800cb58:	461a      	mov	r2, r3
 800cb5a:	210e      	movs	r1, #14
 800cb5c:	68f8      	ldr	r0, [r7, #12]
 800cb5e:	f003 fa87 	bl	8010070 <VL53L0X_RdWord>
 800cb62:	4603      	mov	r3, r0
 800cb64:	75fb      	strb	r3, [r7, #23]
  /* Need to multiply by 2 because the FW will apply a x2 */
  *pThresholdLow = (FixPoint1616_t)((0x00fff & Threshold16) << 17);
 800cb66:	8abb      	ldrh	r3, [r7, #20]
 800cb68:	045b      	lsls	r3, r3, #17
 800cb6a:	461a      	mov	r2, r3
 800cb6c:	4b0e      	ldr	r3, [pc, #56]	; (800cba8 <VL53L0X_GetInterruptThresholds+0x68>)
 800cb6e:	4013      	ands	r3, r2
 800cb70:	687a      	ldr	r2, [r7, #4]
 800cb72:	6013      	str	r3, [r2, #0]

  if (Status == VL53L0X_ERROR_NONE) {
 800cb74:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800cb78:	2b00      	cmp	r3, #0
 800cb7a:	d10f      	bne.n	800cb9c <VL53L0X_GetInterruptThresholds+0x5c>
    Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_HIGH, &Threshold16);
 800cb7c:	f107 0314 	add.w	r3, r7, #20
 800cb80:	461a      	mov	r2, r3
 800cb82:	210c      	movs	r1, #12
 800cb84:	68f8      	ldr	r0, [r7, #12]
 800cb86:	f003 fa73 	bl	8010070 <VL53L0X_RdWord>
 800cb8a:	4603      	mov	r3, r0
 800cb8c:	75fb      	strb	r3, [r7, #23]
    /* Need to multiply by 2 because the FW will apply a x2 */
    *pThresholdHigh = (FixPoint1616_t)((0x00fff & Threshold16) << 17);
 800cb8e:	8abb      	ldrh	r3, [r7, #20]
 800cb90:	045b      	lsls	r3, r3, #17
 800cb92:	461a      	mov	r2, r3
 800cb94:	4b04      	ldr	r3, [pc, #16]	; (800cba8 <VL53L0X_GetInterruptThresholds+0x68>)
 800cb96:	4013      	ands	r3, r2
 800cb98:	683a      	ldr	r2, [r7, #0]
 800cb9a:	6013      	str	r3, [r2, #0]
  }

  LOG_FUNCTION_END(Status);
  return Status;
 800cb9c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800cba0:	4618      	mov	r0, r3
 800cba2:	3718      	adds	r7, #24
 800cba4:	46bd      	mov	sp, r7
 800cba6:	bd80      	pop	{r7, pc}
 800cba8:	1ffe0000 	.word	0x1ffe0000

0800cbac <VL53L0X_ClearInterruptMask>:
  return Status;
}

/* Group PAL Interrupt Functions */
VL53L0X_Error VL53L0X_ClearInterruptMask(VL53L0X_DEV Dev,
                                         uint32_t InterruptMask) {
 800cbac:	b580      	push	{r7, lr}
 800cbae:	b084      	sub	sp, #16
 800cbb0:	af00      	add	r7, sp, #0
 800cbb2:	6078      	str	r0, [r7, #4]
 800cbb4:	6039      	str	r1, [r7, #0]
  VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800cbb6:	2300      	movs	r3, #0
 800cbb8:	73fb      	strb	r3, [r7, #15]
  uint8_t LoopCount;
  uint8_t Byte;
  LOG_FUNCTION_START("");

  /* clear bit 0 range interrupt, bit 1 error interrupt */
  LoopCount = 0;
 800cbba:	2300      	movs	r3, #0
 800cbbc:	73bb      	strb	r3, [r7, #14]
  do {
    Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x01);
 800cbbe:	2201      	movs	r2, #1
 800cbc0:	210b      	movs	r1, #11
 800cbc2:	6878      	ldr	r0, [r7, #4]
 800cbc4:	f003 f9ad 	bl	800ff22 <VL53L0X_WrByte>
 800cbc8:	4603      	mov	r3, r0
 800cbca:	73fb      	strb	r3, [r7, #15]
    Status |= VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x00);
 800cbcc:	2200      	movs	r2, #0
 800cbce:	210b      	movs	r1, #11
 800cbd0:	6878      	ldr	r0, [r7, #4]
 800cbd2:	f003 f9a6 	bl	800ff22 <VL53L0X_WrByte>
 800cbd6:	4603      	mov	r3, r0
 800cbd8:	461a      	mov	r2, r3
 800cbda:	7bfb      	ldrb	r3, [r7, #15]
 800cbdc:	4313      	orrs	r3, r2
 800cbde:	73fb      	strb	r3, [r7, #15]
    Status |= VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
 800cbe0:	f107 030d 	add.w	r3, r7, #13
 800cbe4:	461a      	mov	r2, r3
 800cbe6:	2113      	movs	r1, #19
 800cbe8:	6878      	ldr	r0, [r7, #4]
 800cbea:	f003 fa20 	bl	801002e <VL53L0X_RdByte>
 800cbee:	4603      	mov	r3, r0
 800cbf0:	461a      	mov	r2, r3
 800cbf2:	7bfb      	ldrb	r3, [r7, #15]
 800cbf4:	4313      	orrs	r3, r2
 800cbf6:	73fb      	strb	r3, [r7, #15]
    LoopCount++;
 800cbf8:	7bbb      	ldrb	r3, [r7, #14]
 800cbfa:	3301      	adds	r3, #1
 800cbfc:	73bb      	strb	r3, [r7, #14]
  } while (((Byte & 0x07) != 0x00) && (LoopCount < 3) &&
 800cbfe:	7b7b      	ldrb	r3, [r7, #13]
 800cc00:	f003 0307 	and.w	r3, r3, #7
 800cc04:	2b00      	cmp	r3, #0
 800cc06:	d007      	beq.n	800cc18 <VL53L0X_ClearInterruptMask+0x6c>
 800cc08:	7bbb      	ldrb	r3, [r7, #14]
 800cc0a:	2b02      	cmp	r3, #2
 800cc0c:	d804      	bhi.n	800cc18 <VL53L0X_ClearInterruptMask+0x6c>
 800cc0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cc12:	2b00      	cmp	r3, #0
 800cc14:	d100      	bne.n	800cc18 <VL53L0X_ClearInterruptMask+0x6c>
  do {
 800cc16:	e7d2      	b.n	800cbbe <VL53L0X_ClearInterruptMask+0x12>
           (Status == VL53L0X_ERROR_NONE));

  if (LoopCount >= 3)
 800cc18:	7bbb      	ldrb	r3, [r7, #14]
 800cc1a:	2b02      	cmp	r3, #2
 800cc1c:	d901      	bls.n	800cc22 <VL53L0X_ClearInterruptMask+0x76>
    Status = VL53L0X_ERROR_INTERRUPT_NOT_CLEARED;
 800cc1e:	23f4      	movs	r3, #244	; 0xf4
 800cc20:	73fb      	strb	r3, [r7, #15]

  LOG_FUNCTION_END(Status);
  return Status;
 800cc22:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800cc26:	4618      	mov	r0, r3
 800cc28:	3710      	adds	r7, #16
 800cc2a:	46bd      	mov	sp, r7
 800cc2c:	bd80      	pop	{r7, pc}

0800cc2e <VL53L0X_GetInterruptMaskStatus>:

VL53L0X_Error VL53L0X_GetInterruptMaskStatus(VL53L0X_DEV Dev,
                                             uint32_t *pInterruptMaskStatus) {
 800cc2e:	b580      	push	{r7, lr}
 800cc30:	b084      	sub	sp, #16
 800cc32:	af00      	add	r7, sp, #0
 800cc34:	6078      	str	r0, [r7, #4]
 800cc36:	6039      	str	r1, [r7, #0]
  VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800cc38:	2300      	movs	r3, #0
 800cc3a:	73fb      	strb	r3, [r7, #15]
  uint8_t Byte;
  LOG_FUNCTION_START("");

  Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
 800cc3c:	f107 030e 	add.w	r3, r7, #14
 800cc40:	461a      	mov	r2, r3
 800cc42:	2113      	movs	r1, #19
 800cc44:	6878      	ldr	r0, [r7, #4]
 800cc46:	f003 f9f2 	bl	801002e <VL53L0X_RdByte>
 800cc4a:	4603      	mov	r3, r0
 800cc4c:	73fb      	strb	r3, [r7, #15]
  *pInterruptMaskStatus = Byte & 0x07;
 800cc4e:	7bbb      	ldrb	r3, [r7, #14]
 800cc50:	f003 0207 	and.w	r2, r3, #7
 800cc54:	683b      	ldr	r3, [r7, #0]
 800cc56:	601a      	str	r2, [r3, #0]

  if (Byte & 0x18)
 800cc58:	7bbb      	ldrb	r3, [r7, #14]
 800cc5a:	f003 0318 	and.w	r3, r3, #24
 800cc5e:	2b00      	cmp	r3, #0
 800cc60:	d001      	beq.n	800cc66 <VL53L0X_GetInterruptMaskStatus+0x38>
    Status = VL53L0X_ERROR_RANGE_ERROR;
 800cc62:	23fa      	movs	r3, #250	; 0xfa
 800cc64:	73fb      	strb	r3, [r7, #15]

  LOG_FUNCTION_END(Status);
  return Status;
 800cc66:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800cc6a:	4618      	mov	r0, r3
 800cc6c:	3710      	adds	r7, #16
 800cc6e:	46bd      	mov	sp, r7
 800cc70:	bd80      	pop	{r7, pc}

0800cc72 <VL53L0X_PerformRefSpadManagement>:
  return Status;
}

VL53L0X_Error VL53L0X_PerformRefSpadManagement(VL53L0X_DEV Dev,
                                               uint32_t *refSpadCount,
                                               uint8_t *isApertureSpads) {
 800cc72:	b580      	push	{r7, lr}
 800cc74:	b086      	sub	sp, #24
 800cc76:	af00      	add	r7, sp, #0
 800cc78:	60f8      	str	r0, [r7, #12]
 800cc7a:	60b9      	str	r1, [r7, #8]
 800cc7c:	607a      	str	r2, [r7, #4]
  VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800cc7e:	2300      	movs	r3, #0
 800cc80:	75fb      	strb	r3, [r7, #23]
  LOG_FUNCTION_START("");

  Status =
 800cc82:	687a      	ldr	r2, [r7, #4]
 800cc84:	68b9      	ldr	r1, [r7, #8]
 800cc86:	68f8      	ldr	r0, [r7, #12]
 800cc88:	f000 fa05 	bl	800d096 <VL53L0X_perform_ref_spad_management>
 800cc8c:	4603      	mov	r3, r0
 800cc8e:	75fb      	strb	r3, [r7, #23]
      VL53L0X_perform_ref_spad_management(Dev, refSpadCount, isApertureSpads);

  LOG_FUNCTION_END(Status);

  return Status;
 800cc90:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800cc94:	4618      	mov	r0, r3
 800cc96:	3718      	adds	r7, #24
 800cc98:	46bd      	mov	sp, r7
 800cc9a:	bd80      	pop	{r7, pc}

0800cc9c <VL53L0X_get_offset_calibration_data_micro_meter>:
  LOG_FUNCTION_END(Status);
  return Status;
}

VL53L0X_Error VL53L0X_get_offset_calibration_data_micro_meter(
    VL53L0X_DEV Dev, int32_t *pOffsetCalibrationDataMicroMeter) {
 800cc9c:	b580      	push	{r7, lr}
 800cc9e:	b084      	sub	sp, #16
 800cca0:	af00      	add	r7, sp, #0
 800cca2:	6078      	str	r0, [r7, #4]
 800cca4:	6039      	str	r1, [r7, #0]
  VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800cca6:	2300      	movs	r3, #0
 800cca8:	73fb      	strb	r3, [r7, #15]
  uint16_t RangeOffsetRegister;
  int16_t cMaxOffset = 2047;
 800ccaa:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800ccae:	81bb      	strh	r3, [r7, #12]
  int16_t cOffsetRange = 4096;
 800ccb0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ccb4:	817b      	strh	r3, [r7, #10]

  /* Note that offset has 10.2 format */

  Status = VL53L0X_RdWord(Dev, VL53L0X_REG_ALGO_PART_TO_PART_RANGE_OFFSET_MM,
 800ccb6:	f107 0308 	add.w	r3, r7, #8
 800ccba:	461a      	mov	r2, r3
 800ccbc:	2128      	movs	r1, #40	; 0x28
 800ccbe:	6878      	ldr	r0, [r7, #4]
 800ccc0:	f003 f9d6 	bl	8010070 <VL53L0X_RdWord>
 800ccc4:	4603      	mov	r3, r0
 800ccc6:	73fb      	strb	r3, [r7, #15]
                          &RangeOffsetRegister);

  if (Status == VL53L0X_ERROR_NONE) {
 800ccc8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cccc:	2b00      	cmp	r3, #0
 800ccce:	d11e      	bne.n	800cd0e <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
    RangeOffsetRegister = (RangeOffsetRegister & 0x0fff);
 800ccd0:	893b      	ldrh	r3, [r7, #8]
 800ccd2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ccd6:	b29b      	uxth	r3, r3
 800ccd8:	813b      	strh	r3, [r7, #8]

    /* Apply 12 bit 2's compliment conversion */
    if (RangeOffsetRegister > cMaxOffset)
 800ccda:	893b      	ldrh	r3, [r7, #8]
 800ccdc:	461a      	mov	r2, r3
 800ccde:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800cce2:	429a      	cmp	r2, r3
 800cce4:	dd0b      	ble.n	800ccfe <VL53L0X_get_offset_calibration_data_micro_meter+0x62>
      *pOffsetCalibrationDataMicroMeter =
          (int16_t)(RangeOffsetRegister - cOffsetRange) * 250;
 800cce6:	893a      	ldrh	r2, [r7, #8]
 800cce8:	897b      	ldrh	r3, [r7, #10]
 800ccea:	1ad3      	subs	r3, r2, r3
 800ccec:	b29b      	uxth	r3, r3
 800ccee:	b21b      	sxth	r3, r3
 800ccf0:	461a      	mov	r2, r3
 800ccf2:	23fa      	movs	r3, #250	; 0xfa
 800ccf4:	fb03 f202 	mul.w	r2, r3, r2
      *pOffsetCalibrationDataMicroMeter =
 800ccf8:	683b      	ldr	r3, [r7, #0]
 800ccfa:	601a      	str	r2, [r3, #0]
 800ccfc:	e007      	b.n	800cd0e <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
    else
      *pOffsetCalibrationDataMicroMeter = (int16_t)RangeOffsetRegister * 250;
 800ccfe:	893b      	ldrh	r3, [r7, #8]
 800cd00:	b21b      	sxth	r3, r3
 800cd02:	461a      	mov	r2, r3
 800cd04:	23fa      	movs	r3, #250	; 0xfa
 800cd06:	fb03 f202 	mul.w	r2, r3, r2
 800cd0a:	683b      	ldr	r3, [r7, #0]
 800cd0c:	601a      	str	r2, [r3, #0]
  }

  return Status;
 800cd0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800cd12:	4618      	mov	r0, r3
 800cd14:	3710      	adds	r7, #16
 800cd16:	46bd      	mov	sp, r7
 800cd18:	bd80      	pop	{r7, pc}

0800cd1a <_Z18get_next_good_spadPhmmPl>:

  return Status;
}

void get_next_good_spad(uint8_t goodSpadArray[], uint32_t size, uint32_t curr,
                        int32_t *next) {
 800cd1a:	b480      	push	{r7}
 800cd1c:	b08b      	sub	sp, #44	; 0x2c
 800cd1e:	af00      	add	r7, sp, #0
 800cd20:	60f8      	str	r0, [r7, #12]
 800cd22:	60b9      	str	r1, [r7, #8]
 800cd24:	607a      	str	r2, [r7, #4]
 800cd26:	603b      	str	r3, [r7, #0]
  uint32_t startIndex;
  uint32_t fineOffset;
  uint32_t cSpadsPerByte = 8;
 800cd28:	2308      	movs	r3, #8
 800cd2a:	61bb      	str	r3, [r7, #24]
  uint32_t coarseIndex;
  uint32_t fineIndex;
  uint8_t dataByte;
  uint8_t success = 0;
 800cd2c:	2300      	movs	r3, #0
 800cd2e:	77bb      	strb	r3, [r7, #30]
   *
   * The coarse index is the byte index of the array and the fine index is
   * the index of the bit within each byte.
   */

  *next = -1;
 800cd30:	683b      	ldr	r3, [r7, #0]
 800cd32:	f04f 32ff 	mov.w	r2, #4294967295
 800cd36:	601a      	str	r2, [r3, #0]

  startIndex = curr / cSpadsPerByte;
 800cd38:	687a      	ldr	r2, [r7, #4]
 800cd3a:	69bb      	ldr	r3, [r7, #24]
 800cd3c:	fbb2 f3f3 	udiv	r3, r2, r3
 800cd40:	617b      	str	r3, [r7, #20]
  fineOffset = curr % cSpadsPerByte;
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	69ba      	ldr	r2, [r7, #24]
 800cd46:	fbb3 f2f2 	udiv	r2, r3, r2
 800cd4a:	69b9      	ldr	r1, [r7, #24]
 800cd4c:	fb01 f202 	mul.w	r2, r1, r2
 800cd50:	1a9b      	subs	r3, r3, r2
 800cd52:	613b      	str	r3, [r7, #16]

  for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 800cd54:	697b      	ldr	r3, [r7, #20]
 800cd56:	627b      	str	r3, [r7, #36]	; 0x24
 800cd58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cd5a:	68bb      	ldr	r3, [r7, #8]
 800cd5c:	429a      	cmp	r2, r3
 800cd5e:	d234      	bcs.n	800cdca <_Z18get_next_good_spadPhmmPl+0xb0>
 800cd60:	7fbb      	ldrb	r3, [r7, #30]
 800cd62:	2b00      	cmp	r3, #0
 800cd64:	d131      	bne.n	800cdca <_Z18get_next_good_spadPhmmPl+0xb0>
       coarseIndex++) {
    fineIndex = 0;
 800cd66:	2300      	movs	r3, #0
 800cd68:	623b      	str	r3, [r7, #32]
    dataByte = goodSpadArray[coarseIndex];
 800cd6a:	68fa      	ldr	r2, [r7, #12]
 800cd6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd6e:	4413      	add	r3, r2
 800cd70:	781b      	ldrb	r3, [r3, #0]
 800cd72:	77fb      	strb	r3, [r7, #31]

    if (coarseIndex == startIndex) {
 800cd74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cd76:	697b      	ldr	r3, [r7, #20]
 800cd78:	429a      	cmp	r2, r3
 800cd7a:	d106      	bne.n	800cd8a <_Z18get_next_good_spadPhmmPl+0x70>
      /* locate the bit position of the provided current
       * spad bit before iterating */
      dataByte >>= fineOffset;
 800cd7c:	7ffa      	ldrb	r2, [r7, #31]
 800cd7e:	693b      	ldr	r3, [r7, #16]
 800cd80:	fa42 f303 	asr.w	r3, r2, r3
 800cd84:	77fb      	strb	r3, [r7, #31]
      fineIndex = fineOffset;
 800cd86:	693b      	ldr	r3, [r7, #16]
 800cd88:	623b      	str	r3, [r7, #32]
    }

    while (fineIndex < cSpadsPerByte) {
 800cd8a:	6a3a      	ldr	r2, [r7, #32]
 800cd8c:	69bb      	ldr	r3, [r7, #24]
 800cd8e:	429a      	cmp	r2, r3
 800cd90:	d217      	bcs.n	800cdc2 <_Z18get_next_good_spadPhmmPl+0xa8>
      if ((dataByte & 0x1) == 1) {
 800cd92:	7ffb      	ldrb	r3, [r7, #31]
 800cd94:	f003 0301 	and.w	r3, r3, #1
 800cd98:	2b00      	cmp	r3, #0
 800cd9a:	d00b      	beq.n	800cdb4 <_Z18get_next_good_spadPhmmPl+0x9a>
        success = 1;
 800cd9c:	2301      	movs	r3, #1
 800cd9e:	77bb      	strb	r3, [r7, #30]
        *next = coarseIndex * cSpadsPerByte + fineIndex;
 800cda0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cda2:	69ba      	ldr	r2, [r7, #24]
 800cda4:	fb02 f203 	mul.w	r2, r2, r3
 800cda8:	6a3b      	ldr	r3, [r7, #32]
 800cdaa:	4413      	add	r3, r2
 800cdac:	461a      	mov	r2, r3
 800cdae:	683b      	ldr	r3, [r7, #0]
 800cdb0:	601a      	str	r2, [r3, #0]
        break;
 800cdb2:	e006      	b.n	800cdc2 <_Z18get_next_good_spadPhmmPl+0xa8>
      }
      dataByte >>= 1;
 800cdb4:	7ffb      	ldrb	r3, [r7, #31]
 800cdb6:	105b      	asrs	r3, r3, #1
 800cdb8:	77fb      	strb	r3, [r7, #31]
      fineIndex++;
 800cdba:	6a3b      	ldr	r3, [r7, #32]
 800cdbc:	3301      	adds	r3, #1
 800cdbe:	623b      	str	r3, [r7, #32]
    while (fineIndex < cSpadsPerByte) {
 800cdc0:	e7e3      	b.n	800cd8a <_Z18get_next_good_spadPhmmPl+0x70>
  for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 800cdc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdc4:	3301      	adds	r3, #1
 800cdc6:	627b      	str	r3, [r7, #36]	; 0x24
 800cdc8:	e7c6      	b.n	800cd58 <_Z18get_next_good_spadPhmmPl+0x3e>
    }
  }
}
 800cdca:	bf00      	nop
 800cdcc:	372c      	adds	r7, #44	; 0x2c
 800cdce:	46bd      	mov	sp, r7
 800cdd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdd4:	4770      	bx	lr
	...

0800cdd8 <_Z11is_aperturem>:

uint8_t is_aperture(uint32_t spadIndex) {
 800cdd8:	b480      	push	{r7}
 800cdda:	b085      	sub	sp, #20
 800cddc:	af00      	add	r7, sp, #0
 800cdde:	6078      	str	r0, [r7, #4]
  /*
   * This function reports if a given spad index is an aperture SPAD by
   * deriving the quadrant.
   */
  uint32_t quadrant;
  uint8_t isAperture = 1;
 800cde0:	2301      	movs	r3, #1
 800cde2:	73fb      	strb	r3, [r7, #15]
  quadrant = spadIndex >> 6;
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	099b      	lsrs	r3, r3, #6
 800cde8:	60bb      	str	r3, [r7, #8]
  if (refArrayQuadrants[quadrant] == REF_ARRAY_SPAD_0)
 800cdea:	4a07      	ldr	r2, [pc, #28]	; (800ce08 <_Z11is_aperturem+0x30>)
 800cdec:	68bb      	ldr	r3, [r7, #8]
 800cdee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cdf2:	2b00      	cmp	r3, #0
 800cdf4:	d101      	bne.n	800cdfa <_Z11is_aperturem+0x22>
    isAperture = 0;
 800cdf6:	2300      	movs	r3, #0
 800cdf8:	73fb      	strb	r3, [r7, #15]

  return isAperture;
 800cdfa:	7bfb      	ldrb	r3, [r7, #15]
}
 800cdfc:	4618      	mov	r0, r3
 800cdfe:	3714      	adds	r7, #20
 800ce00:	46bd      	mov	sp, r7
 800ce02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce06:	4770      	bx	lr
 800ce08:	24000344 	.word	0x24000344

0800ce0c <_Z15enable_spad_bitPhmm>:

VL53L0X_Error enable_spad_bit(uint8_t spadArray[], uint32_t size,
                              uint32_t spadIndex) {
 800ce0c:	b480      	push	{r7}
 800ce0e:	b089      	sub	sp, #36	; 0x24
 800ce10:	af00      	add	r7, sp, #0
 800ce12:	60f8      	str	r0, [r7, #12]
 800ce14:	60b9      	str	r1, [r7, #8]
 800ce16:	607a      	str	r2, [r7, #4]
  VL53L0X_Error status = VL53L0X_ERROR_NONE;
 800ce18:	2300      	movs	r3, #0
 800ce1a:	77fb      	strb	r3, [r7, #31]
  uint32_t cSpadsPerByte = 8;
 800ce1c:	2308      	movs	r3, #8
 800ce1e:	61bb      	str	r3, [r7, #24]
  uint32_t coarseIndex;
  uint32_t fineIndex;

  coarseIndex = spadIndex / cSpadsPerByte;
 800ce20:	687a      	ldr	r2, [r7, #4]
 800ce22:	69bb      	ldr	r3, [r7, #24]
 800ce24:	fbb2 f3f3 	udiv	r3, r2, r3
 800ce28:	617b      	str	r3, [r7, #20]
  fineIndex = spadIndex % cSpadsPerByte;
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	69ba      	ldr	r2, [r7, #24]
 800ce2e:	fbb3 f2f2 	udiv	r2, r3, r2
 800ce32:	69b9      	ldr	r1, [r7, #24]
 800ce34:	fb01 f202 	mul.w	r2, r1, r2
 800ce38:	1a9b      	subs	r3, r3, r2
 800ce3a:	613b      	str	r3, [r7, #16]
  if (coarseIndex >= size)
 800ce3c:	697a      	ldr	r2, [r7, #20]
 800ce3e:	68bb      	ldr	r3, [r7, #8]
 800ce40:	429a      	cmp	r2, r3
 800ce42:	d302      	bcc.n	800ce4a <_Z15enable_spad_bitPhmm+0x3e>
    status = VL53L0X_ERROR_REF_SPAD_INIT;
 800ce44:	23ce      	movs	r3, #206	; 0xce
 800ce46:	77fb      	strb	r3, [r7, #31]
 800ce48:	e010      	b.n	800ce6c <_Z15enable_spad_bitPhmm+0x60>
  else
    spadArray[coarseIndex] |= (1 << fineIndex);
 800ce4a:	68fa      	ldr	r2, [r7, #12]
 800ce4c:	697b      	ldr	r3, [r7, #20]
 800ce4e:	4413      	add	r3, r2
 800ce50:	781b      	ldrb	r3, [r3, #0]
 800ce52:	b25a      	sxtb	r2, r3
 800ce54:	2101      	movs	r1, #1
 800ce56:	693b      	ldr	r3, [r7, #16]
 800ce58:	fa01 f303 	lsl.w	r3, r1, r3
 800ce5c:	b25b      	sxtb	r3, r3
 800ce5e:	4313      	orrs	r3, r2
 800ce60:	b259      	sxtb	r1, r3
 800ce62:	68fa      	ldr	r2, [r7, #12]
 800ce64:	697b      	ldr	r3, [r7, #20]
 800ce66:	4413      	add	r3, r2
 800ce68:	b2ca      	uxtb	r2, r1
 800ce6a:	701a      	strb	r2, [r3, #0]

  return status;
 800ce6c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800ce70:	4618      	mov	r0, r3
 800ce72:	3724      	adds	r7, #36	; 0x24
 800ce74:	46bd      	mov	sp, r7
 800ce76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce7a:	4770      	bx	lr

0800ce7c <_Z16set_ref_spad_mapP13VL53L0X_Dev_tPh>:
  }

  return status;
}

VL53L0X_Error set_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray) {
 800ce7c:	b580      	push	{r7, lr}
 800ce7e:	b084      	sub	sp, #16
 800ce80:	af00      	add	r7, sp, #0
 800ce82:	6078      	str	r0, [r7, #4]
 800ce84:	6039      	str	r1, [r7, #0]
  VL53L0X_Error status = VL53L0X_WriteMulti(
      Dev, VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0, refSpadArray, 6);
 800ce86:	2306      	movs	r3, #6
 800ce88:	683a      	ldr	r2, [r7, #0]
 800ce8a:	21b0      	movs	r1, #176	; 0xb0
 800ce8c:	6878      	ldr	r0, [r7, #4]
 800ce8e:	f002 fff4 	bl	800fe7a <VL53L0X_WriteMulti>
 800ce92:	4603      	mov	r3, r0
 800ce94:	73fb      	strb	r3, [r7, #15]
  return status;
 800ce96:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ce9a:	4618      	mov	r0, r3
 800ce9c:	3710      	adds	r7, #16
 800ce9e:	46bd      	mov	sp, r7
 800cea0:	bd80      	pop	{r7, pc}

0800cea2 <_Z16get_ref_spad_mapP13VL53L0X_Dev_tPh>:

VL53L0X_Error get_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray) {
 800cea2:	b580      	push	{r7, lr}
 800cea4:	b084      	sub	sp, #16
 800cea6:	af00      	add	r7, sp, #0
 800cea8:	6078      	str	r0, [r7, #4]
 800ceaa:	6039      	str	r1, [r7, #0]
  VL53L0X_Error status = VL53L0X_ReadMulti(
      Dev, VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0, refSpadArray, 6);
 800ceac:	2306      	movs	r3, #6
 800ceae:	683a      	ldr	r2, [r7, #0]
 800ceb0:	21b0      	movs	r1, #176	; 0xb0
 800ceb2:	6878      	ldr	r0, [r7, #4]
 800ceb4:	f003 f80c 	bl	800fed0 <VL53L0X_ReadMulti>
 800ceb8:	4603      	mov	r3, r0
 800ceba:	73fb      	strb	r3, [r7, #15]
  return status;
 800cebc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800cec0:	4618      	mov	r0, r3
 800cec2:	3710      	adds	r7, #16
 800cec4:	46bd      	mov	sp, r7
 800cec6:	bd80      	pop	{r7, pc}

0800cec8 <_Z16enable_ref_spadsP13VL53L0X_Dev_thPhS1_mmmmPm>:

VL53L0X_Error enable_ref_spads(VL53L0X_DEV Dev, uint8_t apertureSpads,
                               uint8_t goodSpadArray[], uint8_t spadArray[],
                               uint32_t size, uint32_t start, uint32_t offset,
                               uint32_t spadCount, uint32_t *lastSpad) {
 800cec8:	b580      	push	{r7, lr}
 800ceca:	b08c      	sub	sp, #48	; 0x30
 800cecc:	af00      	add	r7, sp, #0
 800cece:	60f8      	str	r0, [r7, #12]
 800ced0:	607a      	str	r2, [r7, #4]
 800ced2:	603b      	str	r3, [r7, #0]
 800ced4:	460b      	mov	r3, r1
 800ced6:	72fb      	strb	r3, [r7, #11]
  VL53L0X_Error status = VL53L0X_ERROR_NONE;
 800ced8:	2300      	movs	r3, #0
 800ceda:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  uint32_t index;
  uint32_t i;
  int32_t nextGoodSpad = offset;
 800cede:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cee0:	61fb      	str	r3, [r7, #28]
   *
   * This function applies to only aperture or only non-aperture spads.
   * Checks are performed to ensure this.
   */

  currentSpad = offset;
 800cee2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cee4:	623b      	str	r3, [r7, #32]
  for (index = 0; index < spadCount; index++) {
 800cee6:	2300      	movs	r3, #0
 800cee8:	62bb      	str	r3, [r7, #40]	; 0x28
 800ceea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ceec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ceee:	429a      	cmp	r2, r3
 800cef0:	d231      	bcs.n	800cf56 <_Z16enable_ref_spadsP13VL53L0X_Dev_thPhS1_mmmmPm+0x8e>
    get_next_good_spad(goodSpadArray, size, currentSpad, &nextGoodSpad);
 800cef2:	f107 031c 	add.w	r3, r7, #28
 800cef6:	6a3a      	ldr	r2, [r7, #32]
 800cef8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800cefa:	6878      	ldr	r0, [r7, #4]
 800cefc:	f7ff ff0d 	bl	800cd1a <_Z18get_next_good_spadPhmmPl>

    if (nextGoodSpad == -1) {
 800cf00:	69fb      	ldr	r3, [r7, #28]
 800cf02:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cf06:	d103      	bne.n	800cf10 <_Z16enable_ref_spadsP13VL53L0X_Dev_thPhS1_mmmmPm+0x48>
      status = VL53L0X_ERROR_REF_SPAD_INIT;
 800cf08:	23ce      	movs	r3, #206	; 0xce
 800cf0a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      break;
 800cf0e:	e022      	b.n	800cf56 <_Z16enable_ref_spadsP13VL53L0X_Dev_thPhS1_mmmmPm+0x8e>
    }

    /* Confirm that the next good SPAD is non-aperture */
    if (is_aperture(start + nextGoodSpad) != apertureSpads) {
 800cf10:	69fb      	ldr	r3, [r7, #28]
 800cf12:	461a      	mov	r2, r3
 800cf14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cf16:	4413      	add	r3, r2
 800cf18:	4618      	mov	r0, r3
 800cf1a:	f7ff ff5d 	bl	800cdd8 <_Z11is_aperturem>
 800cf1e:	4603      	mov	r3, r0
 800cf20:	461a      	mov	r2, r3
 800cf22:	7afb      	ldrb	r3, [r7, #11]
 800cf24:	4293      	cmp	r3, r2
 800cf26:	bf14      	ite	ne
 800cf28:	2301      	movne	r3, #1
 800cf2a:	2300      	moveq	r3, #0
 800cf2c:	b2db      	uxtb	r3, r3
 800cf2e:	2b00      	cmp	r3, #0
 800cf30:	d003      	beq.n	800cf3a <_Z16enable_ref_spadsP13VL53L0X_Dev_thPhS1_mmmmPm+0x72>
      /* if we can't get the required number of good aperture
       * spads from the current quadrant then this is an error
       */
      status = VL53L0X_ERROR_REF_SPAD_INIT;
 800cf32:	23ce      	movs	r3, #206	; 0xce
 800cf34:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      break;
 800cf38:	e00d      	b.n	800cf56 <_Z16enable_ref_spadsP13VL53L0X_Dev_thPhS1_mmmmPm+0x8e>
    }
    currentSpad = (uint32_t)nextGoodSpad;
 800cf3a:	69fb      	ldr	r3, [r7, #28]
 800cf3c:	623b      	str	r3, [r7, #32]
    enable_spad_bit(spadArray, size, currentSpad);
 800cf3e:	6a3a      	ldr	r2, [r7, #32]
 800cf40:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800cf42:	6838      	ldr	r0, [r7, #0]
 800cf44:	f7ff ff62 	bl	800ce0c <_Z15enable_spad_bitPhmm>
    currentSpad++;
 800cf48:	6a3b      	ldr	r3, [r7, #32]
 800cf4a:	3301      	adds	r3, #1
 800cf4c:	623b      	str	r3, [r7, #32]
  for (index = 0; index < spadCount; index++) {
 800cf4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf50:	3301      	adds	r3, #1
 800cf52:	62bb      	str	r3, [r7, #40]	; 0x28
 800cf54:	e7c9      	b.n	800ceea <_Z16enable_ref_spadsP13VL53L0X_Dev_thPhS1_mmmmPm+0x22>
  }
  *lastSpad = currentSpad;
 800cf56:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cf58:	6a3a      	ldr	r2, [r7, #32]
 800cf5a:	601a      	str	r2, [r3, #0]

  if (status == VL53L0X_ERROR_NONE)
 800cf5c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800cf60:	2b00      	cmp	r3, #0
 800cf62:	d106      	bne.n	800cf72 <_Z16enable_ref_spadsP13VL53L0X_Dev_thPhS1_mmmmPm+0xaa>
    status = set_ref_spad_map(Dev, spadArray);
 800cf64:	6839      	ldr	r1, [r7, #0]
 800cf66:	68f8      	ldr	r0, [r7, #12]
 800cf68:	f7ff ff88 	bl	800ce7c <_Z16set_ref_spad_mapP13VL53L0X_Dev_tPh>
 800cf6c:	4603      	mov	r3, r0
 800cf6e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  if (status == VL53L0X_ERROR_NONE) {
 800cf72:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800cf76:	2b00      	cmp	r3, #0
 800cf78:	d121      	bne.n	800cfbe <_Z16enable_ref_spadsP13VL53L0X_Dev_thPhS1_mmmmPm+0xf6>
    status = get_ref_spad_map(Dev, checkSpadArray);
 800cf7a:	f107 0314 	add.w	r3, r7, #20
 800cf7e:	4619      	mov	r1, r3
 800cf80:	68f8      	ldr	r0, [r7, #12]
 800cf82:	f7ff ff8e 	bl	800cea2 <_Z16get_ref_spad_mapP13VL53L0X_Dev_tPh>
 800cf86:	4603      	mov	r3, r0
 800cf88:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    i = 0;
 800cf8c:	2300      	movs	r3, #0
 800cf8e:	627b      	str	r3, [r7, #36]	; 0x24

    /* Compare spad maps. If not equal report error. */
    while (i < size) {
 800cf90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cf92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf94:	429a      	cmp	r2, r3
 800cf96:	d212      	bcs.n	800cfbe <_Z16enable_ref_spadsP13VL53L0X_Dev_thPhS1_mmmmPm+0xf6>
      if (spadArray[i] != checkSpadArray[i]) {
 800cf98:	683a      	ldr	r2, [r7, #0]
 800cf9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf9c:	4413      	add	r3, r2
 800cf9e:	781a      	ldrb	r2, [r3, #0]
 800cfa0:	f107 0114 	add.w	r1, r7, #20
 800cfa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfa6:	440b      	add	r3, r1
 800cfa8:	781b      	ldrb	r3, [r3, #0]
 800cfaa:	429a      	cmp	r2, r3
 800cfac:	d003      	beq.n	800cfb6 <_Z16enable_ref_spadsP13VL53L0X_Dev_thPhS1_mmmmPm+0xee>
        status = VL53L0X_ERROR_REF_SPAD_INIT;
 800cfae:	23ce      	movs	r3, #206	; 0xce
 800cfb0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        break;
 800cfb4:	e003      	b.n	800cfbe <_Z16enable_ref_spadsP13VL53L0X_Dev_thPhS1_mmmmPm+0xf6>
      }
      i++;
 800cfb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfb8:	3301      	adds	r3, #1
 800cfba:	627b      	str	r3, [r7, #36]	; 0x24
    while (i < size) {
 800cfbc:	e7e8      	b.n	800cf90 <_Z16enable_ref_spadsP13VL53L0X_Dev_thPhS1_mmmmPm+0xc8>
    }
  }
  return status;
 800cfbe:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800cfc2:	4618      	mov	r0, r3
 800cfc4:	3730      	adds	r7, #48	; 0x30
 800cfc6:	46bd      	mov	sp, r7
 800cfc8:	bd80      	pop	{r7, pc}

0800cfca <_Z30perform_ref_signal_measurementP13VL53L0X_Dev_tPt>:

VL53L0X_Error perform_ref_signal_measurement(VL53L0X_DEV Dev,
                                             uint16_t *refSignalRate) {
 800cfca:	b580      	push	{r7, lr}
 800cfcc:	b08c      	sub	sp, #48	; 0x30
 800cfce:	af00      	add	r7, sp, #0
 800cfd0:	6078      	str	r0, [r7, #4]
 800cfd2:	6039      	str	r1, [r7, #0]
  VL53L0X_Error status = VL53L0X_ERROR_NONE;
 800cfd4:	2300      	movs	r3, #0
 800cfd6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  VL53L0X_RangingMeasurementData_t rangingMeasurementData;

  uint8_t SequenceConfig = 0;
 800cfda:	2300      	movs	r3, #0
 800cfdc:	73fb      	strb	r3, [r7, #15]

  /* store the value of the sequence config,
   * this will be reset before the end of the function
   */

  SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 800cfe4:	73fb      	strb	r3, [r7, #15]

  /*
   * This function performs a reference signal rate measurement.
   */
  if (status == VL53L0X_ERROR_NONE)
 800cfe6:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800cfea:	2b00      	cmp	r3, #0
 800cfec:	d107      	bne.n	800cffe <_Z30perform_ref_signal_measurementP13VL53L0X_Dev_tPt+0x34>
    status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0xC0);
 800cfee:	22c0      	movs	r2, #192	; 0xc0
 800cff0:	2101      	movs	r1, #1
 800cff2:	6878      	ldr	r0, [r7, #4]
 800cff4:	f002 ff95 	bl	800ff22 <VL53L0X_WrByte>
 800cff8:	4603      	mov	r3, r0
 800cffa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  if (status == VL53L0X_ERROR_NONE)
 800cffe:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800d002:	2b00      	cmp	r3, #0
 800d004:	d108      	bne.n	800d018 <_Z30perform_ref_signal_measurementP13VL53L0X_Dev_tPt+0x4e>
    status =
 800d006:	f107 0310 	add.w	r3, r7, #16
 800d00a:	4619      	mov	r1, r3
 800d00c:	6878      	ldr	r0, [r7, #4]
 800d00e:	f7ff fc45 	bl	800c89c <VL53L0X_PerformSingleRangingMeasurement>
 800d012:	4603      	mov	r3, r0
 800d014:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        VL53L0X_PerformSingleRangingMeasurement(Dev, &rangingMeasurementData);

  if (status == VL53L0X_ERROR_NONE)
 800d018:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800d01c:	2b00      	cmp	r3, #0
 800d01e:	d107      	bne.n	800d030 <_Z30perform_ref_signal_measurementP13VL53L0X_Dev_tPt+0x66>
    status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800d020:	2201      	movs	r2, #1
 800d022:	21ff      	movs	r1, #255	; 0xff
 800d024:	6878      	ldr	r0, [r7, #4]
 800d026:	f002 ff7c 	bl	800ff22 <VL53L0X_WrByte>
 800d02a:	4603      	mov	r3, r0
 800d02c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  if (status == VL53L0X_ERROR_NONE)
 800d030:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800d034:	2b00      	cmp	r3, #0
 800d036:	d107      	bne.n	800d048 <_Z30perform_ref_signal_measurementP13VL53L0X_Dev_tPt+0x7e>
    status = VL53L0X_RdWord(Dev, VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
 800d038:	683a      	ldr	r2, [r7, #0]
 800d03a:	21b6      	movs	r1, #182	; 0xb6
 800d03c:	6878      	ldr	r0, [r7, #4]
 800d03e:	f003 f817 	bl	8010070 <VL53L0X_RdWord>
 800d042:	4603      	mov	r3, r0
 800d044:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                            refSignalRate);

  if (status == VL53L0X_ERROR_NONE)
 800d048:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800d04c:	2b00      	cmp	r3, #0
 800d04e:	d107      	bne.n	800d060 <_Z30perform_ref_signal_measurementP13VL53L0X_Dev_tPt+0x96>
    status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800d050:	2200      	movs	r2, #0
 800d052:	21ff      	movs	r1, #255	; 0xff
 800d054:	6878      	ldr	r0, [r7, #4]
 800d056:	f002 ff64 	bl	800ff22 <VL53L0X_WrByte>
 800d05a:	4603      	mov	r3, r0
 800d05c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  if (status == VL53L0X_ERROR_NONE) {
 800d060:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800d064:	2b00      	cmp	r3, #0
 800d066:	d110      	bne.n	800d08a <_Z30perform_ref_signal_measurementP13VL53L0X_Dev_tPt+0xc0>
    /* restore the previous Sequence Config */
    status =
        VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, SequenceConfig);
 800d068:	7bfb      	ldrb	r3, [r7, #15]
    status =
 800d06a:	461a      	mov	r2, r3
 800d06c:	2101      	movs	r1, #1
 800d06e:	6878      	ldr	r0, [r7, #4]
 800d070:	f002 ff57 	bl	800ff22 <VL53L0X_WrByte>
 800d074:	4603      	mov	r3, r0
 800d076:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == VL53L0X_ERROR_NONE)
 800d07a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800d07e:	2b00      	cmp	r3, #0
 800d080:	d103      	bne.n	800d08a <_Z30perform_ref_signal_measurementP13VL53L0X_Dev_tPt+0xc0>
      PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 800d082:	7bfa      	ldrb	r2, [r7, #15]
 800d084:	687b      	ldr	r3, [r7, #4]
 800d086:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
  }

  return status;
 800d08a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800d08e:	4618      	mov	r0, r3
 800d090:	3730      	adds	r7, #48	; 0x30
 800d092:	46bd      	mov	sp, r7
 800d094:	bd80      	pop	{r7, pc}

0800d096 <VL53L0X_perform_ref_spad_management>:

VL53L0X_Error VL53L0X_perform_ref_spad_management(VL53L0X_DEV Dev,
                                                  uint32_t *refSpadCount,
                                                  uint8_t *isApertureSpads) {
 800d096:	b590      	push	{r4, r7, lr}
 800d098:	b09d      	sub	sp, #116	; 0x74
 800d09a:	af06      	add	r7, sp, #24
 800d09c:	60f8      	str	r0, [r7, #12]
 800d09e:	60b9      	str	r1, [r7, #8]
 800d0a0:	607a      	str	r2, [r7, #4]
  VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800d0a2:	2300      	movs	r3, #0
 800d0a4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
  uint8_t lastSpadArray[6];
  uint8_t startSelect = 0xB4;
 800d0a8:	23b4      	movs	r3, #180	; 0xb4
 800d0aa:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
  uint32_t minimumSpadCount = 3;
 800d0ae:	2303      	movs	r3, #3
 800d0b0:	63fb      	str	r3, [r7, #60]	; 0x3c
  uint32_t maxSpadCount = 44;
 800d0b2:	232c      	movs	r3, #44	; 0x2c
 800d0b4:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t currentSpadIndex = 0;
 800d0b6:	2300      	movs	r3, #0
 800d0b8:	653b      	str	r3, [r7, #80]	; 0x50
  uint32_t lastSpadIndex = 0;
 800d0ba:	2300      	movs	r3, #0
 800d0bc:	623b      	str	r3, [r7, #32]
  int32_t nextGoodSpad = 0;
 800d0be:	2300      	movs	r3, #0
 800d0c0:	61fb      	str	r3, [r7, #28]
  uint16_t targetRefRate = 0x0A00; /* 20 MCPS in 9:7 format */
 800d0c2:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 800d0c6:	86fb      	strh	r3, [r7, #54]	; 0x36
  uint16_t peakSignalRateRef;
  uint32_t needAptSpads = 0;
 800d0c8:	2300      	movs	r3, #0
 800d0ca:	64fb      	str	r3, [r7, #76]	; 0x4c
  uint32_t index = 0;
 800d0cc:	2300      	movs	r3, #0
 800d0ce:	64bb      	str	r3, [r7, #72]	; 0x48
  uint32_t spadArraySize = 6;
 800d0d0:	2306      	movs	r3, #6
 800d0d2:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t signalRateDiff = 0;
 800d0d4:	2300      	movs	r3, #0
 800d0d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t lastSignalRateDiff = 0;
 800d0d8:	2300      	movs	r3, #0
 800d0da:	647b      	str	r3, [r7, #68]	; 0x44
  uint8_t complete = 0;
 800d0dc:	2300      	movs	r3, #0
 800d0de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  uint8_t VhvSettings = 0;
 800d0e2:	2300      	movs	r3, #0
 800d0e4:	767b      	strb	r3, [r7, #25]
  uint8_t PhaseCal = 0;
 800d0e6:	2300      	movs	r3, #0
 800d0e8:	763b      	strb	r3, [r7, #24]
  uint32_t refSpadCount_int = 0;
 800d0ea:	2300      	movs	r3, #0
 800d0ec:	617b      	str	r3, [r7, #20]
  uint8_t isApertureSpads_int = 0;
 800d0ee:	2300      	movs	r3, #0
 800d0f0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
   * The start point is currently fixed to 180, which lies towards the end
   * of the non-aperture quadrant and runs in to the adjacent aperture
   * quadrant.
   */

  targetRefRate = PALDevDataGet(Dev, targetRefRate);
 800d0f4:	68fb      	ldr	r3, [r7, #12]
 800d0f6:	f8b3 313c 	ldrh.w	r3, [r3, #316]	; 0x13c
 800d0fa:	86fb      	strh	r3, [r7, #54]	; 0x36
   * This is a short term implementation. The good spad map will be
   * provided as an input.
   * Note that there are 6 bytes. Only the first 44 bits will be used to
   * represent spads.
   */
  for (index = 0; index < spadArraySize; index++)
 800d0fc:	2300      	movs	r3, #0
 800d0fe:	64bb      	str	r3, [r7, #72]	; 0x48
 800d100:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d102:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d104:	429a      	cmp	r2, r3
 800d106:	d20a      	bcs.n	800d11e <VL53L0X_perform_ref_spad_management+0x88>
    Dev->Data.SpadData.RefSpadEnables[index] = 0;
 800d108:	68fa      	ldr	r2, [r7, #12]
 800d10a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d10c:	4413      	add	r3, r2
 800d10e:	f503 7392 	add.w	r3, r3, #292	; 0x124
 800d112:	2200      	movs	r2, #0
 800d114:	701a      	strb	r2, [r3, #0]
  for (index = 0; index < spadArraySize; index++)
 800d116:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d118:	3301      	adds	r3, #1
 800d11a:	64bb      	str	r3, [r7, #72]	; 0x48
 800d11c:	e7f0      	b.n	800d100 <VL53L0X_perform_ref_spad_management+0x6a>

  Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800d11e:	2201      	movs	r2, #1
 800d120:	21ff      	movs	r1, #255	; 0xff
 800d122:	68f8      	ldr	r0, [r7, #12]
 800d124:	f002 fefd 	bl	800ff22 <VL53L0X_WrByte>
 800d128:	4603      	mov	r3, r0
 800d12a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

  if (Status == VL53L0X_ERROR_NONE)
 800d12e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800d132:	2b00      	cmp	r3, #0
 800d134:	d107      	bne.n	800d146 <VL53L0X_perform_ref_spad_management+0xb0>
    Status =
 800d136:	2200      	movs	r2, #0
 800d138:	214f      	movs	r1, #79	; 0x4f
 800d13a:	68f8      	ldr	r0, [r7, #12]
 800d13c:	f002 fef1 	bl	800ff22 <VL53L0X_WrByte>
 800d140:	4603      	mov	r3, r0
 800d142:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        VL53L0X_WrByte(Dev, VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

  if (Status == VL53L0X_ERROR_NONE)
 800d146:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800d14a:	2b00      	cmp	r3, #0
 800d14c:	d107      	bne.n	800d15e <VL53L0X_perform_ref_spad_management+0xc8>
    Status = VL53L0X_WrByte(
 800d14e:	222c      	movs	r2, #44	; 0x2c
 800d150:	214e      	movs	r1, #78	; 0x4e
 800d152:	68f8      	ldr	r0, [r7, #12]
 800d154:	f002 fee5 	bl	800ff22 <VL53L0X_WrByte>
 800d158:	4603      	mov	r3, r0
 800d15a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        Dev, VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

  if (Status == VL53L0X_ERROR_NONE)
 800d15e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800d162:	2b00      	cmp	r3, #0
 800d164:	d107      	bne.n	800d176 <VL53L0X_perform_ref_spad_management+0xe0>
    Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800d166:	2200      	movs	r2, #0
 800d168:	21ff      	movs	r1, #255	; 0xff
 800d16a:	68f8      	ldr	r0, [r7, #12]
 800d16c:	f002 fed9 	bl	800ff22 <VL53L0X_WrByte>
 800d170:	4603      	mov	r3, r0
 800d172:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

  if (Status == VL53L0X_ERROR_NONE)
 800d176:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800d17a:	2b00      	cmp	r3, #0
 800d17c:	d109      	bne.n	800d192 <VL53L0X_perform_ref_spad_management+0xfc>
    Status = VL53L0X_WrByte(Dev, VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
 800d17e:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 800d182:	461a      	mov	r2, r3
 800d184:	21b6      	movs	r1, #182	; 0xb6
 800d186:	68f8      	ldr	r0, [r7, #12]
 800d188:	f002 fecb 	bl	800ff22 <VL53L0X_WrByte>
 800d18c:	4603      	mov	r3, r0
 800d18e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
                            startSelect);

  if (Status == VL53L0X_ERROR_NONE)
 800d192:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800d196:	2b00      	cmp	r3, #0
 800d198:	d107      	bne.n	800d1aa <VL53L0X_perform_ref_spad_management+0x114>
    Status =
 800d19a:	2200      	movs	r2, #0
 800d19c:	2180      	movs	r1, #128	; 0x80
 800d19e:	68f8      	ldr	r0, [r7, #12]
 800d1a0:	f002 febf 	bl	800ff22 <VL53L0X_WrByte>
 800d1a4:	4603      	mov	r3, r0
 800d1a6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        VL53L0X_WrByte(Dev, VL53L0X_REG_POWER_MANAGEMENT_GO1_POWER_FORCE, 0);

  /* Perform ref calibration */
  if (Status == VL53L0X_ERROR_NONE)
 800d1aa:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800d1ae:	2b00      	cmp	r3, #0
 800d1b0:	d10a      	bne.n	800d1c8 <VL53L0X_perform_ref_spad_management+0x132>
    Status = VL53L0X_perform_ref_calibration(Dev, &VhvSettings, &PhaseCal, 0);
 800d1b2:	f107 0218 	add.w	r2, r7, #24
 800d1b6:	f107 0119 	add.w	r1, r7, #25
 800d1ba:	2300      	movs	r3, #0
 800d1bc:	68f8      	ldr	r0, [r7, #12]
 800d1be:	f000 fbca 	bl	800d956 <VL53L0X_perform_ref_calibration>
 800d1c2:	4603      	mov	r3, r0
 800d1c4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

  if (Status == VL53L0X_ERROR_NONE) {
 800d1c8:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800d1cc:	2b00      	cmp	r3, #0
 800d1ce:	d121      	bne.n	800d214 <VL53L0X_perform_ref_spad_management+0x17e>
    /* Enable Minimum NON-APERTURE Spads */
    currentSpadIndex = 0;
 800d1d0:	2300      	movs	r3, #0
 800d1d2:	653b      	str	r3, [r7, #80]	; 0x50
    lastSpadIndex = currentSpadIndex;
 800d1d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d1d6:	623b      	str	r3, [r7, #32]
    needAptSpads = 0;
 800d1d8:	2300      	movs	r3, #0
 800d1da:	64fb      	str	r3, [r7, #76]	; 0x4c
    Status = enable_ref_spads(
 800d1dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d1de:	b2d9      	uxtb	r1, r3
 800d1e0:	68fb      	ldr	r3, [r7, #12]
 800d1e2:	f503 7095 	add.w	r0, r3, #298	; 0x12a
 800d1e6:	68fb      	ldr	r3, [r7, #12]
 800d1e8:	f503 7492 	add.w	r4, r3, #292	; 0x124
 800d1ec:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 800d1f0:	f107 0220 	add.w	r2, r7, #32
 800d1f4:	9204      	str	r2, [sp, #16]
 800d1f6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d1f8:	9203      	str	r2, [sp, #12]
 800d1fa:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d1fc:	9202      	str	r2, [sp, #8]
 800d1fe:	9301      	str	r3, [sp, #4]
 800d200:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d202:	9300      	str	r3, [sp, #0]
 800d204:	4623      	mov	r3, r4
 800d206:	4602      	mov	r2, r0
 800d208:	68f8      	ldr	r0, [r7, #12]
 800d20a:	f7ff fe5d 	bl	800cec8 <_Z16enable_ref_spadsP13VL53L0X_Dev_thPhS1_mmmmPm>
 800d20e:	4603      	mov	r3, r0
 800d210:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        Dev, needAptSpads, Dev->Data.SpadData.RefGoodSpadMap,
        Dev->Data.SpadData.RefSpadEnables, spadArraySize, startSelect,
        currentSpadIndex, minimumSpadCount, &lastSpadIndex);
  }

  if (Status == VL53L0X_ERROR_NONE) {
 800d214:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800d218:	2b00      	cmp	r3, #0
 800d21a:	d179      	bne.n	800d310 <VL53L0X_perform_ref_spad_management+0x27a>
    currentSpadIndex = lastSpadIndex;
 800d21c:	6a3b      	ldr	r3, [r7, #32]
 800d21e:	653b      	str	r3, [r7, #80]	; 0x50

    Status = perform_ref_signal_measurement(Dev, &peakSignalRateRef);
 800d220:	f107 031a 	add.w	r3, r7, #26
 800d224:	4619      	mov	r1, r3
 800d226:	68f8      	ldr	r0, [r7, #12]
 800d228:	f7ff fecf 	bl	800cfca <_Z30perform_ref_signal_measurementP13VL53L0X_Dev_tPt>
 800d22c:	4603      	mov	r3, r0
 800d22e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    if ((Status == VL53L0X_ERROR_NONE) && (peakSignalRateRef > targetRefRate)) {
 800d232:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800d236:	2b00      	cmp	r3, #0
 800d238:	d166      	bne.n	800d308 <VL53L0X_perform_ref_spad_management+0x272>
 800d23a:	8b7b      	ldrh	r3, [r7, #26]
 800d23c:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800d23e:	429a      	cmp	r2, r3
 800d240:	d262      	bcs.n	800d308 <VL53L0X_perform_ref_spad_management+0x272>
      /* Signal rate measurement too high,
       * switch to APERTURE SPADs */

      for (index = 0; index < spadArraySize; index++)
 800d242:	2300      	movs	r3, #0
 800d244:	64bb      	str	r3, [r7, #72]	; 0x48
 800d246:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d248:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d24a:	429a      	cmp	r2, r3
 800d24c:	d20a      	bcs.n	800d264 <VL53L0X_perform_ref_spad_management+0x1ce>
        Dev->Data.SpadData.RefSpadEnables[index] = 0;
 800d24e:	68fa      	ldr	r2, [r7, #12]
 800d250:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d252:	4413      	add	r3, r2
 800d254:	f503 7392 	add.w	r3, r3, #292	; 0x124
 800d258:	2200      	movs	r2, #0
 800d25a:	701a      	strb	r2, [r3, #0]
      for (index = 0; index < spadArraySize; index++)
 800d25c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d25e:	3301      	adds	r3, #1
 800d260:	64bb      	str	r3, [r7, #72]	; 0x48
 800d262:	e7f0      	b.n	800d246 <VL53L0X_perform_ref_spad_management+0x1b0>

      /* Increment to the first APERTURE spad */
      while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 800d264:	f897 2041 	ldrb.w	r2, [r7, #65]	; 0x41
 800d268:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d26a:	4413      	add	r3, r2
 800d26c:	4618      	mov	r0, r3
 800d26e:	f7ff fdb3 	bl	800cdd8 <_Z11is_aperturem>
 800d272:	4603      	mov	r3, r0
 800d274:	2b00      	cmp	r3, #0
 800d276:	d105      	bne.n	800d284 <VL53L0X_perform_ref_spad_management+0x1ee>
 800d278:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d27a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d27c:	429a      	cmp	r2, r3
 800d27e:	d201      	bcs.n	800d284 <VL53L0X_perform_ref_spad_management+0x1ee>
 800d280:	2301      	movs	r3, #1
 800d282:	e000      	b.n	800d286 <VL53L0X_perform_ref_spad_management+0x1f0>
 800d284:	2300      	movs	r3, #0
 800d286:	2b00      	cmp	r3, #0
 800d288:	d003      	beq.n	800d292 <VL53L0X_perform_ref_spad_management+0x1fc>
             (currentSpadIndex < maxSpadCount)) {
        currentSpadIndex++;
 800d28a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d28c:	3301      	adds	r3, #1
 800d28e:	653b      	str	r3, [r7, #80]	; 0x50
      while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 800d290:	e7e8      	b.n	800d264 <VL53L0X_perform_ref_spad_management+0x1ce>
      }

      needAptSpads = 1;
 800d292:	2301      	movs	r3, #1
 800d294:	64fb      	str	r3, [r7, #76]	; 0x4c

      Status = enable_ref_spads(
 800d296:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d298:	b2d9      	uxtb	r1, r3
 800d29a:	68fb      	ldr	r3, [r7, #12]
 800d29c:	f503 7095 	add.w	r0, r3, #298	; 0x12a
 800d2a0:	68fb      	ldr	r3, [r7, #12]
 800d2a2:	f503 7492 	add.w	r4, r3, #292	; 0x124
 800d2a6:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 800d2aa:	f107 0220 	add.w	r2, r7, #32
 800d2ae:	9204      	str	r2, [sp, #16]
 800d2b0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d2b2:	9203      	str	r2, [sp, #12]
 800d2b4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d2b6:	9202      	str	r2, [sp, #8]
 800d2b8:	9301      	str	r3, [sp, #4]
 800d2ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2bc:	9300      	str	r3, [sp, #0]
 800d2be:	4623      	mov	r3, r4
 800d2c0:	4602      	mov	r2, r0
 800d2c2:	68f8      	ldr	r0, [r7, #12]
 800d2c4:	f7ff fe00 	bl	800cec8 <_Z16enable_ref_spadsP13VL53L0X_Dev_thPhS1_mmmmPm>
 800d2c8:	4603      	mov	r3, r0
 800d2ca:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          Dev, needAptSpads, Dev->Data.SpadData.RefGoodSpadMap,
          Dev->Data.SpadData.RefSpadEnables, spadArraySize, startSelect,
          currentSpadIndex, minimumSpadCount, &lastSpadIndex);

      if (Status == VL53L0X_ERROR_NONE) {
 800d2ce:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800d2d2:	2b00      	cmp	r3, #0
 800d2d4:	d11b      	bne.n	800d30e <VL53L0X_perform_ref_spad_management+0x278>
        currentSpadIndex = lastSpadIndex;
 800d2d6:	6a3b      	ldr	r3, [r7, #32]
 800d2d8:	653b      	str	r3, [r7, #80]	; 0x50
        Status = perform_ref_signal_measurement(Dev, &peakSignalRateRef);
 800d2da:	f107 031a 	add.w	r3, r7, #26
 800d2de:	4619      	mov	r1, r3
 800d2e0:	68f8      	ldr	r0, [r7, #12]
 800d2e2:	f7ff fe72 	bl	800cfca <_Z30perform_ref_signal_measurementP13VL53L0X_Dev_tPt>
 800d2e6:	4603      	mov	r3, r0
 800d2e8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

        if ((Status == VL53L0X_ERROR_NONE) &&
 800d2ec:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800d2f0:	2b00      	cmp	r3, #0
 800d2f2:	d10c      	bne.n	800d30e <VL53L0X_perform_ref_spad_management+0x278>
            (peakSignalRateRef > targetRefRate)) {
 800d2f4:	8b7b      	ldrh	r3, [r7, #26]
        if ((Status == VL53L0X_ERROR_NONE) &&
 800d2f6:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800d2f8:	429a      	cmp	r2, r3
 800d2fa:	d208      	bcs.n	800d30e <VL53L0X_perform_ref_spad_management+0x278>
           * setting the minimum number of
           * APERTURE spads. Can do no more
           * therefore set the min number of
           * aperture spads as the result.
           */
          isApertureSpads_int = 1;
 800d2fc:	2301      	movs	r3, #1
 800d2fe:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
          refSpadCount_int = minimumSpadCount;
 800d302:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d304:	617b      	str	r3, [r7, #20]
      if (Status == VL53L0X_ERROR_NONE) {
 800d306:	e002      	b.n	800d30e <VL53L0X_perform_ref_spad_management+0x278>
        }
      }
    } else {
      needAptSpads = 0;
 800d308:	2300      	movs	r3, #0
 800d30a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d30c:	e000      	b.n	800d310 <VL53L0X_perform_ref_spad_management+0x27a>
      if (Status == VL53L0X_ERROR_NONE) {
 800d30e:	bf00      	nop
    }
  }

  if ((Status == VL53L0X_ERROR_NONE) && (peakSignalRateRef < targetRefRate)) {
 800d310:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800d314:	2b00      	cmp	r3, #0
 800d316:	f040 80b3 	bne.w	800d480 <VL53L0X_perform_ref_spad_management+0x3ea>
 800d31a:	8b7b      	ldrh	r3, [r7, #26]
 800d31c:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800d31e:	429a      	cmp	r2, r3
 800d320:	f240 80ae 	bls.w	800d480 <VL53L0X_perform_ref_spad_management+0x3ea>
    /* At this point, the minimum number of either aperture
     * or non-aperture spads have been set. Proceed to add
     * spads and perform measurements until the target
     * reference is reached.
     */
    isApertureSpads_int = needAptSpads;
 800d324:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d326:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
    refSpadCount_int = minimumSpadCount;
 800d32a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d32c:	617b      	str	r3, [r7, #20]

    memcpy(lastSpadArray, Dev->Data.SpadData.RefSpadEnables, spadArraySize);
 800d32e:	68fb      	ldr	r3, [r7, #12]
 800d330:	f503 7192 	add.w	r1, r3, #292	; 0x124
 800d334:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d338:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d33a:	4618      	mov	r0, r3
 800d33c:	f002 ff22 	bl	8010184 <memcpy>
    lastSignalRateDiff = abs(peakSignalRateRef - targetRefRate);
 800d340:	8b7b      	ldrh	r3, [r7, #26]
 800d342:	461a      	mov	r2, r3
 800d344:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800d346:	1ad3      	subs	r3, r2, r3
 800d348:	2b00      	cmp	r3, #0
 800d34a:	bfb8      	it	lt
 800d34c:	425b      	neglt	r3, r3
 800d34e:	647b      	str	r3, [r7, #68]	; 0x44
    complete = 0;
 800d350:	2300      	movs	r3, #0
 800d352:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

    while (!complete) {
 800d356:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800d35a:	2b00      	cmp	r3, #0
 800d35c:	f040 8090 	bne.w	800d480 <VL53L0X_perform_ref_spad_management+0x3ea>
      get_next_good_spad(Dev->Data.SpadData.RefGoodSpadMap, spadArraySize,
 800d360:	68fb      	ldr	r3, [r7, #12]
 800d362:	f503 7095 	add.w	r0, r3, #298	; 0x12a
 800d366:	f107 031c 	add.w	r3, r7, #28
 800d36a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d36c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d36e:	f7ff fcd4 	bl	800cd1a <_Z18get_next_good_spadPhmmPl>
                         currentSpadIndex, &nextGoodSpad);

      if (nextGoodSpad == -1) {
 800d372:	69fb      	ldr	r3, [r7, #28]
 800d374:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d378:	d103      	bne.n	800d382 <VL53L0X_perform_ref_spad_management+0x2ec>
        Status = VL53L0X_ERROR_REF_SPAD_INIT;
 800d37a:	23ce      	movs	r3, #206	; 0xce
 800d37c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        break;
 800d380:	e07e      	b.n	800d480 <VL53L0X_perform_ref_spad_management+0x3ea>
      }

      (refSpadCount_int)++;
 800d382:	697b      	ldr	r3, [r7, #20]
 800d384:	3301      	adds	r3, #1
 800d386:	617b      	str	r3, [r7, #20]

      /* Cannot combine Aperture and Non-Aperture spads, so
       * ensure the current spad is of the correct type.
       */
      if (is_aperture((uint32_t)startSelect + nextGoodSpad) != needAptSpads) {
 800d388:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 800d38c:	69fa      	ldr	r2, [r7, #28]
 800d38e:	4413      	add	r3, r2
 800d390:	4618      	mov	r0, r3
 800d392:	f7ff fd21 	bl	800cdd8 <_Z11is_aperturem>
 800d396:	4603      	mov	r3, r0
 800d398:	461a      	mov	r2, r3
 800d39a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d39c:	4293      	cmp	r3, r2
 800d39e:	bf14      	ite	ne
 800d3a0:	2301      	movne	r3, #1
 800d3a2:	2300      	moveq	r3, #0
 800d3a4:	b2db      	uxtb	r3, r3
 800d3a6:	2b00      	cmp	r3, #0
 800d3a8:	d003      	beq.n	800d3b2 <VL53L0X_perform_ref_spad_management+0x31c>
        Status = VL53L0X_ERROR_REF_SPAD_INIT;
 800d3aa:	23ce      	movs	r3, #206	; 0xce
 800d3ac:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        break;
 800d3b0:	e066      	b.n	800d480 <VL53L0X_perform_ref_spad_management+0x3ea>
      }

      currentSpadIndex = nextGoodSpad;
 800d3b2:	69fb      	ldr	r3, [r7, #28]
 800d3b4:	653b      	str	r3, [r7, #80]	; 0x50
      Status = enable_spad_bit(Dev->Data.SpadData.RefSpadEnables, spadArraySize,
 800d3b6:	68fb      	ldr	r3, [r7, #12]
 800d3b8:	f503 7392 	add.w	r3, r3, #292	; 0x124
 800d3bc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d3be:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d3c0:	4618      	mov	r0, r3
 800d3c2:	f7ff fd23 	bl	800ce0c <_Z15enable_spad_bitPhmm>
 800d3c6:	4603      	mov	r3, r0
 800d3c8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
                               currentSpadIndex);

      if (Status == VL53L0X_ERROR_NONE) {
 800d3cc:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800d3d0:	2b00      	cmp	r3, #0
 800d3d2:	d10c      	bne.n	800d3ee <VL53L0X_perform_ref_spad_management+0x358>
        currentSpadIndex++;
 800d3d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d3d6:	3301      	adds	r3, #1
 800d3d8:	653b      	str	r3, [r7, #80]	; 0x50
        /* Proceed to apply the additional spad and
         * perform measurement. */
        Status = set_ref_spad_map(Dev, Dev->Data.SpadData.RefSpadEnables);
 800d3da:	68fb      	ldr	r3, [r7, #12]
 800d3dc:	f503 7392 	add.w	r3, r3, #292	; 0x124
 800d3e0:	4619      	mov	r1, r3
 800d3e2:	68f8      	ldr	r0, [r7, #12]
 800d3e4:	f7ff fd4a 	bl	800ce7c <_Z16set_ref_spad_mapP13VL53L0X_Dev_tPh>
 800d3e8:	4603      	mov	r3, r0
 800d3ea:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      }

      if (Status != VL53L0X_ERROR_NONE)
 800d3ee:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800d3f2:	2b00      	cmp	r3, #0
 800d3f4:	d141      	bne.n	800d47a <VL53L0X_perform_ref_spad_management+0x3e4>
        break;

      Status = perform_ref_signal_measurement(Dev, &peakSignalRateRef);
 800d3f6:	f107 031a 	add.w	r3, r7, #26
 800d3fa:	4619      	mov	r1, r3
 800d3fc:	68f8      	ldr	r0, [r7, #12]
 800d3fe:	f7ff fde4 	bl	800cfca <_Z30perform_ref_signal_measurementP13VL53L0X_Dev_tPt>
 800d402:	4603      	mov	r3, r0
 800d404:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

      if (Status != VL53L0X_ERROR_NONE)
 800d408:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800d40c:	2b00      	cmp	r3, #0
 800d40e:	d136      	bne.n	800d47e <VL53L0X_perform_ref_spad_management+0x3e8>
        break;

      signalRateDiff = abs(peakSignalRateRef - targetRefRate);
 800d410:	8b7b      	ldrh	r3, [r7, #26]
 800d412:	461a      	mov	r2, r3
 800d414:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800d416:	1ad3      	subs	r3, r2, r3
 800d418:	2b00      	cmp	r3, #0
 800d41a:	bfb8      	it	lt
 800d41c:	425b      	neglt	r3, r3
 800d41e:	62fb      	str	r3, [r7, #44]	; 0x2c

      if (peakSignalRateRef > targetRefRate) {
 800d420:	8b7b      	ldrh	r3, [r7, #26]
 800d422:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800d424:	429a      	cmp	r2, r3
 800d426:	d21c      	bcs.n	800d462 <VL53L0X_perform_ref_spad_management+0x3cc>
        /* Select the spad map that provides the
         * measurement closest to the target rate,
         * either above or below it.
         */
        if (signalRateDiff > lastSignalRateDiff) {
 800d428:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d42a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d42c:	429a      	cmp	r2, r3
 800d42e:	d914      	bls.n	800d45a <VL53L0X_perform_ref_spad_management+0x3c4>
          /* Previous spad map produced a closer
           * measurement, so choose this. */
          Status = set_ref_spad_map(Dev, lastSpadArray);
 800d430:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d434:	4619      	mov	r1, r3
 800d436:	68f8      	ldr	r0, [r7, #12]
 800d438:	f7ff fd20 	bl	800ce7c <_Z16set_ref_spad_mapP13VL53L0X_Dev_tPh>
 800d43c:	4603      	mov	r3, r0
 800d43e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          memcpy(Dev->Data.SpadData.RefSpadEnables, lastSpadArray,
 800d442:	68fb      	ldr	r3, [r7, #12]
 800d444:	f503 7392 	add.w	r3, r3, #292	; 0x124
 800d448:	f107 0124 	add.w	r1, r7, #36	; 0x24
 800d44c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d44e:	4618      	mov	r0, r3
 800d450:	f002 fe98 	bl	8010184 <memcpy>
                 spadArraySize);

          (refSpadCount_int)--;
 800d454:	697b      	ldr	r3, [r7, #20]
 800d456:	3b01      	subs	r3, #1
 800d458:	617b      	str	r3, [r7, #20]
        }
        complete = 1;
 800d45a:	2301      	movs	r3, #1
 800d45c:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d460:	e779      	b.n	800d356 <VL53L0X_perform_ref_spad_management+0x2c0>
      } else {
        /* Continue to add spads */
        lastSignalRateDiff = signalRateDiff;
 800d462:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d464:	647b      	str	r3, [r7, #68]	; 0x44
        memcpy(lastSpadArray, Dev->Data.SpadData.RefSpadEnables, spadArraySize);
 800d466:	68fb      	ldr	r3, [r7, #12]
 800d468:	f503 7192 	add.w	r1, r3, #292	; 0x124
 800d46c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d470:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d472:	4618      	mov	r0, r3
 800d474:	f002 fe86 	bl	8010184 <memcpy>
    while (!complete) {
 800d478:	e76d      	b.n	800d356 <VL53L0X_perform_ref_spad_management+0x2c0>
        break;
 800d47a:	bf00      	nop
 800d47c:	e000      	b.n	800d480 <VL53L0X_perform_ref_spad_management+0x3ea>
        break;
 800d47e:	bf00      	nop
      }

    } /* while */
  }

  if (Status == VL53L0X_ERROR_NONE) {
 800d480:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800d484:	2b00      	cmp	r3, #0
 800d486:	d115      	bne.n	800d4b4 <VL53L0X_perform_ref_spad_management+0x41e>
    *refSpadCount = refSpadCount_int;
 800d488:	697a      	ldr	r2, [r7, #20]
 800d48a:	68bb      	ldr	r3, [r7, #8]
 800d48c:	601a      	str	r2, [r3, #0]
    *isApertureSpads = isApertureSpads_int;
 800d48e:	687b      	ldr	r3, [r7, #4]
 800d490:	f897 2042 	ldrb.w	r2, [r7, #66]	; 0x42
 800d494:	701a      	strb	r2, [r3, #0]

    VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 800d496:	68fb      	ldr	r3, [r7, #12]
 800d498:	2201      	movs	r2, #1
 800d49a:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
    VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReferenceSpadCount,
 800d49e:	68bb      	ldr	r3, [r7, #8]
 800d4a0:	681b      	ldr	r3, [r3, #0]
 800d4a2:	b2da      	uxtb	r2, r3
 800d4a4:	68fb      	ldr	r3, [r7, #12]
 800d4a6:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
                                       (uint8_t)(*refSpadCount));
    VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReferenceSpadType,
 800d4aa:	687b      	ldr	r3, [r7, #4]
 800d4ac:	781a      	ldrb	r2, [r3, #0]
 800d4ae:	68fb      	ldr	r3, [r7, #12]
 800d4b0:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
                                       *isApertureSpads);
  }

  return Status;
 800d4b4:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 800d4b8:	4618      	mov	r0, r3
 800d4ba:	375c      	adds	r7, #92	; 0x5c
 800d4bc:	46bd      	mov	sp, r7
 800d4be:	bd90      	pop	{r4, r7, pc}

0800d4c0 <VL53L0X_set_reference_spads>:

VL53L0X_Error VL53L0X_set_reference_spads(VL53L0X_DEV Dev, uint32_t count,
                                          uint8_t isApertureSpads) {
 800d4c0:	b5b0      	push	{r4, r5, r7, lr}
 800d4c2:	b092      	sub	sp, #72	; 0x48
 800d4c4:	af06      	add	r7, sp, #24
 800d4c6:	60f8      	str	r0, [r7, #12]
 800d4c8:	60b9      	str	r1, [r7, #8]
 800d4ca:	4613      	mov	r3, r2
 800d4cc:	71fb      	strb	r3, [r7, #7]
  VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800d4ce:	2300      	movs	r3, #0
 800d4d0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  uint32_t currentSpadIndex = 0;
 800d4d4:	2300      	movs	r3, #0
 800d4d6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint8_t startSelect = 0xB4;
 800d4d8:	23b4      	movs	r3, #180	; 0xb4
 800d4da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint32_t spadArraySize = 6;
 800d4de:	2306      	movs	r3, #6
 800d4e0:	61fb      	str	r3, [r7, #28]
  uint32_t maxSpadCount = 44;
 800d4e2:	232c      	movs	r3, #44	; 0x2c
 800d4e4:	61bb      	str	r3, [r7, #24]
   * aperture or
   * non-aperture, as requested.
   * The good spad map will be applied.
   */

  Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800d4e6:	2201      	movs	r2, #1
 800d4e8:	21ff      	movs	r1, #255	; 0xff
 800d4ea:	68f8      	ldr	r0, [r7, #12]
 800d4ec:	f002 fd19 	bl	800ff22 <VL53L0X_WrByte>
 800d4f0:	4603      	mov	r3, r0
 800d4f2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  if (Status == VL53L0X_ERROR_NONE)
 800d4f6:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800d4fa:	2b00      	cmp	r3, #0
 800d4fc:	d107      	bne.n	800d50e <VL53L0X_set_reference_spads+0x4e>
    Status =
 800d4fe:	2200      	movs	r2, #0
 800d500:	214f      	movs	r1, #79	; 0x4f
 800d502:	68f8      	ldr	r0, [r7, #12]
 800d504:	f002 fd0d 	bl	800ff22 <VL53L0X_WrByte>
 800d508:	4603      	mov	r3, r0
 800d50a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        VL53L0X_WrByte(Dev, VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

  if (Status == VL53L0X_ERROR_NONE)
 800d50e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800d512:	2b00      	cmp	r3, #0
 800d514:	d107      	bne.n	800d526 <VL53L0X_set_reference_spads+0x66>
    Status = VL53L0X_WrByte(
 800d516:	222c      	movs	r2, #44	; 0x2c
 800d518:	214e      	movs	r1, #78	; 0x4e
 800d51a:	68f8      	ldr	r0, [r7, #12]
 800d51c:	f002 fd01 	bl	800ff22 <VL53L0X_WrByte>
 800d520:	4603      	mov	r3, r0
 800d522:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        Dev, VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

  if (Status == VL53L0X_ERROR_NONE)
 800d526:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800d52a:	2b00      	cmp	r3, #0
 800d52c:	d107      	bne.n	800d53e <VL53L0X_set_reference_spads+0x7e>
    Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800d52e:	2200      	movs	r2, #0
 800d530:	21ff      	movs	r1, #255	; 0xff
 800d532:	68f8      	ldr	r0, [r7, #12]
 800d534:	f002 fcf5 	bl	800ff22 <VL53L0X_WrByte>
 800d538:	4603      	mov	r3, r0
 800d53a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  if (Status == VL53L0X_ERROR_NONE)
 800d53e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800d542:	2b00      	cmp	r3, #0
 800d544:	d109      	bne.n	800d55a <VL53L0X_set_reference_spads+0x9a>
    Status = VL53L0X_WrByte(Dev, VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
 800d546:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800d54a:	461a      	mov	r2, r3
 800d54c:	21b6      	movs	r1, #182	; 0xb6
 800d54e:	68f8      	ldr	r0, [r7, #12]
 800d550:	f002 fce7 	bl	800ff22 <VL53L0X_WrByte>
 800d554:	4603      	mov	r3, r0
 800d556:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                            startSelect);

  for (index = 0; index < spadArraySize; index++)
 800d55a:	2300      	movs	r3, #0
 800d55c:	627b      	str	r3, [r7, #36]	; 0x24
 800d55e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d560:	69fb      	ldr	r3, [r7, #28]
 800d562:	429a      	cmp	r2, r3
 800d564:	d20a      	bcs.n	800d57c <VL53L0X_set_reference_spads+0xbc>
    Dev->Data.SpadData.RefSpadEnables[index] = 0;
 800d566:	68fa      	ldr	r2, [r7, #12]
 800d568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d56a:	4413      	add	r3, r2
 800d56c:	f503 7392 	add.w	r3, r3, #292	; 0x124
 800d570:	2200      	movs	r2, #0
 800d572:	701a      	strb	r2, [r3, #0]
  for (index = 0; index < spadArraySize; index++)
 800d574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d576:	3301      	adds	r3, #1
 800d578:	627b      	str	r3, [r7, #36]	; 0x24
 800d57a:	e7f0      	b.n	800d55e <VL53L0X_set_reference_spads+0x9e>

  if (isApertureSpads) {
 800d57c:	79fb      	ldrb	r3, [r7, #7]
 800d57e:	2b00      	cmp	r3, #0
 800d580:	d016      	beq.n	800d5b0 <VL53L0X_set_reference_spads+0xf0>
    /* Increment to the first APERTURE spad */
    while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 800d582:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800d586:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d588:	4413      	add	r3, r2
 800d58a:	4618      	mov	r0, r3
 800d58c:	f7ff fc24 	bl	800cdd8 <_Z11is_aperturem>
 800d590:	4603      	mov	r3, r0
 800d592:	2b00      	cmp	r3, #0
 800d594:	d105      	bne.n	800d5a2 <VL53L0X_set_reference_spads+0xe2>
 800d596:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d598:	69bb      	ldr	r3, [r7, #24]
 800d59a:	429a      	cmp	r2, r3
 800d59c:	d201      	bcs.n	800d5a2 <VL53L0X_set_reference_spads+0xe2>
 800d59e:	2301      	movs	r3, #1
 800d5a0:	e000      	b.n	800d5a4 <VL53L0X_set_reference_spads+0xe4>
 800d5a2:	2300      	movs	r3, #0
 800d5a4:	2b00      	cmp	r3, #0
 800d5a6:	d003      	beq.n	800d5b0 <VL53L0X_set_reference_spads+0xf0>
           (currentSpadIndex < maxSpadCount)) {
      currentSpadIndex++;
 800d5a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5aa:	3301      	adds	r3, #1
 800d5ac:	62bb      	str	r3, [r7, #40]	; 0x28
    while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 800d5ae:	e7e8      	b.n	800d582 <VL53L0X_set_reference_spads+0xc2>
    }
  }
  Status =
      enable_ref_spads(Dev, isApertureSpads, Dev->Data.SpadData.RefGoodSpadMap,
 800d5b0:	79f8      	ldrb	r0, [r7, #7]
 800d5b2:	68fb      	ldr	r3, [r7, #12]
 800d5b4:	f503 7495 	add.w	r4, r3, #298	; 0x12a
 800d5b8:	68fb      	ldr	r3, [r7, #12]
 800d5ba:	f503 7592 	add.w	r5, r3, #292	; 0x124
 800d5be:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800d5c2:	68ba      	ldr	r2, [r7, #8]
  Status =
 800d5c4:	f107 0114 	add.w	r1, r7, #20
 800d5c8:	9104      	str	r1, [sp, #16]
 800d5ca:	9203      	str	r2, [sp, #12]
 800d5cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d5ce:	9202      	str	r2, [sp, #8]
 800d5d0:	9301      	str	r3, [sp, #4]
 800d5d2:	69fb      	ldr	r3, [r7, #28]
 800d5d4:	9300      	str	r3, [sp, #0]
 800d5d6:	462b      	mov	r3, r5
 800d5d8:	4622      	mov	r2, r4
 800d5da:	4601      	mov	r1, r0
 800d5dc:	68f8      	ldr	r0, [r7, #12]
 800d5de:	f7ff fc73 	bl	800cec8 <_Z16enable_ref_spadsP13VL53L0X_Dev_thPhS1_mmmmPm>
 800d5e2:	4603      	mov	r3, r0
 800d5e4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                       Dev->Data.SpadData.RefSpadEnables, spadArraySize,
                       startSelect, currentSpadIndex, count, &lastSpadIndex);

  if (Status == VL53L0X_ERROR_NONE) {
 800d5e8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800d5ec:	2b00      	cmp	r3, #0
 800d5ee:	d10c      	bne.n	800d60a <VL53L0X_set_reference_spads+0x14a>
    VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 800d5f0:	68fb      	ldr	r3, [r7, #12]
 800d5f2:	2201      	movs	r2, #1
 800d5f4:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
    VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReferenceSpadCount,
 800d5f8:	68bb      	ldr	r3, [r7, #8]
 800d5fa:	b2da      	uxtb	r2, r3
 800d5fc:	68fb      	ldr	r3, [r7, #12]
 800d5fe:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
                                       (uint8_t)(count));
    VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReferenceSpadType, isApertureSpads);
 800d602:	79fa      	ldrb	r2, [r7, #7]
 800d604:	68fb      	ldr	r3, [r7, #12]
 800d606:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
  }

  return Status;
 800d60a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800d60e:	4618      	mov	r0, r3
 800d610:	3730      	adds	r7, #48	; 0x30
 800d612:	46bd      	mov	sp, r7
 800d614:	bdb0      	pop	{r4, r5, r7, pc}

0800d616 <_Z38VL53L0X_perform_single_ref_calibrationP13VL53L0X_Dev_th>:

  return Status;
}

VL53L0X_Error VL53L0X_perform_single_ref_calibration(VL53L0X_DEV Dev,
                                                     uint8_t vhv_init_byte) {
 800d616:	b580      	push	{r7, lr}
 800d618:	b084      	sub	sp, #16
 800d61a:	af00      	add	r7, sp, #0
 800d61c:	6078      	str	r0, [r7, #4]
 800d61e:	460b      	mov	r3, r1
 800d620:	70fb      	strb	r3, [r7, #3]
  VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800d622:	2300      	movs	r3, #0
 800d624:	73fb      	strb	r3, [r7, #15]

  if (Status == VL53L0X_ERROR_NONE)
 800d626:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d62a:	2b00      	cmp	r3, #0
 800d62c:	d10a      	bne.n	800d644 <_Z38VL53L0X_perform_single_ref_calibrationP13VL53L0X_Dev_th+0x2e>
    Status =
        VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START,
 800d62e:	78fb      	ldrb	r3, [r7, #3]
 800d630:	f043 0301 	orr.w	r3, r3, #1
 800d634:	b2db      	uxtb	r3, r3
    Status =
 800d636:	461a      	mov	r2, r3
 800d638:	2100      	movs	r1, #0
 800d63a:	6878      	ldr	r0, [r7, #4]
 800d63c:	f002 fc71 	bl	800ff22 <VL53L0X_WrByte>
 800d640:	4603      	mov	r3, r0
 800d642:	73fb      	strb	r3, [r7, #15]
                       VL53L0X_REG_SYSRANGE_MODE_START_STOP | vhv_init_byte);

  if (Status == VL53L0X_ERROR_NONE)
 800d644:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d648:	2b00      	cmp	r3, #0
 800d64a:	d104      	bne.n	800d656 <_Z38VL53L0X_perform_single_ref_calibrationP13VL53L0X_Dev_th+0x40>
    Status = VL53L0X_measurement_poll_for_completion(Dev);
 800d64c:	6878      	ldr	r0, [r7, #4]
 800d64e:	f000 f9cf 	bl	800d9f0 <VL53L0X_measurement_poll_for_completion>
 800d652:	4603      	mov	r3, r0
 800d654:	73fb      	strb	r3, [r7, #15]

  if (Status == VL53L0X_ERROR_NONE)
 800d656:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d65a:	2b00      	cmp	r3, #0
 800d65c:	d105      	bne.n	800d66a <_Z38VL53L0X_perform_single_ref_calibrationP13VL53L0X_Dev_th+0x54>
    Status = VL53L0X_ClearInterruptMask(Dev, 0);
 800d65e:	2100      	movs	r1, #0
 800d660:	6878      	ldr	r0, [r7, #4]
 800d662:	f7ff faa3 	bl	800cbac <VL53L0X_ClearInterruptMask>
 800d666:	4603      	mov	r3, r0
 800d668:	73fb      	strb	r3, [r7, #15]

  if (Status == VL53L0X_ERROR_NONE)
 800d66a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d66e:	2b00      	cmp	r3, #0
 800d670:	d106      	bne.n	800d680 <_Z38VL53L0X_perform_single_ref_calibrationP13VL53L0X_Dev_th+0x6a>
    Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x00);
 800d672:	2200      	movs	r2, #0
 800d674:	2100      	movs	r1, #0
 800d676:	6878      	ldr	r0, [r7, #4]
 800d678:	f002 fc53 	bl	800ff22 <VL53L0X_WrByte>
 800d67c:	4603      	mov	r3, r0
 800d67e:	73fb      	strb	r3, [r7, #15]

  return Status;
 800d680:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800d684:	4618      	mov	r0, r3
 800d686:	3710      	adds	r7, #16
 800d688:	46bd      	mov	sp, r7
 800d68a:	bd80      	pop	{r7, pc}

0800d68c <_Z26VL53L0X_ref_calibration_ioP13VL53L0X_Dev_thhhPhS1_hh>:

VL53L0X_Error VL53L0X_ref_calibration_io(
    VL53L0X_DEV Dev, uint8_t read_not_write, uint8_t VhvSettings,
    uint8_t PhaseCal, uint8_t *pVhvSettings, uint8_t *pPhaseCal,
    const uint8_t vhv_enable, const uint8_t phase_enable) {
 800d68c:	b580      	push	{r7, lr}
 800d68e:	b084      	sub	sp, #16
 800d690:	af00      	add	r7, sp, #0
 800d692:	6078      	str	r0, [r7, #4]
 800d694:	4608      	mov	r0, r1
 800d696:	4611      	mov	r1, r2
 800d698:	461a      	mov	r2, r3
 800d69a:	4603      	mov	r3, r0
 800d69c:	70fb      	strb	r3, [r7, #3]
 800d69e:	460b      	mov	r3, r1
 800d6a0:	70bb      	strb	r3, [r7, #2]
 800d6a2:	4613      	mov	r3, r2
 800d6a4:	707b      	strb	r3, [r7, #1]
  VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800d6a6:	2300      	movs	r3, #0
 800d6a8:	73fb      	strb	r3, [r7, #15]
  uint8_t PhaseCalint = 0;
 800d6aa:	2300      	movs	r3, #0
 800d6ac:	73bb      	strb	r3, [r7, #14]

  /* Read VHV from device */
  Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800d6ae:	2201      	movs	r2, #1
 800d6b0:	21ff      	movs	r1, #255	; 0xff
 800d6b2:	6878      	ldr	r0, [r7, #4]
 800d6b4:	f002 fc35 	bl	800ff22 <VL53L0X_WrByte>
 800d6b8:	4603      	mov	r3, r0
 800d6ba:	461a      	mov	r2, r3
 800d6bc:	7bfb      	ldrb	r3, [r7, #15]
 800d6be:	4313      	orrs	r3, r2
 800d6c0:	73fb      	strb	r3, [r7, #15]
  Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800d6c2:	2200      	movs	r2, #0
 800d6c4:	2100      	movs	r1, #0
 800d6c6:	6878      	ldr	r0, [r7, #4]
 800d6c8:	f002 fc2b 	bl	800ff22 <VL53L0X_WrByte>
 800d6cc:	4603      	mov	r3, r0
 800d6ce:	461a      	mov	r2, r3
 800d6d0:	7bfb      	ldrb	r3, [r7, #15]
 800d6d2:	4313      	orrs	r3, r2
 800d6d4:	73fb      	strb	r3, [r7, #15]
  Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800d6d6:	2200      	movs	r2, #0
 800d6d8:	21ff      	movs	r1, #255	; 0xff
 800d6da:	6878      	ldr	r0, [r7, #4]
 800d6dc:	f002 fc21 	bl	800ff22 <VL53L0X_WrByte>
 800d6e0:	4603      	mov	r3, r0
 800d6e2:	461a      	mov	r2, r3
 800d6e4:	7bfb      	ldrb	r3, [r7, #15]
 800d6e6:	4313      	orrs	r3, r2
 800d6e8:	73fb      	strb	r3, [r7, #15]

  if (read_not_write) {
 800d6ea:	78fb      	ldrb	r3, [r7, #3]
 800d6ec:	2b00      	cmp	r3, #0
 800d6ee:	d01e      	beq.n	800d72e <_Z26VL53L0X_ref_calibration_ioP13VL53L0X_Dev_thhhPhS1_hh+0xa2>
    if (vhv_enable)
 800d6f0:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d6f4:	2b00      	cmp	r3, #0
 800d6f6:	d009      	beq.n	800d70c <_Z26VL53L0X_ref_calibration_ioP13VL53L0X_Dev_thhhPhS1_hh+0x80>
      Status |= VL53L0X_RdByte(Dev, 0xCB, pVhvSettings);
 800d6f8:	69ba      	ldr	r2, [r7, #24]
 800d6fa:	21cb      	movs	r1, #203	; 0xcb
 800d6fc:	6878      	ldr	r0, [r7, #4]
 800d6fe:	f002 fc96 	bl	801002e <VL53L0X_RdByte>
 800d702:	4603      	mov	r3, r0
 800d704:	461a      	mov	r2, r3
 800d706:	7bfb      	ldrb	r3, [r7, #15]
 800d708:	4313      	orrs	r3, r2
 800d70a:	73fb      	strb	r3, [r7, #15]
    if (phase_enable)
 800d70c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800d710:	2b00      	cmp	r3, #0
 800d712:	d02a      	beq.n	800d76a <_Z26VL53L0X_ref_calibration_ioP13VL53L0X_Dev_thhhPhS1_hh+0xde>
      Status |= VL53L0X_RdByte(Dev, 0xEE, &PhaseCalint);
 800d714:	f107 030e 	add.w	r3, r7, #14
 800d718:	461a      	mov	r2, r3
 800d71a:	21ee      	movs	r1, #238	; 0xee
 800d71c:	6878      	ldr	r0, [r7, #4]
 800d71e:	f002 fc86 	bl	801002e <VL53L0X_RdByte>
 800d722:	4603      	mov	r3, r0
 800d724:	461a      	mov	r2, r3
 800d726:	7bfb      	ldrb	r3, [r7, #15]
 800d728:	4313      	orrs	r3, r2
 800d72a:	73fb      	strb	r3, [r7, #15]
 800d72c:	e01d      	b.n	800d76a <_Z26VL53L0X_ref_calibration_ioP13VL53L0X_Dev_thhhPhS1_hh+0xde>
  } else {
    if (vhv_enable)
 800d72e:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d732:	2b00      	cmp	r3, #0
 800d734:	d00a      	beq.n	800d74c <_Z26VL53L0X_ref_calibration_ioP13VL53L0X_Dev_thhhPhS1_hh+0xc0>
      Status |= VL53L0X_WrByte(Dev, 0xCB, VhvSettings);
 800d736:	78bb      	ldrb	r3, [r7, #2]
 800d738:	461a      	mov	r2, r3
 800d73a:	21cb      	movs	r1, #203	; 0xcb
 800d73c:	6878      	ldr	r0, [r7, #4]
 800d73e:	f002 fbf0 	bl	800ff22 <VL53L0X_WrByte>
 800d742:	4603      	mov	r3, r0
 800d744:	461a      	mov	r2, r3
 800d746:	7bfb      	ldrb	r3, [r7, #15]
 800d748:	4313      	orrs	r3, r2
 800d74a:	73fb      	strb	r3, [r7, #15]
    if (phase_enable)
 800d74c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800d750:	2b00      	cmp	r3, #0
 800d752:	d00a      	beq.n	800d76a <_Z26VL53L0X_ref_calibration_ioP13VL53L0X_Dev_thhhPhS1_hh+0xde>
      Status |= VL53L0X_UpdateByte(Dev, 0xEE, 0x80, PhaseCal);
 800d754:	787b      	ldrb	r3, [r7, #1]
 800d756:	2280      	movs	r2, #128	; 0x80
 800d758:	21ee      	movs	r1, #238	; 0xee
 800d75a:	6878      	ldr	r0, [r7, #4]
 800d75c:	f002 fc25 	bl	800ffaa <VL53L0X_UpdateByte>
 800d760:	4603      	mov	r3, r0
 800d762:	461a      	mov	r2, r3
 800d764:	7bfb      	ldrb	r3, [r7, #15]
 800d766:	4313      	orrs	r3, r2
 800d768:	73fb      	strb	r3, [r7, #15]
  }

  Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800d76a:	2201      	movs	r2, #1
 800d76c:	21ff      	movs	r1, #255	; 0xff
 800d76e:	6878      	ldr	r0, [r7, #4]
 800d770:	f002 fbd7 	bl	800ff22 <VL53L0X_WrByte>
 800d774:	4603      	mov	r3, r0
 800d776:	461a      	mov	r2, r3
 800d778:	7bfb      	ldrb	r3, [r7, #15]
 800d77a:	4313      	orrs	r3, r2
 800d77c:	73fb      	strb	r3, [r7, #15]
  Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 800d77e:	2201      	movs	r2, #1
 800d780:	2100      	movs	r1, #0
 800d782:	6878      	ldr	r0, [r7, #4]
 800d784:	f002 fbcd 	bl	800ff22 <VL53L0X_WrByte>
 800d788:	4603      	mov	r3, r0
 800d78a:	461a      	mov	r2, r3
 800d78c:	7bfb      	ldrb	r3, [r7, #15]
 800d78e:	4313      	orrs	r3, r2
 800d790:	73fb      	strb	r3, [r7, #15]
  Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800d792:	2200      	movs	r2, #0
 800d794:	21ff      	movs	r1, #255	; 0xff
 800d796:	6878      	ldr	r0, [r7, #4]
 800d798:	f002 fbc3 	bl	800ff22 <VL53L0X_WrByte>
 800d79c:	4603      	mov	r3, r0
 800d79e:	461a      	mov	r2, r3
 800d7a0:	7bfb      	ldrb	r3, [r7, #15]
 800d7a2:	4313      	orrs	r3, r2
 800d7a4:	73fb      	strb	r3, [r7, #15]

  *pPhaseCal = (uint8_t)(PhaseCalint & 0xEF);
 800d7a6:	7bbb      	ldrb	r3, [r7, #14]
 800d7a8:	f023 0310 	bic.w	r3, r3, #16
 800d7ac:	b2da      	uxtb	r2, r3
 800d7ae:	69fb      	ldr	r3, [r7, #28]
 800d7b0:	701a      	strb	r2, [r3, #0]

  return Status;
 800d7b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800d7b6:	4618      	mov	r0, r3
 800d7b8:	3710      	adds	r7, #16
 800d7ba:	46bd      	mov	sp, r7
 800d7bc:	bd80      	pop	{r7, pc}

0800d7be <_Z31VL53L0X_perform_vhv_calibrationP13VL53L0X_Dev_tPhhh>:

VL53L0X_Error VL53L0X_perform_vhv_calibration(VL53L0X_DEV Dev,
                                              uint8_t *pVhvSettings,
                                              const uint8_t get_data_enable,
                                              const uint8_t restore_config) {
 800d7be:	b580      	push	{r7, lr}
 800d7c0:	b08a      	sub	sp, #40	; 0x28
 800d7c2:	af04      	add	r7, sp, #16
 800d7c4:	60f8      	str	r0, [r7, #12]
 800d7c6:	60b9      	str	r1, [r7, #8]
 800d7c8:	4611      	mov	r1, r2
 800d7ca:	461a      	mov	r2, r3
 800d7cc:	460b      	mov	r3, r1
 800d7ce:	71fb      	strb	r3, [r7, #7]
 800d7d0:	4613      	mov	r3, r2
 800d7d2:	71bb      	strb	r3, [r7, #6]
  VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800d7d4:	2300      	movs	r3, #0
 800d7d6:	75fb      	strb	r3, [r7, #23]
  uint8_t SequenceConfig = 0;
 800d7d8:	2300      	movs	r3, #0
 800d7da:	753b      	strb	r3, [r7, #20]
  uint8_t VhvSettings = 0;
 800d7dc:	2300      	movs	r3, #0
 800d7de:	75bb      	strb	r3, [r7, #22]
  uint8_t PhaseCal = 0;
 800d7e0:	2300      	movs	r3, #0
 800d7e2:	757b      	strb	r3, [r7, #21]
  uint8_t PhaseCalInt = 0;
 800d7e4:	2300      	movs	r3, #0
 800d7e6:	74fb      	strb	r3, [r7, #19]

  /* store the value of the sequence config,
   * this will be reset before the end of the function
   */

  if (restore_config)
 800d7e8:	79bb      	ldrb	r3, [r7, #6]
 800d7ea:	2b00      	cmp	r3, #0
 800d7ec:	d003      	beq.n	800d7f6 <_Z31VL53L0X_perform_vhv_calibrationP13VL53L0X_Dev_tPhhh+0x38>
    SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 800d7ee:	68fb      	ldr	r3, [r7, #12]
 800d7f0:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 800d7f4:	753b      	strb	r3, [r7, #20]

  /* Run VHV */
  Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x01);
 800d7f6:	2201      	movs	r2, #1
 800d7f8:	2101      	movs	r1, #1
 800d7fa:	68f8      	ldr	r0, [r7, #12]
 800d7fc:	f002 fb91 	bl	800ff22 <VL53L0X_WrByte>
 800d800:	4603      	mov	r3, r0
 800d802:	75fb      	strb	r3, [r7, #23]

  if (Status == VL53L0X_ERROR_NONE)
 800d804:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d808:	2b00      	cmp	r3, #0
 800d80a:	d105      	bne.n	800d818 <_Z31VL53L0X_perform_vhv_calibrationP13VL53L0X_Dev_tPhhh+0x5a>
    Status = VL53L0X_perform_single_ref_calibration(Dev, 0x40);
 800d80c:	2140      	movs	r1, #64	; 0x40
 800d80e:	68f8      	ldr	r0, [r7, #12]
 800d810:	f7ff ff01 	bl	800d616 <_Z38VL53L0X_perform_single_ref_calibrationP13VL53L0X_Dev_th>
 800d814:	4603      	mov	r3, r0
 800d816:	75fb      	strb	r3, [r7, #23]

  /* Read VHV from device */
  if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 800d818:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d81c:	2b00      	cmp	r3, #0
 800d81e:	d115      	bne.n	800d84c <_Z31VL53L0X_perform_vhv_calibrationP13VL53L0X_Dev_tPhhh+0x8e>
 800d820:	79fb      	ldrb	r3, [r7, #7]
 800d822:	2b01      	cmp	r3, #1
 800d824:	d112      	bne.n	800d84c <_Z31VL53L0X_perform_vhv_calibrationP13VL53L0X_Dev_tPhhh+0x8e>
    Status = VL53L0X_ref_calibration_io(Dev, 1, VhvSettings,
 800d826:	7d79      	ldrb	r1, [r7, #21]
 800d828:	7dba      	ldrb	r2, [r7, #22]
 800d82a:	2300      	movs	r3, #0
 800d82c:	9303      	str	r3, [sp, #12]
 800d82e:	2301      	movs	r3, #1
 800d830:	9302      	str	r3, [sp, #8]
 800d832:	f107 0313 	add.w	r3, r7, #19
 800d836:	9301      	str	r3, [sp, #4]
 800d838:	68bb      	ldr	r3, [r7, #8]
 800d83a:	9300      	str	r3, [sp, #0]
 800d83c:	460b      	mov	r3, r1
 800d83e:	2101      	movs	r1, #1
 800d840:	68f8      	ldr	r0, [r7, #12]
 800d842:	f7ff ff23 	bl	800d68c <_Z26VL53L0X_ref_calibration_ioP13VL53L0X_Dev_thhhPhS1_hh>
 800d846:	4603      	mov	r3, r0
 800d848:	75fb      	strb	r3, [r7, #23]
 800d84a:	e002      	b.n	800d852 <_Z31VL53L0X_perform_vhv_calibrationP13VL53L0X_Dev_tPhhh+0x94>
                                        PhaseCal, /* Not used here */
                                        pVhvSettings, &PhaseCalInt, 1, 0);
  } else
    *pVhvSettings = 0;
 800d84c:	68bb      	ldr	r3, [r7, #8]
 800d84e:	2200      	movs	r2, #0
 800d850:	701a      	strb	r2, [r3, #0]

  if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 800d852:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d856:	2b00      	cmp	r3, #0
 800d858:	d112      	bne.n	800d880 <_Z31VL53L0X_perform_vhv_calibrationP13VL53L0X_Dev_tPhhh+0xc2>
 800d85a:	79bb      	ldrb	r3, [r7, #6]
 800d85c:	2b00      	cmp	r3, #0
 800d85e:	d00f      	beq.n	800d880 <_Z31VL53L0X_perform_vhv_calibrationP13VL53L0X_Dev_tPhhh+0xc2>
    /* restore the previous Sequence Config */
    Status =
        VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, SequenceConfig);
 800d860:	7d3b      	ldrb	r3, [r7, #20]
    Status =
 800d862:	461a      	mov	r2, r3
 800d864:	2101      	movs	r1, #1
 800d866:	68f8      	ldr	r0, [r7, #12]
 800d868:	f002 fb5b 	bl	800ff22 <VL53L0X_WrByte>
 800d86c:	4603      	mov	r3, r0
 800d86e:	75fb      	strb	r3, [r7, #23]
    if (Status == VL53L0X_ERROR_NONE)
 800d870:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d874:	2b00      	cmp	r3, #0
 800d876:	d103      	bne.n	800d880 <_Z31VL53L0X_perform_vhv_calibrationP13VL53L0X_Dev_tPhhh+0xc2>
      PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 800d878:	7d3a      	ldrb	r2, [r7, #20]
 800d87a:	68fb      	ldr	r3, [r7, #12]
 800d87c:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
  }

  return Status;
 800d880:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d884:	4618      	mov	r0, r3
 800d886:	3718      	adds	r7, #24
 800d888:	46bd      	mov	sp, r7
 800d88a:	bd80      	pop	{r7, pc}

0800d88c <VL53L0X_perform_phase_calibration>:

VL53L0X_Error VL53L0X_perform_phase_calibration(VL53L0X_DEV Dev,
                                                uint8_t *pPhaseCal,
                                                const uint8_t get_data_enable,
                                                const uint8_t restore_config) {
 800d88c:	b580      	push	{r7, lr}
 800d88e:	b08a      	sub	sp, #40	; 0x28
 800d890:	af04      	add	r7, sp, #16
 800d892:	60f8      	str	r0, [r7, #12]
 800d894:	60b9      	str	r1, [r7, #8]
 800d896:	4611      	mov	r1, r2
 800d898:	461a      	mov	r2, r3
 800d89a:	460b      	mov	r3, r1
 800d89c:	71fb      	strb	r3, [r7, #7]
 800d89e:	4613      	mov	r3, r2
 800d8a0:	71bb      	strb	r3, [r7, #6]
  VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800d8a2:	2300      	movs	r3, #0
 800d8a4:	75fb      	strb	r3, [r7, #23]
  uint8_t SequenceConfig = 0;
 800d8a6:	2300      	movs	r3, #0
 800d8a8:	753b      	strb	r3, [r7, #20]
  uint8_t VhvSettings = 0;
 800d8aa:	2300      	movs	r3, #0
 800d8ac:	75bb      	strb	r3, [r7, #22]
  uint8_t PhaseCal = 0;
 800d8ae:	2300      	movs	r3, #0
 800d8b0:	757b      	strb	r3, [r7, #21]

  /* store the value of the sequence config,
   * this will be reset before the end of the function
   */

  if (restore_config)
 800d8b2:	79bb      	ldrb	r3, [r7, #6]
 800d8b4:	2b00      	cmp	r3, #0
 800d8b6:	d003      	beq.n	800d8c0 <VL53L0X_perform_phase_calibration+0x34>
    SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 800d8b8:	68fb      	ldr	r3, [r7, #12]
 800d8ba:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 800d8be:	753b      	strb	r3, [r7, #20]

  /* Run PhaseCal */
  Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x02);
 800d8c0:	2202      	movs	r2, #2
 800d8c2:	2101      	movs	r1, #1
 800d8c4:	68f8      	ldr	r0, [r7, #12]
 800d8c6:	f002 fb2c 	bl	800ff22 <VL53L0X_WrByte>
 800d8ca:	4603      	mov	r3, r0
 800d8cc:	75fb      	strb	r3, [r7, #23]

  if (Status == VL53L0X_ERROR_NONE)
 800d8ce:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d8d2:	2b00      	cmp	r3, #0
 800d8d4:	d105      	bne.n	800d8e2 <VL53L0X_perform_phase_calibration+0x56>
    Status = VL53L0X_perform_single_ref_calibration(Dev, 0x0);
 800d8d6:	2100      	movs	r1, #0
 800d8d8:	68f8      	ldr	r0, [r7, #12]
 800d8da:	f7ff fe9c 	bl	800d616 <_Z38VL53L0X_perform_single_ref_calibrationP13VL53L0X_Dev_th>
 800d8de:	4603      	mov	r3, r0
 800d8e0:	75fb      	strb	r3, [r7, #23]

  /* Read PhaseCal from device */
  if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 800d8e2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d8e6:	2b00      	cmp	r3, #0
 800d8e8:	d115      	bne.n	800d916 <VL53L0X_perform_phase_calibration+0x8a>
 800d8ea:	79fb      	ldrb	r3, [r7, #7]
 800d8ec:	2b01      	cmp	r3, #1
 800d8ee:	d112      	bne.n	800d916 <VL53L0X_perform_phase_calibration+0x8a>
    Status = VL53L0X_ref_calibration_io(Dev, 1, VhvSettings,
 800d8f0:	7d79      	ldrb	r1, [r7, #21]
 800d8f2:	7dba      	ldrb	r2, [r7, #22]
 800d8f4:	2301      	movs	r3, #1
 800d8f6:	9303      	str	r3, [sp, #12]
 800d8f8:	2300      	movs	r3, #0
 800d8fa:	9302      	str	r3, [sp, #8]
 800d8fc:	68bb      	ldr	r3, [r7, #8]
 800d8fe:	9301      	str	r3, [sp, #4]
 800d900:	f107 0313 	add.w	r3, r7, #19
 800d904:	9300      	str	r3, [sp, #0]
 800d906:	460b      	mov	r3, r1
 800d908:	2101      	movs	r1, #1
 800d90a:	68f8      	ldr	r0, [r7, #12]
 800d90c:	f7ff febe 	bl	800d68c <_Z26VL53L0X_ref_calibration_ioP13VL53L0X_Dev_thhhPhS1_hh>
 800d910:	4603      	mov	r3, r0
 800d912:	75fb      	strb	r3, [r7, #23]
 800d914:	e002      	b.n	800d91c <VL53L0X_perform_phase_calibration+0x90>
                                        PhaseCal, /* Not used here */
                                        &VhvSettingsint, pPhaseCal, 0, 1);
  } else
    *pPhaseCal = 0;
 800d916:	68bb      	ldr	r3, [r7, #8]
 800d918:	2200      	movs	r2, #0
 800d91a:	701a      	strb	r2, [r3, #0]

  if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 800d91c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d920:	2b00      	cmp	r3, #0
 800d922:	d112      	bne.n	800d94a <VL53L0X_perform_phase_calibration+0xbe>
 800d924:	79bb      	ldrb	r3, [r7, #6]
 800d926:	2b00      	cmp	r3, #0
 800d928:	d00f      	beq.n	800d94a <VL53L0X_perform_phase_calibration+0xbe>
    /* restore the previous Sequence Config */
    Status =
        VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, SequenceConfig);
 800d92a:	7d3b      	ldrb	r3, [r7, #20]
    Status =
 800d92c:	461a      	mov	r2, r3
 800d92e:	2101      	movs	r1, #1
 800d930:	68f8      	ldr	r0, [r7, #12]
 800d932:	f002 faf6 	bl	800ff22 <VL53L0X_WrByte>
 800d936:	4603      	mov	r3, r0
 800d938:	75fb      	strb	r3, [r7, #23]
    if (Status == VL53L0X_ERROR_NONE)
 800d93a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d93e:	2b00      	cmp	r3, #0
 800d940:	d103      	bne.n	800d94a <VL53L0X_perform_phase_calibration+0xbe>
      PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 800d942:	7d3a      	ldrb	r2, [r7, #20]
 800d944:	68fb      	ldr	r3, [r7, #12]
 800d946:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
  }

  return Status;
 800d94a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d94e:	4618      	mov	r0, r3
 800d950:	3718      	adds	r7, #24
 800d952:	46bd      	mov	sp, r7
 800d954:	bd80      	pop	{r7, pc}

0800d956 <VL53L0X_perform_ref_calibration>:

VL53L0X_Error VL53L0X_perform_ref_calibration(VL53L0X_DEV Dev,
                                              uint8_t *pVhvSettings,
                                              uint8_t *pPhaseCal,
                                              uint8_t get_data_enable) {
 800d956:	b580      	push	{r7, lr}
 800d958:	b086      	sub	sp, #24
 800d95a:	af00      	add	r7, sp, #0
 800d95c:	60f8      	str	r0, [r7, #12]
 800d95e:	60b9      	str	r1, [r7, #8]
 800d960:	607a      	str	r2, [r7, #4]
 800d962:	70fb      	strb	r3, [r7, #3]
  VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800d964:	2300      	movs	r3, #0
 800d966:	75fb      	strb	r3, [r7, #23]
  uint8_t SequenceConfig = 0;
 800d968:	2300      	movs	r3, #0
 800d96a:	75bb      	strb	r3, [r7, #22]

  /* store the value of the sequence config,
   * this will be reset before the end of the function
   */

  SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 800d96c:	68fb      	ldr	r3, [r7, #12]
 800d96e:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 800d972:	75bb      	strb	r3, [r7, #22]

  /* In the following function we don't save the config to optimize
   * writes on device. Config is saved and restored only once. */
  Status =
 800d974:	78fa      	ldrb	r2, [r7, #3]
 800d976:	2300      	movs	r3, #0
 800d978:	68b9      	ldr	r1, [r7, #8]
 800d97a:	68f8      	ldr	r0, [r7, #12]
 800d97c:	f7ff ff1f 	bl	800d7be <_Z31VL53L0X_perform_vhv_calibrationP13VL53L0X_Dev_tPhhh>
 800d980:	4603      	mov	r3, r0
 800d982:	75fb      	strb	r3, [r7, #23]
      VL53L0X_perform_vhv_calibration(Dev, pVhvSettings, get_data_enable, 0);

  if (Status == VL53L0X_ERROR_NONE)
 800d984:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d988:	2b00      	cmp	r3, #0
 800d98a:	d107      	bne.n	800d99c <VL53L0X_perform_ref_calibration+0x46>
    Status =
 800d98c:	78fa      	ldrb	r2, [r7, #3]
 800d98e:	2300      	movs	r3, #0
 800d990:	6879      	ldr	r1, [r7, #4]
 800d992:	68f8      	ldr	r0, [r7, #12]
 800d994:	f7ff ff7a 	bl	800d88c <VL53L0X_perform_phase_calibration>
 800d998:	4603      	mov	r3, r0
 800d99a:	75fb      	strb	r3, [r7, #23]
        VL53L0X_perform_phase_calibration(Dev, pPhaseCal, get_data_enable, 0);

  if (Status == VL53L0X_ERROR_NONE) {
 800d99c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d9a0:	2b00      	cmp	r3, #0
 800d9a2:	d10f      	bne.n	800d9c4 <VL53L0X_perform_ref_calibration+0x6e>
    /* restore the previous Sequence Config */
    Status =
        VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, SequenceConfig);
 800d9a4:	7dbb      	ldrb	r3, [r7, #22]
    Status =
 800d9a6:	461a      	mov	r2, r3
 800d9a8:	2101      	movs	r1, #1
 800d9aa:	68f8      	ldr	r0, [r7, #12]
 800d9ac:	f002 fab9 	bl	800ff22 <VL53L0X_WrByte>
 800d9b0:	4603      	mov	r3, r0
 800d9b2:	75fb      	strb	r3, [r7, #23]
    if (Status == VL53L0X_ERROR_NONE)
 800d9b4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d9b8:	2b00      	cmp	r3, #0
 800d9ba:	d103      	bne.n	800d9c4 <VL53L0X_perform_ref_calibration+0x6e>
      PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 800d9bc:	7dba      	ldrb	r2, [r7, #22]
 800d9be:	68fb      	ldr	r3, [r7, #12]
 800d9c0:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
  }

  return Status;
 800d9c4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d9c8:	4618      	mov	r0, r3
 800d9ca:	3718      	adds	r7, #24
 800d9cc:	46bd      	mov	sp, r7
 800d9ce:	bd80      	pop	{r7, pc}

0800d9d0 <_ZSt3absd>:
// 2294. <cstdlib> should declare abs(double)

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR double
  abs(double __x)
  { return __builtin_fabs(__x); }
 800d9d0:	b480      	push	{r7}
 800d9d2:	b083      	sub	sp, #12
 800d9d4:	af00      	add	r7, sp, #0
 800d9d6:	ed87 0b00 	vstr	d0, [r7]
 800d9da:	ed97 7b00 	vldr	d7, [r7]
 800d9de:	eeb0 7bc7 	vabs.f64	d7, d7
 800d9e2:	eeb0 0b47 	vmov.f64	d0, d7
 800d9e6:	370c      	adds	r7, #12
 800d9e8:	46bd      	mov	sp, r7
 800d9ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9ee:	4770      	bx	lr

0800d9f0 <VL53L0X_measurement_poll_for_completion>:
    data[mirrorIndex] = tempData;
  }
  return Status;
}

VL53L0X_Error VL53L0X_measurement_poll_for_completion(VL53L0X_DEV Dev) {
 800d9f0:	b580      	push	{r7, lr}
 800d9f2:	b086      	sub	sp, #24
 800d9f4:	af00      	add	r7, sp, #0
 800d9f6:	6078      	str	r0, [r7, #4]
  VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800d9f8:	2300      	movs	r3, #0
 800d9fa:	75fb      	strb	r3, [r7, #23]
  uint8_t NewDataReady = 0;
 800d9fc:	2300      	movs	r3, #0
 800d9fe:	73fb      	strb	r3, [r7, #15]
  uint32_t LoopNb;

  LOG_FUNCTION_START("");

  LoopNb = 0;
 800da00:	2300      	movs	r3, #0
 800da02:	613b      	str	r3, [r7, #16]

  do {
    Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 800da04:	f107 030f 	add.w	r3, r7, #15
 800da08:	4619      	mov	r1, r3
 800da0a:	6878      	ldr	r0, [r7, #4]
 800da0c:	f7fe fdee 	bl	800c5ec <VL53L0X_GetMeasurementDataReady>
 800da10:	4603      	mov	r3, r0
 800da12:	75fb      	strb	r3, [r7, #23]
    if (Status != 0)
 800da14:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800da18:	2b00      	cmp	r3, #0
 800da1a:	d10f      	bne.n	800da3c <VL53L0X_measurement_poll_for_completion+0x4c>
      break; /* the error is set */

    if (NewDataReady == 1)
 800da1c:	7bfb      	ldrb	r3, [r7, #15]
 800da1e:	2b01      	cmp	r3, #1
 800da20:	d00e      	beq.n	800da40 <VL53L0X_measurement_poll_for_completion+0x50>
      break; /* done note that status == 0 */

    LoopNb++;
 800da22:	693b      	ldr	r3, [r7, #16]
 800da24:	3301      	adds	r3, #1
 800da26:	613b      	str	r3, [r7, #16]
    if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP) {
 800da28:	693b      	ldr	r3, [r7, #16]
 800da2a:	2bc7      	cmp	r3, #199	; 0xc7
 800da2c:	d902      	bls.n	800da34 <VL53L0X_measurement_poll_for_completion+0x44>
      Status = VL53L0X_ERROR_TIME_OUT;
 800da2e:	23f9      	movs	r3, #249	; 0xf9
 800da30:	75fb      	strb	r3, [r7, #23]
      break;
 800da32:	e006      	b.n	800da42 <VL53L0X_measurement_poll_for_completion+0x52>
    }

    VL53L0X_PollingDelay(Dev);
 800da34:	6878      	ldr	r0, [r7, #4]
 800da36:	f002 fb5d 	bl	80100f4 <VL53L0X_PollingDelay>
    Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 800da3a:	e7e3      	b.n	800da04 <VL53L0X_measurement_poll_for_completion+0x14>
      break; /* the error is set */
 800da3c:	bf00      	nop
 800da3e:	e000      	b.n	800da42 <VL53L0X_measurement_poll_for_completion+0x52>
      break; /* done note that status == 0 */
 800da40:	bf00      	nop
  } while (1);

  LOG_FUNCTION_END(Status);

  return Status;
 800da42:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800da46:	4618      	mov	r0, r3
 800da48:	3718      	adds	r7, #24
 800da4a:	46bd      	mov	sp, r7
 800da4c:	bd80      	pop	{r7, pc}

0800da4e <VL53L0X_decode_vcsel_period>:

uint8_t VL53L0X_decode_vcsel_period(uint8_t vcsel_period_reg) {
 800da4e:	b480      	push	{r7}
 800da50:	b085      	sub	sp, #20
 800da52:	af00      	add	r7, sp, #0
 800da54:	4603      	mov	r3, r0
 800da56:	71fb      	strb	r3, [r7, #7]
  /*!
   * Converts the encoded VCSEL period register value into the real
   * period in PLL clocks
   */

  uint8_t vcsel_period_pclks = 0;
 800da58:	2300      	movs	r3, #0
 800da5a:	73fb      	strb	r3, [r7, #15]

  vcsel_period_pclks = (vcsel_period_reg + 1) << 1;
 800da5c:	79fb      	ldrb	r3, [r7, #7]
 800da5e:	3301      	adds	r3, #1
 800da60:	b2db      	uxtb	r3, r3
 800da62:	005b      	lsls	r3, r3, #1
 800da64:	73fb      	strb	r3, [r7, #15]

  return vcsel_period_pclks;
 800da66:	7bfb      	ldrb	r3, [r7, #15]
}
 800da68:	4618      	mov	r0, r3
 800da6a:	3714      	adds	r7, #20
 800da6c:	46bd      	mov	sp, r7
 800da6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da72:	4770      	bx	lr

0800da74 <VL53L0X_isqrt>:
  vcsel_period_reg = (vcsel_period_pclks >> 1) - 1;

  return vcsel_period_reg;
}

uint32_t VL53L0X_isqrt(uint32_t num) {
 800da74:	b480      	push	{r7}
 800da76:	b085      	sub	sp, #20
 800da78:	af00      	add	r7, sp, #0
 800da7a:	6078      	str	r0, [r7, #4]
   * Implements an integer square root
   *
   * From: http://en.wikipedia.org/wiki/Methods_of_computing_square_roots
   */

  uint32_t res = 0;
 800da7c:	2300      	movs	r3, #0
 800da7e:	60fb      	str	r3, [r7, #12]
  uint32_t bit = 1 << 30;
 800da80:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800da84:	60bb      	str	r3, [r7, #8]
  /* The second-to-top bit is set:
   *	1 << 14 for 16-bits, 1 << 30 for 32 bits */

  /* "bit" starts at the highest power of four <= the argument. */
  while (bit > num)
 800da86:	68ba      	ldr	r2, [r7, #8]
 800da88:	687b      	ldr	r3, [r7, #4]
 800da8a:	429a      	cmp	r2, r3
 800da8c:	d903      	bls.n	800da96 <VL53L0X_isqrt+0x22>
    bit >>= 2;
 800da8e:	68bb      	ldr	r3, [r7, #8]
 800da90:	089b      	lsrs	r3, r3, #2
 800da92:	60bb      	str	r3, [r7, #8]
  while (bit > num)
 800da94:	e7f7      	b.n	800da86 <VL53L0X_isqrt+0x12>

  while (bit != 0) {
 800da96:	68bb      	ldr	r3, [r7, #8]
 800da98:	2b00      	cmp	r3, #0
 800da9a:	d018      	beq.n	800dace <VL53L0X_isqrt+0x5a>
    if (num >= res + bit) {
 800da9c:	68fa      	ldr	r2, [r7, #12]
 800da9e:	68bb      	ldr	r3, [r7, #8]
 800daa0:	4413      	add	r3, r2
 800daa2:	687a      	ldr	r2, [r7, #4]
 800daa4:	429a      	cmp	r2, r3
 800daa6:	d30b      	bcc.n	800dac0 <VL53L0X_isqrt+0x4c>
      num -= res + bit;
 800daa8:	68fa      	ldr	r2, [r7, #12]
 800daaa:	68bb      	ldr	r3, [r7, #8]
 800daac:	4413      	add	r3, r2
 800daae:	687a      	ldr	r2, [r7, #4]
 800dab0:	1ad3      	subs	r3, r2, r3
 800dab2:	607b      	str	r3, [r7, #4]
      res = (res >> 1) + bit;
 800dab4:	68fb      	ldr	r3, [r7, #12]
 800dab6:	085b      	lsrs	r3, r3, #1
 800dab8:	68ba      	ldr	r2, [r7, #8]
 800daba:	4413      	add	r3, r2
 800dabc:	60fb      	str	r3, [r7, #12]
 800dabe:	e002      	b.n	800dac6 <VL53L0X_isqrt+0x52>
    } else
      res >>= 1;
 800dac0:	68fb      	ldr	r3, [r7, #12]
 800dac2:	085b      	lsrs	r3, r3, #1
 800dac4:	60fb      	str	r3, [r7, #12]

    bit >>= 2;
 800dac6:	68bb      	ldr	r3, [r7, #8]
 800dac8:	089b      	lsrs	r3, r3, #2
 800daca:	60bb      	str	r3, [r7, #8]
  while (bit != 0) {
 800dacc:	e7e3      	b.n	800da96 <VL53L0X_isqrt+0x22>
  }

  return res;
 800dace:	68fb      	ldr	r3, [r7, #12]
}
 800dad0:	4618      	mov	r0, r3
 800dad2:	3714      	adds	r7, #20
 800dad4:	46bd      	mov	sp, r7
 800dad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dada:	4770      	bx	lr

0800dadc <_Z26VL53L0X_device_read_strobeP13VL53L0X_Dev_t>:
    res = VL53L0X_isqrt(a * a + b * b);

  return res;
}

VL53L0X_Error VL53L0X_device_read_strobe(VL53L0X_DEV Dev) {
 800dadc:	b580      	push	{r7, lr}
 800dade:	b086      	sub	sp, #24
 800dae0:	af00      	add	r7, sp, #0
 800dae2:	6078      	str	r0, [r7, #4]
  VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800dae4:	2300      	movs	r3, #0
 800dae6:	75fb      	strb	r3, [r7, #23]
  uint8_t strobe;
  uint32_t LoopNb;
  LOG_FUNCTION_START("");

  Status |= VL53L0X_WrByte(Dev, 0x83, 0x00);
 800dae8:	2200      	movs	r2, #0
 800daea:	2183      	movs	r1, #131	; 0x83
 800daec:	6878      	ldr	r0, [r7, #4]
 800daee:	f002 fa18 	bl	800ff22 <VL53L0X_WrByte>
 800daf2:	4603      	mov	r3, r0
 800daf4:	461a      	mov	r2, r3
 800daf6:	7dfb      	ldrb	r3, [r7, #23]
 800daf8:	4313      	orrs	r3, r2
 800dafa:	75fb      	strb	r3, [r7, #23]

  /* polling
   * use timeout to avoid deadlock*/
  if (Status == VL53L0X_ERROR_NONE) {
 800dafc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800db00:	2b00      	cmp	r3, #0
 800db02:	d11d      	bne.n	800db40 <_Z26VL53L0X_device_read_strobeP13VL53L0X_Dev_t+0x64>
    LoopNb = 0;
 800db04:	2300      	movs	r3, #0
 800db06:	613b      	str	r3, [r7, #16]
    do {
      Status = VL53L0X_RdByte(Dev, 0x83, &strobe);
 800db08:	f107 030f 	add.w	r3, r7, #15
 800db0c:	461a      	mov	r2, r3
 800db0e:	2183      	movs	r1, #131	; 0x83
 800db10:	6878      	ldr	r0, [r7, #4]
 800db12:	f002 fa8c 	bl	801002e <VL53L0X_RdByte>
 800db16:	4603      	mov	r3, r0
 800db18:	75fb      	strb	r3, [r7, #23]
      if ((strobe != 0x00) || Status != VL53L0X_ERROR_NONE)
 800db1a:	7bfb      	ldrb	r3, [r7, #15]
 800db1c:	2b00      	cmp	r3, #0
 800db1e:	d10a      	bne.n	800db36 <_Z26VL53L0X_device_read_strobeP13VL53L0X_Dev_t+0x5a>
 800db20:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800db24:	2b00      	cmp	r3, #0
 800db26:	d106      	bne.n	800db36 <_Z26VL53L0X_device_read_strobeP13VL53L0X_Dev_t+0x5a>
        break;

      LoopNb = LoopNb + 1;
 800db28:	693b      	ldr	r3, [r7, #16]
 800db2a:	3301      	adds	r3, #1
 800db2c:	613b      	str	r3, [r7, #16]
    } while (LoopNb < VL53L0X_DEFAULT_MAX_LOOP);
 800db2e:	693b      	ldr	r3, [r7, #16]
 800db30:	2bc7      	cmp	r3, #199	; 0xc7
 800db32:	d800      	bhi.n	800db36 <_Z26VL53L0X_device_read_strobeP13VL53L0X_Dev_t+0x5a>
    do {
 800db34:	e7e8      	b.n	800db08 <_Z26VL53L0X_device_read_strobeP13VL53L0X_Dev_t+0x2c>

    if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 800db36:	693b      	ldr	r3, [r7, #16]
 800db38:	2bc7      	cmp	r3, #199	; 0xc7
 800db3a:	d901      	bls.n	800db40 <_Z26VL53L0X_device_read_strobeP13VL53L0X_Dev_t+0x64>
      Status = VL53L0X_ERROR_TIME_OUT;
 800db3c:	23f9      	movs	r3, #249	; 0xf9
 800db3e:	75fb      	strb	r3, [r7, #23]
  }

  Status |= VL53L0X_WrByte(Dev, 0x83, 0x01);
 800db40:	2201      	movs	r2, #1
 800db42:	2183      	movs	r1, #131	; 0x83
 800db44:	6878      	ldr	r0, [r7, #4]
 800db46:	f002 f9ec 	bl	800ff22 <VL53L0X_WrByte>
 800db4a:	4603      	mov	r3, r0
 800db4c:	461a      	mov	r2, r3
 800db4e:	7dfb      	ldrb	r3, [r7, #23]
 800db50:	4313      	orrs	r3, r2
 800db52:	75fb      	strb	r3, [r7, #23]

  LOG_FUNCTION_END(Status);
  return Status;
 800db54:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800db58:	4618      	mov	r0, r3
 800db5a:	3718      	adds	r7, #24
 800db5c:	46bd      	mov	sp, r7
 800db5e:	bd80      	pop	{r7, pc}

0800db60 <VL53L0X_get_info_from_device>:

VL53L0X_Error VL53L0X_get_info_from_device(VL53L0X_DEV Dev, uint8_t option) {
 800db60:	b580      	push	{r7, lr}
 800db62:	b098      	sub	sp, #96	; 0x60
 800db64:	af00      	add	r7, sp, #0
 800db66:	6078      	str	r0, [r7, #4]
 800db68:	460b      	mov	r3, r1
 800db6a:	70fb      	strb	r3, [r7, #3]

  VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800db6c:	2300      	movs	r3, #0
 800db6e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  uint8_t byte;
  uint32_t TmpDWord;
  uint8_t ModuleId;
  uint8_t Revision;
  uint8_t ReferenceSpadCount = 0;
 800db72:	2300      	movs	r3, #0
 800db74:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  uint8_t ReferenceSpadType = 0;
 800db78:	2300      	movs	r3, #0
 800db7a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  uint32_t PartUIDUpper = 0;
 800db7e:	2300      	movs	r3, #0
 800db80:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t PartUIDLower = 0;
 800db82:	2300      	movs	r3, #0
 800db84:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t OffsetFixed1104_mm = 0;
 800db86:	2300      	movs	r3, #0
 800db88:	64fb      	str	r3, [r7, #76]	; 0x4c
  int16_t OffsetMicroMeters = 0;
 800db8a:	2300      	movs	r3, #0
 800db8c:	857b      	strh	r3, [r7, #42]	; 0x2a
  uint32_t DistMeasTgtFixed1104_mm = 400 << 4;
 800db8e:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 800db92:	64bb      	str	r3, [r7, #72]	; 0x48
  uint32_t DistMeasFixed1104_400_mm = 0;
 800db94:	2300      	movs	r3, #0
 800db96:	65bb      	str	r3, [r7, #88]	; 0x58
  uint32_t SignalRateMeasFixed1104_400_mm = 0;
 800db98:	2300      	movs	r3, #0
 800db9a:	657b      	str	r3, [r7, #84]	; 0x54
  char ProductId[19];
  char *ProductId_tmp;
  uint8_t ReadDataFromDeviceDone;
  FixPoint1616_t SignalRateMeasFixed400mmFix = 0;
 800db9c:	2300      	movs	r3, #0
 800db9e:	613b      	str	r3, [r7, #16]
  uint8_t NvmRefGoodSpadMap[VL53L0X_REF_SPAD_BUFFER_SIZE];
  int i;

  LOG_FUNCTION_START("");

  ReadDataFromDeviceDone =
 800dba0:	687b      	ldr	r3, [r7, #4]
 800dba2:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 800dba6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      VL53L0X_GETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone);

  /* This access is done only once after that a GetDeviceInfo or
   * datainit is done*/
  if (ReadDataFromDeviceDone != 7) {
 800dbaa:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800dbae:	2b07      	cmp	r3, #7
 800dbb0:	f000 8402 	beq.w	800e3b8 <VL53L0X_get_info_from_device+0x858>

    Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 800dbb4:	2201      	movs	r2, #1
 800dbb6:	2180      	movs	r1, #128	; 0x80
 800dbb8:	6878      	ldr	r0, [r7, #4]
 800dbba:	f002 f9b2 	bl	800ff22 <VL53L0X_WrByte>
 800dbbe:	4603      	mov	r3, r0
 800dbc0:	461a      	mov	r2, r3
 800dbc2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800dbc6:	4313      	orrs	r3, r2
 800dbc8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800dbcc:	2201      	movs	r2, #1
 800dbce:	21ff      	movs	r1, #255	; 0xff
 800dbd0:	6878      	ldr	r0, [r7, #4]
 800dbd2:	f002 f9a6 	bl	800ff22 <VL53L0X_WrByte>
 800dbd6:	4603      	mov	r3, r0
 800dbd8:	461a      	mov	r2, r3
 800dbda:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800dbde:	4313      	orrs	r3, r2
 800dbe0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800dbe4:	2200      	movs	r2, #0
 800dbe6:	2100      	movs	r1, #0
 800dbe8:	6878      	ldr	r0, [r7, #4]
 800dbea:	f002 f99a 	bl	800ff22 <VL53L0X_WrByte>
 800dbee:	4603      	mov	r3, r0
 800dbf0:	461a      	mov	r2, r3
 800dbf2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800dbf6:	4313      	orrs	r3, r2
 800dbf8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

    Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 800dbfc:	2206      	movs	r2, #6
 800dbfe:	21ff      	movs	r1, #255	; 0xff
 800dc00:	6878      	ldr	r0, [r7, #4]
 800dc02:	f002 f98e 	bl	800ff22 <VL53L0X_WrByte>
 800dc06:	4603      	mov	r3, r0
 800dc08:	461a      	mov	r2, r3
 800dc0a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800dc0e:	4313      	orrs	r3, r2
 800dc10:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 800dc14:	f107 033f 	add.w	r3, r7, #63	; 0x3f
 800dc18:	461a      	mov	r2, r3
 800dc1a:	2183      	movs	r1, #131	; 0x83
 800dc1c:	6878      	ldr	r0, [r7, #4]
 800dc1e:	f002 fa06 	bl	801002e <VL53L0X_RdByte>
 800dc22:	4603      	mov	r3, r0
 800dc24:	461a      	mov	r2, r3
 800dc26:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800dc2a:	4313      	orrs	r3, r2
 800dc2c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    Status |= VL53L0X_WrByte(Dev, 0x83, byte | 4);
 800dc30:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800dc34:	f043 0304 	orr.w	r3, r3, #4
 800dc38:	b2db      	uxtb	r3, r3
 800dc3a:	461a      	mov	r2, r3
 800dc3c:	2183      	movs	r1, #131	; 0x83
 800dc3e:	6878      	ldr	r0, [r7, #4]
 800dc40:	f002 f96f 	bl	800ff22 <VL53L0X_WrByte>
 800dc44:	4603      	mov	r3, r0
 800dc46:	461a      	mov	r2, r3
 800dc48:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800dc4c:	4313      	orrs	r3, r2
 800dc4e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    Status |= VL53L0X_WrByte(Dev, 0xFF, 0x07);
 800dc52:	2207      	movs	r2, #7
 800dc54:	21ff      	movs	r1, #255	; 0xff
 800dc56:	6878      	ldr	r0, [r7, #4]
 800dc58:	f002 f963 	bl	800ff22 <VL53L0X_WrByte>
 800dc5c:	4603      	mov	r3, r0
 800dc5e:	461a      	mov	r2, r3
 800dc60:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800dc64:	4313      	orrs	r3, r2
 800dc66:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    Status |= VL53L0X_WrByte(Dev, 0x81, 0x01);
 800dc6a:	2201      	movs	r2, #1
 800dc6c:	2181      	movs	r1, #129	; 0x81
 800dc6e:	6878      	ldr	r0, [r7, #4]
 800dc70:	f002 f957 	bl	800ff22 <VL53L0X_WrByte>
 800dc74:	4603      	mov	r3, r0
 800dc76:	461a      	mov	r2, r3
 800dc78:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800dc7c:	4313      	orrs	r3, r2
 800dc7e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

    Status |= VL53L0X_PollingDelay(Dev);
 800dc82:	6878      	ldr	r0, [r7, #4]
 800dc84:	f002 fa36 	bl	80100f4 <VL53L0X_PollingDelay>
 800dc88:	4603      	mov	r3, r0
 800dc8a:	461a      	mov	r2, r3
 800dc8c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800dc90:	4313      	orrs	r3, r2
 800dc92:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

    Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 800dc96:	2201      	movs	r2, #1
 800dc98:	2180      	movs	r1, #128	; 0x80
 800dc9a:	6878      	ldr	r0, [r7, #4]
 800dc9c:	f002 f941 	bl	800ff22 <VL53L0X_WrByte>
 800dca0:	4603      	mov	r3, r0
 800dca2:	461a      	mov	r2, r3
 800dca4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800dca8:	4313      	orrs	r3, r2
 800dcaa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

    if (((option & 1) == 1) && ((ReadDataFromDeviceDone & 1) == 0)) {
 800dcae:	78fb      	ldrb	r3, [r7, #3]
 800dcb0:	f003 0301 	and.w	r3, r3, #1
 800dcb4:	2b00      	cmp	r3, #0
 800dcb6:	f000 809a 	beq.w	800ddee <VL53L0X_get_info_from_device+0x28e>
 800dcba:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800dcbe:	f003 0301 	and.w	r3, r3, #1
 800dcc2:	2b00      	cmp	r3, #0
 800dcc4:	f040 8093 	bne.w	800ddee <VL53L0X_get_info_from_device+0x28e>
      Status |= VL53L0X_WrByte(Dev, 0x94, 0x6b);
 800dcc8:	226b      	movs	r2, #107	; 0x6b
 800dcca:	2194      	movs	r1, #148	; 0x94
 800dccc:	6878      	ldr	r0, [r7, #4]
 800dcce:	f002 f928 	bl	800ff22 <VL53L0X_WrByte>
 800dcd2:	4603      	mov	r3, r0
 800dcd4:	461a      	mov	r2, r3
 800dcd6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800dcda:	4313      	orrs	r3, r2
 800dcdc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
      Status |= VL53L0X_device_read_strobe(Dev);
 800dce0:	6878      	ldr	r0, [r7, #4]
 800dce2:	f7ff fefb 	bl	800dadc <_Z26VL53L0X_device_read_strobeP13VL53L0X_Dev_t>
 800dce6:	4603      	mov	r3, r0
 800dce8:	461a      	mov	r2, r3
 800dcea:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800dcee:	4313      	orrs	r3, r2
 800dcf0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
      Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800dcf4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800dcf8:	461a      	mov	r2, r3
 800dcfa:	2190      	movs	r1, #144	; 0x90
 800dcfc:	6878      	ldr	r0, [r7, #4]
 800dcfe:	f002 f9d8 	bl	80100b2 <VL53L0X_RdDWord>
 800dd02:	4603      	mov	r3, r0
 800dd04:	461a      	mov	r2, r3
 800dd06:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800dd0a:	4313      	orrs	r3, r2
 800dd0c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

      ReferenceSpadCount = (uint8_t)((TmpDWord >> 8) & 0x07f);
 800dd10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd12:	0a1b      	lsrs	r3, r3, #8
 800dd14:	b2db      	uxtb	r3, r3
 800dd16:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dd1a:	b2db      	uxtb	r3, r3
 800dd1c:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
      ReferenceSpadType = (uint8_t)((TmpDWord >> 15) & 0x01);
 800dd20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd22:	0bdb      	lsrs	r3, r3, #15
 800dd24:	b2db      	uxtb	r3, r3
 800dd26:	f003 0301 	and.w	r3, r3, #1
 800dd2a:	b2db      	uxtb	r3, r3
 800dd2c:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

      Status |= VL53L0X_WrByte(Dev, 0x94, 0x24);
 800dd30:	2224      	movs	r2, #36	; 0x24
 800dd32:	2194      	movs	r1, #148	; 0x94
 800dd34:	6878      	ldr	r0, [r7, #4]
 800dd36:	f002 f8f4 	bl	800ff22 <VL53L0X_WrByte>
 800dd3a:	4603      	mov	r3, r0
 800dd3c:	461a      	mov	r2, r3
 800dd3e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800dd42:	4313      	orrs	r3, r2
 800dd44:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
      Status |= VL53L0X_device_read_strobe(Dev);
 800dd48:	6878      	ldr	r0, [r7, #4]
 800dd4a:	f7ff fec7 	bl	800dadc <_Z26VL53L0X_device_read_strobeP13VL53L0X_Dev_t>
 800dd4e:	4603      	mov	r3, r0
 800dd50:	461a      	mov	r2, r3
 800dd52:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800dd56:	4313      	orrs	r3, r2
 800dd58:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
      Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800dd5c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800dd60:	461a      	mov	r2, r3
 800dd62:	2190      	movs	r1, #144	; 0x90
 800dd64:	6878      	ldr	r0, [r7, #4]
 800dd66:	f002 f9a4 	bl	80100b2 <VL53L0X_RdDWord>
 800dd6a:	4603      	mov	r3, r0
 800dd6c:	461a      	mov	r2, r3
 800dd6e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800dd72:	4313      	orrs	r3, r2
 800dd74:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

      NvmRefGoodSpadMap[0] = (uint8_t)((TmpDWord >> 24) & 0xff);
 800dd78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd7a:	0e1b      	lsrs	r3, r3, #24
 800dd7c:	b2db      	uxtb	r3, r3
 800dd7e:	723b      	strb	r3, [r7, #8]
      NvmRefGoodSpadMap[1] = (uint8_t)((TmpDWord >> 16) & 0xff);
 800dd80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd82:	0c1b      	lsrs	r3, r3, #16
 800dd84:	b2db      	uxtb	r3, r3
 800dd86:	727b      	strb	r3, [r7, #9]
      NvmRefGoodSpadMap[2] = (uint8_t)((TmpDWord >> 8) & 0xff);
 800dd88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd8a:	0a1b      	lsrs	r3, r3, #8
 800dd8c:	b2db      	uxtb	r3, r3
 800dd8e:	72bb      	strb	r3, [r7, #10]
      NvmRefGoodSpadMap[3] = (uint8_t)(TmpDWord & 0xff);
 800dd90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd92:	b2db      	uxtb	r3, r3
 800dd94:	72fb      	strb	r3, [r7, #11]

      Status |= VL53L0X_WrByte(Dev, 0x94, 0x25);
 800dd96:	2225      	movs	r2, #37	; 0x25
 800dd98:	2194      	movs	r1, #148	; 0x94
 800dd9a:	6878      	ldr	r0, [r7, #4]
 800dd9c:	f002 f8c1 	bl	800ff22 <VL53L0X_WrByte>
 800dda0:	4603      	mov	r3, r0
 800dda2:	461a      	mov	r2, r3
 800dda4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800dda8:	4313      	orrs	r3, r2
 800ddaa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
      Status |= VL53L0X_device_read_strobe(Dev);
 800ddae:	6878      	ldr	r0, [r7, #4]
 800ddb0:	f7ff fe94 	bl	800dadc <_Z26VL53L0X_device_read_strobeP13VL53L0X_Dev_t>
 800ddb4:	4603      	mov	r3, r0
 800ddb6:	461a      	mov	r2, r3
 800ddb8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ddbc:	4313      	orrs	r3, r2
 800ddbe:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
      Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800ddc2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800ddc6:	461a      	mov	r2, r3
 800ddc8:	2190      	movs	r1, #144	; 0x90
 800ddca:	6878      	ldr	r0, [r7, #4]
 800ddcc:	f002 f971 	bl	80100b2 <VL53L0X_RdDWord>
 800ddd0:	4603      	mov	r3, r0
 800ddd2:	461a      	mov	r2, r3
 800ddd4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ddd8:	4313      	orrs	r3, r2
 800ddda:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

      NvmRefGoodSpadMap[4] = (uint8_t)((TmpDWord >> 24) & 0xff);
 800ddde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dde0:	0e1b      	lsrs	r3, r3, #24
 800dde2:	b2db      	uxtb	r3, r3
 800dde4:	733b      	strb	r3, [r7, #12]
      NvmRefGoodSpadMap[5] = (uint8_t)((TmpDWord >> 16) & 0xff);
 800dde6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dde8:	0c1b      	lsrs	r3, r3, #16
 800ddea:	b2db      	uxtb	r3, r3
 800ddec:	737b      	strb	r3, [r7, #13]
    }

    if (((option & 2) == 2) && ((ReadDataFromDeviceDone & 2) == 0)) {
 800ddee:	78fb      	ldrb	r3, [r7, #3]
 800ddf0:	f003 0302 	and.w	r3, r3, #2
 800ddf4:	2b00      	cmp	r3, #0
 800ddf6:	f000 8181 	beq.w	800e0fc <VL53L0X_get_info_from_device+0x59c>
 800ddfa:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800ddfe:	f003 0302 	and.w	r3, r3, #2
 800de02:	2b00      	cmp	r3, #0
 800de04:	f040 817a 	bne.w	800e0fc <VL53L0X_get_info_from_device+0x59c>

      Status |= VL53L0X_WrByte(Dev, 0x94, 0x02);
 800de08:	2202      	movs	r2, #2
 800de0a:	2194      	movs	r1, #148	; 0x94
 800de0c:	6878      	ldr	r0, [r7, #4]
 800de0e:	f002 f888 	bl	800ff22 <VL53L0X_WrByte>
 800de12:	4603      	mov	r3, r0
 800de14:	461a      	mov	r2, r3
 800de16:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800de1a:	4313      	orrs	r3, r2
 800de1c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
      Status |= VL53L0X_device_read_strobe(Dev);
 800de20:	6878      	ldr	r0, [r7, #4]
 800de22:	f7ff fe5b 	bl	800dadc <_Z26VL53L0X_device_read_strobeP13VL53L0X_Dev_t>
 800de26:	4603      	mov	r3, r0
 800de28:	461a      	mov	r2, r3
 800de2a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800de2e:	4313      	orrs	r3, r2
 800de30:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
      Status |= VL53L0X_RdByte(Dev, 0x90, &ModuleId);
 800de34:	f107 0337 	add.w	r3, r7, #55	; 0x37
 800de38:	461a      	mov	r2, r3
 800de3a:	2190      	movs	r1, #144	; 0x90
 800de3c:	6878      	ldr	r0, [r7, #4]
 800de3e:	f002 f8f6 	bl	801002e <VL53L0X_RdByte>
 800de42:	4603      	mov	r3, r0
 800de44:	461a      	mov	r2, r3
 800de46:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800de4a:	4313      	orrs	r3, r2
 800de4c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

      Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 800de50:	227b      	movs	r2, #123	; 0x7b
 800de52:	2194      	movs	r1, #148	; 0x94
 800de54:	6878      	ldr	r0, [r7, #4]
 800de56:	f002 f864 	bl	800ff22 <VL53L0X_WrByte>
 800de5a:	4603      	mov	r3, r0
 800de5c:	461a      	mov	r2, r3
 800de5e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800de62:	4313      	orrs	r3, r2
 800de64:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
      Status |= VL53L0X_device_read_strobe(Dev);
 800de68:	6878      	ldr	r0, [r7, #4]
 800de6a:	f7ff fe37 	bl	800dadc <_Z26VL53L0X_device_read_strobeP13VL53L0X_Dev_t>
 800de6e:	4603      	mov	r3, r0
 800de70:	461a      	mov	r2, r3
 800de72:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800de76:	4313      	orrs	r3, r2
 800de78:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
      Status |= VL53L0X_RdByte(Dev, 0x90, &Revision);
 800de7c:	f107 0336 	add.w	r3, r7, #54	; 0x36
 800de80:	461a      	mov	r2, r3
 800de82:	2190      	movs	r1, #144	; 0x90
 800de84:	6878      	ldr	r0, [r7, #4]
 800de86:	f002 f8d2 	bl	801002e <VL53L0X_RdByte>
 800de8a:	4603      	mov	r3, r0
 800de8c:	461a      	mov	r2, r3
 800de8e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800de92:	4313      	orrs	r3, r2
 800de94:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

      Status |= VL53L0X_WrByte(Dev, 0x94, 0x77);
 800de98:	2277      	movs	r2, #119	; 0x77
 800de9a:	2194      	movs	r1, #148	; 0x94
 800de9c:	6878      	ldr	r0, [r7, #4]
 800de9e:	f002 f840 	bl	800ff22 <VL53L0X_WrByte>
 800dea2:	4603      	mov	r3, r0
 800dea4:	461a      	mov	r2, r3
 800dea6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800deaa:	4313      	orrs	r3, r2
 800deac:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
      Status |= VL53L0X_device_read_strobe(Dev);
 800deb0:	6878      	ldr	r0, [r7, #4]
 800deb2:	f7ff fe13 	bl	800dadc <_Z26VL53L0X_device_read_strobeP13VL53L0X_Dev_t>
 800deb6:	4603      	mov	r3, r0
 800deb8:	461a      	mov	r2, r3
 800deba:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800debe:	4313      	orrs	r3, r2
 800dec0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
      Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800dec4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800dec8:	461a      	mov	r2, r3
 800deca:	2190      	movs	r1, #144	; 0x90
 800decc:	6878      	ldr	r0, [r7, #4]
 800dece:	f002 f8f0 	bl	80100b2 <VL53L0X_RdDWord>
 800ded2:	4603      	mov	r3, r0
 800ded4:	461a      	mov	r2, r3
 800ded6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800deda:	4313      	orrs	r3, r2
 800dedc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

      ProductId[0] = (char)((TmpDWord >> 25) & 0x07f);
 800dee0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dee2:	0e5b      	lsrs	r3, r3, #25
 800dee4:	b2db      	uxtb	r3, r3
 800dee6:	753b      	strb	r3, [r7, #20]
      ProductId[1] = (char)((TmpDWord >> 18) & 0x07f);
 800dee8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800deea:	0c9b      	lsrs	r3, r3, #18
 800deec:	b2db      	uxtb	r3, r3
 800deee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800def2:	b2db      	uxtb	r3, r3
 800def4:	757b      	strb	r3, [r7, #21]
      ProductId[2] = (char)((TmpDWord >> 11) & 0x07f);
 800def6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800def8:	0adb      	lsrs	r3, r3, #11
 800defa:	b2db      	uxtb	r3, r3
 800defc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800df00:	b2db      	uxtb	r3, r3
 800df02:	75bb      	strb	r3, [r7, #22]
      ProductId[3] = (char)((TmpDWord >> 4) & 0x07f);
 800df04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df06:	091b      	lsrs	r3, r3, #4
 800df08:	b2db      	uxtb	r3, r3
 800df0a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800df0e:	b2db      	uxtb	r3, r3
 800df10:	75fb      	strb	r3, [r7, #23]

      byte = (uint8_t)((TmpDWord & 0x00f) << 3);
 800df12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df14:	b2db      	uxtb	r3, r3
 800df16:	00db      	lsls	r3, r3, #3
 800df18:	b2db      	uxtb	r3, r3
 800df1a:	f003 0378 	and.w	r3, r3, #120	; 0x78
 800df1e:	b2db      	uxtb	r3, r3
 800df20:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

      Status |= VL53L0X_WrByte(Dev, 0x94, 0x78);
 800df24:	2278      	movs	r2, #120	; 0x78
 800df26:	2194      	movs	r1, #148	; 0x94
 800df28:	6878      	ldr	r0, [r7, #4]
 800df2a:	f001 fffa 	bl	800ff22 <VL53L0X_WrByte>
 800df2e:	4603      	mov	r3, r0
 800df30:	461a      	mov	r2, r3
 800df32:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800df36:	4313      	orrs	r3, r2
 800df38:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
      Status |= VL53L0X_device_read_strobe(Dev);
 800df3c:	6878      	ldr	r0, [r7, #4]
 800df3e:	f7ff fdcd 	bl	800dadc <_Z26VL53L0X_device_read_strobeP13VL53L0X_Dev_t>
 800df42:	4603      	mov	r3, r0
 800df44:	461a      	mov	r2, r3
 800df46:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800df4a:	4313      	orrs	r3, r2
 800df4c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
      Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800df50:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800df54:	461a      	mov	r2, r3
 800df56:	2190      	movs	r1, #144	; 0x90
 800df58:	6878      	ldr	r0, [r7, #4]
 800df5a:	f002 f8aa 	bl	80100b2 <VL53L0X_RdDWord>
 800df5e:	4603      	mov	r3, r0
 800df60:	461a      	mov	r2, r3
 800df62:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800df66:	4313      	orrs	r3, r2
 800df68:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

      ProductId[4] = (char)(byte + ((TmpDWord >> 29) & 0x07f));
 800df6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df6e:	0f5b      	lsrs	r3, r3, #29
 800df70:	b2da      	uxtb	r2, r3
 800df72:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800df76:	4413      	add	r3, r2
 800df78:	b2db      	uxtb	r3, r3
 800df7a:	763b      	strb	r3, [r7, #24]
      ProductId[5] = (char)((TmpDWord >> 22) & 0x07f);
 800df7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df7e:	0d9b      	lsrs	r3, r3, #22
 800df80:	b2db      	uxtb	r3, r3
 800df82:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800df86:	b2db      	uxtb	r3, r3
 800df88:	767b      	strb	r3, [r7, #25]
      ProductId[6] = (char)((TmpDWord >> 15) & 0x07f);
 800df8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df8c:	0bdb      	lsrs	r3, r3, #15
 800df8e:	b2db      	uxtb	r3, r3
 800df90:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800df94:	b2db      	uxtb	r3, r3
 800df96:	76bb      	strb	r3, [r7, #26]
      ProductId[7] = (char)((TmpDWord >> 8) & 0x07f);
 800df98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df9a:	0a1b      	lsrs	r3, r3, #8
 800df9c:	b2db      	uxtb	r3, r3
 800df9e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dfa2:	b2db      	uxtb	r3, r3
 800dfa4:	76fb      	strb	r3, [r7, #27]
      ProductId[8] = (char)((TmpDWord >> 1) & 0x07f);
 800dfa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dfa8:	085b      	lsrs	r3, r3, #1
 800dfaa:	b2db      	uxtb	r3, r3
 800dfac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dfb0:	b2db      	uxtb	r3, r3
 800dfb2:	773b      	strb	r3, [r7, #28]

      byte = (uint8_t)((TmpDWord & 0x001) << 6);
 800dfb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dfb6:	b2db      	uxtb	r3, r3
 800dfb8:	019b      	lsls	r3, r3, #6
 800dfba:	b2db      	uxtb	r3, r3
 800dfbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dfc0:	b2db      	uxtb	r3, r3
 800dfc2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

      Status |= VL53L0X_WrByte(Dev, 0x94, 0x79);
 800dfc6:	2279      	movs	r2, #121	; 0x79
 800dfc8:	2194      	movs	r1, #148	; 0x94
 800dfca:	6878      	ldr	r0, [r7, #4]
 800dfcc:	f001 ffa9 	bl	800ff22 <VL53L0X_WrByte>
 800dfd0:	4603      	mov	r3, r0
 800dfd2:	461a      	mov	r2, r3
 800dfd4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800dfd8:	4313      	orrs	r3, r2
 800dfda:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

      Status |= VL53L0X_device_read_strobe(Dev);
 800dfde:	6878      	ldr	r0, [r7, #4]
 800dfe0:	f7ff fd7c 	bl	800dadc <_Z26VL53L0X_device_read_strobeP13VL53L0X_Dev_t>
 800dfe4:	4603      	mov	r3, r0
 800dfe6:	461a      	mov	r2, r3
 800dfe8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800dfec:	4313      	orrs	r3, r2
 800dfee:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

      Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800dff2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800dff6:	461a      	mov	r2, r3
 800dff8:	2190      	movs	r1, #144	; 0x90
 800dffa:	6878      	ldr	r0, [r7, #4]
 800dffc:	f002 f859 	bl	80100b2 <VL53L0X_RdDWord>
 800e000:	4603      	mov	r3, r0
 800e002:	461a      	mov	r2, r3
 800e004:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e008:	4313      	orrs	r3, r2
 800e00a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

      ProductId[9] = (char)(byte + ((TmpDWord >> 26) & 0x07f));
 800e00e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e010:	0e9b      	lsrs	r3, r3, #26
 800e012:	b2da      	uxtb	r2, r3
 800e014:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800e018:	4413      	add	r3, r2
 800e01a:	b2db      	uxtb	r3, r3
 800e01c:	777b      	strb	r3, [r7, #29]
      ProductId[10] = (char)((TmpDWord >> 19) & 0x07f);
 800e01e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e020:	0cdb      	lsrs	r3, r3, #19
 800e022:	b2db      	uxtb	r3, r3
 800e024:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e028:	b2db      	uxtb	r3, r3
 800e02a:	77bb      	strb	r3, [r7, #30]
      ProductId[11] = (char)((TmpDWord >> 12) & 0x07f);
 800e02c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e02e:	0b1b      	lsrs	r3, r3, #12
 800e030:	b2db      	uxtb	r3, r3
 800e032:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e036:	b2db      	uxtb	r3, r3
 800e038:	77fb      	strb	r3, [r7, #31]
      ProductId[12] = (char)((TmpDWord >> 5) & 0x07f);
 800e03a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e03c:	095b      	lsrs	r3, r3, #5
 800e03e:	b2db      	uxtb	r3, r3
 800e040:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e044:	b2db      	uxtb	r3, r3
 800e046:	f887 3020 	strb.w	r3, [r7, #32]

      byte = (uint8_t)((TmpDWord & 0x01f) << 2);
 800e04a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e04c:	b2db      	uxtb	r3, r3
 800e04e:	009b      	lsls	r3, r3, #2
 800e050:	b2db      	uxtb	r3, r3
 800e052:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 800e056:	b2db      	uxtb	r3, r3
 800e058:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

      Status |= VL53L0X_WrByte(Dev, 0x94, 0x7A);
 800e05c:	227a      	movs	r2, #122	; 0x7a
 800e05e:	2194      	movs	r1, #148	; 0x94
 800e060:	6878      	ldr	r0, [r7, #4]
 800e062:	f001 ff5e 	bl	800ff22 <VL53L0X_WrByte>
 800e066:	4603      	mov	r3, r0
 800e068:	461a      	mov	r2, r3
 800e06a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e06e:	4313      	orrs	r3, r2
 800e070:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

      Status |= VL53L0X_device_read_strobe(Dev);
 800e074:	6878      	ldr	r0, [r7, #4]
 800e076:	f7ff fd31 	bl	800dadc <_Z26VL53L0X_device_read_strobeP13VL53L0X_Dev_t>
 800e07a:	4603      	mov	r3, r0
 800e07c:	461a      	mov	r2, r3
 800e07e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e082:	4313      	orrs	r3, r2
 800e084:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

      Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800e088:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800e08c:	461a      	mov	r2, r3
 800e08e:	2190      	movs	r1, #144	; 0x90
 800e090:	6878      	ldr	r0, [r7, #4]
 800e092:	f002 f80e 	bl	80100b2 <VL53L0X_RdDWord>
 800e096:	4603      	mov	r3, r0
 800e098:	461a      	mov	r2, r3
 800e09a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e09e:	4313      	orrs	r3, r2
 800e0a0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

      ProductId[13] = (char)(byte + ((TmpDWord >> 30) & 0x07f));
 800e0a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0a6:	0f9b      	lsrs	r3, r3, #30
 800e0a8:	b2da      	uxtb	r2, r3
 800e0aa:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800e0ae:	4413      	add	r3, r2
 800e0b0:	b2db      	uxtb	r3, r3
 800e0b2:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
      ProductId[14] = (char)((TmpDWord >> 23) & 0x07f);
 800e0b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0b8:	0ddb      	lsrs	r3, r3, #23
 800e0ba:	b2db      	uxtb	r3, r3
 800e0bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e0c0:	b2db      	uxtb	r3, r3
 800e0c2:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
      ProductId[15] = (char)((TmpDWord >> 16) & 0x07f);
 800e0c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0c8:	0c1b      	lsrs	r3, r3, #16
 800e0ca:	b2db      	uxtb	r3, r3
 800e0cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e0d0:	b2db      	uxtb	r3, r3
 800e0d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
      ProductId[16] = (char)((TmpDWord >> 9) & 0x07f);
 800e0d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0d8:	0a5b      	lsrs	r3, r3, #9
 800e0da:	b2db      	uxtb	r3, r3
 800e0dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e0e0:	b2db      	uxtb	r3, r3
 800e0e2:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
      ProductId[17] = (char)((TmpDWord >> 2) & 0x07f);
 800e0e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0e8:	089b      	lsrs	r3, r3, #2
 800e0ea:	b2db      	uxtb	r3, r3
 800e0ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e0f0:	b2db      	uxtb	r3, r3
 800e0f2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
      ProductId[18] = '\0';
 800e0f6:	2300      	movs	r3, #0
 800e0f8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    }

    if (((option & 4) == 4) && ((ReadDataFromDeviceDone & 4) == 0)) {
 800e0fc:	78fb      	ldrb	r3, [r7, #3]
 800e0fe:	f003 0304 	and.w	r3, r3, #4
 800e102:	2b00      	cmp	r3, #0
 800e104:	f000 80f1 	beq.w	800e2ea <VL53L0X_get_info_from_device+0x78a>
 800e108:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800e10c:	f003 0304 	and.w	r3, r3, #4
 800e110:	2b00      	cmp	r3, #0
 800e112:	f040 80ea 	bne.w	800e2ea <VL53L0X_get_info_from_device+0x78a>

      Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 800e116:	227b      	movs	r2, #123	; 0x7b
 800e118:	2194      	movs	r1, #148	; 0x94
 800e11a:	6878      	ldr	r0, [r7, #4]
 800e11c:	f001 ff01 	bl	800ff22 <VL53L0X_WrByte>
 800e120:	4603      	mov	r3, r0
 800e122:	461a      	mov	r2, r3
 800e124:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e128:	4313      	orrs	r3, r2
 800e12a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
      Status |= VL53L0X_device_read_strobe(Dev);
 800e12e:	6878      	ldr	r0, [r7, #4]
 800e130:	f7ff fcd4 	bl	800dadc <_Z26VL53L0X_device_read_strobeP13VL53L0X_Dev_t>
 800e134:	4603      	mov	r3, r0
 800e136:	461a      	mov	r2, r3
 800e138:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e13c:	4313      	orrs	r3, r2
 800e13e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
      Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDUpper);
 800e142:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800e146:	461a      	mov	r2, r3
 800e148:	2190      	movs	r1, #144	; 0x90
 800e14a:	6878      	ldr	r0, [r7, #4]
 800e14c:	f001 ffb1 	bl	80100b2 <VL53L0X_RdDWord>
 800e150:	4603      	mov	r3, r0
 800e152:	461a      	mov	r2, r3
 800e154:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e158:	4313      	orrs	r3, r2
 800e15a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

      Status |= VL53L0X_WrByte(Dev, 0x94, 0x7C);
 800e15e:	227c      	movs	r2, #124	; 0x7c
 800e160:	2194      	movs	r1, #148	; 0x94
 800e162:	6878      	ldr	r0, [r7, #4]
 800e164:	f001 fedd 	bl	800ff22 <VL53L0X_WrByte>
 800e168:	4603      	mov	r3, r0
 800e16a:	461a      	mov	r2, r3
 800e16c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e170:	4313      	orrs	r3, r2
 800e172:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
      Status |= VL53L0X_device_read_strobe(Dev);
 800e176:	6878      	ldr	r0, [r7, #4]
 800e178:	f7ff fcb0 	bl	800dadc <_Z26VL53L0X_device_read_strobeP13VL53L0X_Dev_t>
 800e17c:	4603      	mov	r3, r0
 800e17e:	461a      	mov	r2, r3
 800e180:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e184:	4313      	orrs	r3, r2
 800e186:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
      Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDLower);
 800e18a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800e18e:	461a      	mov	r2, r3
 800e190:	2190      	movs	r1, #144	; 0x90
 800e192:	6878      	ldr	r0, [r7, #4]
 800e194:	f001 ff8d 	bl	80100b2 <VL53L0X_RdDWord>
 800e198:	4603      	mov	r3, r0
 800e19a:	461a      	mov	r2, r3
 800e19c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e1a0:	4313      	orrs	r3, r2
 800e1a2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

      Status |= VL53L0X_WrByte(Dev, 0x94, 0x73);
 800e1a6:	2273      	movs	r2, #115	; 0x73
 800e1a8:	2194      	movs	r1, #148	; 0x94
 800e1aa:	6878      	ldr	r0, [r7, #4]
 800e1ac:	f001 feb9 	bl	800ff22 <VL53L0X_WrByte>
 800e1b0:	4603      	mov	r3, r0
 800e1b2:	461a      	mov	r2, r3
 800e1b4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e1b8:	4313      	orrs	r3, r2
 800e1ba:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
      Status |= VL53L0X_device_read_strobe(Dev);
 800e1be:	6878      	ldr	r0, [r7, #4]
 800e1c0:	f7ff fc8c 	bl	800dadc <_Z26VL53L0X_device_read_strobeP13VL53L0X_Dev_t>
 800e1c4:	4603      	mov	r3, r0
 800e1c6:	461a      	mov	r2, r3
 800e1c8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e1cc:	4313      	orrs	r3, r2
 800e1ce:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
      Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800e1d2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800e1d6:	461a      	mov	r2, r3
 800e1d8:	2190      	movs	r1, #144	; 0x90
 800e1da:	6878      	ldr	r0, [r7, #4]
 800e1dc:	f001 ff69 	bl	80100b2 <VL53L0X_RdDWord>
 800e1e0:	4603      	mov	r3, r0
 800e1e2:	461a      	mov	r2, r3
 800e1e4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e1e8:	4313      	orrs	r3, r2
 800e1ea:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

      SignalRateMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff) << 8;
 800e1ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e1f0:	021b      	lsls	r3, r3, #8
 800e1f2:	b29b      	uxth	r3, r3
 800e1f4:	657b      	str	r3, [r7, #84]	; 0x54

      Status |= VL53L0X_WrByte(Dev, 0x94, 0x74);
 800e1f6:	2274      	movs	r2, #116	; 0x74
 800e1f8:	2194      	movs	r1, #148	; 0x94
 800e1fa:	6878      	ldr	r0, [r7, #4]
 800e1fc:	f001 fe91 	bl	800ff22 <VL53L0X_WrByte>
 800e200:	4603      	mov	r3, r0
 800e202:	461a      	mov	r2, r3
 800e204:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e208:	4313      	orrs	r3, r2
 800e20a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
      Status |= VL53L0X_device_read_strobe(Dev);
 800e20e:	6878      	ldr	r0, [r7, #4]
 800e210:	f7ff fc64 	bl	800dadc <_Z26VL53L0X_device_read_strobeP13VL53L0X_Dev_t>
 800e214:	4603      	mov	r3, r0
 800e216:	461a      	mov	r2, r3
 800e218:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e21c:	4313      	orrs	r3, r2
 800e21e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
      Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800e222:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800e226:	461a      	mov	r2, r3
 800e228:	2190      	movs	r1, #144	; 0x90
 800e22a:	6878      	ldr	r0, [r7, #4]
 800e22c:	f001 ff41 	bl	80100b2 <VL53L0X_RdDWord>
 800e230:	4603      	mov	r3, r0
 800e232:	461a      	mov	r2, r3
 800e234:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e238:	4313      	orrs	r3, r2
 800e23a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

      SignalRateMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000) >> 24);
 800e23e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e240:	0e1b      	lsrs	r3, r3, #24
 800e242:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800e244:	4313      	orrs	r3, r2
 800e246:	657b      	str	r3, [r7, #84]	; 0x54

      Status |= VL53L0X_WrByte(Dev, 0x94, 0x75);
 800e248:	2275      	movs	r2, #117	; 0x75
 800e24a:	2194      	movs	r1, #148	; 0x94
 800e24c:	6878      	ldr	r0, [r7, #4]
 800e24e:	f001 fe68 	bl	800ff22 <VL53L0X_WrByte>
 800e252:	4603      	mov	r3, r0
 800e254:	461a      	mov	r2, r3
 800e256:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e25a:	4313      	orrs	r3, r2
 800e25c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
      Status |= VL53L0X_device_read_strobe(Dev);
 800e260:	6878      	ldr	r0, [r7, #4]
 800e262:	f7ff fc3b 	bl	800dadc <_Z26VL53L0X_device_read_strobeP13VL53L0X_Dev_t>
 800e266:	4603      	mov	r3, r0
 800e268:	461a      	mov	r2, r3
 800e26a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e26e:	4313      	orrs	r3, r2
 800e270:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
      Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800e274:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800e278:	461a      	mov	r2, r3
 800e27a:	2190      	movs	r1, #144	; 0x90
 800e27c:	6878      	ldr	r0, [r7, #4]
 800e27e:	f001 ff18 	bl	80100b2 <VL53L0X_RdDWord>
 800e282:	4603      	mov	r3, r0
 800e284:	461a      	mov	r2, r3
 800e286:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e28a:	4313      	orrs	r3, r2
 800e28c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

      DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff) << 8;
 800e290:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e292:	021b      	lsls	r3, r3, #8
 800e294:	b29b      	uxth	r3, r3
 800e296:	65bb      	str	r3, [r7, #88]	; 0x58

      Status |= VL53L0X_WrByte(Dev, 0x94, 0x76);
 800e298:	2276      	movs	r2, #118	; 0x76
 800e29a:	2194      	movs	r1, #148	; 0x94
 800e29c:	6878      	ldr	r0, [r7, #4]
 800e29e:	f001 fe40 	bl	800ff22 <VL53L0X_WrByte>
 800e2a2:	4603      	mov	r3, r0
 800e2a4:	461a      	mov	r2, r3
 800e2a6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e2aa:	4313      	orrs	r3, r2
 800e2ac:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
      Status |= VL53L0X_device_read_strobe(Dev);
 800e2b0:	6878      	ldr	r0, [r7, #4]
 800e2b2:	f7ff fc13 	bl	800dadc <_Z26VL53L0X_device_read_strobeP13VL53L0X_Dev_t>
 800e2b6:	4603      	mov	r3, r0
 800e2b8:	461a      	mov	r2, r3
 800e2ba:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e2be:	4313      	orrs	r3, r2
 800e2c0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
      Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800e2c4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800e2c8:	461a      	mov	r2, r3
 800e2ca:	2190      	movs	r1, #144	; 0x90
 800e2cc:	6878      	ldr	r0, [r7, #4]
 800e2ce:	f001 fef0 	bl	80100b2 <VL53L0X_RdDWord>
 800e2d2:	4603      	mov	r3, r0
 800e2d4:	461a      	mov	r2, r3
 800e2d6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e2da:	4313      	orrs	r3, r2
 800e2dc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

      DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000) >> 24);
 800e2e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2e2:	0e1b      	lsrs	r3, r3, #24
 800e2e4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e2e6:	4313      	orrs	r3, r2
 800e2e8:	65bb      	str	r3, [r7, #88]	; 0x58
    }

    Status |= VL53L0X_WrByte(Dev, 0x81, 0x00);
 800e2ea:	2200      	movs	r2, #0
 800e2ec:	2181      	movs	r1, #129	; 0x81
 800e2ee:	6878      	ldr	r0, [r7, #4]
 800e2f0:	f001 fe17 	bl	800ff22 <VL53L0X_WrByte>
 800e2f4:	4603      	mov	r3, r0
 800e2f6:	461a      	mov	r2, r3
 800e2f8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e2fc:	4313      	orrs	r3, r2
 800e2fe:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 800e302:	2206      	movs	r2, #6
 800e304:	21ff      	movs	r1, #255	; 0xff
 800e306:	6878      	ldr	r0, [r7, #4]
 800e308:	f001 fe0b 	bl	800ff22 <VL53L0X_WrByte>
 800e30c:	4603      	mov	r3, r0
 800e30e:	461a      	mov	r2, r3
 800e310:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e314:	4313      	orrs	r3, r2
 800e316:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 800e31a:	f107 033f 	add.w	r3, r7, #63	; 0x3f
 800e31e:	461a      	mov	r2, r3
 800e320:	2183      	movs	r1, #131	; 0x83
 800e322:	6878      	ldr	r0, [r7, #4]
 800e324:	f001 fe83 	bl	801002e <VL53L0X_RdByte>
 800e328:	4603      	mov	r3, r0
 800e32a:	461a      	mov	r2, r3
 800e32c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e330:	4313      	orrs	r3, r2
 800e332:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    Status |= VL53L0X_WrByte(Dev, 0x83, byte & 0xfb);
 800e336:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800e33a:	f023 0304 	bic.w	r3, r3, #4
 800e33e:	b2db      	uxtb	r3, r3
 800e340:	461a      	mov	r2, r3
 800e342:	2183      	movs	r1, #131	; 0x83
 800e344:	6878      	ldr	r0, [r7, #4]
 800e346:	f001 fdec 	bl	800ff22 <VL53L0X_WrByte>
 800e34a:	4603      	mov	r3, r0
 800e34c:	461a      	mov	r2, r3
 800e34e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e352:	4313      	orrs	r3, r2
 800e354:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800e358:	2201      	movs	r2, #1
 800e35a:	21ff      	movs	r1, #255	; 0xff
 800e35c:	6878      	ldr	r0, [r7, #4]
 800e35e:	f001 fde0 	bl	800ff22 <VL53L0X_WrByte>
 800e362:	4603      	mov	r3, r0
 800e364:	461a      	mov	r2, r3
 800e366:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e36a:	4313      	orrs	r3, r2
 800e36c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 800e370:	2201      	movs	r2, #1
 800e372:	2100      	movs	r1, #0
 800e374:	6878      	ldr	r0, [r7, #4]
 800e376:	f001 fdd4 	bl	800ff22 <VL53L0X_WrByte>
 800e37a:	4603      	mov	r3, r0
 800e37c:	461a      	mov	r2, r3
 800e37e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e382:	4313      	orrs	r3, r2
 800e384:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

    Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800e388:	2200      	movs	r2, #0
 800e38a:	21ff      	movs	r1, #255	; 0xff
 800e38c:	6878      	ldr	r0, [r7, #4]
 800e38e:	f001 fdc8 	bl	800ff22 <VL53L0X_WrByte>
 800e392:	4603      	mov	r3, r0
 800e394:	461a      	mov	r2, r3
 800e396:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e39a:	4313      	orrs	r3, r2
 800e39c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 800e3a0:	2200      	movs	r2, #0
 800e3a2:	2180      	movs	r1, #128	; 0x80
 800e3a4:	6878      	ldr	r0, [r7, #4]
 800e3a6:	f001 fdbc 	bl	800ff22 <VL53L0X_WrByte>
 800e3aa:	4603      	mov	r3, r0
 800e3ac:	461a      	mov	r2, r3
 800e3ae:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e3b2:	4313      	orrs	r3, r2
 800e3b4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  }

  if ((Status == VL53L0X_ERROR_NONE) && (ReadDataFromDeviceDone != 7)) {
 800e3b8:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 800e3bc:	2b00      	cmp	r3, #0
 800e3be:	f040 8090 	bne.w	800e4e2 <VL53L0X_get_info_from_device+0x982>
 800e3c2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800e3c6:	2b07      	cmp	r3, #7
 800e3c8:	f000 808b 	beq.w	800e4e2 <VL53L0X_get_info_from_device+0x982>
    /* Assign to variable if status is ok */
    if (((option & 1) == 1) && ((ReadDataFromDeviceDone & 1) == 0)) {
 800e3cc:	78fb      	ldrb	r3, [r7, #3]
 800e3ce:	f003 0301 	and.w	r3, r3, #1
 800e3d2:	2b00      	cmp	r3, #0
 800e3d4:	d024      	beq.n	800e420 <VL53L0X_get_info_from_device+0x8c0>
 800e3d6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800e3da:	f003 0301 	and.w	r3, r3, #1
 800e3de:	2b00      	cmp	r3, #0
 800e3e0:	d11e      	bne.n	800e420 <VL53L0X_get_info_from_device+0x8c0>
      VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReferenceSpadCount,
 800e3e2:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 800e3e6:	687b      	ldr	r3, [r7, #4]
 800e3e8:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
                                         ReferenceSpadCount);

      VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReferenceSpadType,
 800e3ec:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 800e3f0:	687b      	ldr	r3, [r7, #4]
 800e3f2:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
                                         ReferenceSpadType);

      for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 800e3f6:	2300      	movs	r3, #0
 800e3f8:	653b      	str	r3, [r7, #80]	; 0x50
 800e3fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e3fc:	2b05      	cmp	r3, #5
 800e3fe:	dc0f      	bgt.n	800e420 <VL53L0X_get_info_from_device+0x8c0>
        Dev->Data.SpadData.RefGoodSpadMap[i] = NvmRefGoodSpadMap[i];
 800e400:	f107 0208 	add.w	r2, r7, #8
 800e404:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e406:	4413      	add	r3, r2
 800e408:	7819      	ldrb	r1, [r3, #0]
 800e40a:	687a      	ldr	r2, [r7, #4]
 800e40c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e40e:	4413      	add	r3, r2
 800e410:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 800e414:	460a      	mov	r2, r1
 800e416:	701a      	strb	r2, [r3, #0]
      for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 800e418:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e41a:	3301      	adds	r3, #1
 800e41c:	653b      	str	r3, [r7, #80]	; 0x50
 800e41e:	e7ec      	b.n	800e3fa <VL53L0X_get_info_from_device+0x89a>
      }
    }

    if (((option & 2) == 2) && ((ReadDataFromDeviceDone & 2) == 0)) {
 800e420:	78fb      	ldrb	r3, [r7, #3]
 800e422:	f003 0302 	and.w	r3, r3, #2
 800e426:	2b00      	cmp	r3, #0
 800e428:	d018      	beq.n	800e45c <VL53L0X_get_info_from_device+0x8fc>
 800e42a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800e42e:	f003 0302 	and.w	r3, r3, #2
 800e432:	2b00      	cmp	r3, #0
 800e434:	d112      	bne.n	800e45c <VL53L0X_get_info_from_device+0x8fc>
      VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ModuleId, ModuleId);
 800e436:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800e43a:	687b      	ldr	r3, [r7, #4]
 800e43c:	f883 20f1 	strb.w	r2, [r3, #241]	; 0xf1

      VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, Revision, Revision);
 800e440:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 800e444:	687b      	ldr	r3, [r7, #4]
 800e446:	f883 20f2 	strb.w	r2, [r3, #242]	; 0xf2

      ProductId_tmp = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev, ProductId);
 800e44a:	687b      	ldr	r3, [r7, #4]
 800e44c:	33f3      	adds	r3, #243	; 0xf3
 800e44e:	643b      	str	r3, [r7, #64]	; 0x40
      VL53L0X_COPYSTRING(ProductId_tmp, ProductId);
 800e450:	f107 0314 	add.w	r3, r7, #20
 800e454:	4619      	mov	r1, r3
 800e456:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800e458:	f001 ff38 	bl	80102cc <strcpy>
    }

    if (((option & 4) == 4) && ((ReadDataFromDeviceDone & 4) == 0)) {
 800e45c:	78fb      	ldrb	r3, [r7, #3]
 800e45e:	f003 0304 	and.w	r3, r3, #4
 800e462:	2b00      	cmp	r3, #0
 800e464:	d031      	beq.n	800e4ca <VL53L0X_get_info_from_device+0x96a>
 800e466:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800e46a:	f003 0304 	and.w	r3, r3, #4
 800e46e:	2b00      	cmp	r3, #0
 800e470:	d12b      	bne.n	800e4ca <VL53L0X_get_info_from_device+0x96a>
      VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, PartUIDUpper, PartUIDUpper);
 800e472:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e474:	687b      	ldr	r3, [r7, #4]
 800e476:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118

      VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, PartUIDLower, PartUIDLower);
 800e47a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e47c:	687b      	ldr	r3, [r7, #4]
 800e47e:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

      SignalRateMeasFixed400mmFix =
          VL53L0X_FIXPOINT97TOFIXPOINT1616(SignalRateMeasFixed1104_400_mm);
 800e482:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e484:	025b      	lsls	r3, r3, #9
      SignalRateMeasFixed400mmFix =
 800e486:	613b      	str	r3, [r7, #16]

      VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, SignalRateMeasFixed400mm,
 800e488:	693a      	ldr	r2, [r7, #16]
 800e48a:	687b      	ldr	r3, [r7, #4]
 800e48c:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
                                         SignalRateMeasFixed400mmFix);

      OffsetMicroMeters = 0;
 800e490:	2300      	movs	r3, #0
 800e492:	857b      	strh	r3, [r7, #42]	; 0x2a
      if (DistMeasFixed1104_400_mm != 0) {
 800e494:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e496:	2b00      	cmp	r3, #0
 800e498:	d012      	beq.n	800e4c0 <VL53L0X_get_info_from_device+0x960>
        OffsetFixed1104_mm = DistMeasFixed1104_400_mm - DistMeasTgtFixed1104_mm;
 800e49a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e49c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e49e:	1ad3      	subs	r3, r2, r3
 800e4a0:	64fb      	str	r3, [r7, #76]	; 0x4c
        OffsetMicroMeters = (OffsetFixed1104_mm * 1000) >> 4;
 800e4a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e4a4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800e4a8:	fb02 f303 	mul.w	r3, r2, r3
 800e4ac:	091b      	lsrs	r3, r3, #4
 800e4ae:	b21b      	sxth	r3, r3
 800e4b0:	857b      	strh	r3, [r7, #42]	; 0x2a
        OffsetMicroMeters *= -1;
 800e4b2:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800e4b6:	b29b      	uxth	r3, r3
 800e4b8:	425b      	negs	r3, r3
 800e4ba:	b29b      	uxth	r3, r3
 800e4bc:	b21b      	sxth	r3, r3
 800e4be:	857b      	strh	r3, [r7, #42]	; 0x2a
      }

      PALDevDataSet(Dev, Part2PartOffsetAdjustmentNVMMicroMeter,
 800e4c0:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800e4c4:	461a      	mov	r2, r3
 800e4c6:	687b      	ldr	r3, [r7, #4]
 800e4c8:	60da      	str	r2, [r3, #12]
                    OffsetMicroMeters);
    }
    byte = (uint8_t)(ReadDataFromDeviceDone | option);
 800e4ca:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 800e4ce:	78fb      	ldrb	r3, [r7, #3]
 800e4d0:	4313      	orrs	r3, r2
 800e4d2:	b2db      	uxtb	r3, r3
 800e4d4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone, byte);
 800e4d8:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800e4dc:	687b      	ldr	r3, [r7, #4]
 800e4de:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
  }

  LOG_FUNCTION_END(Status);
  return Status;
 800e4e2:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
}
 800e4e6:	4618      	mov	r0, r3
 800e4e8:	3760      	adds	r7, #96	; 0x60
 800e4ea:	46bd      	mov	sp, r7
 800e4ec:	bd80      	pop	{r7, pc}

0800e4ee <_Z28VL53L0X_calc_macro_period_psP13VL53L0X_Dev_th>:

uint32_t VL53L0X_calc_macro_period_ps(VL53L0X_DEV Dev,
                                      uint8_t vcsel_period_pclks) {
 800e4ee:	b490      	push	{r4, r7}
 800e4f0:	b086      	sub	sp, #24
 800e4f2:	af00      	add	r7, sp, #0
 800e4f4:	6078      	str	r0, [r7, #4]
 800e4f6:	460b      	mov	r3, r1
 800e4f8:	70fb      	strb	r3, [r7, #3]
  LOG_FUNCTION_START("");

  /* The above calculation will produce rounding errors,
     therefore set fixed value
  */
  PLL_period_ps = 1655;
 800e4fa:	f240 6377 	movw	r3, #1655	; 0x677
 800e4fe:	f04f 0400 	mov.w	r4, #0
 800e502:	e9c7 3404 	strd	r3, r4, [r7, #16]

  macro_period_vclks = 2304;
 800e506:	f44f 6310 	mov.w	r3, #2304	; 0x900
 800e50a:	60fb      	str	r3, [r7, #12]
  macro_period_ps =
 800e50c:	78fb      	ldrb	r3, [r7, #3]
      (uint32_t)(macro_period_vclks * vcsel_period_pclks * PLL_period_ps);
 800e50e:	68fa      	ldr	r2, [r7, #12]
 800e510:	fb02 f303 	mul.w	r3, r2, r3
  macro_period_ps =
 800e514:	693a      	ldr	r2, [r7, #16]
 800e516:	fb02 f303 	mul.w	r3, r2, r3
 800e51a:	60bb      	str	r3, [r7, #8]

  LOG_FUNCTION_END("");
  return macro_period_ps;
 800e51c:	68bb      	ldr	r3, [r7, #8]
}
 800e51e:	4618      	mov	r0, r3
 800e520:	3718      	adds	r7, #24
 800e522:	46bd      	mov	sp, r7
 800e524:	bc90      	pop	{r4, r7}
 800e526:	4770      	bx	lr

0800e528 <VL53L0X_encode_timeout>:

uint16_t VL53L0X_encode_timeout(uint32_t timeout_macro_clks) {
 800e528:	b480      	push	{r7}
 800e52a:	b087      	sub	sp, #28
 800e52c:	af00      	add	r7, sp, #0
 800e52e:	6078      	str	r0, [r7, #4]
  /*!
   * Encode timeout in macro periods in (LSByte * 2^MSByte) + 1 format
   */

  uint16_t encoded_timeout = 0;
 800e530:	2300      	movs	r3, #0
 800e532:	82fb      	strh	r3, [r7, #22]
  uint32_t ls_byte = 0;
 800e534:	2300      	movs	r3, #0
 800e536:	613b      	str	r3, [r7, #16]
  uint16_t ms_byte = 0;
 800e538:	2300      	movs	r3, #0
 800e53a:	81fb      	strh	r3, [r7, #14]

  if (timeout_macro_clks > 0) {
 800e53c:	687b      	ldr	r3, [r7, #4]
 800e53e:	2b00      	cmp	r3, #0
 800e540:	d017      	beq.n	800e572 <VL53L0X_encode_timeout+0x4a>
    ls_byte = timeout_macro_clks - 1;
 800e542:	687b      	ldr	r3, [r7, #4]
 800e544:	3b01      	subs	r3, #1
 800e546:	613b      	str	r3, [r7, #16]

    while ((ls_byte & 0xFFFFFF00) > 0) {
 800e548:	693b      	ldr	r3, [r7, #16]
 800e54a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800e54e:	2b00      	cmp	r3, #0
 800e550:	d006      	beq.n	800e560 <VL53L0X_encode_timeout+0x38>
      ls_byte = ls_byte >> 1;
 800e552:	693b      	ldr	r3, [r7, #16]
 800e554:	085b      	lsrs	r3, r3, #1
 800e556:	613b      	str	r3, [r7, #16]
      ms_byte++;
 800e558:	89fb      	ldrh	r3, [r7, #14]
 800e55a:	3301      	adds	r3, #1
 800e55c:	81fb      	strh	r3, [r7, #14]
    while ((ls_byte & 0xFFFFFF00) > 0) {
 800e55e:	e7f3      	b.n	800e548 <VL53L0X_encode_timeout+0x20>
    }

    encoded_timeout = (ms_byte << 8) + (uint16_t)(ls_byte & 0x000000FF);
 800e560:	89fb      	ldrh	r3, [r7, #14]
 800e562:	021b      	lsls	r3, r3, #8
 800e564:	b29a      	uxth	r2, r3
 800e566:	693b      	ldr	r3, [r7, #16]
 800e568:	b29b      	uxth	r3, r3
 800e56a:	b2db      	uxtb	r3, r3
 800e56c:	b29b      	uxth	r3, r3
 800e56e:	4413      	add	r3, r2
 800e570:	82fb      	strh	r3, [r7, #22]
  }

  return encoded_timeout;
 800e572:	8afb      	ldrh	r3, [r7, #22]
}
 800e574:	4618      	mov	r0, r3
 800e576:	371c      	adds	r7, #28
 800e578:	46bd      	mov	sp, r7
 800e57a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e57e:	4770      	bx	lr

0800e580 <VL53L0X_decode_timeout>:

uint32_t VL53L0X_decode_timeout(uint16_t encoded_timeout) {
 800e580:	b480      	push	{r7}
 800e582:	b085      	sub	sp, #20
 800e584:	af00      	add	r7, sp, #0
 800e586:	4603      	mov	r3, r0
 800e588:	80fb      	strh	r3, [r7, #6]
  /*!
   * Decode 16-bit timeout register value - format (LSByte * 2^MSByte) + 1
   */

  uint32_t timeout_macro_clks = 0;
 800e58a:	2300      	movs	r3, #0
 800e58c:	60fb      	str	r3, [r7, #12]

  timeout_macro_clks = ((uint32_t)(encoded_timeout & 0x00FF)
 800e58e:	88fb      	ldrh	r3, [r7, #6]
 800e590:	b2db      	uxtb	r3, r3
                        << (uint32_t)((encoded_timeout & 0xFF00) >> 8)) +
 800e592:	88fa      	ldrh	r2, [r7, #6]
 800e594:	0a12      	lsrs	r2, r2, #8
 800e596:	b292      	uxth	r2, r2
 800e598:	4093      	lsls	r3, r2
  timeout_macro_clks = ((uint32_t)(encoded_timeout & 0x00FF)
 800e59a:	3301      	adds	r3, #1
 800e59c:	60fb      	str	r3, [r7, #12]
                       1;

  return timeout_macro_clks;
 800e59e:	68fb      	ldr	r3, [r7, #12]
}
 800e5a0:	4618      	mov	r0, r3
 800e5a2:	3714      	adds	r7, #20
 800e5a4:	46bd      	mov	sp, r7
 800e5a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5aa:	4770      	bx	lr

0800e5ac <VL53L0X_calc_timeout_mclks>:

/* To convert ms into register value */
uint32_t VL53L0X_calc_timeout_mclks(VL53L0X_DEV Dev, uint32_t timeout_period_us,
                                    uint8_t vcsel_period_pclks) {
 800e5ac:	b580      	push	{r7, lr}
 800e5ae:	b088      	sub	sp, #32
 800e5b0:	af00      	add	r7, sp, #0
 800e5b2:	60f8      	str	r0, [r7, #12]
 800e5b4:	60b9      	str	r1, [r7, #8]
 800e5b6:	4613      	mov	r3, r2
 800e5b8:	71fb      	strb	r3, [r7, #7]
  uint32_t macro_period_ps;
  uint32_t macro_period_ns;
  uint32_t timeout_period_mclks = 0;
 800e5ba:	2300      	movs	r3, #0
 800e5bc:	61fb      	str	r3, [r7, #28]

  macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 800e5be:	79fb      	ldrb	r3, [r7, #7]
 800e5c0:	4619      	mov	r1, r3
 800e5c2:	68f8      	ldr	r0, [r7, #12]
 800e5c4:	f7ff ff93 	bl	800e4ee <_Z28VL53L0X_calc_macro_period_psP13VL53L0X_Dev_th>
 800e5c8:	61b8      	str	r0, [r7, #24]
  macro_period_ns = (macro_period_ps + 500) / 1000;
 800e5ca:	69bb      	ldr	r3, [r7, #24]
 800e5cc:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800e5d0:	4a0a      	ldr	r2, [pc, #40]	; (800e5fc <VL53L0X_calc_timeout_mclks+0x50>)
 800e5d2:	fba2 2303 	umull	r2, r3, r2, r3
 800e5d6:	099b      	lsrs	r3, r3, #6
 800e5d8:	617b      	str	r3, [r7, #20]

  timeout_period_mclks = (uint32_t)(
      ((timeout_period_us * 1000) + (macro_period_ns / 2)) / macro_period_ns);
 800e5da:	68bb      	ldr	r3, [r7, #8]
 800e5dc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800e5e0:	fb02 f203 	mul.w	r2, r2, r3
 800e5e4:	697b      	ldr	r3, [r7, #20]
 800e5e6:	085b      	lsrs	r3, r3, #1
 800e5e8:	441a      	add	r2, r3
  timeout_period_mclks = (uint32_t)(
 800e5ea:	697b      	ldr	r3, [r7, #20]
 800e5ec:	fbb2 f3f3 	udiv	r3, r2, r3
 800e5f0:	61fb      	str	r3, [r7, #28]

  return timeout_period_mclks;
 800e5f2:	69fb      	ldr	r3, [r7, #28]
}
 800e5f4:	4618      	mov	r0, r3
 800e5f6:	3720      	adds	r7, #32
 800e5f8:	46bd      	mov	sp, r7
 800e5fa:	bd80      	pop	{r7, pc}
 800e5fc:	10624dd3 	.word	0x10624dd3

0800e600 <_Z23VL53L0X_calc_timeout_usP13VL53L0X_Dev_tth>:

/* To convert register value into us */
uint32_t VL53L0X_calc_timeout_us(VL53L0X_DEV Dev, uint16_t timeout_period_mclks,
                                 uint8_t vcsel_period_pclks) {
 800e600:	b580      	push	{r7, lr}
 800e602:	b086      	sub	sp, #24
 800e604:	af00      	add	r7, sp, #0
 800e606:	6078      	str	r0, [r7, #4]
 800e608:	460b      	mov	r3, r1
 800e60a:	807b      	strh	r3, [r7, #2]
 800e60c:	4613      	mov	r3, r2
 800e60e:	707b      	strb	r3, [r7, #1]
  uint32_t macro_period_ps;
  uint32_t macro_period_ns;
  uint32_t actual_timeout_period_us = 0;
 800e610:	2300      	movs	r3, #0
 800e612:	617b      	str	r3, [r7, #20]

  macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 800e614:	787b      	ldrb	r3, [r7, #1]
 800e616:	4619      	mov	r1, r3
 800e618:	6878      	ldr	r0, [r7, #4]
 800e61a:	f7ff ff68 	bl	800e4ee <_Z28VL53L0X_calc_macro_period_psP13VL53L0X_Dev_th>
 800e61e:	6138      	str	r0, [r7, #16]
  macro_period_ns = (macro_period_ps + 500) / 1000;
 800e620:	693b      	ldr	r3, [r7, #16]
 800e622:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800e626:	4a0b      	ldr	r2, [pc, #44]	; (800e654 <_Z23VL53L0X_calc_timeout_usP13VL53L0X_Dev_tth+0x54>)
 800e628:	fba2 2303 	umull	r2, r3, r2, r3
 800e62c:	099b      	lsrs	r3, r3, #6
 800e62e:	60fb      	str	r3, [r7, #12]

  actual_timeout_period_us =
      ((timeout_period_mclks * macro_period_ns) + (macro_period_ns / 2)) / 1000;
 800e630:	887b      	ldrh	r3, [r7, #2]
 800e632:	68fa      	ldr	r2, [r7, #12]
 800e634:	fb02 f203 	mul.w	r2, r2, r3
 800e638:	68fb      	ldr	r3, [r7, #12]
 800e63a:	085b      	lsrs	r3, r3, #1
 800e63c:	4413      	add	r3, r2
  actual_timeout_period_us =
 800e63e:	4a05      	ldr	r2, [pc, #20]	; (800e654 <_Z23VL53L0X_calc_timeout_usP13VL53L0X_Dev_tth+0x54>)
 800e640:	fba2 2303 	umull	r2, r3, r2, r3
 800e644:	099b      	lsrs	r3, r3, #6
 800e646:	617b      	str	r3, [r7, #20]

  return actual_timeout_period_us;
 800e648:	697b      	ldr	r3, [r7, #20]
}
 800e64a:	4618      	mov	r0, r3
 800e64c:	3718      	adds	r7, #24
 800e64e:	46bd      	mov	sp, r7
 800e650:	bd80      	pop	{r7, pc}
 800e652:	bf00      	nop
 800e654:	10624dd3 	.word	0x10624dd3

0800e658 <get_sequence_step_timeout>:

VL53L0X_Error get_sequence_step_timeout(VL53L0X_DEV Dev,
                                        VL53L0X_SequenceStepId SequenceStepId,
                                        uint32_t *pTimeOutMicroSecs) {
 800e658:	b580      	push	{r7, lr}
 800e65a:	b08c      	sub	sp, #48	; 0x30
 800e65c:	af00      	add	r7, sp, #0
 800e65e:	60f8      	str	r0, [r7, #12]
 800e660:	460b      	mov	r3, r1
 800e662:	607a      	str	r2, [r7, #4]
 800e664:	72fb      	strb	r3, [r7, #11]
  VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800e666:	2300      	movs	r3, #0
 800e668:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  uint8_t CurrentVCSELPulsePeriodPClk;
  uint8_t EncodedTimeOutByte = 0;
 800e66c:	2300      	movs	r3, #0
 800e66e:	f887 3020 	strb.w	r3, [r7, #32]
  uint32_t TimeoutMicroSeconds = 0;
 800e672:	2300      	movs	r3, #0
 800e674:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t PreRangeEncodedTimeOut = 0;
 800e676:	2300      	movs	r3, #0
 800e678:	83fb      	strh	r3, [r7, #30]
  uint16_t MsrcTimeOutMClks;
  uint16_t PreRangeTimeOutMClks;
  uint16_t FinalRangeTimeOutMClks = 0;
 800e67a:	2300      	movs	r3, #0
 800e67c:	84bb      	strh	r3, [r7, #36]	; 0x24
  uint16_t FinalRangeEncodedTimeOut;
  VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

  if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC) ||
 800e67e:	7afb      	ldrb	r3, [r7, #11]
 800e680:	2b00      	cmp	r3, #0
 800e682:	d005      	beq.n	800e690 <get_sequence_step_timeout+0x38>
 800e684:	7afb      	ldrb	r3, [r7, #11]
 800e686:	2b01      	cmp	r3, #1
 800e688:	d002      	beq.n	800e690 <get_sequence_step_timeout+0x38>
      (SequenceStepId == VL53L0X_SEQUENCESTEP_DSS) ||
 800e68a:	7afb      	ldrb	r3, [r7, #11]
 800e68c:	2b02      	cmp	r3, #2
 800e68e:	d128      	bne.n	800e6e2 <get_sequence_step_timeout+0x8a>
      (SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

    Status = VL53L0X_GetVcselPulsePeriod(Dev, VL53L0X_VCSEL_PERIOD_PRE_RANGE,
 800e690:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800e694:	461a      	mov	r2, r3
 800e696:	2100      	movs	r1, #0
 800e698:	68f8      	ldr	r0, [r7, #12]
 800e69a:	f7fd f9c7 	bl	800ba2c <VL53L0X_GetVcselPulsePeriod>
 800e69e:	4603      	mov	r3, r0
 800e6a0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                                         &CurrentVCSELPulsePeriodPClk);
    if (Status == VL53L0X_ERROR_NONE) {
 800e6a4:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800e6a8:	2b00      	cmp	r3, #0
 800e6aa:	d109      	bne.n	800e6c0 <get_sequence_step_timeout+0x68>
      Status = VL53L0X_RdByte(Dev, VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
 800e6ac:	f107 0320 	add.w	r3, r7, #32
 800e6b0:	461a      	mov	r2, r3
 800e6b2:	2146      	movs	r1, #70	; 0x46
 800e6b4:	68f8      	ldr	r0, [r7, #12]
 800e6b6:	f001 fcba 	bl	801002e <VL53L0X_RdByte>
 800e6ba:	4603      	mov	r3, r0
 800e6bc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                              &EncodedTimeOutByte);
    }
    MsrcTimeOutMClks = VL53L0X_decode_timeout(EncodedTimeOutByte);
 800e6c0:	f897 3020 	ldrb.w	r3, [r7, #32]
 800e6c4:	b29b      	uxth	r3, r3
 800e6c6:	4618      	mov	r0, r3
 800e6c8:	f7ff ff5a 	bl	800e580 <VL53L0X_decode_timeout>
 800e6cc:	4603      	mov	r3, r0
 800e6ce:	847b      	strh	r3, [r7, #34]	; 0x22

    TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev, MsrcTimeOutMClks,
 800e6d0:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800e6d4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e6d6:	4619      	mov	r1, r3
 800e6d8:	68f8      	ldr	r0, [r7, #12]
 800e6da:	f7ff ff91 	bl	800e600 <_Z23VL53L0X_calc_timeout_usP13VL53L0X_Dev_tth>
 800e6de:	62b8      	str	r0, [r7, #40]	; 0x28
 800e6e0:	e092      	b.n	800e808 <get_sequence_step_timeout+0x1b0>
                                                  CurrentVCSELPulsePeriodPClk);
  } else if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 800e6e2:	7afb      	ldrb	r3, [r7, #11]
 800e6e4:	2b03      	cmp	r3, #3
 800e6e6:	d135      	bne.n	800e754 <get_sequence_step_timeout+0xfc>
    /* Retrieve PRE-RANGE VCSEL Period */
    Status = VL53L0X_GetVcselPulsePeriod(Dev, VL53L0X_VCSEL_PERIOD_PRE_RANGE,
 800e6e8:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800e6ec:	461a      	mov	r2, r3
 800e6ee:	2100      	movs	r1, #0
 800e6f0:	68f8      	ldr	r0, [r7, #12]
 800e6f2:	f7fd f99b 	bl	800ba2c <VL53L0X_GetVcselPulsePeriod>
 800e6f6:	4603      	mov	r3, r0
 800e6f8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                                         &CurrentVCSELPulsePeriodPClk);

    /* Retrieve PRE-RANGE Timeout in Macro periods (MCLKS) */
    if (Status == VL53L0X_ERROR_NONE) {
 800e6fc:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800e700:	2b00      	cmp	r3, #0
 800e702:	f040 8081 	bne.w	800e808 <get_sequence_step_timeout+0x1b0>

      /* Retrieve PRE-RANGE VCSEL Period */
      Status = VL53L0X_GetVcselPulsePeriod(Dev, VL53L0X_VCSEL_PERIOD_PRE_RANGE,
 800e706:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800e70a:	461a      	mov	r2, r3
 800e70c:	2100      	movs	r1, #0
 800e70e:	68f8      	ldr	r0, [r7, #12]
 800e710:	f7fd f98c 	bl	800ba2c <VL53L0X_GetVcselPulsePeriod>
 800e714:	4603      	mov	r3, r0
 800e716:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                                           &CurrentVCSELPulsePeriodPClk);

      if (Status == VL53L0X_ERROR_NONE) {
 800e71a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800e71e:	2b00      	cmp	r3, #0
 800e720:	d109      	bne.n	800e736 <get_sequence_step_timeout+0xde>
        Status =
 800e722:	f107 031e 	add.w	r3, r7, #30
 800e726:	461a      	mov	r2, r3
 800e728:	2151      	movs	r1, #81	; 0x51
 800e72a:	68f8      	ldr	r0, [r7, #12]
 800e72c:	f001 fca0 	bl	8010070 <VL53L0X_RdWord>
 800e730:	4603      	mov	r3, r0
 800e732:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            VL53L0X_RdWord(Dev, VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
                           &PreRangeEncodedTimeOut);
      }

      PreRangeTimeOutMClks = VL53L0X_decode_timeout(PreRangeEncodedTimeOut);
 800e736:	8bfb      	ldrh	r3, [r7, #30]
 800e738:	4618      	mov	r0, r3
 800e73a:	f7ff ff21 	bl	800e580 <VL53L0X_decode_timeout>
 800e73e:	4603      	mov	r3, r0
 800e740:	84fb      	strh	r3, [r7, #38]	; 0x26

      TimeoutMicroSeconds = VL53L0X_calc_timeout_us(
 800e742:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800e746:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800e748:	4619      	mov	r1, r3
 800e74a:	68f8      	ldr	r0, [r7, #12]
 800e74c:	f7ff ff58 	bl	800e600 <_Z23VL53L0X_calc_timeout_usP13VL53L0X_Dev_tth>
 800e750:	62b8      	str	r0, [r7, #40]	; 0x28
 800e752:	e059      	b.n	800e808 <get_sequence_step_timeout+0x1b0>
          Dev, PreRangeTimeOutMClks, CurrentVCSELPulsePeriodPClk);
    }
  } else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 800e754:	7afb      	ldrb	r3, [r7, #11]
 800e756:	2b04      	cmp	r3, #4
 800e758:	d156      	bne.n	800e808 <get_sequence_step_timeout+0x1b0>

    VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 800e75a:	f107 0314 	add.w	r3, r7, #20
 800e75e:	4619      	mov	r1, r3
 800e760:	68f8      	ldr	r0, [r7, #12]
 800e762:	f7fd fa79 	bl	800bc58 <VL53L0X_GetSequenceStepEnables>
    PreRangeTimeOutMClks = 0;
 800e766:	2300      	movs	r3, #0
 800e768:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (SchedulerSequenceSteps.PreRangeOn) {
 800e76a:	7dfb      	ldrb	r3, [r7, #23]
 800e76c:	2b00      	cmp	r3, #0
 800e76e:	d01d      	beq.n	800e7ac <get_sequence_step_timeout+0x154>
      /* Retrieve PRE-RANGE VCSEL Period */
      Status = VL53L0X_GetVcselPulsePeriod(Dev, VL53L0X_VCSEL_PERIOD_PRE_RANGE,
 800e770:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800e774:	461a      	mov	r2, r3
 800e776:	2100      	movs	r1, #0
 800e778:	68f8      	ldr	r0, [r7, #12]
 800e77a:	f7fd f957 	bl	800ba2c <VL53L0X_GetVcselPulsePeriod>
 800e77e:	4603      	mov	r3, r0
 800e780:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                                           &CurrentVCSELPulsePeriodPClk);

      /* Retrieve PRE-RANGE Timeout in Macro periods
       * (MCLKS) */
      if (Status == VL53L0X_ERROR_NONE) {
 800e784:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800e788:	2b00      	cmp	r3, #0
 800e78a:	d10f      	bne.n	800e7ac <get_sequence_step_timeout+0x154>
        Status =
 800e78c:	f107 031e 	add.w	r3, r7, #30
 800e790:	461a      	mov	r2, r3
 800e792:	2151      	movs	r1, #81	; 0x51
 800e794:	68f8      	ldr	r0, [r7, #12]
 800e796:	f001 fc6b 	bl	8010070 <VL53L0X_RdWord>
 800e79a:	4603      	mov	r3, r0
 800e79c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            VL53L0X_RdWord(Dev, VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
                           &PreRangeEncodedTimeOut);
        PreRangeTimeOutMClks = VL53L0X_decode_timeout(PreRangeEncodedTimeOut);
 800e7a0:	8bfb      	ldrh	r3, [r7, #30]
 800e7a2:	4618      	mov	r0, r3
 800e7a4:	f7ff feec 	bl	800e580 <VL53L0X_decode_timeout>
 800e7a8:	4603      	mov	r3, r0
 800e7aa:	84fb      	strh	r3, [r7, #38]	; 0x26
      }
    }

    if (Status == VL53L0X_ERROR_NONE) {
 800e7ac:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800e7b0:	2b00      	cmp	r3, #0
 800e7b2:	d109      	bne.n	800e7c8 <get_sequence_step_timeout+0x170>
      /* Retrieve FINAL-RANGE VCSEL Period */
      Status = VL53L0X_GetVcselPulsePeriod(
 800e7b4:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800e7b8:	461a      	mov	r2, r3
 800e7ba:	2101      	movs	r1, #1
 800e7bc:	68f8      	ldr	r0, [r7, #12]
 800e7be:	f7fd f935 	bl	800ba2c <VL53L0X_GetVcselPulsePeriod>
 800e7c2:	4603      	mov	r3, r0
 800e7c4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
          Dev, VL53L0X_VCSEL_PERIOD_FINAL_RANGE, &CurrentVCSELPulsePeriodPClk);
    }

    /* Retrieve FINAL-RANGE Timeout in Macro periods (MCLKS) */
    if (Status == VL53L0X_ERROR_NONE) {
 800e7c8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800e7cc:	2b00      	cmp	r3, #0
 800e7ce:	d10f      	bne.n	800e7f0 <get_sequence_step_timeout+0x198>
      Status =
 800e7d0:	f107 031c 	add.w	r3, r7, #28
 800e7d4:	461a      	mov	r2, r3
 800e7d6:	2171      	movs	r1, #113	; 0x71
 800e7d8:	68f8      	ldr	r0, [r7, #12]
 800e7da:	f001 fc49 	bl	8010070 <VL53L0X_RdWord>
 800e7de:	4603      	mov	r3, r0
 800e7e0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
          VL53L0X_RdWord(Dev, VL53L0X_REG_FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI,
                         &FinalRangeEncodedTimeOut);
      FinalRangeTimeOutMClks = VL53L0X_decode_timeout(FinalRangeEncodedTimeOut);
 800e7e4:	8bbb      	ldrh	r3, [r7, #28]
 800e7e6:	4618      	mov	r0, r3
 800e7e8:	f7ff feca 	bl	800e580 <VL53L0X_decode_timeout>
 800e7ec:	4603      	mov	r3, r0
 800e7ee:	84bb      	strh	r3, [r7, #36]	; 0x24
    }

    FinalRangeTimeOutMClks -= PreRangeTimeOutMClks;
 800e7f0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800e7f2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800e7f4:	1ad3      	subs	r3, r2, r3
 800e7f6:	84bb      	strh	r3, [r7, #36]	; 0x24
    TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev, FinalRangeTimeOutMClks,
 800e7f8:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800e7fc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e7fe:	4619      	mov	r1, r3
 800e800:	68f8      	ldr	r0, [r7, #12]
 800e802:	f7ff fefd 	bl	800e600 <_Z23VL53L0X_calc_timeout_usP13VL53L0X_Dev_tth>
 800e806:	62b8      	str	r0, [r7, #40]	; 0x28
                                                  CurrentVCSELPulsePeriodPClk);
  }

  *pTimeOutMicroSecs = TimeoutMicroSeconds;
 800e808:	687b      	ldr	r3, [r7, #4]
 800e80a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e80c:	601a      	str	r2, [r3, #0]

  return Status;
 800e80e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800e812:	4618      	mov	r0, r3
 800e814:	3730      	adds	r7, #48	; 0x30
 800e816:	46bd      	mov	sp, r7
 800e818:	bd80      	pop	{r7, pc}

0800e81a <set_sequence_step_timeout>:

VL53L0X_Error set_sequence_step_timeout(VL53L0X_DEV Dev,
                                        VL53L0X_SequenceStepId SequenceStepId,
                                        uint32_t TimeOutMicroSecs) {
 800e81a:	b580      	push	{r7, lr}
 800e81c:	b08a      	sub	sp, #40	; 0x28
 800e81e:	af00      	add	r7, sp, #0
 800e820:	60f8      	str	r0, [r7, #12]
 800e822:	460b      	mov	r3, r1
 800e824:	607a      	str	r2, [r7, #4]
 800e826:	72fb      	strb	r3, [r7, #11]
  VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800e828:	2300      	movs	r3, #0
 800e82a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint16_t MsrcRangeTimeOutMClks;
  uint16_t FinalRangeTimeOutMClks;
  uint16_t FinalRangeEncodedTimeOut;
  VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

  if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC) ||
 800e82e:	7afb      	ldrb	r3, [r7, #11]
 800e830:	2b00      	cmp	r3, #0
 800e832:	d005      	beq.n	800e840 <set_sequence_step_timeout+0x26>
 800e834:	7afb      	ldrb	r3, [r7, #11]
 800e836:	2b01      	cmp	r3, #1
 800e838:	d002      	beq.n	800e840 <set_sequence_step_timeout+0x26>
      (SequenceStepId == VL53L0X_SEQUENCESTEP_DSS) ||
 800e83a:	7afb      	ldrb	r3, [r7, #11]
 800e83c:	2b02      	cmp	r3, #2
 800e83e:	d135      	bne.n	800e8ac <set_sequence_step_timeout+0x92>
      (SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

    Status = VL53L0X_GetVcselPulsePeriod(Dev, VL53L0X_VCSEL_PERIOD_PRE_RANGE,
 800e840:	f107 031d 	add.w	r3, r7, #29
 800e844:	461a      	mov	r2, r3
 800e846:	2100      	movs	r1, #0
 800e848:	68f8      	ldr	r0, [r7, #12]
 800e84a:	f7fd f8ef 	bl	800ba2c <VL53L0X_GetVcselPulsePeriod>
 800e84e:	4603      	mov	r3, r0
 800e850:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                                         &CurrentVCSELPulsePeriodPClk);

    if (Status == VL53L0X_ERROR_NONE) {
 800e854:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800e858:	2b00      	cmp	r3, #0
 800e85a:	d118      	bne.n	800e88e <set_sequence_step_timeout+0x74>
      MsrcRangeTimeOutMClks = VL53L0X_calc_timeout_mclks(
 800e85c:	687b      	ldr	r3, [r7, #4]
 800e85e:	7f7a      	ldrb	r2, [r7, #29]
 800e860:	4619      	mov	r1, r3
 800e862:	68f8      	ldr	r0, [r7, #12]
 800e864:	f7ff fea2 	bl	800e5ac <VL53L0X_calc_timeout_mclks>
 800e868:	4603      	mov	r3, r0
 800e86a:	83fb      	strh	r3, [r7, #30]
          Dev, TimeOutMicroSecs, (uint8_t)CurrentVCSELPulsePeriodPClk);

      if (MsrcRangeTimeOutMClks > 256)
 800e86c:	8bfb      	ldrh	r3, [r7, #30]
 800e86e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e872:	d902      	bls.n	800e87a <set_sequence_step_timeout+0x60>
        MsrcEncodedTimeOut = 255;
 800e874:	23ff      	movs	r3, #255	; 0xff
 800e876:	773b      	strb	r3, [r7, #28]
 800e878:	e004      	b.n	800e884 <set_sequence_step_timeout+0x6a>
      else
        MsrcEncodedTimeOut = (uint8_t)MsrcRangeTimeOutMClks - 1;
 800e87a:	8bfb      	ldrh	r3, [r7, #30]
 800e87c:	b2db      	uxtb	r3, r3
 800e87e:	3b01      	subs	r3, #1
 800e880:	b2db      	uxtb	r3, r3
 800e882:	773b      	strb	r3, [r7, #28]

      VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, LastEncodedTimeout,
 800e884:	7f3b      	ldrb	r3, [r7, #28]
 800e886:	b29a      	uxth	r2, r3
 800e888:	68fb      	ldr	r3, [r7, #12]
 800e88a:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
                                         MsrcEncodedTimeOut);
    }

    if (Status == VL53L0X_ERROR_NONE) {
 800e88e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800e892:	2b00      	cmp	r3, #0
 800e894:	f040 80ac 	bne.w	800e9f0 <set_sequence_step_timeout+0x1d6>
      Status = VL53L0X_WrByte(Dev, VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
 800e898:	7f3b      	ldrb	r3, [r7, #28]
 800e89a:	461a      	mov	r2, r3
 800e89c:	2146      	movs	r1, #70	; 0x46
 800e89e:	68f8      	ldr	r0, [r7, #12]
 800e8a0:	f001 fb3f 	bl	800ff22 <VL53L0X_WrByte>
 800e8a4:	4603      	mov	r3, r0
 800e8a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if (Status == VL53L0X_ERROR_NONE) {
 800e8aa:	e0a1      	b.n	800e9f0 <set_sequence_step_timeout+0x1d6>
                              MsrcEncodedTimeOut);
    }
  } else {

    if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 800e8ac:	7afb      	ldrb	r3, [r7, #11]
 800e8ae:	2b03      	cmp	r3, #3
 800e8b0:	d135      	bne.n	800e91e <set_sequence_step_timeout+0x104>

      if (Status == VL53L0X_ERROR_NONE) {
 800e8b2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800e8b6:	2b00      	cmp	r3, #0
 800e8b8:	d11b      	bne.n	800e8f2 <set_sequence_step_timeout+0xd8>
        Status = VL53L0X_GetVcselPulsePeriod(
 800e8ba:	f107 031d 	add.w	r3, r7, #29
 800e8be:	461a      	mov	r2, r3
 800e8c0:	2100      	movs	r1, #0
 800e8c2:	68f8      	ldr	r0, [r7, #12]
 800e8c4:	f7fd f8b2 	bl	800ba2c <VL53L0X_GetVcselPulsePeriod>
 800e8c8:	4603      	mov	r3, r0
 800e8ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            Dev, VL53L0X_VCSEL_PERIOD_PRE_RANGE, &CurrentVCSELPulsePeriodPClk);
        PreRangeTimeOutMClks = VL53L0X_calc_timeout_mclks(
 800e8ce:	687b      	ldr	r3, [r7, #4]
 800e8d0:	7f7a      	ldrb	r2, [r7, #29]
 800e8d2:	4619      	mov	r1, r3
 800e8d4:	68f8      	ldr	r0, [r7, #12]
 800e8d6:	f7ff fe69 	bl	800e5ac <VL53L0X_calc_timeout_mclks>
 800e8da:	4603      	mov	r3, r0
 800e8dc:	84bb      	strh	r3, [r7, #36]	; 0x24
            Dev, TimeOutMicroSecs, (uint8_t)CurrentVCSELPulsePeriodPClk);
        PreRangeEncodedTimeOut = VL53L0X_encode_timeout(PreRangeTimeOutMClks);
 800e8de:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e8e0:	4618      	mov	r0, r3
 800e8e2:	f7ff fe21 	bl	800e528 <VL53L0X_encode_timeout>
 800e8e6:	4603      	mov	r3, r0
 800e8e8:	837b      	strh	r3, [r7, #26]

        VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, LastEncodedTimeout,
 800e8ea:	8b7a      	ldrh	r2, [r7, #26]
 800e8ec:	68fb      	ldr	r3, [r7, #12]
 800e8ee:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
                                           PreRangeEncodedTimeOut);
      }

      if (Status == VL53L0X_ERROR_NONE) {
 800e8f2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800e8f6:	2b00      	cmp	r3, #0
 800e8f8:	d108      	bne.n	800e90c <set_sequence_step_timeout+0xf2>
        Status =
            VL53L0X_WrWord(Dev, VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
 800e8fa:	8b7b      	ldrh	r3, [r7, #26]
        Status =
 800e8fc:	461a      	mov	r2, r3
 800e8fe:	2151      	movs	r1, #81	; 0x51
 800e900:	68f8      	ldr	r0, [r7, #12]
 800e902:	f001 fb30 	bl	800ff66 <VL53L0X_WrWord>
 800e906:	4603      	mov	r3, r0
 800e908:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                           PreRangeEncodedTimeOut);
      }

      if (Status == VL53L0X_ERROR_NONE) {
 800e90c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800e910:	2b00      	cmp	r3, #0
 800e912:	d16d      	bne.n	800e9f0 <set_sequence_step_timeout+0x1d6>
        VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, PreRangeTimeoutMicroSecs,
 800e914:	687a      	ldr	r2, [r7, #4]
 800e916:	68fb      	ldr	r3, [r7, #12]
 800e918:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
 800e91c:	e068      	b.n	800e9f0 <set_sequence_step_timeout+0x1d6>
                                           TimeOutMicroSecs);
      }
    } else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 800e91e:	7afb      	ldrb	r3, [r7, #11]
 800e920:	2b04      	cmp	r3, #4
 800e922:	d162      	bne.n	800e9ea <set_sequence_step_timeout+0x1d0>
       * must be added. To do this both final and pre-range
       * timeouts must be expressed in macro periods MClks
       * because they have different vcsel periods.
       */

      VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 800e924:	f107 0314 	add.w	r3, r7, #20
 800e928:	4619      	mov	r1, r3
 800e92a:	68f8      	ldr	r0, [r7, #12]
 800e92c:	f7fd f994 	bl	800bc58 <VL53L0X_GetSequenceStepEnables>
      PreRangeTimeOutMClks = 0;
 800e930:	2300      	movs	r3, #0
 800e932:	84bb      	strh	r3, [r7, #36]	; 0x24
      if (SchedulerSequenceSteps.PreRangeOn) {
 800e934:	7dfb      	ldrb	r3, [r7, #23]
 800e936:	2b00      	cmp	r3, #0
 800e938:	d01d      	beq.n	800e976 <set_sequence_step_timeout+0x15c>

        /* Retrieve PRE-RANGE VCSEL Period */
        Status = VL53L0X_GetVcselPulsePeriod(
 800e93a:	f107 031d 	add.w	r3, r7, #29
 800e93e:	461a      	mov	r2, r3
 800e940:	2100      	movs	r1, #0
 800e942:	68f8      	ldr	r0, [r7, #12]
 800e944:	f7fd f872 	bl	800ba2c <VL53L0X_GetVcselPulsePeriod>
 800e948:	4603      	mov	r3, r0
 800e94a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            Dev, VL53L0X_VCSEL_PERIOD_PRE_RANGE, &CurrentVCSELPulsePeriodPClk);

        /* Retrieve PRE-RANGE Timeout in Macro periods
         * (MCLKS) */
        if (Status == VL53L0X_ERROR_NONE) {
 800e94e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800e952:	2b00      	cmp	r3, #0
 800e954:	d10f      	bne.n	800e976 <set_sequence_step_timeout+0x15c>
          Status = VL53L0X_RdWord(Dev, 0x51, &PreRangeEncodedTimeOut);
 800e956:	f107 031a 	add.w	r3, r7, #26
 800e95a:	461a      	mov	r2, r3
 800e95c:	2151      	movs	r1, #81	; 0x51
 800e95e:	68f8      	ldr	r0, [r7, #12]
 800e960:	f001 fb86 	bl	8010070 <VL53L0X_RdWord>
 800e964:	4603      	mov	r3, r0
 800e966:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          PreRangeTimeOutMClks = VL53L0X_decode_timeout(PreRangeEncodedTimeOut);
 800e96a:	8b7b      	ldrh	r3, [r7, #26]
 800e96c:	4618      	mov	r0, r3
 800e96e:	f7ff fe07 	bl	800e580 <VL53L0X_decode_timeout>
 800e972:	4603      	mov	r3, r0
 800e974:	84bb      	strh	r3, [r7, #36]	; 0x24
      }

      /* Calculate FINAL RANGE Timeout in Macro Periods
       * (MCLKS) and add PRE-RANGE value
       */
      if (Status == VL53L0X_ERROR_NONE) {
 800e976:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800e97a:	2b00      	cmp	r3, #0
 800e97c:	d109      	bne.n	800e992 <set_sequence_step_timeout+0x178>

        Status =
 800e97e:	f107 031d 	add.w	r3, r7, #29
 800e982:	461a      	mov	r2, r3
 800e984:	2101      	movs	r1, #1
 800e986:	68f8      	ldr	r0, [r7, #12]
 800e988:	f7fd f850 	bl	800ba2c <VL53L0X_GetVcselPulsePeriod>
 800e98c:	4603      	mov	r3, r0
 800e98e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            VL53L0X_GetVcselPulsePeriod(Dev, VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
                                        &CurrentVCSELPulsePeriodPClk);
      }
      if (Status == VL53L0X_ERROR_NONE) {
 800e992:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800e996:	2b00      	cmp	r3, #0
 800e998:	d12a      	bne.n	800e9f0 <set_sequence_step_timeout+0x1d6>

        FinalRangeTimeOutMClks = VL53L0X_calc_timeout_mclks(
 800e99a:	687b      	ldr	r3, [r7, #4]
 800e99c:	7f7a      	ldrb	r2, [r7, #29]
 800e99e:	4619      	mov	r1, r3
 800e9a0:	68f8      	ldr	r0, [r7, #12]
 800e9a2:	f7ff fe03 	bl	800e5ac <VL53L0X_calc_timeout_mclks>
 800e9a6:	4603      	mov	r3, r0
 800e9a8:	847b      	strh	r3, [r7, #34]	; 0x22
            Dev, TimeOutMicroSecs, (uint8_t)CurrentVCSELPulsePeriodPClk);

        FinalRangeTimeOutMClks += PreRangeTimeOutMClks;
 800e9aa:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800e9ac:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e9ae:	4413      	add	r3, r2
 800e9b0:	847b      	strh	r3, [r7, #34]	; 0x22

        FinalRangeEncodedTimeOut =
            VL53L0X_encode_timeout(FinalRangeTimeOutMClks);
 800e9b2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
        FinalRangeEncodedTimeOut =
 800e9b4:	4618      	mov	r0, r3
 800e9b6:	f7ff fdb7 	bl	800e528 <VL53L0X_encode_timeout>
 800e9ba:	4603      	mov	r3, r0
 800e9bc:	843b      	strh	r3, [r7, #32]

        if (Status == VL53L0X_ERROR_NONE) {
 800e9be:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800e9c2:	2b00      	cmp	r3, #0
 800e9c4:	d108      	bne.n	800e9d8 <set_sequence_step_timeout+0x1be>
          Status = VL53L0X_WrWord(Dev, 0x71, FinalRangeEncodedTimeOut);
 800e9c6:	8c3b      	ldrh	r3, [r7, #32]
 800e9c8:	461a      	mov	r2, r3
 800e9ca:	2171      	movs	r1, #113	; 0x71
 800e9cc:	68f8      	ldr	r0, [r7, #12]
 800e9ce:	f001 faca 	bl	800ff66 <VL53L0X_WrWord>
 800e9d2:	4603      	mov	r3, r0
 800e9d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }

        if (Status == VL53L0X_ERROR_NONE) {
 800e9d8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800e9dc:	2b00      	cmp	r3, #0
 800e9de:	d107      	bne.n	800e9f0 <set_sequence_step_timeout+0x1d6>
          VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, FinalRangeTimeoutMicroSecs,
 800e9e0:	687a      	ldr	r2, [r7, #4]
 800e9e2:	68fb      	ldr	r3, [r7, #12]
 800e9e4:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
 800e9e8:	e002      	b.n	800e9f0 <set_sequence_step_timeout+0x1d6>
                                             TimeOutMicroSecs);
        }
      }
    } else
      Status = VL53L0X_ERROR_INVALID_PARAMS;
 800e9ea:	23fc      	movs	r3, #252	; 0xfc
 800e9ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  return Status;
 800e9f0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800e9f4:	4618      	mov	r0, r3
 800e9f6:	3728      	adds	r7, #40	; 0x28
 800e9f8:	46bd      	mov	sp, r7
 800e9fa:	bd80      	pop	{r7, pc}

0800e9fc <VL53L0X_get_vcsel_pulse_period>:
}

VL53L0X_Error
VL53L0X_get_vcsel_pulse_period(VL53L0X_DEV Dev,
                               VL53L0X_VcselPeriod VcselPeriodType,
                               uint8_t *pVCSELPulsePeriodPCLK) {
 800e9fc:	b580      	push	{r7, lr}
 800e9fe:	b086      	sub	sp, #24
 800ea00:	af00      	add	r7, sp, #0
 800ea02:	60f8      	str	r0, [r7, #12]
 800ea04:	460b      	mov	r3, r1
 800ea06:	607a      	str	r2, [r7, #4]
 800ea08:	72fb      	strb	r3, [r7, #11]
  VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ea0a:	2300      	movs	r3, #0
 800ea0c:	75fb      	strb	r3, [r7, #23]
  uint8_t vcsel_period_reg;

  switch (VcselPeriodType) {
 800ea0e:	7afb      	ldrb	r3, [r7, #11]
 800ea10:	2b00      	cmp	r3, #0
 800ea12:	d002      	beq.n	800ea1a <VL53L0X_get_vcsel_pulse_period+0x1e>
 800ea14:	2b01      	cmp	r3, #1
 800ea16:	d00a      	beq.n	800ea2e <VL53L0X_get_vcsel_pulse_period+0x32>
 800ea18:	e013      	b.n	800ea42 <VL53L0X_get_vcsel_pulse_period+0x46>
  case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
    Status = VL53L0X_RdByte(Dev, VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
 800ea1a:	f107 0316 	add.w	r3, r7, #22
 800ea1e:	461a      	mov	r2, r3
 800ea20:	2150      	movs	r1, #80	; 0x50
 800ea22:	68f8      	ldr	r0, [r7, #12]
 800ea24:	f001 fb03 	bl	801002e <VL53L0X_RdByte>
 800ea28:	4603      	mov	r3, r0
 800ea2a:	75fb      	strb	r3, [r7, #23]
                            &vcsel_period_reg);
    break;
 800ea2c:	e00b      	b.n	800ea46 <VL53L0X_get_vcsel_pulse_period+0x4a>
  case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
    Status = VL53L0X_RdByte(Dev, VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
 800ea2e:	f107 0316 	add.w	r3, r7, #22
 800ea32:	461a      	mov	r2, r3
 800ea34:	2170      	movs	r1, #112	; 0x70
 800ea36:	68f8      	ldr	r0, [r7, #12]
 800ea38:	f001 faf9 	bl	801002e <VL53L0X_RdByte>
 800ea3c:	4603      	mov	r3, r0
 800ea3e:	75fb      	strb	r3, [r7, #23]
                            &vcsel_period_reg);
    break;
 800ea40:	e001      	b.n	800ea46 <VL53L0X_get_vcsel_pulse_period+0x4a>
  default:
    Status = VL53L0X_ERROR_INVALID_PARAMS;
 800ea42:	23fc      	movs	r3, #252	; 0xfc
 800ea44:	75fb      	strb	r3, [r7, #23]
  }

  if (Status == VL53L0X_ERROR_NONE)
 800ea46:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ea4a:	2b00      	cmp	r3, #0
 800ea4c:	d107      	bne.n	800ea5e <VL53L0X_get_vcsel_pulse_period+0x62>
    *pVCSELPulsePeriodPCLK = VL53L0X_decode_vcsel_period(vcsel_period_reg);
 800ea4e:	7dbb      	ldrb	r3, [r7, #22]
 800ea50:	4618      	mov	r0, r3
 800ea52:	f7fe fffc 	bl	800da4e <VL53L0X_decode_vcsel_period>
 800ea56:	4603      	mov	r3, r0
 800ea58:	461a      	mov	r2, r3
 800ea5a:	687b      	ldr	r3, [r7, #4]
 800ea5c:	701a      	strb	r2, [r3, #0]

  return Status;
 800ea5e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ea62:	4618      	mov	r0, r3
 800ea64:	3718      	adds	r7, #24
 800ea66:	46bd      	mov	sp, r7
 800ea68:	bd80      	pop	{r7, pc}

0800ea6a <VL53L0X_set_measurement_timing_budget_micro_seconds>:

VL53L0X_Error VL53L0X_set_measurement_timing_budget_micro_seconds(
    VL53L0X_DEV Dev, uint32_t MeasurementTimingBudgetMicroSeconds) {
 800ea6a:	b580      	push	{r7, lr}
 800ea6c:	b092      	sub	sp, #72	; 0x48
 800ea6e:	af00      	add	r7, sp, #0
 800ea70:	6078      	str	r0, [r7, #4]
 800ea72:	6039      	str	r1, [r7, #0]
  VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ea74:	2300      	movs	r3, #0
 800ea76:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  uint32_t FinalRangeTimingBudgetMicroSeconds;
  VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
  uint32_t MsrcDccTccTimeoutMicroSeconds = 2000;
 800ea7a:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800ea7e:	613b      	str	r3, [r7, #16]
  uint32_t StartOverheadMicroSeconds = 1320;
 800ea80:	f44f 63a5 	mov.w	r3, #1320	; 0x528
 800ea84:	63fb      	str	r3, [r7, #60]	; 0x3c
  uint32_t EndOverheadMicroSeconds = 960;
 800ea86:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800ea8a:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t MsrcOverheadMicroSeconds = 660;
 800ea8c:	f44f 7325 	mov.w	r3, #660	; 0x294
 800ea90:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t TccOverheadMicroSeconds = 590;
 800ea92:	f240 234e 	movw	r3, #590	; 0x24e
 800ea96:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t DssOverheadMicroSeconds = 690;
 800ea98:	f240 23b2 	movw	r3, #690	; 0x2b2
 800ea9c:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t PreRangeOverheadMicroSeconds = 660;
 800ea9e:	f44f 7325 	mov.w	r3, #660	; 0x294
 800eaa2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t FinalRangeOverheadMicroSeconds = 550;
 800eaa4:	f240 2326 	movw	r3, #550	; 0x226
 800eaa8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t PreRangeTimeoutMicroSeconds = 0;
 800eaaa:	2300      	movs	r3, #0
 800eaac:	60fb      	str	r3, [r7, #12]
  uint32_t cMinTimingBudgetMicroSeconds = 20000;
 800eaae:	f644 6320 	movw	r3, #20000	; 0x4e20
 800eab2:	623b      	str	r3, [r7, #32]
  uint32_t SubTimeout = 0;
 800eab4:	2300      	movs	r3, #0
 800eab6:	61fb      	str	r3, [r7, #28]

  LOG_FUNCTION_START("");

  if (MeasurementTimingBudgetMicroSeconds < cMinTimingBudgetMicroSeconds) {
 800eab8:	683b      	ldr	r3, [r7, #0]
 800eaba:	6a3a      	ldr	r2, [r7, #32]
 800eabc:	429a      	cmp	r2, r3
 800eabe:	d905      	bls.n	800eacc <VL53L0X_set_measurement_timing_budget_micro_seconds+0x62>
    Status = VL53L0X_ERROR_INVALID_PARAMS;
 800eac0:	23fc      	movs	r3, #252	; 0xfc
 800eac2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    return Status;
 800eac6:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800eaca:	e0aa      	b.n	800ec22 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
  }

  FinalRangeTimingBudgetMicroSeconds =
      MeasurementTimingBudgetMicroSeconds -
 800eacc:	683a      	ldr	r2, [r7, #0]
      (StartOverheadMicroSeconds + EndOverheadMicroSeconds);
 800eace:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ead0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ead2:	440b      	add	r3, r1
  FinalRangeTimingBudgetMicroSeconds =
 800ead4:	1ad3      	subs	r3, r2, r3
 800ead6:	643b      	str	r3, [r7, #64]	; 0x40

  Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 800ead8:	f107 0314 	add.w	r3, r7, #20
 800eadc:	4619      	mov	r1, r3
 800eade:	6878      	ldr	r0, [r7, #4]
 800eae0:	f7fd f8ba 	bl	800bc58 <VL53L0X_GetSequenceStepEnables>
 800eae4:	4603      	mov	r3, r0
 800eae6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

  if (Status == VL53L0X_ERROR_NONE &&
 800eaea:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800eaee:	2b00      	cmp	r3, #0
 800eaf0:	d15b      	bne.n	800ebaa <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
      (SchedulerSequenceSteps.TccOn || SchedulerSequenceSteps.MsrcOn ||
 800eaf2:	7d3b      	ldrb	r3, [r7, #20]
  if (Status == VL53L0X_ERROR_NONE &&
 800eaf4:	2b00      	cmp	r3, #0
 800eaf6:	d105      	bne.n	800eb04 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
      (SchedulerSequenceSteps.TccOn || SchedulerSequenceSteps.MsrcOn ||
 800eaf8:	7d7b      	ldrb	r3, [r7, #21]
 800eafa:	2b00      	cmp	r3, #0
 800eafc:	d102      	bne.n	800eb04 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
       SchedulerSequenceSteps.DssOn)) {
 800eafe:	7dbb      	ldrb	r3, [r7, #22]
      (SchedulerSequenceSteps.TccOn || SchedulerSequenceSteps.MsrcOn ||
 800eb00:	2b00      	cmp	r3, #0
 800eb02:	d052      	beq.n	800ebaa <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>

    /* TCC, MSRC and DSS all share the same timeout */
    Status = get_sequence_step_timeout(Dev, VL53L0X_SEQUENCESTEP_MSRC,
 800eb04:	f107 0310 	add.w	r3, r7, #16
 800eb08:	461a      	mov	r2, r3
 800eb0a:	2102      	movs	r1, #2
 800eb0c:	6878      	ldr	r0, [r7, #4]
 800eb0e:	f7ff fda3 	bl	800e658 <get_sequence_step_timeout>
 800eb12:	4603      	mov	r3, r0
 800eb14:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
                                       &MsrcDccTccTimeoutMicroSeconds);

    /* Subtract the TCC, MSRC and DSS timeouts if they are
     * enabled. */

    if (Status != VL53L0X_ERROR_NONE)
 800eb18:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800eb1c:	2b00      	cmp	r3, #0
 800eb1e:	d002      	beq.n	800eb26 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xbc>
      return Status;
 800eb20:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800eb24:	e07d      	b.n	800ec22 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>

    /* TCC */
    if (SchedulerSequenceSteps.TccOn) {
 800eb26:	7d3b      	ldrb	r3, [r7, #20]
 800eb28:	2b00      	cmp	r3, #0
 800eb2a:	d00f      	beq.n	800eb4c <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>

      SubTimeout = MsrcDccTccTimeoutMicroSeconds + TccOverheadMicroSeconds;
 800eb2c:	693b      	ldr	r3, [r7, #16]
 800eb2e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800eb30:	4413      	add	r3, r2
 800eb32:	61fb      	str	r3, [r7, #28]

      if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 800eb34:	69fa      	ldr	r2, [r7, #28]
 800eb36:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800eb38:	429a      	cmp	r2, r3
 800eb3a:	d204      	bcs.n	800eb46 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xdc>
        FinalRangeTimingBudgetMicroSeconds -= SubTimeout;
 800eb3c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800eb3e:	69fb      	ldr	r3, [r7, #28]
 800eb40:	1ad3      	subs	r3, r2, r3
 800eb42:	643b      	str	r3, [r7, #64]	; 0x40
 800eb44:	e002      	b.n	800eb4c <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>
      } else {
        /* Requested timeout too big. */
        Status = VL53L0X_ERROR_INVALID_PARAMS;
 800eb46:	23fc      	movs	r3, #252	; 0xfc
 800eb48:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      }
    }

    if (Status != VL53L0X_ERROR_NONE) {
 800eb4c:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800eb50:	2b00      	cmp	r3, #0
 800eb52:	d002      	beq.n	800eb5a <VL53L0X_set_measurement_timing_budget_micro_seconds+0xf0>
      LOG_FUNCTION_END(Status);
      return Status;
 800eb54:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800eb58:	e063      	b.n	800ec22 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
    }

    /* DSS */
    if (SchedulerSequenceSteps.DssOn) {
 800eb5a:	7dbb      	ldrb	r3, [r7, #22]
 800eb5c:	2b00      	cmp	r3, #0
 800eb5e:	d011      	beq.n	800eb84 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x11a>

      SubTimeout =
          2 * (MsrcDccTccTimeoutMicroSeconds + DssOverheadMicroSeconds);
 800eb60:	693a      	ldr	r2, [r7, #16]
 800eb62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb64:	4413      	add	r3, r2
      SubTimeout =
 800eb66:	005b      	lsls	r3, r3, #1
 800eb68:	61fb      	str	r3, [r7, #28]

      if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 800eb6a:	69fa      	ldr	r2, [r7, #28]
 800eb6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800eb6e:	429a      	cmp	r2, r3
 800eb70:	d204      	bcs.n	800eb7c <VL53L0X_set_measurement_timing_budget_micro_seconds+0x112>
        FinalRangeTimingBudgetMicroSeconds -= SubTimeout;
 800eb72:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800eb74:	69fb      	ldr	r3, [r7, #28]
 800eb76:	1ad3      	subs	r3, r2, r3
 800eb78:	643b      	str	r3, [r7, #64]	; 0x40
 800eb7a:	e016      	b.n	800ebaa <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
      } else {
        /* Requested timeout too big. */
        Status = VL53L0X_ERROR_INVALID_PARAMS;
 800eb7c:	23fc      	movs	r3, #252	; 0xfc
 800eb7e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800eb82:	e012      	b.n	800ebaa <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
      }
    } else if (SchedulerSequenceSteps.MsrcOn) {
 800eb84:	7d7b      	ldrb	r3, [r7, #21]
 800eb86:	2b00      	cmp	r3, #0
 800eb88:	d00f      	beq.n	800ebaa <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
      /* MSRC */
      SubTimeout = MsrcDccTccTimeoutMicroSeconds + MsrcOverheadMicroSeconds;
 800eb8a:	693b      	ldr	r3, [r7, #16]
 800eb8c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800eb8e:	4413      	add	r3, r2
 800eb90:	61fb      	str	r3, [r7, #28]

      if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 800eb92:	69fa      	ldr	r2, [r7, #28]
 800eb94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800eb96:	429a      	cmp	r2, r3
 800eb98:	d204      	bcs.n	800eba4 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x13a>
        FinalRangeTimingBudgetMicroSeconds -= SubTimeout;
 800eb9a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800eb9c:	69fb      	ldr	r3, [r7, #28]
 800eb9e:	1ad3      	subs	r3, r2, r3
 800eba0:	643b      	str	r3, [r7, #64]	; 0x40
 800eba2:	e002      	b.n	800ebaa <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
      } else {
        /* Requested timeout too big. */
        Status = VL53L0X_ERROR_INVALID_PARAMS;
 800eba4:	23fc      	movs	r3, #252	; 0xfc
 800eba6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      }
    }
  }

  if (Status != VL53L0X_ERROR_NONE) {
 800ebaa:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800ebae:	2b00      	cmp	r3, #0
 800ebb0:	d002      	beq.n	800ebb8 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x14e>
    LOG_FUNCTION_END(Status);
    return Status;
 800ebb2:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800ebb6:	e034      	b.n	800ec22 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
  }

  if (SchedulerSequenceSteps.PreRangeOn) {
 800ebb8:	7dfb      	ldrb	r3, [r7, #23]
 800ebba:	2b00      	cmp	r3, #0
 800ebbc:	d019      	beq.n	800ebf2 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>

    /* Subtract the Pre-range timeout if enabled. */

    Status = get_sequence_step_timeout(Dev, VL53L0X_SEQUENCESTEP_PRE_RANGE,
 800ebbe:	f107 030c 	add.w	r3, r7, #12
 800ebc2:	461a      	mov	r2, r3
 800ebc4:	2103      	movs	r1, #3
 800ebc6:	6878      	ldr	r0, [r7, #4]
 800ebc8:	f7ff fd46 	bl	800e658 <get_sequence_step_timeout>
 800ebcc:	4603      	mov	r3, r0
 800ebce:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
                                       &PreRangeTimeoutMicroSeconds);

    SubTimeout = PreRangeTimeoutMicroSeconds + PreRangeOverheadMicroSeconds;
 800ebd2:	68fb      	ldr	r3, [r7, #12]
 800ebd4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ebd6:	4413      	add	r3, r2
 800ebd8:	61fb      	str	r3, [r7, #28]

    if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 800ebda:	69fa      	ldr	r2, [r7, #28]
 800ebdc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ebde:	429a      	cmp	r2, r3
 800ebe0:	d204      	bcs.n	800ebec <VL53L0X_set_measurement_timing_budget_micro_seconds+0x182>
      FinalRangeTimingBudgetMicroSeconds -= SubTimeout;
 800ebe2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ebe4:	69fb      	ldr	r3, [r7, #28]
 800ebe6:	1ad3      	subs	r3, r2, r3
 800ebe8:	643b      	str	r3, [r7, #64]	; 0x40
 800ebea:	e002      	b.n	800ebf2 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>
    } else {
      /* Requested timeout too big. */
      Status = VL53L0X_ERROR_INVALID_PARAMS;
 800ebec:	23fc      	movs	r3, #252	; 0xfc
 800ebee:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
  }

  if (Status == VL53L0X_ERROR_NONE && SchedulerSequenceSteps.FinalRangeOn) {
 800ebf2:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800ebf6:	2b00      	cmp	r3, #0
 800ebf8:	d111      	bne.n	800ec1e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>
 800ebfa:	7e3b      	ldrb	r3, [r7, #24]
 800ebfc:	2b00      	cmp	r3, #0
 800ebfe:	d00e      	beq.n	800ec1e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>

    FinalRangeTimingBudgetMicroSeconds -= FinalRangeOverheadMicroSeconds;
 800ec00:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ec02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec04:	1ad3      	subs	r3, r2, r3
 800ec06:	643b      	str	r3, [r7, #64]	; 0x40
     * budget and the sum of all other timeouts within the sequence.
     * If there is no room for the final range timeout, then an error
     * will be set. Otherwise the remaining time will be applied to
     * the final range.
     */
    Status = set_sequence_step_timeout(Dev, VL53L0X_SEQUENCESTEP_FINAL_RANGE,
 800ec08:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ec0a:	2104      	movs	r1, #4
 800ec0c:	6878      	ldr	r0, [r7, #4]
 800ec0e:	f7ff fe04 	bl	800e81a <set_sequence_step_timeout>
 800ec12:	4603      	mov	r3, r0
 800ec14:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
                                       FinalRangeTimingBudgetMicroSeconds);

    VL53L0X_SETPARAMETERFIELD(Dev, MeasurementTimingBudgetMicroSeconds,
 800ec18:	683a      	ldr	r2, [r7, #0]
 800ec1a:	687b      	ldr	r3, [r7, #4]
 800ec1c:	615a      	str	r2, [r3, #20]
                              MeasurementTimingBudgetMicroSeconds);
  }

  LOG_FUNCTION_END(Status);

  return Status;
 800ec1e:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
}
 800ec22:	4618      	mov	r0, r3
 800ec24:	3748      	adds	r7, #72	; 0x48
 800ec26:	46bd      	mov	sp, r7
 800ec28:	bd80      	pop	{r7, pc}

0800ec2a <VL53L0X_get_measurement_timing_budget_micro_seconds>:

VL53L0X_Error VL53L0X_get_measurement_timing_budget_micro_seconds(
    VL53L0X_DEV Dev, uint32_t *pMeasurementTimingBudgetMicroSeconds) {
 800ec2a:	b580      	push	{r7, lr}
 800ec2c:	b090      	sub	sp, #64	; 0x40
 800ec2e:	af00      	add	r7, sp, #0
 800ec30:	6078      	str	r0, [r7, #4]
 800ec32:	6039      	str	r1, [r7, #0]
  VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ec34:	2300      	movs	r3, #0
 800ec36:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
  uint32_t FinalRangeTimeoutMicroSeconds;
  uint32_t MsrcDccTccTimeoutMicroSeconds = 2000;
 800ec3a:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800ec3e:	613b      	str	r3, [r7, #16]
  uint32_t StartOverheadMicroSeconds = 1910;
 800ec40:	f240 7376 	movw	r3, #1910	; 0x776
 800ec44:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t EndOverheadMicroSeconds = 960;
 800ec46:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800ec4a:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t MsrcOverheadMicroSeconds = 660;
 800ec4c:	f44f 7325 	mov.w	r3, #660	; 0x294
 800ec50:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t TccOverheadMicroSeconds = 590;
 800ec52:	f240 234e 	movw	r3, #590	; 0x24e
 800ec56:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t DssOverheadMicroSeconds = 690;
 800ec58:	f240 23b2 	movw	r3, #690	; 0x2b2
 800ec5c:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t PreRangeOverheadMicroSeconds = 660;
 800ec5e:	f44f 7325 	mov.w	r3, #660	; 0x294
 800ec62:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t FinalRangeOverheadMicroSeconds = 550;
 800ec64:	f240 2326 	movw	r3, #550	; 0x226
 800ec68:	623b      	str	r3, [r7, #32]
  uint32_t PreRangeTimeoutMicroSeconds = 0;
 800ec6a:	2300      	movs	r3, #0
 800ec6c:	60fb      	str	r3, [r7, #12]

  LOG_FUNCTION_START("");

  /* Start and end overhead times always present */
  *pMeasurementTimingBudgetMicroSeconds =
      StartOverheadMicroSeconds + EndOverheadMicroSeconds;
 800ec6e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ec70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ec72:	441a      	add	r2, r3
  *pMeasurementTimingBudgetMicroSeconds =
 800ec74:	683b      	ldr	r3, [r7, #0]
 800ec76:	601a      	str	r2, [r3, #0]

  Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 800ec78:	f107 0318 	add.w	r3, r7, #24
 800ec7c:	4619      	mov	r1, r3
 800ec7e:	6878      	ldr	r0, [r7, #4]
 800ec80:	f7fc ffea 	bl	800bc58 <VL53L0X_GetSequenceStepEnables>
 800ec84:	4603      	mov	r3, r0
 800ec86:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

  if (Status != VL53L0X_ERROR_NONE) {
 800ec8a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800ec8e:	2b00      	cmp	r3, #0
 800ec90:	d002      	beq.n	800ec98 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x6e>
    LOG_FUNCTION_END(Status);
    return Status;
 800ec92:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800ec96:	e075      	b.n	800ed84 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x15a>
  }

  if (SchedulerSequenceSteps.TccOn || SchedulerSequenceSteps.MsrcOn ||
 800ec98:	7e3b      	ldrb	r3, [r7, #24]
 800ec9a:	2b00      	cmp	r3, #0
 800ec9c:	d105      	bne.n	800ecaa <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
 800ec9e:	7e7b      	ldrb	r3, [r7, #25]
 800eca0:	2b00      	cmp	r3, #0
 800eca2:	d102      	bne.n	800ecaa <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
      SchedulerSequenceSteps.DssOn) {
 800eca4:	7ebb      	ldrb	r3, [r7, #26]
  if (SchedulerSequenceSteps.TccOn || SchedulerSequenceSteps.MsrcOn ||
 800eca6:	2b00      	cmp	r3, #0
 800eca8:	d030      	beq.n	800ed0c <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>

    Status = get_sequence_step_timeout(Dev, VL53L0X_SEQUENCESTEP_MSRC,
 800ecaa:	f107 0310 	add.w	r3, r7, #16
 800ecae:	461a      	mov	r2, r3
 800ecb0:	2102      	movs	r1, #2
 800ecb2:	6878      	ldr	r0, [r7, #4]
 800ecb4:	f7ff fcd0 	bl	800e658 <get_sequence_step_timeout>
 800ecb8:	4603      	mov	r3, r0
 800ecba:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
                                       &MsrcDccTccTimeoutMicroSeconds);

    if (Status == VL53L0X_ERROR_NONE) {
 800ecbe:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800ecc2:	2b00      	cmp	r3, #0
 800ecc4:	d122      	bne.n	800ed0c <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
      if (SchedulerSequenceSteps.TccOn) {
 800ecc6:	7e3b      	ldrb	r3, [r7, #24]
 800ecc8:	2b00      	cmp	r3, #0
 800ecca:	d007      	beq.n	800ecdc <VL53L0X_get_measurement_timing_budget_micro_seconds+0xb2>
        *pMeasurementTimingBudgetMicroSeconds +=
 800eccc:	683b      	ldr	r3, [r7, #0]
 800ecce:	681a      	ldr	r2, [r3, #0]
            MsrcDccTccTimeoutMicroSeconds + TccOverheadMicroSeconds;
 800ecd0:	6939      	ldr	r1, [r7, #16]
 800ecd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ecd4:	440b      	add	r3, r1
        *pMeasurementTimingBudgetMicroSeconds +=
 800ecd6:	441a      	add	r2, r3
 800ecd8:	683b      	ldr	r3, [r7, #0]
 800ecda:	601a      	str	r2, [r3, #0]
      }

      if (SchedulerSequenceSteps.DssOn) {
 800ecdc:	7ebb      	ldrb	r3, [r7, #26]
 800ecde:	2b00      	cmp	r3, #0
 800ece0:	d009      	beq.n	800ecf6 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xcc>
        *pMeasurementTimingBudgetMicroSeconds +=
 800ece2:	683b      	ldr	r3, [r7, #0]
 800ece4:	681a      	ldr	r2, [r3, #0]
            2 * (MsrcDccTccTimeoutMicroSeconds + DssOverheadMicroSeconds);
 800ece6:	6939      	ldr	r1, [r7, #16]
 800ece8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ecea:	440b      	add	r3, r1
 800ecec:	005b      	lsls	r3, r3, #1
        *pMeasurementTimingBudgetMicroSeconds +=
 800ecee:	441a      	add	r2, r3
 800ecf0:	683b      	ldr	r3, [r7, #0]
 800ecf2:	601a      	str	r2, [r3, #0]
 800ecf4:	e00a      	b.n	800ed0c <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
      } else if (SchedulerSequenceSteps.MsrcOn) {
 800ecf6:	7e7b      	ldrb	r3, [r7, #25]
 800ecf8:	2b00      	cmp	r3, #0
 800ecfa:	d007      	beq.n	800ed0c <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
        *pMeasurementTimingBudgetMicroSeconds +=
 800ecfc:	683b      	ldr	r3, [r7, #0]
 800ecfe:	681a      	ldr	r2, [r3, #0]
            MsrcDccTccTimeoutMicroSeconds + MsrcOverheadMicroSeconds;
 800ed00:	6939      	ldr	r1, [r7, #16]
 800ed02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed04:	440b      	add	r3, r1
        *pMeasurementTimingBudgetMicroSeconds +=
 800ed06:	441a      	add	r2, r3
 800ed08:	683b      	ldr	r3, [r7, #0]
 800ed0a:	601a      	str	r2, [r3, #0]
      }
    }
  }

  if (Status == VL53L0X_ERROR_NONE) {
 800ed0c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800ed10:	2b00      	cmp	r3, #0
 800ed12:	d114      	bne.n	800ed3e <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
    if (SchedulerSequenceSteps.PreRangeOn) {
 800ed14:	7efb      	ldrb	r3, [r7, #27]
 800ed16:	2b00      	cmp	r3, #0
 800ed18:	d011      	beq.n	800ed3e <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
      Status = get_sequence_step_timeout(Dev, VL53L0X_SEQUENCESTEP_PRE_RANGE,
 800ed1a:	f107 030c 	add.w	r3, r7, #12
 800ed1e:	461a      	mov	r2, r3
 800ed20:	2103      	movs	r1, #3
 800ed22:	6878      	ldr	r0, [r7, #4]
 800ed24:	f7ff fc98 	bl	800e658 <get_sequence_step_timeout>
 800ed28:	4603      	mov	r3, r0
 800ed2a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
                                         &PreRangeTimeoutMicroSeconds);
      *pMeasurementTimingBudgetMicroSeconds +=
 800ed2e:	683b      	ldr	r3, [r7, #0]
 800ed30:	681a      	ldr	r2, [r3, #0]
          PreRangeTimeoutMicroSeconds + PreRangeOverheadMicroSeconds;
 800ed32:	68f9      	ldr	r1, [r7, #12]
 800ed34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed36:	440b      	add	r3, r1
      *pMeasurementTimingBudgetMicroSeconds +=
 800ed38:	441a      	add	r2, r3
 800ed3a:	683b      	ldr	r3, [r7, #0]
 800ed3c:	601a      	str	r2, [r3, #0]
    }
  }

  if (Status == VL53L0X_ERROR_NONE) {
 800ed3e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800ed42:	2b00      	cmp	r3, #0
 800ed44:	d114      	bne.n	800ed70 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
    if (SchedulerSequenceSteps.FinalRangeOn) {
 800ed46:	7f3b      	ldrb	r3, [r7, #28]
 800ed48:	2b00      	cmp	r3, #0
 800ed4a:	d011      	beq.n	800ed70 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
      Status = get_sequence_step_timeout(Dev, VL53L0X_SEQUENCESTEP_FINAL_RANGE,
 800ed4c:	f107 0314 	add.w	r3, r7, #20
 800ed50:	461a      	mov	r2, r3
 800ed52:	2104      	movs	r1, #4
 800ed54:	6878      	ldr	r0, [r7, #4]
 800ed56:	f7ff fc7f 	bl	800e658 <get_sequence_step_timeout>
 800ed5a:	4603      	mov	r3, r0
 800ed5c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
                                         &FinalRangeTimeoutMicroSeconds);
      *pMeasurementTimingBudgetMicroSeconds +=
 800ed60:	683b      	ldr	r3, [r7, #0]
 800ed62:	681a      	ldr	r2, [r3, #0]
          (FinalRangeTimeoutMicroSeconds + FinalRangeOverheadMicroSeconds);
 800ed64:	6979      	ldr	r1, [r7, #20]
 800ed66:	6a3b      	ldr	r3, [r7, #32]
 800ed68:	440b      	add	r3, r1
      *pMeasurementTimingBudgetMicroSeconds +=
 800ed6a:	441a      	add	r2, r3
 800ed6c:	683b      	ldr	r3, [r7, #0]
 800ed6e:	601a      	str	r2, [r3, #0]
    }
  }

  if (Status == VL53L0X_ERROR_NONE) {
 800ed70:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800ed74:	2b00      	cmp	r3, #0
 800ed76:	d103      	bne.n	800ed80 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x156>
    VL53L0X_SETPARAMETERFIELD(Dev, MeasurementTimingBudgetMicroSeconds,
 800ed78:	683b      	ldr	r3, [r7, #0]
 800ed7a:	681a      	ldr	r2, [r3, #0]
 800ed7c:	687b      	ldr	r3, [r7, #4]
 800ed7e:	615a      	str	r2, [r3, #20]
                              *pMeasurementTimingBudgetMicroSeconds);
  }

  LOG_FUNCTION_END(Status);
  return Status;
 800ed80:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800ed84:	4618      	mov	r0, r3
 800ed86:	3740      	adds	r7, #64	; 0x40
 800ed88:	46bd      	mov	sp, r7
 800ed8a:	bd80      	pop	{r7, pc}

0800ed8c <VL53L0X_load_tuning_settings>:

VL53L0X_Error VL53L0X_load_tuning_settings(VL53L0X_DEV Dev,
                                           uint8_t *pTuningSettingBuffer) {
 800ed8c:	b580      	push	{r7, lr}
 800ed8e:	b08a      	sub	sp, #40	; 0x28
 800ed90:	af00      	add	r7, sp, #0
 800ed92:	6078      	str	r0, [r7, #4]
 800ed94:	6039      	str	r1, [r7, #0]
  VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ed96:	2300      	movs	r3, #0
 800ed98:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t localBuffer[4]; /* max */
  uint16_t Temp16;

  LOG_FUNCTION_START("");

  Index = 0;
 800ed9c:	2300      	movs	r3, #0
 800ed9e:	61fb      	str	r3, [r7, #28]

  while ((*(pTuningSettingBuffer + Index) != 0) &&
 800eda0:	69fb      	ldr	r3, [r7, #28]
 800eda2:	683a      	ldr	r2, [r7, #0]
 800eda4:	4413      	add	r3, r2
 800eda6:	781b      	ldrb	r3, [r3, #0]
 800eda8:	2b00      	cmp	r3, #0
 800edaa:	f000 80d6 	beq.w	800ef5a <VL53L0X_load_tuning_settings+0x1ce>
 800edae:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800edb2:	2b00      	cmp	r3, #0
 800edb4:	f040 80d1 	bne.w	800ef5a <VL53L0X_load_tuning_settings+0x1ce>
         (Status == VL53L0X_ERROR_NONE)) {
    NumberOfWrites = *(pTuningSettingBuffer + Index);
 800edb8:	69fb      	ldr	r3, [r7, #28]
 800edba:	683a      	ldr	r2, [r7, #0]
 800edbc:	4413      	add	r3, r2
 800edbe:	781b      	ldrb	r3, [r3, #0]
 800edc0:	76fb      	strb	r3, [r7, #27]
    Index++;
 800edc2:	69fb      	ldr	r3, [r7, #28]
 800edc4:	3301      	adds	r3, #1
 800edc6:	61fb      	str	r3, [r7, #28]
    if (NumberOfWrites == 0xFF) {
 800edc8:	7efb      	ldrb	r3, [r7, #27]
 800edca:	2bff      	cmp	r3, #255	; 0xff
 800edcc:	f040 8094 	bne.w	800eef8 <VL53L0X_load_tuning_settings+0x16c>
      /* internal parameters */
      SelectParam = *(pTuningSettingBuffer + Index);
 800edd0:	69fb      	ldr	r3, [r7, #28]
 800edd2:	683a      	ldr	r2, [r7, #0]
 800edd4:	4413      	add	r3, r2
 800edd6:	781b      	ldrb	r3, [r3, #0]
 800edd8:	767b      	strb	r3, [r7, #25]
      Index++;
 800edda:	69fb      	ldr	r3, [r7, #28]
 800eddc:	3301      	adds	r3, #1
 800edde:	61fb      	str	r3, [r7, #28]
      switch (SelectParam) {
 800ede0:	7e7b      	ldrb	r3, [r7, #25]
 800ede2:	2b03      	cmp	r3, #3
 800ede4:	f200 8084 	bhi.w	800eef0 <VL53L0X_load_tuning_settings+0x164>
 800ede8:	a201      	add	r2, pc, #4	; (adr r2, 800edf0 <VL53L0X_load_tuning_settings+0x64>)
 800edea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800edee:	bf00      	nop
 800edf0:	0800ee01 	.word	0x0800ee01
 800edf4:	0800ee3d 	.word	0x0800ee3d
 800edf8:	0800ee79 	.word	0x0800ee79
 800edfc:	0800eeb5 	.word	0x0800eeb5
      case 0: /* uint16_t SigmaEstRefArray -> 2 bytes */
        msb = *(pTuningSettingBuffer + Index);
 800ee00:	69fb      	ldr	r3, [r7, #28]
 800ee02:	683a      	ldr	r2, [r7, #0]
 800ee04:	4413      	add	r3, r2
 800ee06:	781b      	ldrb	r3, [r3, #0]
 800ee08:	763b      	strb	r3, [r7, #24]
        Index++;
 800ee0a:	69fb      	ldr	r3, [r7, #28]
 800ee0c:	3301      	adds	r3, #1
 800ee0e:	61fb      	str	r3, [r7, #28]
        lsb = *(pTuningSettingBuffer + Index);
 800ee10:	69fb      	ldr	r3, [r7, #28]
 800ee12:	683a      	ldr	r2, [r7, #0]
 800ee14:	4413      	add	r3, r2
 800ee16:	781b      	ldrb	r3, [r3, #0]
 800ee18:	75fb      	strb	r3, [r7, #23]
        Index++;
 800ee1a:	69fb      	ldr	r3, [r7, #28]
 800ee1c:	3301      	adds	r3, #1
 800ee1e:	61fb      	str	r3, [r7, #28]
        Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800ee20:	7e3b      	ldrb	r3, [r7, #24]
 800ee22:	b29b      	uxth	r3, r3
 800ee24:	021b      	lsls	r3, r3, #8
 800ee26:	b29a      	uxth	r2, r3
 800ee28:	7dfb      	ldrb	r3, [r7, #23]
 800ee2a:	b29b      	uxth	r3, r3
 800ee2c:	4413      	add	r3, r2
 800ee2e:	b29b      	uxth	r3, r3
 800ee30:	81fb      	strh	r3, [r7, #14]
        PALDevDataSet(Dev, SigmaEstRefArray, Temp16);
 800ee32:	89fa      	ldrh	r2, [r7, #14]
 800ee34:	687b      	ldr	r3, [r7, #4]
 800ee36:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
        break;
 800ee3a:	e08d      	b.n	800ef58 <VL53L0X_load_tuning_settings+0x1cc>
      case 1: /* uint16_t SigmaEstEffPulseWidth -> 2 bytes */
        msb = *(pTuningSettingBuffer + Index);
 800ee3c:	69fb      	ldr	r3, [r7, #28]
 800ee3e:	683a      	ldr	r2, [r7, #0]
 800ee40:	4413      	add	r3, r2
 800ee42:	781b      	ldrb	r3, [r3, #0]
 800ee44:	763b      	strb	r3, [r7, #24]
        Index++;
 800ee46:	69fb      	ldr	r3, [r7, #28]
 800ee48:	3301      	adds	r3, #1
 800ee4a:	61fb      	str	r3, [r7, #28]
        lsb = *(pTuningSettingBuffer + Index);
 800ee4c:	69fb      	ldr	r3, [r7, #28]
 800ee4e:	683a      	ldr	r2, [r7, #0]
 800ee50:	4413      	add	r3, r2
 800ee52:	781b      	ldrb	r3, [r3, #0]
 800ee54:	75fb      	strb	r3, [r7, #23]
        Index++;
 800ee56:	69fb      	ldr	r3, [r7, #28]
 800ee58:	3301      	adds	r3, #1
 800ee5a:	61fb      	str	r3, [r7, #28]
        Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800ee5c:	7e3b      	ldrb	r3, [r7, #24]
 800ee5e:	b29b      	uxth	r3, r3
 800ee60:	021b      	lsls	r3, r3, #8
 800ee62:	b29a      	uxth	r2, r3
 800ee64:	7dfb      	ldrb	r3, [r7, #23]
 800ee66:	b29b      	uxth	r3, r3
 800ee68:	4413      	add	r3, r2
 800ee6a:	b29b      	uxth	r3, r3
 800ee6c:	81fb      	strh	r3, [r7, #14]
        PALDevDataSet(Dev, SigmaEstEffPulseWidth, Temp16);
 800ee6e:	89fa      	ldrh	r2, [r7, #14]
 800ee70:	687b      	ldr	r3, [r7, #4]
 800ee72:	f8a3 2136 	strh.w	r2, [r3, #310]	; 0x136
        break;
 800ee76:	e06f      	b.n	800ef58 <VL53L0X_load_tuning_settings+0x1cc>
      case 2: /* uint16_t SigmaEstEffAmbWidth -> 2 bytes */
        msb = *(pTuningSettingBuffer + Index);
 800ee78:	69fb      	ldr	r3, [r7, #28]
 800ee7a:	683a      	ldr	r2, [r7, #0]
 800ee7c:	4413      	add	r3, r2
 800ee7e:	781b      	ldrb	r3, [r3, #0]
 800ee80:	763b      	strb	r3, [r7, #24]
        Index++;
 800ee82:	69fb      	ldr	r3, [r7, #28]
 800ee84:	3301      	adds	r3, #1
 800ee86:	61fb      	str	r3, [r7, #28]
        lsb = *(pTuningSettingBuffer + Index);
 800ee88:	69fb      	ldr	r3, [r7, #28]
 800ee8a:	683a      	ldr	r2, [r7, #0]
 800ee8c:	4413      	add	r3, r2
 800ee8e:	781b      	ldrb	r3, [r3, #0]
 800ee90:	75fb      	strb	r3, [r7, #23]
        Index++;
 800ee92:	69fb      	ldr	r3, [r7, #28]
 800ee94:	3301      	adds	r3, #1
 800ee96:	61fb      	str	r3, [r7, #28]
        Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800ee98:	7e3b      	ldrb	r3, [r7, #24]
 800ee9a:	b29b      	uxth	r3, r3
 800ee9c:	021b      	lsls	r3, r3, #8
 800ee9e:	b29a      	uxth	r2, r3
 800eea0:	7dfb      	ldrb	r3, [r7, #23]
 800eea2:	b29b      	uxth	r3, r3
 800eea4:	4413      	add	r3, r2
 800eea6:	b29b      	uxth	r3, r3
 800eea8:	81fb      	strh	r3, [r7, #14]
        PALDevDataSet(Dev, SigmaEstEffAmbWidth, Temp16);
 800eeaa:	89fa      	ldrh	r2, [r7, #14]
 800eeac:	687b      	ldr	r3, [r7, #4]
 800eeae:	f8a3 2138 	strh.w	r2, [r3, #312]	; 0x138
        break;
 800eeb2:	e051      	b.n	800ef58 <VL53L0X_load_tuning_settings+0x1cc>
      case 3: /* uint16_t targetRefRate -> 2 bytes */
        msb = *(pTuningSettingBuffer + Index);
 800eeb4:	69fb      	ldr	r3, [r7, #28]
 800eeb6:	683a      	ldr	r2, [r7, #0]
 800eeb8:	4413      	add	r3, r2
 800eeba:	781b      	ldrb	r3, [r3, #0]
 800eebc:	763b      	strb	r3, [r7, #24]
        Index++;
 800eebe:	69fb      	ldr	r3, [r7, #28]
 800eec0:	3301      	adds	r3, #1
 800eec2:	61fb      	str	r3, [r7, #28]
        lsb = *(pTuningSettingBuffer + Index);
 800eec4:	69fb      	ldr	r3, [r7, #28]
 800eec6:	683a      	ldr	r2, [r7, #0]
 800eec8:	4413      	add	r3, r2
 800eeca:	781b      	ldrb	r3, [r3, #0]
 800eecc:	75fb      	strb	r3, [r7, #23]
        Index++;
 800eece:	69fb      	ldr	r3, [r7, #28]
 800eed0:	3301      	adds	r3, #1
 800eed2:	61fb      	str	r3, [r7, #28]
        Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800eed4:	7e3b      	ldrb	r3, [r7, #24]
 800eed6:	b29b      	uxth	r3, r3
 800eed8:	021b      	lsls	r3, r3, #8
 800eeda:	b29a      	uxth	r2, r3
 800eedc:	7dfb      	ldrb	r3, [r7, #23]
 800eede:	b29b      	uxth	r3, r3
 800eee0:	4413      	add	r3, r2
 800eee2:	b29b      	uxth	r3, r3
 800eee4:	81fb      	strh	r3, [r7, #14]
        PALDevDataSet(Dev, targetRefRate, Temp16);
 800eee6:	89fa      	ldrh	r2, [r7, #14]
 800eee8:	687b      	ldr	r3, [r7, #4]
 800eeea:	f8a3 213c 	strh.w	r2, [r3, #316]	; 0x13c
        break;
 800eeee:	e033      	b.n	800ef58 <VL53L0X_load_tuning_settings+0x1cc>
      default: /* invalid parameter */
        Status = VL53L0X_ERROR_INVALID_PARAMS;
 800eef0:	23fc      	movs	r3, #252	; 0xfc
 800eef2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800eef6:	e753      	b.n	800eda0 <VL53L0X_load_tuning_settings+0x14>
      }

    } else if (NumberOfWrites <= 4) {
 800eef8:	7efb      	ldrb	r3, [r7, #27]
 800eefa:	2b04      	cmp	r3, #4
 800eefc:	d829      	bhi.n	800ef52 <VL53L0X_load_tuning_settings+0x1c6>
      Address = *(pTuningSettingBuffer + Index);
 800eefe:	69fb      	ldr	r3, [r7, #28]
 800ef00:	683a      	ldr	r2, [r7, #0]
 800ef02:	4413      	add	r3, r2
 800ef04:	781b      	ldrb	r3, [r3, #0]
 800ef06:	76bb      	strb	r3, [r7, #26]
      Index++;
 800ef08:	69fb      	ldr	r3, [r7, #28]
 800ef0a:	3301      	adds	r3, #1
 800ef0c:	61fb      	str	r3, [r7, #28]

      for (i = 0; i < NumberOfWrites; i++) {
 800ef0e:	2300      	movs	r3, #0
 800ef10:	623b      	str	r3, [r7, #32]
 800ef12:	7efb      	ldrb	r3, [r7, #27]
 800ef14:	6a3a      	ldr	r2, [r7, #32]
 800ef16:	429a      	cmp	r2, r3
 800ef18:	da10      	bge.n	800ef3c <VL53L0X_load_tuning_settings+0x1b0>
        localBuffer[i] = *(pTuningSettingBuffer + Index);
 800ef1a:	69fb      	ldr	r3, [r7, #28]
 800ef1c:	683a      	ldr	r2, [r7, #0]
 800ef1e:	4413      	add	r3, r2
 800ef20:	7819      	ldrb	r1, [r3, #0]
 800ef22:	f107 0210 	add.w	r2, r7, #16
 800ef26:	6a3b      	ldr	r3, [r7, #32]
 800ef28:	4413      	add	r3, r2
 800ef2a:	460a      	mov	r2, r1
 800ef2c:	701a      	strb	r2, [r3, #0]
        Index++;
 800ef2e:	69fb      	ldr	r3, [r7, #28]
 800ef30:	3301      	adds	r3, #1
 800ef32:	61fb      	str	r3, [r7, #28]
      for (i = 0; i < NumberOfWrites; i++) {
 800ef34:	6a3b      	ldr	r3, [r7, #32]
 800ef36:	3301      	adds	r3, #1
 800ef38:	623b      	str	r3, [r7, #32]
 800ef3a:	e7ea      	b.n	800ef12 <VL53L0X_load_tuning_settings+0x186>
      }

      Status = VL53L0X_WriteMulti(Dev, Address, localBuffer, NumberOfWrites);
 800ef3c:	7efb      	ldrb	r3, [r7, #27]
 800ef3e:	f107 0210 	add.w	r2, r7, #16
 800ef42:	7eb9      	ldrb	r1, [r7, #26]
 800ef44:	6878      	ldr	r0, [r7, #4]
 800ef46:	f000 ff98 	bl	800fe7a <VL53L0X_WriteMulti>
 800ef4a:	4603      	mov	r3, r0
 800ef4c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ef50:	e726      	b.n	800eda0 <VL53L0X_load_tuning_settings+0x14>

    } else {
      Status = VL53L0X_ERROR_INVALID_PARAMS;
 800ef52:	23fc      	movs	r3, #252	; 0xfc
 800ef54:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  while ((*(pTuningSettingBuffer + Index) != 0) &&
 800ef58:	e722      	b.n	800eda0 <VL53L0X_load_tuning_settings+0x14>
    }
  }

  LOG_FUNCTION_END(Status);
  return Status;
 800ef5a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800ef5e:	4618      	mov	r0, r3
 800ef60:	3728      	adds	r7, #40	; 0x28
 800ef62:	46bd      	mov	sp, r7
 800ef64:	bd80      	pop	{r7, pc}
 800ef66:	bf00      	nop

0800ef68 <VL53L0X_get_total_xtalk_rate>:

VL53L0X_Error VL53L0X_get_total_xtalk_rate(
    VL53L0X_DEV Dev, VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
    FixPoint1616_t *ptotal_xtalk_rate_mcps) {
 800ef68:	b580      	push	{r7, lr}
 800ef6a:	b088      	sub	sp, #32
 800ef6c:	af00      	add	r7, sp, #0
 800ef6e:	60f8      	str	r0, [r7, #12]
 800ef70:	60b9      	str	r1, [r7, #8]
 800ef72:	607a      	str	r2, [r7, #4]
  VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ef74:	2300      	movs	r3, #0
 800ef76:	77fb      	strb	r3, [r7, #31]

  uint8_t xtalkCompEnable;
  FixPoint1616_t totalXtalkMegaCps;
  FixPoint1616_t xtalkPerSpadMegaCps;

  *ptotal_xtalk_rate_mcps = 0;
 800ef78:	687b      	ldr	r3, [r7, #4]
 800ef7a:	2200      	movs	r2, #0
 800ef7c:	601a      	str	r2, [r3, #0]

  Status = VL53L0X_GetXTalkCompensationEnable(Dev, &xtalkCompEnable);
 800ef7e:	f107 0313 	add.w	r3, r7, #19
 800ef82:	4619      	mov	r1, r3
 800ef84:	68f8      	ldr	r0, [r7, #12]
 800ef86:	f7fc ff33 	bl	800bdf0 <VL53L0X_GetXTalkCompensationEnable>
 800ef8a:	4603      	mov	r3, r0
 800ef8c:	77fb      	strb	r3, [r7, #31]
  if (Status == VL53L0X_ERROR_NONE) {
 800ef8e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800ef92:	2b00      	cmp	r3, #0
 800ef94:	d111      	bne.n	800efba <VL53L0X_get_total_xtalk_rate+0x52>

    if (xtalkCompEnable) {
 800ef96:	7cfb      	ldrb	r3, [r7, #19]
 800ef98:	2b00      	cmp	r3, #0
 800ef9a:	d00e      	beq.n	800efba <VL53L0X_get_total_xtalk_rate+0x52>

      VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps,
 800ef9c:	68fb      	ldr	r3, [r7, #12]
 800ef9e:	6a1b      	ldr	r3, [r3, #32]
 800efa0:	61bb      	str	r3, [r7, #24]
                                xtalkPerSpadMegaCps);

      /* FixPoint1616 * FixPoint 8:8 = FixPoint0824 */
      totalXtalkMegaCps =
          pRangingMeasurementData->EffectiveSpadRtnCount * xtalkPerSpadMegaCps;
 800efa2:	68bb      	ldr	r3, [r7, #8]
 800efa4:	8a9b      	ldrh	r3, [r3, #20]
 800efa6:	461a      	mov	r2, r3
      totalXtalkMegaCps =
 800efa8:	69bb      	ldr	r3, [r7, #24]
 800efaa:	fb02 f303 	mul.w	r3, r2, r3
 800efae:	617b      	str	r3, [r7, #20]

      /* FixPoint0824 >> 8 = FixPoint1616 */
      *ptotal_xtalk_rate_mcps = (totalXtalkMegaCps + 0x80) >> 8;
 800efb0:	697b      	ldr	r3, [r7, #20]
 800efb2:	3380      	adds	r3, #128	; 0x80
 800efb4:	0a1a      	lsrs	r2, r3, #8
 800efb6:	687b      	ldr	r3, [r7, #4]
 800efb8:	601a      	str	r2, [r3, #0]
    }
  }

  return Status;
 800efba:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800efbe:	4618      	mov	r0, r3
 800efc0:	3720      	adds	r7, #32
 800efc2:	46bd      	mov	sp, r7
 800efc4:	bd80      	pop	{r7, pc}

0800efc6 <VL53L0X_get_total_signal_rate>:

VL53L0X_Error VL53L0X_get_total_signal_rate(
    VL53L0X_DEV Dev, VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
    FixPoint1616_t *ptotal_signal_rate_mcps) {
 800efc6:	b580      	push	{r7, lr}
 800efc8:	b086      	sub	sp, #24
 800efca:	af00      	add	r7, sp, #0
 800efcc:	60f8      	str	r0, [r7, #12]
 800efce:	60b9      	str	r1, [r7, #8]
 800efd0:	607a      	str	r2, [r7, #4]
  VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800efd2:	2300      	movs	r3, #0
 800efd4:	75fb      	strb	r3, [r7, #23]
  FixPoint1616_t totalXtalkMegaCps;

  LOG_FUNCTION_START("");

  *ptotal_signal_rate_mcps = pRangingMeasurementData->SignalRateRtnMegaCps;
 800efd6:	68bb      	ldr	r3, [r7, #8]
 800efd8:	68da      	ldr	r2, [r3, #12]
 800efda:	687b      	ldr	r3, [r7, #4]
 800efdc:	601a      	str	r2, [r3, #0]

  Status = VL53L0X_get_total_xtalk_rate(Dev, pRangingMeasurementData,
 800efde:	f107 0310 	add.w	r3, r7, #16
 800efe2:	461a      	mov	r2, r3
 800efe4:	68b9      	ldr	r1, [r7, #8]
 800efe6:	68f8      	ldr	r0, [r7, #12]
 800efe8:	f7ff ffbe 	bl	800ef68 <VL53L0X_get_total_xtalk_rate>
 800efec:	4603      	mov	r3, r0
 800efee:	75fb      	strb	r3, [r7, #23]
                                        &totalXtalkMegaCps);

  if (Status == VL53L0X_ERROR_NONE)
 800eff0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800eff4:	2b00      	cmp	r3, #0
 800eff6:	d105      	bne.n	800f004 <VL53L0X_get_total_signal_rate+0x3e>
    *ptotal_signal_rate_mcps += totalXtalkMegaCps;
 800eff8:	687b      	ldr	r3, [r7, #4]
 800effa:	681a      	ldr	r2, [r3, #0]
 800effc:	693b      	ldr	r3, [r7, #16]
 800effe:	441a      	add	r2, r3
 800f000:	687b      	ldr	r3, [r7, #4]
 800f002:	601a      	str	r2, [r3, #0]

  return Status;
 800f004:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f008:	4618      	mov	r0, r3
 800f00a:	3718      	adds	r7, #24
 800f00c:	46bd      	mov	sp, r7
 800f00e:	bd80      	pop	{r7, pc}

0800f010 <_Z17VL53L0X_calc_dmaxP13VL53L0X_Dev_tmmmmmmPm>:
                                FixPoint1616_t totalSignalRate_mcps,
                                FixPoint1616_t totalCorrSignalRate_mcps,
                                FixPoint1616_t pwMult, uint32_t sigmaEstimateP1,
                                FixPoint1616_t sigmaEstimateP2,
                                uint32_t peakVcselDuration_us,
                                uint32_t *pdmax_mm) {
 800f010:	b580      	push	{r7, lr}
 800f012:	b09a      	sub	sp, #104	; 0x68
 800f014:	af00      	add	r7, sp, #0
 800f016:	60f8      	str	r0, [r7, #12]
 800f018:	60b9      	str	r1, [r7, #8]
 800f01a:	607a      	str	r2, [r7, #4]
 800f01c:	603b      	str	r3, [r7, #0]
  const uint32_t cSigmaLimit = 18;
 800f01e:	2312      	movs	r3, #18
 800f020:	657b      	str	r3, [r7, #84]	; 0x54
  const FixPoint1616_t cSignalLimit = 0x4000;     /* 0.25 */
 800f022:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800f026:	653b      	str	r3, [r7, #80]	; 0x50
  const FixPoint1616_t cSigmaEstRef = 0x00000042; /* 0.001 */
 800f028:	2342      	movs	r3, #66	; 0x42
 800f02a:	64fb      	str	r3, [r7, #76]	; 0x4c
  const uint32_t cAmbEffWidthSigmaEst_ns = 6;
 800f02c:	2306      	movs	r3, #6
 800f02e:	64bb      	str	r3, [r7, #72]	; 0x48
  const uint32_t cAmbEffWidthDMax_ns = 7;
 800f030:	2307      	movs	r3, #7
 800f032:	647b      	str	r3, [r7, #68]	; 0x44
  FixPoint1616_t dmaxAmbient;
  FixPoint1616_t dmaxDarkTmp;
  FixPoint1616_t sigmaEstP2Tmp;
  uint32_t signalRateTemp_mcps;

  VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800f034:	2300      	movs	r3, #0
 800f036:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  LOG_FUNCTION_START("");

  dmaxCalRange_mm = PALDevDataGet(Dev, DmaxCalRangeMilliMeter);
 800f03a:	68fb      	ldr	r3, [r7, #12]
 800f03c:	f8b3 3154 	ldrh.w	r3, [r3, #340]	; 0x154
 800f040:	63fb      	str	r3, [r7, #60]	; 0x3c

  dmaxCalSignalRateRtn_mcps = PALDevDataGet(Dev, DmaxCalSignalRateRtnMegaCps);
 800f042:	68fb      	ldr	r3, [r7, #12]
 800f044:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 800f048:	63bb      	str	r3, [r7, #56]	; 0x38

  /* uint32 * FixPoint1616 = FixPoint1616 */
  SignalAt0mm = dmaxCalRange_mm * dmaxCalSignalRateRtn_mcps;
 800f04a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f04c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f04e:	fb02 f303 	mul.w	r3, r2, r3
 800f052:	637b      	str	r3, [r7, #52]	; 0x34

  /* FixPoint1616 >> 8 = FixPoint2408 */
  SignalAt0mm = (SignalAt0mm + 0x80) >> 8;
 800f054:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f056:	3380      	adds	r3, #128	; 0x80
 800f058:	0a1b      	lsrs	r3, r3, #8
 800f05a:	637b      	str	r3, [r7, #52]	; 0x34
  SignalAt0mm *= dmaxCalRange_mm;
 800f05c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f05e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800f060:	fb02 f303 	mul.w	r3, r2, r3
 800f064:	637b      	str	r3, [r7, #52]	; 0x34

  minSignalNeeded_p1 = 0;
 800f066:	2300      	movs	r3, #0
 800f068:	667b      	str	r3, [r7, #100]	; 0x64
  if (totalCorrSignalRate_mcps > 0) {
 800f06a:	687b      	ldr	r3, [r7, #4]
 800f06c:	2b00      	cmp	r3, #0
 800f06e:	d01b      	beq.n	800f0a8 <_Z17VL53L0X_calc_dmaxP13VL53L0X_Dev_tmmmmmmPm+0x98>

    /* Shift by 10 bits to increase resolution prior to the
     * division */
    signalRateTemp_mcps = totalSignalRate_mcps << 10;
 800f070:	68bb      	ldr	r3, [r7, #8]
 800f072:	029b      	lsls	r3, r3, #10
 800f074:	633b      	str	r3, [r7, #48]	; 0x30

    /* Add rounding value prior to division */
    minSignalNeeded_p1 = signalRateTemp_mcps + (totalCorrSignalRate_mcps / 2);
 800f076:	687b      	ldr	r3, [r7, #4]
 800f078:	085b      	lsrs	r3, r3, #1
 800f07a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f07c:	4413      	add	r3, r2
 800f07e:	667b      	str	r3, [r7, #100]	; 0x64

    /* FixPoint0626/FixPoint1616 = FixPoint2210 */
    minSignalNeeded_p1 /= totalCorrSignalRate_mcps;
 800f080:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800f082:	687b      	ldr	r3, [r7, #4]
 800f084:	fbb2 f3f3 	udiv	r3, r2, r3
 800f088:	667b      	str	r3, [r7, #100]	; 0x64

    /* Apply a factored version of the speed of light.
     Correction to be applied at the end */
    minSignalNeeded_p1 *= 3;
 800f08a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800f08c:	4613      	mov	r3, r2
 800f08e:	005b      	lsls	r3, r3, #1
 800f090:	4413      	add	r3, r2
 800f092:	667b      	str	r3, [r7, #100]	; 0x64

    /* FixPoint2210 * FixPoint2210 = FixPoint1220 */
    minSignalNeeded_p1 *= minSignalNeeded_p1;
 800f094:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f096:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800f098:	fb02 f303 	mul.w	r3, r2, r3
 800f09c:	667b      	str	r3, [r7, #100]	; 0x64

    /* FixPoint1220 >> 16 = FixPoint2804 */
    minSignalNeeded_p1 = (minSignalNeeded_p1 + 0x8000) >> 16;
 800f09e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f0a0:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800f0a4:	0c1b      	lsrs	r3, r3, #16
 800f0a6:	667b      	str	r3, [r7, #100]	; 0x64
  }

  minSignalNeeded_p2 = pwMult * sigmaEstimateP1;
 800f0a8:	683b      	ldr	r3, [r7, #0]
 800f0aa:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800f0ac:	fb02 f303 	mul.w	r3, r2, r3
 800f0b0:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* FixPoint1616 >> 16 =	 uint32 */
  minSignalNeeded_p2 = (minSignalNeeded_p2 + 0x8000) >> 16;
 800f0b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0b4:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800f0b8:	0c1b      	lsrs	r3, r3, #16
 800f0ba:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* uint32 * uint32	=  uint32 */
  minSignalNeeded_p2 *= minSignalNeeded_p2;
 800f0bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f0c0:	fb02 f303 	mul.w	r3, r2, r3
 800f0c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Check sigmaEstimateP2
   * If this value is too high there is not enough signal rate
   * to calculate dmax value so set a suitable value to ensure
   * a very small dmax.
   */
  sigmaEstP2Tmp = (sigmaEstimateP2 + 0x8000) >> 16;
 800f0c6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f0c8:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800f0cc:	0c1b      	lsrs	r3, r3, #16
 800f0ce:	62bb      	str	r3, [r7, #40]	; 0x28
  sigmaEstP2Tmp =
      (sigmaEstP2Tmp + cAmbEffWidthSigmaEst_ns / 2) / cAmbEffWidthSigmaEst_ns;
 800f0d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f0d2:	3303      	adds	r3, #3
  sigmaEstP2Tmp =
 800f0d4:	4a56      	ldr	r2, [pc, #344]	; (800f230 <_Z17VL53L0X_calc_dmaxP13VL53L0X_Dev_tmmmmmmPm+0x220>)
 800f0d6:	fba2 2303 	umull	r2, r3, r2, r3
 800f0da:	089b      	lsrs	r3, r3, #2
 800f0dc:	62bb      	str	r3, [r7, #40]	; 0x28
  sigmaEstP2Tmp *= cAmbEffWidthDMax_ns;
 800f0de:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f0e0:	4613      	mov	r3, r2
 800f0e2:	00db      	lsls	r3, r3, #3
 800f0e4:	1a9b      	subs	r3, r3, r2
 800f0e6:	62bb      	str	r3, [r7, #40]	; 0x28

  if (sigmaEstP2Tmp > 0xffff) {
 800f0e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f0ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f0ee:	d302      	bcc.n	800f0f6 <_Z17VL53L0X_calc_dmaxP13VL53L0X_Dev_tmmmmmmPm+0xe6>
    minSignalNeeded_p3 = 0xfff00000;
 800f0f0:	4b50      	ldr	r3, [pc, #320]	; (800f234 <_Z17VL53L0X_calc_dmaxP13VL53L0X_Dev_tmmmmmmPm+0x224>)
 800f0f2:	663b      	str	r3, [r7, #96]	; 0x60
 800f0f4:	e015      	b.n	800f122 <_Z17VL53L0X_calc_dmaxP13VL53L0X_Dev_tmmmmmmPm+0x112>

    /* DMAX uses a different ambient width from sigma, so apply
     * correction.
     * Perform division before multiplication to prevent overflow.
     */
    sigmaEstimateP2 = (sigmaEstimateP2 + cAmbEffWidthSigmaEst_ns / 2) /
 800f0f6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f0f8:	3303      	adds	r3, #3
 800f0fa:	4a4d      	ldr	r2, [pc, #308]	; (800f230 <_Z17VL53L0X_calc_dmaxP13VL53L0X_Dev_tmmmmmmPm+0x220>)
 800f0fc:	fba2 2303 	umull	r2, r3, r2, r3
 800f100:	089b      	lsrs	r3, r3, #2
 800f102:	677b      	str	r3, [r7, #116]	; 0x74
                      cAmbEffWidthSigmaEst_ns;
    sigmaEstimateP2 *= cAmbEffWidthDMax_ns;
 800f104:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800f106:	4613      	mov	r3, r2
 800f108:	00db      	lsls	r3, r3, #3
 800f10a:	1a9b      	subs	r3, r3, r2
 800f10c:	677b      	str	r3, [r7, #116]	; 0x74

    /* FixPoint1616 >> 16 = uint32 */
    minSignalNeeded_p3 = (sigmaEstimateP2 + 0x8000) >> 16;
 800f10e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f110:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800f114:	0c1b      	lsrs	r3, r3, #16
 800f116:	663b      	str	r3, [r7, #96]	; 0x60

    minSignalNeeded_p3 *= minSignalNeeded_p3;
 800f118:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f11a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800f11c:	fb02 f303 	mul.w	r3, r2, r3
 800f120:	663b      	str	r3, [r7, #96]	; 0x60
  }

  /* FixPoint1814 / uint32 = FixPoint1814 */
  sigmaLimitTmp = ((cSigmaLimit << 14) + 500) / 1000;
 800f122:	f240 1327 	movw	r3, #295	; 0x127
 800f126:	627b      	str	r3, [r7, #36]	; 0x24

  /* FixPoint1814 * FixPoint1814 = FixPoint3628 := FixPoint0428 */
  sigmaLimitTmp *= sigmaLimitTmp;
 800f128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f12a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f12c:	fb02 f303 	mul.w	r3, r2, r3
 800f130:	627b      	str	r3, [r7, #36]	; 0x24

  /* FixPoint1616 * FixPoint1616 = FixPoint3232 */
  sigmaEstSqTmp = cSigmaEstRef * cSigmaEstRef;
 800f132:	f241 1304 	movw	r3, #4356	; 0x1104
 800f136:	623b      	str	r3, [r7, #32]

  /* FixPoint3232 >> 4 = FixPoint0428 */
  sigmaEstSqTmp = (sigmaEstSqTmp + 0x08) >> 4;
 800f138:	6a3b      	ldr	r3, [r7, #32]
 800f13a:	3308      	adds	r3, #8
 800f13c:	091b      	lsrs	r3, r3, #4
 800f13e:	623b      	str	r3, [r7, #32]

  /* FixPoint0428 - FixPoint0428	= FixPoint0428 */
  sigmaLimitTmp -= sigmaEstSqTmp;
 800f140:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f142:	6a3b      	ldr	r3, [r7, #32]
 800f144:	1ad3      	subs	r3, r2, r3
 800f146:	627b      	str	r3, [r7, #36]	; 0x24

  /* uint32_t * FixPoint0428 = FixPoint0428 */
  minSignalNeeded_p4 = 4 * 12 * sigmaLimitTmp;
 800f148:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f14a:	4613      	mov	r3, r2
 800f14c:	005b      	lsls	r3, r3, #1
 800f14e:	4413      	add	r3, r2
 800f150:	011b      	lsls	r3, r3, #4
 800f152:	61fb      	str	r3, [r7, #28]

  /* FixPoint0428 >> 14 = FixPoint1814 */
  minSignalNeeded_p4 = (minSignalNeeded_p4 + 0x2000) >> 14;
 800f154:	69fb      	ldr	r3, [r7, #28]
 800f156:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800f15a:	0b9b      	lsrs	r3, r3, #14
 800f15c:	61fb      	str	r3, [r7, #28]

  /* uint32 + uint32 = uint32 */
  minSignalNeeded = (minSignalNeeded_p2 + minSignalNeeded_p3);
 800f15e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f160:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f162:	4413      	add	r3, r2
 800f164:	61bb      	str	r3, [r7, #24]

  /* uint32 / uint32 = uint32 */
  minSignalNeeded += (peakVcselDuration_us / 2);
 800f166:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f168:	085b      	lsrs	r3, r3, #1
 800f16a:	69ba      	ldr	r2, [r7, #24]
 800f16c:	4413      	add	r3, r2
 800f16e:	61bb      	str	r3, [r7, #24]
  minSignalNeeded /= peakVcselDuration_us;
 800f170:	69ba      	ldr	r2, [r7, #24]
 800f172:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f174:	fbb2 f3f3 	udiv	r3, r2, r3
 800f178:	61bb      	str	r3, [r7, #24]

  /* uint32 << 14 = FixPoint1814 */
  minSignalNeeded <<= 14;
 800f17a:	69bb      	ldr	r3, [r7, #24]
 800f17c:	039b      	lsls	r3, r3, #14
 800f17e:	61bb      	str	r3, [r7, #24]

  /* FixPoint1814 / FixPoint1814 = uint32 */
  minSignalNeeded += (minSignalNeeded_p4 / 2);
 800f180:	69fb      	ldr	r3, [r7, #28]
 800f182:	085b      	lsrs	r3, r3, #1
 800f184:	69ba      	ldr	r2, [r7, #24]
 800f186:	4413      	add	r3, r2
 800f188:	61bb      	str	r3, [r7, #24]
  minSignalNeeded /= minSignalNeeded_p4;
 800f18a:	69ba      	ldr	r2, [r7, #24]
 800f18c:	69fb      	ldr	r3, [r7, #28]
 800f18e:	fbb2 f3f3 	udiv	r3, r2, r3
 800f192:	61bb      	str	r3, [r7, #24]

  /* FixPoint3200 * FixPoint2804 := FixPoint2804*/
  minSignalNeeded *= minSignalNeeded_p1;
 800f194:	69bb      	ldr	r3, [r7, #24]
 800f196:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800f198:	fb02 f303 	mul.w	r3, r2, r3
 800f19c:	61bb      	str	r3, [r7, #24]
   * and 10E-22 on the denominator.
   * We do this because 32bit fix point calculation can't
   * handle the larger and smaller elements of this equation,
   * i.e. speed of light and pulse widths.
   */
  minSignalNeeded = (minSignalNeeded + 500) / 1000;
 800f19e:	69bb      	ldr	r3, [r7, #24]
 800f1a0:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800f1a4:	4a24      	ldr	r2, [pc, #144]	; (800f238 <_Z17VL53L0X_calc_dmaxP13VL53L0X_Dev_tmmmmmmPm+0x228>)
 800f1a6:	fba2 2303 	umull	r2, r3, r2, r3
 800f1aa:	099b      	lsrs	r3, r3, #6
 800f1ac:	61bb      	str	r3, [r7, #24]
  minSignalNeeded <<= 4;
 800f1ae:	69bb      	ldr	r3, [r7, #24]
 800f1b0:	011b      	lsls	r3, r3, #4
 800f1b2:	61bb      	str	r3, [r7, #24]

  minSignalNeeded = (minSignalNeeded + 500) / 1000;
 800f1b4:	69bb      	ldr	r3, [r7, #24]
 800f1b6:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800f1ba:	4a1f      	ldr	r2, [pc, #124]	; (800f238 <_Z17VL53L0X_calc_dmaxP13VL53L0X_Dev_tmmmmmmPm+0x228>)
 800f1bc:	fba2 2303 	umull	r2, r3, r2, r3
 800f1c0:	099b      	lsrs	r3, r3, #6
 800f1c2:	61bb      	str	r3, [r7, #24]

  /* FixPoint1616 >> 8 = FixPoint2408 */
  signalLimitTmp = (cSignalLimit + 0x80) >> 8;
 800f1c4:	2340      	movs	r3, #64	; 0x40
 800f1c6:	617b      	str	r3, [r7, #20]

  /* FixPoint2408/FixPoint2408 = uint32 */
  if (signalLimitTmp != 0)
 800f1c8:	697b      	ldr	r3, [r7, #20]
 800f1ca:	2b00      	cmp	r3, #0
 800f1cc:	d008      	beq.n	800f1e0 <_Z17VL53L0X_calc_dmaxP13VL53L0X_Dev_tmmmmmmPm+0x1d0>
    dmaxDarkTmp = (SignalAt0mm + (signalLimitTmp / 2)) / signalLimitTmp;
 800f1ce:	697b      	ldr	r3, [r7, #20]
 800f1d0:	085a      	lsrs	r2, r3, #1
 800f1d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f1d4:	441a      	add	r2, r3
 800f1d6:	697b      	ldr	r3, [r7, #20]
 800f1d8:	fbb2 f3f3 	udiv	r3, r2, r3
 800f1dc:	65bb      	str	r3, [r7, #88]	; 0x58
 800f1de:	e001      	b.n	800f1e4 <_Z17VL53L0X_calc_dmaxP13VL53L0X_Dev_tmmmmmmPm+0x1d4>
  else
    dmaxDarkTmp = 0;
 800f1e0:	2300      	movs	r3, #0
 800f1e2:	65bb      	str	r3, [r7, #88]	; 0x58

  dmaxDark = VL53L0X_isqrt(dmaxDarkTmp);
 800f1e4:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800f1e6:	f7fe fc45 	bl	800da74 <VL53L0X_isqrt>
 800f1ea:	6138      	str	r0, [r7, #16]

  /* FixPoint2408/FixPoint2408 = uint32 */
  if (minSignalNeeded != 0)
 800f1ec:	69bb      	ldr	r3, [r7, #24]
 800f1ee:	2b00      	cmp	r3, #0
 800f1f0:	d008      	beq.n	800f204 <_Z17VL53L0X_calc_dmaxP13VL53L0X_Dev_tmmmmmmPm+0x1f4>
    dmaxAmbient = (SignalAt0mm + minSignalNeeded / 2) / minSignalNeeded;
 800f1f2:	69bb      	ldr	r3, [r7, #24]
 800f1f4:	085a      	lsrs	r2, r3, #1
 800f1f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f1f8:	441a      	add	r2, r3
 800f1fa:	69bb      	ldr	r3, [r7, #24]
 800f1fc:	fbb2 f3f3 	udiv	r3, r2, r3
 800f200:	65fb      	str	r3, [r7, #92]	; 0x5c
 800f202:	e001      	b.n	800f208 <_Z17VL53L0X_calc_dmaxP13VL53L0X_Dev_tmmmmmmPm+0x1f8>
  else
    dmaxAmbient = 0;
 800f204:	2300      	movs	r3, #0
 800f206:	65fb      	str	r3, [r7, #92]	; 0x5c

  dmaxAmbient = VL53L0X_isqrt(dmaxAmbient);
 800f208:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800f20a:	f7fe fc33 	bl	800da74 <VL53L0X_isqrt>
 800f20e:	65f8      	str	r0, [r7, #92]	; 0x5c

  *pdmax_mm = dmaxDark;
 800f210:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800f212:	693a      	ldr	r2, [r7, #16]
 800f214:	601a      	str	r2, [r3, #0]
  if (dmaxDark > dmaxAmbient)
 800f216:	693a      	ldr	r2, [r7, #16]
 800f218:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f21a:	429a      	cmp	r2, r3
 800f21c:	d902      	bls.n	800f224 <_Z17VL53L0X_calc_dmaxP13VL53L0X_Dev_tmmmmmmPm+0x214>
    *pdmax_mm = dmaxAmbient;
 800f21e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800f220:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800f222:	601a      	str	r2, [r3, #0]

  LOG_FUNCTION_END(Status);

  return Status;
 800f224:	f997 3043 	ldrsb.w	r3, [r7, #67]	; 0x43
}
 800f228:	4618      	mov	r0, r3
 800f22a:	3768      	adds	r7, #104	; 0x68
 800f22c:	46bd      	mov	sp, r7
 800f22e:	bd80      	pop	{r7, pc}
 800f230:	aaaaaaab 	.word	0xaaaaaaab
 800f234:	fff00000 	.word	0xfff00000
 800f238:	10624dd3 	.word	0x10624dd3

0800f23c <VL53L0X_calc_sigma_estimate>:

VL53L0X_Error VL53L0X_calc_sigma_estimate(
    VL53L0X_DEV Dev, VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
    FixPoint1616_t *pSigmaEstimate, uint32_t *pDmax_mm) {
 800f23c:	b580      	push	{r7, lr}
 800f23e:	b0b2      	sub	sp, #200	; 0xc8
 800f240:	af04      	add	r7, sp, #16
 800f242:	60f8      	str	r0, [r7, #12]
 800f244:	60b9      	str	r1, [r7, #8]
 800f246:	607a      	str	r2, [r7, #4]
 800f248:	603b      	str	r3, [r7, #0]
  /* Expressed in 100ths of a ns, i.e. centi-ns */
  const uint32_t cPulseEffectiveWidth_centi_ns = 800;
 800f24a:	f44f 7348 	mov.w	r3, #800	; 0x320
 800f24e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  /* Expressed in 100ths of a ns, i.e. centi-ns */
  const uint32_t cAmbientEffectiveWidth_centi_ns = 600;
 800f252:	f44f 7316 	mov.w	r3, #600	; 0x258
 800f256:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  const FixPoint1616_t cSigmaEstRef = 0x00000042; /* 0.001 */
 800f25a:	2342      	movs	r3, #66	; 0x42
 800f25c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  const uint32_t cVcselPulseWidth_ps = 4700;      /* pico secs */
 800f260:	f241 235c 	movw	r3, #4700	; 0x125c
 800f264:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  const FixPoint1616_t cSigmaEstMax = 0x028F87AE;
 800f268:	4b69      	ldr	r3, [pc, #420]	; (800f410 <VL53L0X_calc_sigma_estimate+0x1d4>)
 800f26a:	61fb      	str	r3, [r7, #28]
  const FixPoint1616_t cSigmaEstRtnMax = 0xF000;
 800f26c:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800f270:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  const FixPoint1616_t cAmbToSignalRatioMax =
 800f274:	4b67      	ldr	r3, [pc, #412]	; (800f414 <VL53L0X_calc_sigma_estimate+0x1d8>)
 800f276:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
      0xF0000000 / cAmbientEffectiveWidth_centi_ns;
  /* Time Of Flight per mm (6.6 pico secs) */
  const FixPoint1616_t cTOF_per_mm_ps = 0x0006999A;
 800f27a:	4b67      	ldr	r3, [pc, #412]	; (800f418 <VL53L0X_calc_sigma_estimate+0x1dc>)
 800f27c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  const uint32_t c16BitRoundingParam = 0x00008000;
 800f280:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f284:	67fb      	str	r3, [r7, #124]	; 0x7c
  const FixPoint1616_t cMaxXTalk_kcps = 0x00320000;
 800f286:	f44f 1348 	mov.w	r3, #3276800	; 0x320000
 800f28a:	67bb      	str	r3, [r7, #120]	; 0x78
  const uint32_t cPllPeriod_ps = 1655;
 800f28c:	f240 6377 	movw	r3, #1655	; 0x677
 800f290:	677b      	str	r3, [r7, #116]	; 0x74
  FixPoint1616_t xTalkCorrection;
  FixPoint1616_t ambientRate_kcps;
  FixPoint1616_t peakSignalRate_kcps;
  FixPoint1616_t xTalkCompRate_mcps;
  uint32_t xTalkCompRate_kcps;
  VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800f292:	2300      	movs	r3, #0
 800f294:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
   *	- SigmaEstEffAmbWidth
   */

  LOG_FUNCTION_START("");

  VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps,
 800f298:	68fb      	ldr	r3, [r7, #12]
 800f29a:	6a1b      	ldr	r3, [r3, #32]
 800f29c:	617b      	str	r3, [r7, #20]
   * We work in kcps rather than mcps as this helps keep within the
   * confines of the 32 Fix1616 type.
   */

  ambientRate_kcps =
      (pRangingMeasurementData->AmbientRateRtnMegaCps * 1000) >> 16;
 800f29e:	68bb      	ldr	r3, [r7, #8]
 800f2a0:	691b      	ldr	r3, [r3, #16]
 800f2a2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800f2a6:	fb02 f303 	mul.w	r3, r2, r3
  ambientRate_kcps =
 800f2aa:	0c1b      	lsrs	r3, r3, #16
 800f2ac:	673b      	str	r3, [r7, #112]	; 0x70

  correctedSignalRate_mcps = pRangingMeasurementData->SignalRateRtnMegaCps;
 800f2ae:	68bb      	ldr	r3, [r7, #8]
 800f2b0:	68db      	ldr	r3, [r3, #12]
 800f2b2:	66fb      	str	r3, [r7, #108]	; 0x6c

  Status = VL53L0X_get_total_signal_rate(Dev, pRangingMeasurementData,
 800f2b4:	f107 0310 	add.w	r3, r7, #16
 800f2b8:	461a      	mov	r2, r3
 800f2ba:	68b9      	ldr	r1, [r7, #8]
 800f2bc:	68f8      	ldr	r0, [r7, #12]
 800f2be:	f7ff fe82 	bl	800efc6 <VL53L0X_get_total_signal_rate>
 800f2c2:	4603      	mov	r3, r0
 800f2c4:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
                                         &totalSignalRate_mcps);
  Status = VL53L0X_get_total_xtalk_rate(Dev, pRangingMeasurementData,
 800f2c8:	f107 0314 	add.w	r3, r7, #20
 800f2cc:	461a      	mov	r2, r3
 800f2ce:	68b9      	ldr	r1, [r7, #8]
 800f2d0:	68f8      	ldr	r0, [r7, #12]
 800f2d2:	f7ff fe49 	bl	800ef68 <VL53L0X_get_total_xtalk_rate>
 800f2d6:	4603      	mov	r3, r0
 800f2d8:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
                                        &xTalkCompRate_mcps);

  /* Signal rate measurement provided by device is the
   * peak signal rate, not average.
   */
  peakSignalRate_kcps = (totalSignalRate_mcps * 1000);
 800f2dc:	693b      	ldr	r3, [r7, #16]
 800f2de:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800f2e2:	fb02 f303 	mul.w	r3, r2, r3
 800f2e6:	66bb      	str	r3, [r7, #104]	; 0x68
  peakSignalRate_kcps = (peakSignalRate_kcps + 0x8000) >> 16;
 800f2e8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f2ea:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800f2ee:	0c1b      	lsrs	r3, r3, #16
 800f2f0:	66bb      	str	r3, [r7, #104]	; 0x68

  xTalkCompRate_kcps = xTalkCompRate_mcps * 1000;
 800f2f2:	697b      	ldr	r3, [r7, #20]
 800f2f4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800f2f8:	fb02 f303 	mul.w	r3, r2, r3
 800f2fc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (xTalkCompRate_kcps > cMaxXTalk_kcps)
 800f300:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800f304:	f5b3 1f48 	cmp.w	r3, #3276800	; 0x320000
 800f308:	d903      	bls.n	800f312 <VL53L0X_calc_sigma_estimate+0xd6>
    xTalkCompRate_kcps = cMaxXTalk_kcps;
 800f30a:	f44f 1348 	mov.w	r3, #3276800	; 0x320000
 800f30e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (Status == VL53L0X_ERROR_NONE) {
 800f312:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
 800f316:	2b00      	cmp	r3, #0
 800f318:	d165      	bne.n	800f3e6 <VL53L0X_calc_sigma_estimate+0x1aa>

    /* Calculate final range macro periods */
    finalRangeTimeoutMicroSecs =
 800f31a:	68fb      	ldr	r3, [r7, #12]
 800f31c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800f320:	667b      	str	r3, [r7, #100]	; 0x64
        VL53L0X_GETDEVICESPECIFICPARAMETER(Dev, FinalRangeTimeoutMicroSecs);

    finalRangeVcselPCLKS =
 800f322:	68fb      	ldr	r3, [r7, #12]
 800f324:	f893 30e0 	ldrb.w	r3, [r3, #224]	; 0xe0
 800f328:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
        VL53L0X_GETDEVICESPECIFICPARAMETER(Dev, FinalRangeVcselPulsePeriod);

    finalRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 800f32c:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 800f330:	461a      	mov	r2, r3
 800f332:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800f334:	68f8      	ldr	r0, [r7, #12]
 800f336:	f7ff f939 	bl	800e5ac <VL53L0X_calc_timeout_mclks>
 800f33a:	65f8      	str	r0, [r7, #92]	; 0x5c
        Dev, finalRangeTimeoutMicroSecs, finalRangeVcselPCLKS);

    /* Calculate pre-range macro periods */
    preRangeTimeoutMicroSecs =
 800f33c:	68fb      	ldr	r3, [r7, #12]
 800f33e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800f342:	65bb      	str	r3, [r7, #88]	; 0x58
        VL53L0X_GETDEVICESPECIFICPARAMETER(Dev, PreRangeTimeoutMicroSecs);

    preRangeVcselPCLKS =
 800f344:	68fb      	ldr	r3, [r7, #12]
 800f346:	f893 30e8 	ldrb.w	r3, [r3, #232]	; 0xe8
 800f34a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        VL53L0X_GETDEVICESPECIFICPARAMETER(Dev, PreRangeVcselPulsePeriod);

    preRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 800f34e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f352:	461a      	mov	r2, r3
 800f354:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800f356:	68f8      	ldr	r0, [r7, #12]
 800f358:	f7ff f928 	bl	800e5ac <VL53L0X_calc_timeout_mclks>
 800f35c:	6538      	str	r0, [r7, #80]	; 0x50
        Dev, preRangeTimeoutMicroSecs, preRangeVcselPCLKS);

    vcselWidth = 3;
 800f35e:	2303      	movs	r3, #3
 800f360:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    if (finalRangeVcselPCLKS == 8)
 800f364:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 800f368:	2b08      	cmp	r3, #8
 800f36a:	d102      	bne.n	800f372 <VL53L0X_calc_sigma_estimate+0x136>
      vcselWidth = 2;
 800f36c:	2302      	movs	r3, #2
 800f36e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

    peakVcselDuration_us =
        vcselWidth * 2048 * (preRangeMacroPCLKS + finalRangeMacroPCLKS);
 800f372:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800f374:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f376:	4413      	add	r3, r2
 800f378:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800f37c:	fb02 f303 	mul.w	r3, r2, r3
    peakVcselDuration_us =
 800f380:	02db      	lsls	r3, r3, #11
 800f382:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    peakVcselDuration_us = (peakVcselDuration_us + 500) / 1000;
 800f386:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800f38a:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800f38e:	4a23      	ldr	r2, [pc, #140]	; (800f41c <VL53L0X_calc_sigma_estimate+0x1e0>)
 800f390:	fba2 2303 	umull	r2, r3, r2, r3
 800f394:	099b      	lsrs	r3, r3, #6
 800f396:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    peakVcselDuration_us *= cPllPeriod_ps;
 800f39a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800f39e:	f240 6277 	movw	r2, #1655	; 0x677
 800f3a2:	fb02 f303 	mul.w	r3, r2, r3
 800f3a6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    peakVcselDuration_us = (peakVcselDuration_us + 500) / 1000;
 800f3aa:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800f3ae:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800f3b2:	4a1a      	ldr	r2, [pc, #104]	; (800f41c <VL53L0X_calc_sigma_estimate+0x1e0>)
 800f3b4:	fba2 2303 	umull	r2, r3, r2, r3
 800f3b8:	099b      	lsrs	r3, r3, #6
 800f3ba:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

    /* Fix1616 >> 8 = Fix2408 */
    totalSignalRate_mcps = (totalSignalRate_mcps + 0x80) >> 8;
 800f3be:	693b      	ldr	r3, [r7, #16]
 800f3c0:	3380      	adds	r3, #128	; 0x80
 800f3c2:	0a1b      	lsrs	r3, r3, #8
 800f3c4:	613b      	str	r3, [r7, #16]

    /* Fix2408 * uint32 = Fix2408 */
    vcselTotalEventsRtn = totalSignalRate_mcps * peakVcselDuration_us;
 800f3c6:	693a      	ldr	r2, [r7, #16]
 800f3c8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800f3cc:	fb02 f303 	mul.w	r3, r2, r3
 800f3d0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

    /* Fix2408 >> 8 = uint32 */
    vcselTotalEventsRtn = (vcselTotalEventsRtn + 0x80) >> 8;
 800f3d4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800f3d8:	3380      	adds	r3, #128	; 0x80
 800f3da:	0a1b      	lsrs	r3, r3, #8
 800f3dc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

    /* Fix2408 << 8 = Fix1616 = */
    totalSignalRate_mcps <<= 8;
 800f3e0:	693b      	ldr	r3, [r7, #16]
 800f3e2:	021b      	lsls	r3, r3, #8
 800f3e4:	613b      	str	r3, [r7, #16]
  }

  if (Status != VL53L0X_ERROR_NONE) {
 800f3e6:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
 800f3ea:	2b00      	cmp	r3, #0
 800f3ec:	d002      	beq.n	800f3f4 <VL53L0X_calc_sigma_estimate+0x1b8>
    LOG_FUNCTION_END(Status);
    return Status;
 800f3ee:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
 800f3f2:	e12e      	b.n	800f652 <VL53L0X_calc_sigma_estimate+0x416>
  }

  if (peakSignalRate_kcps == 0) {
 800f3f4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f3f6:	2b00      	cmp	r3, #0
 800f3f8:	d112      	bne.n	800f420 <VL53L0X_calc_sigma_estimate+0x1e4>
    *pSigmaEstimate = cSigmaEstMax;
 800f3fa:	687b      	ldr	r3, [r7, #4]
 800f3fc:	4a04      	ldr	r2, [pc, #16]	; (800f410 <VL53L0X_calc_sigma_estimate+0x1d4>)
 800f3fe:	601a      	str	r2, [r3, #0]
    PALDevDataSet(Dev, SigmaEstimate, cSigmaEstMax);
 800f400:	68fb      	ldr	r3, [r7, #12]
 800f402:	4a03      	ldr	r2, [pc, #12]	; (800f410 <VL53L0X_calc_sigma_estimate+0x1d4>)
 800f404:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
    *pDmax_mm = 0;
 800f408:	683b      	ldr	r3, [r7, #0]
 800f40a:	2200      	movs	r2, #0
 800f40c:	601a      	str	r2, [r3, #0]
 800f40e:	e11e      	b.n	800f64e <VL53L0X_calc_sigma_estimate+0x412>
 800f410:	028f87ae 	.word	0x028f87ae
 800f414:	00666666 	.word	0x00666666
 800f418:	0006999a 	.word	0x0006999a
 800f41c:	10624dd3 	.word	0x10624dd3
  } else {
    if (vcselTotalEventsRtn < 1)
 800f420:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800f424:	2b00      	cmp	r3, #0
 800f426:	d102      	bne.n	800f42e <VL53L0X_calc_sigma_estimate+0x1f2>
      vcselTotalEventsRtn = 1;
 800f428:	2301      	movs	r3, #1
 800f42a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
     * deltaT_ps represents the time of flight in pico secs for the
     * current range measurement, using the "TOF per mm" constant
     * (in ps).
     */

    sigmaEstimateP1 = cPulseEffectiveWidth_centi_ns;
 800f42e:	f44f 7348 	mov.w	r3, #800	; 0x320
 800f432:	64fb      	str	r3, [r7, #76]	; 0x4c

    /* ((FixPoint1616 << 16)* uint32)/uint32 = FixPoint1616 */
    sigmaEstimateP2 = (ambientRate_kcps << 16) / peakSignalRate_kcps;
 800f434:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800f436:	041a      	lsls	r2, r3, #16
 800f438:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f43a:	fbb2 f3f3 	udiv	r3, r2, r3
 800f43e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    if (sigmaEstimateP2 > cAmbToSignalRatioMax) {
 800f442:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800f446:	4a85      	ldr	r2, [pc, #532]	; (800f65c <VL53L0X_calc_sigma_estimate+0x420>)
 800f448:	4293      	cmp	r3, r2
 800f44a:	d902      	bls.n	800f452 <VL53L0X_calc_sigma_estimate+0x216>
      /* Clip to prevent overflow. Will ensure safe
       * max result. */
      sigmaEstimateP2 = cAmbToSignalRatioMax;
 800f44c:	4b83      	ldr	r3, [pc, #524]	; (800f65c <VL53L0X_calc_sigma_estimate+0x420>)
 800f44e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    }
    sigmaEstimateP2 *= cAmbientEffectiveWidth_centi_ns;
 800f452:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800f456:	f44f 7216 	mov.w	r2, #600	; 0x258
 800f45a:	fb02 f303 	mul.w	r3, r2, r3
 800f45e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

    sigmaEstimateP3 = 2 * VL53L0X_isqrt(vcselTotalEventsRtn * 12);
 800f462:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800f466:	4613      	mov	r3, r2
 800f468:	005b      	lsls	r3, r3, #1
 800f46a:	4413      	add	r3, r2
 800f46c:	009b      	lsls	r3, r3, #2
 800f46e:	4618      	mov	r0, r3
 800f470:	f7fe fb00 	bl	800da74 <VL53L0X_isqrt>
 800f474:	4603      	mov	r3, r0
 800f476:	005b      	lsls	r3, r3, #1
 800f478:	64bb      	str	r3, [r7, #72]	; 0x48

    /* uint32 * FixPoint1616 = FixPoint1616 */
    deltaT_ps = pRangingMeasurementData->RangeMilliMeter * cTOF_per_mm_ps;
 800f47a:	68bb      	ldr	r3, [r7, #8]
 800f47c:	891b      	ldrh	r3, [r3, #8]
 800f47e:	461a      	mov	r2, r3
 800f480:	4b77      	ldr	r3, [pc, #476]	; (800f660 <VL53L0X_calc_sigma_estimate+0x424>)
 800f482:	fb03 f302 	mul.w	r3, r3, r2
 800f486:	647b      	str	r3, [r7, #68]	; 0x44
     * Divide result by 1000 to convert to mcps.
     * 500 is added to ensure rounding when integer division
     * truncates.
     */
    diff1_mcps =
        (((peakSignalRate_kcps << 16) - xTalkCompRate_kcps) + 500) / 1000;
 800f488:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f48a:	041a      	lsls	r2, r3, #16
 800f48c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800f490:	1ad3      	subs	r3, r2, r3
 800f492:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
    diff1_mcps =
 800f496:	4a73      	ldr	r2, [pc, #460]	; (800f664 <VL53L0X_calc_sigma_estimate+0x428>)
 800f498:	fba2 2303 	umull	r2, r3, r2, r3
 800f49c:	099b      	lsrs	r3, r3, #6
 800f49e:	643b      	str	r3, [r7, #64]	; 0x40

    /* vcselRate + xtalkCompRate */
    diff2_mcps =
        (((peakSignalRate_kcps << 16) + xTalkCompRate_kcps) + 500) / 1000;
 800f4a0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f4a2:	041a      	lsls	r2, r3, #16
 800f4a4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800f4a8:	4413      	add	r3, r2
 800f4aa:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
    diff2_mcps =
 800f4ae:	4a6d      	ldr	r2, [pc, #436]	; (800f664 <VL53L0X_calc_sigma_estimate+0x428>)
 800f4b0:	fba2 2303 	umull	r2, r3, r2, r3
 800f4b4:	099b      	lsrs	r3, r3, #6
 800f4b6:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Shift by 8 bits to increase resolution prior to the
     * division */
    diff1_mcps <<= 8;
 800f4b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f4ba:	021b      	lsls	r3, r3, #8
 800f4bc:	643b      	str	r3, [r7, #64]	; 0x40

    /* FixPoint0824/FixPoint1616 = FixPoint2408 */
    xTalkCorrection = abs((double) (diff1_mcps / diff2_mcps));
 800f4be:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800f4c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f4c2:	fbb2 f3f3 	udiv	r3, r2, r3
 800f4c6:	ee07 3a90 	vmov	s15, r3
 800f4ca:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800f4ce:	eeb0 0b47 	vmov.f64	d0, d7
 800f4d2:	f7fe fa7d 	bl	800d9d0 <_ZSt3absd>
 800f4d6:	eeb0 7b40 	vmov.f64	d7, d0
 800f4da:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800f4de:	ee17 3a90 	vmov	r3, s15
 800f4e2:	63bb      	str	r3, [r7, #56]	; 0x38

    /* FixPoint2408 << 8 = FixPoint1616 */
    xTalkCorrection <<= 8;
 800f4e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f4e6:	021b      	lsls	r3, r3, #8
 800f4e8:	63bb      	str	r3, [r7, #56]	; 0x38

    /* FixPoint1616/uint32 = FixPoint1616 */
    pwMult = deltaT_ps / cVcselPulseWidth_ps; /* smaller than 1.0f */
 800f4ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f4ec:	4a5e      	ldr	r2, [pc, #376]	; (800f668 <VL53L0X_calc_sigma_estimate+0x42c>)
 800f4ee:	fba2 2303 	umull	r2, r3, r2, r3
 800f4f2:	0a9b      	lsrs	r3, r3, #10
 800f4f4:	637b      	str	r3, [r7, #52]	; 0x34
    /*
     * FixPoint1616 * FixPoint1616 = FixPoint3232, however both
     * values are small enough such that32 bits will not be
     * exceeded.
     */
    pwMult *= ((1 << 16) - xTalkCorrection);
 800f4f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f4f8:	f5c3 3280 	rsb	r2, r3, #65536	; 0x10000
 800f4fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f4fe:	fb02 f303 	mul.w	r3, r2, r3
 800f502:	637b      	str	r3, [r7, #52]	; 0x34

    /* (FixPoint3232 >> 16) = FixPoint1616 */
    pwMult = (pwMult + c16BitRoundingParam) >> 16;
 800f504:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f506:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800f50a:	0c1b      	lsrs	r3, r3, #16
 800f50c:	637b      	str	r3, [r7, #52]	; 0x34

    /* FixPoint1616 + FixPoint1616 = FixPoint1616 */
    pwMult += (1 << 16);
 800f50e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f510:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800f514:	637b      	str	r3, [r7, #52]	; 0x34
    /*
     * At this point the value will be 1.xx, therefore if we square
     * the value this will exceed 32 bits. To address this perform
     * a single shift to the right before the multiplication.
     */
    pwMult >>= 1;
 800f516:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f518:	085b      	lsrs	r3, r3, #1
 800f51a:	637b      	str	r3, [r7, #52]	; 0x34
    /* FixPoint1715 * FixPoint1715 = FixPoint3430 */
    pwMult = pwMult * pwMult;
 800f51c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f51e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f520:	fb02 f303 	mul.w	r3, r2, r3
 800f524:	637b      	str	r3, [r7, #52]	; 0x34

    /* (FixPoint3430 >> 14) = Fix1616 */
    pwMult >>= 14;
 800f526:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f528:	0b9b      	lsrs	r3, r3, #14
 800f52a:	637b      	str	r3, [r7, #52]	; 0x34

    /* FixPoint1616 * uint32 = FixPoint1616 */
    sqr1 = pwMult * sigmaEstimateP1;
 800f52c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f52e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800f530:	fb02 f303 	mul.w	r3, r2, r3
 800f534:	633b      	str	r3, [r7, #48]	; 0x30

    /* (FixPoint1616 >> 16) = FixPoint3200 */
    sqr1 = (sqr1 + 0x8000) >> 16;
 800f536:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f538:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800f53c:	0c1b      	lsrs	r3, r3, #16
 800f53e:	633b      	str	r3, [r7, #48]	; 0x30

    /* FixPoint3200 * FixPoint3200 = FixPoint6400 */
    sqr1 *= sqr1;
 800f540:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f542:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f544:	fb02 f303 	mul.w	r3, r2, r3
 800f548:	633b      	str	r3, [r7, #48]	; 0x30

    sqr2 = sigmaEstimateP2;
 800f54a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800f54e:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* (FixPoint1616 >> 16) = FixPoint3200 */
    sqr2 = (sqr2 + 0x8000) >> 16;
 800f550:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f552:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800f556:	0c1b      	lsrs	r3, r3, #16
 800f558:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* FixPoint3200 * FixPoint3200 = FixPoint6400 */
    sqr2 *= sqr2;
 800f55a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f55c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f55e:	fb02 f303 	mul.w	r3, r2, r3
 800f562:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* FixPoint64000 + FixPoint6400 = FixPoint6400 */
    sqrSum = sqr1 + sqr2;
 800f564:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f566:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f568:	4413      	add	r3, r2
 800f56a:	62bb      	str	r3, [r7, #40]	; 0x28

    /* SQRT(FixPoin6400) = FixPoint3200 */
    sqrtResult_centi_ns = VL53L0X_isqrt(sqrSum);
 800f56c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f56e:	f7fe fa81 	bl	800da74 <VL53L0X_isqrt>
 800f572:	6278      	str	r0, [r7, #36]	; 0x24

    /* (FixPoint3200 << 16) = FixPoint1616 */
    sqrtResult_centi_ns <<= 16;
 800f574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f576:	041b      	lsls	r3, r3, #16
 800f578:	627b      	str	r3, [r7, #36]	; 0x24
    /*
     * Note that the Speed Of Light is expressed in um per 1E-10
     * seconds (2997) Therefore to get mm/ns we have to divide by
     * 10000
     */
    sigmaEstRtn = (((sqrtResult_centi_ns + 50) / 100) / sigmaEstimateP3);
 800f57a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f57c:	3332      	adds	r3, #50	; 0x32
 800f57e:	4a3b      	ldr	r2, [pc, #236]	; (800f66c <VL53L0X_calc_sigma_estimate+0x430>)
 800f580:	fba2 2303 	umull	r2, r3, r2, r3
 800f584:	095a      	lsrs	r2, r3, #5
 800f586:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f588:	fbb2 f3f3 	udiv	r3, r2, r3
 800f58c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    sigmaEstRtn *= VL53L0X_SPEED_OF_LIGHT_IN_AIR;
 800f590:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800f594:	f640 32b5 	movw	r2, #2997	; 0xbb5
 800f598:	fb02 f303 	mul.w	r3, r2, r3
 800f59c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

    /* Add 5000 before dividing by 10000 to ensure rounding. */
    sigmaEstRtn += 5000;
 800f5a0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800f5a4:	f241 3388 	movw	r3, #5000	; 0x1388
 800f5a8:	4413      	add	r3, r2
 800f5aa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    sigmaEstRtn /= 10000;
 800f5ae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800f5b2:	4a2f      	ldr	r2, [pc, #188]	; (800f670 <VL53L0X_calc_sigma_estimate+0x434>)
 800f5b4:	fba2 2303 	umull	r2, r3, r2, r3
 800f5b8:	0b5b      	lsrs	r3, r3, #13
 800f5ba:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

    if (sigmaEstRtn > cSigmaEstRtnMax) {
 800f5be:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800f5c2:	f5b3 4f70 	cmp.w	r3, #61440	; 0xf000
 800f5c6:	d903      	bls.n	800f5d0 <VL53L0X_calc_sigma_estimate+0x394>
      /* Clip to prevent overflow. Will ensure safe
       * max result. */
      sigmaEstRtn = cSigmaEstRtnMax;
 800f5c8:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800f5cc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    }

    /* FixPoint1616 * FixPoint1616 = FixPoint3232 */
    sqr1 = sigmaEstRtn * sigmaEstRtn;
 800f5d0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800f5d4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800f5d8:	fb02 f303 	mul.w	r3, r2, r3
 800f5dc:	633b      	str	r3, [r7, #48]	; 0x30
    /* FixPoint1616 * FixPoint1616 = FixPoint3232 */
    sqr2 = cSigmaEstRef * cSigmaEstRef;
 800f5de:	f241 1304 	movw	r3, #4356	; 0x1104
 800f5e2:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* sqrt(FixPoint3232) = FixPoint1616 */
    sqrtResult = VL53L0X_isqrt((sqr1 + sqr2));
 800f5e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f5e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f5e8:	4413      	add	r3, r2
 800f5ea:	4618      	mov	r0, r3
 800f5ec:	f7fe fa42 	bl	800da74 <VL53L0X_isqrt>
 800f5f0:	6238      	str	r0, [r7, #32]
     * Note that the Shift by 4 bits increases resolution prior to
     * the sqrt, therefore the result must be shifted by 2 bits to
     * the right to revert back to the FixPoint1616 format.
     */

    sigmaEstimate = 1000 * sqrtResult;
 800f5f2:	6a3b      	ldr	r3, [r7, #32]
 800f5f4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800f5f8:	fb02 f303 	mul.w	r3, r2, r3
 800f5fc:	61bb      	str	r3, [r7, #24]

    if ((peakSignalRate_kcps < 1) || (vcselTotalEventsRtn < 1) ||
 800f5fe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f600:	2b00      	cmp	r3, #0
 800f602:	d007      	beq.n	800f614 <VL53L0X_calc_sigma_estimate+0x3d8>
 800f604:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800f608:	2b00      	cmp	r3, #0
 800f60a:	d003      	beq.n	800f614 <VL53L0X_calc_sigma_estimate+0x3d8>
        (sigmaEstimate > cSigmaEstMax)) {
 800f60c:	69bb      	ldr	r3, [r7, #24]
    if ((peakSignalRate_kcps < 1) || (vcselTotalEventsRtn < 1) ||
 800f60e:	4a19      	ldr	r2, [pc, #100]	; (800f674 <VL53L0X_calc_sigma_estimate+0x438>)
 800f610:	4293      	cmp	r3, r2
 800f612:	d901      	bls.n	800f618 <VL53L0X_calc_sigma_estimate+0x3dc>
      sigmaEstimate = cSigmaEstMax;
 800f614:	4b17      	ldr	r3, [pc, #92]	; (800f674 <VL53L0X_calc_sigma_estimate+0x438>)
 800f616:	61bb      	str	r3, [r7, #24]
    }

    *pSigmaEstimate = (uint32_t)(sigmaEstimate);
 800f618:	69ba      	ldr	r2, [r7, #24]
 800f61a:	687b      	ldr	r3, [r7, #4]
 800f61c:	601a      	str	r2, [r3, #0]
    PALDevDataSet(Dev, SigmaEstimate, *pSigmaEstimate);
 800f61e:	687b      	ldr	r3, [r7, #4]
 800f620:	681a      	ldr	r2, [r3, #0]
 800f622:	68fb      	ldr	r3, [r7, #12]
 800f624:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
    Status = VL53L0X_calc_dmax(
 800f628:	6939      	ldr	r1, [r7, #16]
 800f62a:	683b      	ldr	r3, [r7, #0]
 800f62c:	9303      	str	r3, [sp, #12]
 800f62e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800f632:	9302      	str	r3, [sp, #8]
 800f634:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800f638:	9301      	str	r3, [sp, #4]
 800f63a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f63c:	9300      	str	r3, [sp, #0]
 800f63e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f640:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800f642:	68f8      	ldr	r0, [r7, #12]
 800f644:	f7ff fce4 	bl	800f010 <_Z17VL53L0X_calc_dmaxP13VL53L0X_Dev_tmmmmmmPm>
 800f648:	4603      	mov	r3, r0
 800f64a:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
        Dev, totalSignalRate_mcps, correctedSignalRate_mcps, pwMult,
        sigmaEstimateP1, sigmaEstimateP2, peakVcselDuration_us, pDmax_mm);
  }

  LOG_FUNCTION_END(Status);
  return Status;
 800f64e:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
}
 800f652:	4618      	mov	r0, r3
 800f654:	37b8      	adds	r7, #184	; 0xb8
 800f656:	46bd      	mov	sp, r7
 800f658:	bd80      	pop	{r7, pc}
 800f65a:	bf00      	nop
 800f65c:	00666666 	.word	0x00666666
 800f660:	0006999a 	.word	0x0006999a
 800f664:	10624dd3 	.word	0x10624dd3
 800f668:	37c67b51 	.word	0x37c67b51
 800f66c:	51eb851f 	.word	0x51eb851f
 800f670:	d1b71759 	.word	0xd1b71759
 800f674:	028f87ae 	.word	0x028f87ae

0800f678 <VL53L0X_get_pal_range_status>:

VL53L0X_Error VL53L0X_get_pal_range_status(
    VL53L0X_DEV Dev, uint8_t DeviceRangeStatus, FixPoint1616_t SignalRate,
    uint16_t EffectiveSpadRtnCount,
    VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
    uint8_t *pPalRangeStatus) {
 800f678:	b580      	push	{r7, lr}
 800f67a:	b090      	sub	sp, #64	; 0x40
 800f67c:	af00      	add	r7, sp, #0
 800f67e:	60f8      	str	r0, [r7, #12]
 800f680:	607a      	str	r2, [r7, #4]
 800f682:	461a      	mov	r2, r3
 800f684:	460b      	mov	r3, r1
 800f686:	72fb      	strb	r3, [r7, #11]
 800f688:	4613      	mov	r3, r2
 800f68a:	813b      	strh	r3, [r7, #8]
  VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800f68c:	2300      	movs	r3, #0
 800f68e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint8_t NoneFlag;
  uint8_t SigmaLimitflag = 0;
 800f692:	2300      	movs	r3, #0
 800f694:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  uint8_t SignalRefClipflag = 0;
 800f698:	2300      	movs	r3, #0
 800f69a:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  uint8_t RangeIgnoreThresholdflag = 0;
 800f69e:	2300      	movs	r3, #0
 800f6a0:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  uint8_t SigmaLimitCheckEnable = 0;
 800f6a4:	2300      	movs	r3, #0
 800f6a6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  uint8_t SignalRateFinalRangeLimitCheckEnable = 0;
 800f6aa:	2300      	movs	r3, #0
 800f6ac:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  uint8_t SignalRefClipLimitCheckEnable = 0;
 800f6b0:	2300      	movs	r3, #0
 800f6b2:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  uint8_t RangeIgnoreThresholdLimitCheckEnable = 0;
 800f6b6:	2300      	movs	r3, #0
 800f6b8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  FixPoint1616_t SigmaEstimate;
  FixPoint1616_t SigmaLimitValue;
  FixPoint1616_t SignalRefClipValue;
  FixPoint1616_t RangeIgnoreThresholdValue;
  FixPoint1616_t SignalRatePerSpad;
  uint8_t DeviceRangeStatusInternal = 0;
 800f6bc:	2300      	movs	r3, #0
 800f6be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  uint16_t tmpWord = 0;
 800f6c2:	2300      	movs	r3, #0
 800f6c4:	837b      	strh	r3, [r7, #26]
  uint8_t Temp8;
  uint32_t Dmax_mm = 0;
 800f6c6:	2300      	movs	r3, #0
 800f6c8:	617b      	str	r3, [r7, #20]
   * the value 11 in the DeviceRangeStatus.
   * In addition, the SigmaEstimator is not included in the VL53L0X
   * DeviceRangeStatus, this will be added in the PalRangeStatus.
   */

  DeviceRangeStatusInternal = ((DeviceRangeStatus & 0x78) >> 3);
 800f6ca:	7afb      	ldrb	r3, [r7, #11]
 800f6cc:	10db      	asrs	r3, r3, #3
 800f6ce:	b2db      	uxtb	r3, r3
 800f6d0:	f003 030f 	and.w	r3, r3, #15
 800f6d4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  if (DeviceRangeStatusInternal == 0 || DeviceRangeStatusInternal == 5 ||
 800f6d8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800f6dc:	2b00      	cmp	r3, #0
 800f6de:	d017      	beq.n	800f710 <VL53L0X_get_pal_range_status+0x98>
 800f6e0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800f6e4:	2b05      	cmp	r3, #5
 800f6e6:	d013      	beq.n	800f710 <VL53L0X_get_pal_range_status+0x98>
 800f6e8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800f6ec:	2b07      	cmp	r3, #7
 800f6ee:	d00f      	beq.n	800f710 <VL53L0X_get_pal_range_status+0x98>
      DeviceRangeStatusInternal == 7 || DeviceRangeStatusInternal == 12 ||
 800f6f0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800f6f4:	2b0c      	cmp	r3, #12
 800f6f6:	d00b      	beq.n	800f710 <VL53L0X_get_pal_range_status+0x98>
 800f6f8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800f6fc:	2b0d      	cmp	r3, #13
 800f6fe:	d007      	beq.n	800f710 <VL53L0X_get_pal_range_status+0x98>
      DeviceRangeStatusInternal == 13 || DeviceRangeStatusInternal == 14 ||
 800f700:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800f704:	2b0e      	cmp	r3, #14
 800f706:	d003      	beq.n	800f710 <VL53L0X_get_pal_range_status+0x98>
 800f708:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800f70c:	2b0f      	cmp	r3, #15
 800f70e:	d103      	bne.n	800f718 <VL53L0X_get_pal_range_status+0xa0>
      DeviceRangeStatusInternal == 15) {
    NoneFlag = 1;
 800f710:	2301      	movs	r3, #1
 800f712:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 800f716:	e002      	b.n	800f71e <VL53L0X_get_pal_range_status+0xa6>
  } else {
    NoneFlag = 0;
 800f718:	2300      	movs	r3, #0
 800f71a:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  }

  /* LastSignalRefMcps */
  if (Status == VL53L0X_ERROR_NONE)
 800f71e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800f722:	2b00      	cmp	r3, #0
 800f724:	d107      	bne.n	800f736 <VL53L0X_get_pal_range_status+0xbe>
    Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800f726:	2201      	movs	r2, #1
 800f728:	21ff      	movs	r1, #255	; 0xff
 800f72a:	68f8      	ldr	r0, [r7, #12]
 800f72c:	f000 fbf9 	bl	800ff22 <VL53L0X_WrByte>
 800f730:	4603      	mov	r3, r0
 800f732:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

  if (Status == VL53L0X_ERROR_NONE)
 800f736:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800f73a:	2b00      	cmp	r3, #0
 800f73c:	d109      	bne.n	800f752 <VL53L0X_get_pal_range_status+0xda>
    Status =
 800f73e:	f107 031a 	add.w	r3, r7, #26
 800f742:	461a      	mov	r2, r3
 800f744:	21b6      	movs	r1, #182	; 0xb6
 800f746:	68f8      	ldr	r0, [r7, #12]
 800f748:	f000 fc92 	bl	8010070 <VL53L0X_RdWord>
 800f74c:	4603      	mov	r3, r0
 800f74e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
        VL53L0X_RdWord(Dev, VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF, &tmpWord);

  LastSignalRefMcps = VL53L0X_FIXPOINT97TOFIXPOINT1616(tmpWord);
 800f752:	8b7b      	ldrh	r3, [r7, #26]
 800f754:	025b      	lsls	r3, r3, #9
 800f756:	613b      	str	r3, [r7, #16]

  if (Status == VL53L0X_ERROR_NONE)
 800f758:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800f75c:	2b00      	cmp	r3, #0
 800f75e:	d107      	bne.n	800f770 <VL53L0X_get_pal_range_status+0xf8>
    Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800f760:	2200      	movs	r2, #0
 800f762:	21ff      	movs	r1, #255	; 0xff
 800f764:	68f8      	ldr	r0, [r7, #12]
 800f766:	f000 fbdc 	bl	800ff22 <VL53L0X_WrByte>
 800f76a:	4603      	mov	r3, r0
 800f76c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

  PALDevDataSet(Dev, LastSignalRefMcps, LastSignalRefMcps);
 800f770:	693a      	ldr	r2, [r7, #16]
 800f772:	68fb      	ldr	r3, [r7, #12]
 800f774:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148

  /*
   * Check if Sigma limit is enabled, if yes then do comparison with limit
   * value and put the result back into pPalRangeStatus.
   */
  if (Status == VL53L0X_ERROR_NONE)
 800f778:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800f77c:	2b00      	cmp	r3, #0
 800f77e:	d109      	bne.n	800f794 <VL53L0X_get_pal_range_status+0x11c>
    Status = VL53L0X_GetLimitCheckEnable(
 800f780:	f107 0332 	add.w	r3, r7, #50	; 0x32
 800f784:	461a      	mov	r2, r3
 800f786:	2100      	movs	r1, #0
 800f788:	68f8      	ldr	r0, [r7, #12]
 800f78a:	f7fc fc05 	bl	800bf98 <VL53L0X_GetLimitCheckEnable>
 800f78e:	4603      	mov	r3, r0
 800f790:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
        Dev, VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, &SigmaLimitCheckEnable);

  if ((SigmaLimitCheckEnable != 0) && (Status == VL53L0X_ERROR_NONE)) {
 800f794:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800f798:	2b00      	cmp	r3, #0
 800f79a:	d02e      	beq.n	800f7fa <VL53L0X_get_pal_range_status+0x182>
 800f79c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800f7a0:	2b00      	cmp	r3, #0
 800f7a2:	d12a      	bne.n	800f7fa <VL53L0X_get_pal_range_status+0x182>
    /*
     * compute the Sigma and check with limit
     */
    Status = VL53L0X_calc_sigma_estimate(Dev, pRangingMeasurementData,
 800f7a4:	f107 0314 	add.w	r3, r7, #20
 800f7a8:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800f7ac:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800f7ae:	68f8      	ldr	r0, [r7, #12]
 800f7b0:	f7ff fd44 	bl	800f23c <VL53L0X_calc_sigma_estimate>
 800f7b4:	4603      	mov	r3, r0
 800f7b6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
                                         &SigmaEstimate, &Dmax_mm);
    if (Status == VL53L0X_ERROR_NONE)
 800f7ba:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800f7be:	2b00      	cmp	r3, #0
 800f7c0:	d103      	bne.n	800f7ca <VL53L0X_get_pal_range_status+0x152>
      pRangingMeasurementData->RangeDMaxMilliMeter = Dmax_mm;
 800f7c2:	697b      	ldr	r3, [r7, #20]
 800f7c4:	b29a      	uxth	r2, r3
 800f7c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f7c8:	815a      	strh	r2, [r3, #10]

    if (Status == VL53L0X_ERROR_NONE) {
 800f7ca:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800f7ce:	2b00      	cmp	r3, #0
 800f7d0:	d113      	bne.n	800f7fa <VL53L0X_get_pal_range_status+0x182>
      Status = VL53L0X_GetLimitCheckValue(
 800f7d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f7d6:	461a      	mov	r2, r3
 800f7d8:	2100      	movs	r1, #0
 800f7da:	68f8      	ldr	r0, [r7, #12]
 800f7dc:	f7fc fc62 	bl	800c0a4 <VL53L0X_GetLimitCheckValue>
 800f7e0:	4603      	mov	r3, r0
 800f7e2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
          Dev, VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, &SigmaLimitValue);

      if ((SigmaLimitValue > 0) && (SigmaEstimate > SigmaLimitValue))
 800f7e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f7e8:	2b00      	cmp	r3, #0
 800f7ea:	d006      	beq.n	800f7fa <VL53L0X_get_pal_range_status+0x182>
 800f7ec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f7ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f7f0:	429a      	cmp	r2, r3
 800f7f2:	d902      	bls.n	800f7fa <VL53L0X_get_pal_range_status+0x182>
        /* Limit Fail */
        SigmaLimitflag = 1;
 800f7f4:	2301      	movs	r3, #1
 800f7f6:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

  /*
   * Check if Signal ref clip limit is enabled, if yes then do comparison
   * with limit value and put the result back into pPalRangeStatus.
   */
  if (Status == VL53L0X_ERROR_NONE)
 800f7fa:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800f7fe:	2b00      	cmp	r3, #0
 800f800:	d109      	bne.n	800f816 <VL53L0X_get_pal_range_status+0x19e>
    Status =
 800f802:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800f806:	461a      	mov	r2, r3
 800f808:	2102      	movs	r1, #2
 800f80a:	68f8      	ldr	r0, [r7, #12]
 800f80c:	f7fc fbc4 	bl	800bf98 <VL53L0X_GetLimitCheckEnable>
 800f810:	4603      	mov	r3, r0
 800f812:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
        VL53L0X_GetLimitCheckEnable(Dev, VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
                                    &SignalRefClipLimitCheckEnable);

  if ((SignalRefClipLimitCheckEnable != 0) && (Status == VL53L0X_ERROR_NONE)) {
 800f816:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800f81a:	2b00      	cmp	r3, #0
 800f81c:	d017      	beq.n	800f84e <VL53L0X_get_pal_range_status+0x1d6>
 800f81e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800f822:	2b00      	cmp	r3, #0
 800f824:	d113      	bne.n	800f84e <VL53L0X_get_pal_range_status+0x1d6>

    Status = VL53L0X_GetLimitCheckValue(
 800f826:	f107 0320 	add.w	r3, r7, #32
 800f82a:	461a      	mov	r2, r3
 800f82c:	2102      	movs	r1, #2
 800f82e:	68f8      	ldr	r0, [r7, #12]
 800f830:	f7fc fc38 	bl	800c0a4 <VL53L0X_GetLimitCheckValue>
 800f834:	4603      	mov	r3, r0
 800f836:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
        Dev, VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, &SignalRefClipValue);

    if ((SignalRefClipValue > 0) && (LastSignalRefMcps > SignalRefClipValue)) {
 800f83a:	6a3b      	ldr	r3, [r7, #32]
 800f83c:	2b00      	cmp	r3, #0
 800f83e:	d006      	beq.n	800f84e <VL53L0X_get_pal_range_status+0x1d6>
 800f840:	693a      	ldr	r2, [r7, #16]
 800f842:	6a3b      	ldr	r3, [r7, #32]
 800f844:	429a      	cmp	r2, r3
 800f846:	d902      	bls.n	800f84e <VL53L0X_get_pal_range_status+0x1d6>
      /* Limit Fail */
      SignalRefClipflag = 1;
 800f848:	2301      	movs	r3, #1
 800f84a:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
   * Check if Signal ref clip limit is enabled, if yes then do comparison
   * with limit value and put the result back into pPalRangeStatus.
   * EffectiveSpadRtnCount has a format 8.8
   * If (Return signal rate < (1.5 x Xtalk x number of Spads)) : FAIL
   */
  if (Status == VL53L0X_ERROR_NONE)
 800f84e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800f852:	2b00      	cmp	r3, #0
 800f854:	d109      	bne.n	800f86a <VL53L0X_get_pal_range_status+0x1f2>
    Status = VL53L0X_GetLimitCheckEnable(
 800f856:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 800f85a:	461a      	mov	r2, r3
 800f85c:	2103      	movs	r1, #3
 800f85e:	68f8      	ldr	r0, [r7, #12]
 800f860:	f7fc fb9a 	bl	800bf98 <VL53L0X_GetLimitCheckEnable>
 800f864:	4603      	mov	r3, r0
 800f866:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
        Dev, VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
        &RangeIgnoreThresholdLimitCheckEnable);

  if ((RangeIgnoreThresholdLimitCheckEnable != 0) &&
 800f86a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f86e:	2b00      	cmp	r3, #0
 800f870:	d023      	beq.n	800f8ba <VL53L0X_get_pal_range_status+0x242>
 800f872:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800f876:	2b00      	cmp	r3, #0
 800f878:	d11f      	bne.n	800f8ba <VL53L0X_get_pal_range_status+0x242>
      (Status == VL53L0X_ERROR_NONE)) {

    /* Compute the signal rate per spad */
    if (EffectiveSpadRtnCount == 0) {
 800f87a:	893b      	ldrh	r3, [r7, #8]
 800f87c:	2b00      	cmp	r3, #0
 800f87e:	d102      	bne.n	800f886 <VL53L0X_get_pal_range_status+0x20e>
      SignalRatePerSpad = 0;
 800f880:	2300      	movs	r3, #0
 800f882:	637b      	str	r3, [r7, #52]	; 0x34
 800f884:	e005      	b.n	800f892 <VL53L0X_get_pal_range_status+0x21a>
    } else {
      SignalRatePerSpad =
          (FixPoint1616_t)((256 * SignalRate) / EffectiveSpadRtnCount);
 800f886:	687b      	ldr	r3, [r7, #4]
 800f888:	021a      	lsls	r2, r3, #8
 800f88a:	893b      	ldrh	r3, [r7, #8]
      SignalRatePerSpad =
 800f88c:	fbb2 f3f3 	udiv	r3, r2, r3
 800f890:	637b      	str	r3, [r7, #52]	; 0x34
    }

    Status = VL53L0X_GetLimitCheckValue(
 800f892:	f107 031c 	add.w	r3, r7, #28
 800f896:	461a      	mov	r2, r3
 800f898:	2103      	movs	r1, #3
 800f89a:	68f8      	ldr	r0, [r7, #12]
 800f89c:	f7fc fc02 	bl	800c0a4 <VL53L0X_GetLimitCheckValue>
 800f8a0:	4603      	mov	r3, r0
 800f8a2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
        Dev, VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
        &RangeIgnoreThresholdValue);

    if ((RangeIgnoreThresholdValue > 0) &&
 800f8a6:	69fb      	ldr	r3, [r7, #28]
 800f8a8:	2b00      	cmp	r3, #0
 800f8aa:	d006      	beq.n	800f8ba <VL53L0X_get_pal_range_status+0x242>
        (SignalRatePerSpad < RangeIgnoreThresholdValue)) {
 800f8ac:	69fb      	ldr	r3, [r7, #28]
    if ((RangeIgnoreThresholdValue > 0) &&
 800f8ae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f8b0:	429a      	cmp	r2, r3
 800f8b2:	d202      	bcs.n	800f8ba <VL53L0X_get_pal_range_status+0x242>
      /* Limit Fail add 2^6 to range status */
      RangeIgnoreThresholdflag = 1;
 800f8b4:	2301      	movs	r3, #1
 800f8b6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    }
  }

  if (Status == VL53L0X_ERROR_NONE) {
 800f8ba:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800f8be:	2b00      	cmp	r3, #0
 800f8c0:	d14a      	bne.n	800f958 <VL53L0X_get_pal_range_status+0x2e0>
    if (NoneFlag == 1) {
 800f8c2:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800f8c6:	2b01      	cmp	r3, #1
 800f8c8:	d103      	bne.n	800f8d2 <VL53L0X_get_pal_range_status+0x25a>
      *pPalRangeStatus = 255; /* NONE */
 800f8ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f8cc:	22ff      	movs	r2, #255	; 0xff
 800f8ce:	701a      	strb	r2, [r3, #0]
 800f8d0:	e042      	b.n	800f958 <VL53L0X_get_pal_range_status+0x2e0>
    } else if (DeviceRangeStatusInternal == 1 ||
 800f8d2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800f8d6:	2b01      	cmp	r3, #1
 800f8d8:	d007      	beq.n	800f8ea <VL53L0X_get_pal_range_status+0x272>
 800f8da:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800f8de:	2b02      	cmp	r3, #2
 800f8e0:	d003      	beq.n	800f8ea <VL53L0X_get_pal_range_status+0x272>
               DeviceRangeStatusInternal == 2 ||
 800f8e2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800f8e6:	2b03      	cmp	r3, #3
 800f8e8:	d103      	bne.n	800f8f2 <VL53L0X_get_pal_range_status+0x27a>
               DeviceRangeStatusInternal == 3) {
      *pPalRangeStatus = 5; /* HW fail */
 800f8ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f8ec:	2205      	movs	r2, #5
 800f8ee:	701a      	strb	r2, [r3, #0]
 800f8f0:	e032      	b.n	800f958 <VL53L0X_get_pal_range_status+0x2e0>
    } else if (DeviceRangeStatusInternal == 6 ||
 800f8f2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800f8f6:	2b06      	cmp	r3, #6
 800f8f8:	d003      	beq.n	800f902 <VL53L0X_get_pal_range_status+0x28a>
 800f8fa:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800f8fe:	2b09      	cmp	r3, #9
 800f900:	d103      	bne.n	800f90a <VL53L0X_get_pal_range_status+0x292>
               DeviceRangeStatusInternal == 9) {
      *pPalRangeStatus = 4; /* Phase fail */
 800f902:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f904:	2204      	movs	r2, #4
 800f906:	701a      	strb	r2, [r3, #0]
 800f908:	e026      	b.n	800f958 <VL53L0X_get_pal_range_status+0x2e0>
    } else if (DeviceRangeStatusInternal == 8 ||
 800f90a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800f90e:	2b08      	cmp	r3, #8
 800f910:	d007      	beq.n	800f922 <VL53L0X_get_pal_range_status+0x2aa>
 800f912:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800f916:	2b0a      	cmp	r3, #10
 800f918:	d003      	beq.n	800f922 <VL53L0X_get_pal_range_status+0x2aa>
               DeviceRangeStatusInternal == 10 || SignalRefClipflag == 1) {
 800f91a:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800f91e:	2b01      	cmp	r3, #1
 800f920:	d103      	bne.n	800f92a <VL53L0X_get_pal_range_status+0x2b2>
      *pPalRangeStatus = 3; /* Min range */
 800f922:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f924:	2203      	movs	r2, #3
 800f926:	701a      	strb	r2, [r3, #0]
 800f928:	e016      	b.n	800f958 <VL53L0X_get_pal_range_status+0x2e0>
    } else if (DeviceRangeStatusInternal == 4 ||
 800f92a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800f92e:	2b04      	cmp	r3, #4
 800f930:	d003      	beq.n	800f93a <VL53L0X_get_pal_range_status+0x2c2>
 800f932:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800f936:	2b01      	cmp	r3, #1
 800f938:	d103      	bne.n	800f942 <VL53L0X_get_pal_range_status+0x2ca>
               RangeIgnoreThresholdflag == 1) {
      *pPalRangeStatus = 2; /* Signal Fail */
 800f93a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f93c:	2202      	movs	r2, #2
 800f93e:	701a      	strb	r2, [r3, #0]
 800f940:	e00a      	b.n	800f958 <VL53L0X_get_pal_range_status+0x2e0>
    } else if (SigmaLimitflag == 1) {
 800f942:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800f946:	2b01      	cmp	r3, #1
 800f948:	d103      	bne.n	800f952 <VL53L0X_get_pal_range_status+0x2da>
      *pPalRangeStatus = 1; /* Sigma	 Fail */
 800f94a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f94c:	2201      	movs	r2, #1
 800f94e:	701a      	strb	r2, [r3, #0]
 800f950:	e002      	b.n	800f958 <VL53L0X_get_pal_range_status+0x2e0>
    } else {
      *pPalRangeStatus = 0; /* Range Valid */
 800f952:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f954:	2200      	movs	r2, #0
 800f956:	701a      	strb	r2, [r3, #0]
    }
  }

  /* DMAX only relevant during range error */
  if (*pPalRangeStatus == 0)
 800f958:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f95a:	781b      	ldrb	r3, [r3, #0]
 800f95c:	2b00      	cmp	r3, #0
 800f95e:	d102      	bne.n	800f966 <VL53L0X_get_pal_range_status+0x2ee>
    pRangingMeasurementData->RangeDMaxMilliMeter = 0;
 800f960:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f962:	2200      	movs	r2, #0
 800f964:	815a      	strh	r2, [r3, #10]

  /* fill the Limit Check Status */

  Status = VL53L0X_GetLimitCheckEnable(
 800f966:	f107 0331 	add.w	r3, r7, #49	; 0x31
 800f96a:	461a      	mov	r2, r3
 800f96c:	2101      	movs	r1, #1
 800f96e:	68f8      	ldr	r0, [r7, #12]
 800f970:	f7fc fb12 	bl	800bf98 <VL53L0X_GetLimitCheckEnable>
 800f974:	4603      	mov	r3, r0
 800f976:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
      Dev, VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
      &SignalRateFinalRangeLimitCheckEnable);

  if (Status == VL53L0X_ERROR_NONE) {
 800f97a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800f97e:	2b00      	cmp	r3, #0
 800f980:	d143      	bne.n	800fa0a <VL53L0X_get_pal_range_status+0x392>
    if ((SigmaLimitCheckEnable == 0) || (SigmaLimitflag == 1))
 800f982:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800f986:	2b00      	cmp	r3, #0
 800f988:	d003      	beq.n	800f992 <VL53L0X_get_pal_range_status+0x31a>
 800f98a:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800f98e:	2b01      	cmp	r3, #1
 800f990:	d102      	bne.n	800f998 <VL53L0X_get_pal_range_status+0x320>
      Temp8 = 1;
 800f992:	2301      	movs	r3, #1
 800f994:	767b      	strb	r3, [r7, #25]
 800f996:	e001      	b.n	800f99c <VL53L0X_get_pal_range_status+0x324>
    else
      Temp8 = 0;
 800f998:	2300      	movs	r3, #0
 800f99a:	767b      	strb	r3, [r7, #25]
    VL53L0X_SETARRAYPARAMETERFIELD(
 800f99c:	7e7a      	ldrb	r2, [r7, #25]
 800f99e:	68fb      	ldr	r3, [r7, #12]
 800f9a0:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
        Dev, LimitChecksStatus, VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, Temp8);

    if ((DeviceRangeStatusInternal == 4) ||
 800f9a4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800f9a8:	2b04      	cmp	r3, #4
 800f9aa:	d003      	beq.n	800f9b4 <VL53L0X_get_pal_range_status+0x33c>
        (SignalRateFinalRangeLimitCheckEnable == 0))
 800f9ac:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
    if ((DeviceRangeStatusInternal == 4) ||
 800f9b0:	2b00      	cmp	r3, #0
 800f9b2:	d102      	bne.n	800f9ba <VL53L0X_get_pal_range_status+0x342>
      Temp8 = 1;
 800f9b4:	2301      	movs	r3, #1
 800f9b6:	767b      	strb	r3, [r7, #25]
 800f9b8:	e001      	b.n	800f9be <VL53L0X_get_pal_range_status+0x346>
    else
      Temp8 = 0;
 800f9ba:	2300      	movs	r3, #0
 800f9bc:	767b      	strb	r3, [r7, #25]
    VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800f9be:	7e7a      	ldrb	r2, [r7, #25]
 800f9c0:	68fb      	ldr	r3, [r7, #12]
 800f9c2:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
                                   VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
                                   Temp8);

    if ((SignalRefClipLimitCheckEnable == 0) || (SignalRefClipflag == 1))
 800f9c6:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800f9ca:	2b00      	cmp	r3, #0
 800f9cc:	d003      	beq.n	800f9d6 <VL53L0X_get_pal_range_status+0x35e>
 800f9ce:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800f9d2:	2b01      	cmp	r3, #1
 800f9d4:	d102      	bne.n	800f9dc <VL53L0X_get_pal_range_status+0x364>
      Temp8 = 1;
 800f9d6:	2301      	movs	r3, #1
 800f9d8:	767b      	strb	r3, [r7, #25]
 800f9da:	e001      	b.n	800f9e0 <VL53L0X_get_pal_range_status+0x368>
    else
      Temp8 = 0;
 800f9dc:	2300      	movs	r3, #0
 800f9de:	767b      	strb	r3, [r7, #25]

    VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800f9e0:	7e7a      	ldrb	r2, [r7, #25]
 800f9e2:	68fb      	ldr	r3, [r7, #12]
 800f9e4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
                                   VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, Temp8);

    if ((RangeIgnoreThresholdLimitCheckEnable == 0) ||
 800f9e8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f9ec:	2b00      	cmp	r3, #0
 800f9ee:	d003      	beq.n	800f9f8 <VL53L0X_get_pal_range_status+0x380>
 800f9f0:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800f9f4:	2b01      	cmp	r3, #1
 800f9f6:	d102      	bne.n	800f9fe <VL53L0X_get_pal_range_status+0x386>
        (RangeIgnoreThresholdflag == 1))
      Temp8 = 1;
 800f9f8:	2301      	movs	r3, #1
 800f9fa:	767b      	strb	r3, [r7, #25]
 800f9fc:	e001      	b.n	800fa02 <VL53L0X_get_pal_range_status+0x38a>
    else
      Temp8 = 0;
 800f9fe:	2300      	movs	r3, #0
 800fa00:	767b      	strb	r3, [r7, #25]

    VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800fa02:	7e7a      	ldrb	r2, [r7, #25]
 800fa04:	68fb      	ldr	r3, [r7, #12]
 800fa06:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
                                   VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
                                   Temp8);
  }

  LOG_FUNCTION_END(Status);
  return Status;
 800fa0a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800fa0e:	4618      	mov	r0, r3
 800fa10:	3740      	adds	r7, #64	; 0x40
 800fa12:	46bd      	mov	sp, r7
 800fa14:	bd80      	pop	{r7, pc}

0800fa16 <_Z23VL53L0X_check_part_usedP13VL53L0X_Dev_tPhP20VL53L0X_DeviceInfo_t>:
#define LOG_FUNCTION_END_FMT(status, fmt, ...)                                 \
  _LOG_FUNCTION_END_FMT(TRACE_MODULE_API, status, fmt, ##__VA_ARGS__)

VL53L0X_Error
VL53L0X_check_part_used(VL53L0X_DEV Dev, uint8_t *Revision,
                        VL53L0X_DeviceInfo_t *pVL53L0X_DeviceInfo) {
 800fa16:	b580      	push	{r7, lr}
 800fa18:	b086      	sub	sp, #24
 800fa1a:	af00      	add	r7, sp, #0
 800fa1c:	60f8      	str	r0, [r7, #12]
 800fa1e:	60b9      	str	r1, [r7, #8]
 800fa20:	607a      	str	r2, [r7, #4]
  VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800fa22:	2300      	movs	r3, #0
 800fa24:	75fb      	strb	r3, [r7, #23]
  uint8_t ModuleIdInt;
  char *ProductId_tmp;

  LOG_FUNCTION_START("");

  Status = VL53L0X_get_info_from_device(Dev, 2);
 800fa26:	2102      	movs	r1, #2
 800fa28:	68f8      	ldr	r0, [r7, #12]
 800fa2a:	f7fe f899 	bl	800db60 <VL53L0X_get_info_from_device>
 800fa2e:	4603      	mov	r3, r0
 800fa30:	75fb      	strb	r3, [r7, #23]

  if (Status == VL53L0X_ERROR_NONE) {
 800fa32:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800fa36:	2b00      	cmp	r3, #0
 800fa38:	d11c      	bne.n	800fa74 <_Z23VL53L0X_check_part_usedP13VL53L0X_Dev_tPhP20VL53L0X_DeviceInfo_t+0x5e>
    ModuleIdInt = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev, ModuleId);
 800fa3a:	68fb      	ldr	r3, [r7, #12]
 800fa3c:	f893 30f1 	ldrb.w	r3, [r3, #241]	; 0xf1
 800fa40:	75bb      	strb	r3, [r7, #22]

    if (ModuleIdInt == 0) {
 800fa42:	7dbb      	ldrb	r3, [r7, #22]
 800fa44:	2b00      	cmp	r3, #0
 800fa46:	d107      	bne.n	800fa58 <_Z23VL53L0X_check_part_usedP13VL53L0X_Dev_tPhP20VL53L0X_DeviceInfo_t+0x42>
      *Revision = 0;
 800fa48:	68bb      	ldr	r3, [r7, #8]
 800fa4a:	2200      	movs	r2, #0
 800fa4c:	701a      	strb	r2, [r3, #0]
      VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->ProductId, "");
 800fa4e:	687b      	ldr	r3, [r7, #4]
 800fa50:	3340      	adds	r3, #64	; 0x40
 800fa52:	2200      	movs	r2, #0
 800fa54:	701a      	strb	r2, [r3, #0]
 800fa56:	e00d      	b.n	800fa74 <_Z23VL53L0X_check_part_usedP13VL53L0X_Dev_tPhP20VL53L0X_DeviceInfo_t+0x5e>
    } else {
      *Revision = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev, Revision);
 800fa58:	68fb      	ldr	r3, [r7, #12]
 800fa5a:	f893 20f2 	ldrb.w	r2, [r3, #242]	; 0xf2
 800fa5e:	68bb      	ldr	r3, [r7, #8]
 800fa60:	701a      	strb	r2, [r3, #0]
      ProductId_tmp = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev, ProductId);
 800fa62:	68fb      	ldr	r3, [r7, #12]
 800fa64:	33f3      	adds	r3, #243	; 0xf3
 800fa66:	613b      	str	r3, [r7, #16]
      VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->ProductId, ProductId_tmp);
 800fa68:	687b      	ldr	r3, [r7, #4]
 800fa6a:	3340      	adds	r3, #64	; 0x40
 800fa6c:	6939      	ldr	r1, [r7, #16]
 800fa6e:	4618      	mov	r0, r3
 800fa70:	f000 fc2c 	bl	80102cc <strcpy>
    }
  }

  LOG_FUNCTION_END(Status);
  return Status;
 800fa74:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800fa78:	4618      	mov	r0, r3
 800fa7a:	3718      	adds	r7, #24
 800fa7c:	46bd      	mov	sp, r7
 800fa7e:	bd80      	pop	{r7, pc}

0800fa80 <VL53L0X_get_device_info>:

VL53L0X_Error
VL53L0X_get_device_info(VL53L0X_DEV Dev,
                        VL53L0X_DeviceInfo_t *pVL53L0X_DeviceInfo) {
 800fa80:	b5b0      	push	{r4, r5, r7, lr}
 800fa82:	b084      	sub	sp, #16
 800fa84:	af00      	add	r7, sp, #0
 800fa86:	6078      	str	r0, [r7, #4]
 800fa88:	6039      	str	r1, [r7, #0]
  VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800fa8a:	2300      	movs	r3, #0
 800fa8c:	73fb      	strb	r3, [r7, #15]
  uint8_t revision_id;
  uint8_t Revision;

  Status = VL53L0X_check_part_used(Dev, &Revision, pVL53L0X_DeviceInfo);
 800fa8e:	f107 030d 	add.w	r3, r7, #13
 800fa92:	683a      	ldr	r2, [r7, #0]
 800fa94:	4619      	mov	r1, r3
 800fa96:	6878      	ldr	r0, [r7, #4]
 800fa98:	f7ff ffbd 	bl	800fa16 <_Z23VL53L0X_check_part_usedP13VL53L0X_Dev_tPhP20VL53L0X_DeviceInfo_t>
 800fa9c:	4603      	mov	r3, r0
 800fa9e:	73fb      	strb	r3, [r7, #15]
  if (Status == VL53L0X_ERROR_NONE) {
 800faa0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800faa4:	2b00      	cmp	r3, #0
 800faa6:	d13b      	bne.n	800fb20 <VL53L0X_get_device_info+0xa0>
    if (Revision == 0) {
 800faa8:	7b7b      	ldrb	r3, [r7, #13]
 800faaa:	2b00      	cmp	r3, #0
 800faac:	d108      	bne.n	800fac0 <VL53L0X_get_device_info+0x40>
      VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->Name,
 800faae:	683b      	ldr	r3, [r7, #0]
 800fab0:	4a30      	ldr	r2, [pc, #192]	; (800fb74 <VL53L0X_get_device_info+0xf4>)
 800fab2:	461c      	mov	r4, r3
 800fab4:	4613      	mov	r3, r2
 800fab6:	cb07      	ldmia	r3!, {r0, r1, r2}
 800fab8:	6020      	str	r0, [r4, #0]
 800faba:	6061      	str	r1, [r4, #4]
 800fabc:	60a2      	str	r2, [r4, #8]
 800fabe:	e027      	b.n	800fb10 <VL53L0X_get_device_info+0x90>
                         VL53L0X_STRING_DEVICE_INFO_NAME_TS0);
    } else if ((Revision <= 34) && (Revision != 32)) {
 800fac0:	7b7b      	ldrb	r3, [r7, #13]
 800fac2:	2b22      	cmp	r3, #34	; 0x22
 800fac4:	d80b      	bhi.n	800fade <VL53L0X_get_device_info+0x5e>
 800fac6:	7b7b      	ldrb	r3, [r7, #13]
 800fac8:	2b20      	cmp	r3, #32
 800faca:	d008      	beq.n	800fade <VL53L0X_get_device_info+0x5e>
      VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->Name,
 800facc:	683b      	ldr	r3, [r7, #0]
 800face:	4a2a      	ldr	r2, [pc, #168]	; (800fb78 <VL53L0X_get_device_info+0xf8>)
 800fad0:	461c      	mov	r4, r3
 800fad2:	4613      	mov	r3, r2
 800fad4:	cb07      	ldmia	r3!, {r0, r1, r2}
 800fad6:	6020      	str	r0, [r4, #0]
 800fad8:	6061      	str	r1, [r4, #4]
 800fada:	60a2      	str	r2, [r4, #8]
 800fadc:	e018      	b.n	800fb10 <VL53L0X_get_device_info+0x90>
                         VL53L0X_STRING_DEVICE_INFO_NAME_TS1);
    } else if (Revision < 39) {
 800fade:	7b7b      	ldrb	r3, [r7, #13]
 800fae0:	2b26      	cmp	r3, #38	; 0x26
 800fae2:	d808      	bhi.n	800faf6 <VL53L0X_get_device_info+0x76>
      VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->Name,
 800fae4:	683b      	ldr	r3, [r7, #0]
 800fae6:	4a25      	ldr	r2, [pc, #148]	; (800fb7c <VL53L0X_get_device_info+0xfc>)
 800fae8:	461c      	mov	r4, r3
 800faea:	4613      	mov	r3, r2
 800faec:	cb07      	ldmia	r3!, {r0, r1, r2}
 800faee:	6020      	str	r0, [r4, #0]
 800faf0:	6061      	str	r1, [r4, #4]
 800faf2:	60a2      	str	r2, [r4, #8]
 800faf4:	e00c      	b.n	800fb10 <VL53L0X_get_device_info+0x90>
                         VL53L0X_STRING_DEVICE_INFO_NAME_TS2);
    } else {
      VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->Name,
 800faf6:	683b      	ldr	r3, [r7, #0]
 800faf8:	4a21      	ldr	r2, [pc, #132]	; (800fb80 <VL53L0X_get_device_info+0x100>)
 800fafa:	461d      	mov	r5, r3
 800fafc:	4614      	mov	r4, r2
 800fafe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800fb00:	6028      	str	r0, [r5, #0]
 800fb02:	6069      	str	r1, [r5, #4]
 800fb04:	60aa      	str	r2, [r5, #8]
 800fb06:	60eb      	str	r3, [r5, #12]
 800fb08:	6820      	ldr	r0, [r4, #0]
 800fb0a:	6128      	str	r0, [r5, #16]
 800fb0c:	7923      	ldrb	r3, [r4, #4]
 800fb0e:	752b      	strb	r3, [r5, #20]
                         VL53L0X_STRING_DEVICE_INFO_NAME_ES1);
    }

    VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->Type,
 800fb10:	683b      	ldr	r3, [r7, #0]
 800fb12:	3320      	adds	r3, #32
 800fb14:	491b      	ldr	r1, [pc, #108]	; (800fb84 <VL53L0X_get_device_info+0x104>)
 800fb16:	461a      	mov	r2, r3
 800fb18:	460b      	mov	r3, r1
 800fb1a:	cb03      	ldmia	r3!, {r0, r1}
 800fb1c:	6010      	str	r0, [r2, #0]
 800fb1e:	6051      	str	r1, [r2, #4]
                       VL53L0X_STRING_DEVICE_INFO_TYPE);
  }

  if (Status == VL53L0X_ERROR_NONE) {
 800fb20:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fb24:	2b00      	cmp	r3, #0
 800fb26:	d108      	bne.n	800fb3a <VL53L0X_get_device_info+0xba>
    Status = VL53L0X_RdByte(Dev, VL53L0X_REG_IDENTIFICATION_MODEL_ID,
 800fb28:	683b      	ldr	r3, [r7, #0]
 800fb2a:	3360      	adds	r3, #96	; 0x60
 800fb2c:	461a      	mov	r2, r3
 800fb2e:	21c0      	movs	r1, #192	; 0xc0
 800fb30:	6878      	ldr	r0, [r7, #4]
 800fb32:	f000 fa7c 	bl	801002e <VL53L0X_RdByte>
 800fb36:	4603      	mov	r3, r0
 800fb38:	73fb      	strb	r3, [r7, #15]
                            &pVL53L0X_DeviceInfo->ProductType);
  }
  if (Status == VL53L0X_ERROR_NONE) {
 800fb3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fb3e:	2b00      	cmp	r3, #0
 800fb40:	d112      	bne.n	800fb68 <VL53L0X_get_device_info+0xe8>
    Status = VL53L0X_RdByte(Dev, VL53L0X_REG_IDENTIFICATION_REVISION_ID,
 800fb42:	f107 030e 	add.w	r3, r7, #14
 800fb46:	461a      	mov	r2, r3
 800fb48:	21c2      	movs	r1, #194	; 0xc2
 800fb4a:	6878      	ldr	r0, [r7, #4]
 800fb4c:	f000 fa6f 	bl	801002e <VL53L0X_RdByte>
 800fb50:	4603      	mov	r3, r0
 800fb52:	73fb      	strb	r3, [r7, #15]
                            &revision_id);
    pVL53L0X_DeviceInfo->ProductRevisionMajor = 1;
 800fb54:	683b      	ldr	r3, [r7, #0]
 800fb56:	2201      	movs	r2, #1
 800fb58:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
    pVL53L0X_DeviceInfo->ProductRevisionMinor = (revision_id & 0xF0) >> 4;
 800fb5c:	7bbb      	ldrb	r3, [r7, #14]
 800fb5e:	091b      	lsrs	r3, r3, #4
 800fb60:	b2da      	uxtb	r2, r3
 800fb62:	683b      	ldr	r3, [r7, #0]
 800fb64:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
  }

  return Status;
 800fb68:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800fb6c:	4618      	mov	r0, r3
 800fb6e:	3710      	adds	r7, #16
 800fb70:	46bd      	mov	sp, r7
 800fb72:	bdb0      	pop	{r4, r5, r7, pc}
 800fb74:	08011544 	.word	0x08011544
 800fb78:	08011550 	.word	0x08011550
 800fb7c:	0801155c 	.word	0x0801155c
 800fb80:	08011568 	.word	0x08011568
 800fb84:	08011580 	.word	0x08011580

0800fb88 <VL53L0X_get_range_status_string>:
  LOG_FUNCTION_END(Status);
  return Status;
}

VL53L0X_Error VL53L0X_get_range_status_string(uint8_t RangeStatus,
                                              char *pRangeStatusString) {
 800fb88:	b490      	push	{r4, r7}
 800fb8a:	b084      	sub	sp, #16
 800fb8c:	af00      	add	r7, sp, #0
 800fb8e:	4603      	mov	r3, r0
 800fb90:	6039      	str	r1, [r7, #0]
 800fb92:	71fb      	strb	r3, [r7, #7]
  VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800fb94:	2300      	movs	r3, #0
 800fb96:	73fb      	strb	r3, [r7, #15]

  LOG_FUNCTION_START("");

  switch (RangeStatus) {
 800fb98:	79fb      	ldrb	r3, [r7, #7]
 800fb9a:	2b05      	cmp	r3, #5
 800fb9c:	d850      	bhi.n	800fc40 <VL53L0X_get_range_status_string+0xb8>
 800fb9e:	a201      	add	r2, pc, #4	; (adr r2, 800fba4 <VL53L0X_get_range_status_string+0x1c>)
 800fba0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fba4:	0800fbbd 	.word	0x0800fbbd
 800fba8:	0800fbcf 	.word	0x0800fbcf
 800fbac:	0800fbe7 	.word	0x0800fbe7
 800fbb0:	0800fbf9 	.word	0x0800fbf9
 800fbb4:	0800fc13 	.word	0x0800fc13
 800fbb8:	0800fc2b 	.word	0x0800fc2b
  case 0:
    VL53L0X_COPYSTRING(pRangeStatusString,
 800fbbc:	683b      	ldr	r3, [r7, #0]
 800fbbe:	4a28      	ldr	r2, [pc, #160]	; (800fc60 <VL53L0X_get_range_status_string+0xd8>)
 800fbc0:	461c      	mov	r4, r3
 800fbc2:	4613      	mov	r3, r2
 800fbc4:	cb07      	ldmia	r3!, {r0, r1, r2}
 800fbc6:	6020      	str	r0, [r4, #0]
 800fbc8:	6061      	str	r1, [r4, #4]
 800fbca:	60a2      	str	r2, [r4, #8]
                       VL53L0X_STRING_RANGESTATUS_RANGEVALID);
    break;
 800fbcc:	e041      	b.n	800fc52 <VL53L0X_get_range_status_string+0xca>
  case 1:
    VL53L0X_COPYSTRING(pRangeStatusString, VL53L0X_STRING_RANGESTATUS_SIGMA);
 800fbce:	683b      	ldr	r3, [r7, #0]
 800fbd0:	4924      	ldr	r1, [pc, #144]	; (800fc64 <VL53L0X_get_range_status_string+0xdc>)
 800fbd2:	461a      	mov	r2, r3
 800fbd4:	460b      	mov	r3, r1
 800fbd6:	cb03      	ldmia	r3!, {r0, r1}
 800fbd8:	6010      	str	r0, [r2, #0]
 800fbda:	6051      	str	r1, [r2, #4]
 800fbdc:	8819      	ldrh	r1, [r3, #0]
 800fbde:	789b      	ldrb	r3, [r3, #2]
 800fbe0:	8111      	strh	r1, [r2, #8]
 800fbe2:	7293      	strb	r3, [r2, #10]
    break;
 800fbe4:	e035      	b.n	800fc52 <VL53L0X_get_range_status_string+0xca>
  case 2:
    VL53L0X_COPYSTRING(pRangeStatusString, VL53L0X_STRING_RANGESTATUS_SIGNAL);
 800fbe6:	683b      	ldr	r3, [r7, #0]
 800fbe8:	4a1f      	ldr	r2, [pc, #124]	; (800fc68 <VL53L0X_get_range_status_string+0xe0>)
 800fbea:	461c      	mov	r4, r3
 800fbec:	4613      	mov	r3, r2
 800fbee:	cb07      	ldmia	r3!, {r0, r1, r2}
 800fbf0:	6020      	str	r0, [r4, #0]
 800fbf2:	6061      	str	r1, [r4, #4]
 800fbf4:	60a2      	str	r2, [r4, #8]
    break;
 800fbf6:	e02c      	b.n	800fc52 <VL53L0X_get_range_status_string+0xca>
  case 3:
    VL53L0X_COPYSTRING(pRangeStatusString, VL53L0X_STRING_RANGESTATUS_MINRANGE);
 800fbf8:	683b      	ldr	r3, [r7, #0]
 800fbfa:	4a1c      	ldr	r2, [pc, #112]	; (800fc6c <VL53L0X_get_range_status_string+0xe4>)
 800fbfc:	461c      	mov	r4, r3
 800fbfe:	4613      	mov	r3, r2
 800fc00:	cb07      	ldmia	r3!, {r0, r1, r2}
 800fc02:	6020      	str	r0, [r4, #0]
 800fc04:	6061      	str	r1, [r4, #4]
 800fc06:	60a2      	str	r2, [r4, #8]
 800fc08:	881a      	ldrh	r2, [r3, #0]
 800fc0a:	789b      	ldrb	r3, [r3, #2]
 800fc0c:	81a2      	strh	r2, [r4, #12]
 800fc0e:	73a3      	strb	r3, [r4, #14]
    break;
 800fc10:	e01f      	b.n	800fc52 <VL53L0X_get_range_status_string+0xca>
  case 4:
    VL53L0X_COPYSTRING(pRangeStatusString, VL53L0X_STRING_RANGESTATUS_PHASE);
 800fc12:	683b      	ldr	r3, [r7, #0]
 800fc14:	4916      	ldr	r1, [pc, #88]	; (800fc70 <VL53L0X_get_range_status_string+0xe8>)
 800fc16:	461a      	mov	r2, r3
 800fc18:	460b      	mov	r3, r1
 800fc1a:	cb03      	ldmia	r3!, {r0, r1}
 800fc1c:	6010      	str	r0, [r2, #0]
 800fc1e:	6051      	str	r1, [r2, #4]
 800fc20:	8819      	ldrh	r1, [r3, #0]
 800fc22:	789b      	ldrb	r3, [r3, #2]
 800fc24:	8111      	strh	r1, [r2, #8]
 800fc26:	7293      	strb	r3, [r2, #10]
    break;
 800fc28:	e013      	b.n	800fc52 <VL53L0X_get_range_status_string+0xca>
  case 5:
    VL53L0X_COPYSTRING(pRangeStatusString, VL53L0X_STRING_RANGESTATUS_HW);
 800fc2a:	683b      	ldr	r3, [r7, #0]
 800fc2c:	4a11      	ldr	r2, [pc, #68]	; (800fc74 <VL53L0X_get_range_status_string+0xec>)
 800fc2e:	461c      	mov	r4, r3
 800fc30:	4613      	mov	r3, r2
 800fc32:	cb07      	ldmia	r3!, {r0, r1, r2}
 800fc34:	6020      	str	r0, [r4, #0]
 800fc36:	6061      	str	r1, [r4, #4]
 800fc38:	60a2      	str	r2, [r4, #8]
 800fc3a:	881b      	ldrh	r3, [r3, #0]
 800fc3c:	81a3      	strh	r3, [r4, #12]
    break;
 800fc3e:	e008      	b.n	800fc52 <VL53L0X_get_range_status_string+0xca>

  default: /**/
    VL53L0X_COPYSTRING(pRangeStatusString, VL53L0X_STRING_RANGESTATUS_NONE);
 800fc40:	683b      	ldr	r3, [r7, #0]
 800fc42:	490d      	ldr	r1, [pc, #52]	; (800fc78 <VL53L0X_get_range_status_string+0xf0>)
 800fc44:	461a      	mov	r2, r3
 800fc46:	460b      	mov	r3, r1
 800fc48:	cb03      	ldmia	r3!, {r0, r1}
 800fc4a:	6010      	str	r0, [r2, #0]
 800fc4c:	6051      	str	r1, [r2, #4]
 800fc4e:	881b      	ldrh	r3, [r3, #0]
 800fc50:	8113      	strh	r3, [r2, #8]
  }

  LOG_FUNCTION_END(Status);
  return Status;
 800fc52:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800fc56:	4618      	mov	r0, r3
 800fc58:	3710      	adds	r7, #16
 800fc5a:	46bd      	mov	sp, r7
 800fc5c:	bc90      	pop	{r4, r7}
 800fc5e:	4770      	bx	lr
 800fc60:	080116f0 	.word	0x080116f0
 800fc64:	080116fc 	.word	0x080116fc
 800fc68:	08011708 	.word	0x08011708
 800fc6c:	08011714 	.word	0x08011714
 800fc70:	08011724 	.word	0x08011724
 800fc74:	08011730 	.word	0x08011730
 800fc78:	08011588 	.word	0x08011588

0800fc7c <_Z19VL53L0X_write_multihhPhmP19__I2C_HandleTypeDef>:

  return VL53L0X_ERROR_NONE;
}

int VL53L0X_write_multi(uint8_t deviceAddress, uint8_t index, uint8_t *pdata,
                        uint32_t count, I2C_HandleTypeDef* hi2c) {
 800fc7c:	b580      	push	{r7, lr}
 800fc7e:	b088      	sub	sp, #32
 800fc80:	af02      	add	r7, sp, #8
 800fc82:	60ba      	str	r2, [r7, #8]
 800fc84:	607b      	str	r3, [r7, #4]
 800fc86:	4603      	mov	r3, r0
 800fc88:	73fb      	strb	r3, [r7, #15]
 800fc8a:	460b      	mov	r3, r1
 800fc8c:	73bb      	strb	r3, [r7, #14]
	HAL_StatusTypeDef res;
	res = HAL_I2C_Master_Transmit(hi2c, deviceAddress << 1, &index, 1, 100);
 800fc8e:	7bfb      	ldrb	r3, [r7, #15]
 800fc90:	b29b      	uxth	r3, r3
 800fc92:	005b      	lsls	r3, r3, #1
 800fc94:	b299      	uxth	r1, r3
 800fc96:	f107 020e 	add.w	r2, r7, #14
 800fc9a:	2364      	movs	r3, #100	; 0x64
 800fc9c:	9300      	str	r3, [sp, #0]
 800fc9e:	2301      	movs	r3, #1
 800fca0:	6a38      	ldr	r0, [r7, #32]
 800fca2:	f7f3 fda5 	bl	80037f0 <HAL_I2C_Master_Transmit>
 800fca6:	4603      	mov	r3, r0
 800fca8:	75fb      	strb	r3, [r7, #23]
#ifdef I2C_DEBUG
  printf("Writing index: %d\nResult: %d\n", index, res);
#endif
  	res = HAL_I2C_Master_Transmit(hi2c, deviceAddress << 1, pdata, count, 100);
 800fcaa:	7bfb      	ldrb	r3, [r7, #15]
 800fcac:	b29b      	uxth	r3, r3
 800fcae:	005b      	lsls	r3, r3, #1
 800fcb0:	b299      	uxth	r1, r3
 800fcb2:	687b      	ldr	r3, [r7, #4]
 800fcb4:	b29a      	uxth	r2, r3
 800fcb6:	2364      	movs	r3, #100	; 0x64
 800fcb8:	9300      	str	r3, [sp, #0]
 800fcba:	4613      	mov	r3, r2
 800fcbc:	68ba      	ldr	r2, [r7, #8]
 800fcbe:	6a38      	ldr	r0, [r7, #32]
 800fcc0:	f7f3 fd96 	bl	80037f0 <HAL_I2C_Master_Transmit>
 800fcc4:	4603      	mov	r3, r0
 800fcc6:	75fb      	strb	r3, [r7, #23]
#ifdef I2C_DEBUG
  	printf("Finished sending message, result: %d\n", res);
#endif

  return VL53L0X_ERROR_NONE;
 800fcc8:	2300      	movs	r3, #0
}
 800fcca:	4618      	mov	r0, r3
 800fccc:	3718      	adds	r7, #24
 800fcce:	46bd      	mov	sp, r7
 800fcd0:	bd80      	pop	{r7, pc}

0800fcd2 <_Z18VL53L0X_read_multihhPhmP19__I2C_HandleTypeDef>:

int VL53L0X_read_multi(uint8_t deviceAddress, uint8_t index, uint8_t *pdata,
                       uint32_t count, I2C_HandleTypeDef* hi2c) {
 800fcd2:	b580      	push	{r7, lr}
 800fcd4:	b088      	sub	sp, #32
 800fcd6:	af02      	add	r7, sp, #8
 800fcd8:	60ba      	str	r2, [r7, #8]
 800fcda:	607b      	str	r3, [r7, #4]
 800fcdc:	4603      	mov	r3, r0
 800fcde:	73fb      	strb	r3, [r7, #15]
 800fce0:	460b      	mov	r3, r1
 800fce2:	73bb      	strb	r3, [r7, #14]
	HAL_StatusTypeDef res;
	pdata[0] = 0;
 800fce4:	68bb      	ldr	r3, [r7, #8]
 800fce6:	2200      	movs	r2, #0
 800fce8:	701a      	strb	r2, [r3, #0]
	res = HAL_I2C_Master_Transmit(hi2c, deviceAddress << 1, &index, 1, 25);
 800fcea:	7bfb      	ldrb	r3, [r7, #15]
 800fcec:	b29b      	uxth	r3, r3
 800fcee:	005b      	lsls	r3, r3, #1
 800fcf0:	b299      	uxth	r1, r3
 800fcf2:	f107 020e 	add.w	r2, r7, #14
 800fcf6:	2319      	movs	r3, #25
 800fcf8:	9300      	str	r3, [sp, #0]
 800fcfa:	2301      	movs	r3, #1
 800fcfc:	6a38      	ldr	r0, [r7, #32]
 800fcfe:	f7f3 fd77 	bl	80037f0 <HAL_I2C_Master_Transmit>
 800fd02:	4603      	mov	r3, r0
 800fd04:	75fb      	strb	r3, [r7, #23]
#ifdef I2C_DEBUG
  printf("Writing index: %d\nResult: %d\n", index, res);
#endif

  res = HAL_I2C_Master_Receive(hi2c, deviceAddress << 1, pdata, count, 25);
 800fd06:	7bfb      	ldrb	r3, [r7, #15]
 800fd08:	b29b      	uxth	r3, r3
 800fd0a:	005b      	lsls	r3, r3, #1
 800fd0c:	b299      	uxth	r1, r3
 800fd0e:	687b      	ldr	r3, [r7, #4]
 800fd10:	b29a      	uxth	r2, r3
 800fd12:	2319      	movs	r3, #25
 800fd14:	9300      	str	r3, [sp, #0]
 800fd16:	4613      	mov	r3, r2
 800fd18:	68ba      	ldr	r2, [r7, #8]
 800fd1a:	6a38      	ldr	r0, [r7, #32]
 800fd1c:	f7f3 fe5c 	bl	80039d8 <HAL_I2C_Master_Receive>
 800fd20:	4603      	mov	r3, r0
 800fd22:	75fb      	strb	r3, [r7, #23]
#ifdef I2C_DEBUG
  printf("Finished receiving message, result: %d\n", res);
#endif

  return VL53L0X_ERROR_NONE;
 800fd24:	2300      	movs	r3, #0
}
 800fd26:	4618      	mov	r0, r3
 800fd28:	3718      	adds	r7, #24
 800fd2a:	46bd      	mov	sp, r7
 800fd2c:	bd80      	pop	{r7, pc}

0800fd2e <_Z18VL53L0X_write_bytehhhP19__I2C_HandleTypeDef>:

int VL53L0X_write_byte(uint8_t deviceAddress, uint8_t index, uint8_t data,
		I2C_HandleTypeDef* hi2c) {
 800fd2e:	b580      	push	{r7, lr}
 800fd30:	b084      	sub	sp, #16
 800fd32:	af02      	add	r7, sp, #8
 800fd34:	603b      	str	r3, [r7, #0]
 800fd36:	4603      	mov	r3, r0
 800fd38:	71fb      	strb	r3, [r7, #7]
 800fd3a:	460b      	mov	r3, r1
 800fd3c:	71bb      	strb	r3, [r7, #6]
 800fd3e:	4613      	mov	r3, r2
 800fd40:	717b      	strb	r3, [r7, #5]
  return VL53L0X_write_multi(deviceAddress, index, &data, 1, hi2c);
 800fd42:	1d7a      	adds	r2, r7, #5
 800fd44:	79b9      	ldrb	r1, [r7, #6]
 800fd46:	79f8      	ldrb	r0, [r7, #7]
 800fd48:	683b      	ldr	r3, [r7, #0]
 800fd4a:	9300      	str	r3, [sp, #0]
 800fd4c:	2301      	movs	r3, #1
 800fd4e:	f7ff ff95 	bl	800fc7c <_Z19VL53L0X_write_multihhPhmP19__I2C_HandleTypeDef>
 800fd52:	4603      	mov	r3, r0
}
 800fd54:	4618      	mov	r0, r3
 800fd56:	3708      	adds	r7, #8
 800fd58:	46bd      	mov	sp, r7
 800fd5a:	bd80      	pop	{r7, pc}

0800fd5c <_Z18VL53L0X_write_wordhhtP19__I2C_HandleTypeDef>:

int VL53L0X_write_word(uint8_t deviceAddress, uint8_t index, uint16_t data,
		I2C_HandleTypeDef* hi2c) {
 800fd5c:	b580      	push	{r7, lr}
 800fd5e:	b086      	sub	sp, #24
 800fd60:	af02      	add	r7, sp, #8
 800fd62:	603b      	str	r3, [r7, #0]
 800fd64:	4603      	mov	r3, r0
 800fd66:	71fb      	strb	r3, [r7, #7]
 800fd68:	460b      	mov	r3, r1
 800fd6a:	71bb      	strb	r3, [r7, #6]
 800fd6c:	4613      	mov	r3, r2
 800fd6e:	80bb      	strh	r3, [r7, #4]
  uint8_t buff[2];
  buff[1] = data & 0xFF;
 800fd70:	88bb      	ldrh	r3, [r7, #4]
 800fd72:	b2db      	uxtb	r3, r3
 800fd74:	737b      	strb	r3, [r7, #13]
  buff[0] = data >> 8;
 800fd76:	88bb      	ldrh	r3, [r7, #4]
 800fd78:	121b      	asrs	r3, r3, #8
 800fd7a:	b2db      	uxtb	r3, r3
 800fd7c:	733b      	strb	r3, [r7, #12]
  return VL53L0X_write_multi(deviceAddress, index, buff, 2, hi2c);
 800fd7e:	f107 020c 	add.w	r2, r7, #12
 800fd82:	79b9      	ldrb	r1, [r7, #6]
 800fd84:	79f8      	ldrb	r0, [r7, #7]
 800fd86:	683b      	ldr	r3, [r7, #0]
 800fd88:	9300      	str	r3, [sp, #0]
 800fd8a:	2302      	movs	r3, #2
 800fd8c:	f7ff ff76 	bl	800fc7c <_Z19VL53L0X_write_multihhPhmP19__I2C_HandleTypeDef>
 800fd90:	4603      	mov	r3, r0
}
 800fd92:	4618      	mov	r0, r3
 800fd94:	3710      	adds	r7, #16
 800fd96:	46bd      	mov	sp, r7
 800fd98:	bd80      	pop	{r7, pc}

0800fd9a <_Z17VL53L0X_read_bytehhPhP19__I2C_HandleTypeDef>:

  return VL53L0X_write_multi(deviceAddress, index, buff, 4, hi2c);
}

int VL53L0X_read_byte(uint8_t deviceAddress, uint8_t index, uint8_t *data,
		I2C_HandleTypeDef* hi2c) {
 800fd9a:	b580      	push	{r7, lr}
 800fd9c:	b086      	sub	sp, #24
 800fd9e:	af02      	add	r7, sp, #8
 800fda0:	60ba      	str	r2, [r7, #8]
 800fda2:	607b      	str	r3, [r7, #4]
 800fda4:	4603      	mov	r3, r0
 800fda6:	73fb      	strb	r3, [r7, #15]
 800fda8:	460b      	mov	r3, r1
 800fdaa:	73bb      	strb	r3, [r7, #14]
  return VL53L0X_read_multi(deviceAddress, index, data, 1, hi2c);
 800fdac:	7bb9      	ldrb	r1, [r7, #14]
 800fdae:	7bf8      	ldrb	r0, [r7, #15]
 800fdb0:	687b      	ldr	r3, [r7, #4]
 800fdb2:	9300      	str	r3, [sp, #0]
 800fdb4:	2301      	movs	r3, #1
 800fdb6:	68ba      	ldr	r2, [r7, #8]
 800fdb8:	f7ff ff8b 	bl	800fcd2 <_Z18VL53L0X_read_multihhPhmP19__I2C_HandleTypeDef>
 800fdbc:	4603      	mov	r3, r0
}
 800fdbe:	4618      	mov	r0, r3
 800fdc0:	3710      	adds	r7, #16
 800fdc2:	46bd      	mov	sp, r7
 800fdc4:	bd80      	pop	{r7, pc}

0800fdc6 <_Z17VL53L0X_read_wordhhPtP19__I2C_HandleTypeDef>:

int VL53L0X_read_word(uint8_t deviceAddress, uint8_t index, uint16_t *data,
		I2C_HandleTypeDef* hi2c) {
 800fdc6:	b580      	push	{r7, lr}
 800fdc8:	b088      	sub	sp, #32
 800fdca:	af02      	add	r7, sp, #8
 800fdcc:	60ba      	str	r2, [r7, #8]
 800fdce:	607b      	str	r3, [r7, #4]
 800fdd0:	4603      	mov	r3, r0
 800fdd2:	73fb      	strb	r3, [r7, #15]
 800fdd4:	460b      	mov	r3, r1
 800fdd6:	73bb      	strb	r3, [r7, #14]
  uint8_t buff[2];
  int r = VL53L0X_read_multi(deviceAddress, index, buff, 2, hi2c);
 800fdd8:	f107 0210 	add.w	r2, r7, #16
 800fddc:	7bb9      	ldrb	r1, [r7, #14]
 800fdde:	7bf8      	ldrb	r0, [r7, #15]
 800fde0:	687b      	ldr	r3, [r7, #4]
 800fde2:	9300      	str	r3, [sp, #0]
 800fde4:	2302      	movs	r3, #2
 800fde6:	f7ff ff74 	bl	800fcd2 <_Z18VL53L0X_read_multihhPhmP19__I2C_HandleTypeDef>
 800fdea:	6178      	str	r0, [r7, #20]

  uint16_t tmp;
  tmp = buff[0];
 800fdec:	7c3b      	ldrb	r3, [r7, #16]
 800fdee:	827b      	strh	r3, [r7, #18]
  tmp <<= 8;
 800fdf0:	8a7b      	ldrh	r3, [r7, #18]
 800fdf2:	021b      	lsls	r3, r3, #8
 800fdf4:	827b      	strh	r3, [r7, #18]
  tmp |= buff[1];
 800fdf6:	7c7b      	ldrb	r3, [r7, #17]
 800fdf8:	b29a      	uxth	r2, r3
 800fdfa:	8a7b      	ldrh	r3, [r7, #18]
 800fdfc:	4313      	orrs	r3, r2
 800fdfe:	827b      	strh	r3, [r7, #18]
  *data = tmp;
 800fe00:	68bb      	ldr	r3, [r7, #8]
 800fe02:	8a7a      	ldrh	r2, [r7, #18]
 800fe04:	801a      	strh	r2, [r3, #0]

  return r;
 800fe06:	697b      	ldr	r3, [r7, #20]
}
 800fe08:	4618      	mov	r0, r3
 800fe0a:	3718      	adds	r7, #24
 800fe0c:	46bd      	mov	sp, r7
 800fe0e:	bd80      	pop	{r7, pc}

0800fe10 <_Z18VL53L0X_read_dwordhhPmP19__I2C_HandleTypeDef>:

int VL53L0X_read_dword(uint8_t deviceAddress, uint8_t index, uint32_t *data,
		I2C_HandleTypeDef* hi2c) {
 800fe10:	b580      	push	{r7, lr}
 800fe12:	b08a      	sub	sp, #40	; 0x28
 800fe14:	af02      	add	r7, sp, #8
 800fe16:	60ba      	str	r2, [r7, #8]
 800fe18:	607b      	str	r3, [r7, #4]
 800fe1a:	4603      	mov	r3, r0
 800fe1c:	73fb      	strb	r3, [r7, #15]
 800fe1e:	460b      	mov	r3, r1
 800fe20:	73bb      	strb	r3, [r7, #14]
  uint8_t buff[4];
  int r = VL53L0X_read_multi(deviceAddress, index, buff, 4, hi2c);
 800fe22:	f107 0214 	add.w	r2, r7, #20
 800fe26:	7bb9      	ldrb	r1, [r7, #14]
 800fe28:	7bf8      	ldrb	r0, [r7, #15]
 800fe2a:	687b      	ldr	r3, [r7, #4]
 800fe2c:	9300      	str	r3, [sp, #0]
 800fe2e:	2304      	movs	r3, #4
 800fe30:	f7ff ff4f 	bl	800fcd2 <_Z18VL53L0X_read_multihhPhmP19__I2C_HandleTypeDef>
 800fe34:	61f8      	str	r0, [r7, #28]

  uint32_t tmp;
  tmp = buff[0];
 800fe36:	7d3b      	ldrb	r3, [r7, #20]
 800fe38:	61bb      	str	r3, [r7, #24]
  tmp <<= 8;
 800fe3a:	69bb      	ldr	r3, [r7, #24]
 800fe3c:	021b      	lsls	r3, r3, #8
 800fe3e:	61bb      	str	r3, [r7, #24]
  tmp |= buff[1];
 800fe40:	7d7b      	ldrb	r3, [r7, #21]
 800fe42:	461a      	mov	r2, r3
 800fe44:	69bb      	ldr	r3, [r7, #24]
 800fe46:	4313      	orrs	r3, r2
 800fe48:	61bb      	str	r3, [r7, #24]
  tmp <<= 8;
 800fe4a:	69bb      	ldr	r3, [r7, #24]
 800fe4c:	021b      	lsls	r3, r3, #8
 800fe4e:	61bb      	str	r3, [r7, #24]
  tmp |= buff[2];
 800fe50:	7dbb      	ldrb	r3, [r7, #22]
 800fe52:	461a      	mov	r2, r3
 800fe54:	69bb      	ldr	r3, [r7, #24]
 800fe56:	4313      	orrs	r3, r2
 800fe58:	61bb      	str	r3, [r7, #24]
  tmp <<= 8;
 800fe5a:	69bb      	ldr	r3, [r7, #24]
 800fe5c:	021b      	lsls	r3, r3, #8
 800fe5e:	61bb      	str	r3, [r7, #24]
  tmp |= buff[3];
 800fe60:	7dfb      	ldrb	r3, [r7, #23]
 800fe62:	461a      	mov	r2, r3
 800fe64:	69bb      	ldr	r3, [r7, #24]
 800fe66:	4313      	orrs	r3, r2
 800fe68:	61bb      	str	r3, [r7, #24]

  *data = tmp;
 800fe6a:	68bb      	ldr	r3, [r7, #8]
 800fe6c:	69ba      	ldr	r2, [r7, #24]
 800fe6e:	601a      	str	r2, [r3, #0]

  return r;
 800fe70:	69fb      	ldr	r3, [r7, #28]
}
 800fe72:	4618      	mov	r0, r3
 800fe74:	3720      	adds	r7, #32
 800fe76:	46bd      	mov	sp, r7
 800fe78:	bd80      	pop	{r7, pc}

0800fe7a <VL53L0X_WriteMulti>:
  return Status;
}

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_WriteMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata,
                                 uint32_t count) {
 800fe7a:	b580      	push	{r7, lr}
 800fe7c:	b08a      	sub	sp, #40	; 0x28
 800fe7e:	af02      	add	r7, sp, #8
 800fe80:	60f8      	str	r0, [r7, #12]
 800fe82:	607a      	str	r2, [r7, #4]
 800fe84:	603b      	str	r3, [r7, #0]
 800fe86:	460b      	mov	r3, r1
 800fe88:	72fb      	strb	r3, [r7, #11]

  VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800fe8a:	2300      	movs	r3, #0
 800fe8c:	77fb      	strb	r3, [r7, #31]
  int32_t status_int = 0;
 800fe8e:	2300      	movs	r3, #0
 800fe90:	61bb      	str	r3, [r7, #24]
  uint8_t deviceAddress;

  if (count >= VL53L0X_MAX_I2C_XFER_SIZE) {
 800fe92:	683b      	ldr	r3, [r7, #0]
 800fe94:	2b3f      	cmp	r3, #63	; 0x3f
 800fe96:	d901      	bls.n	800fe9c <VL53L0X_WriteMulti+0x22>
    Status = VL53L0X_ERROR_INVALID_PARAMS;
 800fe98:	23fc      	movs	r3, #252	; 0xfc
 800fe9a:	77fb      	strb	r3, [r7, #31]
  }

  deviceAddress = Dev->I2cDevAddr;
 800fe9c:	68fb      	ldr	r3, [r7, #12]
 800fe9e:	f893 315c 	ldrb.w	r3, [r3, #348]	; 0x15c
 800fea2:	75fb      	strb	r3, [r7, #23]

  status_int =
      VL53L0X_write_multi(deviceAddress, index, pdata, count, Dev->hi2c);
 800fea4:	68fb      	ldr	r3, [r7, #12]
 800fea6:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
  status_int =
 800feaa:	7af9      	ldrb	r1, [r7, #11]
 800feac:	7df8      	ldrb	r0, [r7, #23]
 800feae:	9300      	str	r3, [sp, #0]
 800feb0:	683b      	ldr	r3, [r7, #0]
 800feb2:	687a      	ldr	r2, [r7, #4]
 800feb4:	f7ff fee2 	bl	800fc7c <_Z19VL53L0X_write_multihhPhmP19__I2C_HandleTypeDef>
 800feb8:	61b8      	str	r0, [r7, #24]

  if (status_int != 0)
 800feba:	69bb      	ldr	r3, [r7, #24]
 800febc:	2b00      	cmp	r3, #0
 800febe:	d001      	beq.n	800fec4 <VL53L0X_WriteMulti+0x4a>
    Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800fec0:	23ec      	movs	r3, #236	; 0xec
 800fec2:	77fb      	strb	r3, [r7, #31]

  return Status;
 800fec4:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800fec8:	4618      	mov	r0, r3
 800feca:	3720      	adds	r7, #32
 800fecc:	46bd      	mov	sp, r7
 800fece:	bd80      	pop	{r7, pc}

0800fed0 <VL53L0X_ReadMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_ReadMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata,
                                uint32_t count) {
 800fed0:	b580      	push	{r7, lr}
 800fed2:	b088      	sub	sp, #32
 800fed4:	af02      	add	r7, sp, #8
 800fed6:	60f8      	str	r0, [r7, #12]
 800fed8:	607a      	str	r2, [r7, #4]
 800feda:	603b      	str	r3, [r7, #0]
 800fedc:	460b      	mov	r3, r1
 800fede:	72fb      	strb	r3, [r7, #11]
  VL53L0X_I2C_USER_VAR
  VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800fee0:	2300      	movs	r3, #0
 800fee2:	75fb      	strb	r3, [r7, #23]
  int32_t status_int;
  uint8_t deviceAddress;

  if (count >= VL53L0X_MAX_I2C_XFER_SIZE) {
 800fee4:	683b      	ldr	r3, [r7, #0]
 800fee6:	2b3f      	cmp	r3, #63	; 0x3f
 800fee8:	d901      	bls.n	800feee <VL53L0X_ReadMulti+0x1e>
    Status = VL53L0X_ERROR_INVALID_PARAMS;
 800feea:	23fc      	movs	r3, #252	; 0xfc
 800feec:	75fb      	strb	r3, [r7, #23]
  }

  deviceAddress = Dev->I2cDevAddr;
 800feee:	68fb      	ldr	r3, [r7, #12]
 800fef0:	f893 315c 	ldrb.w	r3, [r3, #348]	; 0x15c
 800fef4:	75bb      	strb	r3, [r7, #22]

  status_int = VL53L0X_read_multi(deviceAddress, index, pdata, count, Dev->hi2c);
 800fef6:	68fb      	ldr	r3, [r7, #12]
 800fef8:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 800fefc:	7af9      	ldrb	r1, [r7, #11]
 800fefe:	7db8      	ldrb	r0, [r7, #22]
 800ff00:	9300      	str	r3, [sp, #0]
 800ff02:	683b      	ldr	r3, [r7, #0]
 800ff04:	687a      	ldr	r2, [r7, #4]
 800ff06:	f7ff fee4 	bl	800fcd2 <_Z18VL53L0X_read_multihhPhmP19__I2C_HandleTypeDef>
 800ff0a:	6138      	str	r0, [r7, #16]

  if (status_int != 0)
 800ff0c:	693b      	ldr	r3, [r7, #16]
 800ff0e:	2b00      	cmp	r3, #0
 800ff10:	d001      	beq.n	800ff16 <VL53L0X_ReadMulti+0x46>
    Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800ff12:	23ec      	movs	r3, #236	; 0xec
 800ff14:	75fb      	strb	r3, [r7, #23]

  return Status;
 800ff16:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ff1a:	4618      	mov	r0, r3
 800ff1c:	3718      	adds	r7, #24
 800ff1e:	46bd      	mov	sp, r7
 800ff20:	bd80      	pop	{r7, pc}

0800ff22 <VL53L0X_WrByte>:

VL53L0X_Error VL53L0X_WrByte(VL53L0X_DEV Dev, uint8_t index, uint8_t data) {
 800ff22:	b580      	push	{r7, lr}
 800ff24:	b084      	sub	sp, #16
 800ff26:	af00      	add	r7, sp, #0
 800ff28:	6078      	str	r0, [r7, #4]
 800ff2a:	460b      	mov	r3, r1
 800ff2c:	70fb      	strb	r3, [r7, #3]
 800ff2e:	4613      	mov	r3, r2
 800ff30:	70bb      	strb	r3, [r7, #2]
  VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ff32:	2300      	movs	r3, #0
 800ff34:	73fb      	strb	r3, [r7, #15]
  int32_t status_int;
  uint8_t deviceAddress;

  deviceAddress = Dev->I2cDevAddr;
 800ff36:	687b      	ldr	r3, [r7, #4]
 800ff38:	f893 315c 	ldrb.w	r3, [r3, #348]	; 0x15c
 800ff3c:	73bb      	strb	r3, [r7, #14]

  status_int = VL53L0X_write_byte(deviceAddress, index, data, Dev->hi2c);
 800ff3e:	687b      	ldr	r3, [r7, #4]
 800ff40:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 800ff44:	78ba      	ldrb	r2, [r7, #2]
 800ff46:	78f9      	ldrb	r1, [r7, #3]
 800ff48:	7bb8      	ldrb	r0, [r7, #14]
 800ff4a:	f7ff fef0 	bl	800fd2e <_Z18VL53L0X_write_bytehhhP19__I2C_HandleTypeDef>
 800ff4e:	60b8      	str	r0, [r7, #8]

  if (status_int != 0)
 800ff50:	68bb      	ldr	r3, [r7, #8]
 800ff52:	2b00      	cmp	r3, #0
 800ff54:	d001      	beq.n	800ff5a <VL53L0X_WrByte+0x38>
    Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800ff56:	23ec      	movs	r3, #236	; 0xec
 800ff58:	73fb      	strb	r3, [r7, #15]

  return Status;
 800ff5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ff5e:	4618      	mov	r0, r3
 800ff60:	3710      	adds	r7, #16
 800ff62:	46bd      	mov	sp, r7
 800ff64:	bd80      	pop	{r7, pc}

0800ff66 <VL53L0X_WrWord>:

VL53L0X_Error VL53L0X_WrWord(VL53L0X_DEV Dev, uint8_t index, uint16_t data) {
 800ff66:	b580      	push	{r7, lr}
 800ff68:	b084      	sub	sp, #16
 800ff6a:	af00      	add	r7, sp, #0
 800ff6c:	6078      	str	r0, [r7, #4]
 800ff6e:	460b      	mov	r3, r1
 800ff70:	70fb      	strb	r3, [r7, #3]
 800ff72:	4613      	mov	r3, r2
 800ff74:	803b      	strh	r3, [r7, #0]
  VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ff76:	2300      	movs	r3, #0
 800ff78:	73fb      	strb	r3, [r7, #15]
  int32_t status_int;
  uint8_t deviceAddress;

  deviceAddress = Dev->I2cDevAddr;
 800ff7a:	687b      	ldr	r3, [r7, #4]
 800ff7c:	f893 315c 	ldrb.w	r3, [r3, #348]	; 0x15c
 800ff80:	73bb      	strb	r3, [r7, #14]

  status_int = VL53L0X_write_word(deviceAddress, index, data, Dev->hi2c);
 800ff82:	687b      	ldr	r3, [r7, #4]
 800ff84:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 800ff88:	883a      	ldrh	r2, [r7, #0]
 800ff8a:	78f9      	ldrb	r1, [r7, #3]
 800ff8c:	7bb8      	ldrb	r0, [r7, #14]
 800ff8e:	f7ff fee5 	bl	800fd5c <_Z18VL53L0X_write_wordhhtP19__I2C_HandleTypeDef>
 800ff92:	60b8      	str	r0, [r7, #8]

  if (status_int != 0)
 800ff94:	68bb      	ldr	r3, [r7, #8]
 800ff96:	2b00      	cmp	r3, #0
 800ff98:	d001      	beq.n	800ff9e <VL53L0X_WrWord+0x38>
    Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800ff9a:	23ec      	movs	r3, #236	; 0xec
 800ff9c:	73fb      	strb	r3, [r7, #15]

  return Status;
 800ff9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ffa2:	4618      	mov	r0, r3
 800ffa4:	3710      	adds	r7, #16
 800ffa6:	46bd      	mov	sp, r7
 800ffa8:	bd80      	pop	{r7, pc}

0800ffaa <VL53L0X_UpdateByte>:

  return Status;
}

VL53L0X_Error VL53L0X_UpdateByte(VL53L0X_DEV Dev, uint8_t index,
                                 uint8_t AndData, uint8_t OrData) {
 800ffaa:	b580      	push	{r7, lr}
 800ffac:	b086      	sub	sp, #24
 800ffae:	af00      	add	r7, sp, #0
 800ffb0:	6078      	str	r0, [r7, #4]
 800ffb2:	4608      	mov	r0, r1
 800ffb4:	4611      	mov	r1, r2
 800ffb6:	461a      	mov	r2, r3
 800ffb8:	4603      	mov	r3, r0
 800ffba:	70fb      	strb	r3, [r7, #3]
 800ffbc:	460b      	mov	r3, r1
 800ffbe:	70bb      	strb	r3, [r7, #2]
 800ffc0:	4613      	mov	r3, r2
 800ffc2:	707b      	strb	r3, [r7, #1]
  VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ffc4:	2300      	movs	r3, #0
 800ffc6:	75fb      	strb	r3, [r7, #23]
  int32_t status_int;
  uint8_t deviceAddress;
  uint8_t data;

  deviceAddress = Dev->I2cDevAddr;
 800ffc8:	687b      	ldr	r3, [r7, #4]
 800ffca:	f893 315c 	ldrb.w	r3, [r3, #348]	; 0x15c
 800ffce:	75bb      	strb	r3, [r7, #22]

  status_int = VL53L0X_read_byte(deviceAddress, index, &data, Dev->hi2c);
 800ffd0:	687b      	ldr	r3, [r7, #4]
 800ffd2:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 800ffd6:	f107 020f 	add.w	r2, r7, #15
 800ffda:	78f9      	ldrb	r1, [r7, #3]
 800ffdc:	7db8      	ldrb	r0, [r7, #22]
 800ffde:	f7ff fedc 	bl	800fd9a <_Z17VL53L0X_read_bytehhPhP19__I2C_HandleTypeDef>
 800ffe2:	6138      	str	r0, [r7, #16]

  if (status_int != 0)
 800ffe4:	693b      	ldr	r3, [r7, #16]
 800ffe6:	2b00      	cmp	r3, #0
 800ffe8:	d001      	beq.n	800ffee <VL53L0X_UpdateByte+0x44>
    Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800ffea:	23ec      	movs	r3, #236	; 0xec
 800ffec:	75fb      	strb	r3, [r7, #23]

  if (Status == VL53L0X_ERROR_NONE) {
 800ffee:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800fff2:	2b00      	cmp	r3, #0
 800fff4:	d115      	bne.n	8010022 <VL53L0X_UpdateByte+0x78>
    data = (data & AndData) | OrData;
 800fff6:	7bfa      	ldrb	r2, [r7, #15]
 800fff8:	78bb      	ldrb	r3, [r7, #2]
 800fffa:	4013      	ands	r3, r2
 800fffc:	b2da      	uxtb	r2, r3
 800fffe:	787b      	ldrb	r3, [r7, #1]
 8010000:	4313      	orrs	r3, r2
 8010002:	b2db      	uxtb	r3, r3
 8010004:	73fb      	strb	r3, [r7, #15]
    status_int = VL53L0X_write_byte(deviceAddress, index, data, Dev->hi2c);
 8010006:	7bfa      	ldrb	r2, [r7, #15]
 8010008:	687b      	ldr	r3, [r7, #4]
 801000a:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 801000e:	78f9      	ldrb	r1, [r7, #3]
 8010010:	7db8      	ldrb	r0, [r7, #22]
 8010012:	f7ff fe8c 	bl	800fd2e <_Z18VL53L0X_write_bytehhhP19__I2C_HandleTypeDef>
 8010016:	6138      	str	r0, [r7, #16]

    if (status_int != 0)
 8010018:	693b      	ldr	r3, [r7, #16]
 801001a:	2b00      	cmp	r3, #0
 801001c:	d001      	beq.n	8010022 <VL53L0X_UpdateByte+0x78>
      Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 801001e:	23ec      	movs	r3, #236	; 0xec
 8010020:	75fb      	strb	r3, [r7, #23]
  }

  return Status;
 8010022:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8010026:	4618      	mov	r0, r3
 8010028:	3718      	adds	r7, #24
 801002a:	46bd      	mov	sp, r7
 801002c:	bd80      	pop	{r7, pc}

0801002e <VL53L0X_RdByte>:

VL53L0X_Error VL53L0X_RdByte(VL53L0X_DEV Dev, uint8_t index, uint8_t *data) {
 801002e:	b580      	push	{r7, lr}
 8010030:	b086      	sub	sp, #24
 8010032:	af00      	add	r7, sp, #0
 8010034:	60f8      	str	r0, [r7, #12]
 8010036:	460b      	mov	r3, r1
 8010038:	607a      	str	r2, [r7, #4]
 801003a:	72fb      	strb	r3, [r7, #11]
  VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 801003c:	2300      	movs	r3, #0
 801003e:	75fb      	strb	r3, [r7, #23]
  int32_t status_int;
  uint8_t deviceAddress;

  deviceAddress = Dev->I2cDevAddr;
 8010040:	68fb      	ldr	r3, [r7, #12]
 8010042:	f893 315c 	ldrb.w	r3, [r3, #348]	; 0x15c
 8010046:	75bb      	strb	r3, [r7, #22]

  status_int = VL53L0X_read_byte(deviceAddress, index, data, Dev->hi2c);
 8010048:	68fb      	ldr	r3, [r7, #12]
 801004a:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 801004e:	7af9      	ldrb	r1, [r7, #11]
 8010050:	7db8      	ldrb	r0, [r7, #22]
 8010052:	687a      	ldr	r2, [r7, #4]
 8010054:	f7ff fea1 	bl	800fd9a <_Z17VL53L0X_read_bytehhPhP19__I2C_HandleTypeDef>
 8010058:	6138      	str	r0, [r7, #16]

  if (status_int != 0)
 801005a:	693b      	ldr	r3, [r7, #16]
 801005c:	2b00      	cmp	r3, #0
 801005e:	d001      	beq.n	8010064 <VL53L0X_RdByte+0x36>
    Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8010060:	23ec      	movs	r3, #236	; 0xec
 8010062:	75fb      	strb	r3, [r7, #23]

  return Status;
 8010064:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8010068:	4618      	mov	r0, r3
 801006a:	3718      	adds	r7, #24
 801006c:	46bd      	mov	sp, r7
 801006e:	bd80      	pop	{r7, pc}

08010070 <VL53L0X_RdWord>:

VL53L0X_Error VL53L0X_RdWord(VL53L0X_DEV Dev, uint8_t index, uint16_t *data) {
 8010070:	b580      	push	{r7, lr}
 8010072:	b086      	sub	sp, #24
 8010074:	af00      	add	r7, sp, #0
 8010076:	60f8      	str	r0, [r7, #12]
 8010078:	460b      	mov	r3, r1
 801007a:	607a      	str	r2, [r7, #4]
 801007c:	72fb      	strb	r3, [r7, #11]
  VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 801007e:	2300      	movs	r3, #0
 8010080:	75fb      	strb	r3, [r7, #23]
  int32_t status_int;
  uint8_t deviceAddress;

  deviceAddress = Dev->I2cDevAddr;
 8010082:	68fb      	ldr	r3, [r7, #12]
 8010084:	f893 315c 	ldrb.w	r3, [r3, #348]	; 0x15c
 8010088:	75bb      	strb	r3, [r7, #22]

  status_int = VL53L0X_read_word(deviceAddress, index, data, Dev->hi2c);
 801008a:	68fb      	ldr	r3, [r7, #12]
 801008c:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 8010090:	7af9      	ldrb	r1, [r7, #11]
 8010092:	7db8      	ldrb	r0, [r7, #22]
 8010094:	687a      	ldr	r2, [r7, #4]
 8010096:	f7ff fe96 	bl	800fdc6 <_Z17VL53L0X_read_wordhhPtP19__I2C_HandleTypeDef>
 801009a:	6138      	str	r0, [r7, #16]

  if (status_int != 0)
 801009c:	693b      	ldr	r3, [r7, #16]
 801009e:	2b00      	cmp	r3, #0
 80100a0:	d001      	beq.n	80100a6 <VL53L0X_RdWord+0x36>
    Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 80100a2:	23ec      	movs	r3, #236	; 0xec
 80100a4:	75fb      	strb	r3, [r7, #23]

  return Status;
 80100a6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80100aa:	4618      	mov	r0, r3
 80100ac:	3718      	adds	r7, #24
 80100ae:	46bd      	mov	sp, r7
 80100b0:	bd80      	pop	{r7, pc}

080100b2 <VL53L0X_RdDWord>:

VL53L0X_Error VL53L0X_RdDWord(VL53L0X_DEV Dev, uint8_t index, uint32_t *data) {
 80100b2:	b580      	push	{r7, lr}
 80100b4:	b086      	sub	sp, #24
 80100b6:	af00      	add	r7, sp, #0
 80100b8:	60f8      	str	r0, [r7, #12]
 80100ba:	460b      	mov	r3, r1
 80100bc:	607a      	str	r2, [r7, #4]
 80100be:	72fb      	strb	r3, [r7, #11]
  VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80100c0:	2300      	movs	r3, #0
 80100c2:	75fb      	strb	r3, [r7, #23]
  int32_t status_int;
  uint8_t deviceAddress;

  deviceAddress = Dev->I2cDevAddr;
 80100c4:	68fb      	ldr	r3, [r7, #12]
 80100c6:	f893 315c 	ldrb.w	r3, [r3, #348]	; 0x15c
 80100ca:	75bb      	strb	r3, [r7, #22]

  status_int = VL53L0X_read_dword(deviceAddress, index, data, Dev->hi2c);
 80100cc:	68fb      	ldr	r3, [r7, #12]
 80100ce:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 80100d2:	7af9      	ldrb	r1, [r7, #11]
 80100d4:	7db8      	ldrb	r0, [r7, #22]
 80100d6:	687a      	ldr	r2, [r7, #4]
 80100d8:	f7ff fe9a 	bl	800fe10 <_Z18VL53L0X_read_dwordhhPmP19__I2C_HandleTypeDef>
 80100dc:	6138      	str	r0, [r7, #16]

  if (status_int != 0)
 80100de:	693b      	ldr	r3, [r7, #16]
 80100e0:	2b00      	cmp	r3, #0
 80100e2:	d001      	beq.n	80100e8 <VL53L0X_RdDWord+0x36>
    Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 80100e4:	23ec      	movs	r3, #236	; 0xec
 80100e6:	75fb      	strb	r3, [r7, #23]

  return Status;
 80100e8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80100ec:	4618      	mov	r0, r3
 80100ee:	3718      	adds	r7, #24
 80100f0:	46bd      	mov	sp, r7
 80100f2:	bd80      	pop	{r7, pc}

080100f4 <VL53L0X_PollingDelay>:

#define VL53L0X_POLLINGDELAY_LOOPNB 250
VL53L0X_Error VL53L0X_PollingDelay(VL53L0X_DEV Dev) {
 80100f4:	b480      	push	{r7}
 80100f6:	b085      	sub	sp, #20
 80100f8:	af00      	add	r7, sp, #0
 80100fa:	6078      	str	r0, [r7, #4]
  VL53L0X_Error status = VL53L0X_ERROR_NONE;
 80100fc:	2300      	movs	r3, #0
 80100fe:	73fb      	strb	r3, [r7, #15]
  volatile uint32_t i;
  LOG_FUNCTION_START("");

  for (i = 0; i < VL53L0X_POLLINGDELAY_LOOPNB; i++) {
 8010100:	2300      	movs	r3, #0
 8010102:	60bb      	str	r3, [r7, #8]
 8010104:	68bb      	ldr	r3, [r7, #8]
 8010106:	2bf9      	cmp	r3, #249	; 0xf9
 8010108:	bf94      	ite	ls
 801010a:	2301      	movls	r3, #1
 801010c:	2300      	movhi	r3, #0
 801010e:	b2db      	uxtb	r3, r3
 8010110:	2b00      	cmp	r3, #0
 8010112:	d004      	beq.n	801011e <VL53L0X_PollingDelay+0x2a>
    // Do nothing
    asm("nop");
 8010114:	bf00      	nop
  for (i = 0; i < VL53L0X_POLLINGDELAY_LOOPNB; i++) {
 8010116:	68bb      	ldr	r3, [r7, #8]
 8010118:	3301      	adds	r3, #1
 801011a:	60bb      	str	r3, [r7, #8]
 801011c:	e7f2      	b.n	8010104 <VL53L0X_PollingDelay+0x10>
  }

  LOG_FUNCTION_END(status);
  return status;
 801011e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8010122:	4618      	mov	r0, r3
 8010124:	3714      	adds	r7, #20
 8010126:	46bd      	mov	sp, r7
 8010128:	f85d 7b04 	ldr.w	r7, [sp], #4
 801012c:	4770      	bx	lr
	...

08010130 <__errno>:
 8010130:	4b01      	ldr	r3, [pc, #4]	; (8010138 <__errno+0x8>)
 8010132:	6818      	ldr	r0, [r3, #0]
 8010134:	4770      	bx	lr
 8010136:	bf00      	nop
 8010138:	24000354 	.word	0x24000354

0801013c <__libc_init_array>:
 801013c:	b570      	push	{r4, r5, r6, lr}
 801013e:	4e0d      	ldr	r6, [pc, #52]	; (8010174 <__libc_init_array+0x38>)
 8010140:	4c0d      	ldr	r4, [pc, #52]	; (8010178 <__libc_init_array+0x3c>)
 8010142:	1ba4      	subs	r4, r4, r6
 8010144:	10a4      	asrs	r4, r4, #2
 8010146:	2500      	movs	r5, #0
 8010148:	42a5      	cmp	r5, r4
 801014a:	d109      	bne.n	8010160 <__libc_init_array+0x24>
 801014c:	4e0b      	ldr	r6, [pc, #44]	; (801017c <__libc_init_array+0x40>)
 801014e:	4c0c      	ldr	r4, [pc, #48]	; (8010180 <__libc_init_array+0x44>)
 8010150:	f000 ffc6 	bl	80110e0 <_init>
 8010154:	1ba4      	subs	r4, r4, r6
 8010156:	10a4      	asrs	r4, r4, #2
 8010158:	2500      	movs	r5, #0
 801015a:	42a5      	cmp	r5, r4
 801015c:	d105      	bne.n	801016a <__libc_init_array+0x2e>
 801015e:	bd70      	pop	{r4, r5, r6, pc}
 8010160:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8010164:	4798      	blx	r3
 8010166:	3501      	adds	r5, #1
 8010168:	e7ee      	b.n	8010148 <__libc_init_array+0xc>
 801016a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801016e:	4798      	blx	r3
 8010170:	3501      	adds	r5, #1
 8010172:	e7f2      	b.n	801015a <__libc_init_array+0x1e>
 8010174:	08011cf8 	.word	0x08011cf8
 8010178:	08011cf8 	.word	0x08011cf8
 801017c:	08011cf8 	.word	0x08011cf8
 8010180:	08011d00 	.word	0x08011d00

08010184 <memcpy>:
 8010184:	b510      	push	{r4, lr}
 8010186:	1e43      	subs	r3, r0, #1
 8010188:	440a      	add	r2, r1
 801018a:	4291      	cmp	r1, r2
 801018c:	d100      	bne.n	8010190 <memcpy+0xc>
 801018e:	bd10      	pop	{r4, pc}
 8010190:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010194:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010198:	e7f7      	b.n	801018a <memcpy+0x6>

0801019a <memset>:
 801019a:	4402      	add	r2, r0
 801019c:	4603      	mov	r3, r0
 801019e:	4293      	cmp	r3, r2
 80101a0:	d100      	bne.n	80101a4 <memset+0xa>
 80101a2:	4770      	bx	lr
 80101a4:	f803 1b01 	strb.w	r1, [r3], #1
 80101a8:	e7f9      	b.n	801019e <memset+0x4>
	...

080101ac <iprintf>:
 80101ac:	b40f      	push	{r0, r1, r2, r3}
 80101ae:	4b0a      	ldr	r3, [pc, #40]	; (80101d8 <iprintf+0x2c>)
 80101b0:	b513      	push	{r0, r1, r4, lr}
 80101b2:	681c      	ldr	r4, [r3, #0]
 80101b4:	b124      	cbz	r4, 80101c0 <iprintf+0x14>
 80101b6:	69a3      	ldr	r3, [r4, #24]
 80101b8:	b913      	cbnz	r3, 80101c0 <iprintf+0x14>
 80101ba:	4620      	mov	r0, r4
 80101bc:	f000 fa3e 	bl	801063c <__sinit>
 80101c0:	ab05      	add	r3, sp, #20
 80101c2:	9a04      	ldr	r2, [sp, #16]
 80101c4:	68a1      	ldr	r1, [r4, #8]
 80101c6:	9301      	str	r3, [sp, #4]
 80101c8:	4620      	mov	r0, r4
 80101ca:	f000 fbf7 	bl	80109bc <_vfiprintf_r>
 80101ce:	b002      	add	sp, #8
 80101d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80101d4:	b004      	add	sp, #16
 80101d6:	4770      	bx	lr
 80101d8:	24000354 	.word	0x24000354

080101dc <putchar>:
 80101dc:	b538      	push	{r3, r4, r5, lr}
 80101de:	4b08      	ldr	r3, [pc, #32]	; (8010200 <putchar+0x24>)
 80101e0:	681c      	ldr	r4, [r3, #0]
 80101e2:	4605      	mov	r5, r0
 80101e4:	b124      	cbz	r4, 80101f0 <putchar+0x14>
 80101e6:	69a3      	ldr	r3, [r4, #24]
 80101e8:	b913      	cbnz	r3, 80101f0 <putchar+0x14>
 80101ea:	4620      	mov	r0, r4
 80101ec:	f000 fa26 	bl	801063c <__sinit>
 80101f0:	68a2      	ldr	r2, [r4, #8]
 80101f2:	4629      	mov	r1, r5
 80101f4:	4620      	mov	r0, r4
 80101f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80101fa:	f000 be7d 	b.w	8010ef8 <_putc_r>
 80101fe:	bf00      	nop
 8010200:	24000354 	.word	0x24000354

08010204 <_puts_r>:
 8010204:	b570      	push	{r4, r5, r6, lr}
 8010206:	460e      	mov	r6, r1
 8010208:	4605      	mov	r5, r0
 801020a:	b118      	cbz	r0, 8010214 <_puts_r+0x10>
 801020c:	6983      	ldr	r3, [r0, #24]
 801020e:	b90b      	cbnz	r3, 8010214 <_puts_r+0x10>
 8010210:	f000 fa14 	bl	801063c <__sinit>
 8010214:	69ab      	ldr	r3, [r5, #24]
 8010216:	68ac      	ldr	r4, [r5, #8]
 8010218:	b913      	cbnz	r3, 8010220 <_puts_r+0x1c>
 801021a:	4628      	mov	r0, r5
 801021c:	f000 fa0e 	bl	801063c <__sinit>
 8010220:	4b23      	ldr	r3, [pc, #140]	; (80102b0 <_puts_r+0xac>)
 8010222:	429c      	cmp	r4, r3
 8010224:	d117      	bne.n	8010256 <_puts_r+0x52>
 8010226:	686c      	ldr	r4, [r5, #4]
 8010228:	89a3      	ldrh	r3, [r4, #12]
 801022a:	071b      	lsls	r3, r3, #28
 801022c:	d51d      	bpl.n	801026a <_puts_r+0x66>
 801022e:	6923      	ldr	r3, [r4, #16]
 8010230:	b1db      	cbz	r3, 801026a <_puts_r+0x66>
 8010232:	3e01      	subs	r6, #1
 8010234:	68a3      	ldr	r3, [r4, #8]
 8010236:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801023a:	3b01      	subs	r3, #1
 801023c:	60a3      	str	r3, [r4, #8]
 801023e:	b9e9      	cbnz	r1, 801027c <_puts_r+0x78>
 8010240:	2b00      	cmp	r3, #0
 8010242:	da2e      	bge.n	80102a2 <_puts_r+0x9e>
 8010244:	4622      	mov	r2, r4
 8010246:	210a      	movs	r1, #10
 8010248:	4628      	mov	r0, r5
 801024a:	f000 f847 	bl	80102dc <__swbuf_r>
 801024e:	3001      	adds	r0, #1
 8010250:	d011      	beq.n	8010276 <_puts_r+0x72>
 8010252:	200a      	movs	r0, #10
 8010254:	e011      	b.n	801027a <_puts_r+0x76>
 8010256:	4b17      	ldr	r3, [pc, #92]	; (80102b4 <_puts_r+0xb0>)
 8010258:	429c      	cmp	r4, r3
 801025a:	d101      	bne.n	8010260 <_puts_r+0x5c>
 801025c:	68ac      	ldr	r4, [r5, #8]
 801025e:	e7e3      	b.n	8010228 <_puts_r+0x24>
 8010260:	4b15      	ldr	r3, [pc, #84]	; (80102b8 <_puts_r+0xb4>)
 8010262:	429c      	cmp	r4, r3
 8010264:	bf08      	it	eq
 8010266:	68ec      	ldreq	r4, [r5, #12]
 8010268:	e7de      	b.n	8010228 <_puts_r+0x24>
 801026a:	4621      	mov	r1, r4
 801026c:	4628      	mov	r0, r5
 801026e:	f000 f887 	bl	8010380 <__swsetup_r>
 8010272:	2800      	cmp	r0, #0
 8010274:	d0dd      	beq.n	8010232 <_puts_r+0x2e>
 8010276:	f04f 30ff 	mov.w	r0, #4294967295
 801027a:	bd70      	pop	{r4, r5, r6, pc}
 801027c:	2b00      	cmp	r3, #0
 801027e:	da04      	bge.n	801028a <_puts_r+0x86>
 8010280:	69a2      	ldr	r2, [r4, #24]
 8010282:	429a      	cmp	r2, r3
 8010284:	dc06      	bgt.n	8010294 <_puts_r+0x90>
 8010286:	290a      	cmp	r1, #10
 8010288:	d004      	beq.n	8010294 <_puts_r+0x90>
 801028a:	6823      	ldr	r3, [r4, #0]
 801028c:	1c5a      	adds	r2, r3, #1
 801028e:	6022      	str	r2, [r4, #0]
 8010290:	7019      	strb	r1, [r3, #0]
 8010292:	e7cf      	b.n	8010234 <_puts_r+0x30>
 8010294:	4622      	mov	r2, r4
 8010296:	4628      	mov	r0, r5
 8010298:	f000 f820 	bl	80102dc <__swbuf_r>
 801029c:	3001      	adds	r0, #1
 801029e:	d1c9      	bne.n	8010234 <_puts_r+0x30>
 80102a0:	e7e9      	b.n	8010276 <_puts_r+0x72>
 80102a2:	6823      	ldr	r3, [r4, #0]
 80102a4:	200a      	movs	r0, #10
 80102a6:	1c5a      	adds	r2, r3, #1
 80102a8:	6022      	str	r2, [r4, #0]
 80102aa:	7018      	strb	r0, [r3, #0]
 80102ac:	e7e5      	b.n	801027a <_puts_r+0x76>
 80102ae:	bf00      	nop
 80102b0:	08011c7c 	.word	0x08011c7c
 80102b4:	08011c9c 	.word	0x08011c9c
 80102b8:	08011c5c 	.word	0x08011c5c

080102bc <puts>:
 80102bc:	4b02      	ldr	r3, [pc, #8]	; (80102c8 <puts+0xc>)
 80102be:	4601      	mov	r1, r0
 80102c0:	6818      	ldr	r0, [r3, #0]
 80102c2:	f7ff bf9f 	b.w	8010204 <_puts_r>
 80102c6:	bf00      	nop
 80102c8:	24000354 	.word	0x24000354

080102cc <strcpy>:
 80102cc:	4603      	mov	r3, r0
 80102ce:	f811 2b01 	ldrb.w	r2, [r1], #1
 80102d2:	f803 2b01 	strb.w	r2, [r3], #1
 80102d6:	2a00      	cmp	r2, #0
 80102d8:	d1f9      	bne.n	80102ce <strcpy+0x2>
 80102da:	4770      	bx	lr

080102dc <__swbuf_r>:
 80102dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80102de:	460e      	mov	r6, r1
 80102e0:	4614      	mov	r4, r2
 80102e2:	4605      	mov	r5, r0
 80102e4:	b118      	cbz	r0, 80102ee <__swbuf_r+0x12>
 80102e6:	6983      	ldr	r3, [r0, #24]
 80102e8:	b90b      	cbnz	r3, 80102ee <__swbuf_r+0x12>
 80102ea:	f000 f9a7 	bl	801063c <__sinit>
 80102ee:	4b21      	ldr	r3, [pc, #132]	; (8010374 <__swbuf_r+0x98>)
 80102f0:	429c      	cmp	r4, r3
 80102f2:	d12a      	bne.n	801034a <__swbuf_r+0x6e>
 80102f4:	686c      	ldr	r4, [r5, #4]
 80102f6:	69a3      	ldr	r3, [r4, #24]
 80102f8:	60a3      	str	r3, [r4, #8]
 80102fa:	89a3      	ldrh	r3, [r4, #12]
 80102fc:	071a      	lsls	r2, r3, #28
 80102fe:	d52e      	bpl.n	801035e <__swbuf_r+0x82>
 8010300:	6923      	ldr	r3, [r4, #16]
 8010302:	b363      	cbz	r3, 801035e <__swbuf_r+0x82>
 8010304:	6923      	ldr	r3, [r4, #16]
 8010306:	6820      	ldr	r0, [r4, #0]
 8010308:	1ac0      	subs	r0, r0, r3
 801030a:	6963      	ldr	r3, [r4, #20]
 801030c:	b2f6      	uxtb	r6, r6
 801030e:	4283      	cmp	r3, r0
 8010310:	4637      	mov	r7, r6
 8010312:	dc04      	bgt.n	801031e <__swbuf_r+0x42>
 8010314:	4621      	mov	r1, r4
 8010316:	4628      	mov	r0, r5
 8010318:	f000 f926 	bl	8010568 <_fflush_r>
 801031c:	bb28      	cbnz	r0, 801036a <__swbuf_r+0x8e>
 801031e:	68a3      	ldr	r3, [r4, #8]
 8010320:	3b01      	subs	r3, #1
 8010322:	60a3      	str	r3, [r4, #8]
 8010324:	6823      	ldr	r3, [r4, #0]
 8010326:	1c5a      	adds	r2, r3, #1
 8010328:	6022      	str	r2, [r4, #0]
 801032a:	701e      	strb	r6, [r3, #0]
 801032c:	6963      	ldr	r3, [r4, #20]
 801032e:	3001      	adds	r0, #1
 8010330:	4283      	cmp	r3, r0
 8010332:	d004      	beq.n	801033e <__swbuf_r+0x62>
 8010334:	89a3      	ldrh	r3, [r4, #12]
 8010336:	07db      	lsls	r3, r3, #31
 8010338:	d519      	bpl.n	801036e <__swbuf_r+0x92>
 801033a:	2e0a      	cmp	r6, #10
 801033c:	d117      	bne.n	801036e <__swbuf_r+0x92>
 801033e:	4621      	mov	r1, r4
 8010340:	4628      	mov	r0, r5
 8010342:	f000 f911 	bl	8010568 <_fflush_r>
 8010346:	b190      	cbz	r0, 801036e <__swbuf_r+0x92>
 8010348:	e00f      	b.n	801036a <__swbuf_r+0x8e>
 801034a:	4b0b      	ldr	r3, [pc, #44]	; (8010378 <__swbuf_r+0x9c>)
 801034c:	429c      	cmp	r4, r3
 801034e:	d101      	bne.n	8010354 <__swbuf_r+0x78>
 8010350:	68ac      	ldr	r4, [r5, #8]
 8010352:	e7d0      	b.n	80102f6 <__swbuf_r+0x1a>
 8010354:	4b09      	ldr	r3, [pc, #36]	; (801037c <__swbuf_r+0xa0>)
 8010356:	429c      	cmp	r4, r3
 8010358:	bf08      	it	eq
 801035a:	68ec      	ldreq	r4, [r5, #12]
 801035c:	e7cb      	b.n	80102f6 <__swbuf_r+0x1a>
 801035e:	4621      	mov	r1, r4
 8010360:	4628      	mov	r0, r5
 8010362:	f000 f80d 	bl	8010380 <__swsetup_r>
 8010366:	2800      	cmp	r0, #0
 8010368:	d0cc      	beq.n	8010304 <__swbuf_r+0x28>
 801036a:	f04f 37ff 	mov.w	r7, #4294967295
 801036e:	4638      	mov	r0, r7
 8010370:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010372:	bf00      	nop
 8010374:	08011c7c 	.word	0x08011c7c
 8010378:	08011c9c 	.word	0x08011c9c
 801037c:	08011c5c 	.word	0x08011c5c

08010380 <__swsetup_r>:
 8010380:	4b32      	ldr	r3, [pc, #200]	; (801044c <__swsetup_r+0xcc>)
 8010382:	b570      	push	{r4, r5, r6, lr}
 8010384:	681d      	ldr	r5, [r3, #0]
 8010386:	4606      	mov	r6, r0
 8010388:	460c      	mov	r4, r1
 801038a:	b125      	cbz	r5, 8010396 <__swsetup_r+0x16>
 801038c:	69ab      	ldr	r3, [r5, #24]
 801038e:	b913      	cbnz	r3, 8010396 <__swsetup_r+0x16>
 8010390:	4628      	mov	r0, r5
 8010392:	f000 f953 	bl	801063c <__sinit>
 8010396:	4b2e      	ldr	r3, [pc, #184]	; (8010450 <__swsetup_r+0xd0>)
 8010398:	429c      	cmp	r4, r3
 801039a:	d10f      	bne.n	80103bc <__swsetup_r+0x3c>
 801039c:	686c      	ldr	r4, [r5, #4]
 801039e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80103a2:	b29a      	uxth	r2, r3
 80103a4:	0715      	lsls	r5, r2, #28
 80103a6:	d42c      	bmi.n	8010402 <__swsetup_r+0x82>
 80103a8:	06d0      	lsls	r0, r2, #27
 80103aa:	d411      	bmi.n	80103d0 <__swsetup_r+0x50>
 80103ac:	2209      	movs	r2, #9
 80103ae:	6032      	str	r2, [r6, #0]
 80103b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80103b4:	81a3      	strh	r3, [r4, #12]
 80103b6:	f04f 30ff 	mov.w	r0, #4294967295
 80103ba:	e03e      	b.n	801043a <__swsetup_r+0xba>
 80103bc:	4b25      	ldr	r3, [pc, #148]	; (8010454 <__swsetup_r+0xd4>)
 80103be:	429c      	cmp	r4, r3
 80103c0:	d101      	bne.n	80103c6 <__swsetup_r+0x46>
 80103c2:	68ac      	ldr	r4, [r5, #8]
 80103c4:	e7eb      	b.n	801039e <__swsetup_r+0x1e>
 80103c6:	4b24      	ldr	r3, [pc, #144]	; (8010458 <__swsetup_r+0xd8>)
 80103c8:	429c      	cmp	r4, r3
 80103ca:	bf08      	it	eq
 80103cc:	68ec      	ldreq	r4, [r5, #12]
 80103ce:	e7e6      	b.n	801039e <__swsetup_r+0x1e>
 80103d0:	0751      	lsls	r1, r2, #29
 80103d2:	d512      	bpl.n	80103fa <__swsetup_r+0x7a>
 80103d4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80103d6:	b141      	cbz	r1, 80103ea <__swsetup_r+0x6a>
 80103d8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80103dc:	4299      	cmp	r1, r3
 80103de:	d002      	beq.n	80103e6 <__swsetup_r+0x66>
 80103e0:	4630      	mov	r0, r6
 80103e2:	f000 fa19 	bl	8010818 <_free_r>
 80103e6:	2300      	movs	r3, #0
 80103e8:	6363      	str	r3, [r4, #52]	; 0x34
 80103ea:	89a3      	ldrh	r3, [r4, #12]
 80103ec:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80103f0:	81a3      	strh	r3, [r4, #12]
 80103f2:	2300      	movs	r3, #0
 80103f4:	6063      	str	r3, [r4, #4]
 80103f6:	6923      	ldr	r3, [r4, #16]
 80103f8:	6023      	str	r3, [r4, #0]
 80103fa:	89a3      	ldrh	r3, [r4, #12]
 80103fc:	f043 0308 	orr.w	r3, r3, #8
 8010400:	81a3      	strh	r3, [r4, #12]
 8010402:	6923      	ldr	r3, [r4, #16]
 8010404:	b94b      	cbnz	r3, 801041a <__swsetup_r+0x9a>
 8010406:	89a3      	ldrh	r3, [r4, #12]
 8010408:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801040c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010410:	d003      	beq.n	801041a <__swsetup_r+0x9a>
 8010412:	4621      	mov	r1, r4
 8010414:	4630      	mov	r0, r6
 8010416:	f000 f9bf 	bl	8010798 <__smakebuf_r>
 801041a:	89a2      	ldrh	r2, [r4, #12]
 801041c:	f012 0301 	ands.w	r3, r2, #1
 8010420:	d00c      	beq.n	801043c <__swsetup_r+0xbc>
 8010422:	2300      	movs	r3, #0
 8010424:	60a3      	str	r3, [r4, #8]
 8010426:	6963      	ldr	r3, [r4, #20]
 8010428:	425b      	negs	r3, r3
 801042a:	61a3      	str	r3, [r4, #24]
 801042c:	6923      	ldr	r3, [r4, #16]
 801042e:	b953      	cbnz	r3, 8010446 <__swsetup_r+0xc6>
 8010430:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010434:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8010438:	d1ba      	bne.n	80103b0 <__swsetup_r+0x30>
 801043a:	bd70      	pop	{r4, r5, r6, pc}
 801043c:	0792      	lsls	r2, r2, #30
 801043e:	bf58      	it	pl
 8010440:	6963      	ldrpl	r3, [r4, #20]
 8010442:	60a3      	str	r3, [r4, #8]
 8010444:	e7f2      	b.n	801042c <__swsetup_r+0xac>
 8010446:	2000      	movs	r0, #0
 8010448:	e7f7      	b.n	801043a <__swsetup_r+0xba>
 801044a:	bf00      	nop
 801044c:	24000354 	.word	0x24000354
 8010450:	08011c7c 	.word	0x08011c7c
 8010454:	08011c9c 	.word	0x08011c9c
 8010458:	08011c5c 	.word	0x08011c5c

0801045c <__sflush_r>:
 801045c:	898a      	ldrh	r2, [r1, #12]
 801045e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010462:	4605      	mov	r5, r0
 8010464:	0710      	lsls	r0, r2, #28
 8010466:	460c      	mov	r4, r1
 8010468:	d458      	bmi.n	801051c <__sflush_r+0xc0>
 801046a:	684b      	ldr	r3, [r1, #4]
 801046c:	2b00      	cmp	r3, #0
 801046e:	dc05      	bgt.n	801047c <__sflush_r+0x20>
 8010470:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8010472:	2b00      	cmp	r3, #0
 8010474:	dc02      	bgt.n	801047c <__sflush_r+0x20>
 8010476:	2000      	movs	r0, #0
 8010478:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801047c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801047e:	2e00      	cmp	r6, #0
 8010480:	d0f9      	beq.n	8010476 <__sflush_r+0x1a>
 8010482:	2300      	movs	r3, #0
 8010484:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8010488:	682f      	ldr	r7, [r5, #0]
 801048a:	6a21      	ldr	r1, [r4, #32]
 801048c:	602b      	str	r3, [r5, #0]
 801048e:	d032      	beq.n	80104f6 <__sflush_r+0x9a>
 8010490:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8010492:	89a3      	ldrh	r3, [r4, #12]
 8010494:	075a      	lsls	r2, r3, #29
 8010496:	d505      	bpl.n	80104a4 <__sflush_r+0x48>
 8010498:	6863      	ldr	r3, [r4, #4]
 801049a:	1ac0      	subs	r0, r0, r3
 801049c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801049e:	b10b      	cbz	r3, 80104a4 <__sflush_r+0x48>
 80104a0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80104a2:	1ac0      	subs	r0, r0, r3
 80104a4:	2300      	movs	r3, #0
 80104a6:	4602      	mov	r2, r0
 80104a8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80104aa:	6a21      	ldr	r1, [r4, #32]
 80104ac:	4628      	mov	r0, r5
 80104ae:	47b0      	blx	r6
 80104b0:	1c43      	adds	r3, r0, #1
 80104b2:	89a3      	ldrh	r3, [r4, #12]
 80104b4:	d106      	bne.n	80104c4 <__sflush_r+0x68>
 80104b6:	6829      	ldr	r1, [r5, #0]
 80104b8:	291d      	cmp	r1, #29
 80104ba:	d848      	bhi.n	801054e <__sflush_r+0xf2>
 80104bc:	4a29      	ldr	r2, [pc, #164]	; (8010564 <__sflush_r+0x108>)
 80104be:	40ca      	lsrs	r2, r1
 80104c0:	07d6      	lsls	r6, r2, #31
 80104c2:	d544      	bpl.n	801054e <__sflush_r+0xf2>
 80104c4:	2200      	movs	r2, #0
 80104c6:	6062      	str	r2, [r4, #4]
 80104c8:	04d9      	lsls	r1, r3, #19
 80104ca:	6922      	ldr	r2, [r4, #16]
 80104cc:	6022      	str	r2, [r4, #0]
 80104ce:	d504      	bpl.n	80104da <__sflush_r+0x7e>
 80104d0:	1c42      	adds	r2, r0, #1
 80104d2:	d101      	bne.n	80104d8 <__sflush_r+0x7c>
 80104d4:	682b      	ldr	r3, [r5, #0]
 80104d6:	b903      	cbnz	r3, 80104da <__sflush_r+0x7e>
 80104d8:	6560      	str	r0, [r4, #84]	; 0x54
 80104da:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80104dc:	602f      	str	r7, [r5, #0]
 80104de:	2900      	cmp	r1, #0
 80104e0:	d0c9      	beq.n	8010476 <__sflush_r+0x1a>
 80104e2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80104e6:	4299      	cmp	r1, r3
 80104e8:	d002      	beq.n	80104f0 <__sflush_r+0x94>
 80104ea:	4628      	mov	r0, r5
 80104ec:	f000 f994 	bl	8010818 <_free_r>
 80104f0:	2000      	movs	r0, #0
 80104f2:	6360      	str	r0, [r4, #52]	; 0x34
 80104f4:	e7c0      	b.n	8010478 <__sflush_r+0x1c>
 80104f6:	2301      	movs	r3, #1
 80104f8:	4628      	mov	r0, r5
 80104fa:	47b0      	blx	r6
 80104fc:	1c41      	adds	r1, r0, #1
 80104fe:	d1c8      	bne.n	8010492 <__sflush_r+0x36>
 8010500:	682b      	ldr	r3, [r5, #0]
 8010502:	2b00      	cmp	r3, #0
 8010504:	d0c5      	beq.n	8010492 <__sflush_r+0x36>
 8010506:	2b1d      	cmp	r3, #29
 8010508:	d001      	beq.n	801050e <__sflush_r+0xb2>
 801050a:	2b16      	cmp	r3, #22
 801050c:	d101      	bne.n	8010512 <__sflush_r+0xb6>
 801050e:	602f      	str	r7, [r5, #0]
 8010510:	e7b1      	b.n	8010476 <__sflush_r+0x1a>
 8010512:	89a3      	ldrh	r3, [r4, #12]
 8010514:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010518:	81a3      	strh	r3, [r4, #12]
 801051a:	e7ad      	b.n	8010478 <__sflush_r+0x1c>
 801051c:	690f      	ldr	r7, [r1, #16]
 801051e:	2f00      	cmp	r7, #0
 8010520:	d0a9      	beq.n	8010476 <__sflush_r+0x1a>
 8010522:	0793      	lsls	r3, r2, #30
 8010524:	680e      	ldr	r6, [r1, #0]
 8010526:	bf08      	it	eq
 8010528:	694b      	ldreq	r3, [r1, #20]
 801052a:	600f      	str	r7, [r1, #0]
 801052c:	bf18      	it	ne
 801052e:	2300      	movne	r3, #0
 8010530:	eba6 0807 	sub.w	r8, r6, r7
 8010534:	608b      	str	r3, [r1, #8]
 8010536:	f1b8 0f00 	cmp.w	r8, #0
 801053a:	dd9c      	ble.n	8010476 <__sflush_r+0x1a>
 801053c:	4643      	mov	r3, r8
 801053e:	463a      	mov	r2, r7
 8010540:	6a21      	ldr	r1, [r4, #32]
 8010542:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8010544:	4628      	mov	r0, r5
 8010546:	47b0      	blx	r6
 8010548:	2800      	cmp	r0, #0
 801054a:	dc06      	bgt.n	801055a <__sflush_r+0xfe>
 801054c:	89a3      	ldrh	r3, [r4, #12]
 801054e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010552:	81a3      	strh	r3, [r4, #12]
 8010554:	f04f 30ff 	mov.w	r0, #4294967295
 8010558:	e78e      	b.n	8010478 <__sflush_r+0x1c>
 801055a:	4407      	add	r7, r0
 801055c:	eba8 0800 	sub.w	r8, r8, r0
 8010560:	e7e9      	b.n	8010536 <__sflush_r+0xda>
 8010562:	bf00      	nop
 8010564:	20400001 	.word	0x20400001

08010568 <_fflush_r>:
 8010568:	b538      	push	{r3, r4, r5, lr}
 801056a:	690b      	ldr	r3, [r1, #16]
 801056c:	4605      	mov	r5, r0
 801056e:	460c      	mov	r4, r1
 8010570:	b1db      	cbz	r3, 80105aa <_fflush_r+0x42>
 8010572:	b118      	cbz	r0, 801057c <_fflush_r+0x14>
 8010574:	6983      	ldr	r3, [r0, #24]
 8010576:	b90b      	cbnz	r3, 801057c <_fflush_r+0x14>
 8010578:	f000 f860 	bl	801063c <__sinit>
 801057c:	4b0c      	ldr	r3, [pc, #48]	; (80105b0 <_fflush_r+0x48>)
 801057e:	429c      	cmp	r4, r3
 8010580:	d109      	bne.n	8010596 <_fflush_r+0x2e>
 8010582:	686c      	ldr	r4, [r5, #4]
 8010584:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010588:	b17b      	cbz	r3, 80105aa <_fflush_r+0x42>
 801058a:	4621      	mov	r1, r4
 801058c:	4628      	mov	r0, r5
 801058e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010592:	f7ff bf63 	b.w	801045c <__sflush_r>
 8010596:	4b07      	ldr	r3, [pc, #28]	; (80105b4 <_fflush_r+0x4c>)
 8010598:	429c      	cmp	r4, r3
 801059a:	d101      	bne.n	80105a0 <_fflush_r+0x38>
 801059c:	68ac      	ldr	r4, [r5, #8]
 801059e:	e7f1      	b.n	8010584 <_fflush_r+0x1c>
 80105a0:	4b05      	ldr	r3, [pc, #20]	; (80105b8 <_fflush_r+0x50>)
 80105a2:	429c      	cmp	r4, r3
 80105a4:	bf08      	it	eq
 80105a6:	68ec      	ldreq	r4, [r5, #12]
 80105a8:	e7ec      	b.n	8010584 <_fflush_r+0x1c>
 80105aa:	2000      	movs	r0, #0
 80105ac:	bd38      	pop	{r3, r4, r5, pc}
 80105ae:	bf00      	nop
 80105b0:	08011c7c 	.word	0x08011c7c
 80105b4:	08011c9c 	.word	0x08011c9c
 80105b8:	08011c5c 	.word	0x08011c5c

080105bc <std>:
 80105bc:	2300      	movs	r3, #0
 80105be:	b510      	push	{r4, lr}
 80105c0:	4604      	mov	r4, r0
 80105c2:	e9c0 3300 	strd	r3, r3, [r0]
 80105c6:	6083      	str	r3, [r0, #8]
 80105c8:	8181      	strh	r1, [r0, #12]
 80105ca:	6643      	str	r3, [r0, #100]	; 0x64
 80105cc:	81c2      	strh	r2, [r0, #14]
 80105ce:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80105d2:	6183      	str	r3, [r0, #24]
 80105d4:	4619      	mov	r1, r3
 80105d6:	2208      	movs	r2, #8
 80105d8:	305c      	adds	r0, #92	; 0x5c
 80105da:	f7ff fdde 	bl	801019a <memset>
 80105de:	4b05      	ldr	r3, [pc, #20]	; (80105f4 <std+0x38>)
 80105e0:	6263      	str	r3, [r4, #36]	; 0x24
 80105e2:	4b05      	ldr	r3, [pc, #20]	; (80105f8 <std+0x3c>)
 80105e4:	62a3      	str	r3, [r4, #40]	; 0x28
 80105e6:	4b05      	ldr	r3, [pc, #20]	; (80105fc <std+0x40>)
 80105e8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80105ea:	4b05      	ldr	r3, [pc, #20]	; (8010600 <std+0x44>)
 80105ec:	6224      	str	r4, [r4, #32]
 80105ee:	6323      	str	r3, [r4, #48]	; 0x30
 80105f0:	bd10      	pop	{r4, pc}
 80105f2:	bf00      	nop
 80105f4:	08010f85 	.word	0x08010f85
 80105f8:	08010fa7 	.word	0x08010fa7
 80105fc:	08010fdf 	.word	0x08010fdf
 8010600:	08011003 	.word	0x08011003

08010604 <_cleanup_r>:
 8010604:	4901      	ldr	r1, [pc, #4]	; (801060c <_cleanup_r+0x8>)
 8010606:	f000 b885 	b.w	8010714 <_fwalk_reent>
 801060a:	bf00      	nop
 801060c:	08010569 	.word	0x08010569

08010610 <__sfmoreglue>:
 8010610:	b570      	push	{r4, r5, r6, lr}
 8010612:	1e4a      	subs	r2, r1, #1
 8010614:	2568      	movs	r5, #104	; 0x68
 8010616:	4355      	muls	r5, r2
 8010618:	460e      	mov	r6, r1
 801061a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801061e:	f000 f949 	bl	80108b4 <_malloc_r>
 8010622:	4604      	mov	r4, r0
 8010624:	b140      	cbz	r0, 8010638 <__sfmoreglue+0x28>
 8010626:	2100      	movs	r1, #0
 8010628:	e9c0 1600 	strd	r1, r6, [r0]
 801062c:	300c      	adds	r0, #12
 801062e:	60a0      	str	r0, [r4, #8]
 8010630:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8010634:	f7ff fdb1 	bl	801019a <memset>
 8010638:	4620      	mov	r0, r4
 801063a:	bd70      	pop	{r4, r5, r6, pc}

0801063c <__sinit>:
 801063c:	6983      	ldr	r3, [r0, #24]
 801063e:	b510      	push	{r4, lr}
 8010640:	4604      	mov	r4, r0
 8010642:	bb33      	cbnz	r3, 8010692 <__sinit+0x56>
 8010644:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8010648:	6503      	str	r3, [r0, #80]	; 0x50
 801064a:	4b12      	ldr	r3, [pc, #72]	; (8010694 <__sinit+0x58>)
 801064c:	4a12      	ldr	r2, [pc, #72]	; (8010698 <__sinit+0x5c>)
 801064e:	681b      	ldr	r3, [r3, #0]
 8010650:	6282      	str	r2, [r0, #40]	; 0x28
 8010652:	4298      	cmp	r0, r3
 8010654:	bf04      	itt	eq
 8010656:	2301      	moveq	r3, #1
 8010658:	6183      	streq	r3, [r0, #24]
 801065a:	f000 f81f 	bl	801069c <__sfp>
 801065e:	6060      	str	r0, [r4, #4]
 8010660:	4620      	mov	r0, r4
 8010662:	f000 f81b 	bl	801069c <__sfp>
 8010666:	60a0      	str	r0, [r4, #8]
 8010668:	4620      	mov	r0, r4
 801066a:	f000 f817 	bl	801069c <__sfp>
 801066e:	2200      	movs	r2, #0
 8010670:	60e0      	str	r0, [r4, #12]
 8010672:	2104      	movs	r1, #4
 8010674:	6860      	ldr	r0, [r4, #4]
 8010676:	f7ff ffa1 	bl	80105bc <std>
 801067a:	2201      	movs	r2, #1
 801067c:	2109      	movs	r1, #9
 801067e:	68a0      	ldr	r0, [r4, #8]
 8010680:	f7ff ff9c 	bl	80105bc <std>
 8010684:	2202      	movs	r2, #2
 8010686:	2112      	movs	r1, #18
 8010688:	68e0      	ldr	r0, [r4, #12]
 801068a:	f7ff ff97 	bl	80105bc <std>
 801068e:	2301      	movs	r3, #1
 8010690:	61a3      	str	r3, [r4, #24]
 8010692:	bd10      	pop	{r4, pc}
 8010694:	08011c58 	.word	0x08011c58
 8010698:	08010605 	.word	0x08010605

0801069c <__sfp>:
 801069c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801069e:	4b1b      	ldr	r3, [pc, #108]	; (801070c <__sfp+0x70>)
 80106a0:	681e      	ldr	r6, [r3, #0]
 80106a2:	69b3      	ldr	r3, [r6, #24]
 80106a4:	4607      	mov	r7, r0
 80106a6:	b913      	cbnz	r3, 80106ae <__sfp+0x12>
 80106a8:	4630      	mov	r0, r6
 80106aa:	f7ff ffc7 	bl	801063c <__sinit>
 80106ae:	3648      	adds	r6, #72	; 0x48
 80106b0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80106b4:	3b01      	subs	r3, #1
 80106b6:	d503      	bpl.n	80106c0 <__sfp+0x24>
 80106b8:	6833      	ldr	r3, [r6, #0]
 80106ba:	b133      	cbz	r3, 80106ca <__sfp+0x2e>
 80106bc:	6836      	ldr	r6, [r6, #0]
 80106be:	e7f7      	b.n	80106b0 <__sfp+0x14>
 80106c0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80106c4:	b16d      	cbz	r5, 80106e2 <__sfp+0x46>
 80106c6:	3468      	adds	r4, #104	; 0x68
 80106c8:	e7f4      	b.n	80106b4 <__sfp+0x18>
 80106ca:	2104      	movs	r1, #4
 80106cc:	4638      	mov	r0, r7
 80106ce:	f7ff ff9f 	bl	8010610 <__sfmoreglue>
 80106d2:	6030      	str	r0, [r6, #0]
 80106d4:	2800      	cmp	r0, #0
 80106d6:	d1f1      	bne.n	80106bc <__sfp+0x20>
 80106d8:	230c      	movs	r3, #12
 80106da:	603b      	str	r3, [r7, #0]
 80106dc:	4604      	mov	r4, r0
 80106de:	4620      	mov	r0, r4
 80106e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80106e2:	4b0b      	ldr	r3, [pc, #44]	; (8010710 <__sfp+0x74>)
 80106e4:	6665      	str	r5, [r4, #100]	; 0x64
 80106e6:	e9c4 5500 	strd	r5, r5, [r4]
 80106ea:	60a5      	str	r5, [r4, #8]
 80106ec:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80106f0:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80106f4:	2208      	movs	r2, #8
 80106f6:	4629      	mov	r1, r5
 80106f8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80106fc:	f7ff fd4d 	bl	801019a <memset>
 8010700:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8010704:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8010708:	e7e9      	b.n	80106de <__sfp+0x42>
 801070a:	bf00      	nop
 801070c:	08011c58 	.word	0x08011c58
 8010710:	ffff0001 	.word	0xffff0001

08010714 <_fwalk_reent>:
 8010714:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010718:	4680      	mov	r8, r0
 801071a:	4689      	mov	r9, r1
 801071c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8010720:	2600      	movs	r6, #0
 8010722:	b914      	cbnz	r4, 801072a <_fwalk_reent+0x16>
 8010724:	4630      	mov	r0, r6
 8010726:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801072a:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 801072e:	3f01      	subs	r7, #1
 8010730:	d501      	bpl.n	8010736 <_fwalk_reent+0x22>
 8010732:	6824      	ldr	r4, [r4, #0]
 8010734:	e7f5      	b.n	8010722 <_fwalk_reent+0xe>
 8010736:	89ab      	ldrh	r3, [r5, #12]
 8010738:	2b01      	cmp	r3, #1
 801073a:	d907      	bls.n	801074c <_fwalk_reent+0x38>
 801073c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8010740:	3301      	adds	r3, #1
 8010742:	d003      	beq.n	801074c <_fwalk_reent+0x38>
 8010744:	4629      	mov	r1, r5
 8010746:	4640      	mov	r0, r8
 8010748:	47c8      	blx	r9
 801074a:	4306      	orrs	r6, r0
 801074c:	3568      	adds	r5, #104	; 0x68
 801074e:	e7ee      	b.n	801072e <_fwalk_reent+0x1a>

08010750 <__swhatbuf_r>:
 8010750:	b570      	push	{r4, r5, r6, lr}
 8010752:	460e      	mov	r6, r1
 8010754:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010758:	2900      	cmp	r1, #0
 801075a:	b096      	sub	sp, #88	; 0x58
 801075c:	4614      	mov	r4, r2
 801075e:	461d      	mov	r5, r3
 8010760:	da07      	bge.n	8010772 <__swhatbuf_r+0x22>
 8010762:	2300      	movs	r3, #0
 8010764:	602b      	str	r3, [r5, #0]
 8010766:	89b3      	ldrh	r3, [r6, #12]
 8010768:	061a      	lsls	r2, r3, #24
 801076a:	d410      	bmi.n	801078e <__swhatbuf_r+0x3e>
 801076c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010770:	e00e      	b.n	8010790 <__swhatbuf_r+0x40>
 8010772:	466a      	mov	r2, sp
 8010774:	f000 fc6c 	bl	8011050 <_fstat_r>
 8010778:	2800      	cmp	r0, #0
 801077a:	dbf2      	blt.n	8010762 <__swhatbuf_r+0x12>
 801077c:	9a01      	ldr	r2, [sp, #4]
 801077e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8010782:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8010786:	425a      	negs	r2, r3
 8010788:	415a      	adcs	r2, r3
 801078a:	602a      	str	r2, [r5, #0]
 801078c:	e7ee      	b.n	801076c <__swhatbuf_r+0x1c>
 801078e:	2340      	movs	r3, #64	; 0x40
 8010790:	2000      	movs	r0, #0
 8010792:	6023      	str	r3, [r4, #0]
 8010794:	b016      	add	sp, #88	; 0x58
 8010796:	bd70      	pop	{r4, r5, r6, pc}

08010798 <__smakebuf_r>:
 8010798:	898b      	ldrh	r3, [r1, #12]
 801079a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801079c:	079d      	lsls	r5, r3, #30
 801079e:	4606      	mov	r6, r0
 80107a0:	460c      	mov	r4, r1
 80107a2:	d507      	bpl.n	80107b4 <__smakebuf_r+0x1c>
 80107a4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80107a8:	6023      	str	r3, [r4, #0]
 80107aa:	6123      	str	r3, [r4, #16]
 80107ac:	2301      	movs	r3, #1
 80107ae:	6163      	str	r3, [r4, #20]
 80107b0:	b002      	add	sp, #8
 80107b2:	bd70      	pop	{r4, r5, r6, pc}
 80107b4:	ab01      	add	r3, sp, #4
 80107b6:	466a      	mov	r2, sp
 80107b8:	f7ff ffca 	bl	8010750 <__swhatbuf_r>
 80107bc:	9900      	ldr	r1, [sp, #0]
 80107be:	4605      	mov	r5, r0
 80107c0:	4630      	mov	r0, r6
 80107c2:	f000 f877 	bl	80108b4 <_malloc_r>
 80107c6:	b948      	cbnz	r0, 80107dc <__smakebuf_r+0x44>
 80107c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80107cc:	059a      	lsls	r2, r3, #22
 80107ce:	d4ef      	bmi.n	80107b0 <__smakebuf_r+0x18>
 80107d0:	f023 0303 	bic.w	r3, r3, #3
 80107d4:	f043 0302 	orr.w	r3, r3, #2
 80107d8:	81a3      	strh	r3, [r4, #12]
 80107da:	e7e3      	b.n	80107a4 <__smakebuf_r+0xc>
 80107dc:	4b0d      	ldr	r3, [pc, #52]	; (8010814 <__smakebuf_r+0x7c>)
 80107de:	62b3      	str	r3, [r6, #40]	; 0x28
 80107e0:	89a3      	ldrh	r3, [r4, #12]
 80107e2:	6020      	str	r0, [r4, #0]
 80107e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80107e8:	81a3      	strh	r3, [r4, #12]
 80107ea:	9b00      	ldr	r3, [sp, #0]
 80107ec:	6163      	str	r3, [r4, #20]
 80107ee:	9b01      	ldr	r3, [sp, #4]
 80107f0:	6120      	str	r0, [r4, #16]
 80107f2:	b15b      	cbz	r3, 801080c <__smakebuf_r+0x74>
 80107f4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80107f8:	4630      	mov	r0, r6
 80107fa:	f000 fc3b 	bl	8011074 <_isatty_r>
 80107fe:	b128      	cbz	r0, 801080c <__smakebuf_r+0x74>
 8010800:	89a3      	ldrh	r3, [r4, #12]
 8010802:	f023 0303 	bic.w	r3, r3, #3
 8010806:	f043 0301 	orr.w	r3, r3, #1
 801080a:	81a3      	strh	r3, [r4, #12]
 801080c:	89a3      	ldrh	r3, [r4, #12]
 801080e:	431d      	orrs	r5, r3
 8010810:	81a5      	strh	r5, [r4, #12]
 8010812:	e7cd      	b.n	80107b0 <__smakebuf_r+0x18>
 8010814:	08010605 	.word	0x08010605

08010818 <_free_r>:
 8010818:	b538      	push	{r3, r4, r5, lr}
 801081a:	4605      	mov	r5, r0
 801081c:	2900      	cmp	r1, #0
 801081e:	d045      	beq.n	80108ac <_free_r+0x94>
 8010820:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010824:	1f0c      	subs	r4, r1, #4
 8010826:	2b00      	cmp	r3, #0
 8010828:	bfb8      	it	lt
 801082a:	18e4      	addlt	r4, r4, r3
 801082c:	f000 fc44 	bl	80110b8 <__malloc_lock>
 8010830:	4a1f      	ldr	r2, [pc, #124]	; (80108b0 <_free_r+0x98>)
 8010832:	6813      	ldr	r3, [r2, #0]
 8010834:	4610      	mov	r0, r2
 8010836:	b933      	cbnz	r3, 8010846 <_free_r+0x2e>
 8010838:	6063      	str	r3, [r4, #4]
 801083a:	6014      	str	r4, [r2, #0]
 801083c:	4628      	mov	r0, r5
 801083e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010842:	f000 bc3a 	b.w	80110ba <__malloc_unlock>
 8010846:	42a3      	cmp	r3, r4
 8010848:	d90c      	bls.n	8010864 <_free_r+0x4c>
 801084a:	6821      	ldr	r1, [r4, #0]
 801084c:	1862      	adds	r2, r4, r1
 801084e:	4293      	cmp	r3, r2
 8010850:	bf04      	itt	eq
 8010852:	681a      	ldreq	r2, [r3, #0]
 8010854:	685b      	ldreq	r3, [r3, #4]
 8010856:	6063      	str	r3, [r4, #4]
 8010858:	bf04      	itt	eq
 801085a:	1852      	addeq	r2, r2, r1
 801085c:	6022      	streq	r2, [r4, #0]
 801085e:	6004      	str	r4, [r0, #0]
 8010860:	e7ec      	b.n	801083c <_free_r+0x24>
 8010862:	4613      	mov	r3, r2
 8010864:	685a      	ldr	r2, [r3, #4]
 8010866:	b10a      	cbz	r2, 801086c <_free_r+0x54>
 8010868:	42a2      	cmp	r2, r4
 801086a:	d9fa      	bls.n	8010862 <_free_r+0x4a>
 801086c:	6819      	ldr	r1, [r3, #0]
 801086e:	1858      	adds	r0, r3, r1
 8010870:	42a0      	cmp	r0, r4
 8010872:	d10b      	bne.n	801088c <_free_r+0x74>
 8010874:	6820      	ldr	r0, [r4, #0]
 8010876:	4401      	add	r1, r0
 8010878:	1858      	adds	r0, r3, r1
 801087a:	4282      	cmp	r2, r0
 801087c:	6019      	str	r1, [r3, #0]
 801087e:	d1dd      	bne.n	801083c <_free_r+0x24>
 8010880:	6810      	ldr	r0, [r2, #0]
 8010882:	6852      	ldr	r2, [r2, #4]
 8010884:	605a      	str	r2, [r3, #4]
 8010886:	4401      	add	r1, r0
 8010888:	6019      	str	r1, [r3, #0]
 801088a:	e7d7      	b.n	801083c <_free_r+0x24>
 801088c:	d902      	bls.n	8010894 <_free_r+0x7c>
 801088e:	230c      	movs	r3, #12
 8010890:	602b      	str	r3, [r5, #0]
 8010892:	e7d3      	b.n	801083c <_free_r+0x24>
 8010894:	6820      	ldr	r0, [r4, #0]
 8010896:	1821      	adds	r1, r4, r0
 8010898:	428a      	cmp	r2, r1
 801089a:	bf04      	itt	eq
 801089c:	6811      	ldreq	r1, [r2, #0]
 801089e:	6852      	ldreq	r2, [r2, #4]
 80108a0:	6062      	str	r2, [r4, #4]
 80108a2:	bf04      	itt	eq
 80108a4:	1809      	addeq	r1, r1, r0
 80108a6:	6021      	streq	r1, [r4, #0]
 80108a8:	605c      	str	r4, [r3, #4]
 80108aa:	e7c7      	b.n	801083c <_free_r+0x24>
 80108ac:	bd38      	pop	{r3, r4, r5, pc}
 80108ae:	bf00      	nop
 80108b0:	24056bc0 	.word	0x24056bc0

080108b4 <_malloc_r>:
 80108b4:	b570      	push	{r4, r5, r6, lr}
 80108b6:	1ccd      	adds	r5, r1, #3
 80108b8:	f025 0503 	bic.w	r5, r5, #3
 80108bc:	3508      	adds	r5, #8
 80108be:	2d0c      	cmp	r5, #12
 80108c0:	bf38      	it	cc
 80108c2:	250c      	movcc	r5, #12
 80108c4:	2d00      	cmp	r5, #0
 80108c6:	4606      	mov	r6, r0
 80108c8:	db01      	blt.n	80108ce <_malloc_r+0x1a>
 80108ca:	42a9      	cmp	r1, r5
 80108cc:	d903      	bls.n	80108d6 <_malloc_r+0x22>
 80108ce:	230c      	movs	r3, #12
 80108d0:	6033      	str	r3, [r6, #0]
 80108d2:	2000      	movs	r0, #0
 80108d4:	bd70      	pop	{r4, r5, r6, pc}
 80108d6:	f000 fbef 	bl	80110b8 <__malloc_lock>
 80108da:	4a21      	ldr	r2, [pc, #132]	; (8010960 <_malloc_r+0xac>)
 80108dc:	6814      	ldr	r4, [r2, #0]
 80108de:	4621      	mov	r1, r4
 80108e0:	b991      	cbnz	r1, 8010908 <_malloc_r+0x54>
 80108e2:	4c20      	ldr	r4, [pc, #128]	; (8010964 <_malloc_r+0xb0>)
 80108e4:	6823      	ldr	r3, [r4, #0]
 80108e6:	b91b      	cbnz	r3, 80108f0 <_malloc_r+0x3c>
 80108e8:	4630      	mov	r0, r6
 80108ea:	f000 fb3b 	bl	8010f64 <_sbrk_r>
 80108ee:	6020      	str	r0, [r4, #0]
 80108f0:	4629      	mov	r1, r5
 80108f2:	4630      	mov	r0, r6
 80108f4:	f000 fb36 	bl	8010f64 <_sbrk_r>
 80108f8:	1c43      	adds	r3, r0, #1
 80108fa:	d124      	bne.n	8010946 <_malloc_r+0x92>
 80108fc:	230c      	movs	r3, #12
 80108fe:	6033      	str	r3, [r6, #0]
 8010900:	4630      	mov	r0, r6
 8010902:	f000 fbda 	bl	80110ba <__malloc_unlock>
 8010906:	e7e4      	b.n	80108d2 <_malloc_r+0x1e>
 8010908:	680b      	ldr	r3, [r1, #0]
 801090a:	1b5b      	subs	r3, r3, r5
 801090c:	d418      	bmi.n	8010940 <_malloc_r+0x8c>
 801090e:	2b0b      	cmp	r3, #11
 8010910:	d90f      	bls.n	8010932 <_malloc_r+0x7e>
 8010912:	600b      	str	r3, [r1, #0]
 8010914:	50cd      	str	r5, [r1, r3]
 8010916:	18cc      	adds	r4, r1, r3
 8010918:	4630      	mov	r0, r6
 801091a:	f000 fbce 	bl	80110ba <__malloc_unlock>
 801091e:	f104 000b 	add.w	r0, r4, #11
 8010922:	1d23      	adds	r3, r4, #4
 8010924:	f020 0007 	bic.w	r0, r0, #7
 8010928:	1ac3      	subs	r3, r0, r3
 801092a:	d0d3      	beq.n	80108d4 <_malloc_r+0x20>
 801092c:	425a      	negs	r2, r3
 801092e:	50e2      	str	r2, [r4, r3]
 8010930:	e7d0      	b.n	80108d4 <_malloc_r+0x20>
 8010932:	428c      	cmp	r4, r1
 8010934:	684b      	ldr	r3, [r1, #4]
 8010936:	bf16      	itet	ne
 8010938:	6063      	strne	r3, [r4, #4]
 801093a:	6013      	streq	r3, [r2, #0]
 801093c:	460c      	movne	r4, r1
 801093e:	e7eb      	b.n	8010918 <_malloc_r+0x64>
 8010940:	460c      	mov	r4, r1
 8010942:	6849      	ldr	r1, [r1, #4]
 8010944:	e7cc      	b.n	80108e0 <_malloc_r+0x2c>
 8010946:	1cc4      	adds	r4, r0, #3
 8010948:	f024 0403 	bic.w	r4, r4, #3
 801094c:	42a0      	cmp	r0, r4
 801094e:	d005      	beq.n	801095c <_malloc_r+0xa8>
 8010950:	1a21      	subs	r1, r4, r0
 8010952:	4630      	mov	r0, r6
 8010954:	f000 fb06 	bl	8010f64 <_sbrk_r>
 8010958:	3001      	adds	r0, #1
 801095a:	d0cf      	beq.n	80108fc <_malloc_r+0x48>
 801095c:	6025      	str	r5, [r4, #0]
 801095e:	e7db      	b.n	8010918 <_malloc_r+0x64>
 8010960:	24056bc0 	.word	0x24056bc0
 8010964:	24056bc4 	.word	0x24056bc4

08010968 <__sfputc_r>:
 8010968:	6893      	ldr	r3, [r2, #8]
 801096a:	3b01      	subs	r3, #1
 801096c:	2b00      	cmp	r3, #0
 801096e:	b410      	push	{r4}
 8010970:	6093      	str	r3, [r2, #8]
 8010972:	da08      	bge.n	8010986 <__sfputc_r+0x1e>
 8010974:	6994      	ldr	r4, [r2, #24]
 8010976:	42a3      	cmp	r3, r4
 8010978:	db01      	blt.n	801097e <__sfputc_r+0x16>
 801097a:	290a      	cmp	r1, #10
 801097c:	d103      	bne.n	8010986 <__sfputc_r+0x1e>
 801097e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010982:	f7ff bcab 	b.w	80102dc <__swbuf_r>
 8010986:	6813      	ldr	r3, [r2, #0]
 8010988:	1c58      	adds	r0, r3, #1
 801098a:	6010      	str	r0, [r2, #0]
 801098c:	7019      	strb	r1, [r3, #0]
 801098e:	4608      	mov	r0, r1
 8010990:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010994:	4770      	bx	lr

08010996 <__sfputs_r>:
 8010996:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010998:	4606      	mov	r6, r0
 801099a:	460f      	mov	r7, r1
 801099c:	4614      	mov	r4, r2
 801099e:	18d5      	adds	r5, r2, r3
 80109a0:	42ac      	cmp	r4, r5
 80109a2:	d101      	bne.n	80109a8 <__sfputs_r+0x12>
 80109a4:	2000      	movs	r0, #0
 80109a6:	e007      	b.n	80109b8 <__sfputs_r+0x22>
 80109a8:	463a      	mov	r2, r7
 80109aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80109ae:	4630      	mov	r0, r6
 80109b0:	f7ff ffda 	bl	8010968 <__sfputc_r>
 80109b4:	1c43      	adds	r3, r0, #1
 80109b6:	d1f3      	bne.n	80109a0 <__sfputs_r+0xa>
 80109b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080109bc <_vfiprintf_r>:
 80109bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80109c0:	460c      	mov	r4, r1
 80109c2:	b09d      	sub	sp, #116	; 0x74
 80109c4:	4617      	mov	r7, r2
 80109c6:	461d      	mov	r5, r3
 80109c8:	4606      	mov	r6, r0
 80109ca:	b118      	cbz	r0, 80109d4 <_vfiprintf_r+0x18>
 80109cc:	6983      	ldr	r3, [r0, #24]
 80109ce:	b90b      	cbnz	r3, 80109d4 <_vfiprintf_r+0x18>
 80109d0:	f7ff fe34 	bl	801063c <__sinit>
 80109d4:	4b7c      	ldr	r3, [pc, #496]	; (8010bc8 <_vfiprintf_r+0x20c>)
 80109d6:	429c      	cmp	r4, r3
 80109d8:	d158      	bne.n	8010a8c <_vfiprintf_r+0xd0>
 80109da:	6874      	ldr	r4, [r6, #4]
 80109dc:	89a3      	ldrh	r3, [r4, #12]
 80109de:	0718      	lsls	r0, r3, #28
 80109e0:	d55e      	bpl.n	8010aa0 <_vfiprintf_r+0xe4>
 80109e2:	6923      	ldr	r3, [r4, #16]
 80109e4:	2b00      	cmp	r3, #0
 80109e6:	d05b      	beq.n	8010aa0 <_vfiprintf_r+0xe4>
 80109e8:	2300      	movs	r3, #0
 80109ea:	9309      	str	r3, [sp, #36]	; 0x24
 80109ec:	2320      	movs	r3, #32
 80109ee:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80109f2:	2330      	movs	r3, #48	; 0x30
 80109f4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80109f8:	9503      	str	r5, [sp, #12]
 80109fa:	f04f 0b01 	mov.w	fp, #1
 80109fe:	46b8      	mov	r8, r7
 8010a00:	4645      	mov	r5, r8
 8010a02:	f815 3b01 	ldrb.w	r3, [r5], #1
 8010a06:	b10b      	cbz	r3, 8010a0c <_vfiprintf_r+0x50>
 8010a08:	2b25      	cmp	r3, #37	; 0x25
 8010a0a:	d154      	bne.n	8010ab6 <_vfiprintf_r+0xfa>
 8010a0c:	ebb8 0a07 	subs.w	sl, r8, r7
 8010a10:	d00b      	beq.n	8010a2a <_vfiprintf_r+0x6e>
 8010a12:	4653      	mov	r3, sl
 8010a14:	463a      	mov	r2, r7
 8010a16:	4621      	mov	r1, r4
 8010a18:	4630      	mov	r0, r6
 8010a1a:	f7ff ffbc 	bl	8010996 <__sfputs_r>
 8010a1e:	3001      	adds	r0, #1
 8010a20:	f000 80c2 	beq.w	8010ba8 <_vfiprintf_r+0x1ec>
 8010a24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010a26:	4453      	add	r3, sl
 8010a28:	9309      	str	r3, [sp, #36]	; 0x24
 8010a2a:	f898 3000 	ldrb.w	r3, [r8]
 8010a2e:	2b00      	cmp	r3, #0
 8010a30:	f000 80ba 	beq.w	8010ba8 <_vfiprintf_r+0x1ec>
 8010a34:	2300      	movs	r3, #0
 8010a36:	f04f 32ff 	mov.w	r2, #4294967295
 8010a3a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010a3e:	9304      	str	r3, [sp, #16]
 8010a40:	9307      	str	r3, [sp, #28]
 8010a42:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010a46:	931a      	str	r3, [sp, #104]	; 0x68
 8010a48:	46a8      	mov	r8, r5
 8010a4a:	2205      	movs	r2, #5
 8010a4c:	f818 1b01 	ldrb.w	r1, [r8], #1
 8010a50:	485e      	ldr	r0, [pc, #376]	; (8010bcc <_vfiprintf_r+0x210>)
 8010a52:	f7ef fc45 	bl	80002e0 <memchr>
 8010a56:	9b04      	ldr	r3, [sp, #16]
 8010a58:	bb78      	cbnz	r0, 8010aba <_vfiprintf_r+0xfe>
 8010a5a:	06d9      	lsls	r1, r3, #27
 8010a5c:	bf44      	itt	mi
 8010a5e:	2220      	movmi	r2, #32
 8010a60:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8010a64:	071a      	lsls	r2, r3, #28
 8010a66:	bf44      	itt	mi
 8010a68:	222b      	movmi	r2, #43	; 0x2b
 8010a6a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8010a6e:	782a      	ldrb	r2, [r5, #0]
 8010a70:	2a2a      	cmp	r2, #42	; 0x2a
 8010a72:	d02a      	beq.n	8010aca <_vfiprintf_r+0x10e>
 8010a74:	9a07      	ldr	r2, [sp, #28]
 8010a76:	46a8      	mov	r8, r5
 8010a78:	2000      	movs	r0, #0
 8010a7a:	250a      	movs	r5, #10
 8010a7c:	4641      	mov	r1, r8
 8010a7e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010a82:	3b30      	subs	r3, #48	; 0x30
 8010a84:	2b09      	cmp	r3, #9
 8010a86:	d969      	bls.n	8010b5c <_vfiprintf_r+0x1a0>
 8010a88:	b360      	cbz	r0, 8010ae4 <_vfiprintf_r+0x128>
 8010a8a:	e024      	b.n	8010ad6 <_vfiprintf_r+0x11a>
 8010a8c:	4b50      	ldr	r3, [pc, #320]	; (8010bd0 <_vfiprintf_r+0x214>)
 8010a8e:	429c      	cmp	r4, r3
 8010a90:	d101      	bne.n	8010a96 <_vfiprintf_r+0xda>
 8010a92:	68b4      	ldr	r4, [r6, #8]
 8010a94:	e7a2      	b.n	80109dc <_vfiprintf_r+0x20>
 8010a96:	4b4f      	ldr	r3, [pc, #316]	; (8010bd4 <_vfiprintf_r+0x218>)
 8010a98:	429c      	cmp	r4, r3
 8010a9a:	bf08      	it	eq
 8010a9c:	68f4      	ldreq	r4, [r6, #12]
 8010a9e:	e79d      	b.n	80109dc <_vfiprintf_r+0x20>
 8010aa0:	4621      	mov	r1, r4
 8010aa2:	4630      	mov	r0, r6
 8010aa4:	f7ff fc6c 	bl	8010380 <__swsetup_r>
 8010aa8:	2800      	cmp	r0, #0
 8010aaa:	d09d      	beq.n	80109e8 <_vfiprintf_r+0x2c>
 8010aac:	f04f 30ff 	mov.w	r0, #4294967295
 8010ab0:	b01d      	add	sp, #116	; 0x74
 8010ab2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010ab6:	46a8      	mov	r8, r5
 8010ab8:	e7a2      	b.n	8010a00 <_vfiprintf_r+0x44>
 8010aba:	4a44      	ldr	r2, [pc, #272]	; (8010bcc <_vfiprintf_r+0x210>)
 8010abc:	1a80      	subs	r0, r0, r2
 8010abe:	fa0b f000 	lsl.w	r0, fp, r0
 8010ac2:	4318      	orrs	r0, r3
 8010ac4:	9004      	str	r0, [sp, #16]
 8010ac6:	4645      	mov	r5, r8
 8010ac8:	e7be      	b.n	8010a48 <_vfiprintf_r+0x8c>
 8010aca:	9a03      	ldr	r2, [sp, #12]
 8010acc:	1d11      	adds	r1, r2, #4
 8010ace:	6812      	ldr	r2, [r2, #0]
 8010ad0:	9103      	str	r1, [sp, #12]
 8010ad2:	2a00      	cmp	r2, #0
 8010ad4:	db01      	blt.n	8010ada <_vfiprintf_r+0x11e>
 8010ad6:	9207      	str	r2, [sp, #28]
 8010ad8:	e004      	b.n	8010ae4 <_vfiprintf_r+0x128>
 8010ada:	4252      	negs	r2, r2
 8010adc:	f043 0302 	orr.w	r3, r3, #2
 8010ae0:	9207      	str	r2, [sp, #28]
 8010ae2:	9304      	str	r3, [sp, #16]
 8010ae4:	f898 3000 	ldrb.w	r3, [r8]
 8010ae8:	2b2e      	cmp	r3, #46	; 0x2e
 8010aea:	d10e      	bne.n	8010b0a <_vfiprintf_r+0x14e>
 8010aec:	f898 3001 	ldrb.w	r3, [r8, #1]
 8010af0:	2b2a      	cmp	r3, #42	; 0x2a
 8010af2:	d138      	bne.n	8010b66 <_vfiprintf_r+0x1aa>
 8010af4:	9b03      	ldr	r3, [sp, #12]
 8010af6:	1d1a      	adds	r2, r3, #4
 8010af8:	681b      	ldr	r3, [r3, #0]
 8010afa:	9203      	str	r2, [sp, #12]
 8010afc:	2b00      	cmp	r3, #0
 8010afe:	bfb8      	it	lt
 8010b00:	f04f 33ff 	movlt.w	r3, #4294967295
 8010b04:	f108 0802 	add.w	r8, r8, #2
 8010b08:	9305      	str	r3, [sp, #20]
 8010b0a:	4d33      	ldr	r5, [pc, #204]	; (8010bd8 <_vfiprintf_r+0x21c>)
 8010b0c:	f898 1000 	ldrb.w	r1, [r8]
 8010b10:	2203      	movs	r2, #3
 8010b12:	4628      	mov	r0, r5
 8010b14:	f7ef fbe4 	bl	80002e0 <memchr>
 8010b18:	b140      	cbz	r0, 8010b2c <_vfiprintf_r+0x170>
 8010b1a:	2340      	movs	r3, #64	; 0x40
 8010b1c:	1b40      	subs	r0, r0, r5
 8010b1e:	fa03 f000 	lsl.w	r0, r3, r0
 8010b22:	9b04      	ldr	r3, [sp, #16]
 8010b24:	4303      	orrs	r3, r0
 8010b26:	f108 0801 	add.w	r8, r8, #1
 8010b2a:	9304      	str	r3, [sp, #16]
 8010b2c:	f898 1000 	ldrb.w	r1, [r8]
 8010b30:	482a      	ldr	r0, [pc, #168]	; (8010bdc <_vfiprintf_r+0x220>)
 8010b32:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010b36:	2206      	movs	r2, #6
 8010b38:	f108 0701 	add.w	r7, r8, #1
 8010b3c:	f7ef fbd0 	bl	80002e0 <memchr>
 8010b40:	2800      	cmp	r0, #0
 8010b42:	d037      	beq.n	8010bb4 <_vfiprintf_r+0x1f8>
 8010b44:	4b26      	ldr	r3, [pc, #152]	; (8010be0 <_vfiprintf_r+0x224>)
 8010b46:	bb1b      	cbnz	r3, 8010b90 <_vfiprintf_r+0x1d4>
 8010b48:	9b03      	ldr	r3, [sp, #12]
 8010b4a:	3307      	adds	r3, #7
 8010b4c:	f023 0307 	bic.w	r3, r3, #7
 8010b50:	3308      	adds	r3, #8
 8010b52:	9303      	str	r3, [sp, #12]
 8010b54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010b56:	444b      	add	r3, r9
 8010b58:	9309      	str	r3, [sp, #36]	; 0x24
 8010b5a:	e750      	b.n	80109fe <_vfiprintf_r+0x42>
 8010b5c:	fb05 3202 	mla	r2, r5, r2, r3
 8010b60:	2001      	movs	r0, #1
 8010b62:	4688      	mov	r8, r1
 8010b64:	e78a      	b.n	8010a7c <_vfiprintf_r+0xc0>
 8010b66:	2300      	movs	r3, #0
 8010b68:	f108 0801 	add.w	r8, r8, #1
 8010b6c:	9305      	str	r3, [sp, #20]
 8010b6e:	4619      	mov	r1, r3
 8010b70:	250a      	movs	r5, #10
 8010b72:	4640      	mov	r0, r8
 8010b74:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010b78:	3a30      	subs	r2, #48	; 0x30
 8010b7a:	2a09      	cmp	r2, #9
 8010b7c:	d903      	bls.n	8010b86 <_vfiprintf_r+0x1ca>
 8010b7e:	2b00      	cmp	r3, #0
 8010b80:	d0c3      	beq.n	8010b0a <_vfiprintf_r+0x14e>
 8010b82:	9105      	str	r1, [sp, #20]
 8010b84:	e7c1      	b.n	8010b0a <_vfiprintf_r+0x14e>
 8010b86:	fb05 2101 	mla	r1, r5, r1, r2
 8010b8a:	2301      	movs	r3, #1
 8010b8c:	4680      	mov	r8, r0
 8010b8e:	e7f0      	b.n	8010b72 <_vfiprintf_r+0x1b6>
 8010b90:	ab03      	add	r3, sp, #12
 8010b92:	9300      	str	r3, [sp, #0]
 8010b94:	4622      	mov	r2, r4
 8010b96:	4b13      	ldr	r3, [pc, #76]	; (8010be4 <_vfiprintf_r+0x228>)
 8010b98:	a904      	add	r1, sp, #16
 8010b9a:	4630      	mov	r0, r6
 8010b9c:	f3af 8000 	nop.w
 8010ba0:	f1b0 3fff 	cmp.w	r0, #4294967295
 8010ba4:	4681      	mov	r9, r0
 8010ba6:	d1d5      	bne.n	8010b54 <_vfiprintf_r+0x198>
 8010ba8:	89a3      	ldrh	r3, [r4, #12]
 8010baa:	065b      	lsls	r3, r3, #25
 8010bac:	f53f af7e 	bmi.w	8010aac <_vfiprintf_r+0xf0>
 8010bb0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010bb2:	e77d      	b.n	8010ab0 <_vfiprintf_r+0xf4>
 8010bb4:	ab03      	add	r3, sp, #12
 8010bb6:	9300      	str	r3, [sp, #0]
 8010bb8:	4622      	mov	r2, r4
 8010bba:	4b0a      	ldr	r3, [pc, #40]	; (8010be4 <_vfiprintf_r+0x228>)
 8010bbc:	a904      	add	r1, sp, #16
 8010bbe:	4630      	mov	r0, r6
 8010bc0:	f000 f888 	bl	8010cd4 <_printf_i>
 8010bc4:	e7ec      	b.n	8010ba0 <_vfiprintf_r+0x1e4>
 8010bc6:	bf00      	nop
 8010bc8:	08011c7c 	.word	0x08011c7c
 8010bcc:	08011cbc 	.word	0x08011cbc
 8010bd0:	08011c9c 	.word	0x08011c9c
 8010bd4:	08011c5c 	.word	0x08011c5c
 8010bd8:	08011cc2 	.word	0x08011cc2
 8010bdc:	08011cc6 	.word	0x08011cc6
 8010be0:	00000000 	.word	0x00000000
 8010be4:	08010997 	.word	0x08010997

08010be8 <_printf_common>:
 8010be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010bec:	4691      	mov	r9, r2
 8010bee:	461f      	mov	r7, r3
 8010bf0:	688a      	ldr	r2, [r1, #8]
 8010bf2:	690b      	ldr	r3, [r1, #16]
 8010bf4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8010bf8:	4293      	cmp	r3, r2
 8010bfa:	bfb8      	it	lt
 8010bfc:	4613      	movlt	r3, r2
 8010bfe:	f8c9 3000 	str.w	r3, [r9]
 8010c02:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8010c06:	4606      	mov	r6, r0
 8010c08:	460c      	mov	r4, r1
 8010c0a:	b112      	cbz	r2, 8010c12 <_printf_common+0x2a>
 8010c0c:	3301      	adds	r3, #1
 8010c0e:	f8c9 3000 	str.w	r3, [r9]
 8010c12:	6823      	ldr	r3, [r4, #0]
 8010c14:	0699      	lsls	r1, r3, #26
 8010c16:	bf42      	ittt	mi
 8010c18:	f8d9 3000 	ldrmi.w	r3, [r9]
 8010c1c:	3302      	addmi	r3, #2
 8010c1e:	f8c9 3000 	strmi.w	r3, [r9]
 8010c22:	6825      	ldr	r5, [r4, #0]
 8010c24:	f015 0506 	ands.w	r5, r5, #6
 8010c28:	d107      	bne.n	8010c3a <_printf_common+0x52>
 8010c2a:	f104 0a19 	add.w	sl, r4, #25
 8010c2e:	68e3      	ldr	r3, [r4, #12]
 8010c30:	f8d9 2000 	ldr.w	r2, [r9]
 8010c34:	1a9b      	subs	r3, r3, r2
 8010c36:	42ab      	cmp	r3, r5
 8010c38:	dc28      	bgt.n	8010c8c <_printf_common+0xa4>
 8010c3a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8010c3e:	6822      	ldr	r2, [r4, #0]
 8010c40:	3300      	adds	r3, #0
 8010c42:	bf18      	it	ne
 8010c44:	2301      	movne	r3, #1
 8010c46:	0692      	lsls	r2, r2, #26
 8010c48:	d42d      	bmi.n	8010ca6 <_printf_common+0xbe>
 8010c4a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8010c4e:	4639      	mov	r1, r7
 8010c50:	4630      	mov	r0, r6
 8010c52:	47c0      	blx	r8
 8010c54:	3001      	adds	r0, #1
 8010c56:	d020      	beq.n	8010c9a <_printf_common+0xb2>
 8010c58:	6823      	ldr	r3, [r4, #0]
 8010c5a:	68e5      	ldr	r5, [r4, #12]
 8010c5c:	f8d9 2000 	ldr.w	r2, [r9]
 8010c60:	f003 0306 	and.w	r3, r3, #6
 8010c64:	2b04      	cmp	r3, #4
 8010c66:	bf08      	it	eq
 8010c68:	1aad      	subeq	r5, r5, r2
 8010c6a:	68a3      	ldr	r3, [r4, #8]
 8010c6c:	6922      	ldr	r2, [r4, #16]
 8010c6e:	bf0c      	ite	eq
 8010c70:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010c74:	2500      	movne	r5, #0
 8010c76:	4293      	cmp	r3, r2
 8010c78:	bfc4      	itt	gt
 8010c7a:	1a9b      	subgt	r3, r3, r2
 8010c7c:	18ed      	addgt	r5, r5, r3
 8010c7e:	f04f 0900 	mov.w	r9, #0
 8010c82:	341a      	adds	r4, #26
 8010c84:	454d      	cmp	r5, r9
 8010c86:	d11a      	bne.n	8010cbe <_printf_common+0xd6>
 8010c88:	2000      	movs	r0, #0
 8010c8a:	e008      	b.n	8010c9e <_printf_common+0xb6>
 8010c8c:	2301      	movs	r3, #1
 8010c8e:	4652      	mov	r2, sl
 8010c90:	4639      	mov	r1, r7
 8010c92:	4630      	mov	r0, r6
 8010c94:	47c0      	blx	r8
 8010c96:	3001      	adds	r0, #1
 8010c98:	d103      	bne.n	8010ca2 <_printf_common+0xba>
 8010c9a:	f04f 30ff 	mov.w	r0, #4294967295
 8010c9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010ca2:	3501      	adds	r5, #1
 8010ca4:	e7c3      	b.n	8010c2e <_printf_common+0x46>
 8010ca6:	18e1      	adds	r1, r4, r3
 8010ca8:	1c5a      	adds	r2, r3, #1
 8010caa:	2030      	movs	r0, #48	; 0x30
 8010cac:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8010cb0:	4422      	add	r2, r4
 8010cb2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8010cb6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8010cba:	3302      	adds	r3, #2
 8010cbc:	e7c5      	b.n	8010c4a <_printf_common+0x62>
 8010cbe:	2301      	movs	r3, #1
 8010cc0:	4622      	mov	r2, r4
 8010cc2:	4639      	mov	r1, r7
 8010cc4:	4630      	mov	r0, r6
 8010cc6:	47c0      	blx	r8
 8010cc8:	3001      	adds	r0, #1
 8010cca:	d0e6      	beq.n	8010c9a <_printf_common+0xb2>
 8010ccc:	f109 0901 	add.w	r9, r9, #1
 8010cd0:	e7d8      	b.n	8010c84 <_printf_common+0x9c>
	...

08010cd4 <_printf_i>:
 8010cd4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010cd8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8010cdc:	460c      	mov	r4, r1
 8010cde:	7e09      	ldrb	r1, [r1, #24]
 8010ce0:	b085      	sub	sp, #20
 8010ce2:	296e      	cmp	r1, #110	; 0x6e
 8010ce4:	4617      	mov	r7, r2
 8010ce6:	4606      	mov	r6, r0
 8010ce8:	4698      	mov	r8, r3
 8010cea:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010cec:	f000 80b3 	beq.w	8010e56 <_printf_i+0x182>
 8010cf0:	d822      	bhi.n	8010d38 <_printf_i+0x64>
 8010cf2:	2963      	cmp	r1, #99	; 0x63
 8010cf4:	d036      	beq.n	8010d64 <_printf_i+0x90>
 8010cf6:	d80a      	bhi.n	8010d0e <_printf_i+0x3a>
 8010cf8:	2900      	cmp	r1, #0
 8010cfa:	f000 80b9 	beq.w	8010e70 <_printf_i+0x19c>
 8010cfe:	2958      	cmp	r1, #88	; 0x58
 8010d00:	f000 8083 	beq.w	8010e0a <_printf_i+0x136>
 8010d04:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010d08:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8010d0c:	e032      	b.n	8010d74 <_printf_i+0xa0>
 8010d0e:	2964      	cmp	r1, #100	; 0x64
 8010d10:	d001      	beq.n	8010d16 <_printf_i+0x42>
 8010d12:	2969      	cmp	r1, #105	; 0x69
 8010d14:	d1f6      	bne.n	8010d04 <_printf_i+0x30>
 8010d16:	6820      	ldr	r0, [r4, #0]
 8010d18:	6813      	ldr	r3, [r2, #0]
 8010d1a:	0605      	lsls	r5, r0, #24
 8010d1c:	f103 0104 	add.w	r1, r3, #4
 8010d20:	d52a      	bpl.n	8010d78 <_printf_i+0xa4>
 8010d22:	681b      	ldr	r3, [r3, #0]
 8010d24:	6011      	str	r1, [r2, #0]
 8010d26:	2b00      	cmp	r3, #0
 8010d28:	da03      	bge.n	8010d32 <_printf_i+0x5e>
 8010d2a:	222d      	movs	r2, #45	; 0x2d
 8010d2c:	425b      	negs	r3, r3
 8010d2e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8010d32:	486f      	ldr	r0, [pc, #444]	; (8010ef0 <_printf_i+0x21c>)
 8010d34:	220a      	movs	r2, #10
 8010d36:	e039      	b.n	8010dac <_printf_i+0xd8>
 8010d38:	2973      	cmp	r1, #115	; 0x73
 8010d3a:	f000 809d 	beq.w	8010e78 <_printf_i+0x1a4>
 8010d3e:	d808      	bhi.n	8010d52 <_printf_i+0x7e>
 8010d40:	296f      	cmp	r1, #111	; 0x6f
 8010d42:	d020      	beq.n	8010d86 <_printf_i+0xb2>
 8010d44:	2970      	cmp	r1, #112	; 0x70
 8010d46:	d1dd      	bne.n	8010d04 <_printf_i+0x30>
 8010d48:	6823      	ldr	r3, [r4, #0]
 8010d4a:	f043 0320 	orr.w	r3, r3, #32
 8010d4e:	6023      	str	r3, [r4, #0]
 8010d50:	e003      	b.n	8010d5a <_printf_i+0x86>
 8010d52:	2975      	cmp	r1, #117	; 0x75
 8010d54:	d017      	beq.n	8010d86 <_printf_i+0xb2>
 8010d56:	2978      	cmp	r1, #120	; 0x78
 8010d58:	d1d4      	bne.n	8010d04 <_printf_i+0x30>
 8010d5a:	2378      	movs	r3, #120	; 0x78
 8010d5c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8010d60:	4864      	ldr	r0, [pc, #400]	; (8010ef4 <_printf_i+0x220>)
 8010d62:	e055      	b.n	8010e10 <_printf_i+0x13c>
 8010d64:	6813      	ldr	r3, [r2, #0]
 8010d66:	1d19      	adds	r1, r3, #4
 8010d68:	681b      	ldr	r3, [r3, #0]
 8010d6a:	6011      	str	r1, [r2, #0]
 8010d6c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010d70:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010d74:	2301      	movs	r3, #1
 8010d76:	e08c      	b.n	8010e92 <_printf_i+0x1be>
 8010d78:	681b      	ldr	r3, [r3, #0]
 8010d7a:	6011      	str	r1, [r2, #0]
 8010d7c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8010d80:	bf18      	it	ne
 8010d82:	b21b      	sxthne	r3, r3
 8010d84:	e7cf      	b.n	8010d26 <_printf_i+0x52>
 8010d86:	6813      	ldr	r3, [r2, #0]
 8010d88:	6825      	ldr	r5, [r4, #0]
 8010d8a:	1d18      	adds	r0, r3, #4
 8010d8c:	6010      	str	r0, [r2, #0]
 8010d8e:	0628      	lsls	r0, r5, #24
 8010d90:	d501      	bpl.n	8010d96 <_printf_i+0xc2>
 8010d92:	681b      	ldr	r3, [r3, #0]
 8010d94:	e002      	b.n	8010d9c <_printf_i+0xc8>
 8010d96:	0668      	lsls	r0, r5, #25
 8010d98:	d5fb      	bpl.n	8010d92 <_printf_i+0xbe>
 8010d9a:	881b      	ldrh	r3, [r3, #0]
 8010d9c:	4854      	ldr	r0, [pc, #336]	; (8010ef0 <_printf_i+0x21c>)
 8010d9e:	296f      	cmp	r1, #111	; 0x6f
 8010da0:	bf14      	ite	ne
 8010da2:	220a      	movne	r2, #10
 8010da4:	2208      	moveq	r2, #8
 8010da6:	2100      	movs	r1, #0
 8010da8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8010dac:	6865      	ldr	r5, [r4, #4]
 8010dae:	60a5      	str	r5, [r4, #8]
 8010db0:	2d00      	cmp	r5, #0
 8010db2:	f2c0 8095 	blt.w	8010ee0 <_printf_i+0x20c>
 8010db6:	6821      	ldr	r1, [r4, #0]
 8010db8:	f021 0104 	bic.w	r1, r1, #4
 8010dbc:	6021      	str	r1, [r4, #0]
 8010dbe:	2b00      	cmp	r3, #0
 8010dc0:	d13d      	bne.n	8010e3e <_printf_i+0x16a>
 8010dc2:	2d00      	cmp	r5, #0
 8010dc4:	f040 808e 	bne.w	8010ee4 <_printf_i+0x210>
 8010dc8:	4665      	mov	r5, ip
 8010dca:	2a08      	cmp	r2, #8
 8010dcc:	d10b      	bne.n	8010de6 <_printf_i+0x112>
 8010dce:	6823      	ldr	r3, [r4, #0]
 8010dd0:	07db      	lsls	r3, r3, #31
 8010dd2:	d508      	bpl.n	8010de6 <_printf_i+0x112>
 8010dd4:	6923      	ldr	r3, [r4, #16]
 8010dd6:	6862      	ldr	r2, [r4, #4]
 8010dd8:	429a      	cmp	r2, r3
 8010dda:	bfde      	ittt	le
 8010ddc:	2330      	movle	r3, #48	; 0x30
 8010dde:	f805 3c01 	strble.w	r3, [r5, #-1]
 8010de2:	f105 35ff 	addle.w	r5, r5, #4294967295
 8010de6:	ebac 0305 	sub.w	r3, ip, r5
 8010dea:	6123      	str	r3, [r4, #16]
 8010dec:	f8cd 8000 	str.w	r8, [sp]
 8010df0:	463b      	mov	r3, r7
 8010df2:	aa03      	add	r2, sp, #12
 8010df4:	4621      	mov	r1, r4
 8010df6:	4630      	mov	r0, r6
 8010df8:	f7ff fef6 	bl	8010be8 <_printf_common>
 8010dfc:	3001      	adds	r0, #1
 8010dfe:	d14d      	bne.n	8010e9c <_printf_i+0x1c8>
 8010e00:	f04f 30ff 	mov.w	r0, #4294967295
 8010e04:	b005      	add	sp, #20
 8010e06:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010e0a:	4839      	ldr	r0, [pc, #228]	; (8010ef0 <_printf_i+0x21c>)
 8010e0c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8010e10:	6813      	ldr	r3, [r2, #0]
 8010e12:	6821      	ldr	r1, [r4, #0]
 8010e14:	1d1d      	adds	r5, r3, #4
 8010e16:	681b      	ldr	r3, [r3, #0]
 8010e18:	6015      	str	r5, [r2, #0]
 8010e1a:	060a      	lsls	r2, r1, #24
 8010e1c:	d50b      	bpl.n	8010e36 <_printf_i+0x162>
 8010e1e:	07ca      	lsls	r2, r1, #31
 8010e20:	bf44      	itt	mi
 8010e22:	f041 0120 	orrmi.w	r1, r1, #32
 8010e26:	6021      	strmi	r1, [r4, #0]
 8010e28:	b91b      	cbnz	r3, 8010e32 <_printf_i+0x15e>
 8010e2a:	6822      	ldr	r2, [r4, #0]
 8010e2c:	f022 0220 	bic.w	r2, r2, #32
 8010e30:	6022      	str	r2, [r4, #0]
 8010e32:	2210      	movs	r2, #16
 8010e34:	e7b7      	b.n	8010da6 <_printf_i+0xd2>
 8010e36:	064d      	lsls	r5, r1, #25
 8010e38:	bf48      	it	mi
 8010e3a:	b29b      	uxthmi	r3, r3
 8010e3c:	e7ef      	b.n	8010e1e <_printf_i+0x14a>
 8010e3e:	4665      	mov	r5, ip
 8010e40:	fbb3 f1f2 	udiv	r1, r3, r2
 8010e44:	fb02 3311 	mls	r3, r2, r1, r3
 8010e48:	5cc3      	ldrb	r3, [r0, r3]
 8010e4a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8010e4e:	460b      	mov	r3, r1
 8010e50:	2900      	cmp	r1, #0
 8010e52:	d1f5      	bne.n	8010e40 <_printf_i+0x16c>
 8010e54:	e7b9      	b.n	8010dca <_printf_i+0xf6>
 8010e56:	6813      	ldr	r3, [r2, #0]
 8010e58:	6825      	ldr	r5, [r4, #0]
 8010e5a:	6961      	ldr	r1, [r4, #20]
 8010e5c:	1d18      	adds	r0, r3, #4
 8010e5e:	6010      	str	r0, [r2, #0]
 8010e60:	0628      	lsls	r0, r5, #24
 8010e62:	681b      	ldr	r3, [r3, #0]
 8010e64:	d501      	bpl.n	8010e6a <_printf_i+0x196>
 8010e66:	6019      	str	r1, [r3, #0]
 8010e68:	e002      	b.n	8010e70 <_printf_i+0x19c>
 8010e6a:	066a      	lsls	r2, r5, #25
 8010e6c:	d5fb      	bpl.n	8010e66 <_printf_i+0x192>
 8010e6e:	8019      	strh	r1, [r3, #0]
 8010e70:	2300      	movs	r3, #0
 8010e72:	6123      	str	r3, [r4, #16]
 8010e74:	4665      	mov	r5, ip
 8010e76:	e7b9      	b.n	8010dec <_printf_i+0x118>
 8010e78:	6813      	ldr	r3, [r2, #0]
 8010e7a:	1d19      	adds	r1, r3, #4
 8010e7c:	6011      	str	r1, [r2, #0]
 8010e7e:	681d      	ldr	r5, [r3, #0]
 8010e80:	6862      	ldr	r2, [r4, #4]
 8010e82:	2100      	movs	r1, #0
 8010e84:	4628      	mov	r0, r5
 8010e86:	f7ef fa2b 	bl	80002e0 <memchr>
 8010e8a:	b108      	cbz	r0, 8010e90 <_printf_i+0x1bc>
 8010e8c:	1b40      	subs	r0, r0, r5
 8010e8e:	6060      	str	r0, [r4, #4]
 8010e90:	6863      	ldr	r3, [r4, #4]
 8010e92:	6123      	str	r3, [r4, #16]
 8010e94:	2300      	movs	r3, #0
 8010e96:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010e9a:	e7a7      	b.n	8010dec <_printf_i+0x118>
 8010e9c:	6923      	ldr	r3, [r4, #16]
 8010e9e:	462a      	mov	r2, r5
 8010ea0:	4639      	mov	r1, r7
 8010ea2:	4630      	mov	r0, r6
 8010ea4:	47c0      	blx	r8
 8010ea6:	3001      	adds	r0, #1
 8010ea8:	d0aa      	beq.n	8010e00 <_printf_i+0x12c>
 8010eaa:	6823      	ldr	r3, [r4, #0]
 8010eac:	079b      	lsls	r3, r3, #30
 8010eae:	d413      	bmi.n	8010ed8 <_printf_i+0x204>
 8010eb0:	68e0      	ldr	r0, [r4, #12]
 8010eb2:	9b03      	ldr	r3, [sp, #12]
 8010eb4:	4298      	cmp	r0, r3
 8010eb6:	bfb8      	it	lt
 8010eb8:	4618      	movlt	r0, r3
 8010eba:	e7a3      	b.n	8010e04 <_printf_i+0x130>
 8010ebc:	2301      	movs	r3, #1
 8010ebe:	464a      	mov	r2, r9
 8010ec0:	4639      	mov	r1, r7
 8010ec2:	4630      	mov	r0, r6
 8010ec4:	47c0      	blx	r8
 8010ec6:	3001      	adds	r0, #1
 8010ec8:	d09a      	beq.n	8010e00 <_printf_i+0x12c>
 8010eca:	3501      	adds	r5, #1
 8010ecc:	68e3      	ldr	r3, [r4, #12]
 8010ece:	9a03      	ldr	r2, [sp, #12]
 8010ed0:	1a9b      	subs	r3, r3, r2
 8010ed2:	42ab      	cmp	r3, r5
 8010ed4:	dcf2      	bgt.n	8010ebc <_printf_i+0x1e8>
 8010ed6:	e7eb      	b.n	8010eb0 <_printf_i+0x1dc>
 8010ed8:	2500      	movs	r5, #0
 8010eda:	f104 0919 	add.w	r9, r4, #25
 8010ede:	e7f5      	b.n	8010ecc <_printf_i+0x1f8>
 8010ee0:	2b00      	cmp	r3, #0
 8010ee2:	d1ac      	bne.n	8010e3e <_printf_i+0x16a>
 8010ee4:	7803      	ldrb	r3, [r0, #0]
 8010ee6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010eea:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010eee:	e76c      	b.n	8010dca <_printf_i+0xf6>
 8010ef0:	08011ccd 	.word	0x08011ccd
 8010ef4:	08011cde 	.word	0x08011cde

08010ef8 <_putc_r>:
 8010ef8:	b570      	push	{r4, r5, r6, lr}
 8010efa:	460d      	mov	r5, r1
 8010efc:	4614      	mov	r4, r2
 8010efe:	4606      	mov	r6, r0
 8010f00:	b118      	cbz	r0, 8010f0a <_putc_r+0x12>
 8010f02:	6983      	ldr	r3, [r0, #24]
 8010f04:	b90b      	cbnz	r3, 8010f0a <_putc_r+0x12>
 8010f06:	f7ff fb99 	bl	801063c <__sinit>
 8010f0a:	4b13      	ldr	r3, [pc, #76]	; (8010f58 <_putc_r+0x60>)
 8010f0c:	429c      	cmp	r4, r3
 8010f0e:	d112      	bne.n	8010f36 <_putc_r+0x3e>
 8010f10:	6874      	ldr	r4, [r6, #4]
 8010f12:	68a3      	ldr	r3, [r4, #8]
 8010f14:	3b01      	subs	r3, #1
 8010f16:	2b00      	cmp	r3, #0
 8010f18:	60a3      	str	r3, [r4, #8]
 8010f1a:	da16      	bge.n	8010f4a <_putc_r+0x52>
 8010f1c:	69a2      	ldr	r2, [r4, #24]
 8010f1e:	4293      	cmp	r3, r2
 8010f20:	db02      	blt.n	8010f28 <_putc_r+0x30>
 8010f22:	b2eb      	uxtb	r3, r5
 8010f24:	2b0a      	cmp	r3, #10
 8010f26:	d110      	bne.n	8010f4a <_putc_r+0x52>
 8010f28:	4622      	mov	r2, r4
 8010f2a:	4629      	mov	r1, r5
 8010f2c:	4630      	mov	r0, r6
 8010f2e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010f32:	f7ff b9d3 	b.w	80102dc <__swbuf_r>
 8010f36:	4b09      	ldr	r3, [pc, #36]	; (8010f5c <_putc_r+0x64>)
 8010f38:	429c      	cmp	r4, r3
 8010f3a:	d101      	bne.n	8010f40 <_putc_r+0x48>
 8010f3c:	68b4      	ldr	r4, [r6, #8]
 8010f3e:	e7e8      	b.n	8010f12 <_putc_r+0x1a>
 8010f40:	4b07      	ldr	r3, [pc, #28]	; (8010f60 <_putc_r+0x68>)
 8010f42:	429c      	cmp	r4, r3
 8010f44:	bf08      	it	eq
 8010f46:	68f4      	ldreq	r4, [r6, #12]
 8010f48:	e7e3      	b.n	8010f12 <_putc_r+0x1a>
 8010f4a:	6823      	ldr	r3, [r4, #0]
 8010f4c:	1c5a      	adds	r2, r3, #1
 8010f4e:	6022      	str	r2, [r4, #0]
 8010f50:	701d      	strb	r5, [r3, #0]
 8010f52:	b2e8      	uxtb	r0, r5
 8010f54:	bd70      	pop	{r4, r5, r6, pc}
 8010f56:	bf00      	nop
 8010f58:	08011c7c 	.word	0x08011c7c
 8010f5c:	08011c9c 	.word	0x08011c9c
 8010f60:	08011c5c 	.word	0x08011c5c

08010f64 <_sbrk_r>:
 8010f64:	b538      	push	{r3, r4, r5, lr}
 8010f66:	4c06      	ldr	r4, [pc, #24]	; (8010f80 <_sbrk_r+0x1c>)
 8010f68:	2300      	movs	r3, #0
 8010f6a:	4605      	mov	r5, r0
 8010f6c:	4608      	mov	r0, r1
 8010f6e:	6023      	str	r3, [r4, #0]
 8010f70:	f7f1 f958 	bl	8002224 <_sbrk>
 8010f74:	1c43      	adds	r3, r0, #1
 8010f76:	d102      	bne.n	8010f7e <_sbrk_r+0x1a>
 8010f78:	6823      	ldr	r3, [r4, #0]
 8010f7a:	b103      	cbz	r3, 8010f7e <_sbrk_r+0x1a>
 8010f7c:	602b      	str	r3, [r5, #0]
 8010f7e:	bd38      	pop	{r3, r4, r5, pc}
 8010f80:	2406734c 	.word	0x2406734c

08010f84 <__sread>:
 8010f84:	b510      	push	{r4, lr}
 8010f86:	460c      	mov	r4, r1
 8010f88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010f8c:	f000 f896 	bl	80110bc <_read_r>
 8010f90:	2800      	cmp	r0, #0
 8010f92:	bfab      	itete	ge
 8010f94:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8010f96:	89a3      	ldrhlt	r3, [r4, #12]
 8010f98:	181b      	addge	r3, r3, r0
 8010f9a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8010f9e:	bfac      	ite	ge
 8010fa0:	6563      	strge	r3, [r4, #84]	; 0x54
 8010fa2:	81a3      	strhlt	r3, [r4, #12]
 8010fa4:	bd10      	pop	{r4, pc}

08010fa6 <__swrite>:
 8010fa6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010faa:	461f      	mov	r7, r3
 8010fac:	898b      	ldrh	r3, [r1, #12]
 8010fae:	05db      	lsls	r3, r3, #23
 8010fb0:	4605      	mov	r5, r0
 8010fb2:	460c      	mov	r4, r1
 8010fb4:	4616      	mov	r6, r2
 8010fb6:	d505      	bpl.n	8010fc4 <__swrite+0x1e>
 8010fb8:	2302      	movs	r3, #2
 8010fba:	2200      	movs	r2, #0
 8010fbc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010fc0:	f000 f868 	bl	8011094 <_lseek_r>
 8010fc4:	89a3      	ldrh	r3, [r4, #12]
 8010fc6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010fca:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8010fce:	81a3      	strh	r3, [r4, #12]
 8010fd0:	4632      	mov	r2, r6
 8010fd2:	463b      	mov	r3, r7
 8010fd4:	4628      	mov	r0, r5
 8010fd6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010fda:	f000 b817 	b.w	801100c <_write_r>

08010fde <__sseek>:
 8010fde:	b510      	push	{r4, lr}
 8010fe0:	460c      	mov	r4, r1
 8010fe2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010fe6:	f000 f855 	bl	8011094 <_lseek_r>
 8010fea:	1c43      	adds	r3, r0, #1
 8010fec:	89a3      	ldrh	r3, [r4, #12]
 8010fee:	bf15      	itete	ne
 8010ff0:	6560      	strne	r0, [r4, #84]	; 0x54
 8010ff2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8010ff6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8010ffa:	81a3      	strheq	r3, [r4, #12]
 8010ffc:	bf18      	it	ne
 8010ffe:	81a3      	strhne	r3, [r4, #12]
 8011000:	bd10      	pop	{r4, pc}

08011002 <__sclose>:
 8011002:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011006:	f000 b813 	b.w	8011030 <_close_r>
	...

0801100c <_write_r>:
 801100c:	b538      	push	{r3, r4, r5, lr}
 801100e:	4c07      	ldr	r4, [pc, #28]	; (801102c <_write_r+0x20>)
 8011010:	4605      	mov	r5, r0
 8011012:	4608      	mov	r0, r1
 8011014:	4611      	mov	r1, r2
 8011016:	2200      	movs	r2, #0
 8011018:	6022      	str	r2, [r4, #0]
 801101a:	461a      	mov	r2, r3
 801101c:	f7f0 fd6c 	bl	8001af8 <_write>
 8011020:	1c43      	adds	r3, r0, #1
 8011022:	d102      	bne.n	801102a <_write_r+0x1e>
 8011024:	6823      	ldr	r3, [r4, #0]
 8011026:	b103      	cbz	r3, 801102a <_write_r+0x1e>
 8011028:	602b      	str	r3, [r5, #0]
 801102a:	bd38      	pop	{r3, r4, r5, pc}
 801102c:	2406734c 	.word	0x2406734c

08011030 <_close_r>:
 8011030:	b538      	push	{r3, r4, r5, lr}
 8011032:	4c06      	ldr	r4, [pc, #24]	; (801104c <_close_r+0x1c>)
 8011034:	2300      	movs	r3, #0
 8011036:	4605      	mov	r5, r0
 8011038:	4608      	mov	r0, r1
 801103a:	6023      	str	r3, [r4, #0]
 801103c:	f7f1 f8bd 	bl	80021ba <_close>
 8011040:	1c43      	adds	r3, r0, #1
 8011042:	d102      	bne.n	801104a <_close_r+0x1a>
 8011044:	6823      	ldr	r3, [r4, #0]
 8011046:	b103      	cbz	r3, 801104a <_close_r+0x1a>
 8011048:	602b      	str	r3, [r5, #0]
 801104a:	bd38      	pop	{r3, r4, r5, pc}
 801104c:	2406734c 	.word	0x2406734c

08011050 <_fstat_r>:
 8011050:	b538      	push	{r3, r4, r5, lr}
 8011052:	4c07      	ldr	r4, [pc, #28]	; (8011070 <_fstat_r+0x20>)
 8011054:	2300      	movs	r3, #0
 8011056:	4605      	mov	r5, r0
 8011058:	4608      	mov	r0, r1
 801105a:	4611      	mov	r1, r2
 801105c:	6023      	str	r3, [r4, #0]
 801105e:	f7f1 f8b8 	bl	80021d2 <_fstat>
 8011062:	1c43      	adds	r3, r0, #1
 8011064:	d102      	bne.n	801106c <_fstat_r+0x1c>
 8011066:	6823      	ldr	r3, [r4, #0]
 8011068:	b103      	cbz	r3, 801106c <_fstat_r+0x1c>
 801106a:	602b      	str	r3, [r5, #0]
 801106c:	bd38      	pop	{r3, r4, r5, pc}
 801106e:	bf00      	nop
 8011070:	2406734c 	.word	0x2406734c

08011074 <_isatty_r>:
 8011074:	b538      	push	{r3, r4, r5, lr}
 8011076:	4c06      	ldr	r4, [pc, #24]	; (8011090 <_isatty_r+0x1c>)
 8011078:	2300      	movs	r3, #0
 801107a:	4605      	mov	r5, r0
 801107c:	4608      	mov	r0, r1
 801107e:	6023      	str	r3, [r4, #0]
 8011080:	f7f1 f8b7 	bl	80021f2 <_isatty>
 8011084:	1c43      	adds	r3, r0, #1
 8011086:	d102      	bne.n	801108e <_isatty_r+0x1a>
 8011088:	6823      	ldr	r3, [r4, #0]
 801108a:	b103      	cbz	r3, 801108e <_isatty_r+0x1a>
 801108c:	602b      	str	r3, [r5, #0]
 801108e:	bd38      	pop	{r3, r4, r5, pc}
 8011090:	2406734c 	.word	0x2406734c

08011094 <_lseek_r>:
 8011094:	b538      	push	{r3, r4, r5, lr}
 8011096:	4c07      	ldr	r4, [pc, #28]	; (80110b4 <_lseek_r+0x20>)
 8011098:	4605      	mov	r5, r0
 801109a:	4608      	mov	r0, r1
 801109c:	4611      	mov	r1, r2
 801109e:	2200      	movs	r2, #0
 80110a0:	6022      	str	r2, [r4, #0]
 80110a2:	461a      	mov	r2, r3
 80110a4:	f7f1 f8b0 	bl	8002208 <_lseek>
 80110a8:	1c43      	adds	r3, r0, #1
 80110aa:	d102      	bne.n	80110b2 <_lseek_r+0x1e>
 80110ac:	6823      	ldr	r3, [r4, #0]
 80110ae:	b103      	cbz	r3, 80110b2 <_lseek_r+0x1e>
 80110b0:	602b      	str	r3, [r5, #0]
 80110b2:	bd38      	pop	{r3, r4, r5, pc}
 80110b4:	2406734c 	.word	0x2406734c

080110b8 <__malloc_lock>:
 80110b8:	4770      	bx	lr

080110ba <__malloc_unlock>:
 80110ba:	4770      	bx	lr

080110bc <_read_r>:
 80110bc:	b538      	push	{r3, r4, r5, lr}
 80110be:	4c07      	ldr	r4, [pc, #28]	; (80110dc <_read_r+0x20>)
 80110c0:	4605      	mov	r5, r0
 80110c2:	4608      	mov	r0, r1
 80110c4:	4611      	mov	r1, r2
 80110c6:	2200      	movs	r2, #0
 80110c8:	6022      	str	r2, [r4, #0]
 80110ca:	461a      	mov	r2, r3
 80110cc:	f7f1 f858 	bl	8002180 <_read>
 80110d0:	1c43      	adds	r3, r0, #1
 80110d2:	d102      	bne.n	80110da <_read_r+0x1e>
 80110d4:	6823      	ldr	r3, [r4, #0]
 80110d6:	b103      	cbz	r3, 80110da <_read_r+0x1e>
 80110d8:	602b      	str	r3, [r5, #0]
 80110da:	bd38      	pop	{r3, r4, r5, pc}
 80110dc:	2406734c 	.word	0x2406734c

080110e0 <_init>:
 80110e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80110e2:	bf00      	nop
 80110e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80110e6:	bc08      	pop	{r3}
 80110e8:	469e      	mov	lr, r3
 80110ea:	4770      	bx	lr

080110ec <_fini>:
 80110ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80110ee:	bf00      	nop
 80110f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80110f2:	bc08      	pop	{r3}
 80110f4:	469e      	mov	lr, r3
 80110f6:	4770      	bx	lr
