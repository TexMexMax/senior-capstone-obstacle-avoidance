
System_Demo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e5e4  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b34  0800e884  0800e884  0001e884  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f3b8  0800f3b8  000202b4  2**0
                  CONTENTS
  4 .ARM          00000008  0800f3b8  0800f3b8  0001f3b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f3c0  0800f3c0  000202b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800f3c0  0800f3c0  0001f3c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f3c8  0800f3c8  0001f3c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002b4  24000000  0800f3cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00066f50  240002b4  0800f680  000202b4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  24067204  0800f680  00027204  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000202b4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00031acb  00000000  00000000  000202e2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004b7d  00000000  00000000  00051dad  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001690  00000000  00000000  00056930  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000014e8  00000000  00000000  00057fc0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0003d3aa  00000000  00000000  000594a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001803c  00000000  00000000  00096852  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    001600ed  00000000  00000000  000ae88e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0020e97b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006698  00000000  00000000  0020e9f8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240002b4 	.word	0x240002b4
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800e86c 	.word	0x0800e86c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240002b8 	.word	0x240002b8
 80002dc:	0800e86c 	.word	0x0800e86c

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b972 	b.w	800067c <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9e08      	ldr	r6, [sp, #32]
 80003b6:	4604      	mov	r4, r0
 80003b8:	4688      	mov	r8, r1
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d14b      	bne.n	8000456 <__udivmoddi4+0xa6>
 80003be:	428a      	cmp	r2, r1
 80003c0:	4615      	mov	r5, r2
 80003c2:	d967      	bls.n	8000494 <__udivmoddi4+0xe4>
 80003c4:	fab2 f282 	clz	r2, r2
 80003c8:	b14a      	cbz	r2, 80003de <__udivmoddi4+0x2e>
 80003ca:	f1c2 0720 	rsb	r7, r2, #32
 80003ce:	fa01 f302 	lsl.w	r3, r1, r2
 80003d2:	fa20 f707 	lsr.w	r7, r0, r7
 80003d6:	4095      	lsls	r5, r2
 80003d8:	ea47 0803 	orr.w	r8, r7, r3
 80003dc:	4094      	lsls	r4, r2
 80003de:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003e2:	0c23      	lsrs	r3, r4, #16
 80003e4:	fbb8 f7fe 	udiv	r7, r8, lr
 80003e8:	fa1f fc85 	uxth.w	ip, r5
 80003ec:	fb0e 8817 	mls	r8, lr, r7, r8
 80003f0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003f4:	fb07 f10c 	mul.w	r1, r7, ip
 80003f8:	4299      	cmp	r1, r3
 80003fa:	d909      	bls.n	8000410 <__udivmoddi4+0x60>
 80003fc:	18eb      	adds	r3, r5, r3
 80003fe:	f107 30ff 	add.w	r0, r7, #4294967295
 8000402:	f080 811b 	bcs.w	800063c <__udivmoddi4+0x28c>
 8000406:	4299      	cmp	r1, r3
 8000408:	f240 8118 	bls.w	800063c <__udivmoddi4+0x28c>
 800040c:	3f02      	subs	r7, #2
 800040e:	442b      	add	r3, r5
 8000410:	1a5b      	subs	r3, r3, r1
 8000412:	b2a4      	uxth	r4, r4
 8000414:	fbb3 f0fe 	udiv	r0, r3, lr
 8000418:	fb0e 3310 	mls	r3, lr, r0, r3
 800041c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000420:	fb00 fc0c 	mul.w	ip, r0, ip
 8000424:	45a4      	cmp	ip, r4
 8000426:	d909      	bls.n	800043c <__udivmoddi4+0x8c>
 8000428:	192c      	adds	r4, r5, r4
 800042a:	f100 33ff 	add.w	r3, r0, #4294967295
 800042e:	f080 8107 	bcs.w	8000640 <__udivmoddi4+0x290>
 8000432:	45a4      	cmp	ip, r4
 8000434:	f240 8104 	bls.w	8000640 <__udivmoddi4+0x290>
 8000438:	3802      	subs	r0, #2
 800043a:	442c      	add	r4, r5
 800043c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000440:	eba4 040c 	sub.w	r4, r4, ip
 8000444:	2700      	movs	r7, #0
 8000446:	b11e      	cbz	r6, 8000450 <__udivmoddi4+0xa0>
 8000448:	40d4      	lsrs	r4, r2
 800044a:	2300      	movs	r3, #0
 800044c:	e9c6 4300 	strd	r4, r3, [r6]
 8000450:	4639      	mov	r1, r7
 8000452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000456:	428b      	cmp	r3, r1
 8000458:	d909      	bls.n	800046e <__udivmoddi4+0xbe>
 800045a:	2e00      	cmp	r6, #0
 800045c:	f000 80eb 	beq.w	8000636 <__udivmoddi4+0x286>
 8000460:	2700      	movs	r7, #0
 8000462:	e9c6 0100 	strd	r0, r1, [r6]
 8000466:	4638      	mov	r0, r7
 8000468:	4639      	mov	r1, r7
 800046a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046e:	fab3 f783 	clz	r7, r3
 8000472:	2f00      	cmp	r7, #0
 8000474:	d147      	bne.n	8000506 <__udivmoddi4+0x156>
 8000476:	428b      	cmp	r3, r1
 8000478:	d302      	bcc.n	8000480 <__udivmoddi4+0xd0>
 800047a:	4282      	cmp	r2, r0
 800047c:	f200 80fa 	bhi.w	8000674 <__udivmoddi4+0x2c4>
 8000480:	1a84      	subs	r4, r0, r2
 8000482:	eb61 0303 	sbc.w	r3, r1, r3
 8000486:	2001      	movs	r0, #1
 8000488:	4698      	mov	r8, r3
 800048a:	2e00      	cmp	r6, #0
 800048c:	d0e0      	beq.n	8000450 <__udivmoddi4+0xa0>
 800048e:	e9c6 4800 	strd	r4, r8, [r6]
 8000492:	e7dd      	b.n	8000450 <__udivmoddi4+0xa0>
 8000494:	b902      	cbnz	r2, 8000498 <__udivmoddi4+0xe8>
 8000496:	deff      	udf	#255	; 0xff
 8000498:	fab2 f282 	clz	r2, r2
 800049c:	2a00      	cmp	r2, #0
 800049e:	f040 808f 	bne.w	80005c0 <__udivmoddi4+0x210>
 80004a2:	1b49      	subs	r1, r1, r5
 80004a4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004a8:	fa1f f885 	uxth.w	r8, r5
 80004ac:	2701      	movs	r7, #1
 80004ae:	fbb1 fcfe 	udiv	ip, r1, lr
 80004b2:	0c23      	lsrs	r3, r4, #16
 80004b4:	fb0e 111c 	mls	r1, lr, ip, r1
 80004b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004bc:	fb08 f10c 	mul.w	r1, r8, ip
 80004c0:	4299      	cmp	r1, r3
 80004c2:	d907      	bls.n	80004d4 <__udivmoddi4+0x124>
 80004c4:	18eb      	adds	r3, r5, r3
 80004c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80004ca:	d202      	bcs.n	80004d2 <__udivmoddi4+0x122>
 80004cc:	4299      	cmp	r1, r3
 80004ce:	f200 80cd 	bhi.w	800066c <__udivmoddi4+0x2bc>
 80004d2:	4684      	mov	ip, r0
 80004d4:	1a59      	subs	r1, r3, r1
 80004d6:	b2a3      	uxth	r3, r4
 80004d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004dc:	fb0e 1410 	mls	r4, lr, r0, r1
 80004e0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80004e4:	fb08 f800 	mul.w	r8, r8, r0
 80004e8:	45a0      	cmp	r8, r4
 80004ea:	d907      	bls.n	80004fc <__udivmoddi4+0x14c>
 80004ec:	192c      	adds	r4, r5, r4
 80004ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80004f2:	d202      	bcs.n	80004fa <__udivmoddi4+0x14a>
 80004f4:	45a0      	cmp	r8, r4
 80004f6:	f200 80b6 	bhi.w	8000666 <__udivmoddi4+0x2b6>
 80004fa:	4618      	mov	r0, r3
 80004fc:	eba4 0408 	sub.w	r4, r4, r8
 8000500:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000504:	e79f      	b.n	8000446 <__udivmoddi4+0x96>
 8000506:	f1c7 0c20 	rsb	ip, r7, #32
 800050a:	40bb      	lsls	r3, r7
 800050c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000510:	ea4e 0e03 	orr.w	lr, lr, r3
 8000514:	fa01 f407 	lsl.w	r4, r1, r7
 8000518:	fa20 f50c 	lsr.w	r5, r0, ip
 800051c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000520:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000524:	4325      	orrs	r5, r4
 8000526:	fbb3 f9f8 	udiv	r9, r3, r8
 800052a:	0c2c      	lsrs	r4, r5, #16
 800052c:	fb08 3319 	mls	r3, r8, r9, r3
 8000530:	fa1f fa8e 	uxth.w	sl, lr
 8000534:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000538:	fb09 f40a 	mul.w	r4, r9, sl
 800053c:	429c      	cmp	r4, r3
 800053e:	fa02 f207 	lsl.w	r2, r2, r7
 8000542:	fa00 f107 	lsl.w	r1, r0, r7
 8000546:	d90b      	bls.n	8000560 <__udivmoddi4+0x1b0>
 8000548:	eb1e 0303 	adds.w	r3, lr, r3
 800054c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000550:	f080 8087 	bcs.w	8000662 <__udivmoddi4+0x2b2>
 8000554:	429c      	cmp	r4, r3
 8000556:	f240 8084 	bls.w	8000662 <__udivmoddi4+0x2b2>
 800055a:	f1a9 0902 	sub.w	r9, r9, #2
 800055e:	4473      	add	r3, lr
 8000560:	1b1b      	subs	r3, r3, r4
 8000562:	b2ad      	uxth	r5, r5
 8000564:	fbb3 f0f8 	udiv	r0, r3, r8
 8000568:	fb08 3310 	mls	r3, r8, r0, r3
 800056c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000570:	fb00 fa0a 	mul.w	sl, r0, sl
 8000574:	45a2      	cmp	sl, r4
 8000576:	d908      	bls.n	800058a <__udivmoddi4+0x1da>
 8000578:	eb1e 0404 	adds.w	r4, lr, r4
 800057c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000580:	d26b      	bcs.n	800065a <__udivmoddi4+0x2aa>
 8000582:	45a2      	cmp	sl, r4
 8000584:	d969      	bls.n	800065a <__udivmoddi4+0x2aa>
 8000586:	3802      	subs	r0, #2
 8000588:	4474      	add	r4, lr
 800058a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800058e:	fba0 8902 	umull	r8, r9, r0, r2
 8000592:	eba4 040a 	sub.w	r4, r4, sl
 8000596:	454c      	cmp	r4, r9
 8000598:	46c2      	mov	sl, r8
 800059a:	464b      	mov	r3, r9
 800059c:	d354      	bcc.n	8000648 <__udivmoddi4+0x298>
 800059e:	d051      	beq.n	8000644 <__udivmoddi4+0x294>
 80005a0:	2e00      	cmp	r6, #0
 80005a2:	d069      	beq.n	8000678 <__udivmoddi4+0x2c8>
 80005a4:	ebb1 050a 	subs.w	r5, r1, sl
 80005a8:	eb64 0403 	sbc.w	r4, r4, r3
 80005ac:	fa04 fc0c 	lsl.w	ip, r4, ip
 80005b0:	40fd      	lsrs	r5, r7
 80005b2:	40fc      	lsrs	r4, r7
 80005b4:	ea4c 0505 	orr.w	r5, ip, r5
 80005b8:	e9c6 5400 	strd	r5, r4, [r6]
 80005bc:	2700      	movs	r7, #0
 80005be:	e747      	b.n	8000450 <__udivmoddi4+0xa0>
 80005c0:	f1c2 0320 	rsb	r3, r2, #32
 80005c4:	fa20 f703 	lsr.w	r7, r0, r3
 80005c8:	4095      	lsls	r5, r2
 80005ca:	fa01 f002 	lsl.w	r0, r1, r2
 80005ce:	fa21 f303 	lsr.w	r3, r1, r3
 80005d2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80005d6:	4338      	orrs	r0, r7
 80005d8:	0c01      	lsrs	r1, r0, #16
 80005da:	fbb3 f7fe 	udiv	r7, r3, lr
 80005de:	fa1f f885 	uxth.w	r8, r5
 80005e2:	fb0e 3317 	mls	r3, lr, r7, r3
 80005e6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005ea:	fb07 f308 	mul.w	r3, r7, r8
 80005ee:	428b      	cmp	r3, r1
 80005f0:	fa04 f402 	lsl.w	r4, r4, r2
 80005f4:	d907      	bls.n	8000606 <__udivmoddi4+0x256>
 80005f6:	1869      	adds	r1, r5, r1
 80005f8:	f107 3cff 	add.w	ip, r7, #4294967295
 80005fc:	d22f      	bcs.n	800065e <__udivmoddi4+0x2ae>
 80005fe:	428b      	cmp	r3, r1
 8000600:	d92d      	bls.n	800065e <__udivmoddi4+0x2ae>
 8000602:	3f02      	subs	r7, #2
 8000604:	4429      	add	r1, r5
 8000606:	1acb      	subs	r3, r1, r3
 8000608:	b281      	uxth	r1, r0
 800060a:	fbb3 f0fe 	udiv	r0, r3, lr
 800060e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000612:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000616:	fb00 f308 	mul.w	r3, r0, r8
 800061a:	428b      	cmp	r3, r1
 800061c:	d907      	bls.n	800062e <__udivmoddi4+0x27e>
 800061e:	1869      	adds	r1, r5, r1
 8000620:	f100 3cff 	add.w	ip, r0, #4294967295
 8000624:	d217      	bcs.n	8000656 <__udivmoddi4+0x2a6>
 8000626:	428b      	cmp	r3, r1
 8000628:	d915      	bls.n	8000656 <__udivmoddi4+0x2a6>
 800062a:	3802      	subs	r0, #2
 800062c:	4429      	add	r1, r5
 800062e:	1ac9      	subs	r1, r1, r3
 8000630:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000634:	e73b      	b.n	80004ae <__udivmoddi4+0xfe>
 8000636:	4637      	mov	r7, r6
 8000638:	4630      	mov	r0, r6
 800063a:	e709      	b.n	8000450 <__udivmoddi4+0xa0>
 800063c:	4607      	mov	r7, r0
 800063e:	e6e7      	b.n	8000410 <__udivmoddi4+0x60>
 8000640:	4618      	mov	r0, r3
 8000642:	e6fb      	b.n	800043c <__udivmoddi4+0x8c>
 8000644:	4541      	cmp	r1, r8
 8000646:	d2ab      	bcs.n	80005a0 <__udivmoddi4+0x1f0>
 8000648:	ebb8 0a02 	subs.w	sl, r8, r2
 800064c:	eb69 020e 	sbc.w	r2, r9, lr
 8000650:	3801      	subs	r0, #1
 8000652:	4613      	mov	r3, r2
 8000654:	e7a4      	b.n	80005a0 <__udivmoddi4+0x1f0>
 8000656:	4660      	mov	r0, ip
 8000658:	e7e9      	b.n	800062e <__udivmoddi4+0x27e>
 800065a:	4618      	mov	r0, r3
 800065c:	e795      	b.n	800058a <__udivmoddi4+0x1da>
 800065e:	4667      	mov	r7, ip
 8000660:	e7d1      	b.n	8000606 <__udivmoddi4+0x256>
 8000662:	4681      	mov	r9, r0
 8000664:	e77c      	b.n	8000560 <__udivmoddi4+0x1b0>
 8000666:	3802      	subs	r0, #2
 8000668:	442c      	add	r4, r5
 800066a:	e747      	b.n	80004fc <__udivmoddi4+0x14c>
 800066c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000670:	442b      	add	r3, r5
 8000672:	e72f      	b.n	80004d4 <__udivmoddi4+0x124>
 8000674:	4638      	mov	r0, r7
 8000676:	e708      	b.n	800048a <__udivmoddi4+0xda>
 8000678:	4637      	mov	r7, r6
 800067a:	e6e9      	b.n	8000450 <__udivmoddi4+0xa0>

0800067c <__aeabi_idiv0>:
 800067c:	4770      	bx	lr
 800067e:	bf00      	nop

08000680 <Camera_Reset>:
uint8_t img_buf[67200];


// required set-up process for the camera to function, according to documentation
void Camera_Reset(UART_HandleTypeDef* huart, uint8_t* rec, uint8_t len_rec)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b088      	sub	sp, #32
 8000684:	af02      	add	r7, sp, #8
 8000686:	60f8      	str	r0, [r7, #12]
 8000688:	60b9      	str	r1, [r7, #8]
 800068a:	4613      	mov	r3, r2
 800068c:	71fb      	strb	r3, [r7, #7]
	printf("Size of receiving buffer: %d\n", len_rec);
 800068e:	79fb      	ldrb	r3, [r7, #7]
 8000690:	4619      	mov	r1, r3
 8000692:	4816      	ldr	r0, [pc, #88]	; (80006ec <Camera_Reset+0x6c>)
 8000694:	f00d f958 	bl	800d948 <iprintf>
	HAL_Delay(2500);	//2500 ms delay
 8000698:	f640 10c4 	movw	r0, #2500	; 0x9c4
 800069c:	f002 f822 	bl	80026e4 <HAL_Delay>
	send_UART(huart, CAM_RESET, rec, sizeof(CAM_RESET), len_rec);
 80006a0:	79fb      	ldrb	r3, [r7, #7]
 80006a2:	b29b      	uxth	r3, r3
 80006a4:	9300      	str	r3, [sp, #0]
 80006a6:	2305      	movs	r3, #5
 80006a8:	68ba      	ldr	r2, [r7, #8]
 80006aa:	4911      	ldr	r1, [pc, #68]	; (80006f0 <Camera_Reset+0x70>)
 80006ac:	68f8      	ldr	r0, [r7, #12]
 80006ae:	f000 f823 	bl	80006f8 <send_UART>

	for (int i = 0; i < len_rec; i++) {
 80006b2:	2300      	movs	r3, #0
 80006b4:	617b      	str	r3, [r7, #20]
 80006b6:	e00a      	b.n	80006ce <Camera_Reset+0x4e>
		printf("%d ", rec[i]);
 80006b8:	697b      	ldr	r3, [r7, #20]
 80006ba:	68ba      	ldr	r2, [r7, #8]
 80006bc:	4413      	add	r3, r2
 80006be:	781b      	ldrb	r3, [r3, #0]
 80006c0:	4619      	mov	r1, r3
 80006c2:	480c      	ldr	r0, [pc, #48]	; (80006f4 <Camera_Reset+0x74>)
 80006c4:	f00d f940 	bl	800d948 <iprintf>
	for (int i = 0; i < len_rec; i++) {
 80006c8:	697b      	ldr	r3, [r7, #20]
 80006ca:	3301      	adds	r3, #1
 80006cc:	617b      	str	r3, [r7, #20]
 80006ce:	79fb      	ldrb	r3, [r7, #7]
 80006d0:	697a      	ldr	r2, [r7, #20]
 80006d2:	429a      	cmp	r2, r3
 80006d4:	dbf0      	blt.n	80006b8 <Camera_Reset+0x38>
	}
	printf("\n");
 80006d6:	200a      	movs	r0, #10
 80006d8:	f00d f94e 	bl	800d978 <putchar>

	HAL_Delay(1000);
 80006dc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80006e0:	f002 f800 	bl	80026e4 <HAL_Delay>
}
 80006e4:	bf00      	nop
 80006e6:	3718      	adds	r7, #24
 80006e8:	46bd      	mov	sp, r7
 80006ea:	bd80      	pop	{r7, pc}
 80006ec:	0800e884 	.word	0x0800e884
 80006f0:	24000000 	.word	0x24000000
 80006f4:	0800e8a4 	.word	0x0800e8a4

080006f8 <send_UART>:

// abstracted function for general USART exchange, note that size of rec must be known beforehand for this to work
bool send_UART(UART_HandleTypeDef* huart, uint8_t* comm, uint8_t* rec, uint8_t len_comm, uint16_t len_rec)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b08c      	sub	sp, #48	; 0x30
 80006fc:	af02      	add	r7, sp, #8
 80006fe:	60f8      	str	r0, [r7, #12]
 8000700:	60b9      	str	r1, [r7, #8]
 8000702:	607a      	str	r2, [r7, #4]
 8000704:	70fb      	strb	r3, [r7, #3]
	HAL_StatusTypeDef res = HAL_ERROR;
 8000706:	2301      	movs	r3, #1
 8000708:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	res = HAL_UART_Receive(huart, junk, 255, 2);
 800070c:	2302      	movs	r3, #2
 800070e:	22ff      	movs	r2, #255	; 0xff
 8000710:	496d      	ldr	r1, [pc, #436]	; (80008c8 <send_UART+0x1d0>)
 8000712:	68f8      	ldr	r0, [r7, #12]
 8000714:	f008 fb95 	bl	8008e42 <HAL_UART_Receive>
 8000718:	4603      	mov	r3, r0
 800071a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	/*for (int i = 0; i < len_rec; i++)
			printf("%d ", rec[i]);
	printf("\n");*/
	rec[0] = 255;
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	22ff      	movs	r2, #255	; 0xff
 8000722:	701a      	strb	r2, [r3, #0]
	rec[1] = 10;
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	3301      	adds	r3, #1
 8000728:	220a      	movs	r2, #10
 800072a:	701a      	strb	r2, [r3, #0]
	rec[2] = 30;
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	3302      	adds	r3, #2
 8000730:	221e      	movs	r2, #30
 8000732:	701a      	strb	r2, [r3, #0]
	rec[3] = 40;
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	3303      	adds	r3, #3
 8000738:	2228      	movs	r2, #40	; 0x28
 800073a:	701a      	strb	r2, [r3, #0]
	rec[4] = 50;
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	3304      	adds	r3, #4
 8000740:	2232      	movs	r2, #50	; 0x32
 8000742:	701a      	strb	r2, [r3, #0]

	uint32_t tick3 = HAL_GetTick();
 8000744:	f001 ffc2 	bl	80026cc <HAL_GetTick>
 8000748:	61f8      	str	r0, [r7, #28]

	// fastest tx operation?
	huart->TxXferCount = len_comm;
 800074a:	78fb      	ldrb	r3, [r7, #3]
 800074c:	b29a      	uxth	r2, r3
 800074e:	68fb      	ldr	r3, [r7, #12]
 8000750:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
	huart->TxXferSize = len_comm;
 8000754:	78fb      	ldrb	r3, [r7, #3]
 8000756:	b29a      	uxth	r2, r3
 8000758:	68fb      	ldr	r3, [r7, #12]
 800075a:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
	while (huart->TxXferCount > 0U)
 800075e:	e01d      	b.n	800079c <send_UART+0xa4>
	    {
	      //ensure that Tx operations are finished before we continue
	      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tick3, 100) != HAL_OK)
 8000760:	2364      	movs	r3, #100	; 0x64
 8000762:	9300      	str	r3, [sp, #0]
 8000764:	69fb      	ldr	r3, [r7, #28]
 8000766:	2200      	movs	r2, #0
 8000768:	2180      	movs	r1, #128	; 0x80
 800076a:	68f8      	ldr	r0, [r7, #12]
 800076c:	f00b f838 	bl	800b7e0 <UART_WaitOnFlagUntilTimeout>
 8000770:	4603      	mov	r3, r0
 8000772:	2b00      	cmp	r3, #0
 8000774:	d001      	beq.n	800077a <send_UART+0x82>
	      {
	        return false;
 8000776:	2300      	movs	r3, #0
 8000778:	e0a2      	b.n	80008c0 <send_UART+0x1c8>
	      }

	      huart->Instance->TDR = (uint8_t)(*comm & 0xFFU); // what is the purpose of the & operation if the mask is just 0xFF
 800077a:	68bb      	ldr	r3, [r7, #8]
 800077c:	781a      	ldrb	r2, [r3, #0]
 800077e:	68fb      	ldr	r3, [r7, #12]
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	629a      	str	r2, [r3, #40]	; 0x28
	      comm++;
 8000784:	68bb      	ldr	r3, [r7, #8]
 8000786:	3301      	adds	r3, #1
 8000788:	60bb      	str	r3, [r7, #8]
	      huart->TxXferCount--;
 800078a:	68fb      	ldr	r3, [r7, #12]
 800078c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8000790:	b29b      	uxth	r3, r3
 8000792:	3b01      	subs	r3, #1
 8000794:	b29a      	uxth	r2, r3
 8000796:	68fb      	ldr	r3, [r7, #12]
 8000798:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
	while (huart->TxXferCount > 0U)
 800079c:	68fb      	ldr	r3, [r7, #12]
 800079e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80007a2:	b29b      	uxth	r3, r3
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d1db      	bne.n	8000760 <send_UART+0x68>
	    }


	// fastest rx operation, could make slightly faster on flag check
	huart->RxXferCount = len_rec;
 80007a8:	68fb      	ldr	r3, [r7, #12]
 80007aa:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 80007ac:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
	huart->RxXferSize  = len_rec;
 80007b0:	68fb      	ldr	r3, [r7, #12]
 80007b2:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 80007b4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
	uint8_t flag = 0;
 80007b8:	2300      	movs	r3, #0
 80007ba:	76fb      	strb	r3, [r7, #27]
	uint8_t* pData = rec;
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t tickstart = HAL_GetTick();
 80007c0:	f001 ff84 	bl	80026cc <HAL_GetTick>
 80007c4:	6178      	str	r0, [r7, #20]
	UART_MASK_COMPUTATION(huart);
 80007c6:	68fb      	ldr	r3, [r7, #12]
 80007c8:	689b      	ldr	r3, [r3, #8]
 80007ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80007ce:	d10e      	bne.n	80007ee <send_UART+0xf6>
 80007d0:	68fb      	ldr	r3, [r7, #12]
 80007d2:	691b      	ldr	r3, [r3, #16]
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d105      	bne.n	80007e4 <send_UART+0xec>
 80007d8:	68fb      	ldr	r3, [r7, #12]
 80007da:	f240 12ff 	movw	r2, #511	; 0x1ff
 80007de:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80007e2:	e05e      	b.n	80008a2 <send_UART+0x1aa>
 80007e4:	68fb      	ldr	r3, [r7, #12]
 80007e6:	22ff      	movs	r2, #255	; 0xff
 80007e8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80007ec:	e059      	b.n	80008a2 <send_UART+0x1aa>
 80007ee:	68fb      	ldr	r3, [r7, #12]
 80007f0:	689b      	ldr	r3, [r3, #8]
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d10d      	bne.n	8000812 <send_UART+0x11a>
 80007f6:	68fb      	ldr	r3, [r7, #12]
 80007f8:	691b      	ldr	r3, [r3, #16]
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d104      	bne.n	8000808 <send_UART+0x110>
 80007fe:	68fb      	ldr	r3, [r7, #12]
 8000800:	22ff      	movs	r2, #255	; 0xff
 8000802:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8000806:	e04c      	b.n	80008a2 <send_UART+0x1aa>
 8000808:	68fb      	ldr	r3, [r7, #12]
 800080a:	227f      	movs	r2, #127	; 0x7f
 800080c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8000810:	e047      	b.n	80008a2 <send_UART+0x1aa>
 8000812:	68fb      	ldr	r3, [r7, #12]
 8000814:	689b      	ldr	r3, [r3, #8]
 8000816:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800081a:	d10d      	bne.n	8000838 <send_UART+0x140>
 800081c:	68fb      	ldr	r3, [r7, #12]
 800081e:	691b      	ldr	r3, [r3, #16]
 8000820:	2b00      	cmp	r3, #0
 8000822:	d104      	bne.n	800082e <send_UART+0x136>
 8000824:	68fb      	ldr	r3, [r7, #12]
 8000826:	227f      	movs	r2, #127	; 0x7f
 8000828:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800082c:	e039      	b.n	80008a2 <send_UART+0x1aa>
 800082e:	68fb      	ldr	r3, [r7, #12]
 8000830:	223f      	movs	r2, #63	; 0x3f
 8000832:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8000836:	e034      	b.n	80008a2 <send_UART+0x1aa>
 8000838:	68fb      	ldr	r3, [r7, #12]
 800083a:	2200      	movs	r2, #0
 800083c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
	while (huart->RxXferCount > 0U)
 8000840:	e02f      	b.n	80008a2 <send_UART+0x1aa>
	    {
	       if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, 3000) != HAL_OK)
 8000842:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8000846:	9300      	str	r3, [sp, #0]
 8000848:	697b      	ldr	r3, [r7, #20]
 800084a:	2200      	movs	r2, #0
 800084c:	2120      	movs	r1, #32
 800084e:	68f8      	ldr	r0, [r7, #12]
 8000850:	f00a ffc6 	bl	800b7e0 <UART_WaitOnFlagUntilTimeout>
 8000854:	4603      	mov	r3, r0
 8000856:	2b00      	cmp	r3, #0
 8000858:	d00b      	beq.n	8000872 <send_UART+0x17a>
	       {
	    	 printf("\n\nBROKE LOOP ON RX, TIMEOUT AT %d ITERATION\n\n", len_rec - huart->RxXferCount);
 800085a:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800085c:	68fa      	ldr	r2, [r7, #12]
 800085e:	f8b2 205e 	ldrh.w	r2, [r2, #94]	; 0x5e
 8000862:	b292      	uxth	r2, r2
 8000864:	1a9b      	subs	r3, r3, r2
 8000866:	4619      	mov	r1, r3
 8000868:	4818      	ldr	r0, [pc, #96]	; (80008cc <send_UART+0x1d4>)
 800086a:	f00d f86d 	bl	800d948 <iprintf>
	         return HAL_TIMEOUT;
 800086e:	2301      	movs	r3, #1
 8000870:	e026      	b.n	80008c0 <send_UART+0x1c8>
	       }

	       *pData = (uint8_t)(huart->Instance->RDR & (uint8_t) huart->Mask);	// note that UART mask here is variable in HAL drivers, often 255 so that is default
 8000872:	68fb      	ldr	r3, [r7, #12]
 8000874:	681b      	ldr	r3, [r3, #0]
 8000876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000878:	b2da      	uxtb	r2, r3
 800087a:	68fb      	ldr	r3, [r7, #12]
 800087c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8000880:	b2db      	uxtb	r3, r3
 8000882:	4013      	ands	r3, r2
 8000884:	b2da      	uxtb	r2, r3
 8000886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000888:	701a      	strb	r2, [r3, #0]
	       pData++;
 800088a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800088c:	3301      	adds	r3, #1
 800088e:	627b      	str	r3, [r7, #36]	; 0x24

	       huart->RxXferCount--;
 8000890:	68fb      	ldr	r3, [r7, #12]
 8000892:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8000896:	b29b      	uxth	r3, r3
 8000898:	3b01      	subs	r3, #1
 800089a:	b29a      	uxth	r2, r3
 800089c:	68fb      	ldr	r3, [r7, #12]
 800089e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
	while (huart->RxXferCount > 0U)
 80008a2:	68fb      	ldr	r3, [r7, #12]
 80008a4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80008a8:	b29b      	uxth	r3, r3
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d1c9      	bne.n	8000842 <send_UART+0x14a>

	    }

	res = HAL_UART_Receive(huart, junk, 255, 2);
 80008ae:	2302      	movs	r3, #2
 80008b0:	22ff      	movs	r2, #255	; 0xff
 80008b2:	4905      	ldr	r1, [pc, #20]	; (80008c8 <send_UART+0x1d0>)
 80008b4:	68f8      	ldr	r0, [r7, #12]
 80008b6:	f008 fac4 	bl	8008e42 <HAL_UART_Receive>
 80008ba:	4603      	mov	r3, r0
 80008bc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
}
 80008c0:	4618      	mov	r0, r3
 80008c2:	3728      	adds	r7, #40	; 0x28
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bd80      	pop	{r7, pc}
 80008c8:	240670fc 	.word	0x240670fc
 80008cc:	0800e8a8 	.word	0x0800e8a8

080008d0 <Camera_Snapshot>:

//orders camera to take snapshot
void Camera_Snapshot(UART_HandleTypeDef* huart, uint8_t* rec, uint8_t len_rec) {
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b088      	sub	sp, #32
 80008d4:	af02      	add	r7, sp, #8
 80008d6:	60f8      	str	r0, [r7, #12]
 80008d8:	60b9      	str	r1, [r7, #8]
 80008da:	4613      	mov	r3, r2
 80008dc:	71fb      	strb	r3, [r7, #7]
	send_UART(huart, CAM_CAPTURE, rec, sizeof(CAM_CAPTURE), len_rec);
 80008de:	79fb      	ldrb	r3, [r7, #7]
 80008e0:	b29b      	uxth	r3, r3
 80008e2:	9300      	str	r3, [sp, #0]
 80008e4:	2305      	movs	r3, #5
 80008e6:	68ba      	ldr	r2, [r7, #8]
 80008e8:	490f      	ldr	r1, [pc, #60]	; (8000928 <Camera_Snapshot+0x58>)
 80008ea:	68f8      	ldr	r0, [r7, #12]
 80008ec:	f7ff ff04 	bl	80006f8 <send_UART>

	for (int i = 0; i < len_rec; i++)
 80008f0:	2300      	movs	r3, #0
 80008f2:	617b      	str	r3, [r7, #20]
 80008f4:	e00a      	b.n	800090c <Camera_Snapshot+0x3c>
		printf("%d ", rec[i]);
 80008f6:	697b      	ldr	r3, [r7, #20]
 80008f8:	68ba      	ldr	r2, [r7, #8]
 80008fa:	4413      	add	r3, r2
 80008fc:	781b      	ldrb	r3, [r3, #0]
 80008fe:	4619      	mov	r1, r3
 8000900:	480a      	ldr	r0, [pc, #40]	; (800092c <Camera_Snapshot+0x5c>)
 8000902:	f00d f821 	bl	800d948 <iprintf>
	for (int i = 0; i < len_rec; i++)
 8000906:	697b      	ldr	r3, [r7, #20]
 8000908:	3301      	adds	r3, #1
 800090a:	617b      	str	r3, [r7, #20]
 800090c:	79fb      	ldrb	r3, [r7, #7]
 800090e:	697a      	ldr	r2, [r7, #20]
 8000910:	429a      	cmp	r2, r3
 8000912:	dbf0      	blt.n	80008f6 <Camera_Snapshot+0x26>
	printf("\n");
 8000914:	200a      	movs	r0, #10
 8000916:	f00d f82f 	bl	800d978 <putchar>

	HAL_Delay(1);
 800091a:	2001      	movs	r0, #1
 800091c:	f001 fee2 	bl	80026e4 <HAL_Delay>
}
 8000920:	bf00      	nop
 8000922:	3718      	adds	r7, #24
 8000924:	46bd      	mov	sp, r7
 8000926:	bd80      	pop	{r7, pc}
 8000928:	24000060 	.word	0x24000060
 800092c:	0800e8a4 	.word	0x0800e8a4

08000930 <Camera_Stop_Capture>:

void Camera_Stop_Capture(UART_HandleTypeDef* huart, uint8_t* rec, uint8_t len_rec) {
 8000930:	b580      	push	{r7, lr}
 8000932:	b088      	sub	sp, #32
 8000934:	af02      	add	r7, sp, #8
 8000936:	60f8      	str	r0, [r7, #12]
 8000938:	60b9      	str	r1, [r7, #8]
 800093a:	4613      	mov	r3, r2
 800093c:	71fb      	strb	r3, [r7, #7]
	send_UART(huart, CAM_STOP_CAP, rec, sizeof(CAM_STOP_CAP), len_rec);
 800093e:	79fb      	ldrb	r3, [r7, #7]
 8000940:	b29b      	uxth	r3, r3
 8000942:	9300      	str	r3, [sp, #0]
 8000944:	2305      	movs	r3, #5
 8000946:	68ba      	ldr	r2, [r7, #8]
 8000948:	490f      	ldr	r1, [pc, #60]	; (8000988 <Camera_Stop_Capture+0x58>)
 800094a:	68f8      	ldr	r0, [r7, #12]
 800094c:	f7ff fed4 	bl	80006f8 <send_UART>

	for (int i = 0; i < len_rec; i++)
 8000950:	2300      	movs	r3, #0
 8000952:	617b      	str	r3, [r7, #20]
 8000954:	e00a      	b.n	800096c <Camera_Stop_Capture+0x3c>
		printf("%d ", rec[i]);
 8000956:	697b      	ldr	r3, [r7, #20]
 8000958:	68ba      	ldr	r2, [r7, #8]
 800095a:	4413      	add	r3, r2
 800095c:	781b      	ldrb	r3, [r3, #0]
 800095e:	4619      	mov	r1, r3
 8000960:	480a      	ldr	r0, [pc, #40]	; (800098c <Camera_Stop_Capture+0x5c>)
 8000962:	f00c fff1 	bl	800d948 <iprintf>
	for (int i = 0; i < len_rec; i++)
 8000966:	697b      	ldr	r3, [r7, #20]
 8000968:	3301      	adds	r3, #1
 800096a:	617b      	str	r3, [r7, #20]
 800096c:	79fb      	ldrb	r3, [r7, #7]
 800096e:	697a      	ldr	r2, [r7, #20]
 8000970:	429a      	cmp	r2, r3
 8000972:	dbf0      	blt.n	8000956 <Camera_Stop_Capture+0x26>
	printf("\n");
 8000974:	200a      	movs	r0, #10
 8000976:	f00c ffff 	bl	800d978 <putchar>

	HAL_Delay(1);
 800097a:	2001      	movs	r0, #1
 800097c:	f001 feb2 	bl	80026e4 <HAL_Delay>
}
 8000980:	bf00      	nop
 8000982:	3718      	adds	r7, #24
 8000984:	46bd      	mov	sp, r7
 8000986:	bd80      	pop	{r7, pc}
 8000988:	24000080 	.word	0x24000080
 800098c:	0800e8a4 	.word	0x0800e8a4

08000990 <Camera_Get_IMG_Length>:

//returns 2-value array of characters, first is high part of 16-bit length, second is low part
void Camera_Get_IMG_Length(UART_HandleTypeDef* huart, uint8_t* rec, uint8_t len_rec) {
 8000990:	b580      	push	{r7, lr}
 8000992:	b088      	sub	sp, #32
 8000994:	af02      	add	r7, sp, #8
 8000996:	60f8      	str	r0, [r7, #12]
 8000998:	60b9      	str	r1, [r7, #8]
 800099a:	4613      	mov	r3, r2
 800099c:	71fb      	strb	r3, [r7, #7]
	send_UART(huart, CAM_IMG_LENGTH, rec, sizeof(CAM_IMG_LENGTH), len_rec);
 800099e:	79fb      	ldrb	r3, [r7, #7]
 80009a0:	b29b      	uxth	r3, r3
 80009a2:	9300      	str	r3, [sp, #0]
 80009a4:	2305      	movs	r3, #5
 80009a6:	68ba      	ldr	r2, [r7, #8]
 80009a8:	490e      	ldr	r1, [pc, #56]	; (80009e4 <Camera_Get_IMG_Length+0x54>)
 80009aa:	68f8      	ldr	r0, [r7, #12]
 80009ac:	f7ff fea4 	bl	80006f8 <send_UART>

	for (int i = 0; i < len_rec; i++)
 80009b0:	2300      	movs	r3, #0
 80009b2:	617b      	str	r3, [r7, #20]
 80009b4:	e00a      	b.n	80009cc <Camera_Get_IMG_Length+0x3c>
			printf("%d ", rec[i]);
 80009b6:	697b      	ldr	r3, [r7, #20]
 80009b8:	68ba      	ldr	r2, [r7, #8]
 80009ba:	4413      	add	r3, r2
 80009bc:	781b      	ldrb	r3, [r3, #0]
 80009be:	4619      	mov	r1, r3
 80009c0:	4809      	ldr	r0, [pc, #36]	; (80009e8 <Camera_Get_IMG_Length+0x58>)
 80009c2:	f00c ffc1 	bl	800d948 <iprintf>
	for (int i = 0; i < len_rec; i++)
 80009c6:	697b      	ldr	r3, [r7, #20]
 80009c8:	3301      	adds	r3, #1
 80009ca:	617b      	str	r3, [r7, #20]
 80009cc:	79fb      	ldrb	r3, [r7, #7]
 80009ce:	697a      	ldr	r2, [r7, #20]
 80009d0:	429a      	cmp	r2, r3
 80009d2:	dbf0      	blt.n	80009b6 <Camera_Get_IMG_Length+0x26>
		printf("\n");
 80009d4:	200a      	movs	r0, #10
 80009d6:	f00c ffcf 	bl	800d978 <putchar>
}
 80009da:	bf00      	nop
 80009dc:	3718      	adds	r7, #24
 80009de:	46bd      	mov	sp, r7
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	bf00      	nop
 80009e4:	24000068 	.word	0x24000068
 80009e8:	0800e8a4 	.word	0x0800e8a4

080009ec <Camera_Get_IMG>:

//records the image into a statically allocated array of the given
void Camera_Get_IMG(UART_HandleTypeDef* huart, uint8_t* rec, uint16_t len_rec, uint8_t lengthH, uint8_t lengthL, uint8_t memH, uint8_t memL) {
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b086      	sub	sp, #24
 80009f0:	af02      	add	r7, sp, #8
 80009f2:	60f8      	str	r0, [r7, #12]
 80009f4:	60b9      	str	r1, [r7, #8]
 80009f6:	4611      	mov	r1, r2
 80009f8:	461a      	mov	r2, r3
 80009fa:	460b      	mov	r3, r1
 80009fc:	80fb      	strh	r3, [r7, #6]
 80009fe:	4613      	mov	r3, r2
 8000a00:	717b      	strb	r3, [r7, #5]

	CAM_READ_IMG[12] = lengthH;
 8000a02:	4a0c      	ldr	r2, [pc, #48]	; (8000a34 <Camera_Get_IMG+0x48>)
 8000a04:	797b      	ldrb	r3, [r7, #5]
 8000a06:	7313      	strb	r3, [r2, #12]
	CAM_READ_IMG[13] = lengthL;
 8000a08:	4a0a      	ldr	r2, [pc, #40]	; (8000a34 <Camera_Get_IMG+0x48>)
 8000a0a:	7e3b      	ldrb	r3, [r7, #24]
 8000a0c:	7353      	strb	r3, [r2, #13]

	CAM_READ_IMG[8] = memH;
 8000a0e:	4a09      	ldr	r2, [pc, #36]	; (8000a34 <Camera_Get_IMG+0x48>)
 8000a10:	7f3b      	ldrb	r3, [r7, #28]
 8000a12:	7213      	strb	r3, [r2, #8]
	CAM_READ_IMG[9] = memL;
 8000a14:	4a07      	ldr	r2, [pc, #28]	; (8000a34 <Camera_Get_IMG+0x48>)
 8000a16:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000a1a:	7253      	strb	r3, [r2, #9]

	send_UART(huart, CAM_READ_IMG, rec, sizeof(CAM_READ_IMG), len_rec);
 8000a1c:	88fb      	ldrh	r3, [r7, #6]
 8000a1e:	9300      	str	r3, [sp, #0]
 8000a20:	2310      	movs	r3, #16
 8000a22:	68ba      	ldr	r2, [r7, #8]
 8000a24:	4903      	ldr	r1, [pc, #12]	; (8000a34 <Camera_Get_IMG+0x48>)
 8000a26:	68f8      	ldr	r0, [r7, #12]
 8000a28:	f7ff fe66 	bl	80006f8 <send_UART>
	/*printf("IMAGE:\n\n");
	for (int i = 0; i < len_rec; i++)
			printf("%d ", rec[i]);
		printf("\n");*/

}
 8000a2c:	bf00      	nop
 8000a2e:	3710      	adds	r7, #16
 8000a30:	46bd      	mov	sp, r7
 8000a32:	bd80      	pop	{r7, pc}
 8000a34:	24000070 	.word	0x24000070

08000a38 <Camera_Set_Res>:

//sets the resolution of the image, full resolution likely not needed for crude processing
//0x00 is default for 640x480, to get 320x240 must manually send command, replace 0x00 with 0x11
// resolution = 6 sends 640x480, resolution = 3 sends 320x240, resolution = 1 sends 160x120
void Camera_Set_Res(UART_HandleTypeDef* huart, uint8_t* rec, uint8_t len_rec, uint8_t res) {
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b088      	sub	sp, #32
 8000a3c:	af02      	add	r7, sp, #8
 8000a3e:	60f8      	str	r0, [r7, #12]
 8000a40:	60b9      	str	r1, [r7, #8]
 8000a42:	4611      	mov	r1, r2
 8000a44:	461a      	mov	r2, r3
 8000a46:	460b      	mov	r3, r1
 8000a48:	71fb      	strb	r3, [r7, #7]
 8000a4a:	4613      	mov	r3, r2
 8000a4c:	71bb      	strb	r3, [r7, #6]

	// for 640x480
	if (res == 6)
 8000a4e:	79bb      	ldrb	r3, [r7, #6]
 8000a50:	2b06      	cmp	r3, #6
 8000a52:	d109      	bne.n	8000a68 <Camera_Set_Res+0x30>
		send_UART(huart, CAM_RES_640_480, rec, sizeof(CAM_RES_640_480), len_rec);
 8000a54:	79fb      	ldrb	r3, [r7, #7]
 8000a56:	b29b      	uxth	r3, r3
 8000a58:	9300      	str	r3, [sp, #0]
 8000a5a:	2309      	movs	r3, #9
 8000a5c:	68ba      	ldr	r2, [r7, #8]
 8000a5e:	491b      	ldr	r1, [pc, #108]	; (8000acc <Camera_Set_Res+0x94>)
 8000a60:	68f8      	ldr	r0, [r7, #12]
 8000a62:	f7ff fe49 	bl	80006f8 <send_UART>
 8000a66:	e018      	b.n	8000a9a <Camera_Set_Res+0x62>

	// for 320x240
	else if (res == 3)
 8000a68:	79bb      	ldrb	r3, [r7, #6]
 8000a6a:	2b03      	cmp	r3, #3
 8000a6c:	d109      	bne.n	8000a82 <Camera_Set_Res+0x4a>
		send_UART(huart, CAM_RES_320_240, rec, sizeof(CAM_RES_320_240), len_rec);
 8000a6e:	79fb      	ldrb	r3, [r7, #7]
 8000a70:	b29b      	uxth	r3, r3
 8000a72:	9300      	str	r3, [sp, #0]
 8000a74:	2309      	movs	r3, #9
 8000a76:	68ba      	ldr	r2, [r7, #8]
 8000a78:	4915      	ldr	r1, [pc, #84]	; (8000ad0 <Camera_Set_Res+0x98>)
 8000a7a:	68f8      	ldr	r0, [r7, #12]
 8000a7c:	f7ff fe3c 	bl	80006f8 <send_UART>
 8000a80:	e00b      	b.n	8000a9a <Camera_Set_Res+0x62>

	// for 160x120
	else if (res == 1)
 8000a82:	79bb      	ldrb	r3, [r7, #6]
 8000a84:	2b01      	cmp	r3, #1
 8000a86:	d108      	bne.n	8000a9a <Camera_Set_Res+0x62>
		send_UART(huart, CAM_RES_160_120, rec, sizeof(CAM_RES_160_120), len_rec);
 8000a88:	79fb      	ldrb	r3, [r7, #7]
 8000a8a:	b29b      	uxth	r3, r3
 8000a8c:	9300      	str	r3, [sp, #0]
 8000a8e:	2309      	movs	r3, #9
 8000a90:	68ba      	ldr	r2, [r7, #8]
 8000a92:	4910      	ldr	r1, [pc, #64]	; (8000ad4 <Camera_Set_Res+0x9c>)
 8000a94:	68f8      	ldr	r0, [r7, #12]
 8000a96:	f7ff fe2f 	bl	80006f8 <send_UART>

	for (int i = 0; i < len_rec; i++)
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	617b      	str	r3, [r7, #20]
 8000a9e:	e00a      	b.n	8000ab6 <Camera_Set_Res+0x7e>
			printf("%d ", rec[i]);
 8000aa0:	697b      	ldr	r3, [r7, #20]
 8000aa2:	68ba      	ldr	r2, [r7, #8]
 8000aa4:	4413      	add	r3, r2
 8000aa6:	781b      	ldrb	r3, [r3, #0]
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	480b      	ldr	r0, [pc, #44]	; (8000ad8 <Camera_Set_Res+0xa0>)
 8000aac:	f00c ff4c 	bl	800d948 <iprintf>
	for (int i = 0; i < len_rec; i++)
 8000ab0:	697b      	ldr	r3, [r7, #20]
 8000ab2:	3301      	adds	r3, #1
 8000ab4:	617b      	str	r3, [r7, #20]
 8000ab6:	79fb      	ldrb	r3, [r7, #7]
 8000ab8:	697a      	ldr	r2, [r7, #20]
 8000aba:	429a      	cmp	r2, r3
 8000abc:	dbf0      	blt.n	8000aa0 <Camera_Set_Res+0x68>
		printf("\n");
 8000abe:	200a      	movs	r0, #10
 8000ac0:	f00c ff5a 	bl	800d978 <putchar>
}
 8000ac4:	bf00      	nop
 8000ac6:	3718      	adds	r7, #24
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	bd80      	pop	{r7, pc}
 8000acc:	24000008 	.word	0x24000008
 8000ad0:	24000014 	.word	0x24000014
 8000ad4:	24000020 	.word	0x24000020
 8000ad8:	0800e8a4 	.word	0x0800e8a4

08000adc <Camera_Set_Compress>:

// function to ease customization of compression, higher compression is vastly preferable
void Camera_Set_Compress(UART_HandleTypeDef* huart, uint8_t* rec, uint8_t len_rec, uint8_t comp) {
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b088      	sub	sp, #32
 8000ae0:	af02      	add	r7, sp, #8
 8000ae2:	60f8      	str	r0, [r7, #12]
 8000ae4:	60b9      	str	r1, [r7, #8]
 8000ae6:	4611      	mov	r1, r2
 8000ae8:	461a      	mov	r2, r3
 8000aea:	460b      	mov	r3, r1
 8000aec:	71fb      	strb	r3, [r7, #7]
 8000aee:	4613      	mov	r3, r2
 8000af0:	71bb      	strb	r3, [r7, #6]
	CAM_COMPRESS[8] = comp;
 8000af2:	4a12      	ldr	r2, [pc, #72]	; (8000b3c <Camera_Set_Compress+0x60>)
 8000af4:	79bb      	ldrb	r3, [r7, #6]
 8000af6:	7213      	strb	r3, [r2, #8]

	send_UART(huart, CAM_COMPRESS, rec, sizeof(CAM_COMPRESS), len_rec);
 8000af8:	79fb      	ldrb	r3, [r7, #7]
 8000afa:	b29b      	uxth	r3, r3
 8000afc:	9300      	str	r3, [sp, #0]
 8000afe:	2309      	movs	r3, #9
 8000b00:	68ba      	ldr	r2, [r7, #8]
 8000b02:	490e      	ldr	r1, [pc, #56]	; (8000b3c <Camera_Set_Compress+0x60>)
 8000b04:	68f8      	ldr	r0, [r7, #12]
 8000b06:	f7ff fdf7 	bl	80006f8 <send_UART>

	for (int i = 0; i < len_rec; i++)
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	617b      	str	r3, [r7, #20]
 8000b0e:	e00a      	b.n	8000b26 <Camera_Set_Compress+0x4a>
		printf("%d ", rec[i]);
 8000b10:	697b      	ldr	r3, [r7, #20]
 8000b12:	68ba      	ldr	r2, [r7, #8]
 8000b14:	4413      	add	r3, r2
 8000b16:	781b      	ldrb	r3, [r3, #0]
 8000b18:	4619      	mov	r1, r3
 8000b1a:	4809      	ldr	r0, [pc, #36]	; (8000b40 <Camera_Set_Compress+0x64>)
 8000b1c:	f00c ff14 	bl	800d948 <iprintf>
	for (int i = 0; i < len_rec; i++)
 8000b20:	697b      	ldr	r3, [r7, #20]
 8000b22:	3301      	adds	r3, #1
 8000b24:	617b      	str	r3, [r7, #20]
 8000b26:	79fb      	ldrb	r3, [r7, #7]
 8000b28:	697a      	ldr	r2, [r7, #20]
 8000b2a:	429a      	cmp	r2, r3
 8000b2c:	dbf0      	blt.n	8000b10 <Camera_Set_Compress+0x34>
	printf("\n");
 8000b2e:	200a      	movs	r0, #10
 8000b30:	f00c ff22 	bl	800d978 <putchar>
}
 8000b34:	bf00      	nop
 8000b36:	3718      	adds	r7, #24
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bd80      	pop	{r7, pc}
 8000b3c:	2400002c 	.word	0x2400002c
 8000b40:	0800e8a4 	.word	0x0800e8a4

08000b44 <Camera_Set_Baud>:

// function to set the baud rate, pass the baud rate directly for check
void Camera_Set_Baud(UART_HandleTypeDef* huart, uint8_t* rec, uint8_t len_rec, uint32_t baud) {
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b088      	sub	sp, #32
 8000b48:	af02      	add	r7, sp, #8
 8000b4a:	60f8      	str	r0, [r7, #12]
 8000b4c:	60b9      	str	r1, [r7, #8]
 8000b4e:	603b      	str	r3, [r7, #0]
 8000b50:	4613      	mov	r3, r2
 8000b52:	71fb      	strb	r3, [r7, #7]

	if (baud == 9600) {
 8000b54:	683b      	ldr	r3, [r7, #0]
 8000b56:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
 8000b5a:	d115      	bne.n	8000b88 <Camera_Set_Baud+0x44>
		send_UART(huart, CAM_BAUD_9600, rec, sizeof(CAM_BAUD_9600), len_rec);
 8000b5c:	79fb      	ldrb	r3, [r7, #7]
 8000b5e:	b29b      	uxth	r3, r3
 8000b60:	9300      	str	r3, [sp, #0]
 8000b62:	2307      	movs	r3, #7
 8000b64:	68ba      	ldr	r2, [r7, #8]
 8000b66:	4948      	ldr	r1, [pc, #288]	; (8000c88 <Camera_Set_Baud+0x144>)
 8000b68:	68f8      	ldr	r0, [r7, #12]
 8000b6a:	f7ff fdc5 	bl	80006f8 <send_UART>
		HAL_UART_DeInit(huart);
 8000b6e:	68f8      	ldr	r0, [r7, #12]
 8000b70:	f008 f92e 	bl	8008dd0 <HAL_UART_DeInit>
		HAL_Delay(1);
 8000b74:	2001      	movs	r0, #1
 8000b76:	f001 fdb5 	bl	80026e4 <HAL_Delay>
		UART_Init_Baud(huart, UART8, 9600);
 8000b7a:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000b7e:	4943      	ldr	r1, [pc, #268]	; (8000c8c <Camera_Set_Baud+0x148>)
 8000b80:	68f8      	ldr	r0, [r7, #12]
 8000b82:	f000 f8fb 	bl	8000d7c <UART_Init_Baud>
 8000b86:	e066      	b.n	8000c56 <Camera_Set_Baud+0x112>
	}

	else if (baud == 19200) {
 8000b88:	683b      	ldr	r3, [r7, #0]
 8000b8a:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
 8000b8e:	d115      	bne.n	8000bbc <Camera_Set_Baud+0x78>
		send_UART(huart, CAM_BAUD_19200, rec, sizeof(CAM_BAUD_19200), len_rec);
 8000b90:	79fb      	ldrb	r3, [r7, #7]
 8000b92:	b29b      	uxth	r3, r3
 8000b94:	9300      	str	r3, [sp, #0]
 8000b96:	2307      	movs	r3, #7
 8000b98:	68ba      	ldr	r2, [r7, #8]
 8000b9a:	493d      	ldr	r1, [pc, #244]	; (8000c90 <Camera_Set_Baud+0x14c>)
 8000b9c:	68f8      	ldr	r0, [r7, #12]
 8000b9e:	f7ff fdab 	bl	80006f8 <send_UART>
		HAL_UART_DeInit(huart);
 8000ba2:	68f8      	ldr	r0, [r7, #12]
 8000ba4:	f008 f914 	bl	8008dd0 <HAL_UART_DeInit>
		HAL_Delay(1);
 8000ba8:	2001      	movs	r0, #1
 8000baa:	f001 fd9b 	bl	80026e4 <HAL_Delay>
		UART_Init_Baud(huart, UART8, 19200);
 8000bae:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 8000bb2:	4936      	ldr	r1, [pc, #216]	; (8000c8c <Camera_Set_Baud+0x148>)
 8000bb4:	68f8      	ldr	r0, [r7, #12]
 8000bb6:	f000 f8e1 	bl	8000d7c <UART_Init_Baud>
 8000bba:	e04c      	b.n	8000c56 <Camera_Set_Baud+0x112>
	}

	else if (baud == 38400) {
 8000bbc:	683b      	ldr	r3, [r7, #0]
 8000bbe:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
 8000bc2:	d115      	bne.n	8000bf0 <Camera_Set_Baud+0xac>
		send_UART(huart, CAM_BAUD_38400, rec, sizeof(CAM_BAUD_38400), len_rec);
 8000bc4:	79fb      	ldrb	r3, [r7, #7]
 8000bc6:	b29b      	uxth	r3, r3
 8000bc8:	9300      	str	r3, [sp, #0]
 8000bca:	2307      	movs	r3, #7
 8000bcc:	68ba      	ldr	r2, [r7, #8]
 8000bce:	4931      	ldr	r1, [pc, #196]	; (8000c94 <Camera_Set_Baud+0x150>)
 8000bd0:	68f8      	ldr	r0, [r7, #12]
 8000bd2:	f7ff fd91 	bl	80006f8 <send_UART>
		HAL_UART_DeInit(huart);
 8000bd6:	68f8      	ldr	r0, [r7, #12]
 8000bd8:	f008 f8fa 	bl	8008dd0 <HAL_UART_DeInit>
		HAL_Delay(1);
 8000bdc:	2001      	movs	r0, #1
 8000bde:	f001 fd81 	bl	80026e4 <HAL_Delay>
		UART_Init_Baud(huart, UART8, 38400);
 8000be2:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8000be6:	4929      	ldr	r1, [pc, #164]	; (8000c8c <Camera_Set_Baud+0x148>)
 8000be8:	68f8      	ldr	r0, [r7, #12]
 8000bea:	f000 f8c7 	bl	8000d7c <UART_Init_Baud>
 8000bee:	e032      	b.n	8000c56 <Camera_Set_Baud+0x112>
	}

	else if (baud == 57600) {
 8000bf0:	683b      	ldr	r3, [r7, #0]
 8000bf2:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
 8000bf6:	d115      	bne.n	8000c24 <Camera_Set_Baud+0xe0>
		send_UART(huart, CAM_BAUD_57600, rec, sizeof(CAM_BAUD_57600), len_rec);
 8000bf8:	79fb      	ldrb	r3, [r7, #7]
 8000bfa:	b29b      	uxth	r3, r3
 8000bfc:	9300      	str	r3, [sp, #0]
 8000bfe:	2307      	movs	r3, #7
 8000c00:	68ba      	ldr	r2, [r7, #8]
 8000c02:	4925      	ldr	r1, [pc, #148]	; (8000c98 <Camera_Set_Baud+0x154>)
 8000c04:	68f8      	ldr	r0, [r7, #12]
 8000c06:	f7ff fd77 	bl	80006f8 <send_UART>
		HAL_UART_DeInit(huart);
 8000c0a:	68f8      	ldr	r0, [r7, #12]
 8000c0c:	f008 f8e0 	bl	8008dd0 <HAL_UART_DeInit>
		HAL_Delay(1);
 8000c10:	2001      	movs	r0, #1
 8000c12:	f001 fd67 	bl	80026e4 <HAL_Delay>
		UART_Init_Baud(huart, UART8, 57600);
 8000c16:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8000c1a:	491c      	ldr	r1, [pc, #112]	; (8000c8c <Camera_Set_Baud+0x148>)
 8000c1c:	68f8      	ldr	r0, [r7, #12]
 8000c1e:	f000 f8ad 	bl	8000d7c <UART_Init_Baud>
 8000c22:	e018      	b.n	8000c56 <Camera_Set_Baud+0x112>
	}

	else if (baud == 115200) {
 8000c24:	683b      	ldr	r3, [r7, #0]
 8000c26:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
 8000c2a:	d114      	bne.n	8000c56 <Camera_Set_Baud+0x112>
		send_UART(huart, CAM_BAUD_115200, rec, sizeof(CAM_BAUD_115200), len_rec);
 8000c2c:	79fb      	ldrb	r3, [r7, #7]
 8000c2e:	b29b      	uxth	r3, r3
 8000c30:	9300      	str	r3, [sp, #0]
 8000c32:	2307      	movs	r3, #7
 8000c34:	68ba      	ldr	r2, [r7, #8]
 8000c36:	4919      	ldr	r1, [pc, #100]	; (8000c9c <Camera_Set_Baud+0x158>)
 8000c38:	68f8      	ldr	r0, [r7, #12]
 8000c3a:	f7ff fd5d 	bl	80006f8 <send_UART>
		HAL_UART_DeInit(huart);
 8000c3e:	68f8      	ldr	r0, [r7, #12]
 8000c40:	f008 f8c6 	bl	8008dd0 <HAL_UART_DeInit>
		HAL_Delay(1);
 8000c44:	2001      	movs	r0, #1
 8000c46:	f001 fd4d 	bl	80026e4 <HAL_Delay>
		UART_Init_Baud(huart, UART8, 115200);
 8000c4a:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c4e:	490f      	ldr	r1, [pc, #60]	; (8000c8c <Camera_Set_Baud+0x148>)
 8000c50:	68f8      	ldr	r0, [r7, #12]
 8000c52:	f000 f893 	bl	8000d7c <UART_Init_Baud>
	}

	for (int i = 0; i < len_rec; i++)
 8000c56:	2300      	movs	r3, #0
 8000c58:	617b      	str	r3, [r7, #20]
 8000c5a:	e00a      	b.n	8000c72 <Camera_Set_Baud+0x12e>
		printf("%d ", rec[i]);
 8000c5c:	697b      	ldr	r3, [r7, #20]
 8000c5e:	68ba      	ldr	r2, [r7, #8]
 8000c60:	4413      	add	r3, r2
 8000c62:	781b      	ldrb	r3, [r3, #0]
 8000c64:	4619      	mov	r1, r3
 8000c66:	480e      	ldr	r0, [pc, #56]	; (8000ca0 <Camera_Set_Baud+0x15c>)
 8000c68:	f00c fe6e 	bl	800d948 <iprintf>
	for (int i = 0; i < len_rec; i++)
 8000c6c:	697b      	ldr	r3, [r7, #20]
 8000c6e:	3301      	adds	r3, #1
 8000c70:	617b      	str	r3, [r7, #20]
 8000c72:	79fb      	ldrb	r3, [r7, #7]
 8000c74:	697a      	ldr	r2, [r7, #20]
 8000c76:	429a      	cmp	r2, r3
 8000c78:	dbf0      	blt.n	8000c5c <Camera_Set_Baud+0x118>
	printf("\n");
 8000c7a:	200a      	movs	r0, #10
 8000c7c:	f00c fe7c 	bl	800d978 <putchar>
}
 8000c80:	bf00      	nop
 8000c82:	3718      	adds	r7, #24
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bd80      	pop	{r7, pc}
 8000c88:	24000038 	.word	0x24000038
 8000c8c:	40007c00 	.word	0x40007c00
 8000c90:	24000040 	.word	0x24000040
 8000c94:	24000048 	.word	0x24000048
 8000c98:	24000050 	.word	0x24000050
 8000c9c:	24000058 	.word	0x24000058
 8000ca0:	0800e8a4 	.word	0x0800e8a4

08000ca4 <Camera_Initialize>:
   *  - Baudrate is also variable, we could set it to 115200 baud for faster data transfer but if the camera resets, it will go back to 38400 baud
   *
   *  All of the above steps should really only be handled one time, at system initialization. If we are disconnected from power, however,
   *  the camera is supposed to be reset in its normal flow. This is likely not be necessary, more testing is needed.
   */
void Camera_Initialize(UART_HandleTypeDef* huart, uint8_t resolution, uint8_t compression, uint32_t baud) {
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b090      	sub	sp, #64	; 0x40
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	60f8      	str	r0, [r7, #12]
 8000cac:	607b      	str	r3, [r7, #4]
 8000cae:	460b      	mov	r3, r1
 8000cb0:	72fb      	strb	r3, [r7, #11]
 8000cb2:	4613      	mov	r3, r2
 8000cb4:	72bb      	strb	r3, [r7, #10]
	  uint8_t reset_ack[5];
	  reset_ack[0] = 0;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	  uint8_t* reset_ack1 = reset_ack;
 8000cbc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000cc0:	63fb      	str	r3, [r7, #60]	; 0x3c

	  Camera_Reset(huart, reset_ack1, sizeof(reset_ack));
 8000cc2:	2205      	movs	r2, #5
 8000cc4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8000cc6:	68f8      	ldr	r0, [r7, #12]
 8000cc8:	f7ff fcda 	bl	8000680 <Camera_Reset>

	  if (reset_ack[0] == 0x76)
 8000ccc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000cd0:	2b76      	cmp	r3, #118	; 0x76
 8000cd2:	d103      	bne.n	8000cdc <Camera_Initialize+0x38>
		  printf("Ack for reset received.\n");
 8000cd4:	4822      	ldr	r0, [pc, #136]	; (8000d60 <Camera_Initialize+0xbc>)
 8000cd6:	f00c febf 	bl	800da58 <puts>
 8000cda:	e002      	b.n	8000ce2 <Camera_Initialize+0x3e>
	  else
	  	  printf("No ack received for reset.\n");
 8000cdc:	4821      	ldr	r0, [pc, #132]	; (8000d64 <Camera_Initialize+0xc0>)
 8000cde:	f00c febb 	bl	800da58 <puts>

	  uint8_t resol_ack[5];
	  uint8_t* resol_ack1 = resol_ack;
 8000ce2:	f107 0320 	add.w	r3, r7, #32
 8000ce6:	63bb      	str	r3, [r7, #56]	; 0x38
	  Camera_Set_Res(huart, resol_ack1, sizeof(resol_ack), resolution);
 8000ce8:	7afb      	ldrb	r3, [r7, #11]
 8000cea:	2205      	movs	r2, #5
 8000cec:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8000cee:	68f8      	ldr	r0, [r7, #12]
 8000cf0:	f7ff fea2 	bl	8000a38 <Camera_Set_Res>

	  if (resol_ack[0] == 0x76)
 8000cf4:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000cf8:	2b76      	cmp	r3, #118	; 0x76
 8000cfa:	d103      	bne.n	8000d04 <Camera_Initialize+0x60>
		  printf("Ack for resolution received.\n");
 8000cfc:	481a      	ldr	r0, [pc, #104]	; (8000d68 <Camera_Initialize+0xc4>)
 8000cfe:	f00c feab 	bl	800da58 <puts>
 8000d02:	e002      	b.n	8000d0a <Camera_Initialize+0x66>
	  else
		  printf("No ack received for resolution.\n");
 8000d04:	4819      	ldr	r0, [pc, #100]	; (8000d6c <Camera_Initialize+0xc8>)
 8000d06:	f00c fea7 	bl	800da58 <puts>

	  uint8_t compress_ack[5];
	  uint8_t* compress_ack1 = compress_ack;
 8000d0a:	f107 0318 	add.w	r3, r7, #24
 8000d0e:	637b      	str	r3, [r7, #52]	; 0x34
	  Camera_Set_Compress(huart, compress_ack1, sizeof(compress_ack), compression);
 8000d10:	7abb      	ldrb	r3, [r7, #10]
 8000d12:	2205      	movs	r2, #5
 8000d14:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8000d16:	68f8      	ldr	r0, [r7, #12]
 8000d18:	f7ff fee0 	bl	8000adc <Camera_Set_Compress>

	  if (compress_ack[0] == 0x76)
 8000d1c:	7e3b      	ldrb	r3, [r7, #24]
 8000d1e:	2b76      	cmp	r3, #118	; 0x76
 8000d20:	d103      	bne.n	8000d2a <Camera_Initialize+0x86>
		  printf("Ack for compression received.\n");
 8000d22:	4813      	ldr	r0, [pc, #76]	; (8000d70 <Camera_Initialize+0xcc>)
 8000d24:	f00c fe98 	bl	800da58 <puts>
 8000d28:	e002      	b.n	8000d30 <Camera_Initialize+0x8c>
	  else
		  printf("No ack received for resolution.\n");
 8000d2a:	4810      	ldr	r0, [pc, #64]	; (8000d6c <Camera_Initialize+0xc8>)
 8000d2c:	f00c fe94 	bl	800da58 <puts>

	  uint8_t baud_ack[5];
	  uint8_t* baud_ack1 = baud_ack;
 8000d30:	f107 0310 	add.w	r3, r7, #16
 8000d34:	633b      	str	r3, [r7, #48]	; 0x30
	  Camera_Set_Baud(huart, baud_ack1, sizeof(baud_ack), baud);
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	2205      	movs	r2, #5
 8000d3a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8000d3c:	68f8      	ldr	r0, [r7, #12]
 8000d3e:	f7ff ff01 	bl	8000b44 <Camera_Set_Baud>

	  if (baud_ack[0] == 0x76)
 8000d42:	7c3b      	ldrb	r3, [r7, #16]
 8000d44:	2b76      	cmp	r3, #118	; 0x76
 8000d46:	d103      	bne.n	8000d50 <Camera_Initialize+0xac>
		  printf("Ack for baudrate received.\n");
 8000d48:	480a      	ldr	r0, [pc, #40]	; (8000d74 <Camera_Initialize+0xd0>)
 8000d4a:	f00c fe85 	bl	800da58 <puts>
	  else
		  printf("No ack received for baudrate.\n");

}
 8000d4e:	e002      	b.n	8000d56 <Camera_Initialize+0xb2>
		  printf("No ack received for baudrate.\n");
 8000d50:	4809      	ldr	r0, [pc, #36]	; (8000d78 <Camera_Initialize+0xd4>)
 8000d52:	f00c fe81 	bl	800da58 <puts>
}
 8000d56:	bf00      	nop
 8000d58:	3740      	adds	r7, #64	; 0x40
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	bf00      	nop
 8000d60:	0800e8d8 	.word	0x0800e8d8
 8000d64:	0800e8f0 	.word	0x0800e8f0
 8000d68:	0800e90c 	.word	0x0800e90c
 8000d6c:	0800e92c 	.word	0x0800e92c
 8000d70:	0800e94c 	.word	0x0800e94c
 8000d74:	0800e96c 	.word	0x0800e96c
 8000d78:	0800e988 	.word	0x0800e988

08000d7c <UART_Init_Baud>:

// function used purely to properly DeInit and then Init with a baud rate aside from our CubeMX generation
// by default, pass huart8 and UART8 for huart and name
void UART_Init_Baud(UART_HandleTypeDef* huart, USART_TypeDef* name, uint32_t baud) {
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b084      	sub	sp, #16
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	60f8      	str	r0, [r7, #12]
 8000d84:	60b9      	str	r1, [r7, #8]
 8000d86:	607a      	str	r2, [r7, #4]

  huart->Instance = name;
 8000d88:	68fb      	ldr	r3, [r7, #12]
 8000d8a:	68ba      	ldr	r2, [r7, #8]
 8000d8c:	601a      	str	r2, [r3, #0]
  huart->Init.BaudRate = baud;
 8000d8e:	68fb      	ldr	r3, [r7, #12]
 8000d90:	687a      	ldr	r2, [r7, #4]
 8000d92:	605a      	str	r2, [r3, #4]
  huart->Init.WordLength = UART_WORDLENGTH_8B;
 8000d94:	68fb      	ldr	r3, [r7, #12]
 8000d96:	2200      	movs	r2, #0
 8000d98:	609a      	str	r2, [r3, #8]
  huart->Init.StopBits = UART_STOPBITS_1;
 8000d9a:	68fb      	ldr	r3, [r7, #12]
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	60da      	str	r2, [r3, #12]
  huart->Init.Parity = UART_PARITY_NONE;
 8000da0:	68fb      	ldr	r3, [r7, #12]
 8000da2:	2200      	movs	r2, #0
 8000da4:	611a      	str	r2, [r3, #16]
  huart->Init.Mode = UART_MODE_TX_RX;
 8000da6:	68fb      	ldr	r3, [r7, #12]
 8000da8:	220c      	movs	r2, #12
 8000daa:	615a      	str	r2, [r3, #20]
  huart->Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000dac:	68fb      	ldr	r3, [r7, #12]
 8000dae:	2200      	movs	r2, #0
 8000db0:	619a      	str	r2, [r3, #24]
  huart->Init.OverSampling = UART_OVERSAMPLING_16;
 8000db2:	68fb      	ldr	r3, [r7, #12]
 8000db4:	2200      	movs	r2, #0
 8000db6:	61da      	str	r2, [r3, #28]
  huart->Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000db8:	68fb      	ldr	r3, [r7, #12]
 8000dba:	2200      	movs	r2, #0
 8000dbc:	621a      	str	r2, [r3, #32]
  huart->Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000dbe:	68fb      	ldr	r3, [r7, #12]
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	625a      	str	r2, [r3, #36]	; 0x24
  huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000dc4:	68fb      	ldr	r3, [r7, #12]
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	629a      	str	r2, [r3, #40]	; 0x28
  huart->AdvancedInit.AutoBaudRateEnable = UART_ADVFEATURE_AUTOBAUDRATE_ENABLE;
 8000dca:	68fb      	ldr	r3, [r7, #12]
 8000dcc:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000dd0:	645a      	str	r2, [r3, #68]	; 0x44
  huart->AdvancedInit.AutoBaudRateMode = UART_ADVFEATURE_AUTOBAUDRATE_ONSTARTBIT;
 8000dd2:	68fb      	ldr	r3, [r7, #12]
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	649a      	str	r2, [r3, #72]	; 0x48
  if (HAL_UART_Init(huart) != HAL_OK)
 8000dd8:	68f8      	ldr	r0, [r7, #12]
 8000dda:	f007 ffa9 	bl	8008d30 <HAL_UART_Init>
 8000dde:	4603      	mov	r3, r0
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d001      	beq.n	8000de8 <UART_Init_Baud+0x6c>
  {
    Cam_Error_Handler();
 8000de4:	f000 f81f 	bl	8000e26 <Cam_Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(huart, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000de8:	2100      	movs	r1, #0
 8000dea:	68f8      	ldr	r0, [r7, #12]
 8000dec:	f00a fe25 	bl	800ba3a <HAL_UARTEx_SetTxFifoThreshold>
 8000df0:	4603      	mov	r3, r0
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d001      	beq.n	8000dfa <UART_Init_Baud+0x7e>
  {
    Cam_Error_Handler();
 8000df6:	f000 f816 	bl	8000e26 <Cam_Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(huart, UART_RXFIFO_THRESHOLD_8_8) != HAL_OK)
 8000dfa:	f04f 6120 	mov.w	r1, #167772160	; 0xa000000
 8000dfe:	68f8      	ldr	r0, [r7, #12]
 8000e00:	f00a fe59 	bl	800bab6 <HAL_UARTEx_SetRxFifoThreshold>
 8000e04:	4603      	mov	r3, r0
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d001      	beq.n	8000e0e <UART_Init_Baud+0x92>
  {
    Cam_Error_Handler();
 8000e0a:	f000 f80c 	bl	8000e26 <Cam_Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(huart) != HAL_OK)
 8000e0e:	68f8      	ldr	r0, [r7, #12]
 8000e10:	f00a fdd8 	bl	800b9c4 <HAL_UARTEx_EnableFifoMode>
 8000e14:	4603      	mov	r3, r0
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d001      	beq.n	8000e1e <UART_Init_Baud+0xa2>
  {
    Cam_Error_Handler();
 8000e1a:	f000 f804 	bl	8000e26 <Cam_Error_Handler>
  }

}
 8000e1e:	bf00      	nop
 8000e20:	3710      	adds	r7, #16
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bd80      	pop	{r7, pc}

08000e26 <Cam_Error_Handler>:

// currently useless, but could be filled if desired
void Cam_Error_Handler(void)
{
 8000e26:	b480      	push	{r7}
 8000e28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000e2a:	bf00      	nop
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e32:	4770      	bx	lr

08000e34 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000e34:	b480      	push	{r7}
 8000e36:	b083      	sub	sp, #12
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000e3c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000e40:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000e44:	f003 0301 	and.w	r3, r3, #1
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d009      	beq.n	8000e60 <ITM_SendChar+0x2c>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000e4c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000e50:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000e54:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d001      	beq.n	8000e60 <ITM_SendChar+0x2c>
 8000e5c:	2301      	movs	r3, #1
 8000e5e:	e000      	b.n	8000e62 <ITM_SendChar+0x2e>
 8000e60:	2300      	movs	r3, #0
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d010      	beq.n	8000e88 <ITM_SendChar+0x54>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000e66:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	bf0c      	ite	eq
 8000e70:	2301      	moveq	r3, #1
 8000e72:	2300      	movne	r3, #0
 8000e74:	b2db      	uxtb	r3, r3
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d001      	beq.n	8000e7e <ITM_SendChar+0x4a>
    {
      __NOP();
 8000e7a:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000e7c:	e7f3      	b.n	8000e66 <ITM_SendChar+0x32>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000e7e:	687a      	ldr	r2, [r7, #4]
 8000e80:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000e84:	b2d2      	uxtb	r2, r2
 8000e86:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000e88:	687b      	ldr	r3, [r7, #4]
}
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	370c      	adds	r7, #12
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e94:	4770      	bx	lr

08000e96 <_ZN11HAL_VL53L0X11rangingTestEP32VL53L0X_RangingMeasurementData_tb>:
     Serial.print during execution. Defaults to false.
      @returns True if address was set successfully, False otherwise
  */
  /**************************************************************************/
  VL53L0X_Error
  rangingTest(VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
 8000e96:	b580      	push	{r7, lr}
 8000e98:	b084      	sub	sp, #16
 8000e9a:	af00      	add	r7, sp, #0
 8000e9c:	60f8      	str	r0, [r7, #12]
 8000e9e:	60b9      	str	r1, [r7, #8]
 8000ea0:	4613      	mov	r3, r2
 8000ea2:	71fb      	strb	r3, [r7, #7]
              bool debug = false) {
    return getSingleRangingMeasurement(pRangingMeasurementData, debug);
 8000ea4:	79fb      	ldrb	r3, [r7, #7]
 8000ea6:	461a      	mov	r2, r3
 8000ea8:	68b9      	ldr	r1, [r7, #8]
 8000eaa:	68f8      	ldr	r0, [r7, #12]
 8000eac:	f00a feaa 	bl	800bc04 <_ZN11HAL_VL53L0X27getSingleRangingMeasurementEP32VL53L0X_RangingMeasurementData_tb>
 8000eb0:	4603      	mov	r3, r0
  };
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	3710      	adds	r7, #16
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}

08000eba <_ZN11HAL_VL53L0XC1Ev>:
class HAL_VL53L0X {
 8000eba:	b480      	push	{r7}
 8000ebc:	b083      	sub	sp, #12
 8000ebe:	af00      	add	r7, sp, #0
 8000ec0:	6078      	str	r0, [r7, #4]
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	701a      	strb	r2, [r3, #0]
      VL53L0X_ERROR_NONE; ///< indicates whether or not the sensor has
                          ///< encountered an error

private:
  VL53L0X_Dev_t MyDevice;
  VL53L0X_Dev_t *pMyDevice = &MyDevice;
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	1d1a      	adds	r2, r3, #4
class HAL_VL53L0X {
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
  VL53L0X_Version_t Version;
  VL53L0X_Version_t *pVersion = &Version;
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	f503 72b6 	add.w	r2, r3, #364	; 0x16c
class HAL_VL53L0X {
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	f8c3 2174 	str.w	r2, [r3, #372]	; 0x174
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	370c      	adds	r7, #12
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eea:	4770      	bx	lr

08000eec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000eec:	b5b0      	push	{r4, r5, r7, lr}
 8000eee:	b0a0      	sub	sp, #128	; 0x80
 8000ef0:	af04      	add	r7, sp, #16
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ef2:	f001 fb69 	bl	80025c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ef6:	f000 fa5f 	bl	80013b8 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000efa:	f000 fc3d 	bl	8001778 <_ZL12MX_GPIO_Initv>
  MX_I2C1_Init();
 8000efe:	f000 fb25 	bl	800154c <_ZL12MX_I2C1_Initv>
  MX_JPEG_Init();
 8000f02:	f000 fbbf 	bl	8001684 <_ZL12MX_JPEG_Initv>
  MX_UART8_Init();
 8000f06:	f000 fbd5 	bl	80016b4 <_ZL13MX_UART8_Initv>
  MX_I2C3_Init();
 8000f0a:	f000 fb6d 	bl	80015e8 <_ZL12MX_I2C3_Initv>
  /* USER CODE BEGIN 2 */

  printf("Beginning ToF initialization...\n");
 8000f0e:	487f      	ldr	r0, [pc, #508]	; (800110c <main+0x220>)
 8000f10:	f00c fda2 	bl	800da58 <puts>

   HAL_GPIO_WritePin(GPIOA, SH1_Pin, GPIO_PIN_RESET);
 8000f14:	2200      	movs	r2, #0
 8000f16:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f1a:	487d      	ldr	r0, [pc, #500]	; (8001110 <main+0x224>)
 8000f1c:	f002 f9a0 	bl	8003260 <HAL_GPIO_WritePin>
   HAL_GPIO_WritePin(GPIOA, SH2_Pin, GPIO_PIN_RESET);
 8000f20:	2200      	movs	r2, #0
 8000f22:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f26:	487a      	ldr	r0, [pc, #488]	; (8001110 <main+0x224>)
 8000f28:	f002 f99a 	bl	8003260 <HAL_GPIO_WritePin>
   HAL_GPIO_WritePin(GPIOA, SH3_Pin, GPIO_PIN_RESET);
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f32:	4877      	ldr	r0, [pc, #476]	; (8001110 <main+0x224>)
 8000f34:	f002 f994 	bl	8003260 <HAL_GPIO_WritePin>
   HAL_GPIO_WritePin(GPIOA, SH4_Pin, GPIO_PIN_RESET);
 8000f38:	2200      	movs	r2, #0
 8000f3a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f3e:	4874      	ldr	r0, [pc, #464]	; (8001110 <main+0x224>)
 8000f40:	f002 f98e 	bl	8003260 <HAL_GPIO_WritePin>
   HAL_GPIO_WritePin(GPIOC, SH5_Pin, GPIO_PIN_RESET);
 8000f44:	2200      	movs	r2, #0
 8000f46:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f4a:	4872      	ldr	r0, [pc, #456]	; (8001114 <main+0x228>)
 8000f4c:	f002 f988 	bl	8003260 <HAL_GPIO_WritePin>
   HAL_GPIO_WritePin(GPIOC, SH6_Pin, GPIO_PIN_RESET);
 8000f50:	2200      	movs	r2, #0
 8000f52:	2180      	movs	r1, #128	; 0x80
 8000f54:	486f      	ldr	r0, [pc, #444]	; (8001114 <main+0x228>)
 8000f56:	f002 f983 	bl	8003260 <HAL_GPIO_WritePin>
   HAL_GPIO_WritePin(GPIOC, SH7_Pin, GPIO_PIN_RESET);
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	2140      	movs	r1, #64	; 0x40
 8000f5e:	486d      	ldr	r0, [pc, #436]	; (8001114 <main+0x228>)
 8000f60:	f002 f97e 	bl	8003260 <HAL_GPIO_WritePin>

   HAL_Delay(10);
 8000f64:	200a      	movs	r0, #10
 8000f66:	f001 fbbd 	bl	80026e4 <HAL_Delay>
   HAL_GPIO_WritePin(GPIOC, SH7_Pin, GPIO_PIN_SET);
   if (!sensor[6].begin(TOF_ADD7, false, &hi2c1))
 	  printf("Begin statement 7 failed.\n");
 	  */

   printf("Finished ToF initialization thus far.\n");
 8000f6a:	486b      	ldr	r0, [pc, #428]	; (8001118 <main+0x22c>)
 8000f6c:	f00c fd74 	bl	800da58 <puts>

   // initialize camera before anything else with desired resolution, amount of compression (0x0 to 0xFF), and baudrate
   // note: current issue exists, it appears that attempting to change the baud rate will change the camera's baud rate, but our UART will stay
   //		at 38400 baud, we lose out on 3x speedup because of this but we are unsure of how to fix
   Camera_Initialize(&huart8, 1, 0xFF, 38400);
 8000f70:	f44f 4316 	mov.w	r3, #38400	; 0x9600
 8000f74:	22ff      	movs	r2, #255	; 0xff
 8000f76:	2101      	movs	r1, #1
 8000f78:	4868      	ldr	r0, [pc, #416]	; (800111c <main+0x230>)
 8000f7a:	f7ff fe93 	bl	8000ca4 <Camera_Initialize>
   HAL_Delay(10);
 8000f7e:	200a      	movs	r0, #10
 8000f80:	f001 fbb0 	bl	80026e4 <HAL_Delay>

   //initialization of frameptr, must be incremented to request images correctly
   uint16_t frameptr = 0;
 8000f84:	2300      	movs	r3, #0
 8000f86:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e

   HAL_StatusTypeDef result = HAL_ERROR;
 8000f8a:	2301      	movs	r3, #1
 8000f8c:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d

   // initialization of circular buffer
   for (int i = 0; i < buff_list_size-1; i++) {
 8000f90:	2300      	movs	r3, #0
 8000f92:	66fb      	str	r3, [r7, #108]	; 0x6c
 8000f94:	4b62      	ldr	r3, [pc, #392]	; (8001120 <main+0x234>)
 8000f96:	781b      	ldrb	r3, [r3, #0]
 8000f98:	3b01      	subs	r3, #1
 8000f9a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8000f9c:	429a      	cmp	r2, r3
 8000f9e:	da1b      	bge.n	8000fd8 <main+0xec>
    buffer_list[i].jpeg_size = 0;
 8000fa0:	4a60      	ldr	r2, [pc, #384]	; (8001124 <main+0x238>)
 8000fa2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000fa4:	4960      	ldr	r1, [pc, #384]	; (8001128 <main+0x23c>)
 8000fa6:	fb01 f303 	mul.w	r3, r1, r3
 8000faa:	4413      	add	r3, r2
 8000fac:	2200      	movs	r2, #0
 8000fae:	801a      	strh	r2, [r3, #0]
    buffer_list[i].next = buffer_list + i + 1;
 8000fb0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000fb2:	3301      	adds	r3, #1
 8000fb4:	4a5c      	ldr	r2, [pc, #368]	; (8001128 <main+0x23c>)
 8000fb6:	fb02 f303 	mul.w	r3, r2, r3
 8000fba:	4a5a      	ldr	r2, [pc, #360]	; (8001124 <main+0x238>)
 8000fbc:	441a      	add	r2, r3
 8000fbe:	4959      	ldr	r1, [pc, #356]	; (8001124 <main+0x238>)
 8000fc0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000fc2:	4859      	ldr	r0, [pc, #356]	; (8001128 <main+0x23c>)
 8000fc4:	fb00 f303 	mul.w	r3, r0, r3
 8000fc8:	4419      	add	r1, r3
 8000fca:	4b58      	ldr	r3, [pc, #352]	; (800112c <main+0x240>)
 8000fcc:	440b      	add	r3, r1
 8000fce:	601a      	str	r2, [r3, #0]
   for (int i = 0; i < buff_list_size-1; i++) {
 8000fd0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000fd2:	3301      	adds	r3, #1
 8000fd4:	66fb      	str	r3, [r7, #108]	; 0x6c
 8000fd6:	e7dd      	b.n	8000f94 <main+0xa8>
   }
   buffer_list[buff_list_size-1].jpeg_size = 0;
 8000fd8:	4b51      	ldr	r3, [pc, #324]	; (8001120 <main+0x234>)
 8000fda:	781b      	ldrb	r3, [r3, #0]
 8000fdc:	3b01      	subs	r3, #1
 8000fde:	4a51      	ldr	r2, [pc, #324]	; (8001124 <main+0x238>)
 8000fe0:	4951      	ldr	r1, [pc, #324]	; (8001128 <main+0x23c>)
 8000fe2:	fb01 f303 	mul.w	r3, r1, r3
 8000fe6:	4413      	add	r3, r2
 8000fe8:	2200      	movs	r2, #0
 8000fea:	801a      	strh	r2, [r3, #0]
   buffer_list[buff_list_size-1].next = buffer_list;
 8000fec:	4b4c      	ldr	r3, [pc, #304]	; (8001120 <main+0x234>)
 8000fee:	781b      	ldrb	r3, [r3, #0]
 8000ff0:	3b01      	subs	r3, #1
 8000ff2:	4a4c      	ldr	r2, [pc, #304]	; (8001124 <main+0x238>)
 8000ff4:	494c      	ldr	r1, [pc, #304]	; (8001128 <main+0x23c>)
 8000ff6:	fb01 f303 	mul.w	r3, r1, r3
 8000ffa:	441a      	add	r2, r3
 8000ffc:	4b4b      	ldr	r3, [pc, #300]	; (800112c <main+0x240>)
 8000ffe:	4413      	add	r3, r2
 8001000:	4a48      	ldr	r2, [pc, #288]	; (8001124 <main+0x238>)
 8001002:	601a      	str	r2, [r3, #0]

   buffer_link* curr_link = buffer_list;
 8001004:	4b47      	ldr	r3, [pc, #284]	; (8001124 <main+0x238>)
 8001006:	66bb      	str	r3, [r7, #104]	; 0x68
   buffer_link* transmit_link = NULL;
 8001008:	2300      	movs	r3, #0
 800100a:	65bb      	str	r3, [r7, #88]	; 0x58

   HAL_I2C_Slave_Receive_IT(&hi2c3, master_comm_buff, 1);
 800100c:	2201      	movs	r2, #1
 800100e:	4948      	ldr	r1, [pc, #288]	; (8001130 <main+0x244>)
 8001010:	4848      	ldr	r0, [pc, #288]	; (8001134 <main+0x248>)
 8001012:	f002 fcc3 	bl	800399c <HAL_I2C_Slave_Receive_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
 	  printf("Beginning while loop.\n");
 8001016:	4848      	ldr	r0, [pc, #288]	; (8001138 <main+0x24c>)
 8001018:	f00c fd1e 	bl	800da58 <puts>
	   * that.
	   */

	  // get TOF distance values, 7 for the 7 sensors on the board
	  uint8_t dist_vals[7];
	  get_TOF_Data();
 800101c:	f000 fc28 	bl	8001870 <get_TOF_Data>
	   *
	   * Some ACK checks could be added to verify information, but otherwise the
	   * flow of the below code should be mostly finalized.
	   */

	  HAL_Delay(100);
 8001020:	2064      	movs	r0, #100	; 0x64
 8001022:	f001 fb5f 	bl	80026e4 <HAL_Delay>
	  printf("Taking snapshot...\n");
 8001026:	4845      	ldr	r0, [pc, #276]	; (800113c <main+0x250>)
 8001028:	f00c fd16 	bl	800da58 <puts>
	  uint8_t snapshot_ack[5];
	  uint8_t *snapshot_ack1 = snapshot_ack;
 800102c:	f107 0314 	add.w	r3, r7, #20
 8001030:	657b      	str	r3, [r7, #84]	; 0x54
	  Camera_Snapshot(&huart8, snapshot_ack1, sizeof(snapshot_ack));
 8001032:	2205      	movs	r2, #5
 8001034:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001036:	4839      	ldr	r0, [pc, #228]	; (800111c <main+0x230>)
 8001038:	f7ff fc4a 	bl	80008d0 <Camera_Snapshot>

	  if (snapshot_ack[0] == 0x76)
 800103c:	7d3b      	ldrb	r3, [r7, #20]
 800103e:	2b76      	cmp	r3, #118	; 0x76
 8001040:	d103      	bne.n	800104a <main+0x15e>
		  printf("Ack for snapshot received.\n");
 8001042:	483f      	ldr	r0, [pc, #252]	; (8001140 <main+0x254>)
 8001044:	f00c fd08 	bl	800da58 <puts>
 8001048:	e002      	b.n	8001050 <main+0x164>
	  else
		  printf("No ack received for snapshot.\n");
 800104a:	483e      	ldr	r0, [pc, #248]	; (8001144 <main+0x258>)
 800104c:	f00c fd04 	bl	800da58 <puts>

	  printf("Getting image length...\n");
 8001050:	483d      	ldr	r0, [pc, #244]	; (8001148 <main+0x25c>)
 8001052:	f00c fd01 	bl	800da58 <puts>
	  uint8_t length_ack[9];
	  Camera_Get_IMG_Length(&huart8, length_ack, sizeof(length_ack));
 8001056:	f107 0308 	add.w	r3, r7, #8
 800105a:	2209      	movs	r2, #9
 800105c:	4619      	mov	r1, r3
 800105e:	482f      	ldr	r0, [pc, #188]	; (800111c <main+0x230>)
 8001060:	f7ff fc96 	bl	8000990 <Camera_Get_IMG_Length>

	  if (length_ack[0] == 0x76)
 8001064:	7a3b      	ldrb	r3, [r7, #8]
 8001066:	2b76      	cmp	r3, #118	; 0x76
 8001068:	d103      	bne.n	8001072 <main+0x186>
		  printf("Ack for image length received.\n");
 800106a:	4838      	ldr	r0, [pc, #224]	; (800114c <main+0x260>)
 800106c:	f00c fcf4 	bl	800da58 <puts>
 8001070:	e002      	b.n	8001078 <main+0x18c>
	  else
		  printf("No ack received for image length.\n");
 8001072:	4837      	ldr	r0, [pc, #220]	; (8001150 <main+0x264>)
 8001074:	f00c fcf0 	bl	800da58 <puts>

	  // indices 7 and 8 of the length_ack should have actual values
	  uint16_t img_length = (((uint16_t) length_ack[7]) << 8) + (uint16_t) length_ack[8];
 8001078:	7bfb      	ldrb	r3, [r7, #15]
 800107a:	b29b      	uxth	r3, r3
 800107c:	021b      	lsls	r3, r3, #8
 800107e:	b29a      	uxth	r2, r3
 8001080:	7c3b      	ldrb	r3, [r7, #16]
 8001082:	b29b      	uxth	r3, r3
 8001084:	4413      	add	r3, r2
 8001086:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
	  printf("Found image length: %lu\n", img_length);
 800108a:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800108e:	4619      	mov	r1, r3
 8001090:	4830      	ldr	r0, [pc, #192]	; (8001154 <main+0x268>)
 8001092:	f00c fc59 	bl	800d948 <iprintf>

	  //image buffer
	  //uint8_t img_buf_and_ack[10+img_length];

	  curr_link->jpeg_size = img_length;
 8001096:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001098:	f8b7 2052 	ldrh.w	r2, [r7, #82]	; 0x52
 800109c:	801a      	strh	r2, [r3, #0]

	  uint32_t ticktransfer1 = HAL_GetTick();
 800109e:	f001 fb15 	bl	80026cc <HAL_GetTick>
 80010a2:	64f8      	str	r0, [r7, #76]	; 0x4c

	  printf("Getting image...\n");
 80010a4:	482c      	ldr	r0, [pc, #176]	; (8001158 <main+0x26c>)
 80010a6:	f00c fcd7 	bl	800da58 <puts>
	  Camera_Get_IMG(&huart8, curr_link->jpeg, (10+img_length), length_ack[7], length_ack[8], (uint8_t) (frameptr >> 8), (uint8_t) frameptr);
 80010aa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80010ac:	1c98      	adds	r0, r3, #2
 80010ae:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80010b2:	330a      	adds	r3, #10
 80010b4:	b29c      	uxth	r4, r3
 80010b6:	7bfd      	ldrb	r5, [r7, #15]
 80010b8:	7c3b      	ldrb	r3, [r7, #16]
 80010ba:	f8b7 205e 	ldrh.w	r2, [r7, #94]	; 0x5e
 80010be:	1212      	asrs	r2, r2, #8
 80010c0:	b2d2      	uxtb	r2, r2
 80010c2:	f8b7 105e 	ldrh.w	r1, [r7, #94]	; 0x5e
 80010c6:	b2c9      	uxtb	r1, r1
 80010c8:	9102      	str	r1, [sp, #8]
 80010ca:	9201      	str	r2, [sp, #4]
 80010cc:	9300      	str	r3, [sp, #0]
 80010ce:	462b      	mov	r3, r5
 80010d0:	4622      	mov	r2, r4
 80010d2:	4601      	mov	r1, r0
 80010d4:	4811      	ldr	r0, [pc, #68]	; (800111c <main+0x230>)
 80010d6:	f7ff fc89 	bl	80009ec <Camera_Get_IMG>

	  uint32_t ticktransfer2 = HAL_GetTick();
 80010da:	f001 faf7 	bl	80026cc <HAL_GetTick>
 80010de:	64b8      	str	r0, [r7, #72]	; 0x48

	  printf("Image transfer time: %lu\n", ticktransfer2 - ticktransfer1);
 80010e0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80010e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80010e4:	1ad3      	subs	r3, r2, r3
 80010e6:	4619      	mov	r1, r3
 80010e8:	481c      	ldr	r0, [pc, #112]	; (800115c <main+0x270>)
 80010ea:	f00c fc2d 	bl	800d948 <iprintf>

	  uint8_t stop_ack[5];
	  uint8_t* stop_ack1 = stop_ack;
 80010ee:	463b      	mov	r3, r7
 80010f0:	647b      	str	r3, [r7, #68]	; 0x44
	  Camera_Stop_Capture(&huart8, stop_ack1, sizeof(stop_ack));
 80010f2:	2205      	movs	r2, #5
 80010f4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80010f6:	4809      	ldr	r0, [pc, #36]	; (800111c <main+0x230>)
 80010f8:	f7ff fc1a 	bl	8000930 <Camera_Stop_Capture>

	  if (stop_ack[0] == 0x76)
 80010fc:	783b      	ldrb	r3, [r7, #0]
 80010fe:	2b76      	cmp	r3, #118	; 0x76
 8001100:	d130      	bne.n	8001164 <main+0x278>
		  printf("Ack for stopping capture received.\n");
 8001102:	4817      	ldr	r0, [pc, #92]	; (8001160 <main+0x274>)
 8001104:	f00c fca8 	bl	800da58 <puts>
 8001108:	e02f      	b.n	800116a <main+0x27e>
 800110a:	bf00      	nop
 800110c:	0800e9a8 	.word	0x0800e9a8
 8001110:	58020000 	.word	0x58020000
 8001114:	58020800 	.word	0x58020800
 8001118:	0800e9c8 	.word	0x0800e9c8
 800111c:	240003c0 	.word	0x240003c0
 8001120:	24000085 	.word	0x24000085
 8001124:	2400115c 	.word	0x2400115c
 8001128:	00015638 	.word	0x00015638
 800112c:	00015634 	.word	0x00015634
 8001130:	24001150 	.word	0x24001150
 8001134:	2400031c 	.word	0x2400031c
 8001138:	0800e9f0 	.word	0x0800e9f0
 800113c:	0800ea08 	.word	0x0800ea08
 8001140:	0800ea1c 	.word	0x0800ea1c
 8001144:	0800ea38 	.word	0x0800ea38
 8001148:	0800ea58 	.word	0x0800ea58
 800114c:	0800ea70 	.word	0x0800ea70
 8001150:	0800ea90 	.word	0x0800ea90
 8001154:	0800eab4 	.word	0x0800eab4
 8001158:	0800ead0 	.word	0x0800ead0
 800115c:	0800eae4 	.word	0x0800eae4
 8001160:	0800eb00 	.word	0x0800eb00
	  else
		  printf("No ack received for stopping capture.\n");
 8001164:	4889      	ldr	r0, [pc, #548]	; (800138c <main+0x4a0>)
 8001166:	f00c fc77 	bl	800da58 <puts>


	  uint8_t* jpeg_img_buf = curr_link->jpeg;
 800116a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800116c:	3302      	adds	r3, #2
 800116e:	643b      	str	r3, [r7, #64]	; 0x40
	  jpeg_img_buf += 5;
 8001170:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001172:	3305      	adds	r3, #5
 8001174:	643b      	str	r3, [r7, #64]	; 0x40
			  //HAL_Delay(10);
		  }
	  }
*/

	  uint8_t red_mask = 0b11111000;
 8001176:	23f8      	movs	r3, #248	; 0xf8
 8001178:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	  uint8_t blue_mask = 0b00011111;
 800117c:	231f      	movs	r3, #31
 800117e:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
	  uint8_t greenh_mask = 0b00000111;
 8001182:	2307      	movs	r3, #7
 8001184:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	  uint8_t greenl_mask = 0b11100000;
 8001188:	23e0      	movs	r3, #224	; 0xe0
 800118a:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c

	  curr_link->rgb[11200] = 255;
 800118e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8001190:	f24a 03f2 	movw	r3, #41202	; 0xa0f2
 8001194:	4413      	add	r3, r2
 8001196:	22ff      	movs	r2, #255	; 0xff
 8001198:	701a      	strb	r2, [r3, #0]
	  uint32_t tickj = HAL_GetTick();
 800119a:	f001 fa97 	bl	80026cc <HAL_GetTick>
 800119e:	63b8      	str	r0, [r7, #56]	; 0x38
	  result = HAL_JPEG_Decode(&hjpeg, jpeg_img_buf, (uint32_t) curr_link->jpeg_size, curr_link->rgb, 57600, 3000);
 80011a0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80011a2:	881b      	ldrh	r3, [r3, #0]
 80011a4:	4619      	mov	r1, r3
 80011a6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80011a8:	f247 5332 	movw	r3, #30002	; 0x7532
 80011ac:	4413      	add	r3, r2
 80011ae:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80011b2:	9201      	str	r2, [sp, #4]
 80011b4:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 80011b8:	9200      	str	r2, [sp, #0]
 80011ba:	460a      	mov	r2, r1
 80011bc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80011be:	4874      	ldr	r0, [pc, #464]	; (8001390 <main+0x4a4>)
 80011c0:	f004 f96f 	bl	80054a2 <HAL_JPEG_Decode>
 80011c4:	4603      	mov	r3, r0
 80011c6:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d

	  uint8_t* buff_check = curr_link->rgb;
 80011ca:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80011cc:	f247 5332 	movw	r3, #30002	; 0x7532
 80011d0:	4413      	add	r3, r2
 80011d2:	637b      	str	r3, [r7, #52]	; 0x34
	  buff_check++;
 80011d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80011d6:	3301      	adds	r3, #1
 80011d8:	637b      	str	r3, [r7, #52]	; 0x34
	  buff_check++;
 80011da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80011dc:	3301      	adds	r3, #1
 80011de:	637b      	str	r3, [r7, #52]	; 0x34
	  buff_check++;
 80011e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80011e2:	3301      	adds	r3, #1
 80011e4:	637b      	str	r3, [r7, #52]	; 0x34
	  buff_check++;
 80011e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80011e8:	3301      	adds	r3, #1
 80011ea:	637b      	str	r3, [r7, #52]	; 0x34
	  buff_check++;
 80011ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80011ee:	3301      	adds	r3, #1
 80011f0:	637b      	str	r3, [r7, #52]	; 0x34

	  if (result == HAL_OK) {
 80011f2:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	f040 80a3 	bne.w	8001342 <main+0x456>
		  printf("JPEG conversion finished successfully.\n");
 80011fc:	4865      	ldr	r0, [pc, #404]	; (8001394 <main+0x4a8>)
 80011fe:	f00c fc2b 	bl	800da58 <puts>

		  //seems that output is only RGB565, further testing needed but RGB888 is unresponsive and output is 2/3 of expected size
		  for (uint64_t i = 0; i < 80; i++) {
 8001202:	f04f 0300 	mov.w	r3, #0
 8001206:	f04f 0400 	mov.w	r4, #0
 800120a:	e9c7 3418 	strd	r3, r4, [r7, #96]	; 0x60
 800120e:	e9d7 3418 	ldrd	r3, r4, [r7, #96]	; 0x60
 8001212:	2c00      	cmp	r4, #0
 8001214:	bf08      	it	eq
 8001216:	2b50      	cmpeq	r3, #80	; 0x50
 8001218:	f080 808f 	bcs.w	800133a <main+0x44e>
			  //printf("{%d, %d} ", curr_link->rgb[19200+2*i], curr_link->rgb[19200+2*i+1]);

			  uint16_t red_v = ((red_mask & curr_link->rgb[19200+2*i+1]) >> 3)*255/31;
 800121c:	e9d7 3418 	ldrd	r3, r4, [r7, #96]	; 0x60
 8001220:	f513 5116 	adds.w	r1, r3, #9600	; 0x2580
 8001224:	f144 0200 	adc.w	r2, r4, #0
 8001228:	184b      	adds	r3, r1, r1
 800122a:	eb42 0402 	adc.w	r4, r2, r2
 800122e:	4619      	mov	r1, r3
 8001230:	4622      	mov	r2, r4
 8001232:	1c4b      	adds	r3, r1, #1
 8001234:	f142 0400 	adc.w	r4, r2, #0
 8001238:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800123a:	441a      	add	r2, r3
 800123c:	f247 5332 	movw	r3, #30002	; 0x7532
 8001240:	4413      	add	r3, r2
 8001242:	781a      	ldrb	r2, [r3, #0]
 8001244:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001248:	4013      	ands	r3, r2
 800124a:	b2db      	uxtb	r3, r3
 800124c:	10da      	asrs	r2, r3, #3
 800124e:	4613      	mov	r3, r2
 8001250:	021b      	lsls	r3, r3, #8
 8001252:	1a9b      	subs	r3, r3, r2
 8001254:	4a50      	ldr	r2, [pc, #320]	; (8001398 <main+0x4ac>)
 8001256:	fb82 1203 	smull	r1, r2, r2, r3
 800125a:	441a      	add	r2, r3
 800125c:	1112      	asrs	r2, r2, #4
 800125e:	17db      	asrs	r3, r3, #31
 8001260:	1ad3      	subs	r3, r2, r3
 8001262:	867b      	strh	r3, [r7, #50]	; 0x32
			  uint16_t blue_v = ((blue_mask & curr_link->rgb[19200+2*i]))*255/31;
 8001264:	e9d7 3418 	ldrd	r3, r4, [r7, #96]	; 0x60
 8001268:	f513 5116 	adds.w	r1, r3, #9600	; 0x2580
 800126c:	f144 0200 	adc.w	r2, r4, #0
 8001270:	184b      	adds	r3, r1, r1
 8001272:	eb42 0402 	adc.w	r4, r2, r2
 8001276:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8001278:	441a      	add	r2, r3
 800127a:	f247 5332 	movw	r3, #30002	; 0x7532
 800127e:	4413      	add	r3, r2
 8001280:	781a      	ldrb	r2, [r3, #0]
 8001282:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8001286:	4013      	ands	r3, r2
 8001288:	b2db      	uxtb	r3, r3
 800128a:	461a      	mov	r2, r3
 800128c:	4613      	mov	r3, r2
 800128e:	021b      	lsls	r3, r3, #8
 8001290:	1a9b      	subs	r3, r3, r2
 8001292:	4a41      	ldr	r2, [pc, #260]	; (8001398 <main+0x4ac>)
 8001294:	fb82 1203 	smull	r1, r2, r2, r3
 8001298:	441a      	add	r2, r3
 800129a:	1112      	asrs	r2, r2, #4
 800129c:	17db      	asrs	r3, r3, #31
 800129e:	1ad3      	subs	r3, r2, r3
 80012a0:	863b      	strh	r3, [r7, #48]	; 0x30
			  uint16_t greenl_v = (greenl_mask & curr_link->rgb[19200+2*i]) >> 5;
 80012a2:	e9d7 3418 	ldrd	r3, r4, [r7, #96]	; 0x60
 80012a6:	f513 5116 	adds.w	r1, r3, #9600	; 0x2580
 80012aa:	f144 0200 	adc.w	r2, r4, #0
 80012ae:	184b      	adds	r3, r1, r1
 80012b0:	eb42 0402 	adc.w	r4, r2, r2
 80012b4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80012b6:	441a      	add	r2, r3
 80012b8:	f247 5332 	movw	r3, #30002	; 0x7532
 80012bc:	4413      	add	r3, r2
 80012be:	781a      	ldrb	r2, [r3, #0]
 80012c0:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80012c4:	4013      	ands	r3, r2
 80012c6:	b2db      	uxtb	r3, r3
 80012c8:	115b      	asrs	r3, r3, #5
 80012ca:	85fb      	strh	r3, [r7, #46]	; 0x2e
			  uint16_t greenh_v = (greenh_mask & curr_link->rgb[19200+2*i+1]) << 3;
 80012cc:	e9d7 3418 	ldrd	r3, r4, [r7, #96]	; 0x60
 80012d0:	f513 5116 	adds.w	r1, r3, #9600	; 0x2580
 80012d4:	f144 0200 	adc.w	r2, r4, #0
 80012d8:	184b      	adds	r3, r1, r1
 80012da:	eb42 0402 	adc.w	r4, r2, r2
 80012de:	4619      	mov	r1, r3
 80012e0:	4622      	mov	r2, r4
 80012e2:	1c4b      	adds	r3, r1, #1
 80012e4:	f142 0400 	adc.w	r4, r2, #0
 80012e8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80012ea:	441a      	add	r2, r3
 80012ec:	f247 5332 	movw	r3, #30002	; 0x7532
 80012f0:	4413      	add	r3, r2
 80012f2:	781a      	ldrb	r2, [r3, #0]
 80012f4:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80012f8:	4013      	ands	r3, r2
 80012fa:	b2db      	uxtb	r3, r3
 80012fc:	b29b      	uxth	r3, r3
 80012fe:	00db      	lsls	r3, r3, #3
 8001300:	85bb      	strh	r3, [r7, #44]	; 0x2c
			  uint16_t green_v = (greenl_v + greenh_v)*255/63;
 8001302:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8001304:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001306:	441a      	add	r2, r3
 8001308:	4613      	mov	r3, r2
 800130a:	021b      	lsls	r3, r3, #8
 800130c:	1a9b      	subs	r3, r3, r2
 800130e:	4a23      	ldr	r2, [pc, #140]	; (800139c <main+0x4b0>)
 8001310:	fb82 1203 	smull	r1, r2, r2, r3
 8001314:	441a      	add	r2, r3
 8001316:	1152      	asrs	r2, r2, #5
 8001318:	17db      	asrs	r3, r3, #31
 800131a:	1ad3      	subs	r3, r2, r3
 800131c:	857b      	strh	r3, [r7, #42]	; 0x2a

			  printf("{%d, %d, %d} ", red_v, green_v, blue_v);
 800131e:	8e79      	ldrh	r1, [r7, #50]	; 0x32
 8001320:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8001322:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8001324:	481e      	ldr	r0, [pc, #120]	; (80013a0 <main+0x4b4>)
 8001326:	f00c fb0f 	bl	800d948 <iprintf>
		  for (uint64_t i = 0; i < 80; i++) {
 800132a:	e9d7 3418 	ldrd	r3, r4, [r7, #96]	; 0x60
 800132e:	1c59      	adds	r1, r3, #1
 8001330:	f144 0200 	adc.w	r2, r4, #0
 8001334:	e9c7 1218 	strd	r1, r2, [r7, #96]	; 0x60
 8001338:	e769      	b.n	800120e <main+0x322>
		  }
		  printf("\n");
 800133a:	200a      	movs	r0, #10
 800133c:	f00c fb1c 	bl	800d978 <putchar>
 8001340:	e002      	b.n	8001348 <main+0x45c>
	  }
	  else
		  printf("JPEG conversion failed.\n");
 8001342:	4818      	ldr	r0, [pc, #96]	; (80013a4 <main+0x4b8>)
 8001344:	f00c fb88 	bl	800da58 <puts>

	  uint32_t tickj2 = HAL_GetTick();
 8001348:	f001 f9c0 	bl	80026cc <HAL_GetTick>
 800134c:	6278      	str	r0, [r7, #36]	; 0x24
	  printf("JPEG time elapsed: %lu\n", tickj2-tickj);
 800134e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001350:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001352:	1ad3      	subs	r3, r2, r3
 8001354:	4619      	mov	r1, r3
 8001356:	4814      	ldr	r0, [pc, #80]	; (80013a8 <main+0x4bc>)
 8001358:	f00c faf6 	bl	800d948 <iprintf>

	  // iterate to avoid sending repeats
	  transmit_link = curr_link;
 800135c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800135e:	65bb      	str	r3, [r7, #88]	; 0x58
	  curr_link = curr_link->next;
 8001360:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8001362:	4b12      	ldr	r3, [pc, #72]	; (80013ac <main+0x4c0>)
 8001364:	4413      	add	r3, r2
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	66bb      	str	r3, [r7, #104]	; 0x68

	  printf("\n\nLOOP COMPLETED\n\n");
 800136a:	4811      	ldr	r0, [pc, #68]	; (80013b0 <main+0x4c4>)
 800136c:	f00c fb74 	bl	800da58 <puts>

	  printf("Result: %d\n\n", result);
 8001370:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 8001374:	4619      	mov	r1, r3
 8001376:	480f      	ldr	r0, [pc, #60]	; (80013b4 <main+0x4c8>)
 8001378:	f00c fae6 	bl	800d948 <iprintf>
	  result = HAL_ERROR;
 800137c:	2301      	movs	r3, #1
 800137e:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
	  HAL_Delay(5000);
 8001382:	f241 3088 	movw	r0, #5000	; 0x1388
 8001386:	f001 f9ad 	bl	80026e4 <HAL_Delay>

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

  }
 800138a:	e644      	b.n	8001016 <main+0x12a>
 800138c:	0800eb24 	.word	0x0800eb24
 8001390:	24000368 	.word	0x24000368
 8001394:	0800eb4c 	.word	0x0800eb4c
 8001398:	84210843 	.word	0x84210843
 800139c:	82082083 	.word	0x82082083
 80013a0:	0800eb74 	.word	0x0800eb74
 80013a4:	0800eb84 	.word	0x0800eb84
 80013a8:	0800eb9c 	.word	0x0800eb9c
 80013ac:	00015634 	.word	0x00015634
 80013b0:	0800ebb4 	.word	0x0800ebb4
 80013b4:	0800ebc8 	.word	0x0800ebc8

080013b8 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b0cc      	sub	sp, #304	; 0x130
 80013bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013be:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80013c2:	224c      	movs	r2, #76	; 0x4c
 80013c4:	2100      	movs	r1, #0
 80013c6:	4618      	mov	r0, r3
 80013c8:	f00c fab6 	bl	800d938 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013cc:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80013d0:	2220      	movs	r2, #32
 80013d2:	2100      	movs	r1, #0
 80013d4:	4618      	mov	r0, r3
 80013d6:	f00c faaf 	bl	800d938 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80013da:	f107 0308 	add.w	r3, r7, #8
 80013de:	4618      	mov	r0, r3
 80013e0:	23bc      	movs	r3, #188	; 0xbc
 80013e2:	461a      	mov	r2, r3
 80013e4:	2100      	movs	r1, #0
 80013e6:	f00c faa7 	bl	800d938 <memset>

  /** Supply configuration update enable 
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80013ea:	2002      	movs	r0, #2
 80013ec:	f005 fa34 	bl	8006858 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80013f0:	1d3b      	adds	r3, r7, #4
 80013f2:	2200      	movs	r2, #0
 80013f4:	601a      	str	r2, [r3, #0]
 80013f6:	4b53      	ldr	r3, [pc, #332]	; (8001544 <_Z18SystemClock_Configv+0x18c>)
 80013f8:	699b      	ldr	r3, [r3, #24]
 80013fa:	4a52      	ldr	r2, [pc, #328]	; (8001544 <_Z18SystemClock_Configv+0x18c>)
 80013fc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001400:	6193      	str	r3, [r2, #24]
 8001402:	4b50      	ldr	r3, [pc, #320]	; (8001544 <_Z18SystemClock_Configv+0x18c>)
 8001404:	699b      	ldr	r3, [r3, #24]
 8001406:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 800140a:	1d3b      	adds	r3, r7, #4
 800140c:	601a      	str	r2, [r3, #0]
 800140e:	4b4e      	ldr	r3, [pc, #312]	; (8001548 <_Z18SystemClock_Configv+0x190>)
 8001410:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001412:	4a4d      	ldr	r2, [pc, #308]	; (8001548 <_Z18SystemClock_Configv+0x190>)
 8001414:	f043 0301 	orr.w	r3, r3, #1
 8001418:	62d3      	str	r3, [r2, #44]	; 0x2c
 800141a:	4b4b      	ldr	r3, [pc, #300]	; (8001548 <_Z18SystemClock_Configv+0x190>)
 800141c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800141e:	f003 0201 	and.w	r2, r3, #1
 8001422:	1d3b      	adds	r3, r7, #4
 8001424:	601a      	str	r2, [r3, #0]
 8001426:	1d3b      	adds	r3, r7, #4
 8001428:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800142a:	4b46      	ldr	r3, [pc, #280]	; (8001544 <_Z18SystemClock_Configv+0x18c>)
 800142c:	699b      	ldr	r3, [r3, #24]
 800142e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001432:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001436:	bf14      	ite	ne
 8001438:	2301      	movne	r3, #1
 800143a:	2300      	moveq	r3, #0
 800143c:	b2db      	uxtb	r3, r3
 800143e:	2b00      	cmp	r3, #0
 8001440:	d000      	beq.n	8001444 <_Z18SystemClock_Configv+0x8c>
 8001442:	e7f2      	b.n	800142a <_Z18SystemClock_Configv+0x72>
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001444:	2302      	movs	r3, #2
 8001446:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800144a:	2301      	movs	r3, #1
 800144c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001450:	2320      	movs	r3, #32
 8001452:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001456:	2302      	movs	r3, #2
 8001458:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800145c:	2300      	movs	r3, #0
 800145e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001462:	2304      	movs	r3, #4
 8001464:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  RCC_OscInitStruct.PLL.PLLN = 60;
 8001468:	233c      	movs	r3, #60	; 0x3c
 800146a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  RCC_OscInitStruct.PLL.PLLP = 2;
 800146e:	2302      	movs	r3, #2
 8001470:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001474:	2302      	movs	r3, #2
 8001476:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800147a:	2302      	movs	r3, #2
 800147c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001480:	230c      	movs	r3, #12
 8001482:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001486:	2300      	movs	r3, #0
 8001488:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800148c:	2300      	movs	r3, #0
 800148e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001492:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001496:	4618      	mov	r0, r3
 8001498:	f005 fa16 	bl	80068c8 <HAL_RCC_OscConfig>
 800149c:	4603      	mov	r3, r0
 800149e:	2b00      	cmp	r3, #0
 80014a0:	bf14      	ite	ne
 80014a2:	2301      	movne	r3, #1
 80014a4:	2300      	moveq	r3, #0
 80014a6:	b2db      	uxtb	r3, r3
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d001      	beq.n	80014b0 <_Z18SystemClock_Configv+0xf8>
  {
    Error_Handler();
 80014ac:	f000 fa6a 	bl	8001984 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014b0:	233f      	movs	r3, #63	; 0x3f
 80014b2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014b6:	2303      	movs	r3, #3
 80014b8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80014bc:	2300      	movs	r3, #0
 80014be:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80014c2:	2308      	movs	r3, #8
 80014c4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80014c8:	2340      	movs	r3, #64	; 0x40
 80014ca:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80014ce:	2340      	movs	r3, #64	; 0x40
 80014d0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80014d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80014d8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80014dc:	2340      	movs	r3, #64	; 0x40
 80014de:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80014e2:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80014e6:	2104      	movs	r1, #4
 80014e8:	4618      	mov	r0, r3
 80014ea:	f005 fda5 	bl	8007038 <HAL_RCC_ClockConfig>
 80014ee:	4603      	mov	r3, r0
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	bf14      	ite	ne
 80014f4:	2301      	movne	r3, #1
 80014f6:	2300      	moveq	r3, #0
 80014f8:	b2db      	uxtb	r3, r3
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d001      	beq.n	8001502 <_Z18SystemClock_Configv+0x14a>
  {
    Error_Handler();
 80014fe:	f000 fa41 	bl	8001984 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART8|RCC_PERIPHCLK_I2C3
 8001502:	f107 0308 	add.w	r3, r7, #8
 8001506:	220a      	movs	r2, #10
 8001508:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_I2C1;
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800150a:	f107 0308 	add.w	r3, r7, #8
 800150e:	2200      	movs	r2, #0
 8001510:	675a      	str	r2, [r3, #116]	; 0x74
  PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8001512:	f107 0308 	add.w	r3, r7, #8
 8001516:	2200      	movs	r2, #0
 8001518:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800151c:	f107 0308 	add.w	r3, r7, #8
 8001520:	4618      	mov	r0, r3
 8001522:	f006 f8e7 	bl	80076f4 <HAL_RCCEx_PeriphCLKConfig>
 8001526:	4603      	mov	r3, r0
 8001528:	2b00      	cmp	r3, #0
 800152a:	bf14      	ite	ne
 800152c:	2301      	movne	r3, #1
 800152e:	2300      	moveq	r3, #0
 8001530:	b2db      	uxtb	r3, r3
 8001532:	2b00      	cmp	r3, #0
 8001534:	d001      	beq.n	800153a <_Z18SystemClock_Configv+0x182>
  {
    Error_Handler();
 8001536:	f000 fa25 	bl	8001984 <Error_Handler>
  }
}
 800153a:	bf00      	nop
 800153c:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8001540:	46bd      	mov	sp, r7
 8001542:	bd80      	pop	{r7, pc}
 8001544:	58024800 	.word	0x58024800
 8001548:	58000400 	.word	0x58000400

0800154c <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001550:	4b22      	ldr	r3, [pc, #136]	; (80015dc <_ZL12MX_I2C1_Initv+0x90>)
 8001552:	4a23      	ldr	r2, [pc, #140]	; (80015e0 <_ZL12MX_I2C1_Initv+0x94>)
 8001554:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x307075B1;
 8001556:	4b21      	ldr	r3, [pc, #132]	; (80015dc <_ZL12MX_I2C1_Initv+0x90>)
 8001558:	4a22      	ldr	r2, [pc, #136]	; (80015e4 <_ZL12MX_I2C1_Initv+0x98>)
 800155a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 4;
 800155c:	4b1f      	ldr	r3, [pc, #124]	; (80015dc <_ZL12MX_I2C1_Initv+0x90>)
 800155e:	2204      	movs	r2, #4
 8001560:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001562:	4b1e      	ldr	r3, [pc, #120]	; (80015dc <_ZL12MX_I2C1_Initv+0x90>)
 8001564:	2201      	movs	r2, #1
 8001566:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001568:	4b1c      	ldr	r3, [pc, #112]	; (80015dc <_ZL12MX_I2C1_Initv+0x90>)
 800156a:	2200      	movs	r2, #0
 800156c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800156e:	4b1b      	ldr	r3, [pc, #108]	; (80015dc <_ZL12MX_I2C1_Initv+0x90>)
 8001570:	2200      	movs	r2, #0
 8001572:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001574:	4b19      	ldr	r3, [pc, #100]	; (80015dc <_ZL12MX_I2C1_Initv+0x90>)
 8001576:	2200      	movs	r2, #0
 8001578:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800157a:	4b18      	ldr	r3, [pc, #96]	; (80015dc <_ZL12MX_I2C1_Initv+0x90>)
 800157c:	2200      	movs	r2, #0
 800157e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001580:	4b16      	ldr	r3, [pc, #88]	; (80015dc <_ZL12MX_I2C1_Initv+0x90>)
 8001582:	2200      	movs	r2, #0
 8001584:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001586:	4815      	ldr	r0, [pc, #84]	; (80015dc <_ZL12MX_I2C1_Initv+0x90>)
 8001588:	f001 fe84 	bl	8003294 <HAL_I2C_Init>
 800158c:	4603      	mov	r3, r0
 800158e:	2b00      	cmp	r3, #0
 8001590:	bf14      	ite	ne
 8001592:	2301      	movne	r3, #1
 8001594:	2300      	moveq	r3, #0
 8001596:	b2db      	uxtb	r3, r3
 8001598:	2b00      	cmp	r3, #0
 800159a:	d001      	beq.n	80015a0 <_ZL12MX_I2C1_Initv+0x54>
  {
    Error_Handler();
 800159c:	f000 f9f2 	bl	8001984 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80015a0:	2100      	movs	r1, #0
 80015a2:	480e      	ldr	r0, [pc, #56]	; (80015dc <_ZL12MX_I2C1_Initv+0x90>)
 80015a4:	f003 fdcf 	bl	8005146 <HAL_I2CEx_ConfigAnalogFilter>
 80015a8:	4603      	mov	r3, r0
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	bf14      	ite	ne
 80015ae:	2301      	movne	r3, #1
 80015b0:	2300      	moveq	r3, #0
 80015b2:	b2db      	uxtb	r3, r3
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d001      	beq.n	80015bc <_ZL12MX_I2C1_Initv+0x70>
  {
    Error_Handler();
 80015b8:	f000 f9e4 	bl	8001984 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80015bc:	2100      	movs	r1, #0
 80015be:	4807      	ldr	r0, [pc, #28]	; (80015dc <_ZL12MX_I2C1_Initv+0x90>)
 80015c0:	f003 fe0c 	bl	80051dc <HAL_I2CEx_ConfigDigitalFilter>
 80015c4:	4603      	mov	r3, r0
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	bf14      	ite	ne
 80015ca:	2301      	movne	r3, #1
 80015cc:	2300      	moveq	r3, #0
 80015ce:	b2db      	uxtb	r3, r3
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d001      	beq.n	80015d8 <_ZL12MX_I2C1_Initv+0x8c>
  {
    Error_Handler();
 80015d4:	f000 f9d6 	bl	8001984 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80015d8:	bf00      	nop
 80015da:	bd80      	pop	{r7, pc}
 80015dc:	240002d0 	.word	0x240002d0
 80015e0:	40005400 	.word	0x40005400
 80015e4:	307075b1 	.word	0x307075b1

080015e8 <_ZL12MX_I2C3_Initv>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80015ec:	4b22      	ldr	r3, [pc, #136]	; (8001678 <_ZL12MX_I2C3_Initv+0x90>)
 80015ee:	4a23      	ldr	r2, [pc, #140]	; (800167c <_ZL12MX_I2C3_Initv+0x94>)
 80015f0:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x307075B1;
 80015f2:	4b21      	ldr	r3, [pc, #132]	; (8001678 <_ZL12MX_I2C3_Initv+0x90>)
 80015f4:	4a22      	ldr	r2, [pc, #136]	; (8001680 <_ZL12MX_I2C3_Initv+0x98>)
 80015f6:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 8;
 80015f8:	4b1f      	ldr	r3, [pc, #124]	; (8001678 <_ZL12MX_I2C3_Initv+0x90>)
 80015fa:	2208      	movs	r2, #8
 80015fc:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80015fe:	4b1e      	ldr	r3, [pc, #120]	; (8001678 <_ZL12MX_I2C3_Initv+0x90>)
 8001600:	2201      	movs	r2, #1
 8001602:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001604:	4b1c      	ldr	r3, [pc, #112]	; (8001678 <_ZL12MX_I2C3_Initv+0x90>)
 8001606:	2200      	movs	r2, #0
 8001608:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 800160a:	4b1b      	ldr	r3, [pc, #108]	; (8001678 <_ZL12MX_I2C3_Initv+0x90>)
 800160c:	2200      	movs	r2, #0
 800160e:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001610:	4b19      	ldr	r3, [pc, #100]	; (8001678 <_ZL12MX_I2C3_Initv+0x90>)
 8001612:	2200      	movs	r2, #0
 8001614:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001616:	4b18      	ldr	r3, [pc, #96]	; (8001678 <_ZL12MX_I2C3_Initv+0x90>)
 8001618:	2200      	movs	r2, #0
 800161a:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800161c:	4b16      	ldr	r3, [pc, #88]	; (8001678 <_ZL12MX_I2C3_Initv+0x90>)
 800161e:	2200      	movs	r2, #0
 8001620:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001622:	4815      	ldr	r0, [pc, #84]	; (8001678 <_ZL12MX_I2C3_Initv+0x90>)
 8001624:	f001 fe36 	bl	8003294 <HAL_I2C_Init>
 8001628:	4603      	mov	r3, r0
 800162a:	2b00      	cmp	r3, #0
 800162c:	bf14      	ite	ne
 800162e:	2301      	movne	r3, #1
 8001630:	2300      	moveq	r3, #0
 8001632:	b2db      	uxtb	r3, r3
 8001634:	2b00      	cmp	r3, #0
 8001636:	d001      	beq.n	800163c <_ZL12MX_I2C3_Initv+0x54>
  {
    Error_Handler();
 8001638:	f000 f9a4 	bl	8001984 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800163c:	2100      	movs	r1, #0
 800163e:	480e      	ldr	r0, [pc, #56]	; (8001678 <_ZL12MX_I2C3_Initv+0x90>)
 8001640:	f003 fd81 	bl	8005146 <HAL_I2CEx_ConfigAnalogFilter>
 8001644:	4603      	mov	r3, r0
 8001646:	2b00      	cmp	r3, #0
 8001648:	bf14      	ite	ne
 800164a:	2301      	movne	r3, #1
 800164c:	2300      	moveq	r3, #0
 800164e:	b2db      	uxtb	r3, r3
 8001650:	2b00      	cmp	r3, #0
 8001652:	d001      	beq.n	8001658 <_ZL12MX_I2C3_Initv+0x70>
  {
    Error_Handler();
 8001654:	f000 f996 	bl	8001984 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001658:	2100      	movs	r1, #0
 800165a:	4807      	ldr	r0, [pc, #28]	; (8001678 <_ZL12MX_I2C3_Initv+0x90>)
 800165c:	f003 fdbe 	bl	80051dc <HAL_I2CEx_ConfigDigitalFilter>
 8001660:	4603      	mov	r3, r0
 8001662:	2b00      	cmp	r3, #0
 8001664:	bf14      	ite	ne
 8001666:	2301      	movne	r3, #1
 8001668:	2300      	moveq	r3, #0
 800166a:	b2db      	uxtb	r3, r3
 800166c:	2b00      	cmp	r3, #0
 800166e:	d001      	beq.n	8001674 <_ZL12MX_I2C3_Initv+0x8c>
  {
    Error_Handler();
 8001670:	f000 f988 	bl	8001984 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001674:	bf00      	nop
 8001676:	bd80      	pop	{r7, pc}
 8001678:	2400031c 	.word	0x2400031c
 800167c:	40005c00 	.word	0x40005c00
 8001680:	307075b1 	.word	0x307075b1

08001684 <_ZL12MX_JPEG_Initv>:
  * @brief JPEG Initialization Function
  * @param None
  * @retval None
  */
static void MX_JPEG_Init(void)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	af00      	add	r7, sp, #0
  /* USER CODE END JPEG_Init 0 */

  /* USER CODE BEGIN JPEG_Init 1 */

  /* USER CODE END JPEG_Init 1 */
  hjpeg.Instance = JPEG;
 8001688:	4b08      	ldr	r3, [pc, #32]	; (80016ac <_ZL12MX_JPEG_Initv+0x28>)
 800168a:	4a09      	ldr	r2, [pc, #36]	; (80016b0 <_ZL12MX_JPEG_Initv+0x2c>)
 800168c:	601a      	str	r2, [r3, #0]
  if (HAL_JPEG_Init(&hjpeg) != HAL_OK)
 800168e:	4807      	ldr	r0, [pc, #28]	; (80016ac <_ZL12MX_JPEG_Initv+0x28>)
 8001690:	f003 fdf0 	bl	8005274 <HAL_JPEG_Init>
 8001694:	4603      	mov	r3, r0
 8001696:	2b00      	cmp	r3, #0
 8001698:	bf14      	ite	ne
 800169a:	2301      	movne	r3, #1
 800169c:	2300      	moveq	r3, #0
 800169e:	b2db      	uxtb	r3, r3
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d001      	beq.n	80016a8 <_ZL12MX_JPEG_Initv+0x24>
  {
    Error_Handler();
 80016a4:	f000 f96e 	bl	8001984 <Error_Handler>
  }
  /* USER CODE BEGIN JPEG_Init 2 */

  /* USER CODE END JPEG_Init 2 */

}
 80016a8:	bf00      	nop
 80016aa:	bd80      	pop	{r7, pc}
 80016ac:	24000368 	.word	0x24000368
 80016b0:	52003000 	.word	0x52003000

080016b4 <_ZL13MX_UART8_Initv>:
  * @brief UART8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART8_Init(void)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 80016b8:	4b2d      	ldr	r3, [pc, #180]	; (8001770 <_ZL13MX_UART8_Initv+0xbc>)
 80016ba:	4a2e      	ldr	r2, [pc, #184]	; (8001774 <_ZL13MX_UART8_Initv+0xc0>)
 80016bc:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 38400;
 80016be:	4b2c      	ldr	r3, [pc, #176]	; (8001770 <_ZL13MX_UART8_Initv+0xbc>)
 80016c0:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 80016c4:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 80016c6:	4b2a      	ldr	r3, [pc, #168]	; (8001770 <_ZL13MX_UART8_Initv+0xbc>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 80016cc:	4b28      	ldr	r3, [pc, #160]	; (8001770 <_ZL13MX_UART8_Initv+0xbc>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 80016d2:	4b27      	ldr	r3, [pc, #156]	; (8001770 <_ZL13MX_UART8_Initv+0xbc>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 80016d8:	4b25      	ldr	r3, [pc, #148]	; (8001770 <_ZL13MX_UART8_Initv+0xbc>)
 80016da:	220c      	movs	r2, #12
 80016dc:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016de:	4b24      	ldr	r3, [pc, #144]	; (8001770 <_ZL13MX_UART8_Initv+0xbc>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 80016e4:	4b22      	ldr	r3, [pc, #136]	; (8001770 <_ZL13MX_UART8_Initv+0xbc>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	61da      	str	r2, [r3, #28]
  huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80016ea:	4b21      	ldr	r3, [pc, #132]	; (8001770 <_ZL13MX_UART8_Initv+0xbc>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	621a      	str	r2, [r3, #32]
  huart8.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80016f0:	4b1f      	ldr	r3, [pc, #124]	; (8001770 <_ZL13MX_UART8_Initv+0xbc>)
 80016f2:	2200      	movs	r2, #0
 80016f4:	625a      	str	r2, [r3, #36]	; 0x24
  huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80016f6:	4b1e      	ldr	r3, [pc, #120]	; (8001770 <_ZL13MX_UART8_Initv+0xbc>)
 80016f8:	2200      	movs	r2, #0
 80016fa:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart8) != HAL_OK)
 80016fc:	481c      	ldr	r0, [pc, #112]	; (8001770 <_ZL13MX_UART8_Initv+0xbc>)
 80016fe:	f007 fb17 	bl	8008d30 <HAL_UART_Init>
 8001702:	4603      	mov	r3, r0
 8001704:	2b00      	cmp	r3, #0
 8001706:	bf14      	ite	ne
 8001708:	2301      	movne	r3, #1
 800170a:	2300      	moveq	r3, #0
 800170c:	b2db      	uxtb	r3, r3
 800170e:	2b00      	cmp	r3, #0
 8001710:	d001      	beq.n	8001716 <_ZL13MX_UART8_Initv+0x62>
  {
    Error_Handler();
 8001712:	f000 f937 	bl	8001984 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart8, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001716:	2100      	movs	r1, #0
 8001718:	4815      	ldr	r0, [pc, #84]	; (8001770 <_ZL13MX_UART8_Initv+0xbc>)
 800171a:	f00a f98e 	bl	800ba3a <HAL_UARTEx_SetTxFifoThreshold>
 800171e:	4603      	mov	r3, r0
 8001720:	2b00      	cmp	r3, #0
 8001722:	bf14      	ite	ne
 8001724:	2301      	movne	r3, #1
 8001726:	2300      	moveq	r3, #0
 8001728:	b2db      	uxtb	r3, r3
 800172a:	2b00      	cmp	r3, #0
 800172c:	d001      	beq.n	8001732 <_ZL13MX_UART8_Initv+0x7e>
  {
    Error_Handler();
 800172e:	f000 f929 	bl	8001984 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart8, UART_RXFIFO_THRESHOLD_8_8) != HAL_OK)
 8001732:	f04f 6120 	mov.w	r1, #167772160	; 0xa000000
 8001736:	480e      	ldr	r0, [pc, #56]	; (8001770 <_ZL13MX_UART8_Initv+0xbc>)
 8001738:	f00a f9bd 	bl	800bab6 <HAL_UARTEx_SetRxFifoThreshold>
 800173c:	4603      	mov	r3, r0
 800173e:	2b00      	cmp	r3, #0
 8001740:	bf14      	ite	ne
 8001742:	2301      	movne	r3, #1
 8001744:	2300      	moveq	r3, #0
 8001746:	b2db      	uxtb	r3, r3
 8001748:	2b00      	cmp	r3, #0
 800174a:	d001      	beq.n	8001750 <_ZL13MX_UART8_Initv+0x9c>
  {
    Error_Handler();
 800174c:	f000 f91a 	bl	8001984 <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart8) != HAL_OK)
 8001750:	4807      	ldr	r0, [pc, #28]	; (8001770 <_ZL13MX_UART8_Initv+0xbc>)
 8001752:	f00a f937 	bl	800b9c4 <HAL_UARTEx_EnableFifoMode>
 8001756:	4603      	mov	r3, r0
 8001758:	2b00      	cmp	r3, #0
 800175a:	bf14      	ite	ne
 800175c:	2301      	movne	r3, #1
 800175e:	2300      	moveq	r3, #0
 8001760:	b2db      	uxtb	r3, r3
 8001762:	2b00      	cmp	r3, #0
 8001764:	d001      	beq.n	800176a <_ZL13MX_UART8_Initv+0xb6>
  {
    Error_Handler();
 8001766:	f000 f90d 	bl	8001984 <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 800176a:	bf00      	nop
 800176c:	bd80      	pop	{r7, pc}
 800176e:	bf00      	nop
 8001770:	240003c0 	.word	0x240003c0
 8001774:	40007c00 	.word	0x40007c00

08001778 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b08a      	sub	sp, #40	; 0x28
 800177c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800177e:	f107 0314 	add.w	r3, r7, #20
 8001782:	2200      	movs	r2, #0
 8001784:	601a      	str	r2, [r3, #0]
 8001786:	605a      	str	r2, [r3, #4]
 8001788:	609a      	str	r2, [r3, #8]
 800178a:	60da      	str	r2, [r3, #12]
 800178c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800178e:	4b35      	ldr	r3, [pc, #212]	; (8001864 <_ZL12MX_GPIO_Initv+0xec>)
 8001790:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001794:	4a33      	ldr	r2, [pc, #204]	; (8001864 <_ZL12MX_GPIO_Initv+0xec>)
 8001796:	f043 0304 	orr.w	r3, r3, #4
 800179a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800179e:	4b31      	ldr	r3, [pc, #196]	; (8001864 <_ZL12MX_GPIO_Initv+0xec>)
 80017a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017a4:	f003 0304 	and.w	r3, r3, #4
 80017a8:	613b      	str	r3, [r7, #16]
 80017aa:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017ac:	4b2d      	ldr	r3, [pc, #180]	; (8001864 <_ZL12MX_GPIO_Initv+0xec>)
 80017ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017b2:	4a2c      	ldr	r2, [pc, #176]	; (8001864 <_ZL12MX_GPIO_Initv+0xec>)
 80017b4:	f043 0301 	orr.w	r3, r3, #1
 80017b8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80017bc:	4b29      	ldr	r3, [pc, #164]	; (8001864 <_ZL12MX_GPIO_Initv+0xec>)
 80017be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017c2:	f003 0301 	and.w	r3, r3, #1
 80017c6:	60fb      	str	r3, [r7, #12]
 80017c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017ca:	4b26      	ldr	r3, [pc, #152]	; (8001864 <_ZL12MX_GPIO_Initv+0xec>)
 80017cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017d0:	4a24      	ldr	r2, [pc, #144]	; (8001864 <_ZL12MX_GPIO_Initv+0xec>)
 80017d2:	f043 0302 	orr.w	r3, r3, #2
 80017d6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80017da:	4b22      	ldr	r3, [pc, #136]	; (8001864 <_ZL12MX_GPIO_Initv+0xec>)
 80017dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017e0:	f003 0302 	and.w	r3, r3, #2
 80017e4:	60bb      	str	r3, [r7, #8]
 80017e6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80017e8:	4b1e      	ldr	r3, [pc, #120]	; (8001864 <_ZL12MX_GPIO_Initv+0xec>)
 80017ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017ee:	4a1d      	ldr	r2, [pc, #116]	; (8001864 <_ZL12MX_GPIO_Initv+0xec>)
 80017f0:	f043 0310 	orr.w	r3, r3, #16
 80017f4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80017f8:	4b1a      	ldr	r3, [pc, #104]	; (8001864 <_ZL12MX_GPIO_Initv+0xec>)
 80017fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017fe:	f003 0310 	and.w	r3, r3, #16
 8001802:	607b      	str	r3, [r7, #4]
 8001804:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SH7_Pin|SH6_Pin|SH5_Pin, GPIO_PIN_RESET);
 8001806:	2200      	movs	r2, #0
 8001808:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 800180c:	4816      	ldr	r0, [pc, #88]	; (8001868 <_ZL12MX_GPIO_Initv+0xf0>)
 800180e:	f001 fd27 	bl	8003260 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SH4_Pin|SH3_Pin|SH2_Pin|SH1_Pin, GPIO_PIN_RESET);
 8001812:	2200      	movs	r2, #0
 8001814:	f44f 51f0 	mov.w	r1, #7680	; 0x1e00
 8001818:	4814      	ldr	r0, [pc, #80]	; (800186c <_ZL12MX_GPIO_Initv+0xf4>)
 800181a:	f001 fd21 	bl	8003260 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SH7_Pin SH6_Pin SH5_Pin */
  GPIO_InitStruct.Pin = SH7_Pin|SH6_Pin|SH5_Pin;
 800181e:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8001822:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001824:	2301      	movs	r3, #1
 8001826:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001828:	2300      	movs	r3, #0
 800182a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800182c:	2300      	movs	r3, #0
 800182e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001830:	f107 0314 	add.w	r3, r7, #20
 8001834:	4619      	mov	r1, r3
 8001836:	480c      	ldr	r0, [pc, #48]	; (8001868 <_ZL12MX_GPIO_Initv+0xf0>)
 8001838:	f001 fa58 	bl	8002cec <HAL_GPIO_Init>

  /*Configure GPIO pins : SH4_Pin SH3_Pin SH2_Pin SH1_Pin */
  GPIO_InitStruct.Pin = SH4_Pin|SH3_Pin|SH2_Pin|SH1_Pin;
 800183c:	f44f 53f0 	mov.w	r3, #7680	; 0x1e00
 8001840:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001842:	2301      	movs	r3, #1
 8001844:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001846:	2300      	movs	r3, #0
 8001848:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800184a:	2300      	movs	r3, #0
 800184c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800184e:	f107 0314 	add.w	r3, r7, #20
 8001852:	4619      	mov	r1, r3
 8001854:	4805      	ldr	r0, [pc, #20]	; (800186c <_ZL12MX_GPIO_Initv+0xf4>)
 8001856:	f001 fa49 	bl	8002cec <HAL_GPIO_Init>

}
 800185a:	bf00      	nop
 800185c:	3728      	adds	r7, #40	; 0x28
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}
 8001862:	bf00      	nop
 8001864:	58024400 	.word	0x58024400
 8001868:	58020800 	.word	0x58020800
 800186c:	58020000 	.word	0x58020000

08001870 <get_TOF_Data>:
/* USER CODE BEGIN 4 */



// dummy functions to be used as interfaces to other blocks
void get_TOF_Data() {
 8001870:	b580      	push	{r7, lr}
 8001872:	b0ac      	sub	sp, #176	; 0xb0
 8001874:	af00      	add	r7, sp, #0

	VL53L0X_RangingMeasurementData_t measure;

	int data[7][5];
	for (int i = 0; i < 5; i++) {
 8001876:	2300      	movs	r3, #0
 8001878:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800187c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001880:	2b04      	cmp	r3, #4
 8001882:	dc31      	bgt.n	80018e8 <get_TOF_Data+0x78>
		for (int j = 0; j < 7; j++) {
 8001884:	2300      	movs	r3, #0
 8001886:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800188a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800188e:	2b06      	cmp	r3, #6
 8001890:	dc24      	bgt.n	80018dc <get_TOF_Data+0x6c>
			sensor[j].rangingTest(&measure, true);
 8001892:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001896:	f44f 72ee 	mov.w	r2, #476	; 0x1dc
 800189a:	fb02 f303 	mul.w	r3, r2, r3
 800189e:	4a17      	ldr	r2, [pc, #92]	; (80018fc <get_TOF_Data+0x8c>)
 80018a0:	4413      	add	r3, r2
 80018a2:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 80018a6:	2201      	movs	r2, #1
 80018a8:	4618      	mov	r0, r3
 80018aa:	f7ff faf4 	bl	8000e96 <_ZN11HAL_VL53L0X11rangingTestEP32VL53L0X_RangingMeasurementData_tb>
			data[j][i] = measure.RangeMilliMeter;
 80018ae:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 80018b2:	4619      	mov	r1, r3
 80018b4:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80018b8:	4613      	mov	r3, r2
 80018ba:	009b      	lsls	r3, r3, #2
 80018bc:	4413      	add	r3, r2
 80018be:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80018c2:	4413      	add	r3, r2
 80018c4:	009b      	lsls	r3, r3, #2
 80018c6:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 80018ca:	4413      	add	r3, r2
 80018cc:	f843 1cb0 	str.w	r1, [r3, #-176]
		for (int j = 0; j < 7; j++) {
 80018d0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80018d4:	3301      	adds	r3, #1
 80018d6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80018da:	e7d6      	b.n	800188a <get_TOF_Data+0x1a>
	for (int i = 0; i < 5; i++) {
 80018dc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80018e0:	3301      	adds	r3, #1
 80018e2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80018e6:	e7c9      	b.n	800187c <get_TOF_Data+0xc>
		}
	}

	process_ToF(object_list, &object_num, data);
 80018e8:	463b      	mov	r3, r7
 80018ea:	461a      	mov	r2, r3
 80018ec:	4904      	ldr	r1, [pc, #16]	; (8001900 <get_TOF_Data+0x90>)
 80018ee:	4805      	ldr	r0, [pc, #20]	; (8001904 <get_TOF_Data+0x94>)
 80018f0:	f000 fbea 	bl	80020c8 <process_ToF>
}
 80018f4:	bf00      	nop
 80018f6:	37b0      	adds	r7, #176	; 0xb0
 80018f8:	46bd      	mov	sp, r7
 80018fa:	bd80      	pop	{r7, pc}
 80018fc:	2400044c 	.word	0x2400044c
 8001900:	24056a6c 	.word	0x24056a6c
 8001904:	24056a3c 	.word	0x24056a3c

08001908 <HAL_I2C_SlaveRxCpltCallback>:
	//printf("Interrupt triggered.");

}

// for when we are triggered as slave
void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef * hi2c) {
 8001908:	b580      	push	{r7, lr}
 800190a:	b084      	sub	sp, #16
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
	uint8_t message = 1;
 8001910:	2301      	movs	r3, #1
 8001912:	73fb      	strb	r3, [r7, #15]

	if (master_comm_buff[0] == 0x01)
 8001914:	4b0b      	ldr	r3, [pc, #44]	; (8001944 <HAL_I2C_SlaveRxCpltCallback+0x3c>)
 8001916:	781b      	ldrb	r3, [r3, #0]
 8001918:	2b01      	cmp	r3, #1
 800191a:	d107      	bne.n	800192c <HAL_I2C_SlaveRxCpltCallback+0x24>
		HAL_I2C_Slave_Transmit(hi2c, &message, 1, HAL_MAX_DELAY);
 800191c:	f107 010f 	add.w	r1, r7, #15
 8001920:	f04f 33ff 	mov.w	r3, #4294967295
 8001924:	2201      	movs	r2, #1
 8001926:	6878      	ldr	r0, [r7, #4]
 8001928:	f001 ff2e 	bl	8003788 <HAL_I2C_Slave_Transmit>

	printf("In call back.\n");
 800192c:	4806      	ldr	r0, [pc, #24]	; (8001948 <HAL_I2C_SlaveRxCpltCallback+0x40>)
 800192e:	f00c f893 	bl	800da58 <puts>
	HAL_I2C_Slave_Receive_IT(hi2c, master_comm_buff, 1);
 8001932:	2201      	movs	r2, #1
 8001934:	4903      	ldr	r1, [pc, #12]	; (8001944 <HAL_I2C_SlaveRxCpltCallback+0x3c>)
 8001936:	6878      	ldr	r0, [r7, #4]
 8001938:	f002 f830 	bl	800399c <HAL_I2C_Slave_Receive_IT>
}
 800193c:	bf00      	nop
 800193e:	3710      	adds	r7, #16
 8001940:	46bd      	mov	sp, r7
 8001942:	bd80      	pop	{r7, pc}
 8001944:	24001150 	.word	0x24001150
 8001948:	0800ebd8 	.word	0x0800ebd8

0800194c <_write>:
 * 		- enable SWV ITM Data Console in Windows
 * 		- enable whichever ports necessary, can leave memory as default, check console settings here
 * 		- ensure that debug settings are enabled as such that SWV is enabled, probe is GDB server, and
 * 			clock matches the SYSCLK, not HCLK
 */
int _write(int file, char* out, int len) {
 800194c:	b580      	push	{r7, lr}
 800194e:	b086      	sub	sp, #24
 8001950:	af00      	add	r7, sp, #0
 8001952:	60f8      	str	r0, [r7, #12]
 8001954:	60b9      	str	r1, [r7, #8]
 8001956:	607a      	str	r2, [r7, #4]
	for (int i = 0; i < len; i++) {
 8001958:	2300      	movs	r3, #0
 800195a:	617b      	str	r3, [r7, #20]
 800195c:	697a      	ldr	r2, [r7, #20]
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	429a      	cmp	r2, r3
 8001962:	da0a      	bge.n	800197a <_write+0x2e>
		ITM_SendChar(out[i]);
 8001964:	697b      	ldr	r3, [r7, #20]
 8001966:	68ba      	ldr	r2, [r7, #8]
 8001968:	4413      	add	r3, r2
 800196a:	781b      	ldrb	r3, [r3, #0]
 800196c:	4618      	mov	r0, r3
 800196e:	f7ff fa61 	bl	8000e34 <ITM_SendChar>
	for (int i = 0; i < len; i++) {
 8001972:	697b      	ldr	r3, [r7, #20]
 8001974:	3301      	adds	r3, #1
 8001976:	617b      	str	r3, [r7, #20]
 8001978:	e7f0      	b.n	800195c <_write+0x10>
	}
	return len;
 800197a:	687b      	ldr	r3, [r7, #4]
}
 800197c:	4618      	mov	r0, r3
 800197e:	3718      	adds	r7, #24
 8001980:	46bd      	mov	sp, r7
 8001982:	bd80      	pop	{r7, pc}

08001984 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001984:	b480      	push	{r7}
 8001986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001988:	bf00      	nop
 800198a:	46bd      	mov	sp, r7
 800198c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001990:	4770      	bx	lr
	...

08001994 <_Z41__static_initialization_and_destruction_0ii>:
 8001994:	b5b0      	push	{r4, r5, r7, lr}
 8001996:	b082      	sub	sp, #8
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
 800199c:	6039      	str	r1, [r7, #0]
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	2b01      	cmp	r3, #1
 80019a2:	d110      	bne.n	80019c6 <_Z41__static_initialization_and_destruction_0ii+0x32>
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80019aa:	4293      	cmp	r3, r2
 80019ac:	d10b      	bne.n	80019c6 <_Z41__static_initialization_and_destruction_0ii+0x32>
HAL_VL53L0X sensor[7];
 80019ae:	4b08      	ldr	r3, [pc, #32]	; (80019d0 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
 80019b0:	2406      	movs	r4, #6
 80019b2:	461d      	mov	r5, r3
 80019b4:	2c00      	cmp	r4, #0
 80019b6:	db06      	blt.n	80019c6 <_Z41__static_initialization_and_destruction_0ii+0x32>
 80019b8:	4628      	mov	r0, r5
 80019ba:	f7ff fa7e 	bl	8000eba <_ZN11HAL_VL53L0XC1Ev>
 80019be:	f505 75ee 	add.w	r5, r5, #476	; 0x1dc
 80019c2:	3c01      	subs	r4, #1
 80019c4:	e7f6      	b.n	80019b4 <_Z41__static_initialization_and_destruction_0ii+0x20>
}
 80019c6:	bf00      	nop
 80019c8:	3708      	adds	r7, #8
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bdb0      	pop	{r4, r5, r7, pc}
 80019ce:	bf00      	nop
 80019d0:	2400044c 	.word	0x2400044c

080019d4 <_GLOBAL__sub_I_hi2c1>:
 80019d4:	b580      	push	{r7, lr}
 80019d6:	af00      	add	r7, sp, #0
 80019d8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80019dc:	2001      	movs	r0, #1
 80019de:	f7ff ffd9 	bl	8001994 <_Z41__static_initialization_and_destruction_0ii>
 80019e2:	bd80      	pop	{r7, pc}

080019e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019e4:	b480      	push	{r7}
 80019e6:	b083      	sub	sp, #12
 80019e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019ea:	4b0a      	ldr	r3, [pc, #40]	; (8001a14 <HAL_MspInit+0x30>)
 80019ec:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80019f0:	4a08      	ldr	r2, [pc, #32]	; (8001a14 <HAL_MspInit+0x30>)
 80019f2:	f043 0302 	orr.w	r3, r3, #2
 80019f6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80019fa:	4b06      	ldr	r3, [pc, #24]	; (8001a14 <HAL_MspInit+0x30>)
 80019fc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001a00:	f003 0302 	and.w	r3, r3, #2
 8001a04:	607b      	str	r3, [r7, #4]
 8001a06:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a08:	bf00      	nop
 8001a0a:	370c      	adds	r7, #12
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a12:	4770      	bx	lr
 8001a14:	58024400 	.word	0x58024400

08001a18 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b08c      	sub	sp, #48	; 0x30
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a20:	f107 031c 	add.w	r3, r7, #28
 8001a24:	2200      	movs	r2, #0
 8001a26:	601a      	str	r2, [r3, #0]
 8001a28:	605a      	str	r2, [r3, #4]
 8001a2a:	609a      	str	r2, [r3, #8]
 8001a2c:	60da      	str	r2, [r3, #12]
 8001a2e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	4a4c      	ldr	r2, [pc, #304]	; (8001b68 <HAL_I2C_MspInit+0x150>)
 8001a36:	4293      	cmp	r3, r2
 8001a38:	d136      	bne.n	8001aa8 <HAL_I2C_MspInit+0x90>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a3a:	4b4c      	ldr	r3, [pc, #304]	; (8001b6c <HAL_I2C_MspInit+0x154>)
 8001a3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a40:	4a4a      	ldr	r2, [pc, #296]	; (8001b6c <HAL_I2C_MspInit+0x154>)
 8001a42:	f043 0302 	orr.w	r3, r3, #2
 8001a46:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a4a:	4b48      	ldr	r3, [pc, #288]	; (8001b6c <HAL_I2C_MspInit+0x154>)
 8001a4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a50:	f003 0302 	and.w	r3, r3, #2
 8001a54:	61bb      	str	r3, [r7, #24]
 8001a56:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001a58:	23c0      	movs	r3, #192	; 0xc0
 8001a5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a5c:	2312      	movs	r3, #18
 8001a5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a60:	2300      	movs	r3, #0
 8001a62:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a64:	2300      	movs	r3, #0
 8001a66:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001a68:	2304      	movs	r3, #4
 8001a6a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a6c:	f107 031c 	add.w	r3, r7, #28
 8001a70:	4619      	mov	r1, r3
 8001a72:	483f      	ldr	r0, [pc, #252]	; (8001b70 <HAL_I2C_MspInit+0x158>)
 8001a74:	f001 f93a 	bl	8002cec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001a78:	4b3c      	ldr	r3, [pc, #240]	; (8001b6c <HAL_I2C_MspInit+0x154>)
 8001a7a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001a7e:	4a3b      	ldr	r2, [pc, #236]	; (8001b6c <HAL_I2C_MspInit+0x154>)
 8001a80:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001a84:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001a88:	4b38      	ldr	r3, [pc, #224]	; (8001b6c <HAL_I2C_MspInit+0x154>)
 8001a8a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001a8e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a92:	617b      	str	r3, [r7, #20]
 8001a94:	697b      	ldr	r3, [r7, #20]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 1, 0);
 8001a96:	2200      	movs	r2, #0
 8001a98:	2101      	movs	r1, #1
 8001a9a:	201f      	movs	r0, #31
 8001a9c:	f000 ff4d 	bl	800293a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001aa0:	201f      	movs	r0, #31
 8001aa2:	f000 ff64 	bl	800296e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8001aa6:	e05b      	b.n	8001b60 <HAL_I2C_MspInit+0x148>
  else if(hi2c->Instance==I2C3)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	4a31      	ldr	r2, [pc, #196]	; (8001b74 <HAL_I2C_MspInit+0x15c>)
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	d156      	bne.n	8001b60 <HAL_I2C_MspInit+0x148>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ab2:	4b2e      	ldr	r3, [pc, #184]	; (8001b6c <HAL_I2C_MspInit+0x154>)
 8001ab4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ab8:	4a2c      	ldr	r2, [pc, #176]	; (8001b6c <HAL_I2C_MspInit+0x154>)
 8001aba:	f043 0304 	orr.w	r3, r3, #4
 8001abe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001ac2:	4b2a      	ldr	r3, [pc, #168]	; (8001b6c <HAL_I2C_MspInit+0x154>)
 8001ac4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ac8:	f003 0304 	and.w	r3, r3, #4
 8001acc:	613b      	str	r3, [r7, #16]
 8001ace:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ad0:	4b26      	ldr	r3, [pc, #152]	; (8001b6c <HAL_I2C_MspInit+0x154>)
 8001ad2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ad6:	4a25      	ldr	r2, [pc, #148]	; (8001b6c <HAL_I2C_MspInit+0x154>)
 8001ad8:	f043 0301 	orr.w	r3, r3, #1
 8001adc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001ae0:	4b22      	ldr	r3, [pc, #136]	; (8001b6c <HAL_I2C_MspInit+0x154>)
 8001ae2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ae6:	f003 0301 	and.w	r3, r3, #1
 8001aea:	60fb      	str	r3, [r7, #12]
 8001aec:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001aee:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001af2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001af4:	2312      	movs	r3, #18
 8001af6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001af8:	2300      	movs	r3, #0
 8001afa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001afc:	2300      	movs	r3, #0
 8001afe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001b00:	2304      	movs	r3, #4
 8001b02:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b04:	f107 031c 	add.w	r3, r7, #28
 8001b08:	4619      	mov	r1, r3
 8001b0a:	481b      	ldr	r0, [pc, #108]	; (8001b78 <HAL_I2C_MspInit+0x160>)
 8001b0c:	f001 f8ee 	bl	8002cec <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001b10:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b16:	2312      	movs	r3, #18
 8001b18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001b22:	2304      	movs	r3, #4
 8001b24:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b26:	f107 031c 	add.w	r3, r7, #28
 8001b2a:	4619      	mov	r1, r3
 8001b2c:	4813      	ldr	r0, [pc, #76]	; (8001b7c <HAL_I2C_MspInit+0x164>)
 8001b2e:	f001 f8dd 	bl	8002cec <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001b32:	4b0e      	ldr	r3, [pc, #56]	; (8001b6c <HAL_I2C_MspInit+0x154>)
 8001b34:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001b38:	4a0c      	ldr	r2, [pc, #48]	; (8001b6c <HAL_I2C_MspInit+0x154>)
 8001b3a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001b3e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001b42:	4b0a      	ldr	r3, [pc, #40]	; (8001b6c <HAL_I2C_MspInit+0x154>)
 8001b44:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001b48:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001b4c:	60bb      	str	r3, [r7, #8]
 8001b4e:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(I2C3_EV_IRQn, 0, 0);
 8001b50:	2200      	movs	r2, #0
 8001b52:	2100      	movs	r1, #0
 8001b54:	2048      	movs	r0, #72	; 0x48
 8001b56:	f000 fef0 	bl	800293a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_EV_IRQn);
 8001b5a:	2048      	movs	r0, #72	; 0x48
 8001b5c:	f000 ff07 	bl	800296e <HAL_NVIC_EnableIRQ>
}
 8001b60:	bf00      	nop
 8001b62:	3730      	adds	r7, #48	; 0x30
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bd80      	pop	{r7, pc}
 8001b68:	40005400 	.word	0x40005400
 8001b6c:	58024400 	.word	0x58024400
 8001b70:	58020400 	.word	0x58020400
 8001b74:	40005c00 	.word	0x40005c00
 8001b78:	58020800 	.word	0x58020800
 8001b7c:	58020000 	.word	0x58020000

08001b80 <HAL_JPEG_MspInit>:
* This function configures the hardware resources used in this example
* @param hjpeg: JPEG handle pointer
* @retval None
*/
void HAL_JPEG_MspInit(JPEG_HandleTypeDef* hjpeg)
{
 8001b80:	b480      	push	{r7}
 8001b82:	b085      	sub	sp, #20
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
  if(hjpeg->Instance==JPEG)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4a0b      	ldr	r2, [pc, #44]	; (8001bbc <HAL_JPEG_MspInit+0x3c>)
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	d10e      	bne.n	8001bb0 <HAL_JPEG_MspInit+0x30>
  {
  /* USER CODE BEGIN JPEG_MspInit 0 */

  /* USER CODE END JPEG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_JPEG_CLK_ENABLE();
 8001b92:	4b0b      	ldr	r3, [pc, #44]	; (8001bc0 <HAL_JPEG_MspInit+0x40>)
 8001b94:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001b98:	4a09      	ldr	r2, [pc, #36]	; (8001bc0 <HAL_JPEG_MspInit+0x40>)
 8001b9a:	f043 0320 	orr.w	r3, r3, #32
 8001b9e:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8001ba2:	4b07      	ldr	r3, [pc, #28]	; (8001bc0 <HAL_JPEG_MspInit+0x40>)
 8001ba4:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001ba8:	f003 0320 	and.w	r3, r3, #32
 8001bac:	60fb      	str	r3, [r7, #12]
 8001bae:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN JPEG_MspInit 1 */

  /* USER CODE END JPEG_MspInit 1 */
  }

}
 8001bb0:	bf00      	nop
 8001bb2:	3714      	adds	r7, #20
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bba:	4770      	bx	lr
 8001bbc:	52003000 	.word	0x52003000
 8001bc0:	58024400 	.word	0x58024400

08001bc4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b08a      	sub	sp, #40	; 0x28
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bcc:	f107 0314 	add.w	r3, r7, #20
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	601a      	str	r2, [r3, #0]
 8001bd4:	605a      	str	r2, [r3, #4]
 8001bd6:	609a      	str	r2, [r3, #8]
 8001bd8:	60da      	str	r2, [r3, #12]
 8001bda:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART8)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4a1e      	ldr	r2, [pc, #120]	; (8001c5c <HAL_UART_MspInit+0x98>)
 8001be2:	4293      	cmp	r3, r2
 8001be4:	d135      	bne.n	8001c52 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN UART8_MspInit 0 */

  /* USER CODE END UART8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART8_CLK_ENABLE();
 8001be6:	4b1e      	ldr	r3, [pc, #120]	; (8001c60 <HAL_UART_MspInit+0x9c>)
 8001be8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001bec:	4a1c      	ldr	r2, [pc, #112]	; (8001c60 <HAL_UART_MspInit+0x9c>)
 8001bee:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001bf2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001bf6:	4b1a      	ldr	r3, [pc, #104]	; (8001c60 <HAL_UART_MspInit+0x9c>)
 8001bf8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001bfc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001c00:	613b      	str	r3, [r7, #16]
 8001c02:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001c04:	4b16      	ldr	r3, [pc, #88]	; (8001c60 <HAL_UART_MspInit+0x9c>)
 8001c06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c0a:	4a15      	ldr	r2, [pc, #84]	; (8001c60 <HAL_UART_MspInit+0x9c>)
 8001c0c:	f043 0310 	orr.w	r3, r3, #16
 8001c10:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c14:	4b12      	ldr	r3, [pc, #72]	; (8001c60 <HAL_UART_MspInit+0x9c>)
 8001c16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c1a:	f003 0310 	and.w	r3, r3, #16
 8001c1e:	60fb      	str	r3, [r7, #12]
 8001c20:	68fb      	ldr	r3, [r7, #12]
    /**UART8 GPIO Configuration    
    PE0     ------> UART8_RX
    PE1     ------> UART8_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001c22:	2303      	movs	r3, #3
 8001c24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c26:	2302      	movs	r3, #2
 8001c28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c2e:	2302      	movs	r3, #2
 8001c30:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 8001c32:	2308      	movs	r3, #8
 8001c34:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001c36:	f107 0314 	add.w	r3, r7, #20
 8001c3a:	4619      	mov	r1, r3
 8001c3c:	4809      	ldr	r0, [pc, #36]	; (8001c64 <HAL_UART_MspInit+0xa0>)
 8001c3e:	f001 f855 	bl	8002cec <HAL_GPIO_Init>

    /* UART8 interrupt Init */
    HAL_NVIC_SetPriority(UART8_IRQn, 1, 0);
 8001c42:	2200      	movs	r2, #0
 8001c44:	2101      	movs	r1, #1
 8001c46:	2053      	movs	r0, #83	; 0x53
 8001c48:	f000 fe77 	bl	800293a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART8_IRQn);
 8001c4c:	2053      	movs	r0, #83	; 0x53
 8001c4e:	f000 fe8e 	bl	800296e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART8_MspInit 1 */

  /* USER CODE END UART8_MspInit 1 */
  }

}
 8001c52:	bf00      	nop
 8001c54:	3728      	adds	r7, #40	; 0x28
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd80      	pop	{r7, pc}
 8001c5a:	bf00      	nop
 8001c5c:	40007c00 	.word	0x40007c00
 8001c60:	58024400 	.word	0x58024400
 8001c64:	58021000 	.word	0x58021000

08001c68 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b082      	sub	sp, #8
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
  if(huart->Instance==UART8)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	4a0a      	ldr	r2, [pc, #40]	; (8001ca0 <HAL_UART_MspDeInit+0x38>)
 8001c76:	4293      	cmp	r3, r2
 8001c78:	d10e      	bne.n	8001c98 <HAL_UART_MspDeInit+0x30>
  {
  /* USER CODE BEGIN UART8_MspDeInit 0 */

  /* USER CODE END UART8_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_UART8_CLK_DISABLE();
 8001c7a:	4b0a      	ldr	r3, [pc, #40]	; (8001ca4 <HAL_UART_MspDeInit+0x3c>)
 8001c7c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001c80:	4a08      	ldr	r2, [pc, #32]	; (8001ca4 <HAL_UART_MspDeInit+0x3c>)
 8001c82:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001c86:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  
    /**UART8 GPIO Configuration    
    PE0     ------> UART8_RX
    PE1     ------> UART8_TX 
    */
    HAL_GPIO_DeInit(GPIOE, GPIO_PIN_0|GPIO_PIN_1);
 8001c8a:	2103      	movs	r1, #3
 8001c8c:	4806      	ldr	r0, [pc, #24]	; (8001ca8 <HAL_UART_MspDeInit+0x40>)
 8001c8e:	f001 f9dd 	bl	800304c <HAL_GPIO_DeInit>

    /* UART8 interrupt DeInit */
    HAL_NVIC_DisableIRQ(UART8_IRQn);
 8001c92:	2053      	movs	r0, #83	; 0x53
 8001c94:	f000 fe79 	bl	800298a <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN UART8_MspDeInit 1 */

  /* USER CODE END UART8_MspDeInit 1 */
  }

}
 8001c98:	bf00      	nop
 8001c9a:	3708      	adds	r7, #8
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	bd80      	pop	{r7, pc}
 8001ca0:	40007c00 	.word	0x40007c00
 8001ca4:	58024400 	.word	0x58024400
 8001ca8:	58021000 	.word	0x58021000

08001cac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001cac:	b480      	push	{r7}
 8001cae:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001cb0:	bf00      	nop
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb8:	4770      	bx	lr

08001cba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001cba:	b480      	push	{r7}
 8001cbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001cbe:	e7fe      	b.n	8001cbe <HardFault_Handler+0x4>

08001cc0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001cc4:	e7fe      	b.n	8001cc4 <MemManage_Handler+0x4>

08001cc6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001cc6:	b480      	push	{r7}
 8001cc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001cca:	e7fe      	b.n	8001cca <BusFault_Handler+0x4>

08001ccc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001cd0:	e7fe      	b.n	8001cd0 <UsageFault_Handler+0x4>

08001cd2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001cd2:	b480      	push	{r7}
 8001cd4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001cd6:	bf00      	nop
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cde:	4770      	bx	lr

08001ce0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ce4:	bf00      	nop
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cec:	4770      	bx	lr

08001cee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001cee:	b480      	push	{r7}
 8001cf0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001cf2:	bf00      	nop
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfa:	4770      	bx	lr

08001cfc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d00:	f000 fcd0 	bl	80026a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d04:	bf00      	nop
 8001d06:	bd80      	pop	{r7, pc}

08001d08 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001d0c:	4802      	ldr	r0, [pc, #8]	; (8001d18 <I2C1_EV_IRQHandler+0x10>)
 8001d0e:	f001 fe95 	bl	8003a3c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001d12:	bf00      	nop
 8001d14:	bd80      	pop	{r7, pc}
 8001d16:	bf00      	nop
 8001d18:	240002d0 	.word	0x240002d0

08001d1c <I2C3_EV_IRQHandler>:

/**
  * @brief This function handles I2C3 event interrupt.
  */
void I2C3_EV_IRQHandler(void)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_EV_IRQn 0 */

  /* USER CODE END I2C3_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c3);
 8001d20:	4802      	ldr	r0, [pc, #8]	; (8001d2c <I2C3_EV_IRQHandler+0x10>)
 8001d22:	f001 fe8b 	bl	8003a3c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C3_EV_IRQn 1 */

  /* USER CODE END I2C3_EV_IRQn 1 */
}
 8001d26:	bf00      	nop
 8001d28:	bd80      	pop	{r7, pc}
 8001d2a:	bf00      	nop
 8001d2c:	2400031c 	.word	0x2400031c

08001d30 <UART8_IRQHandler>:

/**
  * @brief This function handles UART8 global interrupt.
  */
void UART8_IRQHandler(void)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART8_IRQn 0 */

  /* USER CODE END UART8_IRQn 0 */
  HAL_UART_IRQHandler(&huart8);
 8001d34:	4802      	ldr	r0, [pc, #8]	; (8001d40 <UART8_IRQHandler+0x10>)
 8001d36:	f007 f955 	bl	8008fe4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART8_IRQn 1 */

  /* USER CODE END UART8_IRQn 1 */
}
 8001d3a:	bf00      	nop
 8001d3c:	bd80      	pop	{r7, pc}
 8001d3e:	bf00      	nop
 8001d40:	240003c0 	.word	0x240003c0

08001d44 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b086      	sub	sp, #24
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	60f8      	str	r0, [r7, #12]
 8001d4c:	60b9      	str	r1, [r7, #8]
 8001d4e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d50:	2300      	movs	r3, #0
 8001d52:	617b      	str	r3, [r7, #20]
 8001d54:	e00a      	b.n	8001d6c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001d56:	f3af 8000 	nop.w
 8001d5a:	4601      	mov	r1, r0
 8001d5c:	68bb      	ldr	r3, [r7, #8]
 8001d5e:	1c5a      	adds	r2, r3, #1
 8001d60:	60ba      	str	r2, [r7, #8]
 8001d62:	b2ca      	uxtb	r2, r1
 8001d64:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d66:	697b      	ldr	r3, [r7, #20]
 8001d68:	3301      	adds	r3, #1
 8001d6a:	617b      	str	r3, [r7, #20]
 8001d6c:	697a      	ldr	r2, [r7, #20]
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	429a      	cmp	r2, r3
 8001d72:	dbf0      	blt.n	8001d56 <_read+0x12>
	}

return len;
 8001d74:	687b      	ldr	r3, [r7, #4]
}
 8001d76:	4618      	mov	r0, r3
 8001d78:	3718      	adds	r7, #24
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}

08001d7e <_close>:
	}
	return len;
}

int _close(int file)
{
 8001d7e:	b480      	push	{r7}
 8001d80:	b083      	sub	sp, #12
 8001d82:	af00      	add	r7, sp, #0
 8001d84:	6078      	str	r0, [r7, #4]
	return -1;
 8001d86:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	370c      	adds	r7, #12
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d94:	4770      	bx	lr

08001d96 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001d96:	b480      	push	{r7}
 8001d98:	b083      	sub	sp, #12
 8001d9a:	af00      	add	r7, sp, #0
 8001d9c:	6078      	str	r0, [r7, #4]
 8001d9e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001da6:	605a      	str	r2, [r3, #4]
	return 0;
 8001da8:	2300      	movs	r3, #0
}
 8001daa:	4618      	mov	r0, r3
 8001dac:	370c      	adds	r7, #12
 8001dae:	46bd      	mov	sp, r7
 8001db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db4:	4770      	bx	lr

08001db6 <_isatty>:

int _isatty(int file)
{
 8001db6:	b480      	push	{r7}
 8001db8:	b083      	sub	sp, #12
 8001dba:	af00      	add	r7, sp, #0
 8001dbc:	6078      	str	r0, [r7, #4]
	return 1;
 8001dbe:	2301      	movs	r3, #1
}
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	370c      	adds	r7, #12
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dca:	4770      	bx	lr

08001dcc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	b085      	sub	sp, #20
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	60f8      	str	r0, [r7, #12]
 8001dd4:	60b9      	str	r1, [r7, #8]
 8001dd6:	607a      	str	r2, [r7, #4]
	return 0;
 8001dd8:	2300      	movs	r3, #0
}
 8001dda:	4618      	mov	r0, r3
 8001ddc:	3714      	adds	r7, #20
 8001dde:	46bd      	mov	sp, r7
 8001de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de4:	4770      	bx	lr
	...

08001de8 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b084      	sub	sp, #16
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001df0:	4b11      	ldr	r3, [pc, #68]	; (8001e38 <_sbrk+0x50>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d102      	bne.n	8001dfe <_sbrk+0x16>
		heap_end = &end;
 8001df8:	4b0f      	ldr	r3, [pc, #60]	; (8001e38 <_sbrk+0x50>)
 8001dfa:	4a10      	ldr	r2, [pc, #64]	; (8001e3c <_sbrk+0x54>)
 8001dfc:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001dfe:	4b0e      	ldr	r3, [pc, #56]	; (8001e38 <_sbrk+0x50>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001e04:	4b0c      	ldr	r3, [pc, #48]	; (8001e38 <_sbrk+0x50>)
 8001e06:	681a      	ldr	r2, [r3, #0]
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	4413      	add	r3, r2
 8001e0c:	466a      	mov	r2, sp
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d907      	bls.n	8001e22 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001e12:	f00b fd67 	bl	800d8e4 <__errno>
 8001e16:	4602      	mov	r2, r0
 8001e18:	230c      	movs	r3, #12
 8001e1a:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001e1c:	f04f 33ff 	mov.w	r3, #4294967295
 8001e20:	e006      	b.n	8001e30 <_sbrk+0x48>
	}

	heap_end += incr;
 8001e22:	4b05      	ldr	r3, [pc, #20]	; (8001e38 <_sbrk+0x50>)
 8001e24:	681a      	ldr	r2, [r3, #0]
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	4413      	add	r3, r2
 8001e2a:	4a03      	ldr	r2, [pc, #12]	; (8001e38 <_sbrk+0x50>)
 8001e2c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001e2e:	68fb      	ldr	r3, [r7, #12]
}
 8001e30:	4618      	mov	r0, r3
 8001e32:	3710      	adds	r7, #16
 8001e34:	46bd      	mov	sp, r7
 8001e36:	bd80      	pop	{r7, pc}
 8001e38:	24056a70 	.word	0x24056a70
 8001e3c:	24067208 	.word	0x24067208

08001e40 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001e40:	b480      	push	{r7}
 8001e42:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001e44:	4b29      	ldr	r3, [pc, #164]	; (8001eec <SystemInit+0xac>)
 8001e46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e4a:	4a28      	ldr	r2, [pc, #160]	; (8001eec <SystemInit+0xac>)
 8001e4c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001e50:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001e54:	4b26      	ldr	r3, [pc, #152]	; (8001ef0 <SystemInit+0xb0>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4a25      	ldr	r2, [pc, #148]	; (8001ef0 <SystemInit+0xb0>)
 8001e5a:	f043 0301 	orr.w	r3, r3, #1
 8001e5e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001e60:	4b23      	ldr	r3, [pc, #140]	; (8001ef0 <SystemInit+0xb0>)
 8001e62:	2200      	movs	r2, #0
 8001e64:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001e66:	4b22      	ldr	r3, [pc, #136]	; (8001ef0 <SystemInit+0xb0>)
 8001e68:	681a      	ldr	r2, [r3, #0]
 8001e6a:	4921      	ldr	r1, [pc, #132]	; (8001ef0 <SystemInit+0xb0>)
 8001e6c:	4b21      	ldr	r3, [pc, #132]	; (8001ef4 <SystemInit+0xb4>)
 8001e6e:	4013      	ands	r3, r2
 8001e70:	600b      	str	r3, [r1, #0]

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001e72:	4b1f      	ldr	r3, [pc, #124]	; (8001ef0 <SystemInit+0xb0>)
 8001e74:	2200      	movs	r2, #0
 8001e76:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001e78:	4b1d      	ldr	r3, [pc, #116]	; (8001ef0 <SystemInit+0xb0>)
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001e7e:	4b1c      	ldr	r3, [pc, #112]	; (8001ef0 <SystemInit+0xb0>)
 8001e80:	2200      	movs	r2, #0
 8001e82:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
 8001e84:	4b1a      	ldr	r3, [pc, #104]	; (8001ef0 <SystemInit+0xb0>)
 8001e86:	2200      	movs	r2, #0
 8001e88:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
 8001e8a:	4b19      	ldr	r3, [pc, #100]	; (8001ef0 <SystemInit+0xb0>)
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
 8001e90:	4b17      	ldr	r3, [pc, #92]	; (8001ef0 <SystemInit+0xb0>)
 8001e92:	2200      	movs	r2, #0
 8001e94:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001e96:	4b16      	ldr	r3, [pc, #88]	; (8001ef0 <SystemInit+0xb0>)
 8001e98:	2200      	movs	r2, #0
 8001e9a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
 8001e9c:	4b14      	ldr	r3, [pc, #80]	; (8001ef0 <SystemInit+0xb0>)
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001ea2:	4b13      	ldr	r3, [pc, #76]	; (8001ef0 <SystemInit+0xb0>)
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
 8001ea8:	4b11      	ldr	r3, [pc, #68]	; (8001ef0 <SystemInit+0xb0>)
 8001eaa:	2200      	movs	r2, #0
 8001eac:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001eae:	4b10      	ldr	r3, [pc, #64]	; (8001ef0 <SystemInit+0xb0>)
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001eb4:	4b0e      	ldr	r3, [pc, #56]	; (8001ef0 <SystemInit+0xb0>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4a0d      	ldr	r2, [pc, #52]	; (8001ef0 <SystemInit+0xb0>)
 8001eba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ebe:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001ec0:	4b0b      	ldr	r3, [pc, #44]	; (8001ef0 <SystemInit+0xb0>)
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	661a      	str	r2, [r3, #96]	; 0x60
  SCB->VTOR = FLASH_BANK2_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
#endif /* VECT_TAB_SRAM */

#else
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001ec6:	4b0c      	ldr	r3, [pc, #48]	; (8001ef8 <SystemInit+0xb8>)
 8001ec8:	681a      	ldr	r2, [r3, #0]
 8001eca:	4b0c      	ldr	r3, [pc, #48]	; (8001efc <SystemInit+0xbc>)
 8001ecc:	4013      	ands	r3, r2
 8001ece:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001ed2:	d202      	bcs.n	8001eda <SystemInit+0x9a>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001ed4:	4b0a      	ldr	r3, [pc, #40]	; (8001f00 <SystemInit+0xc0>)
 8001ed6:	2201      	movs	r2, #1
 8001ed8:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001eda:	4b04      	ldr	r3, [pc, #16]	; (8001eec <SystemInit+0xac>)
 8001edc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001ee0:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8001ee2:	bf00      	nop
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eea:	4770      	bx	lr
 8001eec:	e000ed00 	.word	0xe000ed00
 8001ef0:	58024400 	.word	0x58024400
 8001ef4:	eaf6ed7f 	.word	0xeaf6ed7f
 8001ef8:	5c001000 	.word	0x5c001000
 8001efc:	ffff0000 	.word	0xffff0000
 8001f00:	51008108 	.word	0x51008108

08001f04 <weight_avg>:
 *      Author: victo
 */

#include "tof_data_filtering.h"

float weight_avg(int data[], int size) {
 8001f04:	b4b0      	push	{r4, r5, r7}
 8001f06:	b08d      	sub	sp, #52	; 0x34
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
 8001f0c:	6039      	str	r1, [r7, #0]
 8001f0e:	466b      	mov	r3, sp
 8001f10:	461d      	mov	r5, r3
	// weights ratio:
	int ratio_denom = 3;
 8001f12:	2303      	movs	r3, #3
 8001f14:	617b      	str	r3, [r7, #20]
	// calculate weights vector:
	float weights[size];
 8001f16:	6838      	ldr	r0, [r7, #0]
 8001f18:	1e43      	subs	r3, r0, #1
 8001f1a:	613b      	str	r3, [r7, #16]
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	4619      	mov	r1, r3
 8001f20:	f04f 0200 	mov.w	r2, #0
 8001f24:	f04f 0300 	mov.w	r3, #0
 8001f28:	f04f 0400 	mov.w	r4, #0
 8001f2c:	0154      	lsls	r4, r2, #5
 8001f2e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001f32:	014b      	lsls	r3, r1, #5
 8001f34:	4603      	mov	r3, r0
 8001f36:	4619      	mov	r1, r3
 8001f38:	f04f 0200 	mov.w	r2, #0
 8001f3c:	f04f 0300 	mov.w	r3, #0
 8001f40:	f04f 0400 	mov.w	r4, #0
 8001f44:	0154      	lsls	r4, r2, #5
 8001f46:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001f4a:	014b      	lsls	r3, r1, #5
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	009b      	lsls	r3, r3, #2
 8001f50:	3303      	adds	r3, #3
 8001f52:	3307      	adds	r3, #7
 8001f54:	08db      	lsrs	r3, r3, #3
 8001f56:	00db      	lsls	r3, r3, #3
 8001f58:	ebad 0d03 	sub.w	sp, sp, r3
 8001f5c:	466b      	mov	r3, sp
 8001f5e:	3303      	adds	r3, #3
 8001f60:	089b      	lsrs	r3, r3, #2
 8001f62:	009b      	lsls	r3, r3, #2
 8001f64:	60fb      	str	r3, [r7, #12]
	// first weight:
	weights[0] = 1.0;
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001f6c:	601a      	str	r2, [r3, #0]
	// other weights:
	for(int i=1; i<size; i++) {
 8001f6e:	2301      	movs	r3, #1
 8001f70:	627b      	str	r3, [r7, #36]	; 0x24
 8001f72:	e025      	b.n	8001fc0 <weight_avg+0xbc>
		weights[i] = ((ratio_denom-1.0) * weights[i-1]) / ratio_denom;
 8001f74:	697b      	ldr	r3, [r7, #20]
 8001f76:	ee07 3a90 	vmov	s15, r3
 8001f7a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001f7e:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8001f82:	ee37 6b46 	vsub.f64	d6, d7, d6
 8001f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f88:	3b01      	subs	r3, #1
 8001f8a:	68fa      	ldr	r2, [r7, #12]
 8001f8c:	009b      	lsls	r3, r3, #2
 8001f8e:	4413      	add	r3, r2
 8001f90:	edd3 7a00 	vldr	s15, [r3]
 8001f94:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001f98:	ee26 5b07 	vmul.f64	d5, d6, d7
 8001f9c:	697b      	ldr	r3, [r7, #20]
 8001f9e:	ee07 3a90 	vmov	s15, r3
 8001fa2:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001fa6:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001faa:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001fae:	68fa      	ldr	r2, [r7, #12]
 8001fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fb2:	009b      	lsls	r3, r3, #2
 8001fb4:	4413      	add	r3, r2
 8001fb6:	edc3 7a00 	vstr	s15, [r3]
	for(int i=1; i<size; i++) {
 8001fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fbc:	3301      	adds	r3, #1
 8001fbe:	627b      	str	r3, [r7, #36]	; 0x24
 8001fc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	429a      	cmp	r2, r3
 8001fc6:	dbd5      	blt.n	8001f74 <weight_avg+0x70>
	}

	// calculate weighted average (disregarding out of range values:
	int sample_num = 0;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	62bb      	str	r3, [r7, #40]	; 0x28
	float total_val = 0;
 8001fcc:	f04f 0300 	mov.w	r3, #0
 8001fd0:	62fb      	str	r3, [r7, #44]	; 0x2c
	float total_weight = 0;
 8001fd2:	f04f 0300 	mov.w	r3, #0
 8001fd6:	623b      	str	r3, [r7, #32]
	for(int i=size-1; i>=0; i--) {
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	3b01      	subs	r3, #1
 8001fdc:	61fb      	str	r3, [r7, #28]
 8001fde:	e030      	b.n	8002042 <weight_avg+0x13e>
		// if distance is in range:
		if(data[i] <= MAX_DISTANCE) {
 8001fe0:	69fb      	ldr	r3, [r7, #28]
 8001fe2:	009b      	lsls	r3, r3, #2
 8001fe4:	687a      	ldr	r2, [r7, #4]
 8001fe6:	4413      	add	r3, r2
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001fee:	dc25      	bgt.n	800203c <weight_avg+0x138>
			total_val += weights[sample_num]*data[i];
 8001ff0:	68fa      	ldr	r2, [r7, #12]
 8001ff2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ff4:	009b      	lsls	r3, r3, #2
 8001ff6:	4413      	add	r3, r2
 8001ff8:	ed93 7a00 	vldr	s14, [r3]
 8001ffc:	69fb      	ldr	r3, [r7, #28]
 8001ffe:	009b      	lsls	r3, r3, #2
 8002000:	687a      	ldr	r2, [r7, #4]
 8002002:	4413      	add	r3, r2
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	ee07 3a90 	vmov	s15, r3
 800200a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800200e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002012:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8002016:	ee77 7a27 	vadd.f32	s15, s14, s15
 800201a:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
			total_weight += weights[sample_num];
 800201e:	68fa      	ldr	r2, [r7, #12]
 8002020:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002022:	009b      	lsls	r3, r3, #2
 8002024:	4413      	add	r3, r2
 8002026:	edd3 7a00 	vldr	s15, [r3]
 800202a:	ed97 7a08 	vldr	s14, [r7, #32]
 800202e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002032:	edc7 7a08 	vstr	s15, [r7, #32]
			sample_num++;
 8002036:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002038:	3301      	adds	r3, #1
 800203a:	62bb      	str	r3, [r7, #40]	; 0x28
	for(int i=size-1; i>=0; i--) {
 800203c:	69fb      	ldr	r3, [r7, #28]
 800203e:	3b01      	subs	r3, #1
 8002040:	61fb      	str	r3, [r7, #28]
 8002042:	69fb      	ldr	r3, [r7, #28]
 8002044:	2b00      	cmp	r3, #0
 8002046:	dacb      	bge.n	8001fe0 <weight_avg+0xdc>
		}
	}
	float avg = total_val / total_weight;
 8002048:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800204c:	ed97 7a08 	vldr	s14, [r7, #32]
 8002050:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002054:	edc7 7a06 	vstr	s15, [r7, #24]

	// if over half the values are out of range, mark average as out of range:
	if(size-sample_num > size/2) {
 8002058:	683a      	ldr	r2, [r7, #0]
 800205a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800205c:	1ad2      	subs	r2, r2, r3
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	2b00      	cmp	r3, #0
 8002062:	da00      	bge.n	8002066 <weight_avg+0x162>
 8002064:	3301      	adds	r3, #1
 8002066:	105b      	asrs	r3, r3, #1
 8002068:	429a      	cmp	r2, r3
 800206a:	dd01      	ble.n	8002070 <weight_avg+0x16c>
		avg = OUT_OF_RANGE;
 800206c:	4b05      	ldr	r3, [pc, #20]	; (8002084 <weight_avg+0x180>)
 800206e:	61bb      	str	r3, [r7, #24]
	}

	return avg;
 8002070:	69bb      	ldr	r3, [r7, #24]
 8002072:	46ad      	mov	sp, r5
 8002074:	ee07 3a90 	vmov	s15, r3
}
 8002078:	eeb0 0a67 	vmov.f32	s0, s15
 800207c:	3734      	adds	r7, #52	; 0x34
 800207e:	46bd      	mov	sp, r7
 8002080:	bcb0      	pop	{r4, r5, r7}
 8002082:	4770      	bx	lr
 8002084:	447a0000 	.word	0x447a0000

08002088 <calc_angle>:

float calc_angle(int sensor_num) {
 8002088:	b480      	push	{r7}
 800208a:	b085      	sub	sp, #20
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
	// center sensor number:
	int center = NUM_SENSORS/2 + NUM_SENSORS%2;
 8002090:	2304      	movs	r3, #4
 8002092:	60fb      	str	r3, [r7, #12]
	// angular heading of sensor sensor_num:
	float angle = ((sensor_num+1)-center) * ANGLE_SEP;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	1c5a      	adds	r2, r3, #1
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	1ad3      	subs	r3, r2, r3
 800209c:	ee07 3a90 	vmov	s15, r3
 80020a0:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80020a4:	eeb2 6b0e 	vmov.f64	d6, #46	; 0x41700000  15.0
 80020a8:	ee27 7b06 	vmul.f64	d7, d7, d6
 80020ac:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80020b0:	edc7 7a02 	vstr	s15, [r7, #8]

	return angle;
 80020b4:	68bb      	ldr	r3, [r7, #8]
 80020b6:	ee07 3a90 	vmov	s15, r3
}
 80020ba:	eeb0 0a67 	vmov.f32	s0, s15
 80020be:	3714      	adds	r7, #20
 80020c0:	46bd      	mov	sp, r7
 80020c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c6:	4770      	bx	lr

080020c8 <process_ToF>:

void process_ToF(obj_t* object_list, uint8_t * object_num, int data[][NUM_SAMPLES]) {
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b090      	sub	sp, #64	; 0x40
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	60f8      	str	r0, [r7, #12]
 80020d0:	60b9      	str	r1, [r7, #8]
 80020d2:	607a      	str	r2, [r7, #4]

	// compute weighted averages (over samples) for all sensors:
	float avg_distance[NUM_SENSORS];
	for(int i=0; i<NUM_SENSORS; i++) {
 80020d4:	2300      	movs	r3, #0
 80020d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80020d8:	e018      	b.n	800210c <process_ToF+0x44>
		avg_distance[i] = weight_avg(data[i], NUM_SAMPLES);
 80020da:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80020dc:	4613      	mov	r3, r2
 80020de:	009b      	lsls	r3, r3, #2
 80020e0:	4413      	add	r3, r2
 80020e2:	009b      	lsls	r3, r3, #2
 80020e4:	461a      	mov	r2, r3
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	4413      	add	r3, r2
 80020ea:	2105      	movs	r1, #5
 80020ec:	4618      	mov	r0, r3
 80020ee:	f7ff ff09 	bl	8001f04 <weight_avg>
 80020f2:	eef0 7a40 	vmov.f32	s15, s0
 80020f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80020f8:	009b      	lsls	r3, r3, #2
 80020fa:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80020fe:	4413      	add	r3, r2
 8002100:	3b30      	subs	r3, #48	; 0x30
 8002102:	edc3 7a00 	vstr	s15, [r3]
	for(int i=0; i<NUM_SENSORS; i++) {
 8002106:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002108:	3301      	adds	r3, #1
 800210a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800210c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800210e:	2b06      	cmp	r3, #6
 8002110:	dde3      	ble.n	80020da <process_ToF+0x12>
	}

	// determine number of objects and their distance/angles:
	bool object_found = false;
 8002112:	2300      	movs	r3, #0
 8002114:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	int object_count = 0;
 8002118:	2300      	movs	r3, #0
 800211a:	637b      	str	r3, [r7, #52]	; 0x34

	// for first NUM_SENSORS-1 sensors:
	for(int i=0; i<=NUM_SENSORS-2; i++) {
 800211c:	2300      	movs	r3, #0
 800211e:	633b      	str	r3, [r7, #48]	; 0x30
 8002120:	e0bf      	b.n	80022a2 <process_ToF+0x1da>
		// if searching for new object:
		if(object_found==false) {
 8002122:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8002126:	f083 0301 	eor.w	r3, r3, #1
 800212a:	b2db      	uxtb	r3, r3
 800212c:	2b00      	cmp	r3, #0
 800212e:	d058      	beq.n	80021e2 <process_ToF+0x11a>
			// if new object is detected:
			if(avg_distance[i] <= MAX_DISTANCE) {
 8002130:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002132:	009b      	lsls	r3, r3, #2
 8002134:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8002138:	4413      	add	r3, r2
 800213a:	3b30      	subs	r3, #48	; 0x30
 800213c:	edd3 7a00 	vldr	s15, [r3]
 8002140:	ed9f 7ab2 	vldr	s14, [pc, #712]	; 800240c <process_ToF+0x344>
 8002144:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002148:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800214c:	f200 80a6 	bhi.w	800229c <process_ToF+0x1d4>
				// note that object has been detected:
				object_found = true;
 8002150:	2301      	movs	r3, #1
 8002152:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
				// record left edge distance and sensor number:
				object_list[object_count].rng1 = ((uint8_t) avg_distance[i])*255/1000;
 8002156:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002158:	009b      	lsls	r3, r3, #2
 800215a:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800215e:	4413      	add	r3, r2
 8002160:	3b30      	subs	r3, #48	; 0x30
 8002162:	edd3 7a00 	vldr	s15, [r3]
 8002166:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800216a:	edc7 7a00 	vstr	s15, [r7]
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	b2db      	uxtb	r3, r3
 8002172:	461a      	mov	r2, r3
 8002174:	4613      	mov	r3, r2
 8002176:	021b      	lsls	r3, r3, #8
 8002178:	1a9b      	subs	r3, r3, r2
 800217a:	4aa1      	ldr	r2, [pc, #644]	; (8002400 <process_ToF+0x338>)
 800217c:	fb82 1203 	smull	r1, r2, r2, r3
 8002180:	1192      	asrs	r2, r2, #6
 8002182:	17db      	asrs	r3, r3, #31
 8002184:	1ad1      	subs	r1, r2, r3
 8002186:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002188:	4613      	mov	r3, r2
 800218a:	005b      	lsls	r3, r3, #1
 800218c:	4413      	add	r3, r2
 800218e:	005b      	lsls	r3, r3, #1
 8002190:	461a      	mov	r2, r3
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	4413      	add	r3, r2
 8002196:	b2ca      	uxtb	r2, r1
 8002198:	709a      	strb	r2, [r3, #2]
				object_list[object_count].hdng1 = ((uint8_t) (calc_angle(i) + 45))*255/100;
 800219a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800219c:	f7ff ff74 	bl	8002088 <calc_angle>
 80021a0:	eeb0 7a40 	vmov.f32	s14, s0
 80021a4:	eddf 7a97 	vldr	s15, [pc, #604]	; 8002404 <process_ToF+0x33c>
 80021a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80021b0:	edc7 7a00 	vstr	s15, [r7]
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	b2db      	uxtb	r3, r3
 80021b8:	461a      	mov	r2, r3
 80021ba:	4613      	mov	r3, r2
 80021bc:	021b      	lsls	r3, r3, #8
 80021be:	1a9b      	subs	r3, r3, r2
 80021c0:	4a91      	ldr	r2, [pc, #580]	; (8002408 <process_ToF+0x340>)
 80021c2:	fb82 1203 	smull	r1, r2, r2, r3
 80021c6:	1152      	asrs	r2, r2, #5
 80021c8:	17db      	asrs	r3, r3, #31
 80021ca:	1ad1      	subs	r1, r2, r3
 80021cc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80021ce:	4613      	mov	r3, r2
 80021d0:	005b      	lsls	r3, r3, #1
 80021d2:	4413      	add	r3, r2
 80021d4:	005b      	lsls	r3, r3, #1
 80021d6:	461a      	mov	r2, r3
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	4413      	add	r3, r2
 80021dc:	b2ca      	uxtb	r2, r1
 80021de:	701a      	strb	r2, [r3, #0]
 80021e0:	e05c      	b.n	800229c <process_ToF+0x1d4>
			}
		}
		// if searching for right edge ("end") of current object:
		else {
			// if right edge of object is detected:
			if(avg_distance[i] > MAX_DISTANCE) {
 80021e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021e4:	009b      	lsls	r3, r3, #2
 80021e6:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80021ea:	4413      	add	r3, r2
 80021ec:	3b30      	subs	r3, #48	; 0x30
 80021ee:	edd3 7a00 	vldr	s15, [r3]
 80021f2:	ed9f 7a86 	vldr	s14, [pc, #536]	; 800240c <process_ToF+0x344>
 80021f6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80021fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021fe:	dd4d      	ble.n	800229c <process_ToF+0x1d4>
				// note that search is done with current object:
				object_found = false;
 8002200:	2300      	movs	r3, #0
 8002202:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
				// record right edge distance and sensor number:
				object_list[object_count].rng2 = ((uint8_t) avg_distance[i-1])*255/1000;
 8002206:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002208:	3b01      	subs	r3, #1
 800220a:	009b      	lsls	r3, r3, #2
 800220c:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8002210:	4413      	add	r3, r2
 8002212:	3b30      	subs	r3, #48	; 0x30
 8002214:	edd3 7a00 	vldr	s15, [r3]
 8002218:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800221c:	edc7 7a00 	vstr	s15, [r7]
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	b2db      	uxtb	r3, r3
 8002224:	461a      	mov	r2, r3
 8002226:	4613      	mov	r3, r2
 8002228:	021b      	lsls	r3, r3, #8
 800222a:	1a9b      	subs	r3, r3, r2
 800222c:	4a74      	ldr	r2, [pc, #464]	; (8002400 <process_ToF+0x338>)
 800222e:	fb82 1203 	smull	r1, r2, r2, r3
 8002232:	1192      	asrs	r2, r2, #6
 8002234:	17db      	asrs	r3, r3, #31
 8002236:	1ad1      	subs	r1, r2, r3
 8002238:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800223a:	4613      	mov	r3, r2
 800223c:	005b      	lsls	r3, r3, #1
 800223e:	4413      	add	r3, r2
 8002240:	005b      	lsls	r3, r3, #1
 8002242:	461a      	mov	r2, r3
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	4413      	add	r3, r2
 8002248:	b2ca      	uxtb	r2, r1
 800224a:	70da      	strb	r2, [r3, #3]
				object_list[object_count].hdng2 = ((uint8_t) (calc_angle(i-1) + 45))*255/100;
 800224c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800224e:	3b01      	subs	r3, #1
 8002250:	4618      	mov	r0, r3
 8002252:	f7ff ff19 	bl	8002088 <calc_angle>
 8002256:	eeb0 7a40 	vmov.f32	s14, s0
 800225a:	eddf 7a6a 	vldr	s15, [pc, #424]	; 8002404 <process_ToF+0x33c>
 800225e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002262:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002266:	edc7 7a00 	vstr	s15, [r7]
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	b2db      	uxtb	r3, r3
 800226e:	461a      	mov	r2, r3
 8002270:	4613      	mov	r3, r2
 8002272:	021b      	lsls	r3, r3, #8
 8002274:	1a9b      	subs	r3, r3, r2
 8002276:	4a64      	ldr	r2, [pc, #400]	; (8002408 <process_ToF+0x340>)
 8002278:	fb82 1203 	smull	r1, r2, r2, r3
 800227c:	1152      	asrs	r2, r2, #5
 800227e:	17db      	asrs	r3, r3, #31
 8002280:	1ad1      	subs	r1, r2, r3
 8002282:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002284:	4613      	mov	r3, r2
 8002286:	005b      	lsls	r3, r3, #1
 8002288:	4413      	add	r3, r2
 800228a:	005b      	lsls	r3, r3, #1
 800228c:	461a      	mov	r2, r3
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	4413      	add	r3, r2
 8002292:	b2ca      	uxtb	r2, r1
 8002294:	705a      	strb	r2, [r3, #1]
				// increment number of objects:
				object_count++;
 8002296:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002298:	3301      	adds	r3, #1
 800229a:	637b      	str	r3, [r7, #52]	; 0x34
	for(int i=0; i<=NUM_SENSORS-2; i++) {
 800229c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800229e:	3301      	adds	r3, #1
 80022a0:	633b      	str	r3, [r7, #48]	; 0x30
 80022a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022a4:	2b05      	cmp	r3, #5
 80022a6:	f77f af3c 	ble.w	8002122 <process_ToF+0x5a>
	}


	// handle last sensor (NUM_SENSORS-1):
	// last sensor index:
	int i = NUM_SENSORS-1;
 80022aa:	2306      	movs	r3, #6
 80022ac:	62fb      	str	r3, [r7, #44]	; 0x2c
	// if searching for new object:
	if(object_found==false) {
 80022ae:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80022b2:	f083 0301 	eor.w	r3, r3, #1
 80022b6:	b2db      	uxtb	r3, r3
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	f000 80a9 	beq.w	8002410 <process_ToF+0x348>
		// if new object is detected:
		if(avg_distance[i] <= MAX_DISTANCE) {
 80022be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022c0:	009b      	lsls	r3, r3, #2
 80022c2:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80022c6:	4413      	add	r3, r2
 80022c8:	3b30      	subs	r3, #48	; 0x30
 80022ca:	edd3 7a00 	vldr	s15, [r3]
 80022ce:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 800240c <process_ToF+0x344>
 80022d2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80022d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022da:	f200 813c 	bhi.w	8002556 <process_ToF+0x48e>
			// note that object has been detected:
			object_found = true;
 80022de:	2301      	movs	r3, #1
 80022e0:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
			// record left and right edge distances:
			object_list[object_count].rng1 = ((uint8_t) avg_distance[i])*255/1000;
 80022e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022e6:	009b      	lsls	r3, r3, #2
 80022e8:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80022ec:	4413      	add	r3, r2
 80022ee:	3b30      	subs	r3, #48	; 0x30
 80022f0:	edd3 7a00 	vldr	s15, [r3]
 80022f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80022f8:	edc7 7a00 	vstr	s15, [r7]
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	b2db      	uxtb	r3, r3
 8002300:	461a      	mov	r2, r3
 8002302:	4613      	mov	r3, r2
 8002304:	021b      	lsls	r3, r3, #8
 8002306:	1a9b      	subs	r3, r3, r2
 8002308:	4a3d      	ldr	r2, [pc, #244]	; (8002400 <process_ToF+0x338>)
 800230a:	fb82 1203 	smull	r1, r2, r2, r3
 800230e:	1192      	asrs	r2, r2, #6
 8002310:	17db      	asrs	r3, r3, #31
 8002312:	1ad1      	subs	r1, r2, r3
 8002314:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002316:	4613      	mov	r3, r2
 8002318:	005b      	lsls	r3, r3, #1
 800231a:	4413      	add	r3, r2
 800231c:	005b      	lsls	r3, r3, #1
 800231e:	461a      	mov	r2, r3
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	4413      	add	r3, r2
 8002324:	b2ca      	uxtb	r2, r1
 8002326:	709a      	strb	r2, [r3, #2]
			object_list[object_count].rng2 = ((uint8_t) avg_distance[i])*255/1000;
 8002328:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800232a:	009b      	lsls	r3, r3, #2
 800232c:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8002330:	4413      	add	r3, r2
 8002332:	3b30      	subs	r3, #48	; 0x30
 8002334:	edd3 7a00 	vldr	s15, [r3]
 8002338:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800233c:	edc7 7a00 	vstr	s15, [r7]
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	b2db      	uxtb	r3, r3
 8002344:	461a      	mov	r2, r3
 8002346:	4613      	mov	r3, r2
 8002348:	021b      	lsls	r3, r3, #8
 800234a:	1a9b      	subs	r3, r3, r2
 800234c:	4a2c      	ldr	r2, [pc, #176]	; (8002400 <process_ToF+0x338>)
 800234e:	fb82 1203 	smull	r1, r2, r2, r3
 8002352:	1192      	asrs	r2, r2, #6
 8002354:	17db      	asrs	r3, r3, #31
 8002356:	1ad1      	subs	r1, r2, r3
 8002358:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800235a:	4613      	mov	r3, r2
 800235c:	005b      	lsls	r3, r3, #1
 800235e:	4413      	add	r3, r2
 8002360:	005b      	lsls	r3, r3, #1
 8002362:	461a      	mov	r2, r3
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	4413      	add	r3, r2
 8002368:	b2ca      	uxtb	r2, r1
 800236a:	70da      	strb	r2, [r3, #3]
			// record left and right edge sensor numbers:
			object_list[object_count].hdng1 = ((uint8_t) (calc_angle(i) + 45))*255/100;
 800236c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800236e:	f7ff fe8b 	bl	8002088 <calc_angle>
 8002372:	eeb0 7a40 	vmov.f32	s14, s0
 8002376:	eddf 7a23 	vldr	s15, [pc, #140]	; 8002404 <process_ToF+0x33c>
 800237a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800237e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002382:	edc7 7a00 	vstr	s15, [r7]
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	b2db      	uxtb	r3, r3
 800238a:	461a      	mov	r2, r3
 800238c:	4613      	mov	r3, r2
 800238e:	021b      	lsls	r3, r3, #8
 8002390:	1a9b      	subs	r3, r3, r2
 8002392:	4a1d      	ldr	r2, [pc, #116]	; (8002408 <process_ToF+0x340>)
 8002394:	fb82 1203 	smull	r1, r2, r2, r3
 8002398:	1152      	asrs	r2, r2, #5
 800239a:	17db      	asrs	r3, r3, #31
 800239c:	1ad1      	subs	r1, r2, r3
 800239e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80023a0:	4613      	mov	r3, r2
 80023a2:	005b      	lsls	r3, r3, #1
 80023a4:	4413      	add	r3, r2
 80023a6:	005b      	lsls	r3, r3, #1
 80023a8:	461a      	mov	r2, r3
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	4413      	add	r3, r2
 80023ae:	b2ca      	uxtb	r2, r1
 80023b0:	701a      	strb	r2, [r3, #0]
			object_list[object_count].hdng2 = ((uint8_t) (calc_angle(i) + 45))*255/100;
 80023b2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80023b4:	f7ff fe68 	bl	8002088 <calc_angle>
 80023b8:	eeb0 7a40 	vmov.f32	s14, s0
 80023bc:	eddf 7a11 	vldr	s15, [pc, #68]	; 8002404 <process_ToF+0x33c>
 80023c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80023c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80023c8:	edc7 7a00 	vstr	s15, [r7]
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	b2db      	uxtb	r3, r3
 80023d0:	461a      	mov	r2, r3
 80023d2:	4613      	mov	r3, r2
 80023d4:	021b      	lsls	r3, r3, #8
 80023d6:	1a9b      	subs	r3, r3, r2
 80023d8:	4a0b      	ldr	r2, [pc, #44]	; (8002408 <process_ToF+0x340>)
 80023da:	fb82 1203 	smull	r1, r2, r2, r3
 80023de:	1152      	asrs	r2, r2, #5
 80023e0:	17db      	asrs	r3, r3, #31
 80023e2:	1ad1      	subs	r1, r2, r3
 80023e4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80023e6:	4613      	mov	r3, r2
 80023e8:	005b      	lsls	r3, r3, #1
 80023ea:	4413      	add	r3, r2
 80023ec:	005b      	lsls	r3, r3, #1
 80023ee:	461a      	mov	r2, r3
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	4413      	add	r3, r2
 80023f4:	b2ca      	uxtb	r2, r1
 80023f6:	705a      	strb	r2, [r3, #1]
			// increment number of objects:
			object_count++;
 80023f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023fa:	3301      	adds	r3, #1
 80023fc:	637b      	str	r3, [r7, #52]	; 0x34
 80023fe:	e0aa      	b.n	8002556 <process_ToF+0x48e>
 8002400:	10624dd3 	.word	0x10624dd3
 8002404:	42340000 	.word	0x42340000
 8002408:	51eb851f 	.word	0x51eb851f
 800240c:	43fa0000 	.word	0x43fa0000
		}
	}
	// if searching for right edge ("end") of current object:
	else {
		// if right edge of object is detected:
		if(avg_distance[i] > MAX_DISTANCE) {
 8002410:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002412:	009b      	lsls	r3, r3, #2
 8002414:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8002418:	4413      	add	r3, r2
 800241a:	3b30      	subs	r3, #48	; 0x30
 800241c:	edd3 7a00 	vldr	s15, [r3]
 8002420:	ed1f 7a06 	vldr	s14, [pc, #-24]	; 800240c <process_ToF+0x344>
 8002424:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002428:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800242c:	dd4b      	ble.n	80024c6 <process_ToF+0x3fe>
			// record right edge distance and sensor number:
			object_list[object_count].rng2 = ((uint8_t) avg_distance[i-1])*255/1000;
 800242e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002430:	3b01      	subs	r3, #1
 8002432:	009b      	lsls	r3, r3, #2
 8002434:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8002438:	4413      	add	r3, r2
 800243a:	3b30      	subs	r3, #48	; 0x30
 800243c:	edd3 7a00 	vldr	s15, [r3]
 8002440:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002444:	edc7 7a00 	vstr	s15, [r7]
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	b2db      	uxtb	r3, r3
 800244c:	461a      	mov	r2, r3
 800244e:	4613      	mov	r3, r2
 8002450:	021b      	lsls	r3, r3, #8
 8002452:	1a9b      	subs	r3, r3, r2
 8002454:	4a44      	ldr	r2, [pc, #272]	; (8002568 <process_ToF+0x4a0>)
 8002456:	fb82 1203 	smull	r1, r2, r2, r3
 800245a:	1192      	asrs	r2, r2, #6
 800245c:	17db      	asrs	r3, r3, #31
 800245e:	1ad1      	subs	r1, r2, r3
 8002460:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002462:	4613      	mov	r3, r2
 8002464:	005b      	lsls	r3, r3, #1
 8002466:	4413      	add	r3, r2
 8002468:	005b      	lsls	r3, r3, #1
 800246a:	461a      	mov	r2, r3
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	4413      	add	r3, r2
 8002470:	b2ca      	uxtb	r2, r1
 8002472:	70da      	strb	r2, [r3, #3]
			object_list[object_count].hdng2 = ((uint8_t) (calc_angle(i-1) + 45))*255/100;
 8002474:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002476:	3b01      	subs	r3, #1
 8002478:	4618      	mov	r0, r3
 800247a:	f7ff fe05 	bl	8002088 <calc_angle>
 800247e:	eeb0 7a40 	vmov.f32	s14, s0
 8002482:	eddf 7a3a 	vldr	s15, [pc, #232]	; 800256c <process_ToF+0x4a4>
 8002486:	ee77 7a27 	vadd.f32	s15, s14, s15
 800248a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800248e:	edc7 7a00 	vstr	s15, [r7]
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	b2db      	uxtb	r3, r3
 8002496:	461a      	mov	r2, r3
 8002498:	4613      	mov	r3, r2
 800249a:	021b      	lsls	r3, r3, #8
 800249c:	1a9b      	subs	r3, r3, r2
 800249e:	4a34      	ldr	r2, [pc, #208]	; (8002570 <process_ToF+0x4a8>)
 80024a0:	fb82 1203 	smull	r1, r2, r2, r3
 80024a4:	1152      	asrs	r2, r2, #5
 80024a6:	17db      	asrs	r3, r3, #31
 80024a8:	1ad1      	subs	r1, r2, r3
 80024aa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80024ac:	4613      	mov	r3, r2
 80024ae:	005b      	lsls	r3, r3, #1
 80024b0:	4413      	add	r3, r2
 80024b2:	005b      	lsls	r3, r3, #1
 80024b4:	461a      	mov	r2, r3
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	4413      	add	r3, r2
 80024ba:	b2ca      	uxtb	r2, r1
 80024bc:	705a      	strb	r2, [r3, #1]
			// increment number of objects:
			object_count++;
 80024be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024c0:	3301      	adds	r3, #1
 80024c2:	637b      	str	r3, [r7, #52]	; 0x34
 80024c4:	e047      	b.n	8002556 <process_ToF+0x48e>
		}
		// if object extends past FOV:
		else {
			// record right edge distance and sensor number (even though object may extend past FOV):
			object_list[object_count].rng1 = ((uint8_t) avg_distance[i])*255/1000;
 80024c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024c8:	009b      	lsls	r3, r3, #2
 80024ca:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80024ce:	4413      	add	r3, r2
 80024d0:	3b30      	subs	r3, #48	; 0x30
 80024d2:	edd3 7a00 	vldr	s15, [r3]
 80024d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80024da:	edc7 7a00 	vstr	s15, [r7]
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	b2db      	uxtb	r3, r3
 80024e2:	461a      	mov	r2, r3
 80024e4:	4613      	mov	r3, r2
 80024e6:	021b      	lsls	r3, r3, #8
 80024e8:	1a9b      	subs	r3, r3, r2
 80024ea:	4a1f      	ldr	r2, [pc, #124]	; (8002568 <process_ToF+0x4a0>)
 80024ec:	fb82 1203 	smull	r1, r2, r2, r3
 80024f0:	1192      	asrs	r2, r2, #6
 80024f2:	17db      	asrs	r3, r3, #31
 80024f4:	1ad1      	subs	r1, r2, r3
 80024f6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80024f8:	4613      	mov	r3, r2
 80024fa:	005b      	lsls	r3, r3, #1
 80024fc:	4413      	add	r3, r2
 80024fe:	005b      	lsls	r3, r3, #1
 8002500:	461a      	mov	r2, r3
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	4413      	add	r3, r2
 8002506:	b2ca      	uxtb	r2, r1
 8002508:	709a      	strb	r2, [r3, #2]
			object_list[object_count].hdng1 = ((uint8_t) (calc_angle(i) + 45))*255/100;
 800250a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800250c:	f7ff fdbc 	bl	8002088 <calc_angle>
 8002510:	eeb0 7a40 	vmov.f32	s14, s0
 8002514:	eddf 7a15 	vldr	s15, [pc, #84]	; 800256c <process_ToF+0x4a4>
 8002518:	ee77 7a27 	vadd.f32	s15, s14, s15
 800251c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002520:	edc7 7a00 	vstr	s15, [r7]
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	b2db      	uxtb	r3, r3
 8002528:	461a      	mov	r2, r3
 800252a:	4613      	mov	r3, r2
 800252c:	021b      	lsls	r3, r3, #8
 800252e:	1a9b      	subs	r3, r3, r2
 8002530:	4a0f      	ldr	r2, [pc, #60]	; (8002570 <process_ToF+0x4a8>)
 8002532:	fb82 1203 	smull	r1, r2, r2, r3
 8002536:	1152      	asrs	r2, r2, #5
 8002538:	17db      	asrs	r3, r3, #31
 800253a:	1ad1      	subs	r1, r2, r3
 800253c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800253e:	4613      	mov	r3, r2
 8002540:	005b      	lsls	r3, r3, #1
 8002542:	4413      	add	r3, r2
 8002544:	005b      	lsls	r3, r3, #1
 8002546:	461a      	mov	r2, r3
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	4413      	add	r3, r2
 800254c:	b2ca      	uxtb	r2, r1
 800254e:	701a      	strb	r2, [r3, #0]
			// increment number of objects:
			object_count++;
 8002550:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002552:	3301      	adds	r3, #1
 8002554:	637b      	str	r3, [r7, #52]	; 0x34
		}
	}

	// record number of objects in struct:
	(*object_num) = object_count;
 8002556:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002558:	b2da      	uxtb	r2, r3
 800255a:	68bb      	ldr	r3, [r7, #8]
 800255c:	701a      	strb	r2, [r3, #0]
}
 800255e:	bf00      	nop
 8002560:	3740      	adds	r7, #64	; 0x40
 8002562:	46bd      	mov	sp, r7
 8002564:	bd80      	pop	{r7, pc}
 8002566:	bf00      	nop
 8002568:	10624dd3 	.word	0x10624dd3
 800256c:	42340000 	.word	0x42340000
 8002570:	51eb851f 	.word	0x51eb851f

08002574 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002574:	f8df d034 	ldr.w	sp, [pc, #52]	; 80025ac <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002578:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800257a:	e003      	b.n	8002584 <LoopCopyDataInit>

0800257c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800257c:	4b0c      	ldr	r3, [pc, #48]	; (80025b0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800257e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002580:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002582:	3104      	adds	r1, #4

08002584 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002584:	480b      	ldr	r0, [pc, #44]	; (80025b4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002586:	4b0c      	ldr	r3, [pc, #48]	; (80025b8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002588:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800258a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800258c:	d3f6      	bcc.n	800257c <CopyDataInit>
  ldr  r2, =_sbss
 800258e:	4a0b      	ldr	r2, [pc, #44]	; (80025bc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002590:	e002      	b.n	8002598 <LoopFillZerobss>

08002592 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002592:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002594:	f842 3b04 	str.w	r3, [r2], #4

08002598 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002598:	4b09      	ldr	r3, [pc, #36]	; (80025c0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800259a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800259c:	d3f9      	bcc.n	8002592 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800259e:	f7ff fc4f 	bl	8001e40 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80025a2:	f00b f9a5 	bl	800d8f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80025a6:	f7fe fca1 	bl	8000eec <main>
  bx  lr    
 80025aa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80025ac:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 80025b0:	0800f3cc 	.word	0x0800f3cc
  ldr  r0, =_sdata
 80025b4:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 80025b8:	240002b4 	.word	0x240002b4
  ldr  r2, =_sbss
 80025bc:	240002b4 	.word	0x240002b4
  ldr  r3, = _ebss
 80025c0:	24067204 	.word	0x24067204

080025c4 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80025c4:	e7fe      	b.n	80025c4 <ADC3_IRQHandler>
	...

080025c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80025cc:	2003      	movs	r0, #3
 80025ce:	f000 f9a9 	bl	8002924 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80025d2:	f004 fed5 	bl	8007380 <HAL_RCC_GetSysClockFreq>
 80025d6:	4601      	mov	r1, r0
 80025d8:	4b13      	ldr	r3, [pc, #76]	; (8002628 <HAL_Init+0x60>)
 80025da:	699b      	ldr	r3, [r3, #24]
 80025dc:	0a1b      	lsrs	r3, r3, #8
 80025de:	f003 030f 	and.w	r3, r3, #15
 80025e2:	4a12      	ldr	r2, [pc, #72]	; (800262c <HAL_Init+0x64>)
 80025e4:	5cd3      	ldrb	r3, [r2, r3]
 80025e6:	f003 031f 	and.w	r3, r3, #31
 80025ea:	fa21 f303 	lsr.w	r3, r1, r3
 80025ee:	4a10      	ldr	r2, [pc, #64]	; (8002630 <HAL_Init+0x68>)
 80025f0:	6013      	str	r3, [r2, #0]

  /* Update the SystemD2Clock global variable */
  SystemD2Clock = (SystemCoreClock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80025f2:	4b0f      	ldr	r3, [pc, #60]	; (8002630 <HAL_Init+0x68>)
 80025f4:	681a      	ldr	r2, [r3, #0]
 80025f6:	4b0c      	ldr	r3, [pc, #48]	; (8002628 <HAL_Init+0x60>)
 80025f8:	699b      	ldr	r3, [r3, #24]
 80025fa:	f003 030f 	and.w	r3, r3, #15
 80025fe:	490b      	ldr	r1, [pc, #44]	; (800262c <HAL_Init+0x64>)
 8002600:	5ccb      	ldrb	r3, [r1, r3]
 8002602:	f003 031f 	and.w	r3, r3, #31
 8002606:	fa22 f303 	lsr.w	r3, r2, r3
 800260a:	4a0a      	ldr	r2, [pc, #40]	; (8002634 <HAL_Init+0x6c>)
 800260c:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800260e:	2000      	movs	r0, #0
 8002610:	f000 f812 	bl	8002638 <HAL_InitTick>
 8002614:	4603      	mov	r3, r0
 8002616:	2b00      	cmp	r3, #0
 8002618:	d001      	beq.n	800261e <HAL_Init+0x56>
  {
    return HAL_ERROR;
 800261a:	2301      	movs	r3, #1
 800261c:	e002      	b.n	8002624 <HAL_Init+0x5c>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800261e:	f7ff f9e1 	bl	80019e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002622:	2300      	movs	r3, #0
}
 8002624:	4618      	mov	r0, r3
 8002626:	bd80      	pop	{r7, pc}
 8002628:	58024400 	.word	0x58024400
 800262c:	0800f0b0 	.word	0x0800f0b0
 8002630:	24000088 	.word	0x24000088
 8002634:	2400008c 	.word	0x2400008c

08002638 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b082      	sub	sp, #8
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002640:	4b15      	ldr	r3, [pc, #84]	; (8002698 <HAL_InitTick+0x60>)
 8002642:	781b      	ldrb	r3, [r3, #0]
 8002644:	2b00      	cmp	r3, #0
 8002646:	d101      	bne.n	800264c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002648:	2301      	movs	r3, #1
 800264a:	e021      	b.n	8002690 <HAL_InitTick+0x58>
      return HAL_ERROR;
    }
  }
#else
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800264c:	4b13      	ldr	r3, [pc, #76]	; (800269c <HAL_InitTick+0x64>)
 800264e:	681a      	ldr	r2, [r3, #0]
 8002650:	4b11      	ldr	r3, [pc, #68]	; (8002698 <HAL_InitTick+0x60>)
 8002652:	781b      	ldrb	r3, [r3, #0]
 8002654:	4619      	mov	r1, r3
 8002656:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800265a:	fbb3 f3f1 	udiv	r3, r3, r1
 800265e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002662:	4618      	mov	r0, r3
 8002664:	f000 f99f 	bl	80029a6 <HAL_SYSTICK_Config>
 8002668:	4603      	mov	r3, r0
 800266a:	2b00      	cmp	r3, #0
 800266c:	d001      	beq.n	8002672 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
 800266e:	2301      	movs	r3, #1
 8002670:	e00e      	b.n	8002690 <HAL_InitTick+0x58>
  }
#endif

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	2b0f      	cmp	r3, #15
 8002676:	d80a      	bhi.n	800268e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002678:	2200      	movs	r2, #0
 800267a:	6879      	ldr	r1, [r7, #4]
 800267c:	f04f 30ff 	mov.w	r0, #4294967295
 8002680:	f000 f95b 	bl	800293a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002684:	4a06      	ldr	r2, [pc, #24]	; (80026a0 <HAL_InitTick+0x68>)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800268a:	2300      	movs	r3, #0
 800268c:	e000      	b.n	8002690 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800268e:	2301      	movs	r3, #1
}
 8002690:	4618      	mov	r0, r3
 8002692:	3708      	adds	r7, #8
 8002694:	46bd      	mov	sp, r7
 8002696:	bd80      	pop	{r7, pc}
 8002698:	24000094 	.word	0x24000094
 800269c:	24000088 	.word	0x24000088
 80026a0:	24000090 	.word	0x24000090

080026a4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80026a4:	b480      	push	{r7}
 80026a6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80026a8:	4b06      	ldr	r3, [pc, #24]	; (80026c4 <HAL_IncTick+0x20>)
 80026aa:	781b      	ldrb	r3, [r3, #0]
 80026ac:	461a      	mov	r2, r3
 80026ae:	4b06      	ldr	r3, [pc, #24]	; (80026c8 <HAL_IncTick+0x24>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	4413      	add	r3, r2
 80026b4:	4a04      	ldr	r2, [pc, #16]	; (80026c8 <HAL_IncTick+0x24>)
 80026b6:	6013      	str	r3, [r2, #0]
}
 80026b8:	bf00      	nop
 80026ba:	46bd      	mov	sp, r7
 80026bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c0:	4770      	bx	lr
 80026c2:	bf00      	nop
 80026c4:	24000094 	.word	0x24000094
 80026c8:	240671fc 	.word	0x240671fc

080026cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80026cc:	b480      	push	{r7}
 80026ce:	af00      	add	r7, sp, #0
  return uwTick;
 80026d0:	4b03      	ldr	r3, [pc, #12]	; (80026e0 <HAL_GetTick+0x14>)
 80026d2:	681b      	ldr	r3, [r3, #0]
}
 80026d4:	4618      	mov	r0, r3
 80026d6:	46bd      	mov	sp, r7
 80026d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026dc:	4770      	bx	lr
 80026de:	bf00      	nop
 80026e0:	240671fc 	.word	0x240671fc

080026e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b084      	sub	sp, #16
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80026ec:	f7ff ffee 	bl	80026cc <HAL_GetTick>
 80026f0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026fc:	d005      	beq.n	800270a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80026fe:	4b09      	ldr	r3, [pc, #36]	; (8002724 <HAL_Delay+0x40>)
 8002700:	781b      	ldrb	r3, [r3, #0]
 8002702:	461a      	mov	r2, r3
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	4413      	add	r3, r2
 8002708:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800270a:	bf00      	nop
 800270c:	f7ff ffde 	bl	80026cc <HAL_GetTick>
 8002710:	4602      	mov	r2, r0
 8002712:	68bb      	ldr	r3, [r7, #8]
 8002714:	1ad3      	subs	r3, r2, r3
 8002716:	68fa      	ldr	r2, [r7, #12]
 8002718:	429a      	cmp	r2, r3
 800271a:	d8f7      	bhi.n	800270c <HAL_Delay+0x28>
  {
  }
}
 800271c:	bf00      	nop
 800271e:	3710      	adds	r7, #16
 8002720:	46bd      	mov	sp, r7
 8002722:	bd80      	pop	{r7, pc}
 8002724:	24000094 	.word	0x24000094

08002728 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002728:	b480      	push	{r7}
 800272a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 800272c:	4b03      	ldr	r3, [pc, #12]	; (800273c <HAL_GetREVID+0x14>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	0c1b      	lsrs	r3, r3, #16
}
 8002732:	4618      	mov	r0, r3
 8002734:	46bd      	mov	sp, r7
 8002736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273a:	4770      	bx	lr
 800273c:	5c001000 	.word	0x5c001000

08002740 <__NVIC_SetPriorityGrouping>:
{
 8002740:	b480      	push	{r7}
 8002742:	b085      	sub	sp, #20
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	f003 0307 	and.w	r3, r3, #7
 800274e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002750:	4b0b      	ldr	r3, [pc, #44]	; (8002780 <__NVIC_SetPriorityGrouping+0x40>)
 8002752:	68db      	ldr	r3, [r3, #12]
 8002754:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002756:	68ba      	ldr	r2, [r7, #8]
 8002758:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800275c:	4013      	ands	r3, r2
 800275e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002764:	68bb      	ldr	r3, [r7, #8]
 8002766:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002768:	4b06      	ldr	r3, [pc, #24]	; (8002784 <__NVIC_SetPriorityGrouping+0x44>)
 800276a:	4313      	orrs	r3, r2
 800276c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800276e:	4a04      	ldr	r2, [pc, #16]	; (8002780 <__NVIC_SetPriorityGrouping+0x40>)
 8002770:	68bb      	ldr	r3, [r7, #8]
 8002772:	60d3      	str	r3, [r2, #12]
}
 8002774:	bf00      	nop
 8002776:	3714      	adds	r7, #20
 8002778:	46bd      	mov	sp, r7
 800277a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277e:	4770      	bx	lr
 8002780:	e000ed00 	.word	0xe000ed00
 8002784:	05fa0000 	.word	0x05fa0000

08002788 <__NVIC_GetPriorityGrouping>:
{
 8002788:	b480      	push	{r7}
 800278a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800278c:	4b04      	ldr	r3, [pc, #16]	; (80027a0 <__NVIC_GetPriorityGrouping+0x18>)
 800278e:	68db      	ldr	r3, [r3, #12]
 8002790:	0a1b      	lsrs	r3, r3, #8
 8002792:	f003 0307 	and.w	r3, r3, #7
}
 8002796:	4618      	mov	r0, r3
 8002798:	46bd      	mov	sp, r7
 800279a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279e:	4770      	bx	lr
 80027a0:	e000ed00 	.word	0xe000ed00

080027a4 <__NVIC_EnableIRQ>:
{
 80027a4:	b480      	push	{r7}
 80027a6:	b083      	sub	sp, #12
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	4603      	mov	r3, r0
 80027ac:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80027ae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	db0b      	blt.n	80027ce <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80027b6:	88fb      	ldrh	r3, [r7, #6]
 80027b8:	f003 021f 	and.w	r2, r3, #31
 80027bc:	4907      	ldr	r1, [pc, #28]	; (80027dc <__NVIC_EnableIRQ+0x38>)
 80027be:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80027c2:	095b      	lsrs	r3, r3, #5
 80027c4:	2001      	movs	r0, #1
 80027c6:	fa00 f202 	lsl.w	r2, r0, r2
 80027ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80027ce:	bf00      	nop
 80027d0:	370c      	adds	r7, #12
 80027d2:	46bd      	mov	sp, r7
 80027d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d8:	4770      	bx	lr
 80027da:	bf00      	nop
 80027dc:	e000e100 	.word	0xe000e100

080027e0 <__NVIC_DisableIRQ>:
{
 80027e0:	b480      	push	{r7}
 80027e2:	b083      	sub	sp, #12
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	4603      	mov	r3, r0
 80027e8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80027ea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	db10      	blt.n	8002814 <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80027f2:	88fb      	ldrh	r3, [r7, #6]
 80027f4:	f003 021f 	and.w	r2, r3, #31
 80027f8:	4909      	ldr	r1, [pc, #36]	; (8002820 <__NVIC_DisableIRQ+0x40>)
 80027fa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80027fe:	095b      	lsrs	r3, r3, #5
 8002800:	2001      	movs	r0, #1
 8002802:	fa00 f202 	lsl.w	r2, r0, r2
 8002806:	3320      	adds	r3, #32
 8002808:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800280c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002810:	f3bf 8f6f 	isb	sy
}
 8002814:	bf00      	nop
 8002816:	370c      	adds	r7, #12
 8002818:	46bd      	mov	sp, r7
 800281a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281e:	4770      	bx	lr
 8002820:	e000e100 	.word	0xe000e100

08002824 <__NVIC_SetPriority>:
{
 8002824:	b480      	push	{r7}
 8002826:	b083      	sub	sp, #12
 8002828:	af00      	add	r7, sp, #0
 800282a:	4603      	mov	r3, r0
 800282c:	6039      	str	r1, [r7, #0]
 800282e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002830:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002834:	2b00      	cmp	r3, #0
 8002836:	db0a      	blt.n	800284e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	b2da      	uxtb	r2, r3
 800283c:	490c      	ldr	r1, [pc, #48]	; (8002870 <__NVIC_SetPriority+0x4c>)
 800283e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002842:	0112      	lsls	r2, r2, #4
 8002844:	b2d2      	uxtb	r2, r2
 8002846:	440b      	add	r3, r1
 8002848:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800284c:	e00a      	b.n	8002864 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	b2da      	uxtb	r2, r3
 8002852:	4908      	ldr	r1, [pc, #32]	; (8002874 <__NVIC_SetPriority+0x50>)
 8002854:	88fb      	ldrh	r3, [r7, #6]
 8002856:	f003 030f 	and.w	r3, r3, #15
 800285a:	3b04      	subs	r3, #4
 800285c:	0112      	lsls	r2, r2, #4
 800285e:	b2d2      	uxtb	r2, r2
 8002860:	440b      	add	r3, r1
 8002862:	761a      	strb	r2, [r3, #24]
}
 8002864:	bf00      	nop
 8002866:	370c      	adds	r7, #12
 8002868:	46bd      	mov	sp, r7
 800286a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286e:	4770      	bx	lr
 8002870:	e000e100 	.word	0xe000e100
 8002874:	e000ed00 	.word	0xe000ed00

08002878 <NVIC_EncodePriority>:
{
 8002878:	b480      	push	{r7}
 800287a:	b089      	sub	sp, #36	; 0x24
 800287c:	af00      	add	r7, sp, #0
 800287e:	60f8      	str	r0, [r7, #12]
 8002880:	60b9      	str	r1, [r7, #8]
 8002882:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	f003 0307 	and.w	r3, r3, #7
 800288a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800288c:	69fb      	ldr	r3, [r7, #28]
 800288e:	f1c3 0307 	rsb	r3, r3, #7
 8002892:	2b04      	cmp	r3, #4
 8002894:	bf28      	it	cs
 8002896:	2304      	movcs	r3, #4
 8002898:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800289a:	69fb      	ldr	r3, [r7, #28]
 800289c:	3304      	adds	r3, #4
 800289e:	2b06      	cmp	r3, #6
 80028a0:	d902      	bls.n	80028a8 <NVIC_EncodePriority+0x30>
 80028a2:	69fb      	ldr	r3, [r7, #28]
 80028a4:	3b03      	subs	r3, #3
 80028a6:	e000      	b.n	80028aa <NVIC_EncodePriority+0x32>
 80028a8:	2300      	movs	r3, #0
 80028aa:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028ac:	f04f 32ff 	mov.w	r2, #4294967295
 80028b0:	69bb      	ldr	r3, [r7, #24]
 80028b2:	fa02 f303 	lsl.w	r3, r2, r3
 80028b6:	43da      	mvns	r2, r3
 80028b8:	68bb      	ldr	r3, [r7, #8]
 80028ba:	401a      	ands	r2, r3
 80028bc:	697b      	ldr	r3, [r7, #20]
 80028be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80028c0:	f04f 31ff 	mov.w	r1, #4294967295
 80028c4:	697b      	ldr	r3, [r7, #20]
 80028c6:	fa01 f303 	lsl.w	r3, r1, r3
 80028ca:	43d9      	mvns	r1, r3
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028d0:	4313      	orrs	r3, r2
}
 80028d2:	4618      	mov	r0, r3
 80028d4:	3724      	adds	r7, #36	; 0x24
 80028d6:	46bd      	mov	sp, r7
 80028d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028dc:	4770      	bx	lr
	...

080028e0 <SysTick_Config>:
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b082      	sub	sp, #8
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	3b01      	subs	r3, #1
 80028ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80028f0:	d301      	bcc.n	80028f6 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80028f2:	2301      	movs	r3, #1
 80028f4:	e00f      	b.n	8002916 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80028f6:	4a0a      	ldr	r2, [pc, #40]	; (8002920 <SysTick_Config+0x40>)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	3b01      	subs	r3, #1
 80028fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80028fe:	210f      	movs	r1, #15
 8002900:	f04f 30ff 	mov.w	r0, #4294967295
 8002904:	f7ff ff8e 	bl	8002824 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002908:	4b05      	ldr	r3, [pc, #20]	; (8002920 <SysTick_Config+0x40>)
 800290a:	2200      	movs	r2, #0
 800290c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800290e:	4b04      	ldr	r3, [pc, #16]	; (8002920 <SysTick_Config+0x40>)
 8002910:	2207      	movs	r2, #7
 8002912:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8002914:	2300      	movs	r3, #0
}
 8002916:	4618      	mov	r0, r3
 8002918:	3708      	adds	r7, #8
 800291a:	46bd      	mov	sp, r7
 800291c:	bd80      	pop	{r7, pc}
 800291e:	bf00      	nop
 8002920:	e000e010 	.word	0xe000e010

08002924 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b082      	sub	sp, #8
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800292c:	6878      	ldr	r0, [r7, #4]
 800292e:	f7ff ff07 	bl	8002740 <__NVIC_SetPriorityGrouping>
}
 8002932:	bf00      	nop
 8002934:	3708      	adds	r7, #8
 8002936:	46bd      	mov	sp, r7
 8002938:	bd80      	pop	{r7, pc}

0800293a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800293a:	b580      	push	{r7, lr}
 800293c:	b086      	sub	sp, #24
 800293e:	af00      	add	r7, sp, #0
 8002940:	4603      	mov	r3, r0
 8002942:	60b9      	str	r1, [r7, #8]
 8002944:	607a      	str	r2, [r7, #4]
 8002946:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002948:	f7ff ff1e 	bl	8002788 <__NVIC_GetPriorityGrouping>
 800294c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800294e:	687a      	ldr	r2, [r7, #4]
 8002950:	68b9      	ldr	r1, [r7, #8]
 8002952:	6978      	ldr	r0, [r7, #20]
 8002954:	f7ff ff90 	bl	8002878 <NVIC_EncodePriority>
 8002958:	4602      	mov	r2, r0
 800295a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800295e:	4611      	mov	r1, r2
 8002960:	4618      	mov	r0, r3
 8002962:	f7ff ff5f 	bl	8002824 <__NVIC_SetPriority>
}
 8002966:	bf00      	nop
 8002968:	3718      	adds	r7, #24
 800296a:	46bd      	mov	sp, r7
 800296c:	bd80      	pop	{r7, pc}

0800296e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800296e:	b580      	push	{r7, lr}
 8002970:	b082      	sub	sp, #8
 8002972:	af00      	add	r7, sp, #0
 8002974:	4603      	mov	r3, r0
 8002976:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002978:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800297c:	4618      	mov	r0, r3
 800297e:	f7ff ff11 	bl	80027a4 <__NVIC_EnableIRQ>
}
 8002982:	bf00      	nop
 8002984:	3708      	adds	r7, #8
 8002986:	46bd      	mov	sp, r7
 8002988:	bd80      	pop	{r7, pc}

0800298a <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800298a:	b580      	push	{r7, lr}
 800298c:	b082      	sub	sp, #8
 800298e:	af00      	add	r7, sp, #0
 8002990:	4603      	mov	r3, r0
 8002992:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8002994:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002998:	4618      	mov	r0, r3
 800299a:	f7ff ff21 	bl	80027e0 <__NVIC_DisableIRQ>
}
 800299e:	bf00      	nop
 80029a0:	3708      	adds	r7, #8
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bd80      	pop	{r7, pc}

080029a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80029a6:	b580      	push	{r7, lr}
 80029a8:	b082      	sub	sp, #8
 80029aa:	af00      	add	r7, sp, #0
 80029ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80029ae:	6878      	ldr	r0, [r7, #4]
 80029b0:	f7ff ff96 	bl	80028e0 <SysTick_Config>
 80029b4:	4603      	mov	r3, r0
}
 80029b6:	4618      	mov	r0, r3
 80029b8:	3708      	adds	r7, #8
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bd80      	pop	{r7, pc}
	...

080029c0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b084      	sub	sp, #16
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d101      	bne.n	80029d2 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80029ce:	2301      	movs	r3, #1
 80029d0:	e188      	b.n	8002ce4 <HAL_DMA_Abort_IT+0x324>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80029d8:	b2db      	uxtb	r3, r3
 80029da:	2b02      	cmp	r3, #2
 80029dc:	d004      	beq.n	80029e8 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	2280      	movs	r2, #128	; 0x80
 80029e2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80029e4:	2301      	movs	r3, #1
 80029e6:	e17d      	b.n	8002ce4 <HAL_DMA_Abort_IT+0x324>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4a8c      	ldr	r2, [pc, #560]	; (8002c20 <HAL_DMA_Abort_IT+0x260>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d04a      	beq.n	8002a88 <HAL_DMA_Abort_IT+0xc8>
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	4a8b      	ldr	r2, [pc, #556]	; (8002c24 <HAL_DMA_Abort_IT+0x264>)
 80029f8:	4293      	cmp	r3, r2
 80029fa:	d045      	beq.n	8002a88 <HAL_DMA_Abort_IT+0xc8>
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	4a89      	ldr	r2, [pc, #548]	; (8002c28 <HAL_DMA_Abort_IT+0x268>)
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d040      	beq.n	8002a88 <HAL_DMA_Abort_IT+0xc8>
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4a88      	ldr	r2, [pc, #544]	; (8002c2c <HAL_DMA_Abort_IT+0x26c>)
 8002a0c:	4293      	cmp	r3, r2
 8002a0e:	d03b      	beq.n	8002a88 <HAL_DMA_Abort_IT+0xc8>
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	4a86      	ldr	r2, [pc, #536]	; (8002c30 <HAL_DMA_Abort_IT+0x270>)
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d036      	beq.n	8002a88 <HAL_DMA_Abort_IT+0xc8>
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	4a85      	ldr	r2, [pc, #532]	; (8002c34 <HAL_DMA_Abort_IT+0x274>)
 8002a20:	4293      	cmp	r3, r2
 8002a22:	d031      	beq.n	8002a88 <HAL_DMA_Abort_IT+0xc8>
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	4a83      	ldr	r2, [pc, #524]	; (8002c38 <HAL_DMA_Abort_IT+0x278>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d02c      	beq.n	8002a88 <HAL_DMA_Abort_IT+0xc8>
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	4a82      	ldr	r2, [pc, #520]	; (8002c3c <HAL_DMA_Abort_IT+0x27c>)
 8002a34:	4293      	cmp	r3, r2
 8002a36:	d027      	beq.n	8002a88 <HAL_DMA_Abort_IT+0xc8>
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4a80      	ldr	r2, [pc, #512]	; (8002c40 <HAL_DMA_Abort_IT+0x280>)
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d022      	beq.n	8002a88 <HAL_DMA_Abort_IT+0xc8>
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	4a7f      	ldr	r2, [pc, #508]	; (8002c44 <HAL_DMA_Abort_IT+0x284>)
 8002a48:	4293      	cmp	r3, r2
 8002a4a:	d01d      	beq.n	8002a88 <HAL_DMA_Abort_IT+0xc8>
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4a7d      	ldr	r2, [pc, #500]	; (8002c48 <HAL_DMA_Abort_IT+0x288>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d018      	beq.n	8002a88 <HAL_DMA_Abort_IT+0xc8>
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	4a7c      	ldr	r2, [pc, #496]	; (8002c4c <HAL_DMA_Abort_IT+0x28c>)
 8002a5c:	4293      	cmp	r3, r2
 8002a5e:	d013      	beq.n	8002a88 <HAL_DMA_Abort_IT+0xc8>
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4a7a      	ldr	r2, [pc, #488]	; (8002c50 <HAL_DMA_Abort_IT+0x290>)
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d00e      	beq.n	8002a88 <HAL_DMA_Abort_IT+0xc8>
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	4a79      	ldr	r2, [pc, #484]	; (8002c54 <HAL_DMA_Abort_IT+0x294>)
 8002a70:	4293      	cmp	r3, r2
 8002a72:	d009      	beq.n	8002a88 <HAL_DMA_Abort_IT+0xc8>
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	4a77      	ldr	r2, [pc, #476]	; (8002c58 <HAL_DMA_Abort_IT+0x298>)
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d004      	beq.n	8002a88 <HAL_DMA_Abort_IT+0xc8>
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	4a76      	ldr	r2, [pc, #472]	; (8002c5c <HAL_DMA_Abort_IT+0x29c>)
 8002a84:	4293      	cmp	r3, r2
 8002a86:	d101      	bne.n	8002a8c <HAL_DMA_Abort_IT+0xcc>
 8002a88:	2301      	movs	r3, #1
 8002a8a:	e000      	b.n	8002a8e <HAL_DMA_Abort_IT+0xce>
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d065      	beq.n	8002b5e <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	2204      	movs	r2, #4
 8002a96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	4a60      	ldr	r2, [pc, #384]	; (8002c20 <HAL_DMA_Abort_IT+0x260>)
 8002aa0:	4293      	cmp	r3, r2
 8002aa2:	d04a      	beq.n	8002b3a <HAL_DMA_Abort_IT+0x17a>
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4a5e      	ldr	r2, [pc, #376]	; (8002c24 <HAL_DMA_Abort_IT+0x264>)
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d045      	beq.n	8002b3a <HAL_DMA_Abort_IT+0x17a>
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4a5d      	ldr	r2, [pc, #372]	; (8002c28 <HAL_DMA_Abort_IT+0x268>)
 8002ab4:	4293      	cmp	r3, r2
 8002ab6:	d040      	beq.n	8002b3a <HAL_DMA_Abort_IT+0x17a>
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4a5b      	ldr	r2, [pc, #364]	; (8002c2c <HAL_DMA_Abort_IT+0x26c>)
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d03b      	beq.n	8002b3a <HAL_DMA_Abort_IT+0x17a>
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4a5a      	ldr	r2, [pc, #360]	; (8002c30 <HAL_DMA_Abort_IT+0x270>)
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	d036      	beq.n	8002b3a <HAL_DMA_Abort_IT+0x17a>
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4a58      	ldr	r2, [pc, #352]	; (8002c34 <HAL_DMA_Abort_IT+0x274>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d031      	beq.n	8002b3a <HAL_DMA_Abort_IT+0x17a>
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	4a57      	ldr	r2, [pc, #348]	; (8002c38 <HAL_DMA_Abort_IT+0x278>)
 8002adc:	4293      	cmp	r3, r2
 8002ade:	d02c      	beq.n	8002b3a <HAL_DMA_Abort_IT+0x17a>
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4a55      	ldr	r2, [pc, #340]	; (8002c3c <HAL_DMA_Abort_IT+0x27c>)
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d027      	beq.n	8002b3a <HAL_DMA_Abort_IT+0x17a>
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4a54      	ldr	r2, [pc, #336]	; (8002c40 <HAL_DMA_Abort_IT+0x280>)
 8002af0:	4293      	cmp	r3, r2
 8002af2:	d022      	beq.n	8002b3a <HAL_DMA_Abort_IT+0x17a>
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	4a52      	ldr	r2, [pc, #328]	; (8002c44 <HAL_DMA_Abort_IT+0x284>)
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d01d      	beq.n	8002b3a <HAL_DMA_Abort_IT+0x17a>
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	4a51      	ldr	r2, [pc, #324]	; (8002c48 <HAL_DMA_Abort_IT+0x288>)
 8002b04:	4293      	cmp	r3, r2
 8002b06:	d018      	beq.n	8002b3a <HAL_DMA_Abort_IT+0x17a>
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	4a4f      	ldr	r2, [pc, #316]	; (8002c4c <HAL_DMA_Abort_IT+0x28c>)
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	d013      	beq.n	8002b3a <HAL_DMA_Abort_IT+0x17a>
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	4a4e      	ldr	r2, [pc, #312]	; (8002c50 <HAL_DMA_Abort_IT+0x290>)
 8002b18:	4293      	cmp	r3, r2
 8002b1a:	d00e      	beq.n	8002b3a <HAL_DMA_Abort_IT+0x17a>
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4a4c      	ldr	r2, [pc, #304]	; (8002c54 <HAL_DMA_Abort_IT+0x294>)
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d009      	beq.n	8002b3a <HAL_DMA_Abort_IT+0x17a>
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	4a4b      	ldr	r2, [pc, #300]	; (8002c58 <HAL_DMA_Abort_IT+0x298>)
 8002b2c:	4293      	cmp	r3, r2
 8002b2e:	d004      	beq.n	8002b3a <HAL_DMA_Abort_IT+0x17a>
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	4a49      	ldr	r2, [pc, #292]	; (8002c5c <HAL_DMA_Abort_IT+0x29c>)
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d108      	bne.n	8002b4c <HAL_DMA_Abort_IT+0x18c>
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	681a      	ldr	r2, [r3, #0]
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f022 0201 	bic.w	r2, r2, #1
 8002b48:	601a      	str	r2, [r3, #0]
 8002b4a:	e0ca      	b.n	8002ce2 <HAL_DMA_Abort_IT+0x322>
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	681a      	ldr	r2, [r3, #0]
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f022 0201 	bic.w	r2, r2, #1
 8002b5a:	601a      	str	r2, [r3, #0]
 8002b5c:	e0c1      	b.n	8002ce2 <HAL_DMA_Abort_IT+0x322>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	681a      	ldr	r2, [r3, #0]
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f022 020e 	bic.w	r2, r2, #14
 8002b6c:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	4a2b      	ldr	r2, [pc, #172]	; (8002c20 <HAL_DMA_Abort_IT+0x260>)
 8002b74:	4293      	cmp	r3, r2
 8002b76:	d04a      	beq.n	8002c0e <HAL_DMA_Abort_IT+0x24e>
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	4a29      	ldr	r2, [pc, #164]	; (8002c24 <HAL_DMA_Abort_IT+0x264>)
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	d045      	beq.n	8002c0e <HAL_DMA_Abort_IT+0x24e>
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	4a28      	ldr	r2, [pc, #160]	; (8002c28 <HAL_DMA_Abort_IT+0x268>)
 8002b88:	4293      	cmp	r3, r2
 8002b8a:	d040      	beq.n	8002c0e <HAL_DMA_Abort_IT+0x24e>
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4a26      	ldr	r2, [pc, #152]	; (8002c2c <HAL_DMA_Abort_IT+0x26c>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d03b      	beq.n	8002c0e <HAL_DMA_Abort_IT+0x24e>
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	4a25      	ldr	r2, [pc, #148]	; (8002c30 <HAL_DMA_Abort_IT+0x270>)
 8002b9c:	4293      	cmp	r3, r2
 8002b9e:	d036      	beq.n	8002c0e <HAL_DMA_Abort_IT+0x24e>
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	4a23      	ldr	r2, [pc, #140]	; (8002c34 <HAL_DMA_Abort_IT+0x274>)
 8002ba6:	4293      	cmp	r3, r2
 8002ba8:	d031      	beq.n	8002c0e <HAL_DMA_Abort_IT+0x24e>
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	4a22      	ldr	r2, [pc, #136]	; (8002c38 <HAL_DMA_Abort_IT+0x278>)
 8002bb0:	4293      	cmp	r3, r2
 8002bb2:	d02c      	beq.n	8002c0e <HAL_DMA_Abort_IT+0x24e>
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4a20      	ldr	r2, [pc, #128]	; (8002c3c <HAL_DMA_Abort_IT+0x27c>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d027      	beq.n	8002c0e <HAL_DMA_Abort_IT+0x24e>
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	4a1f      	ldr	r2, [pc, #124]	; (8002c40 <HAL_DMA_Abort_IT+0x280>)
 8002bc4:	4293      	cmp	r3, r2
 8002bc6:	d022      	beq.n	8002c0e <HAL_DMA_Abort_IT+0x24e>
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4a1d      	ldr	r2, [pc, #116]	; (8002c44 <HAL_DMA_Abort_IT+0x284>)
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d01d      	beq.n	8002c0e <HAL_DMA_Abort_IT+0x24e>
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	4a1c      	ldr	r2, [pc, #112]	; (8002c48 <HAL_DMA_Abort_IT+0x288>)
 8002bd8:	4293      	cmp	r3, r2
 8002bda:	d018      	beq.n	8002c0e <HAL_DMA_Abort_IT+0x24e>
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4a1a      	ldr	r2, [pc, #104]	; (8002c4c <HAL_DMA_Abort_IT+0x28c>)
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d013      	beq.n	8002c0e <HAL_DMA_Abort_IT+0x24e>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4a19      	ldr	r2, [pc, #100]	; (8002c50 <HAL_DMA_Abort_IT+0x290>)
 8002bec:	4293      	cmp	r3, r2
 8002bee:	d00e      	beq.n	8002c0e <HAL_DMA_Abort_IT+0x24e>
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	4a17      	ldr	r2, [pc, #92]	; (8002c54 <HAL_DMA_Abort_IT+0x294>)
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d009      	beq.n	8002c0e <HAL_DMA_Abort_IT+0x24e>
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4a16      	ldr	r2, [pc, #88]	; (8002c58 <HAL_DMA_Abort_IT+0x298>)
 8002c00:	4293      	cmp	r3, r2
 8002c02:	d004      	beq.n	8002c0e <HAL_DMA_Abort_IT+0x24e>
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4a14      	ldr	r2, [pc, #80]	; (8002c5c <HAL_DMA_Abort_IT+0x29c>)
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d128      	bne.n	8002c60 <HAL_DMA_Abort_IT+0x2a0>
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	681a      	ldr	r2, [r3, #0]
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f022 0201 	bic.w	r2, r2, #1
 8002c1c:	601a      	str	r2, [r3, #0]
 8002c1e:	e027      	b.n	8002c70 <HAL_DMA_Abort_IT+0x2b0>
 8002c20:	40020010 	.word	0x40020010
 8002c24:	40020028 	.word	0x40020028
 8002c28:	40020040 	.word	0x40020040
 8002c2c:	40020058 	.word	0x40020058
 8002c30:	40020070 	.word	0x40020070
 8002c34:	40020088 	.word	0x40020088
 8002c38:	400200a0 	.word	0x400200a0
 8002c3c:	400200b8 	.word	0x400200b8
 8002c40:	40020410 	.word	0x40020410
 8002c44:	40020428 	.word	0x40020428
 8002c48:	40020440 	.word	0x40020440
 8002c4c:	40020458 	.word	0x40020458
 8002c50:	40020470 	.word	0x40020470
 8002c54:	40020488 	.word	0x40020488
 8002c58:	400204a0 	.word	0x400204a0
 8002c5c:	400204b8 	.word	0x400204b8
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	681a      	ldr	r2, [r3, #0]
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f022 0201 	bic.w	r2, r2, #1
 8002c6e:	601a      	str	r2, [r3, #0]

      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c74:	681a      	ldr	r2, [r3, #0]
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c7a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002c7e:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c84:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c8a:	f003 031f 	and.w	r3, r3, #31
 8002c8e:	2201      	movs	r2, #1
 8002c90:	409a      	lsls	r2, r3
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	605a      	str	r2, [r3, #4]

      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002c9a:	687a      	ldr	r2, [r7, #4]
 8002c9c:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002c9e:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d00c      	beq.n	8002cc2 <HAL_DMA_Abort_IT+0x302>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002cac:	681a      	ldr	r2, [r3, #0]
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002cb2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002cb6:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cbc:	687a      	ldr	r2, [r7, #4]
 8002cbe:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002cc0:	605a      	str	r2, [r3, #4]
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	2201      	movs	r2, #1
 8002cce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d003      	beq.n	8002ce2 <HAL_DMA_Abort_IT+0x322>
      {
        hdma->XferAbortCallback(hdma);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002cde:	6878      	ldr	r0, [r7, #4]
 8002ce0:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8002ce2:	2300      	movs	r3, #0
}
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	3710      	adds	r7, #16
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	bd80      	pop	{r7, pc}

08002cec <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002cec:	b480      	push	{r7}
 8002cee:	b089      	sub	sp, #36	; 0x24
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
 8002cf4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002cfa:	4b89      	ldr	r3, [pc, #548]	; (8002f20 <HAL_GPIO_Init+0x234>)
 8002cfc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002cfe:	e194      	b.n	800302a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	681a      	ldr	r2, [r3, #0]
 8002d04:	2101      	movs	r1, #1
 8002d06:	69fb      	ldr	r3, [r7, #28]
 8002d08:	fa01 f303 	lsl.w	r3, r1, r3
 8002d0c:	4013      	ands	r3, r2
 8002d0e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002d10:	693b      	ldr	r3, [r7, #16]
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	f000 8186 	beq.w	8003024 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	685b      	ldr	r3, [r3, #4]
 8002d1c:	2b02      	cmp	r3, #2
 8002d1e:	d003      	beq.n	8002d28 <HAL_GPIO_Init+0x3c>
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	685b      	ldr	r3, [r3, #4]
 8002d24:	2b12      	cmp	r3, #18
 8002d26:	d123      	bne.n	8002d70 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002d28:	69fb      	ldr	r3, [r7, #28]
 8002d2a:	08da      	lsrs	r2, r3, #3
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	3208      	adds	r2, #8
 8002d30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d34:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002d36:	69fb      	ldr	r3, [r7, #28]
 8002d38:	f003 0307 	and.w	r3, r3, #7
 8002d3c:	009b      	lsls	r3, r3, #2
 8002d3e:	220f      	movs	r2, #15
 8002d40:	fa02 f303 	lsl.w	r3, r2, r3
 8002d44:	43db      	mvns	r3, r3
 8002d46:	69ba      	ldr	r2, [r7, #24]
 8002d48:	4013      	ands	r3, r2
 8002d4a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	691a      	ldr	r2, [r3, #16]
 8002d50:	69fb      	ldr	r3, [r7, #28]
 8002d52:	f003 0307 	and.w	r3, r3, #7
 8002d56:	009b      	lsls	r3, r3, #2
 8002d58:	fa02 f303 	lsl.w	r3, r2, r3
 8002d5c:	69ba      	ldr	r2, [r7, #24]
 8002d5e:	4313      	orrs	r3, r2
 8002d60:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002d62:	69fb      	ldr	r3, [r7, #28]
 8002d64:	08da      	lsrs	r2, r3, #3
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	3208      	adds	r2, #8
 8002d6a:	69b9      	ldr	r1, [r7, #24]
 8002d6c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002d76:	69fb      	ldr	r3, [r7, #28]
 8002d78:	005b      	lsls	r3, r3, #1
 8002d7a:	2203      	movs	r2, #3
 8002d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d80:	43db      	mvns	r3, r3
 8002d82:	69ba      	ldr	r2, [r7, #24]
 8002d84:	4013      	ands	r3, r2
 8002d86:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	685b      	ldr	r3, [r3, #4]
 8002d8c:	f003 0203 	and.w	r2, r3, #3
 8002d90:	69fb      	ldr	r3, [r7, #28]
 8002d92:	005b      	lsls	r3, r3, #1
 8002d94:	fa02 f303 	lsl.w	r3, r2, r3
 8002d98:	69ba      	ldr	r2, [r7, #24]
 8002d9a:	4313      	orrs	r3, r2
 8002d9c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	69ba      	ldr	r2, [r7, #24]
 8002da2:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	685b      	ldr	r3, [r3, #4]
 8002da8:	2b01      	cmp	r3, #1
 8002daa:	d00b      	beq.n	8002dc4 <HAL_GPIO_Init+0xd8>
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	685b      	ldr	r3, [r3, #4]
 8002db0:	2b02      	cmp	r3, #2
 8002db2:	d007      	beq.n	8002dc4 <HAL_GPIO_Init+0xd8>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002db8:	2b11      	cmp	r3, #17
 8002dba:	d003      	beq.n	8002dc4 <HAL_GPIO_Init+0xd8>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	685b      	ldr	r3, [r3, #4]
 8002dc0:	2b12      	cmp	r3, #18
 8002dc2:	d130      	bne.n	8002e26 <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	689b      	ldr	r3, [r3, #8]
 8002dc8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002dca:	69fb      	ldr	r3, [r7, #28]
 8002dcc:	005b      	lsls	r3, r3, #1
 8002dce:	2203      	movs	r2, #3
 8002dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd4:	43db      	mvns	r3, r3
 8002dd6:	69ba      	ldr	r2, [r7, #24]
 8002dd8:	4013      	ands	r3, r2
 8002dda:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	68da      	ldr	r2, [r3, #12]
 8002de0:	69fb      	ldr	r3, [r7, #28]
 8002de2:	005b      	lsls	r3, r3, #1
 8002de4:	fa02 f303 	lsl.w	r3, r2, r3
 8002de8:	69ba      	ldr	r2, [r7, #24]
 8002dea:	4313      	orrs	r3, r2
 8002dec:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	69ba      	ldr	r2, [r7, #24]
 8002df2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	685b      	ldr	r3, [r3, #4]
 8002df8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002dfa:	2201      	movs	r2, #1
 8002dfc:	69fb      	ldr	r3, [r7, #28]
 8002dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8002e02:	43db      	mvns	r3, r3
 8002e04:	69ba      	ldr	r2, [r7, #24]
 8002e06:	4013      	ands	r3, r2
 8002e08:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	685b      	ldr	r3, [r3, #4]
 8002e0e:	091b      	lsrs	r3, r3, #4
 8002e10:	f003 0201 	and.w	r2, r3, #1
 8002e14:	69fb      	ldr	r3, [r7, #28]
 8002e16:	fa02 f303 	lsl.w	r3, r2, r3
 8002e1a:	69ba      	ldr	r2, [r7, #24]
 8002e1c:	4313      	orrs	r3, r2
 8002e1e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	69ba      	ldr	r2, [r7, #24]
 8002e24:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	68db      	ldr	r3, [r3, #12]
 8002e2a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002e2c:	69fb      	ldr	r3, [r7, #28]
 8002e2e:	005b      	lsls	r3, r3, #1
 8002e30:	2203      	movs	r2, #3
 8002e32:	fa02 f303 	lsl.w	r3, r2, r3
 8002e36:	43db      	mvns	r3, r3
 8002e38:	69ba      	ldr	r2, [r7, #24]
 8002e3a:	4013      	ands	r3, r2
 8002e3c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	689a      	ldr	r2, [r3, #8]
 8002e42:	69fb      	ldr	r3, [r7, #28]
 8002e44:	005b      	lsls	r3, r3, #1
 8002e46:	fa02 f303 	lsl.w	r3, r2, r3
 8002e4a:	69ba      	ldr	r2, [r7, #24]
 8002e4c:	4313      	orrs	r3, r2
 8002e4e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	69ba      	ldr	r2, [r7, #24]
 8002e54:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	685b      	ldr	r3, [r3, #4]
 8002e5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	f000 80e0 	beq.w	8003024 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e64:	4b2f      	ldr	r3, [pc, #188]	; (8002f24 <HAL_GPIO_Init+0x238>)
 8002e66:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002e6a:	4a2e      	ldr	r2, [pc, #184]	; (8002f24 <HAL_GPIO_Init+0x238>)
 8002e6c:	f043 0302 	orr.w	r3, r3, #2
 8002e70:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002e74:	4b2b      	ldr	r3, [pc, #172]	; (8002f24 <HAL_GPIO_Init+0x238>)
 8002e76:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002e7a:	f003 0302 	and.w	r3, r3, #2
 8002e7e:	60fb      	str	r3, [r7, #12]
 8002e80:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002e82:	4a29      	ldr	r2, [pc, #164]	; (8002f28 <HAL_GPIO_Init+0x23c>)
 8002e84:	69fb      	ldr	r3, [r7, #28]
 8002e86:	089b      	lsrs	r3, r3, #2
 8002e88:	3302      	adds	r3, #2
 8002e8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002e90:	69fb      	ldr	r3, [r7, #28]
 8002e92:	f003 0303 	and.w	r3, r3, #3
 8002e96:	009b      	lsls	r3, r3, #2
 8002e98:	220f      	movs	r2, #15
 8002e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e9e:	43db      	mvns	r3, r3
 8002ea0:	69ba      	ldr	r2, [r7, #24]
 8002ea2:	4013      	ands	r3, r2
 8002ea4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	4a20      	ldr	r2, [pc, #128]	; (8002f2c <HAL_GPIO_Init+0x240>)
 8002eaa:	4293      	cmp	r3, r2
 8002eac:	d052      	beq.n	8002f54 <HAL_GPIO_Init+0x268>
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	4a1f      	ldr	r2, [pc, #124]	; (8002f30 <HAL_GPIO_Init+0x244>)
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d031      	beq.n	8002f1a <HAL_GPIO_Init+0x22e>
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	4a1e      	ldr	r2, [pc, #120]	; (8002f34 <HAL_GPIO_Init+0x248>)
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d02b      	beq.n	8002f16 <HAL_GPIO_Init+0x22a>
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	4a1d      	ldr	r2, [pc, #116]	; (8002f38 <HAL_GPIO_Init+0x24c>)
 8002ec2:	4293      	cmp	r3, r2
 8002ec4:	d025      	beq.n	8002f12 <HAL_GPIO_Init+0x226>
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	4a1c      	ldr	r2, [pc, #112]	; (8002f3c <HAL_GPIO_Init+0x250>)
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d01f      	beq.n	8002f0e <HAL_GPIO_Init+0x222>
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	4a1b      	ldr	r2, [pc, #108]	; (8002f40 <HAL_GPIO_Init+0x254>)
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d019      	beq.n	8002f0a <HAL_GPIO_Init+0x21e>
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	4a1a      	ldr	r2, [pc, #104]	; (8002f44 <HAL_GPIO_Init+0x258>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d013      	beq.n	8002f06 <HAL_GPIO_Init+0x21a>
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	4a19      	ldr	r2, [pc, #100]	; (8002f48 <HAL_GPIO_Init+0x25c>)
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d00d      	beq.n	8002f02 <HAL_GPIO_Init+0x216>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	4a18      	ldr	r2, [pc, #96]	; (8002f4c <HAL_GPIO_Init+0x260>)
 8002eea:	4293      	cmp	r3, r2
 8002eec:	d007      	beq.n	8002efe <HAL_GPIO_Init+0x212>
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	4a17      	ldr	r2, [pc, #92]	; (8002f50 <HAL_GPIO_Init+0x264>)
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d101      	bne.n	8002efa <HAL_GPIO_Init+0x20e>
 8002ef6:	2309      	movs	r3, #9
 8002ef8:	e02d      	b.n	8002f56 <HAL_GPIO_Init+0x26a>
 8002efa:	230a      	movs	r3, #10
 8002efc:	e02b      	b.n	8002f56 <HAL_GPIO_Init+0x26a>
 8002efe:	2308      	movs	r3, #8
 8002f00:	e029      	b.n	8002f56 <HAL_GPIO_Init+0x26a>
 8002f02:	2307      	movs	r3, #7
 8002f04:	e027      	b.n	8002f56 <HAL_GPIO_Init+0x26a>
 8002f06:	2306      	movs	r3, #6
 8002f08:	e025      	b.n	8002f56 <HAL_GPIO_Init+0x26a>
 8002f0a:	2305      	movs	r3, #5
 8002f0c:	e023      	b.n	8002f56 <HAL_GPIO_Init+0x26a>
 8002f0e:	2304      	movs	r3, #4
 8002f10:	e021      	b.n	8002f56 <HAL_GPIO_Init+0x26a>
 8002f12:	2303      	movs	r3, #3
 8002f14:	e01f      	b.n	8002f56 <HAL_GPIO_Init+0x26a>
 8002f16:	2302      	movs	r3, #2
 8002f18:	e01d      	b.n	8002f56 <HAL_GPIO_Init+0x26a>
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	e01b      	b.n	8002f56 <HAL_GPIO_Init+0x26a>
 8002f1e:	bf00      	nop
 8002f20:	58000080 	.word	0x58000080
 8002f24:	58024400 	.word	0x58024400
 8002f28:	58000400 	.word	0x58000400
 8002f2c:	58020000 	.word	0x58020000
 8002f30:	58020400 	.word	0x58020400
 8002f34:	58020800 	.word	0x58020800
 8002f38:	58020c00 	.word	0x58020c00
 8002f3c:	58021000 	.word	0x58021000
 8002f40:	58021400 	.word	0x58021400
 8002f44:	58021800 	.word	0x58021800
 8002f48:	58021c00 	.word	0x58021c00
 8002f4c:	58022000 	.word	0x58022000
 8002f50:	58022400 	.word	0x58022400
 8002f54:	2300      	movs	r3, #0
 8002f56:	69fa      	ldr	r2, [r7, #28]
 8002f58:	f002 0203 	and.w	r2, r2, #3
 8002f5c:	0092      	lsls	r2, r2, #2
 8002f5e:	4093      	lsls	r3, r2
 8002f60:	69ba      	ldr	r2, [r7, #24]
 8002f62:	4313      	orrs	r3, r2
 8002f64:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002f66:	4938      	ldr	r1, [pc, #224]	; (8003048 <HAL_GPIO_Init+0x35c>)
 8002f68:	69fb      	ldr	r3, [r7, #28]
 8002f6a:	089b      	lsrs	r3, r3, #2
 8002f6c:	3302      	adds	r3, #2
 8002f6e:	69ba      	ldr	r2, [r7, #24]
 8002f70:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002f74:	697b      	ldr	r3, [r7, #20]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002f7a:	693b      	ldr	r3, [r7, #16]
 8002f7c:	43db      	mvns	r3, r3
 8002f7e:	69ba      	ldr	r2, [r7, #24]
 8002f80:	4013      	ands	r3, r2
 8002f82:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	685b      	ldr	r3, [r3, #4]
 8002f88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d003      	beq.n	8002f98 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002f90:	69ba      	ldr	r2, [r7, #24]
 8002f92:	693b      	ldr	r3, [r7, #16]
 8002f94:	4313      	orrs	r3, r2
 8002f96:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002f98:	697b      	ldr	r3, [r7, #20]
 8002f9a:	69ba      	ldr	r2, [r7, #24]
 8002f9c:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8002f9e:	697b      	ldr	r3, [r7, #20]
 8002fa0:	685b      	ldr	r3, [r3, #4]
 8002fa2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002fa4:	693b      	ldr	r3, [r7, #16]
 8002fa6:	43db      	mvns	r3, r3
 8002fa8:	69ba      	ldr	r2, [r7, #24]
 8002faa:	4013      	ands	r3, r2
 8002fac:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	685b      	ldr	r3, [r3, #4]
 8002fb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d003      	beq.n	8002fc2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002fba:	69ba      	ldr	r2, [r7, #24]
 8002fbc:	693b      	ldr	r3, [r7, #16]
 8002fbe:	4313      	orrs	r3, r2
 8002fc0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002fc2:	697b      	ldr	r3, [r7, #20]
 8002fc4:	69ba      	ldr	r2, [r7, #24]
 8002fc6:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002fc8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002fd0:	693b      	ldr	r3, [r7, #16]
 8002fd2:	43db      	mvns	r3, r3
 8002fd4:	69ba      	ldr	r2, [r7, #24]
 8002fd6:	4013      	ands	r3, r2
 8002fd8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	685b      	ldr	r3, [r3, #4]
 8002fde:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d003      	beq.n	8002fee <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8002fe6:	69ba      	ldr	r2, [r7, #24]
 8002fe8:	693b      	ldr	r3, [r7, #16]
 8002fea:	4313      	orrs	r3, r2
 8002fec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002fee:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002ff2:	69bb      	ldr	r3, [r7, #24]
 8002ff4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002ff6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ffa:	685b      	ldr	r3, [r3, #4]
 8002ffc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002ffe:	693b      	ldr	r3, [r7, #16]
 8003000:	43db      	mvns	r3, r3
 8003002:	69ba      	ldr	r2, [r7, #24]
 8003004:	4013      	ands	r3, r2
 8003006:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	685b      	ldr	r3, [r3, #4]
 800300c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003010:	2b00      	cmp	r3, #0
 8003012:	d003      	beq.n	800301c <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8003014:	69ba      	ldr	r2, [r7, #24]
 8003016:	693b      	ldr	r3, [r7, #16]
 8003018:	4313      	orrs	r3, r2
 800301a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800301c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003020:	69bb      	ldr	r3, [r7, #24]
 8003022:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8003024:	69fb      	ldr	r3, [r7, #28]
 8003026:	3301      	adds	r3, #1
 8003028:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	681a      	ldr	r2, [r3, #0]
 800302e:	69fb      	ldr	r3, [r7, #28]
 8003030:	fa22 f303 	lsr.w	r3, r2, r3
 8003034:	2b00      	cmp	r3, #0
 8003036:	f47f ae63 	bne.w	8002d00 <HAL_GPIO_Init+0x14>
  }
}
 800303a:	bf00      	nop
 800303c:	3724      	adds	r7, #36	; 0x24
 800303e:	46bd      	mov	sp, r7
 8003040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003044:	4770      	bx	lr
 8003046:	bf00      	nop
 8003048:	58000400 	.word	0x58000400

0800304c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800304c:	b480      	push	{r7}
 800304e:	b087      	sub	sp, #28
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
 8003054:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003056:	2300      	movs	r3, #0
 8003058:	617b      	str	r3, [r7, #20]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800305a:	4b75      	ldr	r3, [pc, #468]	; (8003230 <HAL_GPIO_DeInit+0x1e4>)
 800305c:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
 800305e:	e0d9      	b.n	8003214 <HAL_GPIO_DeInit+0x1c8>
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position) ;
 8003060:	2201      	movs	r2, #1
 8003062:	697b      	ldr	r3, [r7, #20]
 8003064:	fa02 f303 	lsl.w	r3, r2, r3
 8003068:	683a      	ldr	r2, [r7, #0]
 800306a:	4013      	ands	r3, r2
 800306c:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00U)
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	2b00      	cmp	r3, #0
 8003072:	f000 80cc 	beq.w	800320e <HAL_GPIO_DeInit+0x1c2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
 8003076:	4a6f      	ldr	r2, [pc, #444]	; (8003234 <HAL_GPIO_DeInit+0x1e8>)
 8003078:	697b      	ldr	r3, [r7, #20]
 800307a:	089b      	lsrs	r3, r3, #2
 800307c:	3302      	adds	r3, #2
 800307e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003082:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 8003084:	697b      	ldr	r3, [r7, #20]
 8003086:	f003 0303 	and.w	r3, r3, #3
 800308a:	009b      	lsls	r3, r3, #2
 800308c:	220f      	movs	r2, #15
 800308e:	fa02 f303 	lsl.w	r3, r2, r3
 8003092:	68ba      	ldr	r2, [r7, #8]
 8003094:	4013      	ands	r3, r2
 8003096:	60bb      	str	r3, [r7, #8]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	4a67      	ldr	r2, [pc, #412]	; (8003238 <HAL_GPIO_DeInit+0x1ec>)
 800309c:	4293      	cmp	r3, r2
 800309e:	d037      	beq.n	8003110 <HAL_GPIO_DeInit+0xc4>
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	4a66      	ldr	r2, [pc, #408]	; (800323c <HAL_GPIO_DeInit+0x1f0>)
 80030a4:	4293      	cmp	r3, r2
 80030a6:	d031      	beq.n	800310c <HAL_GPIO_DeInit+0xc0>
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	4a65      	ldr	r2, [pc, #404]	; (8003240 <HAL_GPIO_DeInit+0x1f4>)
 80030ac:	4293      	cmp	r3, r2
 80030ae:	d02b      	beq.n	8003108 <HAL_GPIO_DeInit+0xbc>
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	4a64      	ldr	r2, [pc, #400]	; (8003244 <HAL_GPIO_DeInit+0x1f8>)
 80030b4:	4293      	cmp	r3, r2
 80030b6:	d025      	beq.n	8003104 <HAL_GPIO_DeInit+0xb8>
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	4a63      	ldr	r2, [pc, #396]	; (8003248 <HAL_GPIO_DeInit+0x1fc>)
 80030bc:	4293      	cmp	r3, r2
 80030be:	d01f      	beq.n	8003100 <HAL_GPIO_DeInit+0xb4>
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	4a62      	ldr	r2, [pc, #392]	; (800324c <HAL_GPIO_DeInit+0x200>)
 80030c4:	4293      	cmp	r3, r2
 80030c6:	d019      	beq.n	80030fc <HAL_GPIO_DeInit+0xb0>
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	4a61      	ldr	r2, [pc, #388]	; (8003250 <HAL_GPIO_DeInit+0x204>)
 80030cc:	4293      	cmp	r3, r2
 80030ce:	d013      	beq.n	80030f8 <HAL_GPIO_DeInit+0xac>
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	4a60      	ldr	r2, [pc, #384]	; (8003254 <HAL_GPIO_DeInit+0x208>)
 80030d4:	4293      	cmp	r3, r2
 80030d6:	d00d      	beq.n	80030f4 <HAL_GPIO_DeInit+0xa8>
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	4a5f      	ldr	r2, [pc, #380]	; (8003258 <HAL_GPIO_DeInit+0x20c>)
 80030dc:	4293      	cmp	r3, r2
 80030de:	d007      	beq.n	80030f0 <HAL_GPIO_DeInit+0xa4>
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	4a5e      	ldr	r2, [pc, #376]	; (800325c <HAL_GPIO_DeInit+0x210>)
 80030e4:	4293      	cmp	r3, r2
 80030e6:	d101      	bne.n	80030ec <HAL_GPIO_DeInit+0xa0>
 80030e8:	2309      	movs	r3, #9
 80030ea:	e012      	b.n	8003112 <HAL_GPIO_DeInit+0xc6>
 80030ec:	230a      	movs	r3, #10
 80030ee:	e010      	b.n	8003112 <HAL_GPIO_DeInit+0xc6>
 80030f0:	2308      	movs	r3, #8
 80030f2:	e00e      	b.n	8003112 <HAL_GPIO_DeInit+0xc6>
 80030f4:	2307      	movs	r3, #7
 80030f6:	e00c      	b.n	8003112 <HAL_GPIO_DeInit+0xc6>
 80030f8:	2306      	movs	r3, #6
 80030fa:	e00a      	b.n	8003112 <HAL_GPIO_DeInit+0xc6>
 80030fc:	2305      	movs	r3, #5
 80030fe:	e008      	b.n	8003112 <HAL_GPIO_DeInit+0xc6>
 8003100:	2304      	movs	r3, #4
 8003102:	e006      	b.n	8003112 <HAL_GPIO_DeInit+0xc6>
 8003104:	2303      	movs	r3, #3
 8003106:	e004      	b.n	8003112 <HAL_GPIO_DeInit+0xc6>
 8003108:	2302      	movs	r3, #2
 800310a:	e002      	b.n	8003112 <HAL_GPIO_DeInit+0xc6>
 800310c:	2301      	movs	r3, #1
 800310e:	e000      	b.n	8003112 <HAL_GPIO_DeInit+0xc6>
 8003110:	2300      	movs	r3, #0
 8003112:	697a      	ldr	r2, [r7, #20]
 8003114:	f002 0203 	and.w	r2, r2, #3
 8003118:	0092      	lsls	r2, r2, #2
 800311a:	4093      	lsls	r3, r2
 800311c:	68ba      	ldr	r2, [r7, #8]
 800311e:	429a      	cmp	r2, r3
 8003120:	d136      	bne.n	8003190 <HAL_GPIO_DeInit+0x144>
      {
        tmp = 0x0FUL << (4U * (position & 0x03U));
 8003122:	697b      	ldr	r3, [r7, #20]
 8003124:	f003 0303 	and.w	r3, r3, #3
 8003128:	009b      	lsls	r3, r3, #2
 800312a:	220f      	movs	r2, #15
 800312c:	fa02 f303 	lsl.w	r3, r2, r3
 8003130:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8003132:	4a40      	ldr	r2, [pc, #256]	; (8003234 <HAL_GPIO_DeInit+0x1e8>)
 8003134:	697b      	ldr	r3, [r7, #20]
 8003136:	089b      	lsrs	r3, r3, #2
 8003138:	3302      	adds	r3, #2
 800313a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800313e:	68bb      	ldr	r3, [r7, #8]
 8003140:	43da      	mvns	r2, r3
 8003142:	483c      	ldr	r0, [pc, #240]	; (8003234 <HAL_GPIO_DeInit+0x1e8>)
 8003144:	697b      	ldr	r3, [r7, #20]
 8003146:	089b      	lsrs	r3, r3, #2
 8003148:	400a      	ands	r2, r1
 800314a:	3302      	adds	r3, #2
 800314c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]

        /* Clear EXTI line configuration for Current CPU */
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 8003150:	693b      	ldr	r3, [r7, #16]
 8003152:	681a      	ldr	r2, [r3, #0]
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	43db      	mvns	r3, r3
 8003158:	401a      	ands	r2, r3
 800315a:	693b      	ldr	r3, [r7, #16]
 800315c:	601a      	str	r2, [r3, #0]
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 800315e:	693b      	ldr	r3, [r7, #16]
 8003160:	685a      	ldr	r2, [r3, #4]
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	43db      	mvns	r3, r3
 8003166:	401a      	ands	r2, r3
 8003168:	693b      	ldr	r3, [r7, #16]
 800316a:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 800316c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003170:	681a      	ldr	r2, [r3, #0]
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	43db      	mvns	r3, r3
 8003176:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800317a:	4013      	ands	r3, r2
 800317c:	600b      	str	r3, [r1, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 800317e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003182:	685a      	ldr	r2, [r3, #4]
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	43db      	mvns	r3, r3
 8003188:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800318c:	4013      	ands	r3, r2
 800318e:	604b      	str	r3, [r1, #4]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681a      	ldr	r2, [r3, #0]
 8003194:	697b      	ldr	r3, [r7, #20]
 8003196:	005b      	lsls	r3, r3, #1
 8003198:	2103      	movs	r1, #3
 800319a:	fa01 f303 	lsl.w	r3, r1, r3
 800319e:	431a      	orrs	r2, r3
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 80031a4:	697b      	ldr	r3, [r7, #20]
 80031a6:	08da      	lsrs	r2, r3, #3
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	3208      	adds	r2, #8
 80031ac:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80031b0:	697b      	ldr	r3, [r7, #20]
 80031b2:	f003 0307 	and.w	r3, r3, #7
 80031b6:	009b      	lsls	r3, r3, #2
 80031b8:	220f      	movs	r2, #15
 80031ba:	fa02 f303 	lsl.w	r3, r2, r3
 80031be:	43db      	mvns	r3, r3
 80031c0:	697a      	ldr	r2, [r7, #20]
 80031c2:	08d2      	lsrs	r2, r2, #3
 80031c4:	4019      	ands	r1, r3
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	3208      	adds	r2, #8
 80031ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	689a      	ldr	r2, [r3, #8]
 80031d2:	697b      	ldr	r3, [r7, #20]
 80031d4:	005b      	lsls	r3, r3, #1
 80031d6:	2103      	movs	r1, #3
 80031d8:	fa01 f303 	lsl.w	r3, r1, r3
 80031dc:	43db      	mvns	r3, r3
 80031de:	401a      	ands	r2, r3
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	685a      	ldr	r2, [r3, #4]
 80031e8:	2101      	movs	r1, #1
 80031ea:	697b      	ldr	r3, [r7, #20]
 80031ec:	fa01 f303 	lsl.w	r3, r1, r3
 80031f0:	43db      	mvns	r3, r3
 80031f2:	401a      	ands	r2, r3
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	68da      	ldr	r2, [r3, #12]
 80031fc:	697b      	ldr	r3, [r7, #20]
 80031fe:	005b      	lsls	r3, r3, #1
 8003200:	2103      	movs	r1, #3
 8003202:	fa01 f303 	lsl.w	r3, r1, r3
 8003206:	43db      	mvns	r3, r3
 8003208:	401a      	ands	r2, r3
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	60da      	str	r2, [r3, #12]
    }

    position++;
 800320e:	697b      	ldr	r3, [r7, #20]
 8003210:	3301      	adds	r3, #1
 8003212:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00U)
 8003214:	683a      	ldr	r2, [r7, #0]
 8003216:	697b      	ldr	r3, [r7, #20]
 8003218:	fa22 f303 	lsr.w	r3, r2, r3
 800321c:	2b00      	cmp	r3, #0
 800321e:	f47f af1f 	bne.w	8003060 <HAL_GPIO_DeInit+0x14>
  }
}
 8003222:	bf00      	nop
 8003224:	371c      	adds	r7, #28
 8003226:	46bd      	mov	sp, r7
 8003228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322c:	4770      	bx	lr
 800322e:	bf00      	nop
 8003230:	58000080 	.word	0x58000080
 8003234:	58000400 	.word	0x58000400
 8003238:	58020000 	.word	0x58020000
 800323c:	58020400 	.word	0x58020400
 8003240:	58020800 	.word	0x58020800
 8003244:	58020c00 	.word	0x58020c00
 8003248:	58021000 	.word	0x58021000
 800324c:	58021400 	.word	0x58021400
 8003250:	58021800 	.word	0x58021800
 8003254:	58021c00 	.word	0x58021c00
 8003258:	58022000 	.word	0x58022000
 800325c:	58022400 	.word	0x58022400

08003260 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003260:	b480      	push	{r7}
 8003262:	b083      	sub	sp, #12
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
 8003268:	460b      	mov	r3, r1
 800326a:	807b      	strh	r3, [r7, #2]
 800326c:	4613      	mov	r3, r2
 800326e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003270:	787b      	ldrb	r3, [r7, #1]
 8003272:	2b00      	cmp	r3, #0
 8003274:	d003      	beq.n	800327e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003276:	887a      	ldrh	r2, [r7, #2]
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800327c:	e003      	b.n	8003286 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800327e:	887b      	ldrh	r3, [r7, #2]
 8003280:	041a      	lsls	r2, r3, #16
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	619a      	str	r2, [r3, #24]
}
 8003286:	bf00      	nop
 8003288:	370c      	adds	r7, #12
 800328a:	46bd      	mov	sp, r7
 800328c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003290:	4770      	bx	lr
	...

08003294 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b082      	sub	sp, #8
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d101      	bne.n	80032a6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80032a2:	2301      	movs	r3, #1
 80032a4:	e07f      	b.n	80033a6 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80032ac:	b2db      	uxtb	r3, r3
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d106      	bne.n	80032c0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	2200      	movs	r2, #0
 80032b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80032ba:	6878      	ldr	r0, [r7, #4]
 80032bc:	f7fe fbac 	bl	8001a18 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2224      	movs	r2, #36	; 0x24
 80032c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	681a      	ldr	r2, [r3, #0]
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f022 0201 	bic.w	r2, r2, #1
 80032d6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	685a      	ldr	r2, [r3, #4]
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80032e4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	689a      	ldr	r2, [r3, #8]
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80032f4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	68db      	ldr	r3, [r3, #12]
 80032fa:	2b01      	cmp	r3, #1
 80032fc:	d107      	bne.n	800330e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	689a      	ldr	r2, [r3, #8]
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800330a:	609a      	str	r2, [r3, #8]
 800330c:	e006      	b.n	800331c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	689a      	ldr	r2, [r3, #8]
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800331a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	68db      	ldr	r3, [r3, #12]
 8003320:	2b02      	cmp	r3, #2
 8003322:	d104      	bne.n	800332e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800332c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	6859      	ldr	r1, [r3, #4]
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681a      	ldr	r2, [r3, #0]
 8003338:	4b1d      	ldr	r3, [pc, #116]	; (80033b0 <HAL_I2C_Init+0x11c>)
 800333a:	430b      	orrs	r3, r1
 800333c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	68da      	ldr	r2, [r3, #12]
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800334c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	691a      	ldr	r2, [r3, #16]
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	695b      	ldr	r3, [r3, #20]
 8003356:	ea42 0103 	orr.w	r1, r2, r3
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	699b      	ldr	r3, [r3, #24]
 800335e:	021a      	lsls	r2, r3, #8
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	430a      	orrs	r2, r1
 8003366:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	69d9      	ldr	r1, [r3, #28]
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6a1a      	ldr	r2, [r3, #32]
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	430a      	orrs	r2, r1
 8003376:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	681a      	ldr	r2, [r3, #0]
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f042 0201 	orr.w	r2, r2, #1
 8003386:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2200      	movs	r2, #0
 800338c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	2220      	movs	r2, #32
 8003392:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	2200      	movs	r2, #0
 800339a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2200      	movs	r2, #0
 80033a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80033a4:	2300      	movs	r3, #0
}
 80033a6:	4618      	mov	r0, r3
 80033a8:	3708      	adds	r7, #8
 80033aa:	46bd      	mov	sp, r7
 80033ac:	bd80      	pop	{r7, pc}
 80033ae:	bf00      	nop
 80033b0:	02008000 	.word	0x02008000

080033b4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b088      	sub	sp, #32
 80033b8:	af02      	add	r7, sp, #8
 80033ba:	60f8      	str	r0, [r7, #12]
 80033bc:	607a      	str	r2, [r7, #4]
 80033be:	461a      	mov	r2, r3
 80033c0:	460b      	mov	r3, r1
 80033c2:	817b      	strh	r3, [r7, #10]
 80033c4:	4613      	mov	r3, r2
 80033c6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80033ce:	b2db      	uxtb	r3, r3
 80033d0:	2b20      	cmp	r3, #32
 80033d2:	f040 80da 	bne.w	800358a <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80033dc:	2b01      	cmp	r3, #1
 80033de:	d101      	bne.n	80033e4 <HAL_I2C_Master_Transmit+0x30>
 80033e0:	2302      	movs	r3, #2
 80033e2:	e0d3      	b.n	800358c <HAL_I2C_Master_Transmit+0x1d8>
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	2201      	movs	r2, #1
 80033e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80033ec:	f7ff f96e 	bl	80026cc <HAL_GetTick>
 80033f0:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80033f2:	697b      	ldr	r3, [r7, #20]
 80033f4:	9300      	str	r3, [sp, #0]
 80033f6:	2319      	movs	r3, #25
 80033f8:	2201      	movs	r2, #1
 80033fa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80033fe:	68f8      	ldr	r0, [r7, #12]
 8003400:	f001 fc12 	bl	8004c28 <I2C_WaitOnFlagUntilTimeout>
 8003404:	4603      	mov	r3, r0
 8003406:	2b00      	cmp	r3, #0
 8003408:	d001      	beq.n	800340e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800340a:	2301      	movs	r3, #1
 800340c:	e0be      	b.n	800358c <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	2221      	movs	r2, #33	; 0x21
 8003412:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	2210      	movs	r2, #16
 800341a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	2200      	movs	r2, #0
 8003422:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	687a      	ldr	r2, [r7, #4]
 8003428:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	893a      	ldrh	r2, [r7, #8]
 800342e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	2200      	movs	r2, #0
 8003434:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800343a:	b29b      	uxth	r3, r3
 800343c:	2bff      	cmp	r3, #255	; 0xff
 800343e:	d90e      	bls.n	800345e <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	22ff      	movs	r2, #255	; 0xff
 8003444:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800344a:	b2da      	uxtb	r2, r3
 800344c:	8979      	ldrh	r1, [r7, #10]
 800344e:	4b51      	ldr	r3, [pc, #324]	; (8003594 <HAL_I2C_Master_Transmit+0x1e0>)
 8003450:	9300      	str	r3, [sp, #0]
 8003452:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003456:	68f8      	ldr	r0, [r7, #12]
 8003458:	f001 fd74 	bl	8004f44 <I2C_TransferConfig>
 800345c:	e06c      	b.n	8003538 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003462:	b29a      	uxth	r2, r3
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800346c:	b2da      	uxtb	r2, r3
 800346e:	8979      	ldrh	r1, [r7, #10]
 8003470:	4b48      	ldr	r3, [pc, #288]	; (8003594 <HAL_I2C_Master_Transmit+0x1e0>)
 8003472:	9300      	str	r3, [sp, #0]
 8003474:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003478:	68f8      	ldr	r0, [r7, #12]
 800347a:	f001 fd63 	bl	8004f44 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 800347e:	e05b      	b.n	8003538 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003480:	697a      	ldr	r2, [r7, #20]
 8003482:	6a39      	ldr	r1, [r7, #32]
 8003484:	68f8      	ldr	r0, [r7, #12]
 8003486:	f001 fc0f 	bl	8004ca8 <I2C_WaitOnTXISFlagUntilTimeout>
 800348a:	4603      	mov	r3, r0
 800348c:	2b00      	cmp	r3, #0
 800348e:	d001      	beq.n	8003494 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8003490:	2301      	movs	r3, #1
 8003492:	e07b      	b.n	800358c <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003498:	781a      	ldrb	r2, [r3, #0]
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034a4:	1c5a      	adds	r2, r3, #1
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034ae:	b29b      	uxth	r3, r3
 80034b0:	3b01      	subs	r3, #1
 80034b2:	b29a      	uxth	r2, r3
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034bc:	3b01      	subs	r3, #1
 80034be:	b29a      	uxth	r2, r3
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034c8:	b29b      	uxth	r3, r3
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d034      	beq.n	8003538 <HAL_I2C_Master_Transmit+0x184>
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d130      	bne.n	8003538 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80034d6:	697b      	ldr	r3, [r7, #20]
 80034d8:	9300      	str	r3, [sp, #0]
 80034da:	6a3b      	ldr	r3, [r7, #32]
 80034dc:	2200      	movs	r2, #0
 80034de:	2180      	movs	r1, #128	; 0x80
 80034e0:	68f8      	ldr	r0, [r7, #12]
 80034e2:	f001 fba1 	bl	8004c28 <I2C_WaitOnFlagUntilTimeout>
 80034e6:	4603      	mov	r3, r0
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d001      	beq.n	80034f0 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80034ec:	2301      	movs	r3, #1
 80034ee:	e04d      	b.n	800358c <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034f4:	b29b      	uxth	r3, r3
 80034f6:	2bff      	cmp	r3, #255	; 0xff
 80034f8:	d90e      	bls.n	8003518 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	22ff      	movs	r2, #255	; 0xff
 80034fe:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003504:	b2da      	uxtb	r2, r3
 8003506:	8979      	ldrh	r1, [r7, #10]
 8003508:	2300      	movs	r3, #0
 800350a:	9300      	str	r3, [sp, #0]
 800350c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003510:	68f8      	ldr	r0, [r7, #12]
 8003512:	f001 fd17 	bl	8004f44 <I2C_TransferConfig>
 8003516:	e00f      	b.n	8003538 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800351c:	b29a      	uxth	r2, r3
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003526:	b2da      	uxtb	r2, r3
 8003528:	8979      	ldrh	r1, [r7, #10]
 800352a:	2300      	movs	r3, #0
 800352c:	9300      	str	r3, [sp, #0]
 800352e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003532:	68f8      	ldr	r0, [r7, #12]
 8003534:	f001 fd06 	bl	8004f44 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800353c:	b29b      	uxth	r3, r3
 800353e:	2b00      	cmp	r3, #0
 8003540:	d19e      	bne.n	8003480 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003542:	697a      	ldr	r2, [r7, #20]
 8003544:	6a39      	ldr	r1, [r7, #32]
 8003546:	68f8      	ldr	r0, [r7, #12]
 8003548:	f001 fbee 	bl	8004d28 <I2C_WaitOnSTOPFlagUntilTimeout>
 800354c:	4603      	mov	r3, r0
 800354e:	2b00      	cmp	r3, #0
 8003550:	d001      	beq.n	8003556 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8003552:	2301      	movs	r3, #1
 8003554:	e01a      	b.n	800358c <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	2220      	movs	r2, #32
 800355c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	6859      	ldr	r1, [r3, #4]
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	681a      	ldr	r2, [r3, #0]
 8003568:	4b0b      	ldr	r3, [pc, #44]	; (8003598 <HAL_I2C_Master_Transmit+0x1e4>)
 800356a:	400b      	ands	r3, r1
 800356c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	2220      	movs	r2, #32
 8003572:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	2200      	movs	r2, #0
 800357a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	2200      	movs	r2, #0
 8003582:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003586:	2300      	movs	r3, #0
 8003588:	e000      	b.n	800358c <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800358a:	2302      	movs	r3, #2
  }
}
 800358c:	4618      	mov	r0, r3
 800358e:	3718      	adds	r7, #24
 8003590:	46bd      	mov	sp, r7
 8003592:	bd80      	pop	{r7, pc}
 8003594:	80002000 	.word	0x80002000
 8003598:	fe00e800 	.word	0xfe00e800

0800359c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	b088      	sub	sp, #32
 80035a0:	af02      	add	r7, sp, #8
 80035a2:	60f8      	str	r0, [r7, #12]
 80035a4:	607a      	str	r2, [r7, #4]
 80035a6:	461a      	mov	r2, r3
 80035a8:	460b      	mov	r3, r1
 80035aa:	817b      	strh	r3, [r7, #10]
 80035ac:	4613      	mov	r3, r2
 80035ae:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80035b6:	b2db      	uxtb	r3, r3
 80035b8:	2b20      	cmp	r3, #32
 80035ba:	f040 80db 	bne.w	8003774 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80035c4:	2b01      	cmp	r3, #1
 80035c6:	d101      	bne.n	80035cc <HAL_I2C_Master_Receive+0x30>
 80035c8:	2302      	movs	r3, #2
 80035ca:	e0d4      	b.n	8003776 <HAL_I2C_Master_Receive+0x1da>
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	2201      	movs	r2, #1
 80035d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80035d4:	f7ff f87a 	bl	80026cc <HAL_GetTick>
 80035d8:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80035da:	697b      	ldr	r3, [r7, #20]
 80035dc:	9300      	str	r3, [sp, #0]
 80035de:	2319      	movs	r3, #25
 80035e0:	2201      	movs	r2, #1
 80035e2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80035e6:	68f8      	ldr	r0, [r7, #12]
 80035e8:	f001 fb1e 	bl	8004c28 <I2C_WaitOnFlagUntilTimeout>
 80035ec:	4603      	mov	r3, r0
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d001      	beq.n	80035f6 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 80035f2:	2301      	movs	r3, #1
 80035f4:	e0bf      	b.n	8003776 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	2222      	movs	r2, #34	; 0x22
 80035fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	2210      	movs	r2, #16
 8003602:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	2200      	movs	r2, #0
 800360a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	687a      	ldr	r2, [r7, #4]
 8003610:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	893a      	ldrh	r2, [r7, #8]
 8003616:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	2200      	movs	r2, #0
 800361c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003622:	b29b      	uxth	r3, r3
 8003624:	2bff      	cmp	r3, #255	; 0xff
 8003626:	d90e      	bls.n	8003646 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	22ff      	movs	r2, #255	; 0xff
 800362c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003632:	b2da      	uxtb	r2, r3
 8003634:	8979      	ldrh	r1, [r7, #10]
 8003636:	4b52      	ldr	r3, [pc, #328]	; (8003780 <HAL_I2C_Master_Receive+0x1e4>)
 8003638:	9300      	str	r3, [sp, #0]
 800363a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800363e:	68f8      	ldr	r0, [r7, #12]
 8003640:	f001 fc80 	bl	8004f44 <I2C_TransferConfig>
 8003644:	e06d      	b.n	8003722 <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800364a:	b29a      	uxth	r2, r3
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003654:	b2da      	uxtb	r2, r3
 8003656:	8979      	ldrh	r1, [r7, #10]
 8003658:	4b49      	ldr	r3, [pc, #292]	; (8003780 <HAL_I2C_Master_Receive+0x1e4>)
 800365a:	9300      	str	r3, [sp, #0]
 800365c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003660:	68f8      	ldr	r0, [r7, #12]
 8003662:	f001 fc6f 	bl	8004f44 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8003666:	e05c      	b.n	8003722 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003668:	697a      	ldr	r2, [r7, #20]
 800366a:	6a39      	ldr	r1, [r7, #32]
 800366c:	68f8      	ldr	r0, [r7, #12]
 800366e:	f001 fb97 	bl	8004da0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003672:	4603      	mov	r3, r0
 8003674:	2b00      	cmp	r3, #0
 8003676:	d001      	beq.n	800367c <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8003678:	2301      	movs	r3, #1
 800367a:	e07c      	b.n	8003776 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003686:	b2d2      	uxtb	r2, r2
 8003688:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800368e:	1c5a      	adds	r2, r3, #1
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003698:	3b01      	subs	r3, #1
 800369a:	b29a      	uxth	r2, r3
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036a4:	b29b      	uxth	r3, r3
 80036a6:	3b01      	subs	r3, #1
 80036a8:	b29a      	uxth	r2, r3
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036b2:	b29b      	uxth	r3, r3
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d034      	beq.n	8003722 <HAL_I2C_Master_Receive+0x186>
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d130      	bne.n	8003722 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80036c0:	697b      	ldr	r3, [r7, #20]
 80036c2:	9300      	str	r3, [sp, #0]
 80036c4:	6a3b      	ldr	r3, [r7, #32]
 80036c6:	2200      	movs	r2, #0
 80036c8:	2180      	movs	r1, #128	; 0x80
 80036ca:	68f8      	ldr	r0, [r7, #12]
 80036cc:	f001 faac 	bl	8004c28 <I2C_WaitOnFlagUntilTimeout>
 80036d0:	4603      	mov	r3, r0
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d001      	beq.n	80036da <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 80036d6:	2301      	movs	r3, #1
 80036d8:	e04d      	b.n	8003776 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036de:	b29b      	uxth	r3, r3
 80036e0:	2bff      	cmp	r3, #255	; 0xff
 80036e2:	d90e      	bls.n	8003702 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	22ff      	movs	r2, #255	; 0xff
 80036e8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036ee:	b2da      	uxtb	r2, r3
 80036f0:	8979      	ldrh	r1, [r7, #10]
 80036f2:	2300      	movs	r3, #0
 80036f4:	9300      	str	r3, [sp, #0]
 80036f6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80036fa:	68f8      	ldr	r0, [r7, #12]
 80036fc:	f001 fc22 	bl	8004f44 <I2C_TransferConfig>
 8003700:	e00f      	b.n	8003722 <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003706:	b29a      	uxth	r2, r3
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003710:	b2da      	uxtb	r2, r3
 8003712:	8979      	ldrh	r1, [r7, #10]
 8003714:	2300      	movs	r3, #0
 8003716:	9300      	str	r3, [sp, #0]
 8003718:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800371c:	68f8      	ldr	r0, [r7, #12]
 800371e:	f001 fc11 	bl	8004f44 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003726:	b29b      	uxth	r3, r3
 8003728:	2b00      	cmp	r3, #0
 800372a:	d19d      	bne.n	8003668 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800372c:	697a      	ldr	r2, [r7, #20]
 800372e:	6a39      	ldr	r1, [r7, #32]
 8003730:	68f8      	ldr	r0, [r7, #12]
 8003732:	f001 faf9 	bl	8004d28 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003736:	4603      	mov	r3, r0
 8003738:	2b00      	cmp	r3, #0
 800373a:	d001      	beq.n	8003740 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 800373c:	2301      	movs	r3, #1
 800373e:	e01a      	b.n	8003776 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	2220      	movs	r2, #32
 8003746:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	6859      	ldr	r1, [r3, #4]
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	681a      	ldr	r2, [r3, #0]
 8003752:	4b0c      	ldr	r3, [pc, #48]	; (8003784 <HAL_I2C_Master_Receive+0x1e8>)
 8003754:	400b      	ands	r3, r1
 8003756:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	2220      	movs	r2, #32
 800375c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	2200      	movs	r2, #0
 8003764:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	2200      	movs	r2, #0
 800376c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003770:	2300      	movs	r3, #0
 8003772:	e000      	b.n	8003776 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8003774:	2302      	movs	r3, #2
  }
}
 8003776:	4618      	mov	r0, r3
 8003778:	3718      	adds	r7, #24
 800377a:	46bd      	mov	sp, r7
 800377c:	bd80      	pop	{r7, pc}
 800377e:	bf00      	nop
 8003780:	80002400 	.word	0x80002400
 8003784:	fe00e800 	.word	0xfe00e800

08003788 <HAL_I2C_Slave_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Transmit(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	b088      	sub	sp, #32
 800378c:	af02      	add	r7, sp, #8
 800378e:	60f8      	str	r0, [r7, #12]
 8003790:	60b9      	str	r1, [r7, #8]
 8003792:	603b      	str	r3, [r7, #0]
 8003794:	4613      	mov	r3, r2
 8003796:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800379e:	b2db      	uxtb	r3, r3
 80037a0:	2b20      	cmp	r3, #32
 80037a2:	f040 80f5 	bne.w	8003990 <HAL_I2C_Slave_Transmit+0x208>
  {
    if ((pData == NULL) || (Size == 0U))
 80037a6:	68bb      	ldr	r3, [r7, #8]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d002      	beq.n	80037b2 <HAL_I2C_Slave_Transmit+0x2a>
 80037ac:	88fb      	ldrh	r3, [r7, #6]
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d105      	bne.n	80037be <HAL_I2C_Slave_Transmit+0x36>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80037b8:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80037ba:	2301      	movs	r3, #1
 80037bc:	e0e9      	b.n	8003992 <HAL_I2C_Slave_Transmit+0x20a>
    }
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80037c4:	2b01      	cmp	r3, #1
 80037c6:	d101      	bne.n	80037cc <HAL_I2C_Slave_Transmit+0x44>
 80037c8:	2302      	movs	r3, #2
 80037ca:	e0e2      	b.n	8003992 <HAL_I2C_Slave_Transmit+0x20a>
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	2201      	movs	r2, #1
 80037d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80037d4:	f7fe ff7a 	bl	80026cc <HAL_GetTick>
 80037d8:	6178      	str	r0, [r7, #20]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	2221      	movs	r2, #33	; 0x21
 80037de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	2220      	movs	r2, #32
 80037e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	2200      	movs	r2, #0
 80037ee:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	68ba      	ldr	r2, [r7, #8]
 80037f4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	88fa      	ldrh	r2, [r7, #6]
 80037fa:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	2200      	movs	r2, #0
 8003800:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable Address Acknowledge */
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	685a      	ldr	r2, [r3, #4]
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003810:	605a      	str	r2, [r3, #4]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, RESET, Timeout, tickstart) != HAL_OK)
 8003812:	697b      	ldr	r3, [r7, #20]
 8003814:	9300      	str	r3, [sp, #0]
 8003816:	683b      	ldr	r3, [r7, #0]
 8003818:	2200      	movs	r2, #0
 800381a:	2108      	movs	r1, #8
 800381c:	68f8      	ldr	r0, [r7, #12]
 800381e:	f001 fa03 	bl	8004c28 <I2C_WaitOnFlagUntilTimeout>
 8003822:	4603      	mov	r3, r0
 8003824:	2b00      	cmp	r3, #0
 8003826:	d009      	beq.n	800383c <HAL_I2C_Slave_Transmit+0xb4>
    {
      /* Disable Address Acknowledge */
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	685a      	ldr	r2, [r3, #4]
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003836:	605a      	str	r2, [r3, #4]
      return HAL_ERROR;
 8003838:	2301      	movs	r3, #1
 800383a:	e0aa      	b.n	8003992 <HAL_I2C_Slave_Transmit+0x20a>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	2208      	movs	r2, #8
 8003842:	61da      	str	r2, [r3, #28]

    /* If 10bit addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	68db      	ldr	r3, [r3, #12]
 8003848:	2b02      	cmp	r3, #2
 800384a:	d118      	bne.n	800387e <HAL_I2C_Slave_Transmit+0xf6>
    {
      /* Wait until ADDR flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, RESET, Timeout, tickstart) != HAL_OK)
 800384c:	697b      	ldr	r3, [r7, #20]
 800384e:	9300      	str	r3, [sp, #0]
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	2200      	movs	r2, #0
 8003854:	2108      	movs	r1, #8
 8003856:	68f8      	ldr	r0, [r7, #12]
 8003858:	f001 f9e6 	bl	8004c28 <I2C_WaitOnFlagUntilTimeout>
 800385c:	4603      	mov	r3, r0
 800385e:	2b00      	cmp	r3, #0
 8003860:	d009      	beq.n	8003876 <HAL_I2C_Slave_Transmit+0xee>
      {
        /* Disable Address Acknowledge */
        hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	685a      	ldr	r2, [r3, #4]
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003870:	605a      	str	r2, [r3, #4]
        return HAL_ERROR;
 8003872:	2301      	movs	r3, #1
 8003874:	e08d      	b.n	8003992 <HAL_I2C_Slave_Transmit+0x20a>
      }

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	2208      	movs	r2, #8
 800387c:	61da      	str	r2, [r3, #28]
    }

    /* Wait until DIR flag is set Transmitter mode */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_DIR, RESET, Timeout, tickstart) != HAL_OK)
 800387e:	697b      	ldr	r3, [r7, #20]
 8003880:	9300      	str	r3, [sp, #0]
 8003882:	683b      	ldr	r3, [r7, #0]
 8003884:	2200      	movs	r2, #0
 8003886:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 800388a:	68f8      	ldr	r0, [r7, #12]
 800388c:	f001 f9cc 	bl	8004c28 <I2C_WaitOnFlagUntilTimeout>
 8003890:	4603      	mov	r3, r0
 8003892:	2b00      	cmp	r3, #0
 8003894:	d02d      	beq.n	80038f2 <HAL_I2C_Slave_Transmit+0x16a>
    {
      /* Disable Address Acknowledge */
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	685a      	ldr	r2, [r3, #4]
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80038a4:	605a      	str	r2, [r3, #4]
      return HAL_ERROR;
 80038a6:	2301      	movs	r3, #1
 80038a8:	e073      	b.n	8003992 <HAL_I2C_Slave_Transmit+0x20a>
    }

    while (hi2c->XferCount > 0U)
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80038aa:	697a      	ldr	r2, [r7, #20]
 80038ac:	6839      	ldr	r1, [r7, #0]
 80038ae:	68f8      	ldr	r0, [r7, #12]
 80038b0:	f001 f9fa 	bl	8004ca8 <I2C_WaitOnTXISFlagUntilTimeout>
 80038b4:	4603      	mov	r3, r0
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d009      	beq.n	80038ce <HAL_I2C_Slave_Transmit+0x146>
      {
        /* Disable Address Acknowledge */
        hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	685a      	ldr	r2, [r3, #4]
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80038c8:	605a      	str	r2, [r3, #4]
        return HAL_ERROR;
 80038ca:	2301      	movs	r3, #1
 80038cc:	e061      	b.n	8003992 <HAL_I2C_Slave_Transmit+0x20a>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038d2:	781a      	ldrb	r2, [r3, #0]
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038de:	1c5a      	adds	r2, r3, #1
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038e8:	b29b      	uxth	r3, r3
 80038ea:	3b01      	subs	r3, #1
 80038ec:	b29a      	uxth	r2, r3
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferCount > 0U)
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038f6:	b29b      	uxth	r3, r3
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d1d6      	bne.n	80038aa <HAL_I2C_Slave_Transmit+0x122>
    }

    /* Wait until STOP flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80038fc:	697a      	ldr	r2, [r7, #20]
 80038fe:	6839      	ldr	r1, [r7, #0]
 8003900:	68f8      	ldr	r0, [r7, #12]
 8003902:	f001 fa11 	bl	8004d28 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003906:	4603      	mov	r3, r0
 8003908:	2b00      	cmp	r3, #0
 800390a:	d011      	beq.n	8003930 <HAL_I2C_Slave_Transmit+0x1a8>
    {
      /* Disable Address Acknowledge */
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	685a      	ldr	r2, [r3, #4]
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800391a:	605a      	str	r2, [r3, #4]

      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003920:	2b04      	cmp	r3, #4
 8003922:	d103      	bne.n	800392c <HAL_I2C_Slave_Transmit+0x1a4>
      {
        /* Normal use case for Transmitter mode */
        /* A NACK is generated to confirm the end of transfer */
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	2200      	movs	r2, #0
 8003928:	645a      	str	r2, [r3, #68]	; 0x44
 800392a:	e001      	b.n	8003930 <HAL_I2C_Slave_Transmit+0x1a8>
      }
      else
      {
        return HAL_ERROR;
 800392c:	2301      	movs	r3, #1
 800392e:	e030      	b.n	8003992 <HAL_I2C_Slave_Transmit+0x20a>
      }
    }

    /* Clear STOP flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	2220      	movs	r2, #32
 8003936:	61da      	str	r2, [r3, #28]

    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, Timeout, tickstart) != HAL_OK)
 8003938:	697b      	ldr	r3, [r7, #20]
 800393a:	9300      	str	r3, [sp, #0]
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	2201      	movs	r2, #1
 8003940:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003944:	68f8      	ldr	r0, [r7, #12]
 8003946:	f001 f96f 	bl	8004c28 <I2C_WaitOnFlagUntilTimeout>
 800394a:	4603      	mov	r3, r0
 800394c:	2b00      	cmp	r3, #0
 800394e:	d009      	beq.n	8003964 <HAL_I2C_Slave_Transmit+0x1dc>
    {
      /* Disable Address Acknowledge */
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	685a      	ldr	r2, [r3, #4]
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800395e:	605a      	str	r2, [r3, #4]
      return HAL_ERROR;
 8003960:	2301      	movs	r3, #1
 8003962:	e016      	b.n	8003992 <HAL_I2C_Slave_Transmit+0x20a>
    }

    /* Disable Address Acknowledge */
    hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	685a      	ldr	r2, [r3, #4]
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003972:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	2220      	movs	r2, #32
 8003978:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	2200      	movs	r2, #0
 8003980:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	2200      	movs	r2, #0
 8003988:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800398c:	2300      	movs	r3, #0
 800398e:	e000      	b.n	8003992 <HAL_I2C_Slave_Transmit+0x20a>
  }
  else
  {
    return HAL_BUSY;
 8003990:	2302      	movs	r3, #2
  }
}
 8003992:	4618      	mov	r0, r3
 8003994:	3718      	adds	r7, #24
 8003996:	46bd      	mov	sp, r7
 8003998:	bd80      	pop	{r7, pc}
	...

0800399c <HAL_I2C_Slave_Receive_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Receive_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	b084      	sub	sp, #16
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	60f8      	str	r0, [r7, #12]
 80039a4:	60b9      	str	r1, [r7, #8]
 80039a6:	4613      	mov	r3, r2
 80039a8:	80fb      	strh	r3, [r7, #6]
  if (hi2c->State == HAL_I2C_STATE_READY)
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80039b0:	b2db      	uxtb	r3, r3
 80039b2:	2b20      	cmp	r3, #32
 80039b4:	d138      	bne.n	8003a28 <HAL_I2C_Slave_Receive_IT+0x8c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80039bc:	2b01      	cmp	r3, #1
 80039be:	d101      	bne.n	80039c4 <HAL_I2C_Slave_Receive_IT+0x28>
 80039c0:	2302      	movs	r3, #2
 80039c2:	e032      	b.n	8003a2a <HAL_I2C_Slave_Receive_IT+0x8e>
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	2201      	movs	r2, #1
 80039c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	2222      	movs	r2, #34	; 0x22
 80039d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_SLAVE;
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	2220      	movs	r2, #32
 80039d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	2200      	movs	r2, #0
 80039e0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Enable Address Acknowledge */
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	685a      	ldr	r2, [r3, #4]
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80039f0:	605a      	str	r2, [r3, #4]

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	68ba      	ldr	r2, [r7, #8]
 80039f6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	88fa      	ldrh	r2, [r7, #6]
 80039fc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a02:	b29a      	uxth	r2, r3
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	4a0a      	ldr	r2, [pc, #40]	; (8003a34 <HAL_I2C_Slave_Receive_IT+0x98>)
 8003a0c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_IT;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	4a09      	ldr	r2, [pc, #36]	; (8003a38 <HAL_I2C_Slave_Receive_IT+0x9c>)
 8003a12:	635a      	str	r2, [r3, #52]	; 0x34

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	2200      	movs	r2, #0
 8003a18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              process unlock */

    /* Enable ERR, TC, STOP, NACK, RXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI| I2C_IT_STOPI| I2C_IT_NACKI | I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_LISTEN_IT);
 8003a1c:	2106      	movs	r1, #6
 8003a1e:	68f8      	ldr	r0, [r7, #12]
 8003a20:	f001 fabe 	bl	8004fa0 <I2C_Enable_IRQ>

    return HAL_OK;
 8003a24:	2300      	movs	r3, #0
 8003a26:	e000      	b.n	8003a2a <HAL_I2C_Slave_Receive_IT+0x8e>
  }
  else
  {
    return HAL_BUSY;
 8003a28:	2302      	movs	r3, #2
  }
}
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	3710      	adds	r7, #16
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	bd80      	pop	{r7, pc}
 8003a32:	bf00      	nop
 8003a34:	ffff0000 	.word	0xffff0000
 8003a38:	08003b2d 	.word	0x08003b2d

08003a3c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b084      	sub	sp, #16
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	699b      	ldr	r3, [r3, #24]
 8003a4a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d005      	beq.n	8003a68 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a60:	68ba      	ldr	r2, [r7, #8]
 8003a62:	68f9      	ldr	r1, [r7, #12]
 8003a64:	6878      	ldr	r0, [r7, #4]
 8003a66:	4798      	blx	r3
  }
}
 8003a68:	bf00      	nop
 8003a6a:	3710      	adds	r7, #16
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	bd80      	pop	{r7, pc}

08003a70 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003a70:	b480      	push	{r7}
 8003a72:	b083      	sub	sp, #12
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8003a78:	bf00      	nop
 8003a7a:	370c      	adds	r7, #12
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a82:	4770      	bx	lr

08003a84 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003a84:	b480      	push	{r7}
 8003a86:	b083      	sub	sp, #12
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8003a8c:	bf00      	nop
 8003a8e:	370c      	adds	r7, #12
 8003a90:	46bd      	mov	sp, r7
 8003a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a96:	4770      	bx	lr

08003a98 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003a98:	b480      	push	{r7}
 8003a9a:	b083      	sub	sp, #12
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003aa0:	bf00      	nop
 8003aa2:	370c      	adds	r7, #12
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aaa:	4770      	bx	lr

08003aac <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8003aac:	b480      	push	{r7}
 8003aae:	b083      	sub	sp, #12
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
 8003ab4:	460b      	mov	r3, r1
 8003ab6:	70fb      	strb	r3, [r7, #3]
 8003ab8:	4613      	mov	r3, r2
 8003aba:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8003abc:	bf00      	nop
 8003abe:	370c      	adds	r7, #12
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac6:	4770      	bx	lr

08003ac8 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003ac8:	b480      	push	{r7}
 8003aca:	b083      	sub	sp, #12
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8003ad0:	bf00      	nop
 8003ad2:	370c      	adds	r7, #12
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ada:	4770      	bx	lr

08003adc <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003adc:	b480      	push	{r7}
 8003ade:	b083      	sub	sp, #12
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8003ae4:	bf00      	nop
 8003ae6:	370c      	adds	r7, #12
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aee:	4770      	bx	lr

08003af0 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003af0:	b480      	push	{r7}
 8003af2:	b083      	sub	sp, #12
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8003af8:	bf00      	nop
 8003afa:	370c      	adds	r7, #12
 8003afc:	46bd      	mov	sp, r7
 8003afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b02:	4770      	bx	lr

08003b04 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003b04:	b480      	push	{r7}
 8003b06:	b083      	sub	sp, #12
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8003b0c:	bf00      	nop
 8003b0e:	370c      	adds	r7, #12
 8003b10:	46bd      	mov	sp, r7
 8003b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b16:	4770      	bx	lr

08003b18 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003b18:	b480      	push	{r7}
 8003b1a:	b083      	sub	sp, #12
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003b20:	bf00      	nop
 8003b22:	370c      	adds	r7, #12
 8003b24:	46bd      	mov	sp, r7
 8003b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2a:	4770      	bx	lr

08003b2c <I2C_Slave_ISR_IT>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b086      	sub	sp, #24
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	60f8      	str	r0, [r7, #12]
 8003b34:	60b9      	str	r1, [r7, #8]
 8003b36:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b3c:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8003b3e:	68bb      	ldr	r3, [r7, #8]
 8003b40:	617b      	str	r3, [r7, #20]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003b48:	2b01      	cmp	r3, #1
 8003b4a:	d101      	bne.n	8003b50 <I2C_Slave_ISR_IT+0x24>
 8003b4c:	2302      	movs	r3, #2
 8003b4e:	e0f0      	b.n	8003d32 <I2C_Slave_ISR_IT+0x206>
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	2201      	movs	r2, #1
 8003b54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8003b58:	697b      	ldr	r3, [r7, #20]
 8003b5a:	091b      	lsrs	r3, r3, #4
 8003b5c:	f003 0301 	and.w	r3, r3, #1
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d04d      	beq.n	8003c00 <I2C_Slave_ISR_IT+0xd4>
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	091b      	lsrs	r3, r3, #4
 8003b68:	f003 0301 	and.w	r3, r3, #1
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d047      	beq.n	8003c00 <I2C_Slave_ISR_IT+0xd4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b74:	b29b      	uxth	r3, r3
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d128      	bne.n	8003bcc <I2C_Slave_ISR_IT+0xa0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME)) /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b80:	b2db      	uxtb	r3, r3
 8003b82:	2b28      	cmp	r3, #40	; 0x28
 8003b84:	d108      	bne.n	8003b98 <I2C_Slave_ISR_IT+0x6c>
 8003b86:	693b      	ldr	r3, [r7, #16]
 8003b88:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003b8c:	d104      	bne.n	8003b98 <I2C_Slave_ISR_IT+0x6c>
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8003b8e:	6979      	ldr	r1, [r7, #20]
 8003b90:	68f8      	ldr	r0, [r7, #12]
 8003b92:	f000 feed 	bl	8004970 <I2C_ITListenCplt>
 8003b96:	e032      	b.n	8003bfe <I2C_Slave_ISR_IT+0xd2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b9e:	b2db      	uxtb	r3, r3
 8003ba0:	2b29      	cmp	r3, #41	; 0x29
 8003ba2:	d10e      	bne.n	8003bc2 <I2C_Slave_ISR_IT+0x96>
 8003ba4:	693b      	ldr	r3, [r7, #16]
 8003ba6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003baa:	d00a      	beq.n	8003bc2 <I2C_Slave_ISR_IT+0x96>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	2210      	movs	r2, #16
 8003bb2:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8003bb4:	68f8      	ldr	r0, [r7, #12]
 8003bb6:	f000 ffef 	bl	8004b98 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8003bba:	68f8      	ldr	r0, [r7, #12]
 8003bbc:	f000 fc39 	bl	8004432 <I2C_ITSlaveSeqCplt>
 8003bc0:	e01d      	b.n	8003bfe <I2C_Slave_ISR_IT+0xd2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	2210      	movs	r2, #16
 8003bc8:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8003bca:	e09a      	b.n	8003d02 <I2C_Slave_ISR_IT+0x1d6>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	2210      	movs	r2, #16
 8003bd2:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bd8:	f043 0204 	orr.w	r2, r3, #4
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8003be0:	693b      	ldr	r3, [r7, #16]
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d004      	beq.n	8003bf0 <I2C_Slave_ISR_IT+0xc4>
 8003be6:	693b      	ldr	r3, [r7, #16]
 8003be8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003bec:	f040 8089 	bne.w	8003d02 <I2C_Slave_ISR_IT+0x1d6>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bf4:	4619      	mov	r1, r3
 8003bf6:	68f8      	ldr	r0, [r7, #12]
 8003bf8:	f000 ff0e 	bl	8004a18 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8003bfc:	e081      	b.n	8003d02 <I2C_Slave_ISR_IT+0x1d6>
 8003bfe:	e080      	b.n	8003d02 <I2C_Slave_ISR_IT+0x1d6>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8003c00:	697b      	ldr	r3, [r7, #20]
 8003c02:	089b      	lsrs	r3, r3, #2
 8003c04:	f003 0301 	and.w	r3, r3, #1
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d034      	beq.n	8003c76 <I2C_Slave_ISR_IT+0x14a>
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	089b      	lsrs	r3, r3, #2
 8003c10:	f003 0301 	and.w	r3, r3, #1
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d02e      	beq.n	8003c76 <I2C_Slave_ISR_IT+0x14a>
  {
    if (hi2c->XferCount > 0U)
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c1c:	b29b      	uxth	r3, r3
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d01c      	beq.n	8003c5c <I2C_Slave_ISR_IT+0x130>
    {
      /* Remove RXNE flag on temporary variable as read done */
      tmpITFlags &= ~I2C_FLAG_RXNE;
 8003c22:	697b      	ldr	r3, [r7, #20]
 8003c24:	f023 0304 	bic.w	r3, r3, #4
 8003c28:	617b      	str	r3, [r7, #20]

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c34:	b2d2      	uxtb	r2, r2
 8003c36:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c3c:	1c5a      	adds	r2, r3, #1
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c46:	3b01      	subs	r3, #1
 8003c48:	b29a      	uxth	r2, r3
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c52:	b29b      	uxth	r3, r3
 8003c54:	3b01      	subs	r3, #1
 8003c56:	b29a      	uxth	r2, r3
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c60:	b29b      	uxth	r3, r3
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d14f      	bne.n	8003d06 <I2C_Slave_ISR_IT+0x1da>
 8003c66:	693b      	ldr	r3, [r7, #16]
 8003c68:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003c6c:	d04b      	beq.n	8003d06 <I2C_Slave_ISR_IT+0x1da>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8003c6e:	68f8      	ldr	r0, [r7, #12]
 8003c70:	f000 fbdf 	bl	8004432 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8003c74:	e047      	b.n	8003d06 <I2C_Slave_ISR_IT+0x1da>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8003c76:	697b      	ldr	r3, [r7, #20]
 8003c78:	08db      	lsrs	r3, r3, #3
 8003c7a:	f003 0301 	and.w	r3, r3, #1
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d00a      	beq.n	8003c98 <I2C_Slave_ISR_IT+0x16c>
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	08db      	lsrs	r3, r3, #3
 8003c86:	f003 0301 	and.w	r3, r3, #1
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d004      	beq.n	8003c98 <I2C_Slave_ISR_IT+0x16c>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8003c8e:	6979      	ldr	r1, [r7, #20]
 8003c90:	68f8      	ldr	r0, [r7, #12]
 8003c92:	f000 fb0f 	bl	80042b4 <I2C_ITAddrCplt>
 8003c96:	e037      	b.n	8003d08 <I2C_Slave_ISR_IT+0x1dc>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8003c98:	697b      	ldr	r3, [r7, #20]
 8003c9a:	085b      	lsrs	r3, r3, #1
 8003c9c:	f003 0301 	and.w	r3, r3, #1
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d031      	beq.n	8003d08 <I2C_Slave_ISR_IT+0x1dc>
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	085b      	lsrs	r3, r3, #1
 8003ca8:	f003 0301 	and.w	r3, r3, #1
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d02b      	beq.n	8003d08 <I2C_Slave_ISR_IT+0x1dc>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Datas have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cb4:	b29b      	uxth	r3, r3
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d018      	beq.n	8003cec <I2C_Slave_ISR_IT+0x1c0>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cbe:	781a      	ldrb	r2, [r3, #0]
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cca:	1c5a      	adds	r2, r3, #1
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cd4:	b29b      	uxth	r3, r3
 8003cd6:	3b01      	subs	r3, #1
 8003cd8:	b29a      	uxth	r2, r3
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ce2:	3b01      	subs	r3, #1
 8003ce4:	b29a      	uxth	r2, r3
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	851a      	strh	r2, [r3, #40]	; 0x28
 8003cea:	e00d      	b.n	8003d08 <I2C_Slave_ISR_IT+0x1dc>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8003cec:	693b      	ldr	r3, [r7, #16]
 8003cee:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003cf2:	d002      	beq.n	8003cfa <I2C_Slave_ISR_IT+0x1ce>
 8003cf4:	693b      	ldr	r3, [r7, #16]
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d106      	bne.n	8003d08 <I2C_Slave_ISR_IT+0x1dc>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8003cfa:	68f8      	ldr	r0, [r7, #12]
 8003cfc:	f000 fb99 	bl	8004432 <I2C_ITSlaveSeqCplt>
 8003d00:	e002      	b.n	8003d08 <I2C_Slave_ISR_IT+0x1dc>
    if (hi2c->XferCount == 0U)
 8003d02:	bf00      	nop
 8003d04:	e000      	b.n	8003d08 <I2C_Slave_ISR_IT+0x1dc>
    if ((hi2c->XferCount == 0U) && \
 8003d06:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8003d08:	697b      	ldr	r3, [r7, #20]
 8003d0a:	095b      	lsrs	r3, r3, #5
 8003d0c:	f003 0301 	and.w	r3, r3, #1
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d009      	beq.n	8003d28 <I2C_Slave_ISR_IT+0x1fc>
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	095b      	lsrs	r3, r3, #5
 8003d18:	f003 0301 	and.w	r3, r3, #1
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d003      	beq.n	8003d28 <I2C_Slave_ISR_IT+0x1fc>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8003d20:	6979      	ldr	r1, [r7, #20]
 8003d22:	68f8      	ldr	r0, [r7, #12]
 8003d24:	f000 fc5e 	bl	80045e4 <I2C_ITSlaveCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003d30:	2300      	movs	r3, #0
}
 8003d32:	4618      	mov	r0, r3
 8003d34:	3718      	adds	r7, #24
 8003d36:	46bd      	mov	sp, r7
 8003d38:	bd80      	pop	{r7, pc}

08003d3a <I2C_Master_ISR_DMA>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 8003d3a:	b580      	push	{r7, lr}
 8003d3c:	b088      	sub	sp, #32
 8003d3e:	af02      	add	r7, sp, #8
 8003d40:	60f8      	str	r0, [r7, #12]
 8003d42:	60b9      	str	r1, [r7, #8]
 8003d44:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003d4c:	2b01      	cmp	r3, #1
 8003d4e:	d101      	bne.n	8003d54 <I2C_Master_ISR_DMA+0x1a>
 8003d50:	2302      	movs	r3, #2
 8003d52:	e0e1      	b.n	8003f18 <I2C_Master_ISR_DMA+0x1de>
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	2201      	movs	r2, #1
 8003d58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8003d5c:	68bb      	ldr	r3, [r7, #8]
 8003d5e:	091b      	lsrs	r3, r3, #4
 8003d60:	f003 0301 	and.w	r3, r3, #1
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d017      	beq.n	8003d98 <I2C_Master_ISR_DMA+0x5e>
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	091b      	lsrs	r3, r3, #4
 8003d6c:	f003 0301 	and.w	r3, r3, #1
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d011      	beq.n	8003d98 <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	2210      	movs	r2, #16
 8003d7a:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d80:	f043 0204 	orr.w	r2, r3, #4
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8003d88:	2112      	movs	r1, #18
 8003d8a:	68f8      	ldr	r0, [r7, #12]
 8003d8c:	f001 f908 	bl	8004fa0 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003d90:	68f8      	ldr	r0, [r7, #12]
 8003d92:	f000 ff01 	bl	8004b98 <I2C_Flush_TXDR>
 8003d96:	e0ba      	b.n	8003f0e <I2C_Master_ISR_DMA+0x1d4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8003d98:	68bb      	ldr	r3, [r7, #8]
 8003d9a:	09db      	lsrs	r3, r3, #7
 8003d9c:	f003 0301 	and.w	r3, r3, #1
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d072      	beq.n	8003e8a <I2C_Master_ISR_DMA+0x150>
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	099b      	lsrs	r3, r3, #6
 8003da8:	f003 0301 	and.w	r3, r3, #1
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d06c      	beq.n	8003e8a <I2C_Master_ISR_DMA+0x150>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	681a      	ldr	r2, [r3, #0]
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003dbe:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dc4:	b29b      	uxth	r3, r3
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d04e      	beq.n	8003e68 <I2C_Master_ISR_DMA+0x12e>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	685b      	ldr	r3, [r3, #4]
 8003dd0:	b29b      	uxth	r3, r3
 8003dd2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003dd6:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ddc:	b29b      	uxth	r3, r3
 8003dde:	2bff      	cmp	r3, #255	; 0xff
 8003de0:	d906      	bls.n	8003df0 <I2C_Master_ISR_DMA+0xb6>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	22ff      	movs	r2, #255	; 0xff
 8003de6:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 8003de8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003dec:	617b      	str	r3, [r7, #20]
 8003dee:	e010      	b.n	8003e12 <I2C_Master_ISR_DMA+0xd8>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003df4:	b29a      	uxth	r2, r3
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dfe:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003e02:	d003      	beq.n	8003e0c <I2C_Master_ISR_DMA+0xd2>
        {
          xfermode = hi2c->XferOptions;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e08:	617b      	str	r3, [r7, #20]
 8003e0a:	e002      	b.n	8003e12 <I2C_Master_ISR_DMA+0xd8>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8003e0c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003e10:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e16:	b2da      	uxtb	r2, r3
 8003e18:	8a79      	ldrh	r1, [r7, #18]
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	9300      	str	r3, [sp, #0]
 8003e1e:	697b      	ldr	r3, [r7, #20]
 8003e20:	68f8      	ldr	r0, [r7, #12]
 8003e22:	f001 f88f 	bl	8004f44 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e2a:	b29a      	uxth	r2, r3
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e30:	1ad3      	subs	r3, r2, r3
 8003e32:	b29a      	uxth	r2, r3
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e3e:	b2db      	uxtb	r3, r3
 8003e40:	2b22      	cmp	r3, #34	; 0x22
 8003e42:	d108      	bne.n	8003e56 <I2C_Master_ISR_DMA+0x11c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	681a      	ldr	r2, [r3, #0]
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003e52:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8003e54:	e05b      	b.n	8003f0e <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	681a      	ldr	r2, [r3, #0]
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003e64:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8003e66:	e052      	b.n	8003f0e <I2C_Master_ISR_DMA+0x1d4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	685b      	ldr	r3, [r3, #4]
 8003e6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e72:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003e76:	d003      	beq.n	8003e80 <I2C_Master_ISR_DMA+0x146>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8003e78:	68f8      	ldr	r0, [r7, #12]
 8003e7a:	f000 fa9d 	bl	80043b8 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8003e7e:	e046      	b.n	8003f0e <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8003e80:	2140      	movs	r1, #64	; 0x40
 8003e82:	68f8      	ldr	r0, [r7, #12]
 8003e84:	f000 fdc8 	bl	8004a18 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8003e88:	e041      	b.n	8003f0e <I2C_Master_ISR_DMA+0x1d4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8003e8a:	68bb      	ldr	r3, [r7, #8]
 8003e8c:	099b      	lsrs	r3, r3, #6
 8003e8e:	f003 0301 	and.w	r3, r3, #1
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d029      	beq.n	8003eea <I2C_Master_ISR_DMA+0x1b0>
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	099b      	lsrs	r3, r3, #6
 8003e9a:	f003 0301 	and.w	r3, r3, #1
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d023      	beq.n	8003eea <I2C_Master_ISR_DMA+0x1b0>
  {
    if (hi2c->XferCount == 0U)
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ea6:	b29b      	uxth	r3, r3
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d119      	bne.n	8003ee0 <I2C_Master_ISR_DMA+0x1a6>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	685b      	ldr	r3, [r3, #4]
 8003eb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003eb6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003eba:	d027      	beq.n	8003f0c <I2C_Master_ISR_DMA+0x1d2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ec0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003ec4:	d108      	bne.n	8003ed8 <I2C_Master_ISR_DMA+0x19e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	685a      	ldr	r2, [r3, #4]
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003ed4:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8003ed6:	e019      	b.n	8003f0c <I2C_Master_ISR_DMA+0x1d2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8003ed8:	68f8      	ldr	r0, [r7, #12]
 8003eda:	f000 fa6d 	bl	80043b8 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8003ede:	e015      	b.n	8003f0c <I2C_Master_ISR_DMA+0x1d2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8003ee0:	2140      	movs	r1, #64	; 0x40
 8003ee2:	68f8      	ldr	r0, [r7, #12]
 8003ee4:	f000 fd98 	bl	8004a18 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8003ee8:	e010      	b.n	8003f0c <I2C_Master_ISR_DMA+0x1d2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8003eea:	68bb      	ldr	r3, [r7, #8]
 8003eec:	095b      	lsrs	r3, r3, #5
 8003eee:	f003 0301 	and.w	r3, r3, #1
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d00b      	beq.n	8003f0e <I2C_Master_ISR_DMA+0x1d4>
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	095b      	lsrs	r3, r3, #5
 8003efa:	f003 0301 	and.w	r3, r3, #1
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d005      	beq.n	8003f0e <I2C_Master_ISR_DMA+0x1d4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8003f02:	68b9      	ldr	r1, [r7, #8]
 8003f04:	68f8      	ldr	r0, [r7, #12]
 8003f06:	f000 fad1 	bl	80044ac <I2C_ITMasterCplt>
 8003f0a:	e000      	b.n	8003f0e <I2C_Master_ISR_DMA+0x1d4>
    if (hi2c->XferCount == 0U)
 8003f0c:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	2200      	movs	r2, #0
 8003f12:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003f16:	2300      	movs	r3, #0
}
 8003f18:	4618      	mov	r0, r3
 8003f1a:	3718      	adds	r7, #24
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	bd80      	pop	{r7, pc}

08003f20 <I2C_Slave_ISR_DMA>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 8003f20:	b580      	push	{r7, lr}
 8003f22:	b086      	sub	sp, #24
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	60f8      	str	r0, [r7, #12]
 8003f28:	60b9      	str	r1, [r7, #8]
 8003f2a:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f30:	613b      	str	r3, [r7, #16]
  uint32_t treatdmanack = 0U;
 8003f32:	2300      	movs	r3, #0
 8003f34:	617b      	str	r3, [r7, #20]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003f3c:	2b01      	cmp	r3, #1
 8003f3e:	d101      	bne.n	8003f44 <I2C_Slave_ISR_DMA+0x24>
 8003f40:	2302      	movs	r3, #2
 8003f42:	e1b2      	b.n	80042aa <I2C_Slave_ISR_DMA+0x38a>
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	2201      	movs	r2, #1
 8003f48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8003f4c:	68bb      	ldr	r3, [r7, #8]
 8003f4e:	091b      	lsrs	r3, r3, #4
 8003f50:	f003 0301 	and.w	r3, r3, #1
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	f000 8182 	beq.w	800425e <I2C_Slave_ISR_DMA+0x33e>
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	091b      	lsrs	r3, r3, #4
 8003f5e:	f003 0301 	and.w	r3, r3, #1
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	f000 817b 	beq.w	800425e <I2C_Slave_ISR_DMA+0x33e>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	0b9b      	lsrs	r3, r3, #14
 8003f6c:	f003 0301 	and.w	r3, r3, #1
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d106      	bne.n	8003f82 <I2C_Slave_ISR_DMA+0x62>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	0bdb      	lsrs	r3, r3, #15
 8003f78:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	f000 8167 	beq.w	8004250 <I2C_Slave_ISR_DMA+0x330>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d07c      	beq.n	8004084 <I2C_Slave_ISR_DMA+0x164>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	0bdb      	lsrs	r3, r3, #15
 8003f8e:	f003 0301 	and.w	r3, r3, #1
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d076      	beq.n	8004084 <I2C_Slave_ISR_DMA+0x164>
        {
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmarx) == 0U)
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	4a8d      	ldr	r2, [pc, #564]	; (80041d4 <I2C_Slave_ISR_DMA+0x2b4>)
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d059      	beq.n	8004056 <I2C_Slave_ISR_DMA+0x136>
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	4a8b      	ldr	r2, [pc, #556]	; (80041d8 <I2C_Slave_ISR_DMA+0x2b8>)
 8003faa:	4293      	cmp	r3, r2
 8003fac:	d053      	beq.n	8004056 <I2C_Slave_ISR_DMA+0x136>
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	4a89      	ldr	r2, [pc, #548]	; (80041dc <I2C_Slave_ISR_DMA+0x2bc>)
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	d04d      	beq.n	8004056 <I2C_Slave_ISR_DMA+0x136>
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	4a87      	ldr	r2, [pc, #540]	; (80041e0 <I2C_Slave_ISR_DMA+0x2c0>)
 8003fc2:	4293      	cmp	r3, r2
 8003fc4:	d047      	beq.n	8004056 <I2C_Slave_ISR_DMA+0x136>
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	4a85      	ldr	r2, [pc, #532]	; (80041e4 <I2C_Slave_ISR_DMA+0x2c4>)
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	d041      	beq.n	8004056 <I2C_Slave_ISR_DMA+0x136>
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	4a83      	ldr	r2, [pc, #524]	; (80041e8 <I2C_Slave_ISR_DMA+0x2c8>)
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d03b      	beq.n	8004056 <I2C_Slave_ISR_DMA+0x136>
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	4a81      	ldr	r2, [pc, #516]	; (80041ec <I2C_Slave_ISR_DMA+0x2cc>)
 8003fe6:	4293      	cmp	r3, r2
 8003fe8:	d035      	beq.n	8004056 <I2C_Slave_ISR_DMA+0x136>
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	4a7f      	ldr	r2, [pc, #508]	; (80041f0 <I2C_Slave_ISR_DMA+0x2d0>)
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	d02f      	beq.n	8004056 <I2C_Slave_ISR_DMA+0x136>
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	4a7d      	ldr	r2, [pc, #500]	; (80041f4 <I2C_Slave_ISR_DMA+0x2d4>)
 8003ffe:	4293      	cmp	r3, r2
 8004000:	d029      	beq.n	8004056 <I2C_Slave_ISR_DMA+0x136>
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	4a7b      	ldr	r2, [pc, #492]	; (80041f8 <I2C_Slave_ISR_DMA+0x2d8>)
 800400a:	4293      	cmp	r3, r2
 800400c:	d023      	beq.n	8004056 <I2C_Slave_ISR_DMA+0x136>
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	4a79      	ldr	r2, [pc, #484]	; (80041fc <I2C_Slave_ISR_DMA+0x2dc>)
 8004016:	4293      	cmp	r3, r2
 8004018:	d01d      	beq.n	8004056 <I2C_Slave_ISR_DMA+0x136>
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	4a77      	ldr	r2, [pc, #476]	; (8004200 <I2C_Slave_ISR_DMA+0x2e0>)
 8004022:	4293      	cmp	r3, r2
 8004024:	d017      	beq.n	8004056 <I2C_Slave_ISR_DMA+0x136>
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	4a75      	ldr	r2, [pc, #468]	; (8004204 <I2C_Slave_ISR_DMA+0x2e4>)
 800402e:	4293      	cmp	r3, r2
 8004030:	d011      	beq.n	8004056 <I2C_Slave_ISR_DMA+0x136>
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	4a73      	ldr	r2, [pc, #460]	; (8004208 <I2C_Slave_ISR_DMA+0x2e8>)
 800403a:	4293      	cmp	r3, r2
 800403c:	d00b      	beq.n	8004056 <I2C_Slave_ISR_DMA+0x136>
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	4a71      	ldr	r2, [pc, #452]	; (800420c <I2C_Slave_ISR_DMA+0x2ec>)
 8004046:	4293      	cmp	r3, r2
 8004048:	d005      	beq.n	8004056 <I2C_Slave_ISR_DMA+0x136>
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	4a6f      	ldr	r2, [pc, #444]	; (8004210 <I2C_Slave_ISR_DMA+0x2f0>)
 8004052:	4293      	cmp	r3, r2
 8004054:	d109      	bne.n	800406a <I2C_Slave_ISR_DMA+0x14a>
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	685b      	ldr	r3, [r3, #4]
 800405e:	2b00      	cmp	r3, #0
 8004060:	bf0c      	ite	eq
 8004062:	2301      	moveq	r3, #1
 8004064:	2300      	movne	r3, #0
 8004066:	b2db      	uxtb	r3, r3
 8004068:	e008      	b.n	800407c <I2C_Slave_ISR_DMA+0x15c>
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	685b      	ldr	r3, [r3, #4]
 8004072:	2b00      	cmp	r3, #0
 8004074:	bf0c      	ite	eq
 8004076:	2301      	moveq	r3, #1
 8004078:	2300      	movne	r3, #0
 800407a:	b2db      	uxtb	r3, r3
 800407c:	2b00      	cmp	r3, #0
 800407e:	d001      	beq.n	8004084 <I2C_Slave_ISR_DMA+0x164>
          {
            treatdmanack = 1U;
 8004080:	2301      	movs	r3, #1
 8004082:	617b      	str	r3, [r7, #20]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004088:	2b00      	cmp	r3, #0
 800408a:	d07c      	beq.n	8004186 <I2C_Slave_ISR_DMA+0x266>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	0b9b      	lsrs	r3, r3, #14
 8004090:	f003 0301 	and.w	r3, r3, #1
 8004094:	2b00      	cmp	r3, #0
 8004096:	d076      	beq.n	8004186 <I2C_Slave_ISR_DMA+0x266>
        {
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmatx) == 0U)
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	4a4d      	ldr	r2, [pc, #308]	; (80041d4 <I2C_Slave_ISR_DMA+0x2b4>)
 80040a0:	4293      	cmp	r3, r2
 80040a2:	d059      	beq.n	8004158 <I2C_Slave_ISR_DMA+0x238>
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	4a4b      	ldr	r2, [pc, #300]	; (80041d8 <I2C_Slave_ISR_DMA+0x2b8>)
 80040ac:	4293      	cmp	r3, r2
 80040ae:	d053      	beq.n	8004158 <I2C_Slave_ISR_DMA+0x238>
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	4a49      	ldr	r2, [pc, #292]	; (80041dc <I2C_Slave_ISR_DMA+0x2bc>)
 80040b8:	4293      	cmp	r3, r2
 80040ba:	d04d      	beq.n	8004158 <I2C_Slave_ISR_DMA+0x238>
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	4a47      	ldr	r2, [pc, #284]	; (80041e0 <I2C_Slave_ISR_DMA+0x2c0>)
 80040c4:	4293      	cmp	r3, r2
 80040c6:	d047      	beq.n	8004158 <I2C_Slave_ISR_DMA+0x238>
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	4a45      	ldr	r2, [pc, #276]	; (80041e4 <I2C_Slave_ISR_DMA+0x2c4>)
 80040d0:	4293      	cmp	r3, r2
 80040d2:	d041      	beq.n	8004158 <I2C_Slave_ISR_DMA+0x238>
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	4a43      	ldr	r2, [pc, #268]	; (80041e8 <I2C_Slave_ISR_DMA+0x2c8>)
 80040dc:	4293      	cmp	r3, r2
 80040de:	d03b      	beq.n	8004158 <I2C_Slave_ISR_DMA+0x238>
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	4a41      	ldr	r2, [pc, #260]	; (80041ec <I2C_Slave_ISR_DMA+0x2cc>)
 80040e8:	4293      	cmp	r3, r2
 80040ea:	d035      	beq.n	8004158 <I2C_Slave_ISR_DMA+0x238>
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	4a3f      	ldr	r2, [pc, #252]	; (80041f0 <I2C_Slave_ISR_DMA+0x2d0>)
 80040f4:	4293      	cmp	r3, r2
 80040f6:	d02f      	beq.n	8004158 <I2C_Slave_ISR_DMA+0x238>
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	4a3d      	ldr	r2, [pc, #244]	; (80041f4 <I2C_Slave_ISR_DMA+0x2d4>)
 8004100:	4293      	cmp	r3, r2
 8004102:	d029      	beq.n	8004158 <I2C_Slave_ISR_DMA+0x238>
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	4a3b      	ldr	r2, [pc, #236]	; (80041f8 <I2C_Slave_ISR_DMA+0x2d8>)
 800410c:	4293      	cmp	r3, r2
 800410e:	d023      	beq.n	8004158 <I2C_Slave_ISR_DMA+0x238>
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	4a39      	ldr	r2, [pc, #228]	; (80041fc <I2C_Slave_ISR_DMA+0x2dc>)
 8004118:	4293      	cmp	r3, r2
 800411a:	d01d      	beq.n	8004158 <I2C_Slave_ISR_DMA+0x238>
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	4a37      	ldr	r2, [pc, #220]	; (8004200 <I2C_Slave_ISR_DMA+0x2e0>)
 8004124:	4293      	cmp	r3, r2
 8004126:	d017      	beq.n	8004158 <I2C_Slave_ISR_DMA+0x238>
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	4a35      	ldr	r2, [pc, #212]	; (8004204 <I2C_Slave_ISR_DMA+0x2e4>)
 8004130:	4293      	cmp	r3, r2
 8004132:	d011      	beq.n	8004158 <I2C_Slave_ISR_DMA+0x238>
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	4a33      	ldr	r2, [pc, #204]	; (8004208 <I2C_Slave_ISR_DMA+0x2e8>)
 800413c:	4293      	cmp	r3, r2
 800413e:	d00b      	beq.n	8004158 <I2C_Slave_ISR_DMA+0x238>
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	4a31      	ldr	r2, [pc, #196]	; (800420c <I2C_Slave_ISR_DMA+0x2ec>)
 8004148:	4293      	cmp	r3, r2
 800414a:	d005      	beq.n	8004158 <I2C_Slave_ISR_DMA+0x238>
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	4a2f      	ldr	r2, [pc, #188]	; (8004210 <I2C_Slave_ISR_DMA+0x2f0>)
 8004154:	4293      	cmp	r3, r2
 8004156:	d109      	bne.n	800416c <I2C_Slave_ISR_DMA+0x24c>
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	685b      	ldr	r3, [r3, #4]
 8004160:	2b00      	cmp	r3, #0
 8004162:	bf0c      	ite	eq
 8004164:	2301      	moveq	r3, #1
 8004166:	2300      	movne	r3, #0
 8004168:	b2db      	uxtb	r3, r3
 800416a:	e008      	b.n	800417e <I2C_Slave_ISR_DMA+0x25e>
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	685b      	ldr	r3, [r3, #4]
 8004174:	2b00      	cmp	r3, #0
 8004176:	bf0c      	ite	eq
 8004178:	2301      	moveq	r3, #1
 800417a:	2300      	movne	r3, #0
 800417c:	b2db      	uxtb	r3, r3
 800417e:	2b00      	cmp	r3, #0
 8004180:	d001      	beq.n	8004186 <I2C_Slave_ISR_DMA+0x266>
          {
            treatdmanack = 1U;
 8004182:	2301      	movs	r3, #1
 8004184:	617b      	str	r3, [r7, #20]
          }
        }
      }

      if (treatdmanack == 1U)
 8004186:	697b      	ldr	r3, [r7, #20]
 8004188:	2b01      	cmp	r3, #1
 800418a:	d148      	bne.n	800421e <I2C_Slave_ISR_DMA+0x2fe>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME)) /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004192:	b2db      	uxtb	r3, r3
 8004194:	2b28      	cmp	r3, #40	; 0x28
 8004196:	d108      	bne.n	80041aa <I2C_Slave_ISR_DMA+0x28a>
 8004198:	693b      	ldr	r3, [r7, #16]
 800419a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800419e:	d104      	bne.n	80041aa <I2C_Slave_ISR_DMA+0x28a>
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 80041a0:	68b9      	ldr	r1, [r7, #8]
 80041a2:	68f8      	ldr	r0, [r7, #12]
 80041a4:	f000 fbe4 	bl	8004970 <I2C_ITListenCplt>
 80041a8:	e051      	b.n	800424e <I2C_Slave_ISR_DMA+0x32e>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80041b0:	b2db      	uxtb	r3, r3
 80041b2:	2b29      	cmp	r3, #41	; 0x29
 80041b4:	d12e      	bne.n	8004214 <I2C_Slave_ISR_DMA+0x2f4>
 80041b6:	693b      	ldr	r3, [r7, #16]
 80041b8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80041bc:	d02a      	beq.n	8004214 <I2C_Slave_ISR_DMA+0x2f4>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	2210      	movs	r2, #16
 80041c4:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 80041c6:	68f8      	ldr	r0, [r7, #12]
 80041c8:	f000 fce6 	bl	8004b98 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 80041cc:	68f8      	ldr	r0, [r7, #12]
 80041ce:	f000 f930 	bl	8004432 <I2C_ITSlaveSeqCplt>
 80041d2:	e03c      	b.n	800424e <I2C_Slave_ISR_DMA+0x32e>
 80041d4:	40020010 	.word	0x40020010
 80041d8:	40020028 	.word	0x40020028
 80041dc:	40020040 	.word	0x40020040
 80041e0:	40020058 	.word	0x40020058
 80041e4:	40020070 	.word	0x40020070
 80041e8:	40020088 	.word	0x40020088
 80041ec:	400200a0 	.word	0x400200a0
 80041f0:	400200b8 	.word	0x400200b8
 80041f4:	40020410 	.word	0x40020410
 80041f8:	40020428 	.word	0x40020428
 80041fc:	40020440 	.word	0x40020440
 8004200:	40020458 	.word	0x40020458
 8004204:	40020470 	.word	0x40020470
 8004208:	40020488 	.word	0x40020488
 800420c:	400204a0 	.word	0x400204a0
 8004210:	400204b8 	.word	0x400204b8
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	2210      	movs	r2, #16
 800421a:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 800421c:	e01d      	b.n	800425a <I2C_Slave_ISR_DMA+0x33a>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	2210      	movs	r2, #16
 8004224:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800422a:	f043 0204 	orr.w	r2, r3, #4
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	645a      	str	r2, [r3, #68]	; 0x44

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8004232:	693b      	ldr	r3, [r7, #16]
 8004234:	2b00      	cmp	r3, #0
 8004236:	d003      	beq.n	8004240 <I2C_Slave_ISR_DMA+0x320>
 8004238:	693b      	ldr	r3, [r7, #16]
 800423a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800423e:	d10c      	bne.n	800425a <I2C_Slave_ISR_DMA+0x33a>
        {
          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004244:	4619      	mov	r1, r3
 8004246:	68f8      	ldr	r0, [r7, #12]
 8004248:	f000 fbe6 	bl	8004a18 <I2C_ITError>
      if (treatdmanack == 1U)
 800424c:	e005      	b.n	800425a <I2C_Slave_ISR_DMA+0x33a>
 800424e:	e004      	b.n	800425a <I2C_Slave_ISR_DMA+0x33a>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	2210      	movs	r2, #16
 8004256:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8004258:	e022      	b.n	80042a0 <I2C_Slave_ISR_DMA+0x380>
      if (treatdmanack == 1U)
 800425a:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800425c:	e020      	b.n	80042a0 <I2C_Slave_ISR_DMA+0x380>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800425e:	68bb      	ldr	r3, [r7, #8]
 8004260:	08db      	lsrs	r3, r3, #3
 8004262:	f003 0301 	and.w	r3, r3, #1
 8004266:	2b00      	cmp	r3, #0
 8004268:	d00a      	beq.n	8004280 <I2C_Slave_ISR_DMA+0x360>
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	08db      	lsrs	r3, r3, #3
 800426e:	f003 0301 	and.w	r3, r3, #1
 8004272:	2b00      	cmp	r3, #0
 8004274:	d004      	beq.n	8004280 <I2C_Slave_ISR_DMA+0x360>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8004276:	68b9      	ldr	r1, [r7, #8]
 8004278:	68f8      	ldr	r0, [r7, #12]
 800427a:	f000 f81b 	bl	80042b4 <I2C_ITAddrCplt>
 800427e:	e00f      	b.n	80042a0 <I2C_Slave_ISR_DMA+0x380>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8004280:	68bb      	ldr	r3, [r7, #8]
 8004282:	095b      	lsrs	r3, r3, #5
 8004284:	f003 0301 	and.w	r3, r3, #1
 8004288:	2b00      	cmp	r3, #0
 800428a:	d009      	beq.n	80042a0 <I2C_Slave_ISR_DMA+0x380>
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	095b      	lsrs	r3, r3, #5
 8004290:	f003 0301 	and.w	r3, r3, #1
 8004294:	2b00      	cmp	r3, #0
 8004296:	d003      	beq.n	80042a0 <I2C_Slave_ISR_DMA+0x380>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8004298:	68b9      	ldr	r1, [r7, #8]
 800429a:	68f8      	ldr	r0, [r7, #12]
 800429c:	f000 f9a2 	bl	80045e4 <I2C_ITSlaveCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	2200      	movs	r2, #0
 80042a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80042a8:	2300      	movs	r3, #0
}
 80042aa:	4618      	mov	r0, r3
 80042ac:	3718      	adds	r7, #24
 80042ae:	46bd      	mov	sp, r7
 80042b0:	bd80      	pop	{r7, pc}
 80042b2:	bf00      	nop

080042b4 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	b084      	sub	sp, #16
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
 80042bc:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80042c4:	b2db      	uxtb	r3, r3
 80042c6:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80042ca:	2b28      	cmp	r3, #40	; 0x28
 80042cc:	d168      	bne.n	80043a0 <I2C_ITAddrCplt+0xec>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	699b      	ldr	r3, [r3, #24]
 80042d4:	0c1b      	lsrs	r3, r3, #16
 80042d6:	b2db      	uxtb	r3, r3
 80042d8:	f003 0301 	and.w	r3, r3, #1
 80042dc:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	699b      	ldr	r3, [r3, #24]
 80042e4:	0c1b      	lsrs	r3, r3, #16
 80042e6:	b29b      	uxth	r3, r3
 80042e8:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80042ec:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	689b      	ldr	r3, [r3, #8]
 80042f4:	b29b      	uxth	r3, r3
 80042f6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80042fa:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	68db      	ldr	r3, [r3, #12]
 8004302:	b29b      	uxth	r3, r3
 8004304:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8004308:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	68db      	ldr	r3, [r3, #12]
 800430e:	2b02      	cmp	r3, #2
 8004310:	d137      	bne.n	8004382 <I2C_ITAddrCplt+0xce>
    {
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 8004312:	897b      	ldrh	r3, [r7, #10]
 8004314:	09db      	lsrs	r3, r3, #7
 8004316:	b29a      	uxth	r2, r3
 8004318:	89bb      	ldrh	r3, [r7, #12]
 800431a:	4053      	eors	r3, r2
 800431c:	b29b      	uxth	r3, r3
 800431e:	f003 0306 	and.w	r3, r3, #6
 8004322:	2b00      	cmp	r3, #0
 8004324:	d11c      	bne.n	8004360 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8004326:	897b      	ldrh	r3, [r7, #10]
 8004328:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800432e:	1c5a      	adds	r2, r3, #1
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004338:	2b02      	cmp	r3, #2
 800433a:	d139      	bne.n	80043b0 <I2C_ITAddrCplt+0xfc>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2200      	movs	r2, #0
 8004340:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	2208      	movs	r2, #8
 8004348:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	2200      	movs	r2, #0
 800434e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004352:	89ba      	ldrh	r2, [r7, #12]
 8004354:	7bfb      	ldrb	r3, [r7, #15]
 8004356:	4619      	mov	r1, r3
 8004358:	6878      	ldr	r0, [r7, #4]
 800435a:	f7ff fba7 	bl	8003aac <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800435e:	e027      	b.n	80043b0 <I2C_ITAddrCplt+0xfc>
        slaveaddrcode = ownadd2code;
 8004360:	893b      	ldrh	r3, [r7, #8]
 8004362:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8004364:	2104      	movs	r1, #4
 8004366:	6878      	ldr	r0, [r7, #4]
 8004368:	f000 fe88 	bl	800507c <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2200      	movs	r2, #0
 8004370:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004374:	89ba      	ldrh	r2, [r7, #12]
 8004376:	7bfb      	ldrb	r3, [r7, #15]
 8004378:	4619      	mov	r1, r3
 800437a:	6878      	ldr	r0, [r7, #4]
 800437c:	f7ff fb96 	bl	8003aac <HAL_I2C_AddrCallback>
}
 8004380:	e016      	b.n	80043b0 <I2C_ITAddrCplt+0xfc>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8004382:	2104      	movs	r1, #4
 8004384:	6878      	ldr	r0, [r7, #4]
 8004386:	f000 fe79 	bl	800507c <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	2200      	movs	r2, #0
 800438e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004392:	89ba      	ldrh	r2, [r7, #12]
 8004394:	7bfb      	ldrb	r3, [r7, #15]
 8004396:	4619      	mov	r1, r3
 8004398:	6878      	ldr	r0, [r7, #4]
 800439a:	f7ff fb87 	bl	8003aac <HAL_I2C_AddrCallback>
}
 800439e:	e007      	b.n	80043b0 <I2C_ITAddrCplt+0xfc>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	2208      	movs	r2, #8
 80043a6:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2200      	movs	r2, #0
 80043ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 80043b0:	bf00      	nop
 80043b2:	3710      	adds	r7, #16
 80043b4:	46bd      	mov	sp, r7
 80043b6:	bd80      	pop	{r7, pc}

080043b8 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80043b8:	b580      	push	{r7, lr}
 80043ba:	b082      	sub	sp, #8
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2200      	movs	r2, #0
 80043c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80043ce:	b2db      	uxtb	r3, r3
 80043d0:	2b21      	cmp	r3, #33	; 0x21
 80043d2:	d115      	bne.n	8004400 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2220      	movs	r2, #32
 80043d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2211      	movs	r2, #17
 80043e0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	2200      	movs	r2, #0
 80043e6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80043e8:	2101      	movs	r1, #1
 80043ea:	6878      	ldr	r0, [r7, #4]
 80043ec:	f000 fe46 	bl	800507c <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2200      	movs	r2, #0
 80043f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 80043f8:	6878      	ldr	r0, [r7, #4]
 80043fa:	f7ff fb39 	bl	8003a70 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80043fe:	e014      	b.n	800442a <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2220      	movs	r2, #32
 8004404:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2212      	movs	r2, #18
 800440c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2200      	movs	r2, #0
 8004412:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8004414:	2102      	movs	r1, #2
 8004416:	6878      	ldr	r0, [r7, #4]
 8004418:	f000 fe30 	bl	800507c <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2200      	movs	r2, #0
 8004420:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8004424:	6878      	ldr	r0, [r7, #4]
 8004426:	f7ff fb2d 	bl	8003a84 <HAL_I2C_MasterRxCpltCallback>
}
 800442a:	bf00      	nop
 800442c:	3708      	adds	r7, #8
 800442e:	46bd      	mov	sp, r7
 8004430:	bd80      	pop	{r7, pc}

08004432 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8004432:	b580      	push	{r7, lr}
 8004434:	b082      	sub	sp, #8
 8004436:	af00      	add	r7, sp, #0
 8004438:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	2200      	movs	r2, #0
 800443e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004448:	b2db      	uxtb	r3, r3
 800444a:	2b29      	cmp	r3, #41	; 0x29
 800444c:	d112      	bne.n	8004474 <I2C_ITSlaveSeqCplt+0x42>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	2228      	movs	r2, #40	; 0x28
 8004452:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	2221      	movs	r2, #33	; 0x21
 800445a:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800445c:	2101      	movs	r1, #1
 800445e:	6878      	ldr	r0, [r7, #4]
 8004460:	f000 fe0c 	bl	800507c <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2200      	movs	r2, #0
 8004468:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800446c:	6878      	ldr	r0, [r7, #4]
 800446e:	f7ff fb13 	bl	8003a98 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8004472:	e017      	b.n	80044a4 <I2C_ITSlaveSeqCplt+0x72>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800447a:	b2db      	uxtb	r3, r3
 800447c:	2b2a      	cmp	r3, #42	; 0x2a
 800447e:	d111      	bne.n	80044a4 <I2C_ITSlaveSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2228      	movs	r2, #40	; 0x28
 8004484:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2222      	movs	r2, #34	; 0x22
 800448c:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800448e:	2102      	movs	r1, #2
 8004490:	6878      	ldr	r0, [r7, #4]
 8004492:	f000 fdf3 	bl	800507c <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	2200      	movs	r2, #0
 800449a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800449e:	6878      	ldr	r0, [r7, #4]
 80044a0:	f7fd fa32 	bl	8001908 <HAL_I2C_SlaveRxCpltCallback>
}
 80044a4:	bf00      	nop
 80044a6:	3708      	adds	r7, #8
 80044a8:	46bd      	mov	sp, r7
 80044aa:	bd80      	pop	{r7, pc}

080044ac <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b084      	sub	sp, #16
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
 80044b4:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	2220      	movs	r2, #32
 80044bc:	61da      	str	r2, [r3, #28]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	6859      	ldr	r1, [r3, #4]
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681a      	ldr	r2, [r3, #0]
 80044c8:	4b44      	ldr	r3, [pc, #272]	; (80045dc <I2C_ITMasterCplt+0x130>)
 80044ca:	400b      	ands	r3, r1
 80044cc:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->PreviousState = I2C_STATE_NONE;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	2200      	movs	r2, #0
 80044d2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->XferISR       = NULL;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2200      	movs	r2, #0
 80044d8:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	4a40      	ldr	r2, [pc, #256]	; (80045e0 <I2C_ITMasterCplt+0x134>)
 80044de:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET)
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	091b      	lsrs	r3, r3, #4
 80044e4:	f003 0301 	and.w	r3, r3, #1
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d009      	beq.n	8004500 <I2C_ITMasterCplt+0x54>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	2210      	movs	r2, #16
 80044f2:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044f8:	f043 0204 	orr.w	r2, r3, #4
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8004500:	6878      	ldr	r0, [r7, #4]
 8004502:	f000 fb49 	bl	8004b98 <I2C_Flush_TXDR>

  /* Disable Interrupts */
  I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8004506:	2103      	movs	r1, #3
 8004508:	6878      	ldr	r0, [r7, #4]
 800450a:	f000 fdb7 	bl	800507c <I2C_Disable_IRQ>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004512:	60fb      	str	r3, [r7, #12]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800451a:	b2db      	uxtb	r3, r3
 800451c:	2b60      	cmp	r3, #96	; 0x60
 800451e:	d002      	beq.n	8004526 <I2C_ITMasterCplt+0x7a>
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	2b00      	cmp	r3, #0
 8004524:	d006      	beq.n	8004534 <I2C_ITMasterCplt+0x88>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800452a:	4619      	mov	r1, r3
 800452c:	6878      	ldr	r0, [r7, #4]
 800452e:	f000 fa73 	bl	8004a18 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8004532:	e04e      	b.n	80045d2 <I2C_ITMasterCplt+0x126>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800453a:	b2db      	uxtb	r3, r3
 800453c:	2b21      	cmp	r3, #33	; 0x21
 800453e:	d121      	bne.n	8004584 <I2C_ITMasterCplt+0xd8>
    hi2c->State = HAL_I2C_STATE_READY;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2220      	movs	r2, #32
 8004544:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800454e:	b2db      	uxtb	r3, r3
 8004550:	2b40      	cmp	r3, #64	; 0x40
 8004552:	d10b      	bne.n	800456c <I2C_ITMasterCplt+0xc0>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2200      	movs	r2, #0
 8004558:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2200      	movs	r2, #0
 8004560:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 8004564:	6878      	ldr	r0, [r7, #4]
 8004566:	f7ff fab9 	bl	8003adc <HAL_I2C_MemTxCpltCallback>
}
 800456a:	e032      	b.n	80045d2 <I2C_ITMasterCplt+0x126>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	2200      	movs	r2, #0
 8004570:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2200      	movs	r2, #0
 8004578:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800457c:	6878      	ldr	r0, [r7, #4]
 800457e:	f7ff fa77 	bl	8003a70 <HAL_I2C_MasterTxCpltCallback>
}
 8004582:	e026      	b.n	80045d2 <I2C_ITMasterCplt+0x126>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800458a:	b2db      	uxtb	r3, r3
 800458c:	2b22      	cmp	r3, #34	; 0x22
 800458e:	d120      	bne.n	80045d2 <I2C_ITMasterCplt+0x126>
    hi2c->State = HAL_I2C_STATE_READY;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2220      	movs	r2, #32
 8004594:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800459e:	b2db      	uxtb	r3, r3
 80045a0:	2b40      	cmp	r3, #64	; 0x40
 80045a2:	d10b      	bne.n	80045bc <I2C_ITMasterCplt+0x110>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2200      	movs	r2, #0
 80045a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2200      	movs	r2, #0
 80045b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 80045b4:	6878      	ldr	r0, [r7, #4]
 80045b6:	f7ff fa9b 	bl	8003af0 <HAL_I2C_MemRxCpltCallback>
}
 80045ba:	e00a      	b.n	80045d2 <I2C_ITMasterCplt+0x126>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2200      	movs	r2, #0
 80045c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2200      	movs	r2, #0
 80045c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80045cc:	6878      	ldr	r0, [r7, #4]
 80045ce:	f7ff fa59 	bl	8003a84 <HAL_I2C_MasterRxCpltCallback>
}
 80045d2:	bf00      	nop
 80045d4:	3710      	adds	r7, #16
 80045d6:	46bd      	mov	sp, r7
 80045d8:	bd80      	pop	{r7, pc}
 80045da:	bf00      	nop
 80045dc:	fe00e800 	.word	0xfe00e800
 80045e0:	ffff0000 	.word	0xffff0000

080045e4 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80045e4:	b580      	push	{r7, lr}
 80045e6:	b084      	sub	sp, #16
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
 80045ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	60bb      	str	r3, [r7, #8]
  uint32_t tmpITFlags = ITFlags;
 80045f6:	683b      	ldr	r3, [r7, #0]
 80045f8:	60fb      	str	r3, [r7, #12]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	2220      	movs	r2, #32
 8004600:	61da      	str	r2, [r3, #28]

  /* Disable all interrupts */
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8004602:	2107      	movs	r1, #7
 8004604:	6878      	ldr	r0, [r7, #4]
 8004606:	f000 fd39 	bl	800507c <I2C_Disable_IRQ>

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	685a      	ldr	r2, [r3, #4]
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004618:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	6859      	ldr	r1, [r3, #4]
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681a      	ldr	r2, [r3, #0]
 8004624:	4b78      	ldr	r3, [pc, #480]	; (8004808 <I2C_ITSlaveCplt+0x224>)
 8004626:	400b      	ands	r3, r1
 8004628:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800462a:	6878      	ldr	r0, [r7, #4]
 800462c:	f000 fab4 	bl	8004b98 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8004630:	68bb      	ldr	r3, [r7, #8]
 8004632:	0b9b      	lsrs	r3, r3, #14
 8004634:	f003 0301 	and.w	r3, r3, #1
 8004638:	2b00      	cmp	r3, #0
 800463a:	d072      	beq.n	8004722 <I2C_ITSlaveCplt+0x13e>
  {
    if (hi2c->hdmatx != NULL)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004640:	2b00      	cmp	r3, #0
 8004642:	f000 810a 	beq.w	800485a <I2C_ITSlaveCplt+0x276>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	4a6f      	ldr	r2, [pc, #444]	; (800480c <I2C_ITSlaveCplt+0x228>)
 800464e:	4293      	cmp	r3, r2
 8004650:	d059      	beq.n	8004706 <I2C_ITSlaveCplt+0x122>
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	4a6d      	ldr	r2, [pc, #436]	; (8004810 <I2C_ITSlaveCplt+0x22c>)
 800465a:	4293      	cmp	r3, r2
 800465c:	d053      	beq.n	8004706 <I2C_ITSlaveCplt+0x122>
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	4a6b      	ldr	r2, [pc, #428]	; (8004814 <I2C_ITSlaveCplt+0x230>)
 8004666:	4293      	cmp	r3, r2
 8004668:	d04d      	beq.n	8004706 <I2C_ITSlaveCplt+0x122>
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	4a69      	ldr	r2, [pc, #420]	; (8004818 <I2C_ITSlaveCplt+0x234>)
 8004672:	4293      	cmp	r3, r2
 8004674:	d047      	beq.n	8004706 <I2C_ITSlaveCplt+0x122>
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	4a67      	ldr	r2, [pc, #412]	; (800481c <I2C_ITSlaveCplt+0x238>)
 800467e:	4293      	cmp	r3, r2
 8004680:	d041      	beq.n	8004706 <I2C_ITSlaveCplt+0x122>
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	4a65      	ldr	r2, [pc, #404]	; (8004820 <I2C_ITSlaveCplt+0x23c>)
 800468a:	4293      	cmp	r3, r2
 800468c:	d03b      	beq.n	8004706 <I2C_ITSlaveCplt+0x122>
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	4a63      	ldr	r2, [pc, #396]	; (8004824 <I2C_ITSlaveCplt+0x240>)
 8004696:	4293      	cmp	r3, r2
 8004698:	d035      	beq.n	8004706 <I2C_ITSlaveCplt+0x122>
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	4a61      	ldr	r2, [pc, #388]	; (8004828 <I2C_ITSlaveCplt+0x244>)
 80046a2:	4293      	cmp	r3, r2
 80046a4:	d02f      	beq.n	8004706 <I2C_ITSlaveCplt+0x122>
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	4a5f      	ldr	r2, [pc, #380]	; (800482c <I2C_ITSlaveCplt+0x248>)
 80046ae:	4293      	cmp	r3, r2
 80046b0:	d029      	beq.n	8004706 <I2C_ITSlaveCplt+0x122>
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	4a5d      	ldr	r2, [pc, #372]	; (8004830 <I2C_ITSlaveCplt+0x24c>)
 80046ba:	4293      	cmp	r3, r2
 80046bc:	d023      	beq.n	8004706 <I2C_ITSlaveCplt+0x122>
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	4a5b      	ldr	r2, [pc, #364]	; (8004834 <I2C_ITSlaveCplt+0x250>)
 80046c6:	4293      	cmp	r3, r2
 80046c8:	d01d      	beq.n	8004706 <I2C_ITSlaveCplt+0x122>
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	4a59      	ldr	r2, [pc, #356]	; (8004838 <I2C_ITSlaveCplt+0x254>)
 80046d2:	4293      	cmp	r3, r2
 80046d4:	d017      	beq.n	8004706 <I2C_ITSlaveCplt+0x122>
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	4a57      	ldr	r2, [pc, #348]	; (800483c <I2C_ITSlaveCplt+0x258>)
 80046de:	4293      	cmp	r3, r2
 80046e0:	d011      	beq.n	8004706 <I2C_ITSlaveCplt+0x122>
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	4a55      	ldr	r2, [pc, #340]	; (8004840 <I2C_ITSlaveCplt+0x25c>)
 80046ea:	4293      	cmp	r3, r2
 80046ec:	d00b      	beq.n	8004706 <I2C_ITSlaveCplt+0x122>
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	4a53      	ldr	r2, [pc, #332]	; (8004844 <I2C_ITSlaveCplt+0x260>)
 80046f6:	4293      	cmp	r3, r2
 80046f8:	d005      	beq.n	8004706 <I2C_ITSlaveCplt+0x122>
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	4a51      	ldr	r2, [pc, #324]	; (8004848 <I2C_ITSlaveCplt+0x264>)
 8004702:	4293      	cmp	r3, r2
 8004704:	d105      	bne.n	8004712 <I2C_ITSlaveCplt+0x12e>
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	685b      	ldr	r3, [r3, #4]
 800470e:	b29b      	uxth	r3, r3
 8004710:	e004      	b.n	800471c <I2C_ITSlaveCplt+0x138>
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	685b      	ldr	r3, [r3, #4]
 800471a:	b29b      	uxth	r3, r3
 800471c:	687a      	ldr	r2, [r7, #4]
 800471e:	8553      	strh	r3, [r2, #42]	; 0x2a
 8004720:	e09b      	b.n	800485a <I2C_ITSlaveCplt+0x276>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8004722:	68bb      	ldr	r3, [r7, #8]
 8004724:	0bdb      	lsrs	r3, r3, #15
 8004726:	f003 0301 	and.w	r3, r3, #1
 800472a:	2b00      	cmp	r3, #0
 800472c:	f000 8095 	beq.w	800485a <I2C_ITSlaveCplt+0x276>
  {
    if (hi2c->hdmarx != NULL)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004734:	2b00      	cmp	r3, #0
 8004736:	f000 8090 	beq.w	800485a <I2C_ITSlaveCplt+0x276>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	4a32      	ldr	r2, [pc, #200]	; (800480c <I2C_ITSlaveCplt+0x228>)
 8004742:	4293      	cmp	r3, r2
 8004744:	d059      	beq.n	80047fa <I2C_ITSlaveCplt+0x216>
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	4a30      	ldr	r2, [pc, #192]	; (8004810 <I2C_ITSlaveCplt+0x22c>)
 800474e:	4293      	cmp	r3, r2
 8004750:	d053      	beq.n	80047fa <I2C_ITSlaveCplt+0x216>
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	4a2e      	ldr	r2, [pc, #184]	; (8004814 <I2C_ITSlaveCplt+0x230>)
 800475a:	4293      	cmp	r3, r2
 800475c:	d04d      	beq.n	80047fa <I2C_ITSlaveCplt+0x216>
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	4a2c      	ldr	r2, [pc, #176]	; (8004818 <I2C_ITSlaveCplt+0x234>)
 8004766:	4293      	cmp	r3, r2
 8004768:	d047      	beq.n	80047fa <I2C_ITSlaveCplt+0x216>
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	4a2a      	ldr	r2, [pc, #168]	; (800481c <I2C_ITSlaveCplt+0x238>)
 8004772:	4293      	cmp	r3, r2
 8004774:	d041      	beq.n	80047fa <I2C_ITSlaveCplt+0x216>
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	4a28      	ldr	r2, [pc, #160]	; (8004820 <I2C_ITSlaveCplt+0x23c>)
 800477e:	4293      	cmp	r3, r2
 8004780:	d03b      	beq.n	80047fa <I2C_ITSlaveCplt+0x216>
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	4a26      	ldr	r2, [pc, #152]	; (8004824 <I2C_ITSlaveCplt+0x240>)
 800478a:	4293      	cmp	r3, r2
 800478c:	d035      	beq.n	80047fa <I2C_ITSlaveCplt+0x216>
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	4a24      	ldr	r2, [pc, #144]	; (8004828 <I2C_ITSlaveCplt+0x244>)
 8004796:	4293      	cmp	r3, r2
 8004798:	d02f      	beq.n	80047fa <I2C_ITSlaveCplt+0x216>
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	4a22      	ldr	r2, [pc, #136]	; (800482c <I2C_ITSlaveCplt+0x248>)
 80047a2:	4293      	cmp	r3, r2
 80047a4:	d029      	beq.n	80047fa <I2C_ITSlaveCplt+0x216>
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	4a20      	ldr	r2, [pc, #128]	; (8004830 <I2C_ITSlaveCplt+0x24c>)
 80047ae:	4293      	cmp	r3, r2
 80047b0:	d023      	beq.n	80047fa <I2C_ITSlaveCplt+0x216>
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	4a1e      	ldr	r2, [pc, #120]	; (8004834 <I2C_ITSlaveCplt+0x250>)
 80047ba:	4293      	cmp	r3, r2
 80047bc:	d01d      	beq.n	80047fa <I2C_ITSlaveCplt+0x216>
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	4a1c      	ldr	r2, [pc, #112]	; (8004838 <I2C_ITSlaveCplt+0x254>)
 80047c6:	4293      	cmp	r3, r2
 80047c8:	d017      	beq.n	80047fa <I2C_ITSlaveCplt+0x216>
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	4a1a      	ldr	r2, [pc, #104]	; (800483c <I2C_ITSlaveCplt+0x258>)
 80047d2:	4293      	cmp	r3, r2
 80047d4:	d011      	beq.n	80047fa <I2C_ITSlaveCplt+0x216>
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	4a18      	ldr	r2, [pc, #96]	; (8004840 <I2C_ITSlaveCplt+0x25c>)
 80047de:	4293      	cmp	r3, r2
 80047e0:	d00b      	beq.n	80047fa <I2C_ITSlaveCplt+0x216>
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	4a16      	ldr	r2, [pc, #88]	; (8004844 <I2C_ITSlaveCplt+0x260>)
 80047ea:	4293      	cmp	r3, r2
 80047ec:	d005      	beq.n	80047fa <I2C_ITSlaveCplt+0x216>
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	4a14      	ldr	r2, [pc, #80]	; (8004848 <I2C_ITSlaveCplt+0x264>)
 80047f6:	4293      	cmp	r3, r2
 80047f8:	d128      	bne.n	800484c <I2C_ITSlaveCplt+0x268>
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	685b      	ldr	r3, [r3, #4]
 8004802:	b29b      	uxth	r3, r3
 8004804:	e027      	b.n	8004856 <I2C_ITSlaveCplt+0x272>
 8004806:	bf00      	nop
 8004808:	fe00e800 	.word	0xfe00e800
 800480c:	40020010 	.word	0x40020010
 8004810:	40020028 	.word	0x40020028
 8004814:	40020040 	.word	0x40020040
 8004818:	40020058 	.word	0x40020058
 800481c:	40020070 	.word	0x40020070
 8004820:	40020088 	.word	0x40020088
 8004824:	400200a0 	.word	0x400200a0
 8004828:	400200b8 	.word	0x400200b8
 800482c:	40020410 	.word	0x40020410
 8004830:	40020428 	.word	0x40020428
 8004834:	40020440 	.word	0x40020440
 8004838:	40020458 	.word	0x40020458
 800483c:	40020470 	.word	0x40020470
 8004840:	40020488 	.word	0x40020488
 8004844:	400204a0 	.word	0x400204a0
 8004848:	400204b8 	.word	0x400204b8
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	685b      	ldr	r3, [r3, #4]
 8004854:	b29b      	uxth	r3, r3
 8004856:	687a      	ldr	r2, [r7, #4]
 8004858:	8553      	strh	r3, [r2, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	089b      	lsrs	r3, r3, #2
 800485e:	f003 0301 	and.w	r3, r3, #1
 8004862:	2b00      	cmp	r3, #0
 8004864:	d020      	beq.n	80048a8 <I2C_ITSlaveCplt+0x2c4>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	f023 0304 	bic.w	r3, r3, #4
 800486c:	60fb      	str	r3, [r7, #12]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004878:	b2d2      	uxtb	r2, r2
 800487a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004880:	1c5a      	adds	r2, r3, #1
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800488a:	2b00      	cmp	r3, #0
 800488c:	d00c      	beq.n	80048a8 <I2C_ITSlaveCplt+0x2c4>
    {
      hi2c->XferSize--;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004892:	3b01      	subs	r3, #1
 8004894:	b29a      	uxth	r2, r3
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800489e:	b29b      	uxth	r3, r3
 80048a0:	3b01      	subs	r3, #1
 80048a2:	b29a      	uxth	r2, r3
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048ac:	b29b      	uxth	r3, r3
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d005      	beq.n	80048be <I2C_ITSlaveCplt+0x2da>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048b6:	f043 0204 	orr.w	r2, r3, #4
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->PreviousState = I2C_STATE_NONE;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	2200      	movs	r2, #0
 80048c2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2200      	movs	r2, #0
 80048c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2200      	movs	r2, #0
 80048d0:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d010      	beq.n	80048fc <I2C_ITSlaveCplt+0x318>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048de:	4619      	mov	r1, r3
 80048e0:	6878      	ldr	r0, [r7, #4]
 80048e2:	f000 f899 	bl	8004a18 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80048ec:	b2db      	uxtb	r3, r3
 80048ee:	2b28      	cmp	r3, #40	; 0x28
 80048f0:	d138      	bne.n	8004964 <I2C_ITSlaveCplt+0x380>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 80048f2:	68f9      	ldr	r1, [r7, #12]
 80048f4:	6878      	ldr	r0, [r7, #4]
 80048f6:	f000 f83b 	bl	8004970 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80048fa:	e033      	b.n	8004964 <I2C_ITSlaveCplt+0x380>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004900:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004904:	d011      	beq.n	800492a <I2C_ITSlaveCplt+0x346>
    I2C_ITSlaveSeqCplt(hi2c);
 8004906:	6878      	ldr	r0, [r7, #4]
 8004908:	f7ff fd93 	bl	8004432 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	4a17      	ldr	r2, [pc, #92]	; (800496c <I2C_ITSlaveCplt+0x388>)
 8004910:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	2220      	movs	r2, #32
 8004916:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	2200      	movs	r2, #0
 800491e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8004922:	6878      	ldr	r0, [r7, #4]
 8004924:	f7ff f8d0 	bl	8003ac8 <HAL_I2C_ListenCpltCallback>
}
 8004928:	e01c      	b.n	8004964 <I2C_ITSlaveCplt+0x380>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004930:	b2db      	uxtb	r3, r3
 8004932:	2b22      	cmp	r3, #34	; 0x22
 8004934:	d10b      	bne.n	800494e <I2C_ITSlaveCplt+0x36a>
    hi2c->State = HAL_I2C_STATE_READY;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	2220      	movs	r2, #32
 800493a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	2200      	movs	r2, #0
 8004942:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004946:	6878      	ldr	r0, [r7, #4]
 8004948:	f7fc ffde 	bl	8001908 <HAL_I2C_SlaveRxCpltCallback>
}
 800494c:	e00a      	b.n	8004964 <I2C_ITSlaveCplt+0x380>
    hi2c->State = HAL_I2C_STATE_READY;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	2220      	movs	r2, #32
 8004952:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	2200      	movs	r2, #0
 800495a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800495e:	6878      	ldr	r0, [r7, #4]
 8004960:	f7ff f89a 	bl	8003a98 <HAL_I2C_SlaveTxCpltCallback>
}
 8004964:	bf00      	nop
 8004966:	3710      	adds	r7, #16
 8004968:	46bd      	mov	sp, r7
 800496a:	bd80      	pop	{r7, pc}
 800496c:	ffff0000 	.word	0xffff0000

08004970 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004970:	b580      	push	{r7, lr}
 8004972:	b082      	sub	sp, #8
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]
 8004978:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	4a25      	ldr	r2, [pc, #148]	; (8004a14 <I2C_ITListenCplt+0xa4>)
 800497e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2200      	movs	r2, #0
 8004984:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	2220      	movs	r2, #32
 800498a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	2200      	movs	r2, #0
 8004992:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	2200      	movs	r2, #0
 800499a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	089b      	lsrs	r3, r3, #2
 80049a0:	f003 0301 	and.w	r3, r3, #1
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d022      	beq.n	80049ee <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049b2:	b2d2      	uxtb	r2, r2
 80049b4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ba:	1c5a      	adds	r2, r3, #1
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d012      	beq.n	80049ee <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049cc:	3b01      	subs	r3, #1
 80049ce:	b29a      	uxth	r2, r3
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049d8:	b29b      	uxth	r3, r3
 80049da:	3b01      	subs	r3, #1
 80049dc:	b29a      	uxth	r2, r3
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049e6:	f043 0204 	orr.w	r2, r3, #4
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80049ee:	2107      	movs	r1, #7
 80049f0:	6878      	ldr	r0, [r7, #4]
 80049f2:	f000 fb43 	bl	800507c <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	2210      	movs	r2, #16
 80049fc:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	2200      	movs	r2, #0
 8004a02:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8004a06:	6878      	ldr	r0, [r7, #4]
 8004a08:	f7ff f85e 	bl	8003ac8 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8004a0c:	bf00      	nop
 8004a0e:	3708      	adds	r7, #8
 8004a10:	46bd      	mov	sp, r7
 8004a12:	bd80      	pop	{r7, pc}
 8004a14:	ffff0000 	.word	0xffff0000

08004a18 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	b084      	sub	sp, #16
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]
 8004a20:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004a28:	73fb      	strb	r3, [r7, #15]

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	4a55      	ldr	r2, [pc, #340]	; (8004b8c <I2C_ITError+0x174>)
 8004a36:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004a42:	683b      	ldr	r3, [r7, #0]
 8004a44:	431a      	orrs	r2, r3
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8004a4a:	7bfb      	ldrb	r3, [r7, #15]
 8004a4c:	2b28      	cmp	r3, #40	; 0x28
 8004a4e:	d005      	beq.n	8004a5c <I2C_ITError+0x44>
 8004a50:	7bfb      	ldrb	r3, [r7, #15]
 8004a52:	2b29      	cmp	r3, #41	; 0x29
 8004a54:	d002      	beq.n	8004a5c <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8004a56:	7bfb      	ldrb	r3, [r7, #15]
 8004a58:	2b2a      	cmp	r3, #42	; 0x2a
 8004a5a:	d10e      	bne.n	8004a7a <I2C_ITError+0x62>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004a5c:	2103      	movs	r1, #3
 8004a5e:	6878      	ldr	r0, [r7, #4]
 8004a60:	f000 fb0c 	bl	800507c <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2228      	movs	r2, #40	; 0x28
 8004a68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2200      	movs	r2, #0
 8004a70:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	4a46      	ldr	r2, [pc, #280]	; (8004b90 <I2C_ITError+0x178>)
 8004a76:	635a      	str	r2, [r3, #52]	; 0x34
 8004a78:	e013      	b.n	8004aa2 <I2C_ITError+0x8a>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004a7a:	2107      	movs	r1, #7
 8004a7c:	6878      	ldr	r0, [r7, #4]
 8004a7e:	f000 fafd 	bl	800507c <I2C_Disable_IRQ>

    /* If state is an abort treatment on goind, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004a88:	b2db      	uxtb	r3, r3
 8004a8a:	2b60      	cmp	r3, #96	; 0x60
 8004a8c:	d003      	beq.n	8004a96 <I2C_ITError+0x7e>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	2220      	movs	r2, #32
 8004a92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	2200      	movs	r2, #0
 8004a9a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004aac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004ab0:	d123      	bne.n	8004afa <I2C_ITError+0xe2>
  {
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	681a      	ldr	r2, [r3, #0]
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004ac0:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d05c      	beq.n	8004b84 <I2C_ITError+0x16c>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ace:	4a31      	ldr	r2, [pc, #196]	; (8004b94 <I2C_ITError+0x17c>)
 8004ad0:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	2200      	movs	r2, #0
 8004ad6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ade:	4618      	mov	r0, r3
 8004ae0:	f7fd ff6e 	bl	80029c0 <HAL_DMA_Abort_IT>
 8004ae4:	4603      	mov	r3, r0
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d04c      	beq.n	8004b84 <I2C_ITError+0x16c>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004aee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004af0:	687a      	ldr	r2, [r7, #4]
 8004af2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004af4:	4610      	mov	r0, r2
 8004af6:	4798      	blx	r3
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004af8:	e044      	b.n	8004b84 <I2C_ITError+0x16c>
  else if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004b04:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b08:	d123      	bne.n	8004b52 <I2C_ITError+0x13a>
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	681a      	ldr	r2, [r3, #0]
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004b18:	601a      	str	r2, [r3, #0]
    if (hi2c->hdmarx != NULL)
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d030      	beq.n	8004b84 <I2C_ITError+0x16c>
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b26:	4a1b      	ldr	r2, [pc, #108]	; (8004b94 <I2C_ITError+0x17c>)
 8004b28:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_UNLOCK(hi2c);
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b36:	4618      	mov	r0, r3
 8004b38:	f7fd ff42 	bl	80029c0 <HAL_DMA_Abort_IT>
 8004b3c:	4603      	mov	r3, r0
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d020      	beq.n	8004b84 <I2C_ITError+0x16c>
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b48:	687a      	ldr	r2, [r7, #4]
 8004b4a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004b4c:	4610      	mov	r0, r2
 8004b4e:	4798      	blx	r3
}
 8004b50:	e018      	b.n	8004b84 <I2C_ITError+0x16c>
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004b58:	b2db      	uxtb	r3, r3
 8004b5a:	2b60      	cmp	r3, #96	; 0x60
 8004b5c:	d10b      	bne.n	8004b76 <I2C_ITError+0x15e>
    hi2c->State = HAL_I2C_STATE_READY;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	2220      	movs	r2, #32
 8004b62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	2200      	movs	r2, #0
 8004b6a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_AbortCpltCallback(hi2c);
 8004b6e:	6878      	ldr	r0, [r7, #4]
 8004b70:	f7fe ffd2 	bl	8003b18 <HAL_I2C_AbortCpltCallback>
}
 8004b74:	e006      	b.n	8004b84 <I2C_ITError+0x16c>
    __HAL_UNLOCK(hi2c);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	2200      	movs	r2, #0
 8004b7a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8004b7e:	6878      	ldr	r0, [r7, #4]
 8004b80:	f7fe ffc0 	bl	8003b04 <HAL_I2C_ErrorCallback>
}
 8004b84:	bf00      	nop
 8004b86:	3710      	adds	r7, #16
 8004b88:	46bd      	mov	sp, r7
 8004b8a:	bd80      	pop	{r7, pc}
 8004b8c:	ffff0000 	.word	0xffff0000
 8004b90:	08003b2d 	.word	0x08003b2d
 8004b94:	08004be1 	.word	0x08004be1

08004b98 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004b98:	b480      	push	{r7}
 8004b9a:	b083      	sub	sp, #12
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	699b      	ldr	r3, [r3, #24]
 8004ba6:	f003 0302 	and.w	r3, r3, #2
 8004baa:	2b02      	cmp	r3, #2
 8004bac:	d103      	bne.n	8004bb6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	699b      	ldr	r3, [r3, #24]
 8004bbc:	f003 0301 	and.w	r3, r3, #1
 8004bc0:	2b01      	cmp	r3, #1
 8004bc2:	d007      	beq.n	8004bd4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	699a      	ldr	r2, [r3, #24]
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f042 0201 	orr.w	r2, r2, #1
 8004bd2:	619a      	str	r2, [r3, #24]
  }
}
 8004bd4:	bf00      	nop
 8004bd6:	370c      	adds	r7, #12
 8004bd8:	46bd      	mov	sp, r7
 8004bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bde:	4770      	bx	lr

08004be0 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004be0:	b580      	push	{r7, lr}
 8004be2:	b084      	sub	sp, #16
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bec:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  hi2c->hdmatx->XferAbortCallback = NULL;
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	651a      	str	r2, [r3, #80]	; 0x50
  hi2c->hdmarx->XferAbortCallback = NULL;
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	651a      	str	r2, [r3, #80]	; 0x50

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004c04:	b2db      	uxtb	r3, r3
 8004c06:	2b60      	cmp	r3, #96	; 0x60
 8004c08:	d107      	bne.n	8004c1a <I2C_DMAAbort+0x3a>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	2220      	movs	r2, #32
 8004c0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004c12:	68f8      	ldr	r0, [r7, #12]
 8004c14:	f7fe ff80 	bl	8003b18 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004c18:	e002      	b.n	8004c20 <I2C_DMAAbort+0x40>
    HAL_I2C_ErrorCallback(hi2c);
 8004c1a:	68f8      	ldr	r0, [r7, #12]
 8004c1c:	f7fe ff72 	bl	8003b04 <HAL_I2C_ErrorCallback>
}
 8004c20:	bf00      	nop
 8004c22:	3710      	adds	r7, #16
 8004c24:	46bd      	mov	sp, r7
 8004c26:	bd80      	pop	{r7, pc}

08004c28 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	b084      	sub	sp, #16
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	60f8      	str	r0, [r7, #12]
 8004c30:	60b9      	str	r1, [r7, #8]
 8004c32:	603b      	str	r3, [r7, #0]
 8004c34:	4613      	mov	r3, r2
 8004c36:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004c38:	e022      	b.n	8004c80 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c3a:	683b      	ldr	r3, [r7, #0]
 8004c3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c40:	d01e      	beq.n	8004c80 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c42:	f7fd fd43 	bl	80026cc <HAL_GetTick>
 8004c46:	4602      	mov	r2, r0
 8004c48:	69bb      	ldr	r3, [r7, #24]
 8004c4a:	1ad3      	subs	r3, r2, r3
 8004c4c:	683a      	ldr	r2, [r7, #0]
 8004c4e:	429a      	cmp	r2, r3
 8004c50:	d302      	bcc.n	8004c58 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004c52:	683b      	ldr	r3, [r7, #0]
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d113      	bne.n	8004c80 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c5c:	f043 0220 	orr.w	r2, r3, #32
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	2220      	movs	r2, #32
 8004c68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	2200      	movs	r2, #0
 8004c70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	2200      	movs	r2, #0
 8004c78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8004c7c:	2301      	movs	r3, #1
 8004c7e:	e00f      	b.n	8004ca0 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	699a      	ldr	r2, [r3, #24]
 8004c86:	68bb      	ldr	r3, [r7, #8]
 8004c88:	4013      	ands	r3, r2
 8004c8a:	68ba      	ldr	r2, [r7, #8]
 8004c8c:	429a      	cmp	r2, r3
 8004c8e:	bf0c      	ite	eq
 8004c90:	2301      	moveq	r3, #1
 8004c92:	2300      	movne	r3, #0
 8004c94:	b2db      	uxtb	r3, r3
 8004c96:	461a      	mov	r2, r3
 8004c98:	79fb      	ldrb	r3, [r7, #7]
 8004c9a:	429a      	cmp	r2, r3
 8004c9c:	d0cd      	beq.n	8004c3a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004c9e:	2300      	movs	r3, #0
}
 8004ca0:	4618      	mov	r0, r3
 8004ca2:	3710      	adds	r7, #16
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	bd80      	pop	{r7, pc}

08004ca8 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	b084      	sub	sp, #16
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	60f8      	str	r0, [r7, #12]
 8004cb0:	60b9      	str	r1, [r7, #8]
 8004cb2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004cb4:	e02c      	b.n	8004d10 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8004cb6:	687a      	ldr	r2, [r7, #4]
 8004cb8:	68b9      	ldr	r1, [r7, #8]
 8004cba:	68f8      	ldr	r0, [r7, #12]
 8004cbc:	f000 f8dc 	bl	8004e78 <I2C_IsAcknowledgeFailed>
 8004cc0:	4603      	mov	r3, r0
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d001      	beq.n	8004cca <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004cc6:	2301      	movs	r3, #1
 8004cc8:	e02a      	b.n	8004d20 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004cca:	68bb      	ldr	r3, [r7, #8]
 8004ccc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cd0:	d01e      	beq.n	8004d10 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004cd2:	f7fd fcfb 	bl	80026cc <HAL_GetTick>
 8004cd6:	4602      	mov	r2, r0
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	1ad3      	subs	r3, r2, r3
 8004cdc:	68ba      	ldr	r2, [r7, #8]
 8004cde:	429a      	cmp	r2, r3
 8004ce0:	d302      	bcc.n	8004ce8 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004ce2:	68bb      	ldr	r3, [r7, #8]
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d113      	bne.n	8004d10 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cec:	f043 0220 	orr.w	r2, r3, #32
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	2220      	movs	r2, #32
 8004cf8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	2200      	movs	r2, #0
 8004d00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	2200      	movs	r2, #0
 8004d08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004d0c:	2301      	movs	r3, #1
 8004d0e:	e007      	b.n	8004d20 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	699b      	ldr	r3, [r3, #24]
 8004d16:	f003 0302 	and.w	r3, r3, #2
 8004d1a:	2b02      	cmp	r3, #2
 8004d1c:	d1cb      	bne.n	8004cb6 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004d1e:	2300      	movs	r3, #0
}
 8004d20:	4618      	mov	r0, r3
 8004d22:	3710      	adds	r7, #16
 8004d24:	46bd      	mov	sp, r7
 8004d26:	bd80      	pop	{r7, pc}

08004d28 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004d28:	b580      	push	{r7, lr}
 8004d2a:	b084      	sub	sp, #16
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	60f8      	str	r0, [r7, #12]
 8004d30:	60b9      	str	r1, [r7, #8]
 8004d32:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004d34:	e028      	b.n	8004d88 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8004d36:	687a      	ldr	r2, [r7, #4]
 8004d38:	68b9      	ldr	r1, [r7, #8]
 8004d3a:	68f8      	ldr	r0, [r7, #12]
 8004d3c:	f000 f89c 	bl	8004e78 <I2C_IsAcknowledgeFailed>
 8004d40:	4603      	mov	r3, r0
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d001      	beq.n	8004d4a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004d46:	2301      	movs	r3, #1
 8004d48:	e026      	b.n	8004d98 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d4a:	f7fd fcbf 	bl	80026cc <HAL_GetTick>
 8004d4e:	4602      	mov	r2, r0
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	1ad3      	subs	r3, r2, r3
 8004d54:	68ba      	ldr	r2, [r7, #8]
 8004d56:	429a      	cmp	r2, r3
 8004d58:	d302      	bcc.n	8004d60 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004d5a:	68bb      	ldr	r3, [r7, #8]
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d113      	bne.n	8004d88 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d64:	f043 0220 	orr.w	r2, r3, #32
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	2220      	movs	r2, #32
 8004d70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	2200      	movs	r2, #0
 8004d78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	2200      	movs	r2, #0
 8004d80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004d84:	2301      	movs	r3, #1
 8004d86:	e007      	b.n	8004d98 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	699b      	ldr	r3, [r3, #24]
 8004d8e:	f003 0320 	and.w	r3, r3, #32
 8004d92:	2b20      	cmp	r3, #32
 8004d94:	d1cf      	bne.n	8004d36 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004d96:	2300      	movs	r3, #0
}
 8004d98:	4618      	mov	r0, r3
 8004d9a:	3710      	adds	r7, #16
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	bd80      	pop	{r7, pc}

08004da0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004da0:	b580      	push	{r7, lr}
 8004da2:	b084      	sub	sp, #16
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	60f8      	str	r0, [r7, #12]
 8004da8:	60b9      	str	r1, [r7, #8]
 8004daa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004dac:	e055      	b.n	8004e5a <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8004dae:	687a      	ldr	r2, [r7, #4]
 8004db0:	68b9      	ldr	r1, [r7, #8]
 8004db2:	68f8      	ldr	r0, [r7, #12]
 8004db4:	f000 f860 	bl	8004e78 <I2C_IsAcknowledgeFailed>
 8004db8:	4603      	mov	r3, r0
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d001      	beq.n	8004dc2 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004dbe:	2301      	movs	r3, #1
 8004dc0:	e053      	b.n	8004e6a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	699b      	ldr	r3, [r3, #24]
 8004dc8:	f003 0320 	and.w	r3, r3, #32
 8004dcc:	2b20      	cmp	r3, #32
 8004dce:	d129      	bne.n	8004e24 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	699b      	ldr	r3, [r3, #24]
 8004dd6:	f003 0304 	and.w	r3, r3, #4
 8004dda:	2b04      	cmp	r3, #4
 8004ddc:	d105      	bne.n	8004dea <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d001      	beq.n	8004dea <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8004de6:	2300      	movs	r3, #0
 8004de8:	e03f      	b.n	8004e6a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	2220      	movs	r2, #32
 8004df0:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	6859      	ldr	r1, [r3, #4]
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	681a      	ldr	r2, [r3, #0]
 8004dfc:	4b1d      	ldr	r3, [pc, #116]	; (8004e74 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 8004dfe:	400b      	ands	r3, r1
 8004e00:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	2200      	movs	r2, #0
 8004e06:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	2220      	movs	r2, #32
 8004e0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	2200      	movs	r2, #0
 8004e14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004e20:	2301      	movs	r3, #1
 8004e22:	e022      	b.n	8004e6a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e24:	f7fd fc52 	bl	80026cc <HAL_GetTick>
 8004e28:	4602      	mov	r2, r0
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	1ad3      	subs	r3, r2, r3
 8004e2e:	68ba      	ldr	r2, [r7, #8]
 8004e30:	429a      	cmp	r2, r3
 8004e32:	d302      	bcc.n	8004e3a <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 8004e34:	68bb      	ldr	r3, [r7, #8]
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d10f      	bne.n	8004e5a <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e3e:	f043 0220 	orr.w	r2, r3, #32
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	2220      	movs	r2, #32
 8004e4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	2200      	movs	r2, #0
 8004e52:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004e56:	2301      	movs	r3, #1
 8004e58:	e007      	b.n	8004e6a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	699b      	ldr	r3, [r3, #24]
 8004e60:	f003 0304 	and.w	r3, r3, #4
 8004e64:	2b04      	cmp	r3, #4
 8004e66:	d1a2      	bne.n	8004dae <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004e68:	2300      	movs	r3, #0
}
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	3710      	adds	r7, #16
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	bd80      	pop	{r7, pc}
 8004e72:	bf00      	nop
 8004e74:	fe00e800 	.word	0xfe00e800

08004e78 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	b084      	sub	sp, #16
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	60f8      	str	r0, [r7, #12]
 8004e80:	60b9      	str	r1, [r7, #8]
 8004e82:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	699b      	ldr	r3, [r3, #24]
 8004e8a:	f003 0310 	and.w	r3, r3, #16
 8004e8e:	2b10      	cmp	r3, #16
 8004e90:	d151      	bne.n	8004f36 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004e92:	e022      	b.n	8004eda <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004e94:	68bb      	ldr	r3, [r7, #8]
 8004e96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e9a:	d01e      	beq.n	8004eda <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e9c:	f7fd fc16 	bl	80026cc <HAL_GetTick>
 8004ea0:	4602      	mov	r2, r0
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	1ad3      	subs	r3, r2, r3
 8004ea6:	68ba      	ldr	r2, [r7, #8]
 8004ea8:	429a      	cmp	r2, r3
 8004eaa:	d302      	bcc.n	8004eb2 <I2C_IsAcknowledgeFailed+0x3a>
 8004eac:	68bb      	ldr	r3, [r7, #8]
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d113      	bne.n	8004eda <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004eb6:	f043 0220 	orr.w	r2, r3, #32
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	2220      	movs	r2, #32
 8004ec2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	2200      	movs	r2, #0
 8004eca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	2200      	movs	r2, #0
 8004ed2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8004ed6:	2301      	movs	r3, #1
 8004ed8:	e02e      	b.n	8004f38 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	699b      	ldr	r3, [r3, #24]
 8004ee0:	f003 0320 	and.w	r3, r3, #32
 8004ee4:	2b20      	cmp	r3, #32
 8004ee6:	d1d5      	bne.n	8004e94 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	2210      	movs	r2, #16
 8004eee:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	2220      	movs	r2, #32
 8004ef6:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004ef8:	68f8      	ldr	r0, [r7, #12]
 8004efa:	f7ff fe4d 	bl	8004b98 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	6859      	ldr	r1, [r3, #4]
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	681a      	ldr	r2, [r3, #0]
 8004f08:	4b0d      	ldr	r3, [pc, #52]	; (8004f40 <I2C_IsAcknowledgeFailed+0xc8>)
 8004f0a:	400b      	ands	r3, r1
 8004f0c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f12:	f043 0204 	orr.w	r2, r3, #4
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	2220      	movs	r2, #32
 8004f1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	2200      	movs	r2, #0
 8004f26:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8004f32:	2301      	movs	r3, #1
 8004f34:	e000      	b.n	8004f38 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8004f36:	2300      	movs	r3, #0
}
 8004f38:	4618      	mov	r0, r3
 8004f3a:	3710      	adds	r7, #16
 8004f3c:	46bd      	mov	sp, r7
 8004f3e:	bd80      	pop	{r7, pc}
 8004f40:	fe00e800 	.word	0xfe00e800

08004f44 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8004f44:	b480      	push	{r7}
 8004f46:	b085      	sub	sp, #20
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	60f8      	str	r0, [r7, #12]
 8004f4c:	607b      	str	r3, [r7, #4]
 8004f4e:	460b      	mov	r3, r1
 8004f50:	817b      	strh	r3, [r7, #10]
 8004f52:	4613      	mov	r3, r2
 8004f54:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	685a      	ldr	r2, [r3, #4]
 8004f5c:	69bb      	ldr	r3, [r7, #24]
 8004f5e:	0d5b      	lsrs	r3, r3, #21
 8004f60:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8004f64:	4b0d      	ldr	r3, [pc, #52]	; (8004f9c <I2C_TransferConfig+0x58>)
 8004f66:	430b      	orrs	r3, r1
 8004f68:	43db      	mvns	r3, r3
 8004f6a:	ea02 0103 	and.w	r1, r2, r3
 8004f6e:	897b      	ldrh	r3, [r7, #10]
 8004f70:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004f74:	7a7b      	ldrb	r3, [r7, #9]
 8004f76:	041b      	lsls	r3, r3, #16
 8004f78:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004f7c:	431a      	orrs	r2, r3
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	431a      	orrs	r2, r3
 8004f82:	69bb      	ldr	r3, [r7, #24]
 8004f84:	431a      	orrs	r2, r3
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	430a      	orrs	r2, r1
 8004f8c:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8004f8e:	bf00      	nop
 8004f90:	3714      	adds	r7, #20
 8004f92:	46bd      	mov	sp, r7
 8004f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f98:	4770      	bx	lr
 8004f9a:	bf00      	nop
 8004f9c:	03ff63ff 	.word	0x03ff63ff

08004fa0 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8004fa0:	b480      	push	{r7}
 8004fa2:	b085      	sub	sp, #20
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	6078      	str	r0, [r7, #4]
 8004fa8:	460b      	mov	r3, r1
 8004faa:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8004fac:	2300      	movs	r3, #0
 8004fae:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fb4:	4a2f      	ldr	r2, [pc, #188]	; (8005074 <I2C_Enable_IRQ+0xd4>)
 8004fb6:	4293      	cmp	r3, r2
 8004fb8:	d004      	beq.n	8004fc4 <I2C_Enable_IRQ+0x24>
      (hi2c->XferISR == I2C_Slave_ISR_DMA))
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8004fbe:	4a2e      	ldr	r2, [pc, #184]	; (8005078 <I2C_Enable_IRQ+0xd8>)
 8004fc0:	4293      	cmp	r3, r2
 8004fc2:	d124      	bne.n	800500e <I2C_Enable_IRQ+0x6e>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8004fc4:	887b      	ldrh	r3, [r7, #2]
 8004fc6:	f003 0304 	and.w	r3, r3, #4
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d003      	beq.n	8004fd6 <I2C_Enable_IRQ+0x36>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8004fd4:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_ERROR_IT) == I2C_XFER_ERROR_IT)
 8004fd6:	887b      	ldrh	r3, [r7, #2]
 8004fd8:	f003 0311 	and.w	r3, r3, #17
 8004fdc:	2b11      	cmp	r3, #17
 8004fde:	d103      	bne.n	8004fe8 <I2C_Enable_IRQ+0x48>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8004fe6:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_CPLT_IT) == I2C_XFER_CPLT_IT)
 8004fe8:	887b      	ldrh	r3, [r7, #2]
 8004fea:	f003 0312 	and.w	r3, r3, #18
 8004fee:	2b12      	cmp	r3, #18
 8004ff0:	d103      	bne.n	8004ffa <I2C_Enable_IRQ+0x5a>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	f043 0320 	orr.w	r3, r3, #32
 8004ff8:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RELOAD_IT) == I2C_XFER_RELOAD_IT)
 8004ffa:	887b      	ldrh	r3, [r7, #2]
 8004ffc:	f003 0312 	and.w	r3, r3, #18
 8005000:	2b12      	cmp	r3, #18
 8005002:	d128      	bne.n	8005056 <I2C_Enable_IRQ+0xb6>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800500a:	60fb      	str	r3, [r7, #12]
    if ((InterruptRequest & I2C_XFER_RELOAD_IT) == I2C_XFER_RELOAD_IT)
 800500c:	e023      	b.n	8005056 <I2C_Enable_IRQ+0xb6>
    }
  }
  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800500e:	887b      	ldrh	r3, [r7, #2]
 8005010:	f003 0304 	and.w	r3, r3, #4
 8005014:	2b00      	cmp	r3, #0
 8005016:	d003      	beq.n	8005020 <I2C_Enable_IRQ+0x80>
    {
      /* Enable ERR, STOP, NACK, and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800501e:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8005020:	887b      	ldrh	r3, [r7, #2]
 8005022:	f003 0301 	and.w	r3, r3, #1
 8005026:	2b00      	cmp	r3, #0
 8005028:	d003      	beq.n	8005032 <I2C_Enable_IRQ+0x92>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 8005030:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8005032:	887b      	ldrh	r3, [r7, #2]
 8005034:	f003 0302 	and.w	r3, r3, #2
 8005038:	2b00      	cmp	r3, #0
 800503a:	d003      	beq.n	8005044 <I2C_Enable_IRQ+0xa4>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 8005042:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_CPLT_IT) == I2C_XFER_CPLT_IT)
 8005044:	887b      	ldrh	r3, [r7, #2]
 8005046:	f003 0312 	and.w	r3, r3, #18
 800504a:	2b12      	cmp	r3, #18
 800504c:	d103      	bne.n	8005056 <I2C_Enable_IRQ+0xb6>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	f043 0320 	orr.w	r3, r3, #32
 8005054:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	6819      	ldr	r1, [r3, #0]
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	68fa      	ldr	r2, [r7, #12]
 8005062:	430a      	orrs	r2, r1
 8005064:	601a      	str	r2, [r3, #0]
}
 8005066:	bf00      	nop
 8005068:	3714      	adds	r7, #20
 800506a:	46bd      	mov	sp, r7
 800506c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005070:	4770      	bx	lr
 8005072:	bf00      	nop
 8005074:	08003d3b 	.word	0x08003d3b
 8005078:	08003f21 	.word	0x08003f21

0800507c <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800507c:	b480      	push	{r7}
 800507e:	b085      	sub	sp, #20
 8005080:	af00      	add	r7, sp, #0
 8005082:	6078      	str	r0, [r7, #4]
 8005084:	460b      	mov	r3, r1
 8005086:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8005088:	2300      	movs	r3, #0
 800508a:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800508c:	887b      	ldrh	r3, [r7, #2]
 800508e:	f003 0301 	and.w	r3, r3, #1
 8005092:	2b00      	cmp	r3, #0
 8005094:	d00f      	beq.n	80050b6 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 800509c:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80050a4:	b2db      	uxtb	r3, r3
 80050a6:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80050aa:	2b28      	cmp	r3, #40	; 0x28
 80050ac:	d003      	beq.n	80050b6 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 80050b4:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80050b6:	887b      	ldrh	r3, [r7, #2]
 80050b8:	f003 0302 	and.w	r3, r3, #2
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d00f      	beq.n	80050e0 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 80050c6:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80050ce:	b2db      	uxtb	r3, r3
 80050d0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80050d4:	2b28      	cmp	r3, #40	; 0x28
 80050d6:	d003      	beq.n	80050e0 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 80050de:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80050e0:	887b      	ldrh	r3, [r7, #2]
 80050e2:	f003 0304 	and.w	r3, r3, #4
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d003      	beq.n	80050f2 <I2C_Disable_IRQ+0x76>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 80050f0:	60fb      	str	r3, [r7, #12]
  }

  if ((InterruptRequest & I2C_XFER_ERROR_IT) == I2C_XFER_ERROR_IT)
 80050f2:	887b      	ldrh	r3, [r7, #2]
 80050f4:	f003 0311 	and.w	r3, r3, #17
 80050f8:	2b11      	cmp	r3, #17
 80050fa:	d103      	bne.n	8005104 <I2C_Disable_IRQ+0x88>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8005102:	60fb      	str	r3, [r7, #12]
  }

  if ((InterruptRequest & I2C_XFER_CPLT_IT) == I2C_XFER_CPLT_IT)
 8005104:	887b      	ldrh	r3, [r7, #2]
 8005106:	f003 0312 	and.w	r3, r3, #18
 800510a:	2b12      	cmp	r3, #18
 800510c:	d103      	bne.n	8005116 <I2C_Disable_IRQ+0x9a>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	f043 0320 	orr.w	r3, r3, #32
 8005114:	60fb      	str	r3, [r7, #12]
  }

  if ((InterruptRequest & I2C_XFER_RELOAD_IT) == I2C_XFER_RELOAD_IT)
 8005116:	887b      	ldrh	r3, [r7, #2]
 8005118:	f003 0312 	and.w	r3, r3, #18
 800511c:	2b12      	cmp	r3, #18
 800511e:	d103      	bne.n	8005128 <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005126:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	6819      	ldr	r1, [r3, #0]
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	43da      	mvns	r2, r3
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	400a      	ands	r2, r1
 8005138:	601a      	str	r2, [r3, #0]
}
 800513a:	bf00      	nop
 800513c:	3714      	adds	r7, #20
 800513e:	46bd      	mov	sp, r7
 8005140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005144:	4770      	bx	lr

08005146 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005146:	b480      	push	{r7}
 8005148:	b083      	sub	sp, #12
 800514a:	af00      	add	r7, sp, #0
 800514c:	6078      	str	r0, [r7, #4]
 800514e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005156:	b2db      	uxtb	r3, r3
 8005158:	2b20      	cmp	r3, #32
 800515a:	d138      	bne.n	80051ce <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005162:	2b01      	cmp	r3, #1
 8005164:	d101      	bne.n	800516a <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005166:	2302      	movs	r3, #2
 8005168:	e032      	b.n	80051d0 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	2201      	movs	r2, #1
 800516e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	2224      	movs	r2, #36	; 0x24
 8005176:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	681a      	ldr	r2, [r3, #0]
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f022 0201 	bic.w	r2, r2, #1
 8005188:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	681a      	ldr	r2, [r3, #0]
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005198:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	6819      	ldr	r1, [r3, #0]
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	683a      	ldr	r2, [r7, #0]
 80051a6:	430a      	orrs	r2, r1
 80051a8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	681a      	ldr	r2, [r3, #0]
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f042 0201 	orr.w	r2, r2, #1
 80051b8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	2220      	movs	r2, #32
 80051be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	2200      	movs	r2, #0
 80051c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80051ca:	2300      	movs	r3, #0
 80051cc:	e000      	b.n	80051d0 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80051ce:	2302      	movs	r3, #2
  }
}
 80051d0:	4618      	mov	r0, r3
 80051d2:	370c      	adds	r7, #12
 80051d4:	46bd      	mov	sp, r7
 80051d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051da:	4770      	bx	lr

080051dc <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80051dc:	b480      	push	{r7}
 80051de:	b085      	sub	sp, #20
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	6078      	str	r0, [r7, #4]
 80051e4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80051ec:	b2db      	uxtb	r3, r3
 80051ee:	2b20      	cmp	r3, #32
 80051f0:	d139      	bne.n	8005266 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80051f8:	2b01      	cmp	r3, #1
 80051fa:	d101      	bne.n	8005200 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80051fc:	2302      	movs	r3, #2
 80051fe:	e033      	b.n	8005268 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2201      	movs	r2, #1
 8005204:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2224      	movs	r2, #36	; 0x24
 800520c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	681a      	ldr	r2, [r3, #0]
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f022 0201 	bic.w	r2, r2, #1
 800521e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800522e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005230:	683b      	ldr	r3, [r7, #0]
 8005232:	021b      	lsls	r3, r3, #8
 8005234:	68fa      	ldr	r2, [r7, #12]
 8005236:	4313      	orrs	r3, r2
 8005238:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	68fa      	ldr	r2, [r7, #12]
 8005240:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	681a      	ldr	r2, [r3, #0]
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f042 0201 	orr.w	r2, r2, #1
 8005250:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	2220      	movs	r2, #32
 8005256:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	2200      	movs	r2, #0
 800525e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005262:	2300      	movs	r3, #0
 8005264:	e000      	b.n	8005268 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005266:	2302      	movs	r3, #2
  }
}
 8005268:	4618      	mov	r0, r3
 800526a:	3714      	adds	r7, #20
 800526c:	46bd      	mov	sp, r7
 800526e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005272:	4770      	bx	lr

08005274 <HAL_JPEG_Init>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_JPEG_Init(JPEG_HandleTypeDef *hjpeg)
{
 8005274:	b580      	push	{r7, lr}
 8005276:	b082      	sub	sp, #8
 8005278:	af00      	add	r7, sp, #0
 800527a:	6078      	str	r0, [r7, #4]
    99,  99,  99,  99,  99,  99,  99,  99,
    99,  99,  99,  99,  99,  99,  99,  99
  };

  /* Check the JPEG handle allocation */
  if (hjpeg == NULL)
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2b00      	cmp	r3, #0
 8005280:	d101      	bne.n	8005286 <HAL_JPEG_Init+0x12>
  {
    return HAL_ERROR;
 8005282:	2301      	movs	r3, #1
 8005284:	e070      	b.n	8005368 <HAL_JPEG_Init+0xf4>

    /* Init the low level hardware */
    hjpeg->MspInitCallback(hjpeg);
  }
#else
  if (hjpeg->State == HAL_JPEG_STATE_RESET)
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800528c:	b2db      	uxtb	r3, r3
 800528e:	2b00      	cmp	r3, #0
 8005290:	d106      	bne.n	80052a0 <HAL_JPEG_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hjpeg->Lock = HAL_UNLOCKED;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	2200      	movs	r2, #0
 8005296:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

    /* Init the low level hardware : GPIO, CLOCK */
    HAL_JPEG_MspInit(hjpeg);
 800529a:	6878      	ldr	r0, [r7, #4]
 800529c:	f7fc fc70 	bl	8001b80 <HAL_JPEG_MspInit>
  }
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

  /* Change the JPEG state */
  hjpeg->State = HAL_JPEG_STATE_BUSY;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	2202      	movs	r2, #2
 80052a4:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

  /* Start the JPEG Core*/
  __HAL_JPEG_ENABLE(hjpeg);
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	f042 0201 	orr.w	r2, r2, #1
 80052b6:	631a      	str	r2, [r3, #48]	; 0x30

  /* Stop the JPEG encoding/decoding process*/
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	681a      	ldr	r2, [r3, #0]
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f022 0201 	bic.w	r2, r2, #1
 80052c6:	601a      	str	r2, [r3, #0]

  /* Disable All Interrupts */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f022 027e 	bic.w	r2, r2, #126	; 0x7e
 80052d6:	631a      	str	r2, [r3, #48]	; 0x30


  /* Flush input and output FIFOs*/
  hjpeg->Instance->CR |= JPEG_CR_IFF;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80052e6:	631a      	str	r2, [r3, #48]	; 0x30
  hjpeg->Instance->CR |= JPEG_CR_OFF;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80052f6:	631a      	str	r2, [r3, #48]	; 0x30

  /* Clear all flags */
  __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8005306:	639a      	str	r2, [r3, #56]	; 0x38

  /* init default quantization tables*/
  hjpeg->QuantTable0 = (uint8_t *)((uint32_t)JPEG_LUM_QuantTable);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	4a19      	ldr	r2, [pc, #100]	; (8005370 <HAL_JPEG_Init+0xfc>)
 800530c:	63da      	str	r2, [r3, #60]	; 0x3c
  hjpeg->QuantTable1 = (uint8_t *)((uint32_t)JPEG_CHROM_QuantTable);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	4a18      	ldr	r2, [pc, #96]	; (8005374 <HAL_JPEG_Init+0x100>)
 8005312:	641a      	str	r2, [r3, #64]	; 0x40
  hjpeg->QuantTable2 = NULL;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2200      	movs	r2, #0
 8005318:	645a      	str	r2, [r3, #68]	; 0x44
  hjpeg->QuantTable3 = NULL;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	2200      	movs	r2, #0
 800531e:	649a      	str	r2, [r3, #72]	; 0x48

  /* init the default Huffman tables*/
  if (JPEG_Set_HuffEnc_Mem(hjpeg) != HAL_OK)
 8005320:	6878      	ldr	r0, [r7, #4]
 8005322:	f000 fc95 	bl	8005c50 <JPEG_Set_HuffEnc_Mem>
 8005326:	4603      	mov	r3, r0
 8005328:	2b00      	cmp	r3, #0
 800532a:	d004      	beq.n	8005336 <HAL_JPEG_Init+0xc2>
  {
    hjpeg->ErrorCode = HAL_JPEG_ERROR_HUFF_TABLE;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2201      	movs	r2, #1
 8005330:	651a      	str	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8005332:	2301      	movs	r3, #1
 8005334:	e018      	b.n	8005368 <HAL_JPEG_Init+0xf4>
  }

  /* Enable header processing*/
  hjpeg->Instance->CONFR1 |= JPEG_CONFR1_HDR;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	685a      	ldr	r2, [r3, #4]
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005344:	605a      	str	r2, [r3, #4]

  /* Reset JpegInCount and JpegOutCount */
  hjpeg->JpegInCount = 0;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	2200      	movs	r2, #0
 800534a:	621a      	str	r2, [r3, #32]
  hjpeg->JpegOutCount = 0;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	2200      	movs	r2, #0
 8005350:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change the JPEG state */
  hjpeg->State = HAL_JPEG_STATE_READY;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	2201      	movs	r2, #1
 8005356:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

  /* Reset the JPEG ErrorCode */
  hjpeg->ErrorCode = HAL_JPEG_ERROR_NONE;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	2200      	movs	r2, #0
 800535e:	651a      	str	r2, [r3, #80]	; 0x50

  /*Clear the context filelds*/
  hjpeg->Context = 0;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2200      	movs	r2, #0
 8005364:	655a      	str	r2, [r3, #84]	; 0x54

  /* Return function status */
  return HAL_OK;
 8005366:	2300      	movs	r3, #0
}
 8005368:	4618      	mov	r0, r3
 800536a:	3708      	adds	r7, #8
 800536c:	46bd      	mov	sp, r7
 800536e:	bd80      	pop	{r7, pc}
 8005370:	0800f2a0 	.word	0x0800f2a0
 8005374:	0800f2e0 	.word	0x0800f2e0

08005378 <HAL_JPEG_GetInfo>:
  * @param  pInfo pointer to a JPEG_ConfTypeDef structure that contains
  *         The JPEG decoded header informations
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_JPEG_GetInfo(JPEG_HandleTypeDef *hjpeg, JPEG_ConfTypeDef *pInfo)
{
 8005378:	b580      	push	{r7, lr}
 800537a:	b086      	sub	sp, #24
 800537c:	af00      	add	r7, sp, #0
 800537e:	6078      	str	r0, [r7, #4]
 8005380:	6039      	str	r1, [r7, #0]
  uint32_t yblockNb, cBblockNb, cRblockNb;

  /* Check the JPEG handle allocation */
  if ((hjpeg == NULL) || (pInfo == NULL))
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	2b00      	cmp	r3, #0
 8005386:	d002      	beq.n	800538e <HAL_JPEG_GetInfo+0x16>
 8005388:	683b      	ldr	r3, [r7, #0]
 800538a:	2b00      	cmp	r3, #0
 800538c:	d101      	bne.n	8005392 <HAL_JPEG_GetInfo+0x1a>
  {
    return HAL_ERROR;
 800538e:	2301      	movs	r3, #1
 8005390:	e083      	b.n	800549a <HAL_JPEG_GetInfo+0x122>
  }

  /*Read the conf parameters */
  if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == JPEG_CONFR1_NF_1)
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	685b      	ldr	r3, [r3, #4]
 8005398:	f003 0303 	and.w	r3, r3, #3
 800539c:	2b02      	cmp	r3, #2
 800539e:	d103      	bne.n	80053a8 <HAL_JPEG_GetInfo+0x30>
  {
    pInfo->ColorSpace = JPEG_YCBCR_COLORSPACE;
 80053a0:	683b      	ldr	r3, [r7, #0]
 80053a2:	2210      	movs	r2, #16
 80053a4:	601a      	str	r2, [r3, #0]
 80053a6:	e017      	b.n	80053d8 <HAL_JPEG_GetInfo+0x60>
  }
  else if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == 0UL)
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	685b      	ldr	r3, [r3, #4]
 80053ae:	f003 0303 	and.w	r3, r3, #3
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d103      	bne.n	80053be <HAL_JPEG_GetInfo+0x46>
  {
    pInfo->ColorSpace = JPEG_GRAYSCALE_COLORSPACE;
 80053b6:	683b      	ldr	r3, [r7, #0]
 80053b8:	2200      	movs	r2, #0
 80053ba:	601a      	str	r2, [r3, #0]
 80053bc:	e00c      	b.n	80053d8 <HAL_JPEG_GetInfo+0x60>
  }
  else if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == JPEG_CONFR1_NF)
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	685b      	ldr	r3, [r3, #4]
 80053c4:	f003 0303 	and.w	r3, r3, #3
 80053c8:	2b03      	cmp	r3, #3
 80053ca:	d103      	bne.n	80053d4 <HAL_JPEG_GetInfo+0x5c>
  {
    pInfo->ColorSpace = JPEG_CMYK_COLORSPACE;
 80053cc:	683b      	ldr	r3, [r7, #0]
 80053ce:	2230      	movs	r2, #48	; 0x30
 80053d0:	601a      	str	r2, [r3, #0]
 80053d2:	e001      	b.n	80053d8 <HAL_JPEG_GetInfo+0x60>
  }
  else
  {
    return HAL_ERROR;
 80053d4:	2301      	movs	r3, #1
 80053d6:	e060      	b.n	800549a <HAL_JPEG_GetInfo+0x122>
  }

  pInfo->ImageHeight = (hjpeg->Instance->CONFR1 & 0xFFFF0000UL) >> 16;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	685b      	ldr	r3, [r3, #4]
 80053de:	0c1b      	lsrs	r3, r3, #16
 80053e0:	b29a      	uxth	r2, r3
 80053e2:	683b      	ldr	r3, [r7, #0]
 80053e4:	609a      	str	r2, [r3, #8]
  pInfo->ImageWidth  = (hjpeg->Instance->CONFR3 & 0xFFFF0000UL) >> 16;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	68db      	ldr	r3, [r3, #12]
 80053ec:	0c1b      	lsrs	r3, r3, #16
 80053ee:	b29a      	uxth	r2, r3
 80053f0:	683b      	ldr	r3, [r7, #0]
 80053f2:	60da      	str	r2, [r3, #12]

  if ((pInfo->ColorSpace == JPEG_YCBCR_COLORSPACE) || (pInfo->ColorSpace == JPEG_CMYK_COLORSPACE))
 80053f4:	683b      	ldr	r3, [r7, #0]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	2b10      	cmp	r3, #16
 80053fa:	d003      	beq.n	8005404 <HAL_JPEG_GetInfo+0x8c>
 80053fc:	683b      	ldr	r3, [r7, #0]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	2b30      	cmp	r3, #48	; 0x30
 8005402:	d140      	bne.n	8005486 <HAL_JPEG_GetInfo+0x10e>
  {
    yblockNb  = (hjpeg->Instance->CONFR4 & JPEG_CONFR4_NB) >> 4;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	691b      	ldr	r3, [r3, #16]
 800540a:	091b      	lsrs	r3, r3, #4
 800540c:	f003 030f 	and.w	r3, r3, #15
 8005410:	617b      	str	r3, [r7, #20]
    cBblockNb = (hjpeg->Instance->CONFR5 & JPEG_CONFR5_NB) >> 4;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	695b      	ldr	r3, [r3, #20]
 8005418:	091b      	lsrs	r3, r3, #4
 800541a:	f003 030f 	and.w	r3, r3, #15
 800541e:	613b      	str	r3, [r7, #16]
    cRblockNb = (hjpeg->Instance->CONFR6 & JPEG_CONFR6_NB) >> 4;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	699b      	ldr	r3, [r3, #24]
 8005426:	091b      	lsrs	r3, r3, #4
 8005428:	f003 030f 	and.w	r3, r3, #15
 800542c:	60fb      	str	r3, [r7, #12]

    if ((yblockNb == 1UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 800542e:	697b      	ldr	r3, [r7, #20]
 8005430:	2b01      	cmp	r3, #1
 8005432:	d109      	bne.n	8005448 <HAL_JPEG_GetInfo+0xd0>
 8005434:	693b      	ldr	r3, [r7, #16]
 8005436:	2b00      	cmp	r3, #0
 8005438:	d106      	bne.n	8005448 <HAL_JPEG_GetInfo+0xd0>
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	2b00      	cmp	r3, #0
 800543e:	d103      	bne.n	8005448 <HAL_JPEG_GetInfo+0xd0>
    {
      pInfo->ChromaSubsampling = JPEG_422_SUBSAMPLING; /*16x8 block*/
 8005440:	683b      	ldr	r3, [r7, #0]
 8005442:	2202      	movs	r2, #2
 8005444:	605a      	str	r2, [r3, #4]
 8005446:	e01d      	b.n	8005484 <HAL_JPEG_GetInfo+0x10c>
    }
    else if ((yblockNb == 0UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 8005448:	697b      	ldr	r3, [r7, #20]
 800544a:	2b00      	cmp	r3, #0
 800544c:	d109      	bne.n	8005462 <HAL_JPEG_GetInfo+0xea>
 800544e:	693b      	ldr	r3, [r7, #16]
 8005450:	2b00      	cmp	r3, #0
 8005452:	d106      	bne.n	8005462 <HAL_JPEG_GetInfo+0xea>
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	2b00      	cmp	r3, #0
 8005458:	d103      	bne.n	8005462 <HAL_JPEG_GetInfo+0xea>
    {
      pInfo->ChromaSubsampling = JPEG_444_SUBSAMPLING;
 800545a:	683b      	ldr	r3, [r7, #0]
 800545c:	2200      	movs	r2, #0
 800545e:	605a      	str	r2, [r3, #4]
 8005460:	e010      	b.n	8005484 <HAL_JPEG_GetInfo+0x10c>
    }
    else if ((yblockNb == 3UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 8005462:	697b      	ldr	r3, [r7, #20]
 8005464:	2b03      	cmp	r3, #3
 8005466:	d109      	bne.n	800547c <HAL_JPEG_GetInfo+0x104>
 8005468:	693b      	ldr	r3, [r7, #16]
 800546a:	2b00      	cmp	r3, #0
 800546c:	d106      	bne.n	800547c <HAL_JPEG_GetInfo+0x104>
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	2b00      	cmp	r3, #0
 8005472:	d103      	bne.n	800547c <HAL_JPEG_GetInfo+0x104>
    {
      pInfo->ChromaSubsampling = JPEG_420_SUBSAMPLING;
 8005474:	683b      	ldr	r3, [r7, #0]
 8005476:	2201      	movs	r2, #1
 8005478:	605a      	str	r2, [r3, #4]
 800547a:	e003      	b.n	8005484 <HAL_JPEG_GetInfo+0x10c>
    }
    else /*Default is 4:4:4*/
    {
      pInfo->ChromaSubsampling = JPEG_444_SUBSAMPLING;
 800547c:	683b      	ldr	r3, [r7, #0]
 800547e:	2200      	movs	r2, #0
 8005480:	605a      	str	r2, [r3, #4]
    if ((yblockNb == 1UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 8005482:	e003      	b.n	800548c <HAL_JPEG_GetInfo+0x114>
 8005484:	e002      	b.n	800548c <HAL_JPEG_GetInfo+0x114>
    }
  }
  else
  {
    pInfo->ChromaSubsampling = JPEG_444_SUBSAMPLING;
 8005486:	683b      	ldr	r3, [r7, #0]
 8005488:	2200      	movs	r2, #0
 800548a:	605a      	str	r2, [r3, #4]
  }

  pInfo->ImageQuality = JPEG_GetQuality(hjpeg);
 800548c:	6878      	ldr	r0, [r7, #4]
 800548e:	f001 f985 	bl	800679c <JPEG_GetQuality>
 8005492:	4602      	mov	r2, r0
 8005494:	683b      	ldr	r3, [r7, #0]
 8005496:	611a      	str	r2, [r3, #16]

  /* Return function status */
  return HAL_OK;
 8005498:	2300      	movs	r3, #0
}
 800549a:	4618      	mov	r0, r3
 800549c:	3718      	adds	r7, #24
 800549e:	46bd      	mov	sp, r7
 80054a0:	bd80      	pop	{r7, pc}

080054a2 <HAL_JPEG_Decode>:
  * @param  Timeout Specify Timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_JPEG_Decode(JPEG_HandleTypeDef *hjpeg, uint8_t *pDataIn, uint32_t InDataLength,
                                   uint8_t *pDataOutMCU, uint32_t OutDataLength, uint32_t Timeout)
{
 80054a2:	b580      	push	{r7, lr}
 80054a4:	b086      	sub	sp, #24
 80054a6:	af00      	add	r7, sp, #0
 80054a8:	60f8      	str	r0, [r7, #12]
 80054aa:	60b9      	str	r1, [r7, #8]
 80054ac:	607a      	str	r2, [r7, #4]
 80054ae:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param((InDataLength >= 4UL));
  assert_param((OutDataLength >= 4UL));

  /* Check In/out buffer allocation and size */
  if ((hjpeg == NULL) || (pDataIn == NULL) || (pDataOutMCU == NULL))
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d005      	beq.n	80054c2 <HAL_JPEG_Decode+0x20>
 80054b6:	68bb      	ldr	r3, [r7, #8]
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d002      	beq.n	80054c2 <HAL_JPEG_Decode+0x20>
 80054bc:	683b      	ldr	r3, [r7, #0]
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d101      	bne.n	80054c6 <HAL_JPEG_Decode+0x24>
  {
    return HAL_ERROR;
 80054c2:	2301      	movs	r3, #1
 80054c4:	e071      	b.n	80055aa <HAL_JPEG_Decode+0x108>
  }

  /* Process Locked */
  __HAL_LOCK(hjpeg);
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80054cc:	2b01      	cmp	r3, #1
 80054ce:	d101      	bne.n	80054d4 <HAL_JPEG_Decode+0x32>
 80054d0:	2302      	movs	r3, #2
 80054d2:	e06a      	b.n	80055aa <HAL_JPEG_Decode+0x108>
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	2201      	movs	r2, #1
 80054d8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  /* Get tick */
  tickstart = HAL_GetTick();
 80054dc:	f7fd f8f6 	bl	80026cc <HAL_GetTick>
 80054e0:	6178      	str	r0, [r7, #20]

  if (hjpeg->State == HAL_JPEG_STATE_READY)
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 80054e8:	b2db      	uxtb	r3, r3
 80054ea:	2b01      	cmp	r3, #1
 80054ec:	d158      	bne.n	80055a0 <HAL_JPEG_Decode+0xfe>
  {
    /*Change JPEG state*/
    hjpeg->State = HAL_JPEG_STATE_BUSY_DECODING;
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	2204      	movs	r2, #4
 80054f2:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

    /*Set the Context to Decode with Polling*/
    /*Set the Context to Encode with Polling*/
    hjpeg->Context &= ~(JPEG_CONTEXT_OPERATION_MASK | JPEG_CONTEXT_METHOD_MASK);
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054fa:	f023 020f 	bic.w	r2, r3, #15
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	655a      	str	r2, [r3, #84]	; 0x54
    hjpeg->Context |= (JPEG_CONTEXT_DECODE | JPEG_CONTEXT_POLLING);
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005506:	f043 0206 	orr.w	r2, r3, #6
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	655a      	str	r2, [r3, #84]	; 0x54

    /*Store In/out buffers pointers and size*/
    hjpeg->pJpegInBuffPtr = pDataIn;
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	68ba      	ldr	r2, [r7, #8]
 8005512:	619a      	str	r2, [r3, #24]
    hjpeg->pJpegOutBuffPtr = pDataOutMCU;
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	683a      	ldr	r2, [r7, #0]
 8005518:	61da      	str	r2, [r3, #28]
    hjpeg->InDataLength = InDataLength - (InDataLength % 4UL);    /*In Data length must be multiple of 4 Bytes (1 word)*/
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	f023 0203 	bic.w	r2, r3, #3
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	629a      	str	r2, [r3, #40]	; 0x28
    hjpeg->OutDataLength = OutDataLength - (OutDataLength % 4UL); /*Out Data length must be multiple of 4 Bytes (1 word)*/
 8005524:	6a3b      	ldr	r3, [r7, #32]
 8005526:	f023 0203 	bic.w	r2, r3, #3
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	62da      	str	r2, [r3, #44]	; 0x2c

    /*Reset In/out data counter */
    hjpeg->JpegInCount = 0;
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	2200      	movs	r2, #0
 8005532:	621a      	str	r2, [r3, #32]
    hjpeg->JpegOutCount = 0;
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	2200      	movs	r2, #0
 8005538:	625a      	str	r2, [r3, #36]	; 0x24

    /*Init decoding process*/
    JPEG_Init_Process(hjpeg);
 800553a:	68f8      	ldr	r0, [r7, #12]
 800553c:	f000 fe0a 	bl	8006154 <JPEG_Init_Process>

    /*JPEG data processing : In/Out FIFO transfer*/
    while ((JPEG_Process(hjpeg) == JPEG_PROCESS_ONGOING))
 8005540:	e01e      	b.n	8005580 <HAL_JPEG_Decode+0xde>
    {
      if (Timeout != HAL_MAX_DELAY)
 8005542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005544:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005548:	d01a      	beq.n	8005580 <HAL_JPEG_Decode+0xde>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 800554a:	f7fd f8bf 	bl	80026cc <HAL_GetTick>
 800554e:	4602      	mov	r2, r0
 8005550:	697b      	ldr	r3, [r7, #20]
 8005552:	1ad3      	subs	r3, r2, r3
 8005554:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005556:	429a      	cmp	r2, r3
 8005558:	d302      	bcc.n	8005560 <HAL_JPEG_Decode+0xbe>
 800555a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800555c:	2b00      	cmp	r3, #0
 800555e:	d10f      	bne.n	8005580 <HAL_JPEG_Decode+0xde>
        {

          /* Update error code */
          hjpeg->ErrorCode |= HAL_JPEG_ERROR_TIMEOUT;
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005564:	f043 0208 	orr.w	r2, r3, #8
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	651a      	str	r2, [r3, #80]	; 0x50

          /* Process Unlocked */
          __HAL_UNLOCK(hjpeg);
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	2200      	movs	r2, #0
 8005570:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

          /*Change JPEG state*/
          hjpeg->State = HAL_JPEG_STATE_READY;
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	2201      	movs	r2, #1
 8005578:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

          return HAL_TIMEOUT;
 800557c:	2303      	movs	r3, #3
 800557e:	e014      	b.n	80055aa <HAL_JPEG_Decode+0x108>
    while ((JPEG_Process(hjpeg) == JPEG_PROCESS_ONGOING))
 8005580:	68f8      	ldr	r0, [r7, #12]
 8005582:	f000 fe5b 	bl	800623c <JPEG_Process>
 8005586:	4603      	mov	r3, r0
 8005588:	2b00      	cmp	r3, #0
 800558a:	d0da      	beq.n	8005542 <HAL_JPEG_Decode+0xa0>
        }
      }
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hjpeg);
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	2200      	movs	r2, #0
 8005590:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

    /*Change JPEG state*/
    hjpeg->State = HAL_JPEG_STATE_READY;
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	2201      	movs	r2, #1
 8005598:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
    __HAL_UNLOCK(hjpeg);

    return HAL_BUSY;
  }
  /* Return function status */
  return HAL_OK;
 800559c:	2300      	movs	r3, #0
 800559e:	e004      	b.n	80055aa <HAL_JPEG_Decode+0x108>
    __HAL_UNLOCK(hjpeg);
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	2200      	movs	r2, #0
 80055a4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    return HAL_BUSY;
 80055a8:	2302      	movs	r3, #2
}
 80055aa:	4618      	mov	r0, r3
 80055ac:	3718      	adds	r7, #24
 80055ae:	46bd      	mov	sp, r7
 80055b0:	bd80      	pop	{r7, pc}

080055b2 <HAL_JPEG_Pause>:
  *                           JPEG_PAUSE_RESUME_OUTPUT: Pause Output processing
  *                           JPEG_PAUSE_RESUME_INPUT_OUTPUT: Pause Input and Output processing
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_JPEG_Pause(JPEG_HandleTypeDef *hjpeg, uint32_t XferSelection)
{
 80055b2:	b480      	push	{r7}
 80055b4:	b085      	sub	sp, #20
 80055b6:	af00      	add	r7, sp, #0
 80055b8:	6078      	str	r0, [r7, #4]
 80055ba:	6039      	str	r1, [r7, #0]
  uint32_t mask = 0;
 80055bc:	2300      	movs	r3, #0
 80055be:	60fb      	str	r3, [r7, #12]

  assert_param(IS_JPEG_PAUSE_RESUME_STATE(XferSelection));

  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055c4:	f003 030c 	and.w	r3, r3, #12
 80055c8:	2b0c      	cmp	r3, #12
 80055ca:	d116      	bne.n	80055fa <HAL_JPEG_Pause+0x48>
  {
    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
 80055cc:	683b      	ldr	r3, [r7, #0]
 80055ce:	f003 0301 	and.w	r3, r3, #1
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d005      	beq.n	80055e2 <HAL_JPEG_Pause+0x30>
    {
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_INPUT;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055da:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	655a      	str	r2, [r3, #84]	; 0x54
    }
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
 80055e2:	683b      	ldr	r3, [r7, #0]
 80055e4:	f003 0302 	and.w	r3, r3, #2
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d033      	beq.n	8005654 <HAL_JPEG_Pause+0xa2>
    {
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_OUTPUT;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055f0:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	655a      	str	r2, [r3, #84]	; 0x54
 80055f8:	e02c      	b.n	8005654 <HAL_JPEG_Pause+0xa2>
    }

  }
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055fe:	f003 030c 	and.w	r3, r3, #12
 8005602:	2b08      	cmp	r3, #8
 8005604:	d126      	bne.n	8005654 <HAL_JPEG_Pause+0xa2>
  {

    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
 8005606:	683b      	ldr	r3, [r7, #0]
 8005608:	f003 0301 	and.w	r3, r3, #1
 800560c:	2b00      	cmp	r3, #0
 800560e:	d009      	beq.n	8005624 <HAL_JPEG_Pause+0x72>
    {
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_INPUT;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005614:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	655a      	str	r2, [r3, #84]	; 0x54
      mask |= (JPEG_IT_IFT | JPEG_IT_IFNF);
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	f043 0306 	orr.w	r3, r3, #6
 8005622:	60fb      	str	r3, [r7, #12]
    }
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
 8005624:	683b      	ldr	r3, [r7, #0]
 8005626:	f003 0302 	and.w	r3, r3, #2
 800562a:	2b00      	cmp	r3, #0
 800562c:	d009      	beq.n	8005642 <HAL_JPEG_Pause+0x90>
    {
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_OUTPUT;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005632:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	655a      	str	r2, [r3, #84]	; 0x54
      mask |= (JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC);
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 8005640:	60fb      	str	r3, [r7, #12]
    }
    __HAL_JPEG_DISABLE_IT(hjpeg, mask);
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	43da      	mvns	r2, r3
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	400a      	ands	r2, r1
 8005652:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Nothing to do */
  }

  /* Return function status */
  return HAL_OK;
 8005654:	2300      	movs	r3, #0
}
 8005656:	4618      	mov	r0, r3
 8005658:	3714      	adds	r7, #20
 800565a:	46bd      	mov	sp, r7
 800565c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005660:	4770      	bx	lr

08005662 <HAL_JPEG_InfoReadyCallback>:
  * @param  pInfo pointer to a JPEG_ConfTypeDef structure that contains
  *         The JPEG decoded header informations
  * @retval None
  */
__weak void HAL_JPEG_InfoReadyCallback(JPEG_HandleTypeDef *hjpeg, JPEG_ConfTypeDef *pInfo)
{
 8005662:	b480      	push	{r7}
 8005664:	b083      	sub	sp, #12
 8005666:	af00      	add	r7, sp, #0
 8005668:	6078      	str	r0, [r7, #4]
 800566a:	6039      	str	r1, [r7, #0]
  UNUSED(pInfo);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_JPEG_HeaderParsingCpltCallback could be implemented in the user file
   */
}
 800566c:	bf00      	nop
 800566e:	370c      	adds	r7, #12
 8005670:	46bd      	mov	sp, r7
 8005672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005676:	4770      	bx	lr

08005678 <HAL_JPEG_EncodeCpltCallback>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
__weak void HAL_JPEG_EncodeCpltCallback(JPEG_HandleTypeDef *hjpeg)
{
 8005678:	b480      	push	{r7}
 800567a:	b083      	sub	sp, #12
 800567c:	af00      	add	r7, sp, #0
 800567e:	6078      	str	r0, [r7, #4]
  UNUSED(hjpeg);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_JPEG_EncodeCpltCallback could be implemented in the user file
   */
}
 8005680:	bf00      	nop
 8005682:	370c      	adds	r7, #12
 8005684:	46bd      	mov	sp, r7
 8005686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568a:	4770      	bx	lr

0800568c <HAL_JPEG_DecodeCpltCallback>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
__weak void HAL_JPEG_DecodeCpltCallback(JPEG_HandleTypeDef *hjpeg)
{
 800568c:	b480      	push	{r7}
 800568e:	b083      	sub	sp, #12
 8005690:	af00      	add	r7, sp, #0
 8005692:	6078      	str	r0, [r7, #4]
  UNUSED(hjpeg);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_JPEG_EncodeCpltCallback could be implemented in the user file
   */
}
 8005694:	bf00      	nop
 8005696:	370c      	adds	r7, #12
 8005698:	46bd      	mov	sp, r7
 800569a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569e:	4770      	bx	lr

080056a0 <HAL_JPEG_GetDataCallback>:
  *         the configuration information for JPEG module
  * @param  NbDecodedData Number of consummed data in the previous chunk in bytes
  * @retval None
  */
__weak void HAL_JPEG_GetDataCallback(JPEG_HandleTypeDef *hjpeg, uint32_t NbDecodedData)
{
 80056a0:	b480      	push	{r7}
 80056a2:	b083      	sub	sp, #12
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]
 80056a8:	6039      	str	r1, [r7, #0]
  UNUSED(NbDecodedData);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_JPEG_GetDataCallback could be implemented in the user file
   */
}
 80056aa:	bf00      	nop
 80056ac:	370c      	adds	r7, #12
 80056ae:	46bd      	mov	sp, r7
 80056b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b4:	4770      	bx	lr

080056b6 <HAL_JPEG_DataReadyCallback>:
  * @param  pDataOut pointer to the output data buffer
  * @param  OutDataLength number in bytes of data available in the specified output buffer
  * @retval None
  */
__weak void HAL_JPEG_DataReadyCallback(JPEG_HandleTypeDef *hjpeg, uint8_t *pDataOut, uint32_t OutDataLength)
{
 80056b6:	b480      	push	{r7}
 80056b8:	b085      	sub	sp, #20
 80056ba:	af00      	add	r7, sp, #0
 80056bc:	60f8      	str	r0, [r7, #12]
 80056be:	60b9      	str	r1, [r7, #8]
 80056c0:	607a      	str	r2, [r7, #4]
  UNUSED(OutDataLength);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_JPEG_DataReadyCallback could be implemented in the user file
   */
}
 80056c2:	bf00      	nop
 80056c4:	3714      	adds	r7, #20
 80056c6:	46bd      	mov	sp, r7
 80056c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056cc:	4770      	bx	lr

080056ce <JPEG_Bits_To_SizeCodes>:
  * @param  Huffcode pointer to codes table
  * @param  LastK pointer to last Coeff (table dimmension)
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Bits_To_SizeCodes(uint8_t *Bits, uint8_t *Huffsize, uint32_t *Huffcode, uint32_t *LastK)
{
 80056ce:	b480      	push	{r7}
 80056d0:	b08b      	sub	sp, #44	; 0x2c
 80056d2:	af00      	add	r7, sp, #0
 80056d4:	60f8      	str	r0, [r7, #12]
 80056d6:	60b9      	str	r1, [r7, #8]
 80056d8:	607a      	str	r2, [r7, #4]
 80056da:	603b      	str	r3, [r7, #0]
  uint32_t i, p, l, code, si;

  /* Figure C.1: Generation of table of Huffman code sizes */
  p = 0;
 80056dc:	2300      	movs	r3, #0
 80056de:	623b      	str	r3, [r7, #32]
  for (l = 0; l < 16UL; l++)
 80056e0:	2300      	movs	r3, #0
 80056e2:	61fb      	str	r3, [r7, #28]
 80056e4:	e020      	b.n	8005728 <JPEG_Bits_To_SizeCodes+0x5a>
  {
    i = (uint32_t)Bits[l];
 80056e6:	68fa      	ldr	r2, [r7, #12]
 80056e8:	69fb      	ldr	r3, [r7, #28]
 80056ea:	4413      	add	r3, r2
 80056ec:	781b      	ldrb	r3, [r3, #0]
 80056ee:	627b      	str	r3, [r7, #36]	; 0x24
    if ((p + i) > 256UL)
 80056f0:	6a3a      	ldr	r2, [r7, #32]
 80056f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056f4:	4413      	add	r3, r2
 80056f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80056fa:	d90f      	bls.n	800571c <JPEG_Bits_To_SizeCodes+0x4e>
    {
      /* check for table overflow */
      return HAL_ERROR;
 80056fc:	2301      	movs	r3, #1
 80056fe:	e055      	b.n	80057ac <JPEG_Bits_To_SizeCodes+0xde>
    }
    while (i != 0UL)
    {
      Huffsize[p] = (uint8_t) l + 1U;
 8005700:	69fb      	ldr	r3, [r7, #28]
 8005702:	b2da      	uxtb	r2, r3
 8005704:	68b9      	ldr	r1, [r7, #8]
 8005706:	6a3b      	ldr	r3, [r7, #32]
 8005708:	440b      	add	r3, r1
 800570a:	3201      	adds	r2, #1
 800570c:	b2d2      	uxtb	r2, r2
 800570e:	701a      	strb	r2, [r3, #0]
      p++;
 8005710:	6a3b      	ldr	r3, [r7, #32]
 8005712:	3301      	adds	r3, #1
 8005714:	623b      	str	r3, [r7, #32]
      i--;
 8005716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005718:	3b01      	subs	r3, #1
 800571a:	627b      	str	r3, [r7, #36]	; 0x24
    while (i != 0UL)
 800571c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800571e:	2b00      	cmp	r3, #0
 8005720:	d1ee      	bne.n	8005700 <JPEG_Bits_To_SizeCodes+0x32>
  for (l = 0; l < 16UL; l++)
 8005722:	69fb      	ldr	r3, [r7, #28]
 8005724:	3301      	adds	r3, #1
 8005726:	61fb      	str	r3, [r7, #28]
 8005728:	69fb      	ldr	r3, [r7, #28]
 800572a:	2b0f      	cmp	r3, #15
 800572c:	d9db      	bls.n	80056e6 <JPEG_Bits_To_SizeCodes+0x18>
    }
  }
  Huffsize[p] = 0;
 800572e:	68ba      	ldr	r2, [r7, #8]
 8005730:	6a3b      	ldr	r3, [r7, #32]
 8005732:	4413      	add	r3, r2
 8005734:	2200      	movs	r2, #0
 8005736:	701a      	strb	r2, [r3, #0]
  *LastK = p;
 8005738:	683b      	ldr	r3, [r7, #0]
 800573a:	6a3a      	ldr	r2, [r7, #32]
 800573c:	601a      	str	r2, [r3, #0]

  /* Figure C.2: Generation of table of Huffman codes */
  code = 0;
 800573e:	2300      	movs	r3, #0
 8005740:	61bb      	str	r3, [r7, #24]
  si = Huffsize[0];
 8005742:	68bb      	ldr	r3, [r7, #8]
 8005744:	781b      	ldrb	r3, [r3, #0]
 8005746:	617b      	str	r3, [r7, #20]
  p = 0;
 8005748:	2300      	movs	r3, #0
 800574a:	623b      	str	r3, [r7, #32]
  while (Huffsize[p] != 0U)
 800574c:	e027      	b.n	800579e <JPEG_Bits_To_SizeCodes+0xd0>
  {
    while (((uint32_t) Huffsize[p]) == si)
    {
      Huffcode[p] = code;
 800574e:	6a3b      	ldr	r3, [r7, #32]
 8005750:	009b      	lsls	r3, r3, #2
 8005752:	687a      	ldr	r2, [r7, #4]
 8005754:	4413      	add	r3, r2
 8005756:	69ba      	ldr	r2, [r7, #24]
 8005758:	601a      	str	r2, [r3, #0]
      p++;
 800575a:	6a3b      	ldr	r3, [r7, #32]
 800575c:	3301      	adds	r3, #1
 800575e:	623b      	str	r3, [r7, #32]
      code++;
 8005760:	69bb      	ldr	r3, [r7, #24]
 8005762:	3301      	adds	r3, #1
 8005764:	61bb      	str	r3, [r7, #24]
    while (((uint32_t) Huffsize[p]) == si)
 8005766:	68ba      	ldr	r2, [r7, #8]
 8005768:	6a3b      	ldr	r3, [r7, #32]
 800576a:	4413      	add	r3, r2
 800576c:	781b      	ldrb	r3, [r3, #0]
 800576e:	461a      	mov	r2, r3
 8005770:	697b      	ldr	r3, [r7, #20]
 8005772:	4293      	cmp	r3, r2
 8005774:	d0eb      	beq.n	800574e <JPEG_Bits_To_SizeCodes+0x80>
    }
    /* code must fit in "size" bits (si), no code is allowed to be all ones*/
    if(si > 31UL)
 8005776:	697b      	ldr	r3, [r7, #20]
 8005778:	2b1f      	cmp	r3, #31
 800577a:	d901      	bls.n	8005780 <JPEG_Bits_To_SizeCodes+0xb2>
    {
      return HAL_ERROR;
 800577c:	2301      	movs	r3, #1
 800577e:	e015      	b.n	80057ac <JPEG_Bits_To_SizeCodes+0xde>
    }
    if (((uint32_t) code) >= (((uint32_t) 1) << si))
 8005780:	2201      	movs	r2, #1
 8005782:	697b      	ldr	r3, [r7, #20]
 8005784:	fa02 f303 	lsl.w	r3, r2, r3
 8005788:	69ba      	ldr	r2, [r7, #24]
 800578a:	429a      	cmp	r2, r3
 800578c:	d301      	bcc.n	8005792 <JPEG_Bits_To_SizeCodes+0xc4>
    {
      return HAL_ERROR;
 800578e:	2301      	movs	r3, #1
 8005790:	e00c      	b.n	80057ac <JPEG_Bits_To_SizeCodes+0xde>
    }
    code <<= 1;
 8005792:	69bb      	ldr	r3, [r7, #24]
 8005794:	005b      	lsls	r3, r3, #1
 8005796:	61bb      	str	r3, [r7, #24]
    si++;
 8005798:	697b      	ldr	r3, [r7, #20]
 800579a:	3301      	adds	r3, #1
 800579c:	617b      	str	r3, [r7, #20]
  while (Huffsize[p] != 0U)
 800579e:	68ba      	ldr	r2, [r7, #8]
 80057a0:	6a3b      	ldr	r3, [r7, #32]
 80057a2:	4413      	add	r3, r2
 80057a4:	781b      	ldrb	r3, [r3, #0]
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d1dd      	bne.n	8005766 <JPEG_Bits_To_SizeCodes+0x98>
  }
  /* Return function status */
  return HAL_OK;
 80057aa:	2300      	movs	r3, #0
}
 80057ac:	4618      	mov	r0, r3
 80057ae:	372c      	adds	r7, #44	; 0x2c
 80057b0:	46bd      	mov	sp, r7
 80057b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b6:	4770      	bx	lr

080057b8 <JPEG_ACHuff_BitsVals_To_SizeCodes>:
  * @param  AC_SizeCodesTable pointer to AC huffman Sizes/Codes table
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_ACHuff_BitsVals_To_SizeCodes(JPEG_ACHuffTableTypeDef *AC_BitsValsTable,
                                                           JPEG_AC_HuffCodeTableTypeDef *AC_SizeCodesTable)
{
 80057b8:	b580      	push	{r7, lr}
 80057ba:	f5ad 6da5 	sub.w	sp, sp, #1320	; 0x528
 80057be:	af00      	add	r7, sp, #0
 80057c0:	1d3b      	adds	r3, r7, #4
 80057c2:	6018      	str	r0, [r3, #0]
 80057c4:	463b      	mov	r3, r7
 80057c6:	6019      	str	r1, [r3, #0]
  uint32_t huffcode[257];
  uint32_t k;
  uint32_t l, lsb, msb;
  uint32_t lastK;

  error = JPEG_Bits_To_SizeCodes(AC_BitsValsTable->Bits, huffsize, huffcode, &lastK);
 80057c8:	1d3b      	adds	r3, r7, #4
 80057ca:	6818      	ldr	r0, [r3, #0]
 80057cc:	f107 0308 	add.w	r3, r7, #8
 80057d0:	f107 020c 	add.w	r2, r7, #12
 80057d4:	f507 6182 	add.w	r1, r7, #1040	; 0x410
 80057d8:	f7ff ff79 	bl	80056ce <JPEG_Bits_To_SizeCodes>
 80057dc:	4603      	mov	r3, r0
 80057de:	f887 351f 	strb.w	r3, [r7, #1311]	; 0x51f
  if (error != HAL_OK)
 80057e2:	f897 351f 	ldrb.w	r3, [r7, #1311]	; 0x51f
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d002      	beq.n	80057f0 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x38>
  {
    return  error;
 80057ea:	f897 351f 	ldrb.w	r3, [r7, #1311]	; 0x51f
 80057ee:	e066      	b.n	80058be <JPEG_ACHuff_BitsVals_To_SizeCodes+0x106>
  }

  /* Figure C.3: Ordering procedure for encoding procedure code tables */
  k = 0;
 80057f0:	2300      	movs	r3, #0
 80057f2:	f8c7 3524 	str.w	r3, [r7, #1316]	; 0x524

  while (k < lastK)
 80057f6:	e05a      	b.n	80058ae <JPEG_ACHuff_BitsVals_To_SizeCodes+0xf6>
  {
    l = AC_BitsValsTable->HuffVal[k];
 80057f8:	1d3b      	adds	r3, r7, #4
 80057fa:	681a      	ldr	r2, [r3, #0]
 80057fc:	f8d7 3524 	ldr.w	r3, [r7, #1316]	; 0x524
 8005800:	4413      	add	r3, r2
 8005802:	3310      	adds	r3, #16
 8005804:	781b      	ldrb	r3, [r3, #0]
 8005806:	f8c7 3520 	str.w	r3, [r7, #1312]	; 0x520
    if (l == 0UL)
 800580a:	f8d7 3520 	ldr.w	r3, [r7, #1312]	; 0x520
 800580e:	2b00      	cmp	r3, #0
 8005810:	d103      	bne.n	800581a <JPEG_ACHuff_BitsVals_To_SizeCodes+0x62>
    {
      l = 160; /*l = 0x00 EOB code*/
 8005812:	23a0      	movs	r3, #160	; 0xa0
 8005814:	f8c7 3520 	str.w	r3, [r7, #1312]	; 0x520
 8005818:	e021      	b.n	800585e <JPEG_ACHuff_BitsVals_To_SizeCodes+0xa6>
    }
    else if (l == 0xF0UL) /* l = 0xF0 ZRL code*/
 800581a:	f8d7 3520 	ldr.w	r3, [r7, #1312]	; 0x520
 800581e:	2bf0      	cmp	r3, #240	; 0xf0
 8005820:	d103      	bne.n	800582a <JPEG_ACHuff_BitsVals_To_SizeCodes+0x72>
    {
      l = 161;
 8005822:	23a1      	movs	r3, #161	; 0xa1
 8005824:	f8c7 3520 	str.w	r3, [r7, #1312]	; 0x520
 8005828:	e019      	b.n	800585e <JPEG_ACHuff_BitsVals_To_SizeCodes+0xa6>
    }
    else
    {
      msb = (l & 0xF0UL) >> 4;
 800582a:	f8d7 3520 	ldr.w	r3, [r7, #1312]	; 0x520
 800582e:	091b      	lsrs	r3, r3, #4
 8005830:	f003 030f 	and.w	r3, r3, #15
 8005834:	f8c7 3518 	str.w	r3, [r7, #1304]	; 0x518
      lsb = (l & 0x0FUL);
 8005838:	f8d7 3520 	ldr.w	r3, [r7, #1312]	; 0x520
 800583c:	f003 030f 	and.w	r3, r3, #15
 8005840:	f8c7 3514 	str.w	r3, [r7, #1300]	; 0x514
      l = (msb * 10UL) + lsb - 1UL;
 8005844:	f8d7 2518 	ldr.w	r2, [r7, #1304]	; 0x518
 8005848:	4613      	mov	r3, r2
 800584a:	009b      	lsls	r3, r3, #2
 800584c:	4413      	add	r3, r2
 800584e:	005b      	lsls	r3, r3, #1
 8005850:	461a      	mov	r2, r3
 8005852:	f8d7 3514 	ldr.w	r3, [r7, #1300]	; 0x514
 8005856:	4413      	add	r3, r2
 8005858:	3b01      	subs	r3, #1
 800585a:	f8c7 3520 	str.w	r3, [r7, #1312]	; 0x520
    }
    if (l >= JPEG_AC_HUFF_TABLE_SIZE)
 800585e:	f8d7 3520 	ldr.w	r3, [r7, #1312]	; 0x520
 8005862:	2ba1      	cmp	r3, #161	; 0xa1
 8005864:	d901      	bls.n	800586a <JPEG_ACHuff_BitsVals_To_SizeCodes+0xb2>
    {
      return HAL_ERROR; /* Huffman Table overflow error*/
 8005866:	2301      	movs	r3, #1
 8005868:	e029      	b.n	80058be <JPEG_ACHuff_BitsVals_To_SizeCodes+0x106>
    }
    else
    {
      AC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
 800586a:	f107 030c 	add.w	r3, r7, #12
 800586e:	f8d7 2524 	ldr.w	r2, [r7, #1316]	; 0x524
 8005872:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005876:	463b      	mov	r3, r7
 8005878:	6819      	ldr	r1, [r3, #0]
 800587a:	f8d7 3520 	ldr.w	r3, [r7, #1312]	; 0x520
 800587e:	3328      	adds	r3, #40	; 0x28
 8005880:	009b      	lsls	r3, r3, #2
 8005882:	440b      	add	r3, r1
 8005884:	605a      	str	r2, [r3, #4]
      AC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
 8005886:	f507 6282 	add.w	r2, r7, #1040	; 0x410
 800588a:	f8d7 3524 	ldr.w	r3, [r7, #1316]	; 0x524
 800588e:	4413      	add	r3, r2
 8005890:	781b      	ldrb	r3, [r3, #0]
 8005892:	3b01      	subs	r3, #1
 8005894:	b2d9      	uxtb	r1, r3
 8005896:	463b      	mov	r3, r7
 8005898:	681a      	ldr	r2, [r3, #0]
 800589a:	f8d7 3520 	ldr.w	r3, [r7, #1312]	; 0x520
 800589e:	4413      	add	r3, r2
 80058a0:	460a      	mov	r2, r1
 80058a2:	701a      	strb	r2, [r3, #0]
      k++;
 80058a4:	f8d7 3524 	ldr.w	r3, [r7, #1316]	; 0x524
 80058a8:	3301      	adds	r3, #1
 80058aa:	f8c7 3524 	str.w	r3, [r7, #1316]	; 0x524
  while (k < lastK)
 80058ae:	f107 0308 	add.w	r3, r7, #8
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f8d7 2524 	ldr.w	r2, [r7, #1316]	; 0x524
 80058b8:	429a      	cmp	r2, r3
 80058ba:	d39d      	bcc.n	80057f8 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x40>
    }
  }

  /* Return function status */
  return HAL_OK;
 80058bc:	2300      	movs	r3, #0
}
 80058be:	4618      	mov	r0, r3
 80058c0:	f507 67a5 	add.w	r7, r7, #1320	; 0x528
 80058c4:	46bd      	mov	sp, r7
 80058c6:	bd80      	pop	{r7, pc}

080058c8 <JPEG_DCHuff_BitsVals_To_SizeCodes>:
  * @param  DC_SizeCodesTable pointer to DC huffman Sizes/Codes table
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_DCHuff_BitsVals_To_SizeCodes(JPEG_DCHuffTableTypeDef *DC_BitsValsTable,
                                                           JPEG_DC_HuffCodeTableTypeDef *DC_SizeCodesTable)
{
 80058c8:	b580      	push	{r7, lr}
 80058ca:	f5ad 6da4 	sub.w	sp, sp, #1312	; 0x520
 80058ce:	af00      	add	r7, sp, #0
 80058d0:	1d3b      	adds	r3, r7, #4
 80058d2:	6018      	str	r0, [r3, #0]
 80058d4:	463b      	mov	r3, r7
 80058d6:	6019      	str	r1, [r3, #0]
  uint32_t k;
  uint32_t l;
  uint32_t lastK;
  uint8_t huffsize[257];
  uint32_t huffcode[257];
  error = JPEG_Bits_To_SizeCodes(DC_BitsValsTable->Bits, huffsize, huffcode, &lastK);
 80058d8:	1d3b      	adds	r3, r7, #4
 80058da:	6818      	ldr	r0, [r3, #0]
 80058dc:	f507 63a2 	add.w	r3, r7, #1296	; 0x510
 80058e0:	f107 0208 	add.w	r2, r7, #8
 80058e4:	f207 410c 	addw	r1, r7, #1036	; 0x40c
 80058e8:	f7ff fef1 	bl	80056ce <JPEG_Bits_To_SizeCodes>
 80058ec:	4603      	mov	r3, r0
 80058ee:	f887 351b 	strb.w	r3, [r7, #1307]	; 0x51b
  if (error != HAL_OK)
 80058f2:	f897 351b 	ldrb.w	r3, [r7, #1307]	; 0x51b
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d002      	beq.n	8005900 <JPEG_DCHuff_BitsVals_To_SizeCodes+0x38>
  {
    return  error;
 80058fa:	f897 351b 	ldrb.w	r3, [r7, #1307]	; 0x51b
 80058fe:	e03b      	b.n	8005978 <JPEG_DCHuff_BitsVals_To_SizeCodes+0xb0>
  }
  /* Figure C.3: ordering procedure for encoding procedure code tables */
  k = 0;
 8005900:	2300      	movs	r3, #0
 8005902:	f8c7 351c 	str.w	r3, [r7, #1308]	; 0x51c

  while (k < lastK)
 8005906:	e030      	b.n	800596a <JPEG_DCHuff_BitsVals_To_SizeCodes+0xa2>
  {
    l = DC_BitsValsTable->HuffVal[k];
 8005908:	1d3b      	adds	r3, r7, #4
 800590a:	681a      	ldr	r2, [r3, #0]
 800590c:	f8d7 351c 	ldr.w	r3, [r7, #1308]	; 0x51c
 8005910:	4413      	add	r3, r2
 8005912:	3310      	adds	r3, #16
 8005914:	781b      	ldrb	r3, [r3, #0]
 8005916:	f8c7 3514 	str.w	r3, [r7, #1300]	; 0x514
    if (l >= JPEG_DC_HUFF_TABLE_SIZE)
 800591a:	f8d7 3514 	ldr.w	r3, [r7, #1300]	; 0x514
 800591e:	2b0b      	cmp	r3, #11
 8005920:	d901      	bls.n	8005926 <JPEG_DCHuff_BitsVals_To_SizeCodes+0x5e>
    {
      return HAL_ERROR; /* Huffman Table overflow error*/
 8005922:	2301      	movs	r3, #1
 8005924:	e028      	b.n	8005978 <JPEG_DCHuff_BitsVals_To_SizeCodes+0xb0>
    }
    else
    {
      DC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
 8005926:	f107 0308 	add.w	r3, r7, #8
 800592a:	f8d7 251c 	ldr.w	r2, [r7, #1308]	; 0x51c
 800592e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005932:	463b      	mov	r3, r7
 8005934:	6819      	ldr	r1, [r3, #0]
 8005936:	f8d7 3514 	ldr.w	r3, [r7, #1300]	; 0x514
 800593a:	3302      	adds	r3, #2
 800593c:	009b      	lsls	r3, r3, #2
 800593e:	440b      	add	r3, r1
 8005940:	605a      	str	r2, [r3, #4]
      DC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
 8005942:	f207 420c 	addw	r2, r7, #1036	; 0x40c
 8005946:	f8d7 351c 	ldr.w	r3, [r7, #1308]	; 0x51c
 800594a:	4413      	add	r3, r2
 800594c:	781b      	ldrb	r3, [r3, #0]
 800594e:	3b01      	subs	r3, #1
 8005950:	b2d9      	uxtb	r1, r3
 8005952:	463b      	mov	r3, r7
 8005954:	681a      	ldr	r2, [r3, #0]
 8005956:	f8d7 3514 	ldr.w	r3, [r7, #1300]	; 0x514
 800595a:	4413      	add	r3, r2
 800595c:	460a      	mov	r2, r1
 800595e:	701a      	strb	r2, [r3, #0]
      k++;
 8005960:	f8d7 351c 	ldr.w	r3, [r7, #1308]	; 0x51c
 8005964:	3301      	adds	r3, #1
 8005966:	f8c7 351c 	str.w	r3, [r7, #1308]	; 0x51c
  while (k < lastK)
 800596a:	f8d7 3510 	ldr.w	r3, [r7, #1296]	; 0x510
 800596e:	f8d7 251c 	ldr.w	r2, [r7, #1308]	; 0x51c
 8005972:	429a      	cmp	r2, r3
 8005974:	d3c8      	bcc.n	8005908 <JPEG_DCHuff_BitsVals_To_SizeCodes+0x40>
    }
  }

  /* Return function status */
  return HAL_OK;
 8005976:	2300      	movs	r3, #0
}
 8005978:	4618      	mov	r0, r3
 800597a:	f507 67a4 	add.w	r7, r7, #1312	; 0x520
 800597e:	46bd      	mov	sp, r7
 8005980:	bd80      	pop	{r7, pc}

08005982 <JPEG_Set_HuffDC_Mem>:
  * @param  DCTableAddress Encoder DC huffman table address it could be HUFFENC_DC0 or HUFFENC_DC1.
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Set_HuffDC_Mem(JPEG_HandleTypeDef *hjpeg, JPEG_DCHuffTableTypeDef *HuffTableDC,
                                             const __IO uint32_t *DCTableAddress)
{
 8005982:	b580      	push	{r7, lr}
 8005984:	b09a      	sub	sp, #104	; 0x68
 8005986:	af00      	add	r7, sp, #0
 8005988:	60f8      	str	r0, [r7, #12]
 800598a:	60b9      	str	r1, [r7, #8]
 800598c:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef error;
  JPEG_DC_HuffCodeTableTypeDef dcSizeCodesTable;
  uint32_t i, lsb, msb;
  __IO uint32_t *address, *addressDef;

  if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC0))
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	f503 63f8 	add.w	r3, r3, #1984	; 0x7c0
 8005996:	687a      	ldr	r2, [r7, #4]
 8005998:	429a      	cmp	r2, r3
 800599a:	d106      	bne.n	80059aa <JPEG_Set_HuffDC_Mem+0x28>
  {
    address = (hjpeg->Instance->HUFFENC_DC0 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	f503 63f8 	add.w	r3, r3, #1984	; 0x7c0
 80059a4:	3318      	adds	r3, #24
 80059a6:	663b      	str	r3, [r7, #96]	; 0x60
 80059a8:	e00f      	b.n	80059ca <JPEG_Set_HuffDC_Mem+0x48>
  }
  else if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC1))
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	f503 63fc 	add.w	r3, r3, #2016	; 0x7e0
 80059b2:	687a      	ldr	r2, [r7, #4]
 80059b4:	429a      	cmp	r2, r3
 80059b6:	d106      	bne.n	80059c6 <JPEG_Set_HuffDC_Mem+0x44>
  {
    address = (hjpeg->Instance->HUFFENC_DC1 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f503 63fc 	add.w	r3, r3, #2016	; 0x7e0
 80059c0:	3318      	adds	r3, #24
 80059c2:	663b      	str	r3, [r7, #96]	; 0x60
 80059c4:	e001      	b.n	80059ca <JPEG_Set_HuffDC_Mem+0x48>
  }
  else
  {
    return HAL_ERROR;
 80059c6:	2301      	movs	r3, #1
 80059c8:	e05b      	b.n	8005a82 <JPEG_Set_HuffDC_Mem+0x100>
  }

  if (HuffTableDC != NULL)
 80059ca:	68bb      	ldr	r3, [r7, #8]
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d057      	beq.n	8005a80 <JPEG_Set_HuffDC_Mem+0xfe>
  {
    error = JPEG_DCHuff_BitsVals_To_SizeCodes(HuffTableDC, &dcSizeCodesTable);
 80059d0:	f107 0314 	add.w	r3, r7, #20
 80059d4:	4619      	mov	r1, r3
 80059d6:	68b8      	ldr	r0, [r7, #8]
 80059d8:	f7ff ff76 	bl	80058c8 <JPEG_DCHuff_BitsVals_To_SizeCodes>
 80059dc:	4603      	mov	r3, r0
 80059de:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    if (error != HAL_OK)
 80059e2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d002      	beq.n	80059f0 <JPEG_Set_HuffDC_Mem+0x6e>
    {
      return  error;
 80059ea:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80059ee:	e048      	b.n	8005a82 <JPEG_Set_HuffDC_Mem+0x100>
    }
    addressDef = address;
 80059f0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80059f2:	65bb      	str	r3, [r7, #88]	; 0x58
    *addressDef = 0x0FFF0FFF;
 80059f4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80059f6:	f06f 22f0 	mvn.w	r2, #4026593280	; 0xf000f000
 80059fa:	601a      	str	r2, [r3, #0]
    addressDef++;
 80059fc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80059fe:	3304      	adds	r3, #4
 8005a00:	65bb      	str	r3, [r7, #88]	; 0x58
    *addressDef = 0x0FFF0FFF;
 8005a02:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005a04:	f06f 22f0 	mvn.w	r2, #4026593280	; 0xf000f000
 8005a08:	601a      	str	r2, [r3, #0]

    i = JPEG_DC_HUFF_TABLE_SIZE;
 8005a0a:	230c      	movs	r3, #12
 8005a0c:	667b      	str	r3, [r7, #100]	; 0x64
    while (i > 1UL)
 8005a0e:	e034      	b.n	8005a7a <JPEG_Set_HuffDC_Mem+0xf8>
    {
      i--;
 8005a10:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005a12:	3b01      	subs	r3, #1
 8005a14:	667b      	str	r3, [r7, #100]	; 0x64
      address --;
 8005a16:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005a18:	3b04      	subs	r3, #4
 8005a1a:	663b      	str	r3, [r7, #96]	; 0x60
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 8005a1c:	f107 0214 	add.w	r2, r7, #20
 8005a20:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005a22:	4413      	add	r3, r2
 8005a24:	781b      	ldrb	r3, [r3, #0]
 8005a26:	021b      	lsls	r3, r3, #8
 8005a28:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8005a2c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005a2e:	3302      	adds	r3, #2
 8005a30:	009b      	lsls	r3, r3, #2
 8005a32:	f107 0168 	add.w	r1, r7, #104	; 0x68
 8005a36:	440b      	add	r3, r1
 8005a38:	f853 3c50 	ldr.w	r3, [r3, #-80]
 8005a3c:	b2db      	uxtb	r3, r3
 8005a3e:	4313      	orrs	r3, r2
 8005a40:	657b      	str	r3, [r7, #84]	; 0x54
                                                                                   0xFFUL);
      i--;
 8005a42:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005a44:	3b01      	subs	r3, #1
 8005a46:	667b      	str	r3, [r7, #100]	; 0x64
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 8005a48:	f107 0214 	add.w	r2, r7, #20
 8005a4c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005a4e:	4413      	add	r3, r2
 8005a50:	781b      	ldrb	r3, [r3, #0]
 8005a52:	021b      	lsls	r3, r3, #8
 8005a54:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8005a58:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005a5a:	3302      	adds	r3, #2
 8005a5c:	009b      	lsls	r3, r3, #2
 8005a5e:	f107 0168 	add.w	r1, r7, #104	; 0x68
 8005a62:	440b      	add	r3, r1
 8005a64:	f853 3c50 	ldr.w	r3, [r3, #-80]
 8005a68:	b2db      	uxtb	r3, r3
 8005a6a:	4313      	orrs	r3, r2
 8005a6c:	653b      	str	r3, [r7, #80]	; 0x50
                                                                                   0xFFUL);

      *address = lsb | (msb << 16);
 8005a6e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005a70:	041a      	lsls	r2, r3, #16
 8005a72:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005a74:	431a      	orrs	r2, r3
 8005a76:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005a78:	601a      	str	r2, [r3, #0]
    while (i > 1UL)
 8005a7a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005a7c:	2b01      	cmp	r3, #1
 8005a7e:	d8c7      	bhi.n	8005a10 <JPEG_Set_HuffDC_Mem+0x8e>
    }
  }

  /* Return function status */
  return HAL_OK;
 8005a80:	2300      	movs	r3, #0
}
 8005a82:	4618      	mov	r0, r3
 8005a84:	3768      	adds	r7, #104	; 0x68
 8005a86:	46bd      	mov	sp, r7
 8005a88:	bd80      	pop	{r7, pc}
	...

08005a8c <JPEG_Set_HuffAC_Mem>:
  * @param  ACTableAddress Encoder AC huffman table address it could be HUFFENC_AC0 or HUFFENC_AC1.
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Set_HuffAC_Mem(JPEG_HandleTypeDef *hjpeg, JPEG_ACHuffTableTypeDef *HuffTableAC,
                                             const __IO uint32_t *ACTableAddress)
{
 8005a8c:	b580      	push	{r7, lr}
 8005a8e:	f5ad 7d56 	sub.w	sp, sp, #856	; 0x358
 8005a92:	af00      	add	r7, sp, #0
 8005a94:	f107 030c 	add.w	r3, r7, #12
 8005a98:	6018      	str	r0, [r3, #0]
 8005a9a:	f107 0308 	add.w	r3, r7, #8
 8005a9e:	6019      	str	r1, [r3, #0]
 8005aa0:	1d3b      	adds	r3, r7, #4
 8005aa2:	601a      	str	r2, [r3, #0]
  HAL_StatusTypeDef error;
  JPEG_AC_HuffCodeTableTypeDef acSizeCodesTable;
  uint32_t i, lsb, msb;
  __IO uint32_t *address, *addressDef;

  if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC0))
 8005aa4:	f107 030c 	add.w	r3, r7, #12
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ab0:	1d3a      	adds	r2, r7, #4
 8005ab2:	6812      	ldr	r2, [r2, #0]
 8005ab4:	429a      	cmp	r2, r3
 8005ab6:	d10a      	bne.n	8005ace <JPEG_Set_HuffAC_Mem+0x42>
  {
    address = (hjpeg->Instance->HUFFENC_AC0 + (JPEG_AC_HUFF_TABLE_SIZE / 2UL));
 8005ab8:	f107 030c 	add.w	r3, r7, #12
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ac4:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8005ac8:	f8c7 3350 	str.w	r3, [r7, #848]	; 0x350
 8005acc:	e016      	b.n	8005afc <JPEG_Set_HuffAC_Mem+0x70>
  }
  else if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC1))
 8005ace:	f107 030c 	add.w	r3, r7, #12
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	f503 63cc 	add.w	r3, r3, #1632	; 0x660
 8005ada:	1d3a      	adds	r2, r7, #4
 8005adc:	6812      	ldr	r2, [r2, #0]
 8005ade:	429a      	cmp	r2, r3
 8005ae0:	d10a      	bne.n	8005af8 <JPEG_Set_HuffAC_Mem+0x6c>
  {
    address = (hjpeg->Instance->HUFFENC_AC1 + (JPEG_AC_HUFF_TABLE_SIZE / 2UL));
 8005ae2:	f107 030c 	add.w	r3, r7, #12
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	f503 63cc 	add.w	r3, r3, #1632	; 0x660
 8005aee:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8005af2:	f8c7 3350 	str.w	r3, [r7, #848]	; 0x350
 8005af6:	e001      	b.n	8005afc <JPEG_Set_HuffAC_Mem+0x70>
  }
  else
  {
    return HAL_ERROR;
 8005af8:	2301      	movs	r3, #1
 8005afa:	e09c      	b.n	8005c36 <JPEG_Set_HuffAC_Mem+0x1aa>
  }

  if (HuffTableAC != NULL)
 8005afc:	f107 0308 	add.w	r3, r7, #8
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	f000 8096 	beq.w	8005c34 <JPEG_Set_HuffAC_Mem+0x1a8>
  {
    error = JPEG_ACHuff_BitsVals_To_SizeCodes(HuffTableAC, &acSizeCodesTable);
 8005b08:	f107 0214 	add.w	r2, r7, #20
 8005b0c:	f107 0308 	add.w	r3, r7, #8
 8005b10:	4611      	mov	r1, r2
 8005b12:	6818      	ldr	r0, [r3, #0]
 8005b14:	f7ff fe50 	bl	80057b8 <JPEG_ACHuff_BitsVals_To_SizeCodes>
 8005b18:	4603      	mov	r3, r0
 8005b1a:	f887 334b 	strb.w	r3, [r7, #843]	; 0x34b
    if (error != HAL_OK)
 8005b1e:	f897 334b 	ldrb.w	r3, [r7, #843]	; 0x34b
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d002      	beq.n	8005b2c <JPEG_Set_HuffAC_Mem+0xa0>
    {
      return  error;
 8005b26:	f897 334b 	ldrb.w	r3, [r7, #843]	; 0x34b
 8005b2a:	e084      	b.n	8005c36 <JPEG_Set_HuffAC_Mem+0x1aa>
    }
    /* Default values settings: 162:167 FFFh , 168:175 FD0h_FD7h */
    /* Locations 162:175 of each AC table contain information used internally by the core */

    addressDef = address;
 8005b2c:	f8d7 3350 	ldr.w	r3, [r7, #848]	; 0x350
 8005b30:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
    for (i = 0; i < 3UL; i++)
 8005b34:	2300      	movs	r3, #0
 8005b36:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
 8005b3a:	e00e      	b.n	8005b5a <JPEG_Set_HuffAC_Mem+0xce>
    {
      *addressDef = 0x0FFF0FFF;
 8005b3c:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 8005b40:	f06f 22f0 	mvn.w	r2, #4026593280	; 0xf000f000
 8005b44:	601a      	str	r2, [r3, #0]
      addressDef++;
 8005b46:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 8005b4a:	3304      	adds	r3, #4
 8005b4c:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
    for (i = 0; i < 3UL; i++)
 8005b50:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 8005b54:	3301      	adds	r3, #1
 8005b56:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
 8005b5a:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 8005b5e:	2b02      	cmp	r3, #2
 8005b60:	d9ec      	bls.n	8005b3c <JPEG_Set_HuffAC_Mem+0xb0>
    }
    *addressDef = 0x0FD10FD0;
 8005b62:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 8005b66:	4a36      	ldr	r2, [pc, #216]	; (8005c40 <JPEG_Set_HuffAC_Mem+0x1b4>)
 8005b68:	601a      	str	r2, [r3, #0]
    addressDef++;
 8005b6a:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 8005b6e:	3304      	adds	r3, #4
 8005b70:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
    *addressDef = 0x0FD30FD2;
 8005b74:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 8005b78:	4a32      	ldr	r2, [pc, #200]	; (8005c44 <JPEG_Set_HuffAC_Mem+0x1b8>)
 8005b7a:	601a      	str	r2, [r3, #0]
    addressDef++;
 8005b7c:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 8005b80:	3304      	adds	r3, #4
 8005b82:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
    *addressDef = 0x0FD50FD4;
 8005b86:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 8005b8a:	4a2f      	ldr	r2, [pc, #188]	; (8005c48 <JPEG_Set_HuffAC_Mem+0x1bc>)
 8005b8c:	601a      	str	r2, [r3, #0]
    addressDef++;
 8005b8e:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 8005b92:	3304      	adds	r3, #4
 8005b94:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
    *addressDef = 0x0FD70FD6;
 8005b98:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 8005b9c:	4a2b      	ldr	r2, [pc, #172]	; (8005c4c <JPEG_Set_HuffAC_Mem+0x1c0>)
 8005b9e:	601a      	str	r2, [r3, #0]
    /* end of Locations 162:175  */


    i = JPEG_AC_HUFF_TABLE_SIZE;
 8005ba0:	23a2      	movs	r3, #162	; 0xa2
 8005ba2:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
    while (i > 1UL)
 8005ba6:	e041      	b.n	8005c2c <JPEG_Set_HuffAC_Mem+0x1a0>
    {
      i--;
 8005ba8:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 8005bac:	3b01      	subs	r3, #1
 8005bae:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
      address--;
 8005bb2:	f8d7 3350 	ldr.w	r3, [r7, #848]	; 0x350
 8005bb6:	3b04      	subs	r3, #4
 8005bb8:	f8c7 3350 	str.w	r3, [r7, #848]	; 0x350
      msb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 8005bbc:	f107 0214 	add.w	r2, r7, #20
 8005bc0:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 8005bc4:	4413      	add	r3, r2
 8005bc6:	781b      	ldrb	r3, [r3, #0]
 8005bc8:	021b      	lsls	r3, r3, #8
 8005bca:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8005bce:	f107 0114 	add.w	r1, r7, #20
 8005bd2:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 8005bd6:	3328      	adds	r3, #40	; 0x28
 8005bd8:	009b      	lsls	r3, r3, #2
 8005bda:	440b      	add	r3, r1
 8005bdc:	685b      	ldr	r3, [r3, #4]
 8005bde:	b2db      	uxtb	r3, r3
 8005be0:	4313      	orrs	r3, r2
 8005be2:	f8c7 3344 	str.w	r3, [r7, #836]	; 0x344
                                                                                   0xFFUL);
      i--;
 8005be6:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 8005bea:	3b01      	subs	r3, #1
 8005bec:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
      lsb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 8005bf0:	f107 0214 	add.w	r2, r7, #20
 8005bf4:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 8005bf8:	4413      	add	r3, r2
 8005bfa:	781b      	ldrb	r3, [r3, #0]
 8005bfc:	021b      	lsls	r3, r3, #8
 8005bfe:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8005c02:	f107 0114 	add.w	r1, r7, #20
 8005c06:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 8005c0a:	3328      	adds	r3, #40	; 0x28
 8005c0c:	009b      	lsls	r3, r3, #2
 8005c0e:	440b      	add	r3, r1
 8005c10:	685b      	ldr	r3, [r3, #4]
 8005c12:	b2db      	uxtb	r3, r3
 8005c14:	4313      	orrs	r3, r2
 8005c16:	f8c7 3340 	str.w	r3, [r7, #832]	; 0x340
                                                                                   0xFFUL);

      *address = lsb | (msb << 16);
 8005c1a:	f8d7 3344 	ldr.w	r3, [r7, #836]	; 0x344
 8005c1e:	041a      	lsls	r2, r3, #16
 8005c20:	f8d7 3340 	ldr.w	r3, [r7, #832]	; 0x340
 8005c24:	431a      	orrs	r2, r3
 8005c26:	f8d7 3350 	ldr.w	r3, [r7, #848]	; 0x350
 8005c2a:	601a      	str	r2, [r3, #0]
    while (i > 1UL)
 8005c2c:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 8005c30:	2b01      	cmp	r3, #1
 8005c32:	d8b9      	bhi.n	8005ba8 <JPEG_Set_HuffAC_Mem+0x11c>
    }
  }

  /* Return function status */
  return HAL_OK;
 8005c34:	2300      	movs	r3, #0
}
 8005c36:	4618      	mov	r0, r3
 8005c38:	f507 7756 	add.w	r7, r7, #856	; 0x358
 8005c3c:	46bd      	mov	sp, r7
 8005c3e:	bd80      	pop	{r7, pc}
 8005c40:	0fd10fd0 	.word	0x0fd10fd0
 8005c44:	0fd30fd2 	.word	0x0fd30fd2
 8005c48:	0fd50fd4 	.word	0x0fd50fd4
 8005c4c:	0fd70fd6 	.word	0x0fd70fd6

08005c50 <JPEG_Set_HuffEnc_Mem>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
static HAL_StatusTypeDef JPEG_Set_HuffEnc_Mem(JPEG_HandleTypeDef *hjpeg)
{
 8005c50:	b580      	push	{r7, lr}
 8005c52:	b084      	sub	sp, #16
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef error;

  JPEG_Set_Huff_DHTMem(hjpeg);
 8005c58:	6878      	ldr	r0, [r7, #4]
 8005c5a:	f000 f84d 	bl	8005cf8 <JPEG_Set_Huff_DHTMem>
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACLUM_HuffTable,
                              (hjpeg->Instance->HUFFENC_AC0));
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACLUM_HuffTable,
 8005c66:	461a      	mov	r2, r3
 8005c68:	491f      	ldr	r1, [pc, #124]	; (8005ce8 <JPEG_Set_HuffEnc_Mem+0x98>)
 8005c6a:	6878      	ldr	r0, [r7, #4]
 8005c6c:	f7ff ff0e 	bl	8005a8c <JPEG_Set_HuffAC_Mem>
 8005c70:	4603      	mov	r3, r0
 8005c72:	73fb      	strb	r3, [r7, #15]
  if (error != HAL_OK)
 8005c74:	7bfb      	ldrb	r3, [r7, #15]
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d001      	beq.n	8005c7e <JPEG_Set_HuffEnc_Mem+0x2e>
  {
    return  error;
 8005c7a:	7bfb      	ldrb	r3, [r7, #15]
 8005c7c:	e030      	b.n	8005ce0 <JPEG_Set_HuffEnc_Mem+0x90>
  }

  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACCHROM_HuffTable,
                              (hjpeg->Instance->HUFFENC_AC1));
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	f503 63cc 	add.w	r3, r3, #1632	; 0x660
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACCHROM_HuffTable,
 8005c86:	461a      	mov	r2, r3
 8005c88:	4918      	ldr	r1, [pc, #96]	; (8005cec <JPEG_Set_HuffEnc_Mem+0x9c>)
 8005c8a:	6878      	ldr	r0, [r7, #4]
 8005c8c:	f7ff fefe 	bl	8005a8c <JPEG_Set_HuffAC_Mem>
 8005c90:	4603      	mov	r3, r0
 8005c92:	73fb      	strb	r3, [r7, #15]
  if (error != HAL_OK)
 8005c94:	7bfb      	ldrb	r3, [r7, #15]
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d001      	beq.n	8005c9e <JPEG_Set_HuffEnc_Mem+0x4e>
  {
    return  error;
 8005c9a:	7bfb      	ldrb	r3, [r7, #15]
 8005c9c:	e020      	b.n	8005ce0 <JPEG_Set_HuffEnc_Mem+0x90>
  }

  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCLUM_HuffTable,
                              hjpeg->Instance->HUFFENC_DC0);
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	f503 63f8 	add.w	r3, r3, #1984	; 0x7c0
  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCLUM_HuffTable,
 8005ca6:	461a      	mov	r2, r3
 8005ca8:	4911      	ldr	r1, [pc, #68]	; (8005cf0 <JPEG_Set_HuffEnc_Mem+0xa0>)
 8005caa:	6878      	ldr	r0, [r7, #4]
 8005cac:	f7ff fe69 	bl	8005982 <JPEG_Set_HuffDC_Mem>
 8005cb0:	4603      	mov	r3, r0
 8005cb2:	73fb      	strb	r3, [r7, #15]
  if (error != HAL_OK)
 8005cb4:	7bfb      	ldrb	r3, [r7, #15]
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d001      	beq.n	8005cbe <JPEG_Set_HuffEnc_Mem+0x6e>
  {
    return  error;
 8005cba:	7bfb      	ldrb	r3, [r7, #15]
 8005cbc:	e010      	b.n	8005ce0 <JPEG_Set_HuffEnc_Mem+0x90>
  }

  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCCHROM_HuffTable,
                              hjpeg->Instance->HUFFENC_DC1);
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	f503 63fc 	add.w	r3, r3, #2016	; 0x7e0
  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCCHROM_HuffTable,
 8005cc6:	461a      	mov	r2, r3
 8005cc8:	490a      	ldr	r1, [pc, #40]	; (8005cf4 <JPEG_Set_HuffEnc_Mem+0xa4>)
 8005cca:	6878      	ldr	r0, [r7, #4]
 8005ccc:	f7ff fe59 	bl	8005982 <JPEG_Set_HuffDC_Mem>
 8005cd0:	4603      	mov	r3, r0
 8005cd2:	73fb      	strb	r3, [r7, #15]
  if (error != HAL_OK)
 8005cd4:	7bfb      	ldrb	r3, [r7, #15]
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d001      	beq.n	8005cde <JPEG_Set_HuffEnc_Mem+0x8e>
  {
    return  error;
 8005cda:	7bfb      	ldrb	r3, [r7, #15]
 8005cdc:	e000      	b.n	8005ce0 <JPEG_Set_HuffEnc_Mem+0x90>
  }
  /* Return function status */
  return HAL_OK;
 8005cde:	2300      	movs	r3, #0
}
 8005ce0:	4618      	mov	r0, r3
 8005ce2:	3710      	adds	r7, #16
 8005ce4:	46bd      	mov	sp, r7
 8005ce6:	bd80      	pop	{r7, pc}
 8005ce8:	0800f0f8 	.word	0x0800f0f8
 8005cec:	0800f1ac 	.word	0x0800f1ac
 8005cf0:	0800f0c0 	.word	0x0800f0c0
 8005cf4:	0800f0dc 	.word	0x0800f0dc

08005cf8 <JPEG_Set_Huff_DHTMem>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
static void JPEG_Set_Huff_DHTMem(JPEG_HandleTypeDef *hjpeg)
{
 8005cf8:	b480      	push	{r7}
 8005cfa:	b08b      	sub	sp, #44	; 0x2c
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	6078      	str	r0, [r7, #4]
  JPEG_ACHuffTableTypeDef *HuffTableAC0 = (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACLUM_HuffTable;
 8005d00:	4b80      	ldr	r3, [pc, #512]	; (8005f04 <JPEG_Set_Huff_DHTMem+0x20c>)
 8005d02:	61fb      	str	r3, [r7, #28]
  JPEG_ACHuffTableTypeDef *HuffTableAC1 = (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACCHROM_HuffTable;
 8005d04:	4b80      	ldr	r3, [pc, #512]	; (8005f08 <JPEG_Set_Huff_DHTMem+0x210>)
 8005d06:	61bb      	str	r3, [r7, #24]
  JPEG_DCHuffTableTypeDef *HuffTableDC0 = (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCLUM_HuffTable;
 8005d08:	4b80      	ldr	r3, [pc, #512]	; (8005f0c <JPEG_Set_Huff_DHTMem+0x214>)
 8005d0a:	617b      	str	r3, [r7, #20]
  JPEG_DCHuffTableTypeDef *HuffTableDC1 = (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCCHROM_HuffTable;
 8005d0c:	4b80      	ldr	r3, [pc, #512]	; (8005f10 <JPEG_Set_Huff_DHTMem+0x218>)
 8005d0e:	613b      	str	r3, [r7, #16]
  uint32_t value, index;
  __IO uint32_t *address;

  /* DC0 Huffman Table : BITS*/
  /* DC0 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM base address to DHTMEM + 3*/
  address = (hjpeg->Instance->DHTMEM + 3);
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8005d18:	330c      	adds	r3, #12
 8005d1a:	623b      	str	r3, [r7, #32]
  index = 16;
 8005d1c:	2310      	movs	r3, #16
 8005d1e:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 8005d20:	e01d      	b.n	8005d5e <JPEG_Set_Huff_DHTMem+0x66>
  {

    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8005d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d24:	3b01      	subs	r3, #1
 8005d26:	697a      	ldr	r2, [r7, #20]
 8005d28:	5cd3      	ldrb	r3, [r2, r3]
 8005d2a:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableDC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 8005d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d2e:	3b02      	subs	r3, #2
 8005d30:	6979      	ldr	r1, [r7, #20]
 8005d32:	5ccb      	ldrb	r3, [r1, r3]
 8005d34:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8005d36:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableDC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 8005d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d3a:	3b03      	subs	r3, #3
 8005d3c:	6979      	ldr	r1, [r7, #20]
 8005d3e:	5ccb      	ldrb	r3, [r1, r3]
 8005d40:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableDC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 8005d42:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableDC0->Bits[index - 4UL] & 0xFFUL);
 8005d44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d46:	3a04      	subs	r2, #4
 8005d48:	6979      	ldr	r1, [r7, #20]
 8005d4a:	5c8a      	ldrb	r2, [r1, r2]
               (((uint32_t)HuffTableDC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 8005d4c:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8005d4e:	6a3b      	ldr	r3, [r7, #32]
 8005d50:	601a      	str	r2, [r3, #0]
    address--;
 8005d52:	6a3b      	ldr	r3, [r7, #32]
 8005d54:	3b04      	subs	r3, #4
 8005d56:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 8005d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d5a:	3b04      	subs	r3, #4
 8005d5c:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 8005d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d60:	2b03      	cmp	r3, #3
 8005d62:	d8de      	bhi.n	8005d22 <JPEG_Set_Huff_DHTMem+0x2a>

  }
  /* DC0 Huffman Table : Val*/
  /* DC0 VALS is a 12 Bytes table i.e 3x32bits words from DHTMEM base address +4 to DHTMEM + 6 */
  address = (hjpeg->Instance->DHTMEM + 6);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8005d6c:	3318      	adds	r3, #24
 8005d6e:	623b      	str	r3, [r7, #32]
  index = 12;
 8005d70:	230c      	movs	r3, #12
 8005d72:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 8005d74:	e021      	b.n	8005dba <JPEG_Set_Huff_DHTMem+0xc2>
  {
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8005d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d78:	3b01      	subs	r3, #1
 8005d7a:	697a      	ldr	r2, [r7, #20]
 8005d7c:	4413      	add	r3, r2
 8005d7e:	7c1b      	ldrb	r3, [r3, #16]
 8005d80:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableDC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 8005d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d84:	3b02      	subs	r3, #2
 8005d86:	6979      	ldr	r1, [r7, #20]
 8005d88:	440b      	add	r3, r1
 8005d8a:	7c1b      	ldrb	r3, [r3, #16]
 8005d8c:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8005d8e:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableDC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 8005d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d92:	3b03      	subs	r3, #3
 8005d94:	6979      	ldr	r1, [r7, #20]
 8005d96:	440b      	add	r3, r1
 8005d98:	7c1b      	ldrb	r3, [r3, #16]
 8005d9a:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableDC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 8005d9c:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableDC0->HuffVal[index - 4UL] & 0xFFUL);
 8005d9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005da0:	3a04      	subs	r2, #4
 8005da2:	6979      	ldr	r1, [r7, #20]
 8005da4:	440a      	add	r2, r1
 8005da6:	7c12      	ldrb	r2, [r2, #16]
               (((uint32_t)HuffTableDC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 8005da8:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8005daa:	6a3b      	ldr	r3, [r7, #32]
 8005dac:	601a      	str	r2, [r3, #0]
    address--;
 8005dae:	6a3b      	ldr	r3, [r7, #32]
 8005db0:	3b04      	subs	r3, #4
 8005db2:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 8005db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005db6:	3b04      	subs	r3, #4
 8005db8:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 8005dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dbc:	2b03      	cmp	r3, #3
 8005dbe:	d8da      	bhi.n	8005d76 <JPEG_Set_Huff_DHTMem+0x7e>
  }

  /* AC0 Huffman Table : BITS*/
  /* AC0 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM base address + 7 to DHTMEM + 10*/
  address = (hjpeg->Instance->DHTMEM + 10UL);
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8005dc8:	3328      	adds	r3, #40	; 0x28
 8005dca:	623b      	str	r3, [r7, #32]
  index = 16;
 8005dcc:	2310      	movs	r3, #16
 8005dce:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 8005dd0:	e01d      	b.n	8005e0e <JPEG_Set_Huff_DHTMem+0x116>
  {

    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8005dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dd4:	3b01      	subs	r3, #1
 8005dd6:	69fa      	ldr	r2, [r7, #28]
 8005dd8:	5cd3      	ldrb	r3, [r2, r3]
 8005dda:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableAC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 8005ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dde:	3b02      	subs	r3, #2
 8005de0:	69f9      	ldr	r1, [r7, #28]
 8005de2:	5ccb      	ldrb	r3, [r1, r3]
 8005de4:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8005de6:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableAC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 8005de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dea:	3b03      	subs	r3, #3
 8005dec:	69f9      	ldr	r1, [r7, #28]
 8005dee:	5ccb      	ldrb	r3, [r1, r3]
 8005df0:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableAC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 8005df2:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableAC0->Bits[index - 4UL] & 0xFFUL);
 8005df4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005df6:	3a04      	subs	r2, #4
 8005df8:	69f9      	ldr	r1, [r7, #28]
 8005dfa:	5c8a      	ldrb	r2, [r1, r2]
               (((uint32_t)HuffTableAC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 8005dfc:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8005dfe:	6a3b      	ldr	r3, [r7, #32]
 8005e00:	601a      	str	r2, [r3, #0]
    address--;
 8005e02:	6a3b      	ldr	r3, [r7, #32]
 8005e04:	3b04      	subs	r3, #4
 8005e06:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 8005e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e0a:	3b04      	subs	r3, #4
 8005e0c:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 8005e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e10:	2b03      	cmp	r3, #3
 8005e12:	d8de      	bhi.n	8005dd2 <JPEG_Set_Huff_DHTMem+0xda>

  }
  /* AC0 Huffman Table : Val*/
  /* AC0 VALS is a 162 Bytes table i.e 41x32bits words from DHTMEM base address + 11 to DHTMEM + 51 */
  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 51) belong to AC0 VALS table */
  address = (hjpeg->Instance->DHTMEM + 51);
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8005e1c:	33cc      	adds	r3, #204	; 0xcc
 8005e1e:	623b      	str	r3, [r7, #32]
  value = *address & 0xFFFF0000U;
 8005e20:	6a3b      	ldr	r3, [r7, #32]
 8005e22:	681a      	ldr	r2, [r3, #0]
 8005e24:	4b3b      	ldr	r3, [pc, #236]	; (8005f14 <JPEG_Set_Huff_DHTMem+0x21c>)
 8005e26:	4013      	ands	r3, r2
 8005e28:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableAC0->HuffVal[161] & 0xFFUL) << 8) | ((uint32_t)HuffTableAC0->HuffVal[160] & 0xFFUL);
 8005e2a:	69fb      	ldr	r3, [r7, #28]
 8005e2c:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8005e30:	021a      	lsls	r2, r3, #8
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	4313      	orrs	r3, r2
 8005e36:	69fa      	ldr	r2, [r7, #28]
 8005e38:	f892 20b0 	ldrb.w	r2, [r2, #176]	; 0xb0
 8005e3c:	4313      	orrs	r3, r2
 8005e3e:	60fb      	str	r3, [r7, #12]
  *address = value;
 8005e40:	6a3b      	ldr	r3, [r7, #32]
 8005e42:	68fa      	ldr	r2, [r7, #12]
 8005e44:	601a      	str	r2, [r3, #0]

  /*continue setting 160 AC0 huffman values */
  address--; /* address = hjpeg->Instance->DHTMEM + 50*/
 8005e46:	6a3b      	ldr	r3, [r7, #32]
 8005e48:	3b04      	subs	r3, #4
 8005e4a:	623b      	str	r3, [r7, #32]
  index = 160;
 8005e4c:	23a0      	movs	r3, #160	; 0xa0
 8005e4e:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 8005e50:	e021      	b.n	8005e96 <JPEG_Set_Huff_DHTMem+0x19e>
  {
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8005e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e54:	3b01      	subs	r3, #1
 8005e56:	69fa      	ldr	r2, [r7, #28]
 8005e58:	4413      	add	r3, r2
 8005e5a:	7c1b      	ldrb	r3, [r3, #16]
 8005e5c:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableAC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 8005e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e60:	3b02      	subs	r3, #2
 8005e62:	69f9      	ldr	r1, [r7, #28]
 8005e64:	440b      	add	r3, r1
 8005e66:	7c1b      	ldrb	r3, [r3, #16]
 8005e68:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8005e6a:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableAC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 8005e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e6e:	3b03      	subs	r3, #3
 8005e70:	69f9      	ldr	r1, [r7, #28]
 8005e72:	440b      	add	r3, r1
 8005e74:	7c1b      	ldrb	r3, [r3, #16]
 8005e76:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableAC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 8005e78:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableAC0->HuffVal[index - 4UL] & 0xFFUL);
 8005e7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e7c:	3a04      	subs	r2, #4
 8005e7e:	69f9      	ldr	r1, [r7, #28]
 8005e80:	440a      	add	r2, r1
 8005e82:	7c12      	ldrb	r2, [r2, #16]
               (((uint32_t)HuffTableAC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 8005e84:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8005e86:	6a3b      	ldr	r3, [r7, #32]
 8005e88:	601a      	str	r2, [r3, #0]
    address--;
 8005e8a:	6a3b      	ldr	r3, [r7, #32]
 8005e8c:	3b04      	subs	r3, #4
 8005e8e:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 8005e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e92:	3b04      	subs	r3, #4
 8005e94:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 8005e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e98:	2b03      	cmp	r3, #3
 8005e9a:	d8da      	bhi.n	8005e52 <JPEG_Set_Huff_DHTMem+0x15a>
  }

  /* DC1 Huffman Table : BITS*/
  /* DC1 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM + 51 base address to DHTMEM + 55*/
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 51) belong to DC1 Bits table */
  address = (hjpeg->Instance->DHTMEM + 51);
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8005ea4:	33cc      	adds	r3, #204	; 0xcc
 8005ea6:	623b      	str	r3, [r7, #32]
  value = *address & 0x0000FFFFU;
 8005ea8:	6a3b      	ldr	r3, [r7, #32]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	b29b      	uxth	r3, r3
 8005eae:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableDC1->Bits[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableDC1->Bits[0] & 0xFFUL) << 16);
 8005eb0:	693b      	ldr	r3, [r7, #16]
 8005eb2:	785b      	ldrb	r3, [r3, #1]
 8005eb4:	061a      	lsls	r2, r3, #24
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	431a      	orrs	r2, r3
 8005eba:	693b      	ldr	r3, [r7, #16]
 8005ebc:	781b      	ldrb	r3, [r3, #0]
 8005ebe:	041b      	lsls	r3, r3, #16
 8005ec0:	4313      	orrs	r3, r2
 8005ec2:	60fb      	str	r3, [r7, #12]
  *address = value;
 8005ec4:	6a3b      	ldr	r3, [r7, #32]
 8005ec6:	68fa      	ldr	r2, [r7, #12]
 8005ec8:	601a      	str	r2, [r3, #0]

  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 55) belong to DC1 Bits table */
  address = (hjpeg->Instance->DHTMEM + 55);
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8005ed2:	33dc      	adds	r3, #220	; 0xdc
 8005ed4:	623b      	str	r3, [r7, #32]
  value = *address & 0xFFFF0000U;
 8005ed6:	6a3b      	ldr	r3, [r7, #32]
 8005ed8:	681a      	ldr	r2, [r3, #0]
 8005eda:	4b0e      	ldr	r3, [pc, #56]	; (8005f14 <JPEG_Set_Huff_DHTMem+0x21c>)
 8005edc:	4013      	ands	r3, r2
 8005ede:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableDC1->Bits[15] & 0xFFUL) << 8) | ((uint32_t)HuffTableDC1->Bits[14] & 0xFFUL);
 8005ee0:	693b      	ldr	r3, [r7, #16]
 8005ee2:	7bdb      	ldrb	r3, [r3, #15]
 8005ee4:	021a      	lsls	r2, r3, #8
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	4313      	orrs	r3, r2
 8005eea:	693a      	ldr	r2, [r7, #16]
 8005eec:	7b92      	ldrb	r2, [r2, #14]
 8005eee:	4313      	orrs	r3, r2
 8005ef0:	60fb      	str	r3, [r7, #12]
  *address = value;
 8005ef2:	6a3b      	ldr	r3, [r7, #32]
 8005ef4:	68fa      	ldr	r2, [r7, #12]
 8005ef6:	601a      	str	r2, [r3, #0]

  /*continue setting 12 DC1 huffman Bits from DHTMEM + 54 down to DHTMEM + 52*/
  address--;
 8005ef8:	6a3b      	ldr	r3, [r7, #32]
 8005efa:	3b04      	subs	r3, #4
 8005efc:	623b      	str	r3, [r7, #32]
  index = 12;
 8005efe:	230c      	movs	r3, #12
 8005f00:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 8005f02:	e027      	b.n	8005f54 <JPEG_Set_Huff_DHTMem+0x25c>
 8005f04:	0800f0f8 	.word	0x0800f0f8
 8005f08:	0800f1ac 	.word	0x0800f1ac
 8005f0c:	0800f0c0 	.word	0x0800f0c0
 8005f10:	0800f0dc 	.word	0x0800f0dc
 8005f14:	ffff0000 	.word	0xffff0000
  {

    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 8005f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f1a:	3301      	adds	r3, #1
 8005f1c:	693a      	ldr	r2, [r7, #16]
 8005f1e:	5cd3      	ldrb	r3, [r2, r3]
 8005f20:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableDC1->Bits[index] & 0xFFUL) << 16) |
 8005f22:	6939      	ldr	r1, [r7, #16]
 8005f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f26:	440b      	add	r3, r1
 8005f28:	781b      	ldrb	r3, [r3, #0]
 8005f2a:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 8005f2c:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableDC1->Bits[index - 1UL] & 0xFFUL) << 8) |
 8005f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f30:	3b01      	subs	r3, #1
 8005f32:	6939      	ldr	r1, [r7, #16]
 8005f34:	5ccb      	ldrb	r3, [r1, r3]
 8005f36:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableDC1->Bits[index] & 0xFFUL) << 16) |
 8005f38:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableDC1->Bits[index - 2UL] & 0xFFUL);
 8005f3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f3c:	3a02      	subs	r2, #2
 8005f3e:	6939      	ldr	r1, [r7, #16]
 8005f40:	5c8a      	ldrb	r2, [r1, r2]
               (((uint32_t)HuffTableDC1->Bits[index - 1UL] & 0xFFUL) << 8) |
 8005f42:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 8005f44:	6a3b      	ldr	r3, [r7, #32]
 8005f46:	601a      	str	r2, [r3, #0]
    address--;
 8005f48:	6a3b      	ldr	r3, [r7, #32]
 8005f4a:	3b04      	subs	r3, #4
 8005f4c:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 8005f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f50:	3b04      	subs	r3, #4
 8005f52:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 8005f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f56:	2b03      	cmp	r3, #3
 8005f58:	d8de      	bhi.n	8005f18 <JPEG_Set_Huff_DHTMem+0x220>

  }
  /* DC1 Huffman Table : Val*/
  /* DC1 VALS is a 12 Bytes table i.e 3x32bits words from DHTMEM base address +55 to DHTMEM + 58 */
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 55) belong to DC1 Val table */
  address = (hjpeg->Instance->DHTMEM + 55);
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8005f62:	33dc      	adds	r3, #220	; 0xdc
 8005f64:	623b      	str	r3, [r7, #32]
  value = *address & 0x0000FFFFUL;
 8005f66:	6a3b      	ldr	r3, [r7, #32]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	b29b      	uxth	r3, r3
 8005f6c:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableDC1->HuffVal[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableDC1->HuffVal[0] & 0xFFUL) <<
 8005f6e:	693b      	ldr	r3, [r7, #16]
 8005f70:	7c5b      	ldrb	r3, [r3, #17]
 8005f72:	061a      	lsls	r2, r3, #24
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	431a      	orrs	r2, r3
 8005f78:	693b      	ldr	r3, [r7, #16]
 8005f7a:	7c1b      	ldrb	r3, [r3, #16]
 8005f7c:	041b      	lsls	r3, r3, #16
 8005f7e:	4313      	orrs	r3, r2
 8005f80:	60fb      	str	r3, [r7, #12]
                                                                         16);
  *address = value;
 8005f82:	6a3b      	ldr	r3, [r7, #32]
 8005f84:	68fa      	ldr	r2, [r7, #12]
 8005f86:	601a      	str	r2, [r3, #0]

  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 58) belong to DC1 Val table */
  address = (hjpeg->Instance->DHTMEM + 58);
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8005f90:	33e8      	adds	r3, #232	; 0xe8
 8005f92:	623b      	str	r3, [r7, #32]
  value = *address & 0xFFFF0000UL;
 8005f94:	6a3b      	ldr	r3, [r7, #32]
 8005f96:	681a      	ldr	r2, [r3, #0]
 8005f98:	4b6d      	ldr	r3, [pc, #436]	; (8006150 <JPEG_Set_Huff_DHTMem+0x458>)
 8005f9a:	4013      	ands	r3, r2
 8005f9c:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableDC1->HuffVal[11] & 0xFFUL) << 8) | ((uint32_t)HuffTableDC1->HuffVal[10] & 0xFFUL);
 8005f9e:	693b      	ldr	r3, [r7, #16]
 8005fa0:	7edb      	ldrb	r3, [r3, #27]
 8005fa2:	021a      	lsls	r2, r3, #8
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	4313      	orrs	r3, r2
 8005fa8:	693a      	ldr	r2, [r7, #16]
 8005faa:	7e92      	ldrb	r2, [r2, #26]
 8005fac:	4313      	orrs	r3, r2
 8005fae:	60fb      	str	r3, [r7, #12]
  *address = value;
 8005fb0:	6a3b      	ldr	r3, [r7, #32]
 8005fb2:	68fa      	ldr	r2, [r7, #12]
 8005fb4:	601a      	str	r2, [r3, #0]

  /*continue setting 8 DC1 huffman val from DHTMEM + 57 down to DHTMEM + 56*/
  address--;
 8005fb6:	6a3b      	ldr	r3, [r7, #32]
 8005fb8:	3b04      	subs	r3, #4
 8005fba:	623b      	str	r3, [r7, #32]
  index = 8;
 8005fbc:	2308      	movs	r3, #8
 8005fbe:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 8005fc0:	e021      	b.n	8006006 <JPEG_Set_Huff_DHTMem+0x30e>
  {
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 8005fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fc4:	3301      	adds	r3, #1
 8005fc6:	693a      	ldr	r2, [r7, #16]
 8005fc8:	4413      	add	r3, r2
 8005fca:	7c1b      	ldrb	r3, [r3, #16]
 8005fcc:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableDC1->HuffVal[index] & 0xFFUL) << 16) |
 8005fce:	6939      	ldr	r1, [r7, #16]
 8005fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fd2:	440b      	add	r3, r1
 8005fd4:	3310      	adds	r3, #16
 8005fd6:	781b      	ldrb	r3, [r3, #0]
 8005fd8:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 8005fda:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableDC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 8005fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fde:	3b01      	subs	r3, #1
 8005fe0:	6939      	ldr	r1, [r7, #16]
 8005fe2:	440b      	add	r3, r1
 8005fe4:	7c1b      	ldrb	r3, [r3, #16]
 8005fe6:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableDC1->HuffVal[index] & 0xFFUL) << 16) |
 8005fe8:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableDC1->HuffVal[index - 2UL] & 0xFFUL);
 8005fea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005fec:	3a02      	subs	r2, #2
 8005fee:	6939      	ldr	r1, [r7, #16]
 8005ff0:	440a      	add	r2, r1
 8005ff2:	7c12      	ldrb	r2, [r2, #16]
               (((uint32_t)HuffTableDC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 8005ff4:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 8005ff6:	6a3b      	ldr	r3, [r7, #32]
 8005ff8:	601a      	str	r2, [r3, #0]
    address--;
 8005ffa:	6a3b      	ldr	r3, [r7, #32]
 8005ffc:	3b04      	subs	r3, #4
 8005ffe:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 8006000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006002:	3b04      	subs	r3, #4
 8006004:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 8006006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006008:	2b03      	cmp	r3, #3
 800600a:	d8da      	bhi.n	8005fc2 <JPEG_Set_Huff_DHTMem+0x2ca>
  }

  /* AC1 Huffman Table : BITS*/
  /* AC1 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM base address + 58 to DHTMEM + 62*/
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 58) belong to AC1 Bits table */
  address = (hjpeg->Instance->DHTMEM + 58);
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8006014:	33e8      	adds	r3, #232	; 0xe8
 8006016:	623b      	str	r3, [r7, #32]
  value = *address & 0x0000FFFFU;
 8006018:	6a3b      	ldr	r3, [r7, #32]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	b29b      	uxth	r3, r3
 800601e:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableAC1->Bits[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableAC1->Bits[0] & 0xFFUL) << 16);
 8006020:	69bb      	ldr	r3, [r7, #24]
 8006022:	785b      	ldrb	r3, [r3, #1]
 8006024:	061a      	lsls	r2, r3, #24
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	431a      	orrs	r2, r3
 800602a:	69bb      	ldr	r3, [r7, #24]
 800602c:	781b      	ldrb	r3, [r3, #0]
 800602e:	041b      	lsls	r3, r3, #16
 8006030:	4313      	orrs	r3, r2
 8006032:	60fb      	str	r3, [r7, #12]
  *address = value;
 8006034:	6a3b      	ldr	r3, [r7, #32]
 8006036:	68fa      	ldr	r2, [r7, #12]
 8006038:	601a      	str	r2, [r3, #0]

  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 62) belong to Bits Val table */
  address = (hjpeg->Instance->DHTMEM + 62);
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8006042:	33f8      	adds	r3, #248	; 0xf8
 8006044:	623b      	str	r3, [r7, #32]
  value = *address & 0xFFFF0000U;
 8006046:	6a3b      	ldr	r3, [r7, #32]
 8006048:	681a      	ldr	r2, [r3, #0]
 800604a:	4b41      	ldr	r3, [pc, #260]	; (8006150 <JPEG_Set_Huff_DHTMem+0x458>)
 800604c:	4013      	ands	r3, r2
 800604e:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableAC1->Bits[15] & 0xFFUL) << 8) | ((uint32_t)HuffTableAC1->Bits[14] & 0xFFUL);
 8006050:	69bb      	ldr	r3, [r7, #24]
 8006052:	7bdb      	ldrb	r3, [r3, #15]
 8006054:	021a      	lsls	r2, r3, #8
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	4313      	orrs	r3, r2
 800605a:	69ba      	ldr	r2, [r7, #24]
 800605c:	7b92      	ldrb	r2, [r2, #14]
 800605e:	4313      	orrs	r3, r2
 8006060:	60fb      	str	r3, [r7, #12]
  *address = value;
 8006062:	6a3b      	ldr	r3, [r7, #32]
 8006064:	68fa      	ldr	r2, [r7, #12]
 8006066:	601a      	str	r2, [r3, #0]

  /*continue setting 12 AC1 huffman Bits from DHTMEM + 61 down to DHTMEM + 59*/
  address--;
 8006068:	6a3b      	ldr	r3, [r7, #32]
 800606a:	3b04      	subs	r3, #4
 800606c:	623b      	str	r3, [r7, #32]
  index = 12;
 800606e:	230c      	movs	r3, #12
 8006070:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 8006072:	e01d      	b.n	80060b0 <JPEG_Set_Huff_DHTMem+0x3b8>
  {

    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 8006074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006076:	3301      	adds	r3, #1
 8006078:	69ba      	ldr	r2, [r7, #24]
 800607a:	5cd3      	ldrb	r3, [r2, r3]
 800607c:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableAC1->Bits[index] & 0xFFUL) << 16) |
 800607e:	69b9      	ldr	r1, [r7, #24]
 8006080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006082:	440b      	add	r3, r1
 8006084:	781b      	ldrb	r3, [r3, #0]
 8006086:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 8006088:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableAC1->Bits[index - 1UL] & 0xFFUL) << 8) |
 800608a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800608c:	3b01      	subs	r3, #1
 800608e:	69b9      	ldr	r1, [r7, #24]
 8006090:	5ccb      	ldrb	r3, [r1, r3]
 8006092:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableAC1->Bits[index] & 0xFFUL) << 16) |
 8006094:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableAC1->Bits[index - 2UL] & 0xFFUL);
 8006096:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006098:	3a02      	subs	r2, #2
 800609a:	69b9      	ldr	r1, [r7, #24]
 800609c:	5c8a      	ldrb	r2, [r1, r2]
               (((uint32_t)HuffTableAC1->Bits[index - 1UL] & 0xFFUL) << 8) |
 800609e:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 80060a0:	6a3b      	ldr	r3, [r7, #32]
 80060a2:	601a      	str	r2, [r3, #0]
    address--;
 80060a4:	6a3b      	ldr	r3, [r7, #32]
 80060a6:	3b04      	subs	r3, #4
 80060a8:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 80060aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060ac:	3b04      	subs	r3, #4
 80060ae:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 80060b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060b2:	2b03      	cmp	r3, #3
 80060b4:	d8de      	bhi.n	8006074 <JPEG_Set_Huff_DHTMem+0x37c>

  }
  /* AC1 Huffman Table : Val*/
  /* AC1 VALS is a 162 Bytes table i.e 41x32bits words from DHTMEM base address + 62 to DHTMEM + 102 */
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 62) belong to AC1 VALS table */
  address = (hjpeg->Instance->DHTMEM + 62);
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	f503 7358 	add.w	r3, r3, #864	; 0x360
 80060be:	33f8      	adds	r3, #248	; 0xf8
 80060c0:	623b      	str	r3, [r7, #32]
  value = *address & 0x0000FFFFUL;
 80060c2:	6a3b      	ldr	r3, [r7, #32]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	b29b      	uxth	r3, r3
 80060c8:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableAC1->HuffVal[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableAC1->HuffVal[0] & 0xFFUL) <<
 80060ca:	69bb      	ldr	r3, [r7, #24]
 80060cc:	7c5b      	ldrb	r3, [r3, #17]
 80060ce:	061a      	lsls	r2, r3, #24
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	431a      	orrs	r2, r3
 80060d4:	69bb      	ldr	r3, [r7, #24]
 80060d6:	7c1b      	ldrb	r3, [r3, #16]
 80060d8:	041b      	lsls	r3, r3, #16
 80060da:	4313      	orrs	r3, r2
 80060dc:	60fb      	str	r3, [r7, #12]
                                                                         16);
  *address = value;
 80060de:	6a3b      	ldr	r3, [r7, #32]
 80060e0:	68fa      	ldr	r2, [r7, #12]
 80060e2:	601a      	str	r2, [r3, #0]

  /*continue setting 160 AC1 huffman values from DHTMEM + 63 to DHTMEM+102 */
  address = (hjpeg->Instance->DHTMEM + 102);
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	f503 7358 	add.w	r3, r3, #864	; 0x360
 80060ec:	f503 73cc 	add.w	r3, r3, #408	; 0x198
 80060f0:	623b      	str	r3, [r7, #32]
  index = 160;
 80060f2:	23a0      	movs	r3, #160	; 0xa0
 80060f4:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 80060f6:	e021      	b.n	800613c <JPEG_Set_Huff_DHTMem+0x444>
  {
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 80060f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060fa:	3301      	adds	r3, #1
 80060fc:	69ba      	ldr	r2, [r7, #24]
 80060fe:	4413      	add	r3, r2
 8006100:	7c1b      	ldrb	r3, [r3, #16]
 8006102:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableAC1->HuffVal[index] & 0xFFUL) << 16) |
 8006104:	69b9      	ldr	r1, [r7, #24]
 8006106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006108:	440b      	add	r3, r1
 800610a:	3310      	adds	r3, #16
 800610c:	781b      	ldrb	r3, [r3, #0]
 800610e:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 8006110:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableAC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 8006112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006114:	3b01      	subs	r3, #1
 8006116:	69b9      	ldr	r1, [r7, #24]
 8006118:	440b      	add	r3, r1
 800611a:	7c1b      	ldrb	r3, [r3, #16]
 800611c:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableAC1->HuffVal[index] & 0xFFUL) << 16) |
 800611e:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableAC1->HuffVal[index - 2UL] & 0xFFUL);
 8006120:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006122:	3a02      	subs	r2, #2
 8006124:	69b9      	ldr	r1, [r7, #24]
 8006126:	440a      	add	r2, r1
 8006128:	7c12      	ldrb	r2, [r2, #16]
               (((uint32_t)HuffTableAC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 800612a:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 800612c:	6a3b      	ldr	r3, [r7, #32]
 800612e:	601a      	str	r2, [r3, #0]
    address--;
 8006130:	6a3b      	ldr	r3, [r7, #32]
 8006132:	3b04      	subs	r3, #4
 8006134:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 8006136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006138:	3b04      	subs	r3, #4
 800613a:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 800613c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800613e:	2b03      	cmp	r3, #3
 8006140:	d8da      	bhi.n	80060f8 <JPEG_Set_Huff_DHTMem+0x400>
  }

}
 8006142:	bf00      	nop
 8006144:	372c      	adds	r7, #44	; 0x2c
 8006146:	46bd      	mov	sp, r7
 8006148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800614c:	4770      	bx	lr
 800614e:	bf00      	nop
 8006150:	ffff0000 	.word	0xffff0000

08006154 <JPEG_Init_Process>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
static void JPEG_Init_Process(JPEG_HandleTypeDef *hjpeg)
{
 8006154:	b480      	push	{r7}
 8006156:	b083      	sub	sp, #12
 8006158:	af00      	add	r7, sp, #0
 800615a:	6078      	str	r0, [r7, #4]
  /*Reset pause*/
  hjpeg->Context &= (~(JPEG_CONTEXT_PAUSE_INPUT | JPEG_CONTEXT_PAUSE_OUTPUT));
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006160:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	655a      	str	r2, [r3, #84]	; 0x54

  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800616c:	f003 0303 	and.w	r3, r3, #3
 8006170:	2b02      	cmp	r3, #2
 8006172:	d108      	bne.n	8006186 <JPEG_Init_Process+0x32>
  {
    /*Set JPEG Codec to Decoding mode */
    hjpeg->Instance->CONFR1 |= JPEG_CONFR1_DE;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	685a      	ldr	r2, [r3, #4]
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	f042 0208 	orr.w	r2, r2, #8
 8006182:	605a      	str	r2, [r3, #4]
 8006184:	e007      	b.n	8006196 <JPEG_Init_Process+0x42>
  }
  else /* JPEG_CONTEXT_ENCODE */
  {
    /*Set JPEG Codec to Encoding mode */
    hjpeg->Instance->CONFR1 &= ~JPEG_CONFR1_DE;
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	685a      	ldr	r2, [r3, #4]
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	f022 0208 	bic.w	r2, r2, #8
 8006194:	605a      	str	r2, [r3, #4]
  }

  /*Stop JPEG processing */
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	681a      	ldr	r2, [r3, #0]
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	f022 0201 	bic.w	r2, r2, #1
 80061a4:	601a      	str	r2, [r3, #0]

  /* Disable All Interrupts */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	f022 027e 	bic.w	r2, r2, #126	; 0x7e
 80061b4:	631a      	str	r2, [r3, #48]	; 0x30

  /* Flush input and output FIFOs*/
  hjpeg->Instance->CR |= JPEG_CR_IFF;
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80061c4:	631a      	str	r2, [r3, #48]	; 0x30
  hjpeg->Instance->CR |= JPEG_CR_OFF;
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80061d4:	631a      	str	r2, [r3, #48]	; 0x30

  /* Clear all flags */
  __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 80061e4:	639a      	str	r2, [r3, #56]	; 0x38

  /*Start Encoding/Decoding*/
  hjpeg->Instance->CONFR0 |=  JPEG_CONFR0_START;
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	681a      	ldr	r2, [r3, #0]
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	f042 0201 	orr.w	r2, r2, #1
 80061f4:	601a      	str	r2, [r3, #0]

  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061fa:	f003 030c 	and.w	r3, r3, #12
 80061fe:	2b08      	cmp	r3, #8
 8006200:	d108      	bne.n	8006214 <JPEG_Init_Process+0xc0>
  {
    /*Enable IN/OUT, end of Conversation, and end of header parsing interruptions*/
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_IFT | JPEG_IT_IFNF | JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC | JPEG_IT_HPD);
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	f042 026e 	orr.w	r2, r2, #110	; 0x6e
 8006210:	631a      	str	r2, [r3, #48]	; 0x30
  }
  else
  {
    /* Nothing to do */
  }
}
 8006212:	e00d      	b.n	8006230 <JPEG_Init_Process+0xdc>
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006218:	f003 030c 	and.w	r3, r3, #12
 800621c:	2b0c      	cmp	r3, #12
 800621e:	d107      	bne.n	8006230 <JPEG_Init_Process+0xdc>
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 800622e:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006230:	bf00      	nop
 8006232:	370c      	adds	r7, #12
 8006234:	46bd      	mov	sp, r7
 8006236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800623a:	4770      	bx	lr

0800623c <JPEG_Process>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval JPEG_PROCESS_DONE if the process has ends else JPEG_PROCESS_ONGOING
  */
static uint32_t JPEG_Process(JPEG_HandleTypeDef *hjpeg)
{
 800623c:	b580      	push	{r7, lr}
 800623e:	b084      	sub	sp, #16
 8006240:	af00      	add	r7, sp, #0
 8006242:	6078      	str	r0, [r7, #4]
  uint32_t tmpContext;

  /*End of header processing flag rised*/
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006248:	f003 0303 	and.w	r3, r3, #3
 800624c:	2b02      	cmp	r3, #2
 800624e:	d125      	bne.n	800629c <JPEG_Process+0x60>
  {
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_HPDF) != 0UL)
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006256:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800625a:	2b00      	cmp	r3, #0
 800625c:	d01e      	beq.n	800629c <JPEG_Process+0x60>
    {
      /*Call Header parsing complet callback */
      (void) HAL_JPEG_GetInfo(hjpeg, &hjpeg->Conf);
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	3304      	adds	r3, #4
 8006262:	4619      	mov	r1, r3
 8006264:	6878      	ldr	r0, [r7, #4]
 8006266:	f7ff f887 	bl	8005378 <HAL_JPEG_GetInfo>
      /* Reset the ImageQuality */
      hjpeg->Conf.ImageQuality = 0;
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	2200      	movs	r2, #0
 800626e:	615a      	str	r2, [r3, #20]

      /*Call Info Ready callback */
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->InfoReadyCallback(hjpeg, &hjpeg->Conf);
#else
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	3304      	adds	r3, #4
 8006274:	4619      	mov	r1, r3
 8006276:	6878      	ldr	r0, [r7, #4]
 8006278:	f7ff f9f3 	bl	8005662 <HAL_JPEG_InfoReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_IT_HPD);
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800628a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Clear header processing done flag */
      __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_HPDF);
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800629a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  /*Input FIFO status handling*/
  if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL)
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062a0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d116      	bne.n	80062d6 <JPEG_Process+0x9a>
  {
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_IFTF) != 0UL)
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062ae:	f003 0302 	and.w	r3, r3, #2
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d004      	beq.n	80062c0 <JPEG_Process+0x84>
    {
      /*Input FIFO threshold flag rised*/
      /*JPEG_FIFO_TH_SIZE words can be written in */
      JPEG_ReadInputData(hjpeg, JPEG_FIFO_TH_SIZE);
 80062b6:	2108      	movs	r1, #8
 80062b8:	6878      	ldr	r0, [r7, #4]
 80062ba:	f000 f988 	bl	80065ce <JPEG_ReadInputData>
 80062be:	e00a      	b.n	80062d6 <JPEG_Process+0x9a>
    }
    else if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_IFNFF) != 0UL)
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062c6:	f003 0304 	and.w	r3, r3, #4
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d003      	beq.n	80062d6 <JPEG_Process+0x9a>
    {
      /*Input FIFO Not Full flag rised*/
      /*32-bit value can be written in */
      JPEG_ReadInputData(hjpeg, 1);
 80062ce:	2101      	movs	r1, #1
 80062d0:	6878      	ldr	r0, [r7, #4]
 80062d2:	f000 f97c 	bl	80065ce <JPEG_ReadInputData>
    }
  }


  /*Output FIFO flag handling*/
  if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062da:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d116      	bne.n	8006310 <JPEG_Process+0xd4>
  {
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFTF) != 0UL)
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062e8:	f003 0308 	and.w	r3, r3, #8
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d004      	beq.n	80062fa <JPEG_Process+0xbe>
    {
      /*Output FIFO threshold flag rised*/
      /*JPEG_FIFO_TH_SIZE words can be read out */
      JPEG_StoreOutputData(hjpeg, JPEG_FIFO_TH_SIZE);
 80062f0:	2108      	movs	r1, #8
 80062f2:	6878      	ldr	r0, [r7, #4]
 80062f4:	f000 f864 	bl	80063c0 <JPEG_StoreOutputData>
 80062f8:	e00a      	b.n	8006310 <JPEG_Process+0xd4>
    }
    else if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) != 0UL)
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006300:	f003 0310 	and.w	r3, r3, #16
 8006304:	2b00      	cmp	r3, #0
 8006306:	d003      	beq.n	8006310 <JPEG_Process+0xd4>
    {
      /*Output FIFO Not Empty flag rised*/
      /*32-bit value can be read out */
      JPEG_StoreOutputData(hjpeg, 1);
 8006308:	2101      	movs	r1, #1
 800630a:	6878      	ldr	r0, [r7, #4]
 800630c:	f000 f858 	bl	80063c0 <JPEG_StoreOutputData>
      /* Nothing to do */
    }
  }

  /*End of Conversion handling :i.e EOC flag is high and OFTF low and OFNEF low*/
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF | JPEG_FLAG_OFTF | JPEG_FLAG_OFNEF) == JPEG_FLAG_EOCF)
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006316:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800631a:	2b20      	cmp	r3, #32
 800631c:	d14b      	bne.n	80063b6 <JPEG_Process+0x17a>
  {
    /*Stop Encoding/Decoding*/
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	681a      	ldr	r2, [r3, #0]
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	f022 0201 	bic.w	r2, r2, #1
 800632c:	601a      	str	r2, [r3, #0]

    if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006332:	f003 030c 	and.w	r3, r3, #12
 8006336:	2b08      	cmp	r3, #8
 8006338:	d107      	bne.n	800634a <JPEG_Process+0x10e>
    {
      /* Disable All Interrupts */
      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	f022 027e 	bic.w	r2, r2, #126	; 0x7e
 8006348:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Clear all flags */
    __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8006358:	639a      	str	r2, [r3, #56]	; 0x38

    /*Call End of conversion callback */
    if (hjpeg->JpegOutCount > 0UL)
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800635e:	2b00      	cmp	r3, #0
 8006360:	d00a      	beq.n	8006378 <JPEG_Process+0x13c>
    {
      /*Output Buffer is not empty, call DecodedDataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	69d9      	ldr	r1, [r3, #28]
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800636a:	461a      	mov	r2, r3
 800636c:	6878      	ldr	r0, [r7, #4]
 800636e:	f7ff f9a2 	bl	80056b6 <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      hjpeg->JpegOutCount = 0;
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	2200      	movs	r2, #0
 8006376:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /*Reset Context Operation*/
    tmpContext = hjpeg->Context;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800637c:	60fb      	str	r3, [r7, #12]
    /*Clear all context fields execpt JPEG_CONTEXT_CONF_ENCODING and JPEG_CONTEXT_CUSTOM_TABLES*/
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006382:	f403 4282 	and.w	r2, r3, #16640	; 0x4100
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hjpeg);
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	2200      	movs	r2, #0
 800638e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

    /* Change the JPEG state */
    hjpeg->State = HAL_JPEG_STATE_READY;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	2201      	movs	r2, #1
 8006396:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

    /*Call End of Encoding/Decoding callback */
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	f003 0303 	and.w	r3, r3, #3
 80063a0:	2b02      	cmp	r3, #2
 80063a2:	d103      	bne.n	80063ac <JPEG_Process+0x170>
    {
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DecodeCpltCallback(hjpeg);
#else
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 80063a4:	6878      	ldr	r0, [r7, #4]
 80063a6:	f7ff f971 	bl	800568c <HAL_JPEG_DecodeCpltCallback>
 80063aa:	e002      	b.n	80063b2 <JPEG_Process+0x176>
    else /* JPEG_CONTEXT_ENCODE */
    {
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->EncodeCpltCallback(hjpeg);
#else
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 80063ac:	6878      	ldr	r0, [r7, #4]
 80063ae:	f7ff f963 	bl	8005678 <HAL_JPEG_EncodeCpltCallback>
#endif
    }

    return JPEG_PROCESS_DONE;
 80063b2:	2301      	movs	r3, #1
 80063b4:	e000      	b.n	80063b8 <JPEG_Process+0x17c>
  }


  return JPEG_PROCESS_ONGOING;
 80063b6:	2300      	movs	r3, #0
}
 80063b8:	4618      	mov	r0, r3
 80063ba:	3710      	adds	r7, #16
 80063bc:	46bd      	mov	sp, r7
 80063be:	bd80      	pop	{r7, pc}

080063c0 <JPEG_StoreOutputData>:
  *         the configuration information for JPEG module
  * @param  nbOutputWords Number of output words (of 32 bits) ready from the JPEG peripheral
  * @retval None
  */
static void JPEG_StoreOutputData(JPEG_HandleTypeDef *hjpeg, uint32_t nbOutputWords)
{
 80063c0:	b580      	push	{r7, lr}
 80063c2:	b086      	sub	sp, #24
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	6078      	str	r0, [r7, #4]
 80063c8:	6039      	str	r1, [r7, #0]
  uint32_t index, nBwords, nbBytes, dataword;

  if (hjpeg->OutDataLength >= (hjpeg->JpegOutCount + (nbOutputWords * 4UL)))
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80063d2:	683b      	ldr	r3, [r7, #0]
 80063d4:	009b      	lsls	r3, r3, #2
 80063d6:	440b      	add	r3, r1
 80063d8:	429a      	cmp	r2, r3
 80063da:	d34b      	bcc.n	8006474 <JPEG_StoreOutputData+0xb4>
  {
    for (index = 0; index < nbOutputWords; index++)
 80063dc:	2300      	movs	r3, #0
 80063de:	617b      	str	r3, [r7, #20]
 80063e0:	e031      	b.n	8006446 <JPEG_StoreOutputData+0x86>
    {
      /*Transfer 32 bits from the JPEG output FIFO*/
      dataword = hjpeg->Instance->DOR;
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063e8:	60bb      	str	r3, [r7, #8]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	69da      	ldr	r2, [r3, #28]
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063f2:	4413      	add	r3, r2
 80063f4:	68ba      	ldr	r2, [r7, #8]
 80063f6:	b2d2      	uxtb	r2, r2
 80063f8:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
 80063fa:	68bb      	ldr	r3, [r7, #8]
 80063fc:	0a19      	lsrs	r1, r3, #8
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	69da      	ldr	r2, [r3, #28]
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006406:	3301      	adds	r3, #1
 8006408:	4413      	add	r3, r2
 800640a:	b2ca      	uxtb	r2, r1
 800640c:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 800640e:	68bb      	ldr	r3, [r7, #8]
 8006410:	0c19      	lsrs	r1, r3, #16
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	69da      	ldr	r2, [r3, #28]
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800641a:	3302      	adds	r3, #2
 800641c:	4413      	add	r3, r2
 800641e:	b2ca      	uxtb	r2, r1
 8006420:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 8006422:	68bb      	ldr	r3, [r7, #8]
 8006424:	0e19      	lsrs	r1, r3, #24
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	69da      	ldr	r2, [r3, #28]
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800642e:	3303      	adds	r3, #3
 8006430:	4413      	add	r3, r2
 8006432:	b2ca      	uxtb	r2, r1
 8006434:	701a      	strb	r2, [r3, #0]
      hjpeg->JpegOutCount += 4UL;
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800643a:	1d1a      	adds	r2, r3, #4
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	625a      	str	r2, [r3, #36]	; 0x24
    for (index = 0; index < nbOutputWords; index++)
 8006440:	697b      	ldr	r3, [r7, #20]
 8006442:	3301      	adds	r3, #1
 8006444:	617b      	str	r3, [r7, #20]
 8006446:	697a      	ldr	r2, [r7, #20]
 8006448:	683b      	ldr	r3, [r7, #0]
 800644a:	429a      	cmp	r2, r3
 800644c:	d3c9      	bcc.n	80063e2 <JPEG_StoreOutputData+0x22>
    }
    if (hjpeg->OutDataLength == hjpeg->JpegOutCount)
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006456:	429a      	cmp	r2, r3
 8006458:	f040 80b5 	bne.w	80065c6 <JPEG_StoreOutputData+0x206>
    {
      /*Output Buffer is full, call DecodedDataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	69d9      	ldr	r1, [r3, #28]
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006464:	461a      	mov	r2, r3
 8006466:	6878      	ldr	r0, [r7, #4]
 8006468:	f7ff f925 	bl	80056b6 <HAL_JPEG_DataReadyCallback>
#endif /*USE_HAL_JPEG_REGISTER_CALLBACKS*/
      hjpeg->JpegOutCount = 0;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	2200      	movs	r2, #0
 8006470:	625a      	str	r2, [r3, #36]	; 0x24
  }
  else
  {
    /* Nothing to do */
  }
}
 8006472:	e0a8      	b.n	80065c6 <JPEG_StoreOutputData+0x206>
  else if (hjpeg->OutDataLength > hjpeg->JpegOutCount)
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800647c:	429a      	cmp	r2, r3
 800647e:	f240 80a2 	bls.w	80065c6 <JPEG_StoreOutputData+0x206>
    nBwords = (hjpeg->OutDataLength - hjpeg->JpegOutCount) / 4UL;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800648a:	1ad3      	subs	r3, r2, r3
 800648c:	089b      	lsrs	r3, r3, #2
 800648e:	613b      	str	r3, [r7, #16]
    for (index = 0; index < nBwords; index++)
 8006490:	2300      	movs	r3, #0
 8006492:	617b      	str	r3, [r7, #20]
 8006494:	e031      	b.n	80064fa <JPEG_StoreOutputData+0x13a>
      dataword = hjpeg->Instance->DOR;
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800649c:	60bb      	str	r3, [r7, #8]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	69da      	ldr	r2, [r3, #28]
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064a6:	4413      	add	r3, r2
 80064a8:	68ba      	ldr	r2, [r7, #8]
 80064aa:	b2d2      	uxtb	r2, r2
 80064ac:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
 80064ae:	68bb      	ldr	r3, [r7, #8]
 80064b0:	0a19      	lsrs	r1, r3, #8
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	69da      	ldr	r2, [r3, #28]
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064ba:	3301      	adds	r3, #1
 80064bc:	4413      	add	r3, r2
 80064be:	b2ca      	uxtb	r2, r1
 80064c0:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 80064c2:	68bb      	ldr	r3, [r7, #8]
 80064c4:	0c19      	lsrs	r1, r3, #16
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	69da      	ldr	r2, [r3, #28]
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064ce:	3302      	adds	r3, #2
 80064d0:	4413      	add	r3, r2
 80064d2:	b2ca      	uxtb	r2, r1
 80064d4:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 80064d6:	68bb      	ldr	r3, [r7, #8]
 80064d8:	0e19      	lsrs	r1, r3, #24
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	69da      	ldr	r2, [r3, #28]
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064e2:	3303      	adds	r3, #3
 80064e4:	4413      	add	r3, r2
 80064e6:	b2ca      	uxtb	r2, r1
 80064e8:	701a      	strb	r2, [r3, #0]
      hjpeg->JpegOutCount += 4UL;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064ee:	1d1a      	adds	r2, r3, #4
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	625a      	str	r2, [r3, #36]	; 0x24
    for (index = 0; index < nBwords; index++)
 80064f4:	697b      	ldr	r3, [r7, #20]
 80064f6:	3301      	adds	r3, #1
 80064f8:	617b      	str	r3, [r7, #20]
 80064fa:	697a      	ldr	r2, [r7, #20]
 80064fc:	693b      	ldr	r3, [r7, #16]
 80064fe:	429a      	cmp	r2, r3
 8006500:	d3c9      	bcc.n	8006496 <JPEG_StoreOutputData+0xd6>
    if (hjpeg->OutDataLength == hjpeg->JpegOutCount)
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800650a:	429a      	cmp	r2, r3
 800650c:	d10b      	bne.n	8006526 <JPEG_StoreOutputData+0x166>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	69d9      	ldr	r1, [r3, #28]
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006516:	461a      	mov	r2, r3
 8006518:	6878      	ldr	r0, [r7, #4]
 800651a:	f7ff f8cc 	bl	80056b6 <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	2200      	movs	r2, #0
 8006522:	625a      	str	r2, [r3, #36]	; 0x24
}
 8006524:	e04f      	b.n	80065c6 <JPEG_StoreOutputData+0x206>
      nbBytes = hjpeg->OutDataLength - hjpeg->JpegOutCount;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800652e:	1ad3      	subs	r3, r2, r3
 8006530:	60fb      	str	r3, [r7, #12]
      dataword = hjpeg->Instance->DOR;
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006538:	60bb      	str	r3, [r7, #8]
      for (index = 0; index < nbBytes; index++)
 800653a:	2300      	movs	r3, #0
 800653c:	617b      	str	r3, [r7, #20]
 800653e:	e015      	b.n	800656c <JPEG_StoreOutputData+0x1ac>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * (index & 0x3UL))) & 0xFFUL);
 8006540:	697b      	ldr	r3, [r7, #20]
 8006542:	f003 0303 	and.w	r3, r3, #3
 8006546:	00db      	lsls	r3, r3, #3
 8006548:	68ba      	ldr	r2, [r7, #8]
 800654a:	fa22 f103 	lsr.w	r1, r2, r3
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	69da      	ldr	r2, [r3, #28]
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006556:	4413      	add	r3, r2
 8006558:	b2ca      	uxtb	r2, r1
 800655a:	701a      	strb	r2, [r3, #0]
        hjpeg->JpegOutCount++;
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006560:	1c5a      	adds	r2, r3, #1
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	625a      	str	r2, [r3, #36]	; 0x24
      for (index = 0; index < nbBytes; index++)
 8006566:	697b      	ldr	r3, [r7, #20]
 8006568:	3301      	adds	r3, #1
 800656a:	617b      	str	r3, [r7, #20]
 800656c:	697a      	ldr	r2, [r7, #20]
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	429a      	cmp	r2, r3
 8006572:	d3e5      	bcc.n	8006540 <JPEG_StoreOutputData+0x180>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	69d9      	ldr	r1, [r3, #28]
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800657c:	461a      	mov	r2, r3
 800657e:	6878      	ldr	r0, [r7, #4]
 8006580:	f7ff f899 	bl	80056b6 <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	2200      	movs	r2, #0
 8006588:	625a      	str	r2, [r3, #36]	; 0x24
      nbBytes = 4UL - nbBytes;
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	f1c3 0304 	rsb	r3, r3, #4
 8006590:	60fb      	str	r3, [r7, #12]
      for (index = nbBytes; index < 4UL; index++)
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	617b      	str	r3, [r7, #20]
 8006596:	e013      	b.n	80065c0 <JPEG_StoreOutputData+0x200>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * index)) & 0xFFUL);
 8006598:	697b      	ldr	r3, [r7, #20]
 800659a:	00db      	lsls	r3, r3, #3
 800659c:	68ba      	ldr	r2, [r7, #8]
 800659e:	fa22 f103 	lsr.w	r1, r2, r3
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	69da      	ldr	r2, [r3, #28]
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065aa:	4413      	add	r3, r2
 80065ac:	b2ca      	uxtb	r2, r1
 80065ae:	701a      	strb	r2, [r3, #0]
        hjpeg->JpegOutCount++;
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065b4:	1c5a      	adds	r2, r3, #1
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	625a      	str	r2, [r3, #36]	; 0x24
      for (index = nbBytes; index < 4UL; index++)
 80065ba:	697b      	ldr	r3, [r7, #20]
 80065bc:	3301      	adds	r3, #1
 80065be:	617b      	str	r3, [r7, #20]
 80065c0:	697b      	ldr	r3, [r7, #20]
 80065c2:	2b03      	cmp	r3, #3
 80065c4:	d9e8      	bls.n	8006598 <JPEG_StoreOutputData+0x1d8>
}
 80065c6:	bf00      	nop
 80065c8:	3718      	adds	r7, #24
 80065ca:	46bd      	mov	sp, r7
 80065cc:	bd80      	pop	{r7, pc}

080065ce <JPEG_ReadInputData>:
  *         the configuration information for JPEG module
  * @param  nbRequestWords Number of input words (of 32 bits) that the JPE peripheral request
  * @retval None
  */
static void JPEG_ReadInputData(JPEG_HandleTypeDef *hjpeg, uint32_t nbRequestWords)
{
 80065ce:	b580      	push	{r7, lr}
 80065d0:	b088      	sub	sp, #32
 80065d2:	af00      	add	r7, sp, #0
 80065d4:	6078      	str	r0, [r7, #4]
 80065d6:	6039      	str	r1, [r7, #0]
  uint32_t nbBytes = 0, nBwords, index, Dataword, inputCount;
 80065d8:	2300      	movs	r3, #0
 80065da:	61fb      	str	r3, [r7, #28]

  if ((hjpeg->InDataLength == 0UL) || (nbRequestWords == 0UL))
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d002      	beq.n	80065ea <JPEG_ReadInputData+0x1c>
 80065e4:	683b      	ldr	r3, [r7, #0]
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d104      	bne.n	80065f4 <JPEG_ReadInputData+0x26>
  {
    /* No more Input data : nothing to do*/
    (void) HAL_JPEG_Pause(hjpeg, JPEG_PAUSE_RESUME_INPUT);
 80065ea:	2101      	movs	r1, #1
 80065ec:	6878      	ldr	r0, [r7, #4]
 80065ee:	f7fe ffe0 	bl	80055b2 <HAL_JPEG_Pause>
 80065f2:	e028      	b.n	8006646 <JPEG_ReadInputData+0x78>
  }
  else if (hjpeg->InDataLength > hjpeg->JpegInCount)
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	6a1b      	ldr	r3, [r3, #32]
 80065fc:	429a      	cmp	r2, r3
 80065fe:	d906      	bls.n	800660e <JPEG_ReadInputData+0x40>
  {
    nbBytes = hjpeg->InDataLength - hjpeg->JpegInCount;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	6a1b      	ldr	r3, [r3, #32]
 8006608:	1ad3      	subs	r3, r2, r3
 800660a:	61fb      	str	r3, [r7, #28]
 800660c:	e01b      	b.n	8006646 <JPEG_ReadInputData+0x78>
  }
  else if (hjpeg->InDataLength == hjpeg->JpegInCount)
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	6a1b      	ldr	r3, [r3, #32]
 8006616:	429a      	cmp	r2, r3
 8006618:	d115      	bne.n	8006646 <JPEG_ReadInputData+0x78>
  {
    /*Call HAL_JPEG_GetDataCallback to get new data */
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
    hjpeg->GetDataCallback(hjpeg, hjpeg->JpegInCount);
#else
    HAL_JPEG_GetDataCallback(hjpeg, hjpeg->JpegInCount);
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	6a1b      	ldr	r3, [r3, #32]
 800661e:	4619      	mov	r1, r3
 8006620:	6878      	ldr	r0, [r7, #4]
 8006622:	f7ff f83d 	bl	80056a0 <HAL_JPEG_GetDataCallback>
#endif /*USE_HAL_JPEG_REGISTER_CALLBACKS*/

    if (hjpeg->InDataLength > 4UL)
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800662a:	2b04      	cmp	r3, #4
 800662c:	d905      	bls.n	800663a <JPEG_ReadInputData+0x6c>
    {
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % 4UL);
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006632:	f023 0203 	bic.w	r2, r3, #3
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	629a      	str	r2, [r3, #40]	; 0x28
    }
    hjpeg->JpegInCount = 0;
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	2200      	movs	r2, #0
 800663e:	621a      	str	r2, [r3, #32]
    nbBytes = hjpeg->InDataLength;
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006644:	61fb      	str	r3, [r7, #28]
  }
  else
  {
    /* Nothing to do */
  }
  if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (nbBytes > 0UL))
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800664a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800664e:	2b00      	cmp	r3, #0
 8006650:	f040 809f 	bne.w	8006792 <JPEG_ReadInputData+0x1c4>
 8006654:	69fb      	ldr	r3, [r7, #28]
 8006656:	2b00      	cmp	r3, #0
 8006658:	f000 809b 	beq.w	8006792 <JPEG_ReadInputData+0x1c4>
  {
    nBwords = nbBytes / 4UL;
 800665c:	69fb      	ldr	r3, [r7, #28]
 800665e:	089b      	lsrs	r3, r3, #2
 8006660:	613b      	str	r3, [r7, #16]
    if (nBwords >= nbRequestWords)
 8006662:	693a      	ldr	r2, [r7, #16]
 8006664:	683b      	ldr	r3, [r7, #0]
 8006666:	429a      	cmp	r2, r3
 8006668:	d335      	bcc.n	80066d6 <JPEG_ReadInputData+0x108>
    {
      for (index = 0; index < nbRequestWords; index++)
 800666a:	2300      	movs	r3, #0
 800666c:	61bb      	str	r3, [r7, #24]
 800666e:	e02d      	b.n	80066cc <JPEG_ReadInputData+0xfe>
      {
        inputCount = hjpeg->JpegInCount;
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	6a1b      	ldr	r3, [r3, #32]
 8006674:	60fb      	str	r3, [r7, #12]
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[inputCount])) | \
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	699a      	ldr	r2, [r3, #24]
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	4413      	add	r3, r2
 800667e:	781b      	ldrb	r3, [r3, #0]
 8006680:	4619      	mov	r1, r3
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[inputCount + 1UL])) << 8) | \
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	699a      	ldr	r2, [r3, #24]
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	3301      	adds	r3, #1
 800668a:	4413      	add	r3, r2
 800668c:	781b      	ldrb	r3, [r3, #0]
 800668e:	021b      	lsls	r3, r3, #8
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[inputCount])) | \
 8006690:	ea41 0203 	orr.w	r2, r1, r3
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[inputCount + 2UL])) << 16) | \
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	6999      	ldr	r1, [r3, #24]
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	3302      	adds	r3, #2
 800669c:	440b      	add	r3, r1
 800669e:	781b      	ldrb	r3, [r3, #0]
 80066a0:	041b      	lsls	r3, r3, #16
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[inputCount + 1UL])) << 8) | \
 80066a2:	ea42 0103 	orr.w	r1, r2, r3
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[inputCount + 3UL])) << 24));
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	699a      	ldr	r2, [r3, #24]
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	3303      	adds	r3, #3
 80066ae:	4413      	add	r3, r2
 80066b0:	781b      	ldrb	r3, [r3, #0]
 80066b2:	061a      	lsls	r2, r3, #24
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[inputCount])) | \
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[inputCount + 2UL])) << 16) | \
 80066b8:	430a      	orrs	r2, r1
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[inputCount])) | \
 80066ba:	641a      	str	r2, [r3, #64]	; 0x40

        hjpeg->JpegInCount += 4UL;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	6a1b      	ldr	r3, [r3, #32]
 80066c0:	1d1a      	adds	r2, r3, #4
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	621a      	str	r2, [r3, #32]
      for (index = 0; index < nbRequestWords; index++)
 80066c6:	69bb      	ldr	r3, [r7, #24]
 80066c8:	3301      	adds	r3, #1
 80066ca:	61bb      	str	r3, [r7, #24]
 80066cc:	69ba      	ldr	r2, [r7, #24]
 80066ce:	683b      	ldr	r3, [r7, #0]
 80066d0:	429a      	cmp	r2, r3
 80066d2:	d3cd      	bcc.n	8006670 <JPEG_ReadInputData+0xa2>
        }
        hjpeg->Instance->DIR = Dataword;
      }
    }
  }
}
 80066d4:	e05d      	b.n	8006792 <JPEG_ReadInputData+0x1c4>
      if (nBwords > 0UL)
 80066d6:	693b      	ldr	r3, [r7, #16]
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d035      	beq.n	8006748 <JPEG_ReadInputData+0x17a>
        for (index = 0; index < nBwords; index++)
 80066dc:	2300      	movs	r3, #0
 80066de:	61bb      	str	r3, [r7, #24]
 80066e0:	e02d      	b.n	800673e <JPEG_ReadInputData+0x170>
          inputCount = hjpeg->JpegInCount;
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	6a1b      	ldr	r3, [r3, #32]
 80066e6:	60fb      	str	r3, [r7, #12]
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[inputCount])) | \
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	699a      	ldr	r2, [r3, #24]
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	4413      	add	r3, r2
 80066f0:	781b      	ldrb	r3, [r3, #0]
 80066f2:	4619      	mov	r1, r3
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[inputCount + 1UL])) << 8) | \
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	699a      	ldr	r2, [r3, #24]
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	3301      	adds	r3, #1
 80066fc:	4413      	add	r3, r2
 80066fe:	781b      	ldrb	r3, [r3, #0]
 8006700:	021b      	lsls	r3, r3, #8
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[inputCount])) | \
 8006702:	ea41 0203 	orr.w	r2, r1, r3
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[inputCount + 2UL])) << 16) | \
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	6999      	ldr	r1, [r3, #24]
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	3302      	adds	r3, #2
 800670e:	440b      	add	r3, r1
 8006710:	781b      	ldrb	r3, [r3, #0]
 8006712:	041b      	lsls	r3, r3, #16
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[inputCount + 1UL])) << 8) | \
 8006714:	ea42 0103 	orr.w	r1, r2, r3
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[inputCount + 3UL])) << 24));
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	699a      	ldr	r2, [r3, #24]
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	3303      	adds	r3, #3
 8006720:	4413      	add	r3, r2
 8006722:	781b      	ldrb	r3, [r3, #0]
 8006724:	061a      	lsls	r2, r3, #24
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[inputCount])) | \
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[inputCount + 2UL])) << 16) | \
 800672a:	430a      	orrs	r2, r1
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[inputCount])) | \
 800672c:	641a      	str	r2, [r3, #64]	; 0x40
          hjpeg->JpegInCount += 4UL;
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	6a1b      	ldr	r3, [r3, #32]
 8006732:	1d1a      	adds	r2, r3, #4
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	621a      	str	r2, [r3, #32]
        for (index = 0; index < nBwords; index++)
 8006738:	69bb      	ldr	r3, [r7, #24]
 800673a:	3301      	adds	r3, #1
 800673c:	61bb      	str	r3, [r7, #24]
 800673e:	69ba      	ldr	r2, [r7, #24]
 8006740:	693b      	ldr	r3, [r7, #16]
 8006742:	429a      	cmp	r2, r3
 8006744:	d3cd      	bcc.n	80066e2 <JPEG_ReadInputData+0x114>
}
 8006746:	e024      	b.n	8006792 <JPEG_ReadInputData+0x1c4>
        Dataword = 0;
 8006748:	2300      	movs	r3, #0
 800674a:	617b      	str	r3, [r7, #20]
        for (index = 0; index < nbBytes; index++)
 800674c:	2300      	movs	r3, #0
 800674e:	61bb      	str	r3, [r7, #24]
 8006750:	e017      	b.n	8006782 <JPEG_ReadInputData+0x1b4>
          Dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	699a      	ldr	r2, [r3, #24]
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	6a1b      	ldr	r3, [r3, #32]
 800675a:	4413      	add	r3, r2
 800675c:	781b      	ldrb	r3, [r3, #0]
 800675e:	461a      	mov	r2, r3
 8006760:	69bb      	ldr	r3, [r7, #24]
 8006762:	f003 0303 	and.w	r3, r3, #3
 8006766:	00db      	lsls	r3, r3, #3
 8006768:	fa02 f303 	lsl.w	r3, r2, r3
 800676c:	697a      	ldr	r2, [r7, #20]
 800676e:	4313      	orrs	r3, r2
 8006770:	617b      	str	r3, [r7, #20]
          hjpeg->JpegInCount++;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	6a1b      	ldr	r3, [r3, #32]
 8006776:	1c5a      	adds	r2, r3, #1
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	621a      	str	r2, [r3, #32]
        for (index = 0; index < nbBytes; index++)
 800677c:	69bb      	ldr	r3, [r7, #24]
 800677e:	3301      	adds	r3, #1
 8006780:	61bb      	str	r3, [r7, #24]
 8006782:	69ba      	ldr	r2, [r7, #24]
 8006784:	69fb      	ldr	r3, [r7, #28]
 8006786:	429a      	cmp	r2, r3
 8006788:	d3e3      	bcc.n	8006752 <JPEG_ReadInputData+0x184>
        hjpeg->Instance->DIR = Dataword;
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	697a      	ldr	r2, [r7, #20]
 8006790:	641a      	str	r2, [r3, #64]	; 0x40
}
 8006792:	bf00      	nop
 8006794:	3720      	adds	r7, #32
 8006796:	46bd      	mov	sp, r7
 8006798:	bd80      	pop	{r7, pc}
	...

0800679c <JPEG_GetQuality>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval JPEG image quality from 1 to 100.
  */
static uint32_t JPEG_GetQuality(JPEG_HandleTypeDef *hjpeg)
{
 800679c:	b480      	push	{r7}
 800679e:	b08b      	sub	sp, #44	; 0x2c
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	6078      	str	r0, [r7, #4]
  uint32_t quality = 0;
 80067a4:	2300      	movs	r3, #0
 80067a6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t quantRow, quantVal, scale, i, j;
  __IO uint32_t *tableAddress = hjpeg->Instance->QMEM0;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	3350      	adds	r3, #80	; 0x50
 80067ae:	61bb      	str	r3, [r7, #24]

  i = 0;
 80067b0:	2300      	movs	r3, #0
 80067b2:	623b      	str	r3, [r7, #32]
  while (i < (JPEG_QUANT_TABLE_SIZE - 3UL))
 80067b4:	e042      	b.n	800683c <JPEG_GetQuality+0xa0>
  {
    quantRow = *tableAddress;
 80067b6:	69bb      	ldr	r3, [r7, #24]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	617b      	str	r3, [r7, #20]
    for (j = 0; j < 4UL; j++)
 80067bc:	2300      	movs	r3, #0
 80067be:	61fb      	str	r3, [r7, #28]
 80067c0:	e033      	b.n	800682a <JPEG_GetQuality+0x8e>
    {
      quantVal = (quantRow >> (8UL * j)) & 0xFFUL;
 80067c2:	69fb      	ldr	r3, [r7, #28]
 80067c4:	00db      	lsls	r3, r3, #3
 80067c6:	697a      	ldr	r2, [r7, #20]
 80067c8:	fa22 f303 	lsr.w	r3, r2, r3
 80067cc:	b2db      	uxtb	r3, r3
 80067ce:	613b      	str	r3, [r7, #16]
      if (quantVal == 1UL)
 80067d0:	693b      	ldr	r3, [r7, #16]
 80067d2:	2b01      	cmp	r3, #1
 80067d4:	d103      	bne.n	80067de <JPEG_GetQuality+0x42>
      {
        /* if Quantization value = 1 then quality is 100%*/
        quality += 100UL;
 80067d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067d8:	3364      	adds	r3, #100	; 0x64
 80067da:	627b      	str	r3, [r7, #36]	; 0x24
 80067dc:	e022      	b.n	8006824 <JPEG_GetQuality+0x88>
      }
      else
      {
        /* Note that the quantization coefficients must be specified in the table in zigzag order */
        scale = (quantVal * 100UL) / ((uint32_t) hjpeg->QuantTable0[JPEG_ZIGZAG_ORDER[i + j]]);
 80067de:	693b      	ldr	r3, [r7, #16]
 80067e0:	2264      	movs	r2, #100	; 0x64
 80067e2:	fb02 f303 	mul.w	r3, r2, r3
 80067e6:	687a      	ldr	r2, [r7, #4]
 80067e8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80067ea:	6a38      	ldr	r0, [r7, #32]
 80067ec:	69f9      	ldr	r1, [r7, #28]
 80067ee:	4401      	add	r1, r0
 80067f0:	4818      	ldr	r0, [pc, #96]	; (8006854 <JPEG_GetQuality+0xb8>)
 80067f2:	5c41      	ldrb	r1, [r0, r1]
 80067f4:	440a      	add	r2, r1
 80067f6:	7812      	ldrb	r2, [r2, #0]
 80067f8:	fbb3 f3f2 	udiv	r3, r3, r2
 80067fc:	60fb      	str	r3, [r7, #12]

        if (scale <= 100UL)
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	2b64      	cmp	r3, #100	; 0x64
 8006802:	d807      	bhi.n	8006814 <JPEG_GetQuality+0x78>
        {
          quality += (200UL - scale) / 2UL;
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	f1c3 03c8 	rsb	r3, r3, #200	; 0xc8
 800680a:	085b      	lsrs	r3, r3, #1
 800680c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800680e:	4413      	add	r3, r2
 8006810:	627b      	str	r3, [r7, #36]	; 0x24
 8006812:	e007      	b.n	8006824 <JPEG_GetQuality+0x88>
        }
        else
        {
          quality += 5000UL / scale;
 8006814:	f241 3288 	movw	r2, #5000	; 0x1388
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	fbb2 f3f3 	udiv	r3, r2, r3
 800681e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006820:	4413      	add	r3, r2
 8006822:	627b      	str	r3, [r7, #36]	; 0x24
    for (j = 0; j < 4UL; j++)
 8006824:	69fb      	ldr	r3, [r7, #28]
 8006826:	3301      	adds	r3, #1
 8006828:	61fb      	str	r3, [r7, #28]
 800682a:	69fb      	ldr	r3, [r7, #28]
 800682c:	2b03      	cmp	r3, #3
 800682e:	d9c8      	bls.n	80067c2 <JPEG_GetQuality+0x26>
        }
      }
    }

    i += 4UL;
 8006830:	6a3b      	ldr	r3, [r7, #32]
 8006832:	3304      	adds	r3, #4
 8006834:	623b      	str	r3, [r7, #32]
    tableAddress ++;
 8006836:	69bb      	ldr	r3, [r7, #24]
 8006838:	3304      	adds	r3, #4
 800683a:	61bb      	str	r3, [r7, #24]
  while (i < (JPEG_QUANT_TABLE_SIZE - 3UL))
 800683c:	6a3b      	ldr	r3, [r7, #32]
 800683e:	2b3c      	cmp	r3, #60	; 0x3c
 8006840:	d9b9      	bls.n	80067b6 <JPEG_GetQuality+0x1a>
  }

  return (quality / 64UL);
 8006842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006844:	099b      	lsrs	r3, r3, #6
}
 8006846:	4618      	mov	r0, r3
 8006848:	372c      	adds	r7, #44	; 0x2c
 800684a:	46bd      	mov	sp, r7
 800684c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006850:	4770      	bx	lr
 8006852:	bf00      	nop
 8006854:	0800f260 	.word	0x0800f260

08006858 <HAL_PWREx_ConfigSupply>:
  *            @arg PWR_EXTERNAL_SOURCE_SUPPLY          The LDO regulator is Bypassed.
  *                                                     The Vcore Power Domains are supplied from external source.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 8006858:	b580      	push	{r7, lr}
 800685a:	b084      	sub	sp, #16
 800685c:	af00      	add	r7, sp, #0
 800685e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  if(!__HAL_PWR_GET_FLAG(PWR_FLAG_SCUEN))
 8006860:	4b18      	ldr	r3, [pc, #96]	; (80068c4 <HAL_PWREx_ConfigSupply+0x6c>)
 8006862:	68db      	ldr	r3, [r3, #12]
 8006864:	f003 0304 	and.w	r3, r3, #4
 8006868:	2b04      	cmp	r3, #4
 800686a:	d008      	beq.n	800687e <HAL_PWREx_ConfigSupply+0x26>
  {
    if((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800686c:	4b15      	ldr	r3, [pc, #84]	; (80068c4 <HAL_PWREx_ConfigSupply+0x6c>)
 800686e:	68db      	ldr	r3, [r3, #12]
 8006870:	f003 0307 	and.w	r3, r3, #7
 8006874:	687a      	ldr	r2, [r7, #4]
 8006876:	429a      	cmp	r2, r3
 8006878:	d001      	beq.n	800687e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new regulator config */
      return HAL_ERROR;
 800687a:	2301      	movs	r3, #1
 800687c:	e01d      	b.n	80068ba <HAL_PWREx_ConfigSupply+0x62>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG(PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800687e:	4b11      	ldr	r3, [pc, #68]	; (80068c4 <HAL_PWREx_ConfigSupply+0x6c>)
 8006880:	68db      	ldr	r3, [r3, #12]
 8006882:	f023 0207 	bic.w	r2, r3, #7
 8006886:	490f      	ldr	r1, [pc, #60]	; (80068c4 <HAL_PWREx_ConfigSupply+0x6c>)
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	4313      	orrs	r3, r2
 800688c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 800688e:	f7fb ff1d 	bl	80026cc <HAL_GetTick>
 8006892:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ACTVOSRDY))
 8006894:	e009      	b.n	80068aa <HAL_PWREx_ConfigSupply+0x52>
  {
    if((HAL_GetTick() - tickstart ) > PWR_FLAG_SETTING_DELAY_US)
 8006896:	f7fb ff19 	bl	80026cc <HAL_GetTick>
 800689a:	4602      	mov	r2, r0
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	1ad3      	subs	r3, r2, r3
 80068a0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80068a4:	d901      	bls.n	80068aa <HAL_PWREx_ConfigSupply+0x52>
    {
      return HAL_TIMEOUT;
 80068a6:	2303      	movs	r3, #3
 80068a8:	e007      	b.n	80068ba <HAL_PWREx_ConfigSupply+0x62>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ACTVOSRDY))
 80068aa:	4b06      	ldr	r3, [pc, #24]	; (80068c4 <HAL_PWREx_ConfigSupply+0x6c>)
 80068ac:	685b      	ldr	r3, [r3, #4]
 80068ae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80068b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80068b6:	d1ee      	bne.n	8006896 <HAL_PWREx_ConfigSupply+0x3e>
    }
  }

  return HAL_OK;
 80068b8:	2300      	movs	r3, #0
}
 80068ba:	4618      	mov	r0, r3
 80068bc:	3710      	adds	r7, #16
 80068be:	46bd      	mov	sp, r7
 80068c0:	bd80      	pop	{r7, pc}
 80068c2:	bf00      	nop
 80068c4:	58024800 	.word	0x58024800

080068c8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80068c8:	b580      	push	{r7, lr}
 80068ca:	b08a      	sub	sp, #40	; 0x28
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d101      	bne.n	80068da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80068d6:	2301      	movs	r3, #1
 80068d8:	e3a4      	b.n	8007024 <HAL_RCC_OscConfig+0x75c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	f003 0301 	and.w	r3, r3, #1
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	f000 8087 	beq.w	80069f6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80068e8:	4b9a      	ldr	r3, [pc, #616]	; (8006b54 <HAL_RCC_OscConfig+0x28c>)
 80068ea:	691b      	ldr	r3, [r3, #16]
 80068ec:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80068f0:	627b      	str	r3, [r7, #36]	; 0x24
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80068f2:	4b98      	ldr	r3, [pc, #608]	; (8006b54 <HAL_RCC_OscConfig+0x28c>)
 80068f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068f6:	623b      	str	r3, [r7, #32]
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80068f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068fa:	2b10      	cmp	r3, #16
 80068fc:	d007      	beq.n	800690e <HAL_RCC_OscConfig+0x46>
 80068fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006900:	2b18      	cmp	r3, #24
 8006902:	d110      	bne.n	8006926 <HAL_RCC_OscConfig+0x5e>
 8006904:	6a3b      	ldr	r3, [r7, #32]
 8006906:	f003 0303 	and.w	r3, r3, #3
 800690a:	2b02      	cmp	r3, #2
 800690c:	d10b      	bne.n	8006926 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800690e:	4b91      	ldr	r3, [pc, #580]	; (8006b54 <HAL_RCC_OscConfig+0x28c>)
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006916:	2b00      	cmp	r3, #0
 8006918:	d06c      	beq.n	80069f4 <HAL_RCC_OscConfig+0x12c>
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	685b      	ldr	r3, [r3, #4]
 800691e:	2b00      	cmp	r3, #0
 8006920:	d168      	bne.n	80069f4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8006922:	2301      	movs	r3, #1
 8006924:	e37e      	b.n	8007024 <HAL_RCC_OscConfig+0x75c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	685b      	ldr	r3, [r3, #4]
 800692a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800692e:	d106      	bne.n	800693e <HAL_RCC_OscConfig+0x76>
 8006930:	4b88      	ldr	r3, [pc, #544]	; (8006b54 <HAL_RCC_OscConfig+0x28c>)
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	4a87      	ldr	r2, [pc, #540]	; (8006b54 <HAL_RCC_OscConfig+0x28c>)
 8006936:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800693a:	6013      	str	r3, [r2, #0]
 800693c:	e02e      	b.n	800699c <HAL_RCC_OscConfig+0xd4>
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	685b      	ldr	r3, [r3, #4]
 8006942:	2b00      	cmp	r3, #0
 8006944:	d10c      	bne.n	8006960 <HAL_RCC_OscConfig+0x98>
 8006946:	4b83      	ldr	r3, [pc, #524]	; (8006b54 <HAL_RCC_OscConfig+0x28c>)
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	4a82      	ldr	r2, [pc, #520]	; (8006b54 <HAL_RCC_OscConfig+0x28c>)
 800694c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006950:	6013      	str	r3, [r2, #0]
 8006952:	4b80      	ldr	r3, [pc, #512]	; (8006b54 <HAL_RCC_OscConfig+0x28c>)
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	4a7f      	ldr	r2, [pc, #508]	; (8006b54 <HAL_RCC_OscConfig+0x28c>)
 8006958:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800695c:	6013      	str	r3, [r2, #0]
 800695e:	e01d      	b.n	800699c <HAL_RCC_OscConfig+0xd4>
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	685b      	ldr	r3, [r3, #4]
 8006964:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006968:	d10c      	bne.n	8006984 <HAL_RCC_OscConfig+0xbc>
 800696a:	4b7a      	ldr	r3, [pc, #488]	; (8006b54 <HAL_RCC_OscConfig+0x28c>)
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	4a79      	ldr	r2, [pc, #484]	; (8006b54 <HAL_RCC_OscConfig+0x28c>)
 8006970:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006974:	6013      	str	r3, [r2, #0]
 8006976:	4b77      	ldr	r3, [pc, #476]	; (8006b54 <HAL_RCC_OscConfig+0x28c>)
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	4a76      	ldr	r2, [pc, #472]	; (8006b54 <HAL_RCC_OscConfig+0x28c>)
 800697c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006980:	6013      	str	r3, [r2, #0]
 8006982:	e00b      	b.n	800699c <HAL_RCC_OscConfig+0xd4>
 8006984:	4b73      	ldr	r3, [pc, #460]	; (8006b54 <HAL_RCC_OscConfig+0x28c>)
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	4a72      	ldr	r2, [pc, #456]	; (8006b54 <HAL_RCC_OscConfig+0x28c>)
 800698a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800698e:	6013      	str	r3, [r2, #0]
 8006990:	4b70      	ldr	r3, [pc, #448]	; (8006b54 <HAL_RCC_OscConfig+0x28c>)
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	4a6f      	ldr	r2, [pc, #444]	; (8006b54 <HAL_RCC_OscConfig+0x28c>)
 8006996:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800699a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	685b      	ldr	r3, [r3, #4]
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d013      	beq.n	80069cc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069a4:	f7fb fe92 	bl	80026cc <HAL_GetTick>
 80069a8:	61f8      	str	r0, [r7, #28]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80069aa:	e008      	b.n	80069be <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80069ac:	f7fb fe8e 	bl	80026cc <HAL_GetTick>
 80069b0:	4602      	mov	r2, r0
 80069b2:	69fb      	ldr	r3, [r7, #28]
 80069b4:	1ad3      	subs	r3, r2, r3
 80069b6:	2b64      	cmp	r3, #100	; 0x64
 80069b8:	d901      	bls.n	80069be <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80069ba:	2303      	movs	r3, #3
 80069bc:	e332      	b.n	8007024 <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80069be:	4b65      	ldr	r3, [pc, #404]	; (8006b54 <HAL_RCC_OscConfig+0x28c>)
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d0f0      	beq.n	80069ac <HAL_RCC_OscConfig+0xe4>
 80069ca:	e014      	b.n	80069f6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069cc:	f7fb fe7e 	bl	80026cc <HAL_GetTick>
 80069d0:	61f8      	str	r0, [r7, #28]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80069d2:	e008      	b.n	80069e6 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80069d4:	f7fb fe7a 	bl	80026cc <HAL_GetTick>
 80069d8:	4602      	mov	r2, r0
 80069da:	69fb      	ldr	r3, [r7, #28]
 80069dc:	1ad3      	subs	r3, r2, r3
 80069de:	2b64      	cmp	r3, #100	; 0x64
 80069e0:	d901      	bls.n	80069e6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80069e2:	2303      	movs	r3, #3
 80069e4:	e31e      	b.n	8007024 <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80069e6:	4b5b      	ldr	r3, [pc, #364]	; (8006b54 <HAL_RCC_OscConfig+0x28c>)
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d1f0      	bne.n	80069d4 <HAL_RCC_OscConfig+0x10c>
 80069f2:	e000      	b.n	80069f6 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80069f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	f003 0302 	and.w	r3, r3, #2
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	f000 80b0 	beq.w	8006b64 <HAL_RCC_OscConfig+0x29c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006a04:	4b53      	ldr	r3, [pc, #332]	; (8006b54 <HAL_RCC_OscConfig+0x28c>)
 8006a06:	691b      	ldr	r3, [r3, #16]
 8006a08:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006a0c:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006a0e:	4b51      	ldr	r3, [pc, #324]	; (8006b54 <HAL_RCC_OscConfig+0x28c>)
 8006a10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a12:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8006a14:	69bb      	ldr	r3, [r7, #24]
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d007      	beq.n	8006a2a <HAL_RCC_OscConfig+0x162>
 8006a1a:	69bb      	ldr	r3, [r7, #24]
 8006a1c:	2b18      	cmp	r3, #24
 8006a1e:	d149      	bne.n	8006ab4 <HAL_RCC_OscConfig+0x1ec>
 8006a20:	697b      	ldr	r3, [r7, #20]
 8006a22:	f003 0303 	and.w	r3, r3, #3
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d144      	bne.n	8006ab4 <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006a2a:	4b4a      	ldr	r3, [pc, #296]	; (8006b54 <HAL_RCC_OscConfig+0x28c>)
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	f003 0304 	and.w	r3, r3, #4
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d005      	beq.n	8006a42 <HAL_RCC_OscConfig+0x17a>
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	68db      	ldr	r3, [r3, #12]
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d101      	bne.n	8006a42 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8006a3e:	2301      	movs	r3, #1
 8006a40:	e2f0      	b.n	8007024 <HAL_RCC_OscConfig+0x75c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
      /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006a42:	4b44      	ldr	r3, [pc, #272]	; (8006b54 <HAL_RCC_OscConfig+0x28c>)
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	f023 0219 	bic.w	r2, r3, #25
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	68db      	ldr	r3, [r3, #12]
 8006a4e:	4941      	ldr	r1, [pc, #260]	; (8006b54 <HAL_RCC_OscConfig+0x28c>)
 8006a50:	4313      	orrs	r3, r2
 8006a52:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a54:	f7fb fe3a 	bl	80026cc <HAL_GetTick>
 8006a58:	61f8      	str	r0, [r7, #28]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006a5a:	e008      	b.n	8006a6e <HAL_RCC_OscConfig+0x1a6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006a5c:	f7fb fe36 	bl	80026cc <HAL_GetTick>
 8006a60:	4602      	mov	r2, r0
 8006a62:	69fb      	ldr	r3, [r7, #28]
 8006a64:	1ad3      	subs	r3, r2, r3
 8006a66:	2b02      	cmp	r3, #2
 8006a68:	d901      	bls.n	8006a6e <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8006a6a:	2303      	movs	r3, #3
 8006a6c:	e2da      	b.n	8007024 <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006a6e:	4b39      	ldr	r3, [pc, #228]	; (8006b54 <HAL_RCC_OscConfig+0x28c>)
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	f003 0304 	and.w	r3, r3, #4
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d0f0      	beq.n	8006a5c <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006a7a:	f7fb fe55 	bl	8002728 <HAL_GetREVID>
 8006a7e:	4602      	mov	r2, r0
 8006a80:	f241 0303 	movw	r3, #4099	; 0x1003
 8006a84:	429a      	cmp	r2, r3
 8006a86:	d80a      	bhi.n	8006a9e <HAL_RCC_OscConfig+0x1d6>
 8006a88:	4b32      	ldr	r3, [pc, #200]	; (8006b54 <HAL_RCC_OscConfig+0x28c>)
 8006a8a:	685b      	ldr	r3, [r3, #4]
 8006a8c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	691b      	ldr	r3, [r3, #16]
 8006a94:	031b      	lsls	r3, r3, #12
 8006a96:	492f      	ldr	r1, [pc, #188]	; (8006b54 <HAL_RCC_OscConfig+0x28c>)
 8006a98:	4313      	orrs	r3, r2
 8006a9a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006a9c:	e062      	b.n	8006b64 <HAL_RCC_OscConfig+0x29c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006a9e:	4b2d      	ldr	r3, [pc, #180]	; (8006b54 <HAL_RCC_OscConfig+0x28c>)
 8006aa0:	685b      	ldr	r3, [r3, #4]
 8006aa2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	691b      	ldr	r3, [r3, #16]
 8006aaa:	061b      	lsls	r3, r3, #24
 8006aac:	4929      	ldr	r1, [pc, #164]	; (8006b54 <HAL_RCC_OscConfig+0x28c>)
 8006aae:	4313      	orrs	r3, r2
 8006ab0:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006ab2:	e057      	b.n	8006b64 <HAL_RCC_OscConfig+0x29c>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	68db      	ldr	r3, [r3, #12]
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d038      	beq.n	8006b2e <HAL_RCC_OscConfig+0x266>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006abc:	4b25      	ldr	r3, [pc, #148]	; (8006b54 <HAL_RCC_OscConfig+0x28c>)
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	f023 0219 	bic.w	r2, r3, #25
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	68db      	ldr	r3, [r3, #12]
 8006ac8:	4922      	ldr	r1, [pc, #136]	; (8006b54 <HAL_RCC_OscConfig+0x28c>)
 8006aca:	4313      	orrs	r3, r2
 8006acc:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ace:	f7fb fdfd 	bl	80026cc <HAL_GetTick>
 8006ad2:	61f8      	str	r0, [r7, #28]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006ad4:	e008      	b.n	8006ae8 <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006ad6:	f7fb fdf9 	bl	80026cc <HAL_GetTick>
 8006ada:	4602      	mov	r2, r0
 8006adc:	69fb      	ldr	r3, [r7, #28]
 8006ade:	1ad3      	subs	r3, r2, r3
 8006ae0:	2b02      	cmp	r3, #2
 8006ae2:	d901      	bls.n	8006ae8 <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 8006ae4:	2303      	movs	r3, #3
 8006ae6:	e29d      	b.n	8007024 <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006ae8:	4b1a      	ldr	r3, [pc, #104]	; (8006b54 <HAL_RCC_OscConfig+0x28c>)
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	f003 0304 	and.w	r3, r3, #4
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d0f0      	beq.n	8006ad6 <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006af4:	f7fb fe18 	bl	8002728 <HAL_GetREVID>
 8006af8:	4602      	mov	r2, r0
 8006afa:	f241 0303 	movw	r3, #4099	; 0x1003
 8006afe:	429a      	cmp	r2, r3
 8006b00:	d80a      	bhi.n	8006b18 <HAL_RCC_OscConfig+0x250>
 8006b02:	4b14      	ldr	r3, [pc, #80]	; (8006b54 <HAL_RCC_OscConfig+0x28c>)
 8006b04:	685b      	ldr	r3, [r3, #4]
 8006b06:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	691b      	ldr	r3, [r3, #16]
 8006b0e:	031b      	lsls	r3, r3, #12
 8006b10:	4910      	ldr	r1, [pc, #64]	; (8006b54 <HAL_RCC_OscConfig+0x28c>)
 8006b12:	4313      	orrs	r3, r2
 8006b14:	604b      	str	r3, [r1, #4]
 8006b16:	e025      	b.n	8006b64 <HAL_RCC_OscConfig+0x29c>
 8006b18:	4b0e      	ldr	r3, [pc, #56]	; (8006b54 <HAL_RCC_OscConfig+0x28c>)
 8006b1a:	685b      	ldr	r3, [r3, #4]
 8006b1c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	691b      	ldr	r3, [r3, #16]
 8006b24:	061b      	lsls	r3, r3, #24
 8006b26:	490b      	ldr	r1, [pc, #44]	; (8006b54 <HAL_RCC_OscConfig+0x28c>)
 8006b28:	4313      	orrs	r3, r2
 8006b2a:	604b      	str	r3, [r1, #4]
 8006b2c:	e01a      	b.n	8006b64 <HAL_RCC_OscConfig+0x29c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006b2e:	4b09      	ldr	r3, [pc, #36]	; (8006b54 <HAL_RCC_OscConfig+0x28c>)
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	4a08      	ldr	r2, [pc, #32]	; (8006b54 <HAL_RCC_OscConfig+0x28c>)
 8006b34:	f023 0301 	bic.w	r3, r3, #1
 8006b38:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b3a:	f7fb fdc7 	bl	80026cc <HAL_GetTick>
 8006b3e:	61f8      	str	r0, [r7, #28]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006b40:	e00a      	b.n	8006b58 <HAL_RCC_OscConfig+0x290>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006b42:	f7fb fdc3 	bl	80026cc <HAL_GetTick>
 8006b46:	4602      	mov	r2, r0
 8006b48:	69fb      	ldr	r3, [r7, #28]
 8006b4a:	1ad3      	subs	r3, r2, r3
 8006b4c:	2b02      	cmp	r3, #2
 8006b4e:	d903      	bls.n	8006b58 <HAL_RCC_OscConfig+0x290>
          {
            return HAL_TIMEOUT;
 8006b50:	2303      	movs	r3, #3
 8006b52:	e267      	b.n	8007024 <HAL_RCC_OscConfig+0x75c>
 8006b54:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006b58:	4ba0      	ldr	r3, [pc, #640]	; (8006ddc <HAL_RCC_OscConfig+0x514>)
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	f003 0304 	and.w	r3, r3, #4
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d1ee      	bne.n	8006b42 <HAL_RCC_OscConfig+0x27a>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	f003 0310 	and.w	r3, r3, #16
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	f000 808f 	beq.w	8006c90 <HAL_RCC_OscConfig+0x3c8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006b72:	4b9a      	ldr	r3, [pc, #616]	; (8006ddc <HAL_RCC_OscConfig+0x514>)
 8006b74:	691b      	ldr	r3, [r3, #16]
 8006b76:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006b7a:	613b      	str	r3, [r7, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006b7c:	4b97      	ldr	r3, [pc, #604]	; (8006ddc <HAL_RCC_OscConfig+0x514>)
 8006b7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b80:	60fb      	str	r3, [r7, #12]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8006b82:	693b      	ldr	r3, [r7, #16]
 8006b84:	2b08      	cmp	r3, #8
 8006b86:	d007      	beq.n	8006b98 <HAL_RCC_OscConfig+0x2d0>
 8006b88:	693b      	ldr	r3, [r7, #16]
 8006b8a:	2b18      	cmp	r3, #24
 8006b8c:	d12d      	bne.n	8006bea <HAL_RCC_OscConfig+0x322>
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	f003 0303 	and.w	r3, r3, #3
 8006b94:	2b01      	cmp	r3, #1
 8006b96:	d128      	bne.n	8006bea <HAL_RCC_OscConfig+0x322>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006b98:	4b90      	ldr	r3, [pc, #576]	; (8006ddc <HAL_RCC_OscConfig+0x514>)
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d005      	beq.n	8006bb0 <HAL_RCC_OscConfig+0x2e8>
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	69db      	ldr	r3, [r3, #28]
 8006ba8:	2b80      	cmp	r3, #128	; 0x80
 8006baa:	d001      	beq.n	8006bb0 <HAL_RCC_OscConfig+0x2e8>
      {
        return HAL_ERROR;
 8006bac:	2301      	movs	r3, #1
 8006bae:	e239      	b.n	8007024 <HAL_RCC_OscConfig+0x75c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006bb0:	f7fb fdba 	bl	8002728 <HAL_GetREVID>
 8006bb4:	4602      	mov	r2, r0
 8006bb6:	f241 0303 	movw	r3, #4099	; 0x1003
 8006bba:	429a      	cmp	r2, r3
 8006bbc:	d80a      	bhi.n	8006bd4 <HAL_RCC_OscConfig+0x30c>
 8006bbe:	4b87      	ldr	r3, [pc, #540]	; (8006ddc <HAL_RCC_OscConfig+0x514>)
 8006bc0:	685b      	ldr	r3, [r3, #4]
 8006bc2:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	6a1b      	ldr	r3, [r3, #32]
 8006bca:	069b      	lsls	r3, r3, #26
 8006bcc:	4983      	ldr	r1, [pc, #524]	; (8006ddc <HAL_RCC_OscConfig+0x514>)
 8006bce:	4313      	orrs	r3, r2
 8006bd0:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006bd2:	e05d      	b.n	8006c90 <HAL_RCC_OscConfig+0x3c8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006bd4:	4b81      	ldr	r3, [pc, #516]	; (8006ddc <HAL_RCC_OscConfig+0x514>)
 8006bd6:	68db      	ldr	r3, [r3, #12]
 8006bd8:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	6a1b      	ldr	r3, [r3, #32]
 8006be0:	061b      	lsls	r3, r3, #24
 8006be2:	497e      	ldr	r1, [pc, #504]	; (8006ddc <HAL_RCC_OscConfig+0x514>)
 8006be4:	4313      	orrs	r3, r2
 8006be6:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006be8:	e052      	b.n	8006c90 <HAL_RCC_OscConfig+0x3c8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	69db      	ldr	r3, [r3, #28]
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d035      	beq.n	8006c5e <HAL_RCC_OscConfig+0x396>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8006bf2:	4b7a      	ldr	r3, [pc, #488]	; (8006ddc <HAL_RCC_OscConfig+0x514>)
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	4a79      	ldr	r2, [pc, #484]	; (8006ddc <HAL_RCC_OscConfig+0x514>)
 8006bf8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006bfc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006bfe:	f7fb fd65 	bl	80026cc <HAL_GetTick>
 8006c02:	61f8      	str	r0, [r7, #28]

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006c04:	e008      	b.n	8006c18 <HAL_RCC_OscConfig+0x350>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8006c06:	f7fb fd61 	bl	80026cc <HAL_GetTick>
 8006c0a:	4602      	mov	r2, r0
 8006c0c:	69fb      	ldr	r3, [r7, #28]
 8006c0e:	1ad3      	subs	r3, r2, r3
 8006c10:	2b02      	cmp	r3, #2
 8006c12:	d901      	bls.n	8006c18 <HAL_RCC_OscConfig+0x350>
          {
            return HAL_TIMEOUT;
 8006c14:	2303      	movs	r3, #3
 8006c16:	e205      	b.n	8007024 <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006c18:	4b70      	ldr	r3, [pc, #448]	; (8006ddc <HAL_RCC_OscConfig+0x514>)
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d0f0      	beq.n	8006c06 <HAL_RCC_OscConfig+0x33e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006c24:	f7fb fd80 	bl	8002728 <HAL_GetREVID>
 8006c28:	4602      	mov	r2, r0
 8006c2a:	f241 0303 	movw	r3, #4099	; 0x1003
 8006c2e:	429a      	cmp	r2, r3
 8006c30:	d80a      	bhi.n	8006c48 <HAL_RCC_OscConfig+0x380>
 8006c32:	4b6a      	ldr	r3, [pc, #424]	; (8006ddc <HAL_RCC_OscConfig+0x514>)
 8006c34:	685b      	ldr	r3, [r3, #4]
 8006c36:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	6a1b      	ldr	r3, [r3, #32]
 8006c3e:	069b      	lsls	r3, r3, #26
 8006c40:	4966      	ldr	r1, [pc, #408]	; (8006ddc <HAL_RCC_OscConfig+0x514>)
 8006c42:	4313      	orrs	r3, r2
 8006c44:	604b      	str	r3, [r1, #4]
 8006c46:	e023      	b.n	8006c90 <HAL_RCC_OscConfig+0x3c8>
 8006c48:	4b64      	ldr	r3, [pc, #400]	; (8006ddc <HAL_RCC_OscConfig+0x514>)
 8006c4a:	68db      	ldr	r3, [r3, #12]
 8006c4c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	6a1b      	ldr	r3, [r3, #32]
 8006c54:	061b      	lsls	r3, r3, #24
 8006c56:	4961      	ldr	r1, [pc, #388]	; (8006ddc <HAL_RCC_OscConfig+0x514>)
 8006c58:	4313      	orrs	r3, r2
 8006c5a:	60cb      	str	r3, [r1, #12]
 8006c5c:	e018      	b.n	8006c90 <HAL_RCC_OscConfig+0x3c8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8006c5e:	4b5f      	ldr	r3, [pc, #380]	; (8006ddc <HAL_RCC_OscConfig+0x514>)
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	4a5e      	ldr	r2, [pc, #376]	; (8006ddc <HAL_RCC_OscConfig+0x514>)
 8006c64:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006c68:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c6a:	f7fb fd2f 	bl	80026cc <HAL_GetTick>
 8006c6e:	61f8      	str	r0, [r7, #28]

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006c70:	e008      	b.n	8006c84 <HAL_RCC_OscConfig+0x3bc>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8006c72:	f7fb fd2b 	bl	80026cc <HAL_GetTick>
 8006c76:	4602      	mov	r2, r0
 8006c78:	69fb      	ldr	r3, [r7, #28]
 8006c7a:	1ad3      	subs	r3, r2, r3
 8006c7c:	2b02      	cmp	r3, #2
 8006c7e:	d901      	bls.n	8006c84 <HAL_RCC_OscConfig+0x3bc>
          {
            return HAL_TIMEOUT;
 8006c80:	2303      	movs	r3, #3
 8006c82:	e1cf      	b.n	8007024 <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006c84:	4b55      	ldr	r3, [pc, #340]	; (8006ddc <HAL_RCC_OscConfig+0x514>)
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d1f0      	bne.n	8006c72 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	f003 0308 	and.w	r3, r3, #8
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d036      	beq.n	8006d0a <HAL_RCC_OscConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	695b      	ldr	r3, [r3, #20]
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d019      	beq.n	8006cd8 <HAL_RCC_OscConfig+0x410>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006ca4:	4b4d      	ldr	r3, [pc, #308]	; (8006ddc <HAL_RCC_OscConfig+0x514>)
 8006ca6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006ca8:	4a4c      	ldr	r2, [pc, #304]	; (8006ddc <HAL_RCC_OscConfig+0x514>)
 8006caa:	f043 0301 	orr.w	r3, r3, #1
 8006cae:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006cb0:	f7fb fd0c 	bl	80026cc <HAL_GetTick>
 8006cb4:	61f8      	str	r0, [r7, #28]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006cb6:	e008      	b.n	8006cca <HAL_RCC_OscConfig+0x402>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006cb8:	f7fb fd08 	bl	80026cc <HAL_GetTick>
 8006cbc:	4602      	mov	r2, r0
 8006cbe:	69fb      	ldr	r3, [r7, #28]
 8006cc0:	1ad3      	subs	r3, r2, r3
 8006cc2:	2b02      	cmp	r3, #2
 8006cc4:	d901      	bls.n	8006cca <HAL_RCC_OscConfig+0x402>
        {
          return HAL_TIMEOUT;
 8006cc6:	2303      	movs	r3, #3
 8006cc8:	e1ac      	b.n	8007024 <HAL_RCC_OscConfig+0x75c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006cca:	4b44      	ldr	r3, [pc, #272]	; (8006ddc <HAL_RCC_OscConfig+0x514>)
 8006ccc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006cce:	f003 0302 	and.w	r3, r3, #2
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d0f0      	beq.n	8006cb8 <HAL_RCC_OscConfig+0x3f0>
 8006cd6:	e018      	b.n	8006d0a <HAL_RCC_OscConfig+0x442>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006cd8:	4b40      	ldr	r3, [pc, #256]	; (8006ddc <HAL_RCC_OscConfig+0x514>)
 8006cda:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006cdc:	4a3f      	ldr	r2, [pc, #252]	; (8006ddc <HAL_RCC_OscConfig+0x514>)
 8006cde:	f023 0301 	bic.w	r3, r3, #1
 8006ce2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ce4:	f7fb fcf2 	bl	80026cc <HAL_GetTick>
 8006ce8:	61f8      	str	r0, [r7, #28]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006cea:	e008      	b.n	8006cfe <HAL_RCC_OscConfig+0x436>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006cec:	f7fb fcee 	bl	80026cc <HAL_GetTick>
 8006cf0:	4602      	mov	r2, r0
 8006cf2:	69fb      	ldr	r3, [r7, #28]
 8006cf4:	1ad3      	subs	r3, r2, r3
 8006cf6:	2b02      	cmp	r3, #2
 8006cf8:	d901      	bls.n	8006cfe <HAL_RCC_OscConfig+0x436>
        {
          return HAL_TIMEOUT;
 8006cfa:	2303      	movs	r3, #3
 8006cfc:	e192      	b.n	8007024 <HAL_RCC_OscConfig+0x75c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006cfe:	4b37      	ldr	r3, [pc, #220]	; (8006ddc <HAL_RCC_OscConfig+0x514>)
 8006d00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006d02:	f003 0302 	and.w	r3, r3, #2
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d1f0      	bne.n	8006cec <HAL_RCC_OscConfig+0x424>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	f003 0320 	and.w	r3, r3, #32
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d036      	beq.n	8006d84 <HAL_RCC_OscConfig+0x4bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	699b      	ldr	r3, [r3, #24]
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d019      	beq.n	8006d52 <HAL_RCC_OscConfig+0x48a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006d1e:	4b2f      	ldr	r3, [pc, #188]	; (8006ddc <HAL_RCC_OscConfig+0x514>)
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	4a2e      	ldr	r2, [pc, #184]	; (8006ddc <HAL_RCC_OscConfig+0x514>)
 8006d24:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006d28:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006d2a:	f7fb fccf 	bl	80026cc <HAL_GetTick>
 8006d2e:	61f8      	str	r0, [r7, #28]

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006d30:	e008      	b.n	8006d44 <HAL_RCC_OscConfig+0x47c>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8006d32:	f7fb fccb 	bl	80026cc <HAL_GetTick>
 8006d36:	4602      	mov	r2, r0
 8006d38:	69fb      	ldr	r3, [r7, #28]
 8006d3a:	1ad3      	subs	r3, r2, r3
 8006d3c:	2b02      	cmp	r3, #2
 8006d3e:	d901      	bls.n	8006d44 <HAL_RCC_OscConfig+0x47c>
        {
          return HAL_TIMEOUT;
 8006d40:	2303      	movs	r3, #3
 8006d42:	e16f      	b.n	8007024 <HAL_RCC_OscConfig+0x75c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006d44:	4b25      	ldr	r3, [pc, #148]	; (8006ddc <HAL_RCC_OscConfig+0x514>)
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d0f0      	beq.n	8006d32 <HAL_RCC_OscConfig+0x46a>
 8006d50:	e018      	b.n	8006d84 <HAL_RCC_OscConfig+0x4bc>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006d52:	4b22      	ldr	r3, [pc, #136]	; (8006ddc <HAL_RCC_OscConfig+0x514>)
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	4a21      	ldr	r2, [pc, #132]	; (8006ddc <HAL_RCC_OscConfig+0x514>)
 8006d58:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006d5c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006d5e:	f7fb fcb5 	bl	80026cc <HAL_GetTick>
 8006d62:	61f8      	str	r0, [r7, #28]

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006d64:	e008      	b.n	8006d78 <HAL_RCC_OscConfig+0x4b0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8006d66:	f7fb fcb1 	bl	80026cc <HAL_GetTick>
 8006d6a:	4602      	mov	r2, r0
 8006d6c:	69fb      	ldr	r3, [r7, #28]
 8006d6e:	1ad3      	subs	r3, r2, r3
 8006d70:	2b02      	cmp	r3, #2
 8006d72:	d901      	bls.n	8006d78 <HAL_RCC_OscConfig+0x4b0>
        {
          return HAL_TIMEOUT;
 8006d74:	2303      	movs	r3, #3
 8006d76:	e155      	b.n	8007024 <HAL_RCC_OscConfig+0x75c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006d78:	4b18      	ldr	r3, [pc, #96]	; (8006ddc <HAL_RCC_OscConfig+0x514>)
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d1f0      	bne.n	8006d66 <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	f003 0304 	and.w	r3, r3, #4
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	f000 8086 	beq.w	8006e9e <HAL_RCC_OscConfig+0x5d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006d92:	4b13      	ldr	r3, [pc, #76]	; (8006de0 <HAL_RCC_OscConfig+0x518>)
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	4a12      	ldr	r2, [pc, #72]	; (8006de0 <HAL_RCC_OscConfig+0x518>)
 8006d98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006d9c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006d9e:	f7fb fc95 	bl	80026cc <HAL_GetTick>
 8006da2:	61f8      	str	r0, [r7, #28]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006da4:	e008      	b.n	8006db8 <HAL_RCC_OscConfig+0x4f0>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006da6:	f7fb fc91 	bl	80026cc <HAL_GetTick>
 8006daa:	4602      	mov	r2, r0
 8006dac:	69fb      	ldr	r3, [r7, #28]
 8006dae:	1ad3      	subs	r3, r2, r3
 8006db0:	2b64      	cmp	r3, #100	; 0x64
 8006db2:	d901      	bls.n	8006db8 <HAL_RCC_OscConfig+0x4f0>
      {
        return HAL_TIMEOUT;
 8006db4:	2303      	movs	r3, #3
 8006db6:	e135      	b.n	8007024 <HAL_RCC_OscConfig+0x75c>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006db8:	4b09      	ldr	r3, [pc, #36]	; (8006de0 <HAL_RCC_OscConfig+0x518>)
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d0f0      	beq.n	8006da6 <HAL_RCC_OscConfig+0x4de>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	689b      	ldr	r3, [r3, #8]
 8006dc8:	2b01      	cmp	r3, #1
 8006dca:	d10b      	bne.n	8006de4 <HAL_RCC_OscConfig+0x51c>
 8006dcc:	4b03      	ldr	r3, [pc, #12]	; (8006ddc <HAL_RCC_OscConfig+0x514>)
 8006dce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006dd0:	4a02      	ldr	r2, [pc, #8]	; (8006ddc <HAL_RCC_OscConfig+0x514>)
 8006dd2:	f043 0301 	orr.w	r3, r3, #1
 8006dd6:	6713      	str	r3, [r2, #112]	; 0x70
 8006dd8:	e032      	b.n	8006e40 <HAL_RCC_OscConfig+0x578>
 8006dda:	bf00      	nop
 8006ddc:	58024400 	.word	0x58024400
 8006de0:	58024800 	.word	0x58024800
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	689b      	ldr	r3, [r3, #8]
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d10c      	bne.n	8006e06 <HAL_RCC_OscConfig+0x53e>
 8006dec:	4b8f      	ldr	r3, [pc, #572]	; (800702c <HAL_RCC_OscConfig+0x764>)
 8006dee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006df0:	4a8e      	ldr	r2, [pc, #568]	; (800702c <HAL_RCC_OscConfig+0x764>)
 8006df2:	f023 0301 	bic.w	r3, r3, #1
 8006df6:	6713      	str	r3, [r2, #112]	; 0x70
 8006df8:	4b8c      	ldr	r3, [pc, #560]	; (800702c <HAL_RCC_OscConfig+0x764>)
 8006dfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006dfc:	4a8b      	ldr	r2, [pc, #556]	; (800702c <HAL_RCC_OscConfig+0x764>)
 8006dfe:	f023 0304 	bic.w	r3, r3, #4
 8006e02:	6713      	str	r3, [r2, #112]	; 0x70
 8006e04:	e01c      	b.n	8006e40 <HAL_RCC_OscConfig+0x578>
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	689b      	ldr	r3, [r3, #8]
 8006e0a:	2b05      	cmp	r3, #5
 8006e0c:	d10c      	bne.n	8006e28 <HAL_RCC_OscConfig+0x560>
 8006e0e:	4b87      	ldr	r3, [pc, #540]	; (800702c <HAL_RCC_OscConfig+0x764>)
 8006e10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e12:	4a86      	ldr	r2, [pc, #536]	; (800702c <HAL_RCC_OscConfig+0x764>)
 8006e14:	f043 0304 	orr.w	r3, r3, #4
 8006e18:	6713      	str	r3, [r2, #112]	; 0x70
 8006e1a:	4b84      	ldr	r3, [pc, #528]	; (800702c <HAL_RCC_OscConfig+0x764>)
 8006e1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e1e:	4a83      	ldr	r2, [pc, #524]	; (800702c <HAL_RCC_OscConfig+0x764>)
 8006e20:	f043 0301 	orr.w	r3, r3, #1
 8006e24:	6713      	str	r3, [r2, #112]	; 0x70
 8006e26:	e00b      	b.n	8006e40 <HAL_RCC_OscConfig+0x578>
 8006e28:	4b80      	ldr	r3, [pc, #512]	; (800702c <HAL_RCC_OscConfig+0x764>)
 8006e2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e2c:	4a7f      	ldr	r2, [pc, #508]	; (800702c <HAL_RCC_OscConfig+0x764>)
 8006e2e:	f023 0301 	bic.w	r3, r3, #1
 8006e32:	6713      	str	r3, [r2, #112]	; 0x70
 8006e34:	4b7d      	ldr	r3, [pc, #500]	; (800702c <HAL_RCC_OscConfig+0x764>)
 8006e36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e38:	4a7c      	ldr	r2, [pc, #496]	; (800702c <HAL_RCC_OscConfig+0x764>)
 8006e3a:	f023 0304 	bic.w	r3, r3, #4
 8006e3e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	689b      	ldr	r3, [r3, #8]
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d015      	beq.n	8006e74 <HAL_RCC_OscConfig+0x5ac>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006e48:	f7fb fc40 	bl	80026cc <HAL_GetTick>
 8006e4c:	61f8      	str	r0, [r7, #28]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006e4e:	e00a      	b.n	8006e66 <HAL_RCC_OscConfig+0x59e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006e50:	f7fb fc3c 	bl	80026cc <HAL_GetTick>
 8006e54:	4602      	mov	r2, r0
 8006e56:	69fb      	ldr	r3, [r7, #28]
 8006e58:	1ad3      	subs	r3, r2, r3
 8006e5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8006e5e:	4293      	cmp	r3, r2
 8006e60:	d901      	bls.n	8006e66 <HAL_RCC_OscConfig+0x59e>
        {
          return HAL_TIMEOUT;
 8006e62:	2303      	movs	r3, #3
 8006e64:	e0de      	b.n	8007024 <HAL_RCC_OscConfig+0x75c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006e66:	4b71      	ldr	r3, [pc, #452]	; (800702c <HAL_RCC_OscConfig+0x764>)
 8006e68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e6a:	f003 0302 	and.w	r3, r3, #2
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d0ee      	beq.n	8006e50 <HAL_RCC_OscConfig+0x588>
 8006e72:	e014      	b.n	8006e9e <HAL_RCC_OscConfig+0x5d6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006e74:	f7fb fc2a 	bl	80026cc <HAL_GetTick>
 8006e78:	61f8      	str	r0, [r7, #28]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006e7a:	e00a      	b.n	8006e92 <HAL_RCC_OscConfig+0x5ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006e7c:	f7fb fc26 	bl	80026cc <HAL_GetTick>
 8006e80:	4602      	mov	r2, r0
 8006e82:	69fb      	ldr	r3, [r7, #28]
 8006e84:	1ad3      	subs	r3, r2, r3
 8006e86:	f241 3288 	movw	r2, #5000	; 0x1388
 8006e8a:	4293      	cmp	r3, r2
 8006e8c:	d901      	bls.n	8006e92 <HAL_RCC_OscConfig+0x5ca>
        {
          return HAL_TIMEOUT;
 8006e8e:	2303      	movs	r3, #3
 8006e90:	e0c8      	b.n	8007024 <HAL_RCC_OscConfig+0x75c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006e92:	4b66      	ldr	r3, [pc, #408]	; (800702c <HAL_RCC_OscConfig+0x764>)
 8006e94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e96:	f003 0302 	and.w	r3, r3, #2
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d1ee      	bne.n	8006e7c <HAL_RCC_OscConfig+0x5b4>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	f000 80bd 	beq.w	8007022 <HAL_RCC_OscConfig+0x75a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8006ea8:	4b60      	ldr	r3, [pc, #384]	; (800702c <HAL_RCC_OscConfig+0x764>)
 8006eaa:	691b      	ldr	r3, [r3, #16]
 8006eac:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006eb0:	2b18      	cmp	r3, #24
 8006eb2:	f000 80b4 	beq.w	800701e <HAL_RCC_OscConfig+0x756>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eba:	2b02      	cmp	r3, #2
 8006ebc:	f040 8095 	bne.w	8006fea <HAL_RCC_OscConfig+0x722>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006ec0:	4b5a      	ldr	r3, [pc, #360]	; (800702c <HAL_RCC_OscConfig+0x764>)
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	4a59      	ldr	r2, [pc, #356]	; (800702c <HAL_RCC_OscConfig+0x764>)
 8006ec6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006eca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ecc:	f7fb fbfe 	bl	80026cc <HAL_GetTick>
 8006ed0:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006ed2:	e008      	b.n	8006ee6 <HAL_RCC_OscConfig+0x61e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006ed4:	f7fb fbfa 	bl	80026cc <HAL_GetTick>
 8006ed8:	4602      	mov	r2, r0
 8006eda:	69fb      	ldr	r3, [r7, #28]
 8006edc:	1ad3      	subs	r3, r2, r3
 8006ede:	2b02      	cmp	r3, #2
 8006ee0:	d901      	bls.n	8006ee6 <HAL_RCC_OscConfig+0x61e>
          {
            return HAL_TIMEOUT;
 8006ee2:	2303      	movs	r3, #3
 8006ee4:	e09e      	b.n	8007024 <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006ee6:	4b51      	ldr	r3, [pc, #324]	; (800702c <HAL_RCC_OscConfig+0x764>)
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d1f0      	bne.n	8006ed4 <HAL_RCC_OscConfig+0x60c>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006ef2:	4b4e      	ldr	r3, [pc, #312]	; (800702c <HAL_RCC_OscConfig+0x764>)
 8006ef4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006ef6:	4b4e      	ldr	r3, [pc, #312]	; (8007030 <HAL_RCC_OscConfig+0x768>)
 8006ef8:	4013      	ands	r3, r2
 8006efa:	687a      	ldr	r2, [r7, #4]
 8006efc:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8006efe:	687a      	ldr	r2, [r7, #4]
 8006f00:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8006f02:	0112      	lsls	r2, r2, #4
 8006f04:	430a      	orrs	r2, r1
 8006f06:	4949      	ldr	r1, [pc, #292]	; (800702c <HAL_RCC_OscConfig+0x764>)
 8006f08:	4313      	orrs	r3, r2
 8006f0a:	628b      	str	r3, [r1, #40]	; 0x28
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f10:	3b01      	subs	r3, #1
 8006f12:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f1a:	3b01      	subs	r3, #1
 8006f1c:	025b      	lsls	r3, r3, #9
 8006f1e:	b29b      	uxth	r3, r3
 8006f20:	431a      	orrs	r2, r3
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f26:	3b01      	subs	r3, #1
 8006f28:	041b      	lsls	r3, r3, #16
 8006f2a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006f2e:	431a      	orrs	r2, r3
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f34:	3b01      	subs	r3, #1
 8006f36:	061b      	lsls	r3, r3, #24
 8006f38:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006f3c:	493b      	ldr	r1, [pc, #236]	; (800702c <HAL_RCC_OscConfig+0x764>)
 8006f3e:	4313      	orrs	r3, r2
 8006f40:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8006f42:	4b3a      	ldr	r3, [pc, #232]	; (800702c <HAL_RCC_OscConfig+0x764>)
 8006f44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f46:	4a39      	ldr	r2, [pc, #228]	; (800702c <HAL_RCC_OscConfig+0x764>)
 8006f48:	f023 0301 	bic.w	r3, r3, #1
 8006f4c:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL  PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006f4e:	4b37      	ldr	r3, [pc, #220]	; (800702c <HAL_RCC_OscConfig+0x764>)
 8006f50:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006f52:	4b38      	ldr	r3, [pc, #224]	; (8007034 <HAL_RCC_OscConfig+0x76c>)
 8006f54:	4013      	ands	r3, r2
 8006f56:	687a      	ldr	r2, [r7, #4]
 8006f58:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8006f5a:	00d2      	lsls	r2, r2, #3
 8006f5c:	4933      	ldr	r1, [pc, #204]	; (800702c <HAL_RCC_OscConfig+0x764>)
 8006f5e:	4313      	orrs	r3, r2
 8006f60:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8006f62:	4b32      	ldr	r3, [pc, #200]	; (800702c <HAL_RCC_OscConfig+0x764>)
 8006f64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f66:	f023 020c 	bic.w	r2, r3, #12
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f6e:	492f      	ldr	r1, [pc, #188]	; (800702c <HAL_RCC_OscConfig+0x764>)
 8006f70:	4313      	orrs	r3, r2
 8006f72:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8006f74:	4b2d      	ldr	r3, [pc, #180]	; (800702c <HAL_RCC_OscConfig+0x764>)
 8006f76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f78:	f023 0202 	bic.w	r2, r3, #2
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f80:	492a      	ldr	r1, [pc, #168]	; (800702c <HAL_RCC_OscConfig+0x764>)
 8006f82:	4313      	orrs	r3, r2
 8006f84:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006f86:	4b29      	ldr	r3, [pc, #164]	; (800702c <HAL_RCC_OscConfig+0x764>)
 8006f88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f8a:	4a28      	ldr	r2, [pc, #160]	; (800702c <HAL_RCC_OscConfig+0x764>)
 8006f8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006f90:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006f92:	4b26      	ldr	r3, [pc, #152]	; (800702c <HAL_RCC_OscConfig+0x764>)
 8006f94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f96:	4a25      	ldr	r2, [pc, #148]	; (800702c <HAL_RCC_OscConfig+0x764>)
 8006f98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006f9c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8006f9e:	4b23      	ldr	r3, [pc, #140]	; (800702c <HAL_RCC_OscConfig+0x764>)
 8006fa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fa2:	4a22      	ldr	r2, [pc, #136]	; (800702c <HAL_RCC_OscConfig+0x764>)
 8006fa4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006fa8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8006faa:	4b20      	ldr	r3, [pc, #128]	; (800702c <HAL_RCC_OscConfig+0x764>)
 8006fac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fae:	4a1f      	ldr	r2, [pc, #124]	; (800702c <HAL_RCC_OscConfig+0x764>)
 8006fb0:	f043 0301 	orr.w	r3, r3, #1
 8006fb4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006fb6:	4b1d      	ldr	r3, [pc, #116]	; (800702c <HAL_RCC_OscConfig+0x764>)
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	4a1c      	ldr	r2, [pc, #112]	; (800702c <HAL_RCC_OscConfig+0x764>)
 8006fbc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006fc0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006fc2:	f7fb fb83 	bl	80026cc <HAL_GetTick>
 8006fc6:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006fc8:	e008      	b.n	8006fdc <HAL_RCC_OscConfig+0x714>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006fca:	f7fb fb7f 	bl	80026cc <HAL_GetTick>
 8006fce:	4602      	mov	r2, r0
 8006fd0:	69fb      	ldr	r3, [r7, #28]
 8006fd2:	1ad3      	subs	r3, r2, r3
 8006fd4:	2b02      	cmp	r3, #2
 8006fd6:	d901      	bls.n	8006fdc <HAL_RCC_OscConfig+0x714>
          {
            return HAL_TIMEOUT;
 8006fd8:	2303      	movs	r3, #3
 8006fda:	e023      	b.n	8007024 <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006fdc:	4b13      	ldr	r3, [pc, #76]	; (800702c <HAL_RCC_OscConfig+0x764>)
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d0f0      	beq.n	8006fca <HAL_RCC_OscConfig+0x702>
 8006fe8:	e01b      	b.n	8007022 <HAL_RCC_OscConfig+0x75a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006fea:	4b10      	ldr	r3, [pc, #64]	; (800702c <HAL_RCC_OscConfig+0x764>)
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	4a0f      	ldr	r2, [pc, #60]	; (800702c <HAL_RCC_OscConfig+0x764>)
 8006ff0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006ff4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ff6:	f7fb fb69 	bl	80026cc <HAL_GetTick>
 8006ffa:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006ffc:	e008      	b.n	8007010 <HAL_RCC_OscConfig+0x748>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006ffe:	f7fb fb65 	bl	80026cc <HAL_GetTick>
 8007002:	4602      	mov	r2, r0
 8007004:	69fb      	ldr	r3, [r7, #28]
 8007006:	1ad3      	subs	r3, r2, r3
 8007008:	2b02      	cmp	r3, #2
 800700a:	d901      	bls.n	8007010 <HAL_RCC_OscConfig+0x748>
          {
            return HAL_TIMEOUT;
 800700c:	2303      	movs	r3, #3
 800700e:	e009      	b.n	8007024 <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007010:	4b06      	ldr	r3, [pc, #24]	; (800702c <HAL_RCC_OscConfig+0x764>)
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007018:	2b00      	cmp	r3, #0
 800701a:	d1f0      	bne.n	8006ffe <HAL_RCC_OscConfig+0x736>
 800701c:	e001      	b.n	8007022 <HAL_RCC_OscConfig+0x75a>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800701e:	2301      	movs	r3, #1
 8007020:	e000      	b.n	8007024 <HAL_RCC_OscConfig+0x75c>
    }
  }
  return HAL_OK;
 8007022:	2300      	movs	r3, #0
}
 8007024:	4618      	mov	r0, r3
 8007026:	3728      	adds	r7, #40	; 0x28
 8007028:	46bd      	mov	sp, r7
 800702a:	bd80      	pop	{r7, pc}
 800702c:	58024400 	.word	0x58024400
 8007030:	fffffc0c 	.word	0xfffffc0c
 8007034:	ffff0007 	.word	0xffff0007

08007038 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007038:	b580      	push	{r7, lr}
 800703a:	b084      	sub	sp, #16
 800703c:	af00      	add	r7, sp, #0
 800703e:	6078      	str	r0, [r7, #4]
 8007040:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	2b00      	cmp	r3, #0
 8007046:	d101      	bne.n	800704c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007048:	2301      	movs	r3, #1
 800704a:	e18d      	b.n	8007368 <HAL_RCC_ClockConfig+0x330>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800704c:	4b8a      	ldr	r3, [pc, #552]	; (8007278 <HAL_RCC_ClockConfig+0x240>)
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	f003 030f 	and.w	r3, r3, #15
 8007054:	683a      	ldr	r2, [r7, #0]
 8007056:	429a      	cmp	r2, r3
 8007058:	d910      	bls.n	800707c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800705a:	4b87      	ldr	r3, [pc, #540]	; (8007278 <HAL_RCC_ClockConfig+0x240>)
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	f023 020f 	bic.w	r2, r3, #15
 8007062:	4985      	ldr	r1, [pc, #532]	; (8007278 <HAL_RCC_ClockConfig+0x240>)
 8007064:	683b      	ldr	r3, [r7, #0]
 8007066:	4313      	orrs	r3, r2
 8007068:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800706a:	4b83      	ldr	r3, [pc, #524]	; (8007278 <HAL_RCC_ClockConfig+0x240>)
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	f003 030f 	and.w	r3, r3, #15
 8007072:	683a      	ldr	r2, [r7, #0]
 8007074:	429a      	cmp	r2, r3
 8007076:	d001      	beq.n	800707c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8007078:	2301      	movs	r3, #1
 800707a:	e175      	b.n	8007368 <HAL_RCC_ClockConfig+0x330>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	f003 0304 	and.w	r3, r3, #4
 8007084:	2b00      	cmp	r3, #0
 8007086:	d010      	beq.n	80070aa <HAL_RCC_ClockConfig+0x72>
  {
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	691a      	ldr	r2, [r3, #16]
 800708c:	4b7b      	ldr	r3, [pc, #492]	; (800727c <HAL_RCC_ClockConfig+0x244>)
 800708e:	699b      	ldr	r3, [r3, #24]
 8007090:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007094:	429a      	cmp	r2, r3
 8007096:	d908      	bls.n	80070aa <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007098:	4b78      	ldr	r3, [pc, #480]	; (800727c <HAL_RCC_ClockConfig+0x244>)
 800709a:	699b      	ldr	r3, [r3, #24]
 800709c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	691b      	ldr	r3, [r3, #16]
 80070a4:	4975      	ldr	r1, [pc, #468]	; (800727c <HAL_RCC_ClockConfig+0x244>)
 80070a6:	4313      	orrs	r3, r2
 80070a8:	618b      	str	r3, [r1, #24]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	f003 0308 	and.w	r3, r3, #8
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d010      	beq.n	80070d8 <HAL_RCC_ClockConfig+0xa0>
  {
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	695a      	ldr	r2, [r3, #20]
 80070ba:	4b70      	ldr	r3, [pc, #448]	; (800727c <HAL_RCC_ClockConfig+0x244>)
 80070bc:	69db      	ldr	r3, [r3, #28]
 80070be:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80070c2:	429a      	cmp	r2, r3
 80070c4:	d908      	bls.n	80070d8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80070c6:	4b6d      	ldr	r3, [pc, #436]	; (800727c <HAL_RCC_ClockConfig+0x244>)
 80070c8:	69db      	ldr	r3, [r3, #28]
 80070ca:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	695b      	ldr	r3, [r3, #20]
 80070d2:	496a      	ldr	r1, [pc, #424]	; (800727c <HAL_RCC_ClockConfig+0x244>)
 80070d4:	4313      	orrs	r3, r2
 80070d6:	61cb      	str	r3, [r1, #28]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	f003 0310 	and.w	r3, r3, #16
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d010      	beq.n	8007106 <HAL_RCC_ClockConfig+0xce>
  {
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	699a      	ldr	r2, [r3, #24]
 80070e8:	4b64      	ldr	r3, [pc, #400]	; (800727c <HAL_RCC_ClockConfig+0x244>)
 80070ea:	69db      	ldr	r3, [r3, #28]
 80070ec:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80070f0:	429a      	cmp	r2, r3
 80070f2:	d908      	bls.n	8007106 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80070f4:	4b61      	ldr	r3, [pc, #388]	; (800727c <HAL_RCC_ClockConfig+0x244>)
 80070f6:	69db      	ldr	r3, [r3, #28]
 80070f8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	699b      	ldr	r3, [r3, #24]
 8007100:	495e      	ldr	r1, [pc, #376]	; (800727c <HAL_RCC_ClockConfig+0x244>)
 8007102:	4313      	orrs	r3, r2
 8007104:	61cb      	str	r3, [r1, #28]
    }
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	f003 0320 	and.w	r3, r3, #32
 800710e:	2b00      	cmp	r3, #0
 8007110:	d010      	beq.n	8007134 <HAL_RCC_ClockConfig+0xfc>
  {
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	69da      	ldr	r2, [r3, #28]
 8007116:	4b59      	ldr	r3, [pc, #356]	; (800727c <HAL_RCC_ClockConfig+0x244>)
 8007118:	6a1b      	ldr	r3, [r3, #32]
 800711a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800711e:	429a      	cmp	r2, r3
 8007120:	d908      	bls.n	8007134 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8007122:	4b56      	ldr	r3, [pc, #344]	; (800727c <HAL_RCC_ClockConfig+0x244>)
 8007124:	6a1b      	ldr	r3, [r3, #32]
 8007126:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	69db      	ldr	r3, [r3, #28]
 800712e:	4953      	ldr	r1, [pc, #332]	; (800727c <HAL_RCC_ClockConfig+0x244>)
 8007130:	4313      	orrs	r3, r2
 8007132:	620b      	str	r3, [r1, #32]
    }
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	f003 0302 	and.w	r3, r3, #2
 800713c:	2b00      	cmp	r3, #0
 800713e:	d010      	beq.n	8007162 <HAL_RCC_ClockConfig+0x12a>
  {
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	68da      	ldr	r2, [r3, #12]
 8007144:	4b4d      	ldr	r3, [pc, #308]	; (800727c <HAL_RCC_ClockConfig+0x244>)
 8007146:	699b      	ldr	r3, [r3, #24]
 8007148:	f003 030f 	and.w	r3, r3, #15
 800714c:	429a      	cmp	r2, r3
 800714e:	d908      	bls.n	8007162 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007150:	4b4a      	ldr	r3, [pc, #296]	; (800727c <HAL_RCC_ClockConfig+0x244>)
 8007152:	699b      	ldr	r3, [r3, #24]
 8007154:	f023 020f 	bic.w	r2, r3, #15
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	68db      	ldr	r3, [r3, #12]
 800715c:	4947      	ldr	r1, [pc, #284]	; (800727c <HAL_RCC_ClockConfig+0x244>)
 800715e:	4313      	orrs	r3, r2
 8007160:	618b      	str	r3, [r1, #24]
    }
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	f003 0301 	and.w	r3, r3, #1
 800716a:	2b00      	cmp	r3, #0
 800716c:	d055      	beq.n	800721a <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800716e:	4b43      	ldr	r3, [pc, #268]	; (800727c <HAL_RCC_ClockConfig+0x244>)
 8007170:	699b      	ldr	r3, [r3, #24]
 8007172:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	689b      	ldr	r3, [r3, #8]
 800717a:	4940      	ldr	r1, [pc, #256]	; (800727c <HAL_RCC_ClockConfig+0x244>)
 800717c:	4313      	orrs	r3, r2
 800717e:	618b      	str	r3, [r1, #24]
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	685b      	ldr	r3, [r3, #4]
 8007184:	2b02      	cmp	r3, #2
 8007186:	d107      	bne.n	8007198 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007188:	4b3c      	ldr	r3, [pc, #240]	; (800727c <HAL_RCC_ClockConfig+0x244>)
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007190:	2b00      	cmp	r3, #0
 8007192:	d121      	bne.n	80071d8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8007194:	2301      	movs	r3, #1
 8007196:	e0e7      	b.n	8007368 <HAL_RCC_ClockConfig+0x330>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	685b      	ldr	r3, [r3, #4]
 800719c:	2b03      	cmp	r3, #3
 800719e:	d107      	bne.n	80071b0 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80071a0:	4b36      	ldr	r3, [pc, #216]	; (800727c <HAL_RCC_ClockConfig+0x244>)
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d115      	bne.n	80071d8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80071ac:	2301      	movs	r3, #1
 80071ae:	e0db      	b.n	8007368 <HAL_RCC_ClockConfig+0x330>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	685b      	ldr	r3, [r3, #4]
 80071b4:	2b01      	cmp	r3, #1
 80071b6:	d107      	bne.n	80071c8 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80071b8:	4b30      	ldr	r3, [pc, #192]	; (800727c <HAL_RCC_ClockConfig+0x244>)
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d109      	bne.n	80071d8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80071c4:	2301      	movs	r3, #1
 80071c6:	e0cf      	b.n	8007368 <HAL_RCC_ClockConfig+0x330>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80071c8:	4b2c      	ldr	r3, [pc, #176]	; (800727c <HAL_RCC_ClockConfig+0x244>)
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	f003 0304 	and.w	r3, r3, #4
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d101      	bne.n	80071d8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80071d4:	2301      	movs	r3, #1
 80071d6:	e0c7      	b.n	8007368 <HAL_RCC_ClockConfig+0x330>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80071d8:	4b28      	ldr	r3, [pc, #160]	; (800727c <HAL_RCC_ClockConfig+0x244>)
 80071da:	691b      	ldr	r3, [r3, #16]
 80071dc:	f023 0207 	bic.w	r2, r3, #7
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	685b      	ldr	r3, [r3, #4]
 80071e4:	4925      	ldr	r1, [pc, #148]	; (800727c <HAL_RCC_ClockConfig+0x244>)
 80071e6:	4313      	orrs	r3, r2
 80071e8:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80071ea:	f7fb fa6f 	bl	80026cc <HAL_GetTick>
 80071ee:	60f8      	str	r0, [r7, #12]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80071f0:	e00a      	b.n	8007208 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80071f2:	f7fb fa6b 	bl	80026cc <HAL_GetTick>
 80071f6:	4602      	mov	r2, r0
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	1ad3      	subs	r3, r2, r3
 80071fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8007200:	4293      	cmp	r3, r2
 8007202:	d901      	bls.n	8007208 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8007204:	2303      	movs	r3, #3
 8007206:	e0af      	b.n	8007368 <HAL_RCC_ClockConfig+0x330>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007208:	4b1c      	ldr	r3, [pc, #112]	; (800727c <HAL_RCC_ClockConfig+0x244>)
 800720a:	691b      	ldr	r3, [r3, #16]
 800720c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	685b      	ldr	r3, [r3, #4]
 8007214:	00db      	lsls	r3, r3, #3
 8007216:	429a      	cmp	r2, r3
 8007218:	d1eb      	bne.n	80071f2 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	f003 0302 	and.w	r3, r3, #2
 8007222:	2b00      	cmp	r3, #0
 8007224:	d010      	beq.n	8007248 <HAL_RCC_ClockConfig+0x210>
  {
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	68da      	ldr	r2, [r3, #12]
 800722a:	4b14      	ldr	r3, [pc, #80]	; (800727c <HAL_RCC_ClockConfig+0x244>)
 800722c:	699b      	ldr	r3, [r3, #24]
 800722e:	f003 030f 	and.w	r3, r3, #15
 8007232:	429a      	cmp	r2, r3
 8007234:	d208      	bcs.n	8007248 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007236:	4b11      	ldr	r3, [pc, #68]	; (800727c <HAL_RCC_ClockConfig+0x244>)
 8007238:	699b      	ldr	r3, [r3, #24]
 800723a:	f023 020f 	bic.w	r2, r3, #15
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	68db      	ldr	r3, [r3, #12]
 8007242:	490e      	ldr	r1, [pc, #56]	; (800727c <HAL_RCC_ClockConfig+0x244>)
 8007244:	4313      	orrs	r3, r2
 8007246:	618b      	str	r3, [r1, #24]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007248:	4b0b      	ldr	r3, [pc, #44]	; (8007278 <HAL_RCC_ClockConfig+0x240>)
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	f003 030f 	and.w	r3, r3, #15
 8007250:	683a      	ldr	r2, [r7, #0]
 8007252:	429a      	cmp	r2, r3
 8007254:	d214      	bcs.n	8007280 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007256:	4b08      	ldr	r3, [pc, #32]	; (8007278 <HAL_RCC_ClockConfig+0x240>)
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	f023 020f 	bic.w	r2, r3, #15
 800725e:	4906      	ldr	r1, [pc, #24]	; (8007278 <HAL_RCC_ClockConfig+0x240>)
 8007260:	683b      	ldr	r3, [r7, #0]
 8007262:	4313      	orrs	r3, r2
 8007264:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007266:	4b04      	ldr	r3, [pc, #16]	; (8007278 <HAL_RCC_ClockConfig+0x240>)
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	f003 030f 	and.w	r3, r3, #15
 800726e:	683a      	ldr	r2, [r7, #0]
 8007270:	429a      	cmp	r2, r3
 8007272:	d005      	beq.n	8007280 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8007274:	2301      	movs	r3, #1
 8007276:	e077      	b.n	8007368 <HAL_RCC_ClockConfig+0x330>
 8007278:	52002000 	.word	0x52002000
 800727c:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	f003 0304 	and.w	r3, r3, #4
 8007288:	2b00      	cmp	r3, #0
 800728a:	d010      	beq.n	80072ae <HAL_RCC_ClockConfig+0x276>
 {
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	691a      	ldr	r2, [r3, #16]
 8007290:	4b37      	ldr	r3, [pc, #220]	; (8007370 <HAL_RCC_ClockConfig+0x338>)
 8007292:	699b      	ldr	r3, [r3, #24]
 8007294:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007298:	429a      	cmp	r2, r3
 800729a:	d208      	bcs.n	80072ae <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800729c:	4b34      	ldr	r3, [pc, #208]	; (8007370 <HAL_RCC_ClockConfig+0x338>)
 800729e:	699b      	ldr	r3, [r3, #24]
 80072a0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	691b      	ldr	r3, [r3, #16]
 80072a8:	4931      	ldr	r1, [pc, #196]	; (8007370 <HAL_RCC_ClockConfig+0x338>)
 80072aa:	4313      	orrs	r3, r2
 80072ac:	618b      	str	r3, [r1, #24]
   }
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	f003 0308 	and.w	r3, r3, #8
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d010      	beq.n	80072dc <HAL_RCC_ClockConfig+0x2a4>
 {
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	695a      	ldr	r2, [r3, #20]
 80072be:	4b2c      	ldr	r3, [pc, #176]	; (8007370 <HAL_RCC_ClockConfig+0x338>)
 80072c0:	69db      	ldr	r3, [r3, #28]
 80072c2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80072c6:	429a      	cmp	r2, r3
 80072c8:	d208      	bcs.n	80072dc <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80072ca:	4b29      	ldr	r3, [pc, #164]	; (8007370 <HAL_RCC_ClockConfig+0x338>)
 80072cc:	69db      	ldr	r3, [r3, #28]
 80072ce:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	695b      	ldr	r3, [r3, #20]
 80072d6:	4926      	ldr	r1, [pc, #152]	; (8007370 <HAL_RCC_ClockConfig+0x338>)
 80072d8:	4313      	orrs	r3, r2
 80072da:	61cb      	str	r3, [r1, #28]
   }
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	f003 0310 	and.w	r3, r3, #16
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d010      	beq.n	800730a <HAL_RCC_ClockConfig+0x2d2>
 {
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	699a      	ldr	r2, [r3, #24]
 80072ec:	4b20      	ldr	r3, [pc, #128]	; (8007370 <HAL_RCC_ClockConfig+0x338>)
 80072ee:	69db      	ldr	r3, [r3, #28]
 80072f0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80072f4:	429a      	cmp	r2, r3
 80072f6:	d208      	bcs.n	800730a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80072f8:	4b1d      	ldr	r3, [pc, #116]	; (8007370 <HAL_RCC_ClockConfig+0x338>)
 80072fa:	69db      	ldr	r3, [r3, #28]
 80072fc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	699b      	ldr	r3, [r3, #24]
 8007304:	491a      	ldr	r1, [pc, #104]	; (8007370 <HAL_RCC_ClockConfig+0x338>)
 8007306:	4313      	orrs	r3, r2
 8007308:	61cb      	str	r3, [r1, #28]
   }
 }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	f003 0320 	and.w	r3, r3, #32
 8007312:	2b00      	cmp	r3, #0
 8007314:	d010      	beq.n	8007338 <HAL_RCC_ClockConfig+0x300>
 {
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	69da      	ldr	r2, [r3, #28]
 800731a:	4b15      	ldr	r3, [pc, #84]	; (8007370 <HAL_RCC_ClockConfig+0x338>)
 800731c:	6a1b      	ldr	r3, [r3, #32]
 800731e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007322:	429a      	cmp	r2, r3
 8007324:	d208      	bcs.n	8007338 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8007326:	4b12      	ldr	r3, [pc, #72]	; (8007370 <HAL_RCC_ClockConfig+0x338>)
 8007328:	6a1b      	ldr	r3, [r3, #32]
 800732a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	69db      	ldr	r3, [r3, #28]
 8007332:	490f      	ldr	r1, [pc, #60]	; (8007370 <HAL_RCC_ClockConfig+0x338>)
 8007334:	4313      	orrs	r3, r2
 8007336:	620b      	str	r3, [r1, #32]
   }
 }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8007338:	f000 f822 	bl	8007380 <HAL_RCC_GetSysClockFreq>
 800733c:	4601      	mov	r1, r0
 800733e:	4b0c      	ldr	r3, [pc, #48]	; (8007370 <HAL_RCC_ClockConfig+0x338>)
 8007340:	699b      	ldr	r3, [r3, #24]
 8007342:	0a1b      	lsrs	r3, r3, #8
 8007344:	f003 030f 	and.w	r3, r3, #15
 8007348:	4a0a      	ldr	r2, [pc, #40]	; (8007374 <HAL_RCC_ClockConfig+0x33c>)
 800734a:	5cd3      	ldrb	r3, [r2, r3]
 800734c:	f003 031f 	and.w	r3, r3, #31
 8007350:	fa21 f303 	lsr.w	r3, r1, r3
 8007354:	4a08      	ldr	r2, [pc, #32]	; (8007378 <HAL_RCC_ClockConfig+0x340>)
 8007356:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8007358:	4b08      	ldr	r3, [pc, #32]	; (800737c <HAL_RCC_ClockConfig+0x344>)
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	4618      	mov	r0, r3
 800735e:	f7fb f96b 	bl	8002638 <HAL_InitTick>
 8007362:	4603      	mov	r3, r0
 8007364:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 8007366:	7afb      	ldrb	r3, [r7, #11]
}
 8007368:	4618      	mov	r0, r3
 800736a:	3710      	adds	r7, #16
 800736c:	46bd      	mov	sp, r7
 800736e:	bd80      	pop	{r7, pc}
 8007370:	58024400 	.word	0x58024400
 8007374:	0800f0b0 	.word	0x0800f0b0
 8007378:	24000088 	.word	0x24000088
 800737c:	24000090 	.word	0x24000090

08007380 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007380:	b480      	push	{r7}
 8007382:	b089      	sub	sp, #36	; 0x24
 8007384:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007386:	4baf      	ldr	r3, [pc, #700]	; (8007644 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8007388:	691b      	ldr	r3, [r3, #16]
 800738a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800738e:	2b18      	cmp	r3, #24
 8007390:	f200 814e 	bhi.w	8007630 <HAL_RCC_GetSysClockFreq+0x2b0>
 8007394:	a201      	add	r2, pc, #4	; (adr r2, 800739c <HAL_RCC_GetSysClockFreq+0x1c>)
 8007396:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800739a:	bf00      	nop
 800739c:	08007401 	.word	0x08007401
 80073a0:	08007631 	.word	0x08007631
 80073a4:	08007631 	.word	0x08007631
 80073a8:	08007631 	.word	0x08007631
 80073ac:	08007631 	.word	0x08007631
 80073b0:	08007631 	.word	0x08007631
 80073b4:	08007631 	.word	0x08007631
 80073b8:	08007631 	.word	0x08007631
 80073bc:	08007427 	.word	0x08007427
 80073c0:	08007631 	.word	0x08007631
 80073c4:	08007631 	.word	0x08007631
 80073c8:	08007631 	.word	0x08007631
 80073cc:	08007631 	.word	0x08007631
 80073d0:	08007631 	.word	0x08007631
 80073d4:	08007631 	.word	0x08007631
 80073d8:	08007631 	.word	0x08007631
 80073dc:	0800742d 	.word	0x0800742d
 80073e0:	08007631 	.word	0x08007631
 80073e4:	08007631 	.word	0x08007631
 80073e8:	08007631 	.word	0x08007631
 80073ec:	08007631 	.word	0x08007631
 80073f0:	08007631 	.word	0x08007631
 80073f4:	08007631 	.word	0x08007631
 80073f8:	08007631 	.word	0x08007631
 80073fc:	08007433 	.word	0x08007433
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007400:	4b90      	ldr	r3, [pc, #576]	; (8007644 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	f003 0320 	and.w	r3, r3, #32
 8007408:	2b00      	cmp	r3, #0
 800740a:	d009      	beq.n	8007420 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800740c:	4b8d      	ldr	r3, [pc, #564]	; (8007644 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	08db      	lsrs	r3, r3, #3
 8007412:	f003 0303 	and.w	r3, r3, #3
 8007416:	4a8c      	ldr	r2, [pc, #560]	; (8007648 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8007418:	fa22 f303 	lsr.w	r3, r2, r3
 800741c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800741e:	e10a      	b.n	8007636 <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8007420:	4b89      	ldr	r3, [pc, #548]	; (8007648 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8007422:	61bb      	str	r3, [r7, #24]
    break;
 8007424:	e107      	b.n	8007636 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8007426:	4b89      	ldr	r3, [pc, #548]	; (800764c <HAL_RCC_GetSysClockFreq+0x2cc>)
 8007428:	61bb      	str	r3, [r7, #24]
    break;
 800742a:	e104      	b.n	8007636 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 800742c:	4b88      	ldr	r3, [pc, #544]	; (8007650 <HAL_RCC_GetSysClockFreq+0x2d0>)
 800742e:	61bb      	str	r3, [r7, #24]
    break;
 8007430:	e101      	b.n	8007636 <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007432:	4b84      	ldr	r3, [pc, #528]	; (8007644 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8007434:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007436:	f003 0303 	and.w	r3, r3, #3
 800743a:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800743c:	4b81      	ldr	r3, [pc, #516]	; (8007644 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800743e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007440:	091b      	lsrs	r3, r3, #4
 8007442:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007446:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8007448:	4b7e      	ldr	r3, [pc, #504]	; (8007644 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800744a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800744c:	f003 0301 	and.w	r3, r3, #1
 8007450:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8007452:	4b7c      	ldr	r3, [pc, #496]	; (8007644 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8007454:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007456:	08db      	lsrs	r3, r3, #3
 8007458:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800745c:	68fa      	ldr	r2, [r7, #12]
 800745e:	fb02 f303 	mul.w	r3, r2, r3
 8007462:	ee07 3a90 	vmov	s15, r3
 8007466:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800746a:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800746e:	693b      	ldr	r3, [r7, #16]
 8007470:	2b00      	cmp	r3, #0
 8007472:	f000 80da 	beq.w	800762a <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 8007476:	697b      	ldr	r3, [r7, #20]
 8007478:	2b01      	cmp	r3, #1
 800747a:	d05a      	beq.n	8007532 <HAL_RCC_GetSysClockFreq+0x1b2>
 800747c:	2b01      	cmp	r3, #1
 800747e:	d302      	bcc.n	8007486 <HAL_RCC_GetSysClockFreq+0x106>
 8007480:	2b02      	cmp	r3, #2
 8007482:	d078      	beq.n	8007576 <HAL_RCC_GetSysClockFreq+0x1f6>
 8007484:	e099      	b.n	80075ba <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007486:	4b6f      	ldr	r3, [pc, #444]	; (8007644 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	f003 0320 	and.w	r3, r3, #32
 800748e:	2b00      	cmp	r3, #0
 8007490:	d02d      	beq.n	80074ee <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007492:	4b6c      	ldr	r3, [pc, #432]	; (8007644 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	08db      	lsrs	r3, r3, #3
 8007498:	f003 0303 	and.w	r3, r3, #3
 800749c:	4a6a      	ldr	r2, [pc, #424]	; (8007648 <HAL_RCC_GetSysClockFreq+0x2c8>)
 800749e:	fa22 f303 	lsr.w	r3, r2, r3
 80074a2:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	ee07 3a90 	vmov	s15, r3
 80074aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80074ae:	693b      	ldr	r3, [r7, #16]
 80074b0:	ee07 3a90 	vmov	s15, r3
 80074b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074b8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80074bc:	4b61      	ldr	r3, [pc, #388]	; (8007644 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80074be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80074c4:	ee07 3a90 	vmov	s15, r3
 80074c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80074cc:	ed97 6a02 	vldr	s12, [r7, #8]
 80074d0:	eddf 5a60 	vldr	s11, [pc, #384]	; 8007654 <HAL_RCC_GetSysClockFreq+0x2d4>
 80074d4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80074d8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80074dc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80074e0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80074e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80074e8:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80074ec:	e087      	b.n	80075fe <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80074ee:	693b      	ldr	r3, [r7, #16]
 80074f0:	ee07 3a90 	vmov	s15, r3
 80074f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074f8:	eddf 6a57 	vldr	s13, [pc, #348]	; 8007658 <HAL_RCC_GetSysClockFreq+0x2d8>
 80074fc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007500:	4b50      	ldr	r3, [pc, #320]	; (8007644 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8007502:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007504:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007508:	ee07 3a90 	vmov	s15, r3
 800750c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007510:	ed97 6a02 	vldr	s12, [r7, #8]
 8007514:	eddf 5a4f 	vldr	s11, [pc, #316]	; 8007654 <HAL_RCC_GetSysClockFreq+0x2d4>
 8007518:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800751c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007520:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007524:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007528:	ee67 7a27 	vmul.f32	s15, s14, s15
 800752c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007530:	e065      	b.n	80075fe <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007532:	693b      	ldr	r3, [r7, #16]
 8007534:	ee07 3a90 	vmov	s15, r3
 8007538:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800753c:	eddf 6a47 	vldr	s13, [pc, #284]	; 800765c <HAL_RCC_GetSysClockFreq+0x2dc>
 8007540:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007544:	4b3f      	ldr	r3, [pc, #252]	; (8007644 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8007546:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007548:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800754c:	ee07 3a90 	vmov	s15, r3
 8007550:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007554:	ed97 6a02 	vldr	s12, [r7, #8]
 8007558:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8007654 <HAL_RCC_GetSysClockFreq+0x2d4>
 800755c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007560:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007564:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007568:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800756c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007570:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007574:	e043      	b.n	80075fe <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007576:	693b      	ldr	r3, [r7, #16]
 8007578:	ee07 3a90 	vmov	s15, r3
 800757c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007580:	eddf 6a37 	vldr	s13, [pc, #220]	; 8007660 <HAL_RCC_GetSysClockFreq+0x2e0>
 8007584:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007588:	4b2e      	ldr	r3, [pc, #184]	; (8007644 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800758a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800758c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007590:	ee07 3a90 	vmov	s15, r3
 8007594:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007598:	ed97 6a02 	vldr	s12, [r7, #8]
 800759c:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8007654 <HAL_RCC_GetSysClockFreq+0x2d4>
 80075a0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80075a4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80075a8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80075ac:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80075b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80075b4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80075b8:	e021      	b.n	80075fe <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80075ba:	693b      	ldr	r3, [r7, #16]
 80075bc:	ee07 3a90 	vmov	s15, r3
 80075c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075c4:	eddf 6a25 	vldr	s13, [pc, #148]	; 800765c <HAL_RCC_GetSysClockFreq+0x2dc>
 80075c8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80075cc:	4b1d      	ldr	r3, [pc, #116]	; (8007644 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80075ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80075d4:	ee07 3a90 	vmov	s15, r3
 80075d8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80075dc:	ed97 6a02 	vldr	s12, [r7, #8]
 80075e0:	eddf 5a1c 	vldr	s11, [pc, #112]	; 8007654 <HAL_RCC_GetSysClockFreq+0x2d4>
 80075e4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80075e8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80075ec:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80075f0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80075f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80075f8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80075fc:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80075fe:	4b11      	ldr	r3, [pc, #68]	; (8007644 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8007600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007602:	0a5b      	lsrs	r3, r3, #9
 8007604:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007608:	3301      	adds	r3, #1
 800760a:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800760c:	683b      	ldr	r3, [r7, #0]
 800760e:	ee07 3a90 	vmov	s15, r3
 8007612:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007616:	edd7 6a07 	vldr	s13, [r7, #28]
 800761a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800761e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007622:	ee17 3a90 	vmov	r3, s15
 8007626:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8007628:	e005      	b.n	8007636 <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 800762a:	2300      	movs	r3, #0
 800762c:	61bb      	str	r3, [r7, #24]
    break;
 800762e:	e002      	b.n	8007636 <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 8007630:	4b06      	ldr	r3, [pc, #24]	; (800764c <HAL_RCC_GetSysClockFreq+0x2cc>)
 8007632:	61bb      	str	r3, [r7, #24]
    break;
 8007634:	bf00      	nop
  }

  return sysclockfreq;
 8007636:	69bb      	ldr	r3, [r7, #24]
}
 8007638:	4618      	mov	r0, r3
 800763a:	3724      	adds	r7, #36	; 0x24
 800763c:	46bd      	mov	sp, r7
 800763e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007642:	4770      	bx	lr
 8007644:	58024400 	.word	0x58024400
 8007648:	03d09000 	.word	0x03d09000
 800764c:	003d0900 	.word	0x003d0900
 8007650:	017d7840 	.word	0x017d7840
 8007654:	46000000 	.word	0x46000000
 8007658:	4c742400 	.word	0x4c742400
 800765c:	4a742400 	.word	0x4a742400
 8007660:	4bbebc20 	.word	0x4bbebc20

08007664 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007664:	b580      	push	{r7, lr}
 8007666:	af00      	add	r7, sp, #0
  SystemD2Clock = (HAL_RCCEx_GetD1SysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007668:	f001 f9e2 	bl	8008a30 <HAL_RCCEx_GetD1SysClockFreq>
 800766c:	4601      	mov	r1, r0
 800766e:	4b08      	ldr	r3, [pc, #32]	; (8007690 <HAL_RCC_GetHCLKFreq+0x2c>)
 8007670:	699b      	ldr	r3, [r3, #24]
 8007672:	f003 030f 	and.w	r3, r3, #15
 8007676:	4a07      	ldr	r2, [pc, #28]	; (8007694 <HAL_RCC_GetHCLKFreq+0x30>)
 8007678:	5cd3      	ldrb	r3, [r2, r3]
 800767a:	f003 031f 	and.w	r3, r3, #31
 800767e:	fa21 f303 	lsr.w	r3, r1, r3
 8007682:	4a05      	ldr	r2, [pc, #20]	; (8007698 <HAL_RCC_GetHCLKFreq+0x34>)
 8007684:	6013      	str	r3, [r2, #0]
  return SystemD2Clock;
 8007686:	4b04      	ldr	r3, [pc, #16]	; (8007698 <HAL_RCC_GetHCLKFreq+0x34>)
 8007688:	681b      	ldr	r3, [r3, #0]
}
 800768a:	4618      	mov	r0, r3
 800768c:	bd80      	pop	{r7, pc}
 800768e:	bf00      	nop
 8007690:	58024400 	.word	0x58024400
 8007694:	0800f0b0 	.word	0x0800f0b0
 8007698:	2400008c 	.word	0x2400008c

0800769c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800769c:	b580      	push	{r7, lr}
 800769e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80076a0:	f7ff ffe0 	bl	8007664 <HAL_RCC_GetHCLKFreq>
 80076a4:	4601      	mov	r1, r0
 80076a6:	4b06      	ldr	r3, [pc, #24]	; (80076c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80076a8:	69db      	ldr	r3, [r3, #28]
 80076aa:	091b      	lsrs	r3, r3, #4
 80076ac:	f003 0307 	and.w	r3, r3, #7
 80076b0:	4a04      	ldr	r2, [pc, #16]	; (80076c4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80076b2:	5cd3      	ldrb	r3, [r2, r3]
 80076b4:	f003 031f 	and.w	r3, r3, #31
 80076b8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80076bc:	4618      	mov	r0, r3
 80076be:	bd80      	pop	{r7, pc}
 80076c0:	58024400 	.word	0x58024400
 80076c4:	0800f0b0 	.word	0x0800f0b0

080076c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80076c8:	b580      	push	{r7, lr}
 80076ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80076cc:	f7ff ffca 	bl	8007664 <HAL_RCC_GetHCLKFreq>
 80076d0:	4601      	mov	r1, r0
 80076d2:	4b06      	ldr	r3, [pc, #24]	; (80076ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80076d4:	69db      	ldr	r3, [r3, #28]
 80076d6:	0a1b      	lsrs	r3, r3, #8
 80076d8:	f003 0307 	and.w	r3, r3, #7
 80076dc:	4a04      	ldr	r2, [pc, #16]	; (80076f0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80076de:	5cd3      	ldrb	r3, [r2, r3]
 80076e0:	f003 031f 	and.w	r3, r3, #31
 80076e4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80076e8:	4618      	mov	r0, r3
 80076ea:	bd80      	pop	{r7, pc}
 80076ec:	58024400 	.word	0x58024400
 80076f0:	0800f0b0 	.word	0x0800f0b0

080076f4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80076f4:	b580      	push	{r7, lr}
 80076f6:	b086      	sub	sp, #24
 80076f8:	af00      	add	r7, sp, #0
 80076fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80076fc:	2300      	movs	r3, #0
 80076fe:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007700:	2300      	movs	r3, #0
 8007702:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800770c:	2b00      	cmp	r3, #0
 800770e:	d03d      	beq.n	800778c <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007714:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007718:	d013      	beq.n	8007742 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 800771a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800771e:	d802      	bhi.n	8007726 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8007720:	2b00      	cmp	r3, #0
 8007722:	d007      	beq.n	8007734 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8007724:	e01f      	b.n	8007766 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8007726:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800772a:	d013      	beq.n	8007754 <HAL_RCCEx_PeriphCLKConfig+0x60>
 800772c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007730:	d01c      	beq.n	800776c <HAL_RCCEx_PeriphCLKConfig+0x78>
 8007732:	e018      	b.n	8007766 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007734:	4baf      	ldr	r3, [pc, #700]	; (80079f4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007736:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007738:	4aae      	ldr	r2, [pc, #696]	; (80079f4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800773a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800773e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007740:	e015      	b.n	800776e <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	3304      	adds	r3, #4
 8007746:	2102      	movs	r1, #2
 8007748:	4618      	mov	r0, r3
 800774a:	f001 f98d 	bl	8008a68 <RCCEx_PLL2_Config>
 800774e:	4603      	mov	r3, r0
 8007750:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007752:	e00c      	b.n	800776e <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	3324      	adds	r3, #36	; 0x24
 8007758:	2102      	movs	r1, #2
 800775a:	4618      	mov	r0, r3
 800775c:	f001 fa36 	bl	8008bcc <RCCEx_PLL3_Config>
 8007760:	4603      	mov	r3, r0
 8007762:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007764:	e003      	b.n	800776e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007766:	2301      	movs	r3, #1
 8007768:	75fb      	strb	r3, [r7, #23]
      break;
 800776a:	e000      	b.n	800776e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 800776c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800776e:	7dfb      	ldrb	r3, [r7, #23]
 8007770:	2b00      	cmp	r3, #0
 8007772:	d109      	bne.n	8007788 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8007774:	4b9f      	ldr	r3, [pc, #636]	; (80079f4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007776:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007778:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007780:	499c      	ldr	r1, [pc, #624]	; (80079f4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007782:	4313      	orrs	r3, r2
 8007784:	650b      	str	r3, [r1, #80]	; 0x50
 8007786:	e001      	b.n	800778c <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007788:	7dfb      	ldrb	r3, [r7, #23]
 800778a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007794:	2b00      	cmp	r3, #0
 8007796:	d03d      	beq.n	8007814 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800779c:	2b04      	cmp	r3, #4
 800779e:	d826      	bhi.n	80077ee <HAL_RCCEx_PeriphCLKConfig+0xfa>
 80077a0:	a201      	add	r2, pc, #4	; (adr r2, 80077a8 <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 80077a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077a6:	bf00      	nop
 80077a8:	080077bd 	.word	0x080077bd
 80077ac:	080077cb 	.word	0x080077cb
 80077b0:	080077dd 	.word	0x080077dd
 80077b4:	080077f5 	.word	0x080077f5
 80077b8:	080077f5 	.word	0x080077f5
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80077bc:	4b8d      	ldr	r3, [pc, #564]	; (80079f4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80077be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077c0:	4a8c      	ldr	r2, [pc, #560]	; (80079f4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80077c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80077c6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80077c8:	e015      	b.n	80077f6 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	3304      	adds	r3, #4
 80077ce:	2100      	movs	r1, #0
 80077d0:	4618      	mov	r0, r3
 80077d2:	f001 f949 	bl	8008a68 <RCCEx_PLL2_Config>
 80077d6:	4603      	mov	r3, r0
 80077d8:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80077da:	e00c      	b.n	80077f6 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	3324      	adds	r3, #36	; 0x24
 80077e0:	2100      	movs	r1, #0
 80077e2:	4618      	mov	r0, r3
 80077e4:	f001 f9f2 	bl	8008bcc <RCCEx_PLL3_Config>
 80077e8:	4603      	mov	r3, r0
 80077ea:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80077ec:	e003      	b.n	80077f6 <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80077ee:	2301      	movs	r3, #1
 80077f0:	75fb      	strb	r3, [r7, #23]
      break;
 80077f2:	e000      	b.n	80077f6 <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 80077f4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80077f6:	7dfb      	ldrb	r3, [r7, #23]
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d109      	bne.n	8007810 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80077fc:	4b7d      	ldr	r3, [pc, #500]	; (80079f4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80077fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007800:	f023 0207 	bic.w	r2, r3, #7
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007808:	497a      	ldr	r1, [pc, #488]	; (80079f4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800780a:	4313      	orrs	r3, r2
 800780c:	650b      	str	r3, [r1, #80]	; 0x50
 800780e:	e001      	b.n	8007814 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007810:	7dfb      	ldrb	r3, [r7, #23]
 8007812:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800781c:	2b00      	cmp	r3, #0
 800781e:	d03e      	beq.n	800789e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007824:	2b80      	cmp	r3, #128	; 0x80
 8007826:	d01c      	beq.n	8007862 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8007828:	2b80      	cmp	r3, #128	; 0x80
 800782a:	d804      	bhi.n	8007836 <HAL_RCCEx_PeriphCLKConfig+0x142>
 800782c:	2b00      	cmp	r3, #0
 800782e:	d008      	beq.n	8007842 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8007830:	2b40      	cmp	r3, #64	; 0x40
 8007832:	d00d      	beq.n	8007850 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8007834:	e01e      	b.n	8007874 <HAL_RCCEx_PeriphCLKConfig+0x180>
 8007836:	2bc0      	cmp	r3, #192	; 0xc0
 8007838:	d01f      	beq.n	800787a <HAL_RCCEx_PeriphCLKConfig+0x186>
 800783a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800783e:	d01e      	beq.n	800787e <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8007840:	e018      	b.n	8007874 <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007842:	4b6c      	ldr	r3, [pc, #432]	; (80079f4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007844:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007846:	4a6b      	ldr	r2, [pc, #428]	; (80079f4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007848:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800784c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800784e:	e017      	b.n	8007880 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	3304      	adds	r3, #4
 8007854:	2100      	movs	r1, #0
 8007856:	4618      	mov	r0, r3
 8007858:	f001 f906 	bl	8008a68 <RCCEx_PLL2_Config>
 800785c:	4603      	mov	r3, r0
 800785e:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8007860:	e00e      	b.n	8007880 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	3324      	adds	r3, #36	; 0x24
 8007866:	2100      	movs	r1, #0
 8007868:	4618      	mov	r0, r3
 800786a:	f001 f9af 	bl	8008bcc <RCCEx_PLL3_Config>
 800786e:	4603      	mov	r3, r0
 8007870:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8007872:	e005      	b.n	8007880 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007874:	2301      	movs	r3, #1
 8007876:	75fb      	strb	r3, [r7, #23]
      break;
 8007878:	e002      	b.n	8007880 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 800787a:	bf00      	nop
 800787c:	e000      	b.n	8007880 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 800787e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007880:	7dfb      	ldrb	r3, [r7, #23]
 8007882:	2b00      	cmp	r3, #0
 8007884:	d109      	bne.n	800789a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8007886:	4b5b      	ldr	r3, [pc, #364]	; (80079f4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007888:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800788a:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007892:	4958      	ldr	r1, [pc, #352]	; (80079f4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007894:	4313      	orrs	r3, r2
 8007896:	650b      	str	r3, [r1, #80]	; 0x50
 8007898:	e001      	b.n	800789e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800789a:	7dfb      	ldrb	r3, [r7, #23]
 800789c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d044      	beq.n	8007934 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80078b0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80078b4:	d01f      	beq.n	80078f6 <HAL_RCCEx_PeriphCLKConfig+0x202>
 80078b6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80078ba:	d805      	bhi.n	80078c8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d00a      	beq.n	80078d6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80078c0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80078c4:	d00e      	beq.n	80078e4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 80078c6:	e01f      	b.n	8007908 <HAL_RCCEx_PeriphCLKConfig+0x214>
 80078c8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80078cc:	d01f      	beq.n	800790e <HAL_RCCEx_PeriphCLKConfig+0x21a>
 80078ce:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80078d2:	d01e      	beq.n	8007912 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80078d4:	e018      	b.n	8007908 <HAL_RCCEx_PeriphCLKConfig+0x214>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80078d6:	4b47      	ldr	r3, [pc, #284]	; (80079f4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80078d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078da:	4a46      	ldr	r2, [pc, #280]	; (80079f4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80078dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80078e0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80078e2:	e017      	b.n	8007914 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	3304      	adds	r3, #4
 80078e8:	2100      	movs	r1, #0
 80078ea:	4618      	mov	r0, r3
 80078ec:	f001 f8bc 	bl	8008a68 <RCCEx_PLL2_Config>
 80078f0:	4603      	mov	r3, r0
 80078f2:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80078f4:	e00e      	b.n	8007914 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	3324      	adds	r3, #36	; 0x24
 80078fa:	2100      	movs	r1, #0
 80078fc:	4618      	mov	r0, r3
 80078fe:	f001 f965 	bl	8008bcc <RCCEx_PLL3_Config>
 8007902:	4603      	mov	r3, r0
 8007904:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007906:	e005      	b.n	8007914 <HAL_RCCEx_PeriphCLKConfig+0x220>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007908:	2301      	movs	r3, #1
 800790a:	75fb      	strb	r3, [r7, #23]
      break;
 800790c:	e002      	b.n	8007914 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 800790e:	bf00      	nop
 8007910:	e000      	b.n	8007914 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8007912:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007914:	7dfb      	ldrb	r3, [r7, #23]
 8007916:	2b00      	cmp	r3, #0
 8007918:	d10a      	bne.n	8007930 <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800791a:	4b36      	ldr	r3, [pc, #216]	; (80079f4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800791c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800791e:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007928:	4932      	ldr	r1, [pc, #200]	; (80079f4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800792a:	4313      	orrs	r3, r2
 800792c:	658b      	str	r3, [r1, #88]	; 0x58
 800792e:	e001      	b.n	8007934 <HAL_RCCEx_PeriphCLKConfig+0x240>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007930:	7dfb      	ldrb	r3, [r7, #23]
 8007932:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800793c:	2b00      	cmp	r3, #0
 800793e:	d044      	beq.n	80079ca <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007946:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800794a:	d01f      	beq.n	800798c <HAL_RCCEx_PeriphCLKConfig+0x298>
 800794c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007950:	d805      	bhi.n	800795e <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8007952:	2b00      	cmp	r3, #0
 8007954:	d00a      	beq.n	800796c <HAL_RCCEx_PeriphCLKConfig+0x278>
 8007956:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800795a:	d00e      	beq.n	800797a <HAL_RCCEx_PeriphCLKConfig+0x286>
 800795c:	e01f      	b.n	800799e <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 800795e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007962:	d01f      	beq.n	80079a4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8007964:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007968:	d01e      	beq.n	80079a8 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800796a:	e018      	b.n	800799e <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800796c:	4b21      	ldr	r3, [pc, #132]	; (80079f4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800796e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007970:	4a20      	ldr	r2, [pc, #128]	; (80079f4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007972:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007976:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007978:	e017      	b.n	80079aa <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	3304      	adds	r3, #4
 800797e:	2100      	movs	r1, #0
 8007980:	4618      	mov	r0, r3
 8007982:	f001 f871 	bl	8008a68 <RCCEx_PLL2_Config>
 8007986:	4603      	mov	r3, r0
 8007988:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800798a:	e00e      	b.n	80079aa <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	3324      	adds	r3, #36	; 0x24
 8007990:	2100      	movs	r1, #0
 8007992:	4618      	mov	r0, r3
 8007994:	f001 f91a 	bl	8008bcc <RCCEx_PLL3_Config>
 8007998:	4603      	mov	r3, r0
 800799a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800799c:	e005      	b.n	80079aa <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800799e:	2301      	movs	r3, #1
 80079a0:	75fb      	strb	r3, [r7, #23]
      break;
 80079a2:	e002      	b.n	80079aa <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 80079a4:	bf00      	nop
 80079a6:	e000      	b.n	80079aa <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 80079a8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80079aa:	7dfb      	ldrb	r3, [r7, #23]
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d10a      	bne.n	80079c6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80079b0:	4b10      	ldr	r3, [pc, #64]	; (80079f4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80079b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80079b4:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80079be:	490d      	ldr	r1, [pc, #52]	; (80079f4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80079c0:	4313      	orrs	r3, r2
 80079c2:	658b      	str	r3, [r1, #88]	; 0x58
 80079c4:	e001      	b.n	80079ca <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80079c6:	7dfb      	ldrb	r3, [r7, #23]
 80079c8:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d035      	beq.n	8007a42 <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80079da:	2b10      	cmp	r3, #16
 80079dc:	d00c      	beq.n	80079f8 <HAL_RCCEx_PeriphCLKConfig+0x304>
 80079de:	2b10      	cmp	r3, #16
 80079e0:	d802      	bhi.n	80079e8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d01b      	beq.n	8007a1e <HAL_RCCEx_PeriphCLKConfig+0x32a>
 80079e6:	e017      	b.n	8007a18 <HAL_RCCEx_PeriphCLKConfig+0x324>
 80079e8:	2b20      	cmp	r3, #32
 80079ea:	d00c      	beq.n	8007a06 <HAL_RCCEx_PeriphCLKConfig+0x312>
 80079ec:	2b30      	cmp	r3, #48	; 0x30
 80079ee:	d018      	beq.n	8007a22 <HAL_RCCEx_PeriphCLKConfig+0x32e>
 80079f0:	e012      	b.n	8007a18 <HAL_RCCEx_PeriphCLKConfig+0x324>
 80079f2:	bf00      	nop
 80079f4:	58024400 	.word	0x58024400
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80079f8:	4baf      	ldr	r3, [pc, #700]	; (8007cb8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80079fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079fc:	4aae      	ldr	r2, [pc, #696]	; (8007cb8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80079fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007a02:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8007a04:	e00e      	b.n	8007a24 <HAL_RCCEx_PeriphCLKConfig+0x330>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	3304      	adds	r3, #4
 8007a0a:	2102      	movs	r1, #2
 8007a0c:	4618      	mov	r0, r3
 8007a0e:	f001 f82b 	bl	8008a68 <RCCEx_PLL2_Config>
 8007a12:	4603      	mov	r3, r0
 8007a14:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8007a16:	e005      	b.n	8007a24 <HAL_RCCEx_PeriphCLKConfig+0x330>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8007a18:	2301      	movs	r3, #1
 8007a1a:	75fb      	strb	r3, [r7, #23]
      break;
 8007a1c:	e002      	b.n	8007a24 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8007a1e:	bf00      	nop
 8007a20:	e000      	b.n	8007a24 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8007a22:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007a24:	7dfb      	ldrb	r3, [r7, #23]
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d109      	bne.n	8007a3e <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8007a2a:	4ba3      	ldr	r3, [pc, #652]	; (8007cb8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007a2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a2e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007a36:	49a0      	ldr	r1, [pc, #640]	; (8007cb8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007a38:	4313      	orrs	r3, r2
 8007a3a:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007a3c:	e001      	b.n	8007a42 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a3e:	7dfb      	ldrb	r3, [r7, #23]
 8007a40:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d042      	beq.n	8007ad4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007a52:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007a56:	d01f      	beq.n	8007a98 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 8007a58:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007a5c:	d805      	bhi.n	8007a6a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d00a      	beq.n	8007a78 <HAL_RCCEx_PeriphCLKConfig+0x384>
 8007a62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a66:	d00e      	beq.n	8007a86 <HAL_RCCEx_PeriphCLKConfig+0x392>
 8007a68:	e01f      	b.n	8007aaa <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 8007a6a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007a6e:	d01f      	beq.n	8007ab0 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8007a70:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007a74:	d01e      	beq.n	8007ab4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 8007a76:	e018      	b.n	8007aaa <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007a78:	4b8f      	ldr	r3, [pc, #572]	; (8007cb8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007a7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a7c:	4a8e      	ldr	r2, [pc, #568]	; (8007cb8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007a7e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007a82:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8007a84:	e017      	b.n	8007ab6 <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	3304      	adds	r3, #4
 8007a8a:	2100      	movs	r1, #0
 8007a8c:	4618      	mov	r0, r3
 8007a8e:	f000 ffeb 	bl	8008a68 <RCCEx_PLL2_Config>
 8007a92:	4603      	mov	r3, r0
 8007a94:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8007a96:	e00e      	b.n	8007ab6 <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	3324      	adds	r3, #36	; 0x24
 8007a9c:	2100      	movs	r1, #0
 8007a9e:	4618      	mov	r0, r3
 8007aa0:	f001 f894 	bl	8008bcc <RCCEx_PLL3_Config>
 8007aa4:	4603      	mov	r3, r0
 8007aa6:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8007aa8:	e005      	b.n	8007ab6 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007aaa:	2301      	movs	r3, #1
 8007aac:	75fb      	strb	r3, [r7, #23]
      break;
 8007aae:	e002      	b.n	8007ab6 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8007ab0:	bf00      	nop
 8007ab2:	e000      	b.n	8007ab6 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8007ab4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007ab6:	7dfb      	ldrb	r3, [r7, #23]
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d109      	bne.n	8007ad0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8007abc:	4b7e      	ldr	r3, [pc, #504]	; (8007cb8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007abe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ac0:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007ac8:	497b      	ldr	r1, [pc, #492]	; (8007cb8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007aca:	4313      	orrs	r3, r2
 8007acc:	650b      	str	r3, [r1, #80]	; 0x50
 8007ace:	e001      	b.n	8007ad4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ad0:	7dfb      	ldrb	r3, [r7, #23]
 8007ad2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d042      	beq.n	8007b66 <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007ae4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007ae8:	d01b      	beq.n	8007b22 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8007aea:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007aee:	d805      	bhi.n	8007afc <HAL_RCCEx_PeriphCLKConfig+0x408>
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d022      	beq.n	8007b3a <HAL_RCCEx_PeriphCLKConfig+0x446>
 8007af4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007af8:	d00a      	beq.n	8007b10 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8007afa:	e01b      	b.n	8007b34 <HAL_RCCEx_PeriphCLKConfig+0x440>
 8007afc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007b00:	d01d      	beq.n	8007b3e <HAL_RCCEx_PeriphCLKConfig+0x44a>
 8007b02:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007b06:	d01c      	beq.n	8007b42 <HAL_RCCEx_PeriphCLKConfig+0x44e>
 8007b08:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007b0c:	d01b      	beq.n	8007b46 <HAL_RCCEx_PeriphCLKConfig+0x452>
 8007b0e:	e011      	b.n	8007b34 <HAL_RCCEx_PeriphCLKConfig+0x440>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	3304      	adds	r3, #4
 8007b14:	2101      	movs	r1, #1
 8007b16:	4618      	mov	r0, r3
 8007b18:	f000 ffa6 	bl	8008a68 <RCCEx_PLL2_Config>
 8007b1c:	4603      	mov	r3, r0
 8007b1e:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8007b20:	e012      	b.n	8007b48 <HAL_RCCEx_PeriphCLKConfig+0x454>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	3324      	adds	r3, #36	; 0x24
 8007b26:	2101      	movs	r1, #1
 8007b28:	4618      	mov	r0, r3
 8007b2a:	f001 f84f 	bl	8008bcc <RCCEx_PLL3_Config>
 8007b2e:	4603      	mov	r3, r0
 8007b30:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8007b32:	e009      	b.n	8007b48 <HAL_RCCEx_PeriphCLKConfig+0x454>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007b34:	2301      	movs	r3, #1
 8007b36:	75fb      	strb	r3, [r7, #23]
      break;
 8007b38:	e006      	b.n	8007b48 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8007b3a:	bf00      	nop
 8007b3c:	e004      	b.n	8007b48 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8007b3e:	bf00      	nop
 8007b40:	e002      	b.n	8007b48 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8007b42:	bf00      	nop
 8007b44:	e000      	b.n	8007b48 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8007b46:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007b48:	7dfb      	ldrb	r3, [r7, #23]
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d109      	bne.n	8007b62 <HAL_RCCEx_PeriphCLKConfig+0x46e>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8007b4e:	4b5a      	ldr	r3, [pc, #360]	; (8007cb8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007b50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b52:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007b5a:	4957      	ldr	r1, [pc, #348]	; (8007cb8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007b5c:	4313      	orrs	r3, r2
 8007b5e:	650b      	str	r3, [r1, #80]	; 0x50
 8007b60:	e001      	b.n	8007b66 <HAL_RCCEx_PeriphCLKConfig+0x472>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b62:	7dfb      	ldrb	r3, [r7, #23]
 8007b64:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d044      	beq.n	8007bfc <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007b78:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007b7c:	d01b      	beq.n	8007bb6 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8007b7e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007b82:	d805      	bhi.n	8007b90 <HAL_RCCEx_PeriphCLKConfig+0x49c>
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d022      	beq.n	8007bce <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8007b88:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007b8c:	d00a      	beq.n	8007ba4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8007b8e:	e01b      	b.n	8007bc8 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 8007b90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007b94:	d01d      	beq.n	8007bd2 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8007b96:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007b9a:	d01c      	beq.n	8007bd6 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
 8007b9c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007ba0:	d01b      	beq.n	8007bda <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8007ba2:	e011      	b.n	8007bc8 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	3304      	adds	r3, #4
 8007ba8:	2101      	movs	r1, #1
 8007baa:	4618      	mov	r0, r3
 8007bac:	f000 ff5c 	bl	8008a68 <RCCEx_PLL2_Config>
 8007bb0:	4603      	mov	r3, r0
 8007bb2:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8007bb4:	e012      	b.n	8007bdc <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	3324      	adds	r3, #36	; 0x24
 8007bba:	2101      	movs	r1, #1
 8007bbc:	4618      	mov	r0, r3
 8007bbe:	f001 f805 	bl	8008bcc <RCCEx_PLL3_Config>
 8007bc2:	4603      	mov	r3, r0
 8007bc4:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8007bc6:	e009      	b.n	8007bdc <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      /* HSE,  oscillator is used as source of SPI6 clock */
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007bc8:	2301      	movs	r3, #1
 8007bca:	75fb      	strb	r3, [r7, #23]
      break;
 8007bcc:	e006      	b.n	8007bdc <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8007bce:	bf00      	nop
 8007bd0:	e004      	b.n	8007bdc <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8007bd2:	bf00      	nop
 8007bd4:	e002      	b.n	8007bdc <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8007bd6:	bf00      	nop
 8007bd8:	e000      	b.n	8007bdc <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8007bda:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007bdc:	7dfb      	ldrb	r3, [r7, #23]
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d10a      	bne.n	8007bf8 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8007be2:	4b35      	ldr	r3, [pc, #212]	; (8007cb8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007be4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007be6:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007bf0:	4931      	ldr	r1, [pc, #196]	; (8007cb8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007bf2:	4313      	orrs	r3, r2
 8007bf4:	658b      	str	r3, [r1, #88]	; 0x58
 8007bf6:	e001      	b.n	8007bfc <HAL_RCCEx_PeriphCLKConfig+0x508>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007bf8:	7dfb      	ldrb	r3, [r7, #23]
 8007bfa:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d02d      	beq.n	8007c64 <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007c0c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007c10:	d005      	beq.n	8007c1e <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8007c12:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007c16:	d009      	beq.n	8007c2c <HAL_RCCEx_PeriphCLKConfig+0x538>
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d013      	beq.n	8007c44 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8007c1c:	e00f      	b.n	8007c3e <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007c1e:	4b26      	ldr	r3, [pc, #152]	; (8007cb8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007c20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c22:	4a25      	ldr	r2, [pc, #148]	; (8007cb8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007c24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007c28:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8007c2a:	e00c      	b.n	8007c46 <HAL_RCCEx_PeriphCLKConfig+0x552>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	3304      	adds	r3, #4
 8007c30:	2101      	movs	r1, #1
 8007c32:	4618      	mov	r0, r3
 8007c34:	f000 ff18 	bl	8008a68 <RCCEx_PLL2_Config>
 8007c38:	4603      	mov	r3, r0
 8007c3a:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8007c3c:	e003      	b.n	8007c46 <HAL_RCCEx_PeriphCLKConfig+0x552>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007c3e:	2301      	movs	r3, #1
 8007c40:	75fb      	strb	r3, [r7, #23]
      break;
 8007c42:	e000      	b.n	8007c46 <HAL_RCCEx_PeriphCLKConfig+0x552>
      break;
 8007c44:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007c46:	7dfb      	ldrb	r3, [r7, #23]
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d109      	bne.n	8007c60 <HAL_RCCEx_PeriphCLKConfig+0x56c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007c4c:	4b1a      	ldr	r3, [pc, #104]	; (8007cb8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007c4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c50:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007c58:	4917      	ldr	r1, [pc, #92]	; (8007cb8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007c5a:	4313      	orrs	r3, r2
 8007c5c:	650b      	str	r3, [r1, #80]	; 0x50
 8007c5e:	e001      	b.n	8007c64 <HAL_RCCEx_PeriphCLKConfig+0x570>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c60:	7dfb      	ldrb	r3, [r7, #23]
 8007c62:	75bb      	strb	r3, [r7, #22]
    }
  }

#endif /*FDCAN1 || FDCAN2*/
  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d035      	beq.n	8007cdc <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c74:	2b03      	cmp	r3, #3
 8007c76:	d81b      	bhi.n	8007cb0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8007c78:	a201      	add	r2, pc, #4	; (adr r2, 8007c80 <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 8007c7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c7e:	bf00      	nop
 8007c80:	08007cbd 	.word	0x08007cbd
 8007c84:	08007c91 	.word	0x08007c91
 8007c88:	08007c9f 	.word	0x08007c9f
 8007c8c:	08007cbd 	.word	0x08007cbd
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007c90:	4b09      	ldr	r3, [pc, #36]	; (8007cb8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007c92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c94:	4a08      	ldr	r2, [pc, #32]	; (8007cb8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007c96:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007c9a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8007c9c:	e00f      	b.n	8007cbe <HAL_RCCEx_PeriphCLKConfig+0x5ca>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	3304      	adds	r3, #4
 8007ca2:	2102      	movs	r1, #2
 8007ca4:	4618      	mov	r0, r3
 8007ca6:	f000 fedf 	bl	8008a68 <RCCEx_PLL2_Config>
 8007caa:	4603      	mov	r3, r0
 8007cac:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8007cae:	e006      	b.n	8007cbe <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    case RCC_FMCCLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8007cb0:	2301      	movs	r3, #1
 8007cb2:	75fb      	strb	r3, [r7, #23]
      break;
 8007cb4:	e003      	b.n	8007cbe <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 8007cb6:	bf00      	nop
 8007cb8:	58024400 	.word	0x58024400
      break;
 8007cbc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007cbe:	7dfb      	ldrb	r3, [r7, #23]
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d109      	bne.n	8007cd8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8007cc4:	4bba      	ldr	r3, [pc, #744]	; (8007fb0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007cc6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007cc8:	f023 0203 	bic.w	r2, r3, #3
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007cd0:	49b7      	ldr	r1, [pc, #732]	; (8007fb0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007cd2:	4313      	orrs	r3, r2
 8007cd4:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007cd6:	e001      	b.n	8007cdc <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007cd8:	7dfb      	ldrb	r3, [r7, #23]
 8007cda:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	f000 8086 	beq.w	8007df6 <HAL_RCCEx_PeriphCLKConfig+0x702>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007cea:	4bb2      	ldr	r3, [pc, #712]	; (8007fb4 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	4ab1      	ldr	r2, [pc, #708]	; (8007fb4 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8007cf0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007cf4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007cf6:	f7fa fce9 	bl	80026cc <HAL_GetTick>
 8007cfa:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007cfc:	e009      	b.n	8007d12 <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007cfe:	f7fa fce5 	bl	80026cc <HAL_GetTick>
 8007d02:	4602      	mov	r2, r0
 8007d04:	693b      	ldr	r3, [r7, #16]
 8007d06:	1ad3      	subs	r3, r2, r3
 8007d08:	2b64      	cmp	r3, #100	; 0x64
 8007d0a:	d902      	bls.n	8007d12 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        ret = HAL_TIMEOUT;
 8007d0c:	2303      	movs	r3, #3
 8007d0e:	75fb      	strb	r3, [r7, #23]
        break;
 8007d10:	e005      	b.n	8007d1e <HAL_RCCEx_PeriphCLKConfig+0x62a>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007d12:	4ba8      	ldr	r3, [pc, #672]	; (8007fb4 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d0ef      	beq.n	8007cfe <HAL_RCCEx_PeriphCLKConfig+0x60a>
      }
    }

    if(ret == HAL_OK)
 8007d1e:	7dfb      	ldrb	r3, [r7, #23]
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d166      	bne.n	8007df2 <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8007d24:	4ba2      	ldr	r3, [pc, #648]	; (8007fb0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007d26:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007d2e:	4053      	eors	r3, r2
 8007d30:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d013      	beq.n	8007d60 <HAL_RCCEx_PeriphCLKConfig+0x66c>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007d38:	4b9d      	ldr	r3, [pc, #628]	; (8007fb0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007d3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d3c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007d40:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007d42:	4b9b      	ldr	r3, [pc, #620]	; (8007fb0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007d44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d46:	4a9a      	ldr	r2, [pc, #616]	; (8007fb0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007d48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007d4c:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007d4e:	4b98      	ldr	r3, [pc, #608]	; (8007fb0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007d50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d52:	4a97      	ldr	r2, [pc, #604]	; (8007fb0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007d54:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007d58:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8007d5a:	4a95      	ldr	r2, [pc, #596]	; (8007fb0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source, wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007d66:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007d6a:	d115      	bne.n	8007d98 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d6c:	f7fa fcae 	bl	80026cc <HAL_GetTick>
 8007d70:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007d72:	e00b      	b.n	8007d8c <HAL_RCCEx_PeriphCLKConfig+0x698>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007d74:	f7fa fcaa 	bl	80026cc <HAL_GetTick>
 8007d78:	4602      	mov	r2, r0
 8007d7a:	693b      	ldr	r3, [r7, #16]
 8007d7c:	1ad3      	subs	r3, r2, r3
 8007d7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007d82:	4293      	cmp	r3, r2
 8007d84:	d902      	bls.n	8007d8c <HAL_RCCEx_PeriphCLKConfig+0x698>
          {
            ret = HAL_TIMEOUT;
 8007d86:	2303      	movs	r3, #3
 8007d88:	75fb      	strb	r3, [r7, #23]
            break;
 8007d8a:	e005      	b.n	8007d98 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007d8c:	4b88      	ldr	r3, [pc, #544]	; (8007fb0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007d8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d90:	f003 0302 	and.w	r3, r3, #2
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d0ed      	beq.n	8007d74 <HAL_RCCEx_PeriphCLKConfig+0x680>
          }
        }
      }

      if(ret == HAL_OK)
 8007d98:	7dfb      	ldrb	r3, [r7, #23]
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d126      	bne.n	8007dec <HAL_RCCEx_PeriphCLKConfig+0x6f8>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007da4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007da8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007dac:	d10d      	bne.n	8007dca <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 8007dae:	4b80      	ldr	r3, [pc, #512]	; (8007fb0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007db0:	691b      	ldr	r3, [r3, #16]
 8007db2:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007dbc:	0919      	lsrs	r1, r3, #4
 8007dbe:	4b7e      	ldr	r3, [pc, #504]	; (8007fb8 <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 8007dc0:	400b      	ands	r3, r1
 8007dc2:	497b      	ldr	r1, [pc, #492]	; (8007fb0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007dc4:	4313      	orrs	r3, r2
 8007dc6:	610b      	str	r3, [r1, #16]
 8007dc8:	e005      	b.n	8007dd6 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 8007dca:	4b79      	ldr	r3, [pc, #484]	; (8007fb0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007dcc:	691b      	ldr	r3, [r3, #16]
 8007dce:	4a78      	ldr	r2, [pc, #480]	; (8007fb0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007dd0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8007dd4:	6113      	str	r3, [r2, #16]
 8007dd6:	4b76      	ldr	r3, [pc, #472]	; (8007fb0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007dd8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007de0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007de4:	4972      	ldr	r1, [pc, #456]	; (8007fb0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007de6:	4313      	orrs	r3, r2
 8007de8:	670b      	str	r3, [r1, #112]	; 0x70
 8007dea:	e004      	b.n	8007df6 <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007dec:	7dfb      	ldrb	r3, [r7, #23]
 8007dee:	75bb      	strb	r3, [r7, #22]
 8007df0:	e001      	b.n	8007df6 <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007df2:	7dfb      	ldrb	r3, [r7, #23]
 8007df4:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	f003 0301 	and.w	r3, r3, #1
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d07d      	beq.n	8007efe <HAL_RCCEx_PeriphCLKConfig+0x80a>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007e06:	2b28      	cmp	r3, #40	; 0x28
 8007e08:	d866      	bhi.n	8007ed8 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
 8007e0a:	a201      	add	r2, pc, #4	; (adr r2, 8007e10 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8007e0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e10:	08007edf 	.word	0x08007edf
 8007e14:	08007ed9 	.word	0x08007ed9
 8007e18:	08007ed9 	.word	0x08007ed9
 8007e1c:	08007ed9 	.word	0x08007ed9
 8007e20:	08007ed9 	.word	0x08007ed9
 8007e24:	08007ed9 	.word	0x08007ed9
 8007e28:	08007ed9 	.word	0x08007ed9
 8007e2c:	08007ed9 	.word	0x08007ed9
 8007e30:	08007eb5 	.word	0x08007eb5
 8007e34:	08007ed9 	.word	0x08007ed9
 8007e38:	08007ed9 	.word	0x08007ed9
 8007e3c:	08007ed9 	.word	0x08007ed9
 8007e40:	08007ed9 	.word	0x08007ed9
 8007e44:	08007ed9 	.word	0x08007ed9
 8007e48:	08007ed9 	.word	0x08007ed9
 8007e4c:	08007ed9 	.word	0x08007ed9
 8007e50:	08007ec7 	.word	0x08007ec7
 8007e54:	08007ed9 	.word	0x08007ed9
 8007e58:	08007ed9 	.word	0x08007ed9
 8007e5c:	08007ed9 	.word	0x08007ed9
 8007e60:	08007ed9 	.word	0x08007ed9
 8007e64:	08007ed9 	.word	0x08007ed9
 8007e68:	08007ed9 	.word	0x08007ed9
 8007e6c:	08007ed9 	.word	0x08007ed9
 8007e70:	08007edf 	.word	0x08007edf
 8007e74:	08007ed9 	.word	0x08007ed9
 8007e78:	08007ed9 	.word	0x08007ed9
 8007e7c:	08007ed9 	.word	0x08007ed9
 8007e80:	08007ed9 	.word	0x08007ed9
 8007e84:	08007ed9 	.word	0x08007ed9
 8007e88:	08007ed9 	.word	0x08007ed9
 8007e8c:	08007ed9 	.word	0x08007ed9
 8007e90:	08007edf 	.word	0x08007edf
 8007e94:	08007ed9 	.word	0x08007ed9
 8007e98:	08007ed9 	.word	0x08007ed9
 8007e9c:	08007ed9 	.word	0x08007ed9
 8007ea0:	08007ed9 	.word	0x08007ed9
 8007ea4:	08007ed9 	.word	0x08007ed9
 8007ea8:	08007ed9 	.word	0x08007ed9
 8007eac:	08007ed9 	.word	0x08007ed9
 8007eb0:	08007edf 	.word	0x08007edf
    case RCC_USART16CLKSOURCE_D2PCLK2: /* D2PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	3304      	adds	r3, #4
 8007eb8:	2101      	movs	r1, #1
 8007eba:	4618      	mov	r0, r3
 8007ebc:	f000 fdd4 	bl	8008a68 <RCCEx_PLL2_Config>
 8007ec0:	4603      	mov	r3, r0
 8007ec2:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8007ec4:	e00c      	b.n	8007ee0 <HAL_RCCEx_PeriphCLKConfig+0x7ec>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	3324      	adds	r3, #36	; 0x24
 8007eca:	2101      	movs	r1, #1
 8007ecc:	4618      	mov	r0, r3
 8007ece:	f000 fe7d 	bl	8008bcc <RCCEx_PLL3_Config>
 8007ed2:	4603      	mov	r3, r0
 8007ed4:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8007ed6:	e003      	b.n	8007ee0 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007ed8:	2301      	movs	r3, #1
 8007eda:	75fb      	strb	r3, [r7, #23]
      break;
 8007edc:	e000      	b.n	8007ee0 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      break;
 8007ede:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007ee0:	7dfb      	ldrb	r3, [r7, #23]
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d109      	bne.n	8007efa <HAL_RCCEx_PeriphCLKConfig+0x806>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8007ee6:	4b32      	ldr	r3, [pc, #200]	; (8007fb0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007ee8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007eea:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007ef2:	492f      	ldr	r1, [pc, #188]	; (8007fb0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007ef4:	4313      	orrs	r3, r2
 8007ef6:	654b      	str	r3, [r1, #84]	; 0x54
 8007ef8:	e001      	b.n	8007efe <HAL_RCCEx_PeriphCLKConfig+0x80a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007efa:	7dfb      	ldrb	r3, [r7, #23]
 8007efc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	f003 0302 	and.w	r3, r3, #2
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d037      	beq.n	8007f7a <HAL_RCCEx_PeriphCLKConfig+0x886>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007f0e:	2b05      	cmp	r3, #5
 8007f10:	d820      	bhi.n	8007f54 <HAL_RCCEx_PeriphCLKConfig+0x860>
 8007f12:	a201      	add	r2, pc, #4	; (adr r2, 8007f18 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8007f14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f18:	08007f5b 	.word	0x08007f5b
 8007f1c:	08007f31 	.word	0x08007f31
 8007f20:	08007f43 	.word	0x08007f43
 8007f24:	08007f5b 	.word	0x08007f5b
 8007f28:	08007f5b 	.word	0x08007f5b
 8007f2c:	08007f5b 	.word	0x08007f5b
    case RCC_USART234578CLKSOURCE_D2PCLK1: /* D2PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	3304      	adds	r3, #4
 8007f34:	2101      	movs	r1, #1
 8007f36:	4618      	mov	r0, r3
 8007f38:	f000 fd96 	bl	8008a68 <RCCEx_PLL2_Config>
 8007f3c:	4603      	mov	r3, r0
 8007f3e:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8007f40:	e00c      	b.n	8007f5c <HAL_RCCEx_PeriphCLKConfig+0x868>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	3324      	adds	r3, #36	; 0x24
 8007f46:	2101      	movs	r1, #1
 8007f48:	4618      	mov	r0, r3
 8007f4a:	f000 fe3f 	bl	8008bcc <RCCEx_PLL3_Config>
 8007f4e:	4603      	mov	r3, r0
 8007f50:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8007f52:	e003      	b.n	8007f5c <HAL_RCCEx_PeriphCLKConfig+0x868>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007f54:	2301      	movs	r3, #1
 8007f56:	75fb      	strb	r3, [r7, #23]
      break;
 8007f58:	e000      	b.n	8007f5c <HAL_RCCEx_PeriphCLKConfig+0x868>
      break;
 8007f5a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007f5c:	7dfb      	ldrb	r3, [r7, #23]
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d109      	bne.n	8007f76 <HAL_RCCEx_PeriphCLKConfig+0x882>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8007f62:	4b13      	ldr	r3, [pc, #76]	; (8007fb0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007f64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f66:	f023 0207 	bic.w	r2, r3, #7
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007f6e:	4910      	ldr	r1, [pc, #64]	; (8007fb0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007f70:	4313      	orrs	r3, r2
 8007f72:	654b      	str	r3, [r1, #84]	; 0x54
 8007f74:	e001      	b.n	8007f7a <HAL_RCCEx_PeriphCLKConfig+0x886>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f76:	7dfb      	ldrb	r3, [r7, #23]
 8007f78:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	f003 0304 	and.w	r3, r3, #4
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d040      	beq.n	8008008 <HAL_RCCEx_PeriphCLKConfig+0x914>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f8c:	2b05      	cmp	r3, #5
 8007f8e:	d827      	bhi.n	8007fe0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 8007f90:	a201      	add	r2, pc, #4	; (adr r2, 8007f98 <HAL_RCCEx_PeriphCLKConfig+0x8a4>)
 8007f92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f96:	bf00      	nop
 8007f98:	08007fe7 	.word	0x08007fe7
 8007f9c:	08007fbd 	.word	0x08007fbd
 8007fa0:	08007fcf 	.word	0x08007fcf
 8007fa4:	08007fe7 	.word	0x08007fe7
 8007fa8:	08007fe7 	.word	0x08007fe7
 8007fac:	08007fe7 	.word	0x08007fe7
 8007fb0:	58024400 	.word	0x58024400
 8007fb4:	58024800 	.word	0x58024800
 8007fb8:	00ffffcf 	.word	0x00ffffcf
    case RCC_LPUART1CLKSOURCE_D3PCLK1: /* D3PCLK1 as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	3304      	adds	r3, #4
 8007fc0:	2101      	movs	r1, #1
 8007fc2:	4618      	mov	r0, r3
 8007fc4:	f000 fd50 	bl	8008a68 <RCCEx_PLL2_Config>
 8007fc8:	4603      	mov	r3, r0
 8007fca:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8007fcc:	e00c      	b.n	8007fe8 <HAL_RCCEx_PeriphCLKConfig+0x8f4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	3324      	adds	r3, #36	; 0x24
 8007fd2:	2101      	movs	r1, #1
 8007fd4:	4618      	mov	r0, r3
 8007fd6:	f000 fdf9 	bl	8008bcc <RCCEx_PLL3_Config>
 8007fda:	4603      	mov	r3, r0
 8007fdc:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8007fde:	e003      	b.n	8007fe8 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007fe0:	2301      	movs	r3, #1
 8007fe2:	75fb      	strb	r3, [r7, #23]
      break;
 8007fe4:	e000      	b.n	8007fe8 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      break;
 8007fe6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007fe8:	7dfb      	ldrb	r3, [r7, #23]
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d10a      	bne.n	8008004 <HAL_RCCEx_PeriphCLKConfig+0x910>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007fee:	4bb3      	ldr	r3, [pc, #716]	; (80082bc <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8007ff0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ff2:	f023 0207 	bic.w	r2, r3, #7
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ffc:	49af      	ldr	r1, [pc, #700]	; (80082bc <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8007ffe:	4313      	orrs	r3, r2
 8008000:	658b      	str	r3, [r1, #88]	; 0x58
 8008002:	e001      	b.n	8008008 <HAL_RCCEx_PeriphCLKConfig+0x914>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008004:	7dfb      	ldrb	r3, [r7, #23]
 8008006:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	f003 0320 	and.w	r3, r3, #32
 8008010:	2b00      	cmp	r3, #0
 8008012:	d044      	beq.n	800809e <HAL_RCCEx_PeriphCLKConfig+0x9aa>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800801a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800801e:	d01b      	beq.n	8008058 <HAL_RCCEx_PeriphCLKConfig+0x964>
 8008020:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008024:	d805      	bhi.n	8008032 <HAL_RCCEx_PeriphCLKConfig+0x93e>
 8008026:	2b00      	cmp	r3, #0
 8008028:	d022      	beq.n	8008070 <HAL_RCCEx_PeriphCLKConfig+0x97c>
 800802a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800802e:	d00a      	beq.n	8008046 <HAL_RCCEx_PeriphCLKConfig+0x952>
 8008030:	e01b      	b.n	800806a <HAL_RCCEx_PeriphCLKConfig+0x976>
 8008032:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008036:	d01d      	beq.n	8008074 <HAL_RCCEx_PeriphCLKConfig+0x980>
 8008038:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800803c:	d01c      	beq.n	8008078 <HAL_RCCEx_PeriphCLKConfig+0x984>
 800803e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008042:	d01b      	beq.n	800807c <HAL_RCCEx_PeriphCLKConfig+0x988>
 8008044:	e011      	b.n	800806a <HAL_RCCEx_PeriphCLKConfig+0x976>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	3304      	adds	r3, #4
 800804a:	2100      	movs	r1, #0
 800804c:	4618      	mov	r0, r3
 800804e:	f000 fd0b 	bl	8008a68 <RCCEx_PLL2_Config>
 8008052:	4603      	mov	r3, r0
 8008054:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8008056:	e012      	b.n	800807e <HAL_RCCEx_PeriphCLKConfig+0x98a>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	3324      	adds	r3, #36	; 0x24
 800805c:	2102      	movs	r1, #2
 800805e:	4618      	mov	r0, r3
 8008060:	f000 fdb4 	bl	8008bcc <RCCEx_PLL3_Config>
 8008064:	4603      	mov	r3, r0
 8008066:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8008068:	e009      	b.n	800807e <HAL_RCCEx_PeriphCLKConfig+0x98a>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800806a:	2301      	movs	r3, #1
 800806c:	75fb      	strb	r3, [r7, #23]
      break;
 800806e:	e006      	b.n	800807e <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8008070:	bf00      	nop
 8008072:	e004      	b.n	800807e <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8008074:	bf00      	nop
 8008076:	e002      	b.n	800807e <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8008078:	bf00      	nop
 800807a:	e000      	b.n	800807e <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 800807c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800807e:	7dfb      	ldrb	r3, [r7, #23]
 8008080:	2b00      	cmp	r3, #0
 8008082:	d10a      	bne.n	800809a <HAL_RCCEx_PeriphCLKConfig+0x9a6>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008084:	4b8d      	ldr	r3, [pc, #564]	; (80082bc <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8008086:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008088:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008092:	498a      	ldr	r1, [pc, #552]	; (80082bc <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8008094:	4313      	orrs	r3, r2
 8008096:	654b      	str	r3, [r1, #84]	; 0x54
 8008098:	e001      	b.n	800809e <HAL_RCCEx_PeriphCLKConfig+0x9aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800809a:	7dfb      	ldrb	r3, [r7, #23]
 800809c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d044      	beq.n	8008134 <HAL_RCCEx_PeriphCLKConfig+0xa40>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80080b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80080b4:	d01b      	beq.n	80080ee <HAL_RCCEx_PeriphCLKConfig+0x9fa>
 80080b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80080ba:	d805      	bhi.n	80080c8 <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d022      	beq.n	8008106 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 80080c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80080c4:	d00a      	beq.n	80080dc <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 80080c6:	e01b      	b.n	8008100 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
 80080c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80080cc:	d01d      	beq.n	800810a <HAL_RCCEx_PeriphCLKConfig+0xa16>
 80080ce:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80080d2:	d01c      	beq.n	800810e <HAL_RCCEx_PeriphCLKConfig+0xa1a>
 80080d4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80080d8:	d01b      	beq.n	8008112 <HAL_RCCEx_PeriphCLKConfig+0xa1e>
 80080da:	e011      	b.n	8008100 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	3304      	adds	r3, #4
 80080e0:	2100      	movs	r1, #0
 80080e2:	4618      	mov	r0, r3
 80080e4:	f000 fcc0 	bl	8008a68 <RCCEx_PLL2_Config>
 80080e8:	4603      	mov	r3, r0
 80080ea:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80080ec:	e012      	b.n	8008114 <HAL_RCCEx_PeriphCLKConfig+0xa20>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	3324      	adds	r3, #36	; 0x24
 80080f2:	2102      	movs	r1, #2
 80080f4:	4618      	mov	r0, r3
 80080f6:	f000 fd69 	bl	8008bcc <RCCEx_PLL3_Config>
 80080fa:	4603      	mov	r3, r0
 80080fc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80080fe:	e009      	b.n	8008114 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008100:	2301      	movs	r3, #1
 8008102:	75fb      	strb	r3, [r7, #23]
      break;
 8008104:	e006      	b.n	8008114 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8008106:	bf00      	nop
 8008108:	e004      	b.n	8008114 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 800810a:	bf00      	nop
 800810c:	e002      	b.n	8008114 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 800810e:	bf00      	nop
 8008110:	e000      	b.n	8008114 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8008112:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008114:	7dfb      	ldrb	r3, [r7, #23]
 8008116:	2b00      	cmp	r3, #0
 8008118:	d10a      	bne.n	8008130 <HAL_RCCEx_PeriphCLKConfig+0xa3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800811a:	4b68      	ldr	r3, [pc, #416]	; (80082bc <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 800811c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800811e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008128:	4964      	ldr	r1, [pc, #400]	; (80082bc <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 800812a:	4313      	orrs	r3, r2
 800812c:	658b      	str	r3, [r1, #88]	; 0x58
 800812e:	e001      	b.n	8008134 <HAL_RCCEx_PeriphCLKConfig+0xa40>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008130:	7dfb      	ldrb	r3, [r7, #23]
 8008132:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800813c:	2b00      	cmp	r3, #0
 800813e:	d044      	beq.n	80081ca <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008146:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800814a:	d01b      	beq.n	8008184 <HAL_RCCEx_PeriphCLKConfig+0xa90>
 800814c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008150:	d805      	bhi.n	800815e <HAL_RCCEx_PeriphCLKConfig+0xa6a>
 8008152:	2b00      	cmp	r3, #0
 8008154:	d022      	beq.n	800819c <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8008156:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800815a:	d00a      	beq.n	8008172 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 800815c:	e01b      	b.n	8008196 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
 800815e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008162:	d01d      	beq.n	80081a0 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8008164:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8008168:	d01c      	beq.n	80081a4 <HAL_RCCEx_PeriphCLKConfig+0xab0>
 800816a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800816e:	d01b      	beq.n	80081a8 <HAL_RCCEx_PeriphCLKConfig+0xab4>
 8008170:	e011      	b.n	8008196 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    case RCC_LPTIM345CLKSOURCE_D3PCLK1:      /* D3PCLK1 as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	3304      	adds	r3, #4
 8008176:	2100      	movs	r1, #0
 8008178:	4618      	mov	r0, r3
 800817a:	f000 fc75 	bl	8008a68 <RCCEx_PLL2_Config>
 800817e:	4603      	mov	r3, r0
 8008180:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8008182:	e012      	b.n	80081aa <HAL_RCCEx_PeriphCLKConfig+0xab6>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	3324      	adds	r3, #36	; 0x24
 8008188:	2102      	movs	r1, #2
 800818a:	4618      	mov	r0, r3
 800818c:	f000 fd1e 	bl	8008bcc <RCCEx_PLL3_Config>
 8008190:	4603      	mov	r3, r0
 8008192:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8008194:	e009      	b.n	80081aa <HAL_RCCEx_PeriphCLKConfig+0xab6>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008196:	2301      	movs	r3, #1
 8008198:	75fb      	strb	r3, [r7, #23]
      break;
 800819a:	e006      	b.n	80081aa <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 800819c:	bf00      	nop
 800819e:	e004      	b.n	80081aa <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 80081a0:	bf00      	nop
 80081a2:	e002      	b.n	80081aa <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 80081a4:	bf00      	nop
 80081a6:	e000      	b.n	80081aa <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 80081a8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80081aa:	7dfb      	ldrb	r3, [r7, #23]
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d10a      	bne.n	80081c6 <HAL_RCCEx_PeriphCLKConfig+0xad2>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80081b0:	4b42      	ldr	r3, [pc, #264]	; (80082bc <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 80081b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80081b4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80081be:	493f      	ldr	r1, [pc, #252]	; (80082bc <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 80081c0:	4313      	orrs	r3, r2
 80081c2:	658b      	str	r3, [r1, #88]	; 0x58
 80081c4:	e001      	b.n	80081ca <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80081c6:	7dfb      	ldrb	r3, [r7, #23]
 80081c8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	f003 0308 	and.w	r3, r3, #8
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d01b      	beq.n	800820e <HAL_RCCEx_PeriphCLKConfig+0xb1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80081dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80081e0:	d10b      	bne.n	80081fa <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	3324      	adds	r3, #36	; 0x24
 80081e6:	2102      	movs	r1, #2
 80081e8:	4618      	mov	r0, r3
 80081ea:	f000 fcef 	bl	8008bcc <RCCEx_PLL3_Config>
 80081ee:	4603      	mov	r3, r0
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d00c      	beq.n	800820e <HAL_RCCEx_PeriphCLKConfig+0xb1a>
        {
          status = HAL_ERROR;
 80081f4:	2301      	movs	r3, #1
 80081f6:	75bb      	strb	r3, [r7, #22]
 80081f8:	e009      	b.n	800820e <HAL_RCCEx_PeriphCLKConfig+0xb1a>
        }
    }

    else
    {
      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80081fa:	4b30      	ldr	r3, [pc, #192]	; (80082bc <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 80081fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80081fe:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008208:	492c      	ldr	r1, [pc, #176]	; (80082bc <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 800820a:	4313      	orrs	r3, r2
 800820c:	654b      	str	r3, [r1, #84]	; 0x54
    }

  }

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	f003 0310 	and.w	r3, r3, #16
 8008216:	2b00      	cmp	r3, #0
 8008218:	d01b      	beq.n	8008252 <HAL_RCCEx_PeriphCLKConfig+0xb5e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008220:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008224:	d10b      	bne.n	800823e <HAL_RCCEx_PeriphCLKConfig+0xb4a>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	3324      	adds	r3, #36	; 0x24
 800822a:	2102      	movs	r1, #2
 800822c:	4618      	mov	r0, r3
 800822e:	f000 fccd 	bl	8008bcc <RCCEx_PLL3_Config>
 8008232:	4603      	mov	r3, r0
 8008234:	2b00      	cmp	r3, #0
 8008236:	d00c      	beq.n	8008252 <HAL_RCCEx_PeriphCLKConfig+0xb5e>
      {
        status = HAL_ERROR;
 8008238:	2301      	movs	r3, #1
 800823a:	75bb      	strb	r3, [r7, #22]
 800823c:	e009      	b.n	8008252 <HAL_RCCEx_PeriphCLKConfig+0xb5e>
      }
    }

    else
    {
      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800823e:	4b1f      	ldr	r3, [pc, #124]	; (80082bc <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8008240:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008242:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800824c:	491b      	ldr	r1, [pc, #108]	; (80082bc <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 800824e:	4313      	orrs	r3, r2
 8008250:	658b      	str	r3, [r1, #88]	; 0x58
    }
  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800825a:	2b00      	cmp	r3, #0
 800825c:	d032      	beq.n	80082c4 <HAL_RCCEx_PeriphCLKConfig+0xbd0>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8008264:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008268:	d00d      	beq.n	8008286 <HAL_RCCEx_PeriphCLKConfig+0xb92>
 800826a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800826e:	d016      	beq.n	800829e <HAL_RCCEx_PeriphCLKConfig+0xbaa>
 8008270:	2b00      	cmp	r3, #0
 8008272:	d111      	bne.n	8008298 <HAL_RCCEx_PeriphCLKConfig+0xba4>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	3304      	adds	r3, #4
 8008278:	2100      	movs	r1, #0
 800827a:	4618      	mov	r0, r3
 800827c:	f000 fbf4 	bl	8008a68 <RCCEx_PLL2_Config>
 8008280:	4603      	mov	r3, r0
 8008282:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8008284:	e00c      	b.n	80082a0 <HAL_RCCEx_PeriphCLKConfig+0xbac>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	3324      	adds	r3, #36	; 0x24
 800828a:	2102      	movs	r1, #2
 800828c:	4618      	mov	r0, r3
 800828e:	f000 fc9d 	bl	8008bcc <RCCEx_PLL3_Config>
 8008292:	4603      	mov	r3, r0
 8008294:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8008296:	e003      	b.n	80082a0 <HAL_RCCEx_PeriphCLKConfig+0xbac>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008298:	2301      	movs	r3, #1
 800829a:	75fb      	strb	r3, [r7, #23]
      break;
 800829c:	e000      	b.n	80082a0 <HAL_RCCEx_PeriphCLKConfig+0xbac>
      break;
 800829e:	bf00      	nop
    }

    if(ret == HAL_OK)
 80082a0:	7dfb      	ldrb	r3, [r7, #23]
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d10c      	bne.n	80082c0 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80082a6:	4b05      	ldr	r3, [pc, #20]	; (80082bc <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 80082a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80082aa:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80082b4:	4901      	ldr	r1, [pc, #4]	; (80082bc <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 80082b6:	4313      	orrs	r3, r2
 80082b8:	658b      	str	r3, [r1, #88]	; 0x58
 80082ba:	e003      	b.n	80082c4 <HAL_RCCEx_PeriphCLKConfig+0xbd0>
 80082bc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80082c0:	7dfb      	ldrb	r3, [r7, #23]
 80082c2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d02f      	beq.n	8008330 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
  {

    switch(PeriphClkInit->UsbClockSelection)
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80082d6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80082da:	d00c      	beq.n	80082f6 <HAL_RCCEx_PeriphCLKConfig+0xc02>
 80082dc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80082e0:	d015      	beq.n	800830e <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 80082e2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80082e6:	d10f      	bne.n	8008308 <HAL_RCCEx_PeriphCLKConfig+0xc14>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80082e8:	4b79      	ldr	r3, [pc, #484]	; (80084d0 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 80082ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082ec:	4a78      	ldr	r2, [pc, #480]	; (80084d0 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 80082ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80082f2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 80082f4:	e00c      	b.n	8008310 <HAL_RCCEx_PeriphCLKConfig+0xc1c>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	3324      	adds	r3, #36	; 0x24
 80082fa:	2101      	movs	r1, #1
 80082fc:	4618      	mov	r0, r3
 80082fe:	f000 fc65 	bl	8008bcc <RCCEx_PLL3_Config>
 8008302:	4603      	mov	r3, r0
 8008304:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8008306:	e003      	b.n	8008310 <HAL_RCCEx_PeriphCLKConfig+0xc1c>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008308:	2301      	movs	r3, #1
 800830a:	75fb      	strb	r3, [r7, #23]
      break;
 800830c:	e000      	b.n	8008310 <HAL_RCCEx_PeriphCLKConfig+0xc1c>
      break;
 800830e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008310:	7dfb      	ldrb	r3, [r7, #23]
 8008312:	2b00      	cmp	r3, #0
 8008314:	d10a      	bne.n	800832c <HAL_RCCEx_PeriphCLKConfig+0xc38>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008316:	4b6e      	ldr	r3, [pc, #440]	; (80084d0 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8008318:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800831a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008324:	496a      	ldr	r1, [pc, #424]	; (80084d0 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8008326:	4313      	orrs	r3, r2
 8008328:	654b      	str	r3, [r1, #84]	; 0x54
 800832a:	e001      	b.n	8008330 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800832c:	7dfb      	ldrb	r3, [r7, #23]
 800832e:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008338:	2b00      	cmp	r3, #0
 800833a:	d029      	beq.n	8008390 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008340:	2b00      	cmp	r3, #0
 8008342:	d003      	beq.n	800834c <HAL_RCCEx_PeriphCLKConfig+0xc58>
 8008344:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008348:	d007      	beq.n	800835a <HAL_RCCEx_PeriphCLKConfig+0xc66>
 800834a:	e00f      	b.n	800836c <HAL_RCCEx_PeriphCLKConfig+0xc78>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800834c:	4b60      	ldr	r3, [pc, #384]	; (80084d0 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 800834e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008350:	4a5f      	ldr	r2, [pc, #380]	; (80084d0 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8008352:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008356:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8008358:	e00b      	b.n	8008372 <HAL_RCCEx_PeriphCLKConfig+0xc7e>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	3304      	adds	r3, #4
 800835e:	2102      	movs	r1, #2
 8008360:	4618      	mov	r0, r3
 8008362:	f000 fb81 	bl	8008a68 <RCCEx_PLL2_Config>
 8008366:	4603      	mov	r3, r0
 8008368:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800836a:	e002      	b.n	8008372 <HAL_RCCEx_PeriphCLKConfig+0xc7e>

    default:
      ret = HAL_ERROR;
 800836c:	2301      	movs	r3, #1
 800836e:	75fb      	strb	r3, [r7, #23]
      break;
 8008370:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008372:	7dfb      	ldrb	r3, [r7, #23]
 8008374:	2b00      	cmp	r3, #0
 8008376:	d109      	bne.n	800838c <HAL_RCCEx_PeriphCLKConfig+0xc98>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8008378:	4b55      	ldr	r3, [pc, #340]	; (80084d0 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 800837a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800837c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008384:	4952      	ldr	r1, [pc, #328]	; (80084d0 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8008386:	4313      	orrs	r3, r2
 8008388:	64cb      	str	r3, [r1, #76]	; 0x4c
 800838a:	e001      	b.n	8008390 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800838c:	7dfb      	ldrb	r3, [r7, #23]
 800838e:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008398:	2b00      	cmp	r3, #0
 800839a:	d00a      	beq.n	80083b2 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	3324      	adds	r3, #36	; 0x24
 80083a0:	2102      	movs	r1, #2
 80083a2:	4618      	mov	r0, r3
 80083a4:	f000 fc12 	bl	8008bcc <RCCEx_PLL3_Config>
 80083a8:	4603      	mov	r3, r0
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d001      	beq.n	80083b2 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    {
      status=HAL_ERROR;
 80083ae:	2301      	movs	r3, #1
 80083b0:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d02f      	beq.n	800841e <HAL_RCCEx_PeriphCLKConfig+0xd2a>
  {

    switch(PeriphClkInit->RngClockSelection)
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80083c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80083c6:	d00c      	beq.n	80083e2 <HAL_RCCEx_PeriphCLKConfig+0xcee>
 80083c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80083cc:	d802      	bhi.n	80083d4 <HAL_RCCEx_PeriphCLKConfig+0xce0>
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d011      	beq.n	80083f6 <HAL_RCCEx_PeriphCLKConfig+0xd02>
 80083d2:	e00d      	b.n	80083f0 <HAL_RCCEx_PeriphCLKConfig+0xcfc>
 80083d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80083d8:	d00f      	beq.n	80083fa <HAL_RCCEx_PeriphCLKConfig+0xd06>
 80083da:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80083de:	d00e      	beq.n	80083fe <HAL_RCCEx_PeriphCLKConfig+0xd0a>
 80083e0:	e006      	b.n	80083f0 <HAL_RCCEx_PeriphCLKConfig+0xcfc>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80083e2:	4b3b      	ldr	r3, [pc, #236]	; (80084d0 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 80083e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083e6:	4a3a      	ldr	r2, [pc, #232]	; (80084d0 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 80083e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80083ec:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 80083ee:	e007      	b.n	8008400 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80083f0:	2301      	movs	r3, #1
 80083f2:	75fb      	strb	r3, [r7, #23]
      break;
 80083f4:	e004      	b.n	8008400 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
      break;
 80083f6:	bf00      	nop
 80083f8:	e002      	b.n	8008400 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
      break;
 80083fa:	bf00      	nop
 80083fc:	e000      	b.n	8008400 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
      break;
 80083fe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008400:	7dfb      	ldrb	r3, [r7, #23]
 8008402:	2b00      	cmp	r3, #0
 8008404:	d109      	bne.n	800841a <HAL_RCCEx_PeriphCLKConfig+0xd26>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008406:	4b32      	ldr	r3, [pc, #200]	; (80084d0 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8008408:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800840a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008412:	492f      	ldr	r1, [pc, #188]	; (80084d0 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8008414:	4313      	orrs	r3, r2
 8008416:	654b      	str	r3, [r1, #84]	; 0x54
 8008418:	e001      	b.n	800841e <HAL_RCCEx_PeriphCLKConfig+0xd2a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800841a:	7dfb      	ldrb	r3, [r7, #23]
 800841c:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008426:	2b00      	cmp	r3, #0
 8008428:	d008      	beq.n	800843c <HAL_RCCEx_PeriphCLKConfig+0xd48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800842a:	4b29      	ldr	r3, [pc, #164]	; (80084d0 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 800842c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800842e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008436:	4926      	ldr	r1, [pc, #152]	; (80084d0 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8008438:	4313      	orrs	r3, r2
 800843a:	650b      	str	r3, [r1, #80]	; 0x50
  }

  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008444:	2b00      	cmp	r3, #0
 8008446:	d009      	beq.n	800845c <HAL_RCCEx_PeriphCLKConfig+0xd68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8008448:	4b21      	ldr	r3, [pc, #132]	; (80084d0 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 800844a:	691b      	ldr	r3, [r3, #16]
 800844c:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8008456:	491e      	ldr	r1, [pc, #120]	; (80084d0 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8008458:	4313      	orrs	r3, r2
 800845a:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008464:	2b00      	cmp	r3, #0
 8008466:	d008      	beq.n	800847a <HAL_RCCEx_PeriphCLKConfig+0xd86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8008468:	4b19      	ldr	r3, [pc, #100]	; (80084d0 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 800846a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800846c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008474:	4916      	ldr	r1, [pc, #88]	; (80084d0 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8008476:	4313      	orrs	r3, r2
 8008478:	650b      	str	r3, [r1, #80]	; 0x50
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008482:	2b00      	cmp	r3, #0
 8008484:	d00d      	beq.n	80084a2 <HAL_RCCEx_PeriphCLKConfig+0xdae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008486:	4b12      	ldr	r3, [pc, #72]	; (80084d0 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8008488:	691b      	ldr	r3, [r3, #16]
 800848a:	4a11      	ldr	r2, [pc, #68]	; (80084d0 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 800848c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008490:	6113      	str	r3, [r2, #16]
 8008492:	4b0f      	ldr	r3, [pc, #60]	; (80084d0 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8008494:	691a      	ldr	r2, [r3, #16]
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800849c:	490c      	ldr	r1, [pc, #48]	; (80084d0 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 800849e:	4313      	orrs	r3, r2
 80084a0:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	da08      	bge.n	80084bc <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80084aa:	4b09      	ldr	r3, [pc, #36]	; (80084d0 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 80084ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80084ae:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80084b6:	4906      	ldr	r1, [pc, #24]	; (80084d0 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 80084b8:	4313      	orrs	r3, r2
 80084ba:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 80084bc:	7dbb      	ldrb	r3, [r7, #22]
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d101      	bne.n	80084c6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    return HAL_OK;
 80084c2:	2300      	movs	r3, #0
 80084c4:	e000      	b.n	80084c8 <HAL_RCCEx_PeriphCLKConfig+0xdd4>
  }
  return HAL_ERROR;
 80084c6:	2301      	movs	r3, #1
}
 80084c8:	4618      	mov	r0, r3
 80084ca:	3718      	adds	r7, #24
 80084cc:	46bd      	mov	sp, r7
 80084ce:	bd80      	pop	{r7, pc}
 80084d0:	58024400 	.word	0x58024400

080084d4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80084d4:	b580      	push	{r7, lr}
 80084d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80084d8:	f7ff f8c4 	bl	8007664 <HAL_RCC_GetHCLKFreq>
 80084dc:	4601      	mov	r1, r0
 80084de:	4b06      	ldr	r3, [pc, #24]	; (80084f8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80084e0:	6a1b      	ldr	r3, [r3, #32]
 80084e2:	091b      	lsrs	r3, r3, #4
 80084e4:	f003 0307 	and.w	r3, r3, #7
 80084e8:	4a04      	ldr	r2, [pc, #16]	; (80084fc <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80084ea:	5cd3      	ldrb	r3, [r2, r3]
 80084ec:	f003 031f 	and.w	r3, r3, #31
 80084f0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80084f4:	4618      	mov	r0, r3
 80084f6:	bd80      	pop	{r7, pc}
 80084f8:	58024400 	.word	0x58024400
 80084fc:	0800f0b0 	.word	0x0800f0b0

08008500 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8008500:	b480      	push	{r7}
 8008502:	b089      	sub	sp, #36	; 0x24
 8008504:	af00      	add	r7, sp, #0
 8008506:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008508:	4b9d      	ldr	r3, [pc, #628]	; (8008780 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800850a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800850c:	f003 0303 	and.w	r3, r3, #3
 8008510:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12)  ;
 8008512:	4b9b      	ldr	r3, [pc, #620]	; (8008780 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8008514:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008516:	0b1b      	lsrs	r3, r3, #12
 8008518:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800851c:	617b      	str	r3, [r7, #20]
  pll2fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN;
 800851e:	4b98      	ldr	r3, [pc, #608]	; (8008780 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8008520:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008522:	f003 0310 	and.w	r3, r3, #16
 8008526:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8008528:	4b95      	ldr	r3, [pc, #596]	; (8008780 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800852a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800852c:	08db      	lsrs	r3, r3, #3
 800852e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008532:	693a      	ldr	r2, [r7, #16]
 8008534:	fb02 f303 	mul.w	r3, r2, r3
 8008538:	ee07 3a90 	vmov	s15, r3
 800853c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008540:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8008544:	697b      	ldr	r3, [r7, #20]
 8008546:	2b00      	cmp	r3, #0
 8008548:	f000 810a 	beq.w	8008760 <HAL_RCCEx_GetPLL2ClockFreq+0x260>
  {
    switch (pllsource)
 800854c:	69bb      	ldr	r3, [r7, #24]
 800854e:	2b01      	cmp	r3, #1
 8008550:	d05a      	beq.n	8008608 <HAL_RCCEx_GetPLL2ClockFreq+0x108>
 8008552:	2b01      	cmp	r3, #1
 8008554:	d302      	bcc.n	800855c <HAL_RCCEx_GetPLL2ClockFreq+0x5c>
 8008556:	2b02      	cmp	r3, #2
 8008558:	d078      	beq.n	800864c <HAL_RCCEx_GetPLL2ClockFreq+0x14c>
 800855a:	e099      	b.n	8008690 <HAL_RCCEx_GetPLL2ClockFreq+0x190>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800855c:	4b88      	ldr	r3, [pc, #544]	; (8008780 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	f003 0320 	and.w	r3, r3, #32
 8008564:	2b00      	cmp	r3, #0
 8008566:	d02d      	beq.n	80085c4 <HAL_RCCEx_GetPLL2ClockFreq+0xc4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008568:	4b85      	ldr	r3, [pc, #532]	; (8008780 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	08db      	lsrs	r3, r3, #3
 800856e:	f003 0303 	and.w	r3, r3, #3
 8008572:	4a84      	ldr	r2, [pc, #528]	; (8008784 <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 8008574:	fa22 f303 	lsr.w	r3, r2, r3
 8008578:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800857a:	68bb      	ldr	r3, [r7, #8]
 800857c:	ee07 3a90 	vmov	s15, r3
 8008580:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008584:	697b      	ldr	r3, [r7, #20]
 8008586:	ee07 3a90 	vmov	s15, r3
 800858a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800858e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008592:	4b7b      	ldr	r3, [pc, #492]	; (8008780 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8008594:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008596:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800859a:	ee07 3a90 	vmov	s15, r3
 800859e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80085a2:	ed97 6a03 	vldr	s12, [r7, #12]
 80085a6:	eddf 5a78 	vldr	s11, [pc, #480]	; 8008788 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80085aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80085ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80085b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80085b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80085ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80085be:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80085c2:	e087      	b.n	80086d4 <HAL_RCCEx_GetPLL2ClockFreq+0x1d4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80085c4:	697b      	ldr	r3, [r7, #20]
 80085c6:	ee07 3a90 	vmov	s15, r3
 80085ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80085ce:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800878c <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 80085d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80085d6:	4b6a      	ldr	r3, [pc, #424]	; (8008780 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80085d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80085de:	ee07 3a90 	vmov	s15, r3
 80085e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80085e6:	ed97 6a03 	vldr	s12, [r7, #12]
 80085ea:	eddf 5a67 	vldr	s11, [pc, #412]	; 8008788 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80085ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80085f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80085f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80085fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80085fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008602:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008606:	e065      	b.n	80086d4 <HAL_RCCEx_GetPLL2ClockFreq+0x1d4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008608:	697b      	ldr	r3, [r7, #20]
 800860a:	ee07 3a90 	vmov	s15, r3
 800860e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008612:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8008790 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8008616:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800861a:	4b59      	ldr	r3, [pc, #356]	; (8008780 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800861c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800861e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008622:	ee07 3a90 	vmov	s15, r3
 8008626:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800862a:	ed97 6a03 	vldr	s12, [r7, #12]
 800862e:	eddf 5a56 	vldr	s11, [pc, #344]	; 8008788 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8008632:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008636:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800863a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800863e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008642:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008646:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800864a:	e043      	b.n	80086d4 <HAL_RCCEx_GetPLL2ClockFreq+0x1d4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800864c:	697b      	ldr	r3, [r7, #20]
 800864e:	ee07 3a90 	vmov	s15, r3
 8008652:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008656:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8008794 <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 800865a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800865e:	4b48      	ldr	r3, [pc, #288]	; (8008780 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8008660:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008662:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008666:	ee07 3a90 	vmov	s15, r3
 800866a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800866e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008672:	eddf 5a45 	vldr	s11, [pc, #276]	; 8008788 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8008676:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800867a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800867e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008682:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008686:	ee67 7a27 	vmul.f32	s15, s14, s15
 800868a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800868e:	e021      	b.n	80086d4 <HAL_RCCEx_GetPLL2ClockFreq+0x1d4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008690:	697b      	ldr	r3, [r7, #20]
 8008692:	ee07 3a90 	vmov	s15, r3
 8008696:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800869a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8008790 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 800869e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80086a2:	4b37      	ldr	r3, [pc, #220]	; (8008780 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80086a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80086aa:	ee07 3a90 	vmov	s15, r3
 80086ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80086b2:	ed97 6a03 	vldr	s12, [r7, #12]
 80086b6:	eddf 5a34 	vldr	s11, [pc, #208]	; 8008788 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80086ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80086be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80086c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80086c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80086ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80086ce:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80086d2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80086d4:	4b2a      	ldr	r3, [pc, #168]	; (8008780 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80086d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086d8:	0a5b      	lsrs	r3, r3, #9
 80086da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80086de:	ee07 3a90 	vmov	s15, r3
 80086e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80086e6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80086ea:	ee37 7a87 	vadd.f32	s14, s15, s14
 80086ee:	edd7 6a07 	vldr	s13, [r7, #28]
 80086f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80086f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80086fa:	ee17 2a90 	vmov	r2, s15
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8008702:	4b1f      	ldr	r3, [pc, #124]	; (8008780 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8008704:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008706:	0c1b      	lsrs	r3, r3, #16
 8008708:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800870c:	ee07 3a90 	vmov	s15, r3
 8008710:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008714:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008718:	ee37 7a87 	vadd.f32	s14, s15, s14
 800871c:	edd7 6a07 	vldr	s13, [r7, #28]
 8008720:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008724:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008728:	ee17 2a90 	vmov	r2, s15
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8008730:	4b13      	ldr	r3, [pc, #76]	; (8008780 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8008732:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008734:	0e1b      	lsrs	r3, r3, #24
 8008736:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800873a:	ee07 3a90 	vmov	s15, r3
 800873e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008742:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008746:	ee37 7a87 	vadd.f32	s14, s15, s14
 800874a:	edd7 6a07 	vldr	s13, [r7, #28]
 800874e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008752:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008756:	ee17 2a90 	vmov	r2, s15
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800875e:	e008      	b.n	8008772 <HAL_RCCEx_GetPLL2ClockFreq+0x272>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	2200      	movs	r2, #0
 8008764:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	2200      	movs	r2, #0
 800876a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	2200      	movs	r2, #0
 8008770:	609a      	str	r2, [r3, #8]
}
 8008772:	bf00      	nop
 8008774:	3724      	adds	r7, #36	; 0x24
 8008776:	46bd      	mov	sp, r7
 8008778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800877c:	4770      	bx	lr
 800877e:	bf00      	nop
 8008780:	58024400 	.word	0x58024400
 8008784:	03d09000 	.word	0x03d09000
 8008788:	46000000 	.word	0x46000000
 800878c:	4c742400 	.word	0x4c742400
 8008790:	4a742400 	.word	0x4a742400
 8008794:	4bbebc20 	.word	0x4bbebc20

08008798 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8008798:	b480      	push	{r7}
 800879a:	b089      	sub	sp, #36	; 0x24
 800879c:	af00      	add	r7, sp, #0
 800879e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80087a0:	4b9d      	ldr	r3, [pc, #628]	; (8008a18 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80087a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087a4:	f003 0303 	and.w	r3, r3, #3
 80087a8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80087aa:	4b9b      	ldr	r3, [pc, #620]	; (8008a18 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80087ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087ae:	0d1b      	lsrs	r3, r3, #20
 80087b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80087b4:	617b      	str	r3, [r7, #20]
  pll3fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN;
 80087b6:	4b98      	ldr	r3, [pc, #608]	; (8008a18 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80087b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80087be:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80087c0:	4b95      	ldr	r3, [pc, #596]	; (8008a18 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80087c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80087c4:	08db      	lsrs	r3, r3, #3
 80087c6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80087ca:	693a      	ldr	r2, [r7, #16]
 80087cc:	fb02 f303 	mul.w	r3, r2, r3
 80087d0:	ee07 3a90 	vmov	s15, r3
 80087d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80087d8:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80087dc:	697b      	ldr	r3, [r7, #20]
 80087de:	2b00      	cmp	r3, #0
 80087e0:	f000 810a 	beq.w	80089f8 <HAL_RCCEx_GetPLL3ClockFreq+0x260>
  {
    switch (pllsource)
 80087e4:	69bb      	ldr	r3, [r7, #24]
 80087e6:	2b01      	cmp	r3, #1
 80087e8:	d05a      	beq.n	80088a0 <HAL_RCCEx_GetPLL3ClockFreq+0x108>
 80087ea:	2b01      	cmp	r3, #1
 80087ec:	d302      	bcc.n	80087f4 <HAL_RCCEx_GetPLL3ClockFreq+0x5c>
 80087ee:	2b02      	cmp	r3, #2
 80087f0:	d078      	beq.n	80088e4 <HAL_RCCEx_GetPLL3ClockFreq+0x14c>
 80087f2:	e099      	b.n	8008928 <HAL_RCCEx_GetPLL3ClockFreq+0x190>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80087f4:	4b88      	ldr	r3, [pc, #544]	; (8008a18 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	f003 0320 	and.w	r3, r3, #32
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d02d      	beq.n	800885c <HAL_RCCEx_GetPLL3ClockFreq+0xc4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008800:	4b85      	ldr	r3, [pc, #532]	; (8008a18 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	08db      	lsrs	r3, r3, #3
 8008806:	f003 0303 	and.w	r3, r3, #3
 800880a:	4a84      	ldr	r2, [pc, #528]	; (8008a1c <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 800880c:	fa22 f303 	lsr.w	r3, r2, r3
 8008810:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008812:	68bb      	ldr	r3, [r7, #8]
 8008814:	ee07 3a90 	vmov	s15, r3
 8008818:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800881c:	697b      	ldr	r3, [r7, #20]
 800881e:	ee07 3a90 	vmov	s15, r3
 8008822:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008826:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800882a:	4b7b      	ldr	r3, [pc, #492]	; (8008a18 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800882c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800882e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008832:	ee07 3a90 	vmov	s15, r3
 8008836:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800883a:	ed97 6a03 	vldr	s12, [r7, #12]
 800883e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8008a20 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8008842:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008846:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800884a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800884e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008852:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008856:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800885a:	e087      	b.n	800896c <HAL_RCCEx_GetPLL3ClockFreq+0x1d4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800885c:	697b      	ldr	r3, [r7, #20]
 800885e:	ee07 3a90 	vmov	s15, r3
 8008862:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008866:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8008a24 <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 800886a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800886e:	4b6a      	ldr	r3, [pc, #424]	; (8008a18 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8008870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008872:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008876:	ee07 3a90 	vmov	s15, r3
 800887a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800887e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008882:	eddf 5a67 	vldr	s11, [pc, #412]	; 8008a20 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8008886:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800888a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800888e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008892:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008896:	ee67 7a27 	vmul.f32	s15, s14, s15
 800889a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800889e:	e065      	b.n	800896c <HAL_RCCEx_GetPLL3ClockFreq+0x1d4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80088a0:	697b      	ldr	r3, [r7, #20]
 80088a2:	ee07 3a90 	vmov	s15, r3
 80088a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80088aa:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8008a28 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 80088ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80088b2:	4b59      	ldr	r3, [pc, #356]	; (8008a18 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80088b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80088ba:	ee07 3a90 	vmov	s15, r3
 80088be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80088c2:	ed97 6a03 	vldr	s12, [r7, #12]
 80088c6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8008a20 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80088ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80088ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80088d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80088d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80088da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80088de:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80088e2:	e043      	b.n	800896c <HAL_RCCEx_GetPLL3ClockFreq+0x1d4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80088e4:	697b      	ldr	r3, [r7, #20]
 80088e6:	ee07 3a90 	vmov	s15, r3
 80088ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80088ee:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8008a2c <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 80088f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80088f6:	4b48      	ldr	r3, [pc, #288]	; (8008a18 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80088f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80088fe:	ee07 3a90 	vmov	s15, r3
 8008902:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008906:	ed97 6a03 	vldr	s12, [r7, #12]
 800890a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8008a20 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 800890e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008912:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008916:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800891a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800891e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008922:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008926:	e021      	b.n	800896c <HAL_RCCEx_GetPLL3ClockFreq+0x1d4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008928:	697b      	ldr	r3, [r7, #20]
 800892a:	ee07 3a90 	vmov	s15, r3
 800892e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008932:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8008a28 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8008936:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800893a:	4b37      	ldr	r3, [pc, #220]	; (8008a18 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800893c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800893e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008942:	ee07 3a90 	vmov	s15, r3
 8008946:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800894a:	ed97 6a03 	vldr	s12, [r7, #12]
 800894e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8008a20 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8008952:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008956:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800895a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800895e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008962:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008966:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800896a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800896c:	4b2a      	ldr	r3, [pc, #168]	; (8008a18 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800896e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008970:	0a5b      	lsrs	r3, r3, #9
 8008972:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008976:	ee07 3a90 	vmov	s15, r3
 800897a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800897e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008982:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008986:	edd7 6a07 	vldr	s13, [r7, #28]
 800898a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800898e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008992:	ee17 2a90 	vmov	r2, s15
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800899a:	4b1f      	ldr	r3, [pc, #124]	; (8008a18 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800899c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800899e:	0c1b      	lsrs	r3, r3, #16
 80089a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80089a4:	ee07 3a90 	vmov	s15, r3
 80089a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80089ac:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80089b0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80089b4:	edd7 6a07 	vldr	s13, [r7, #28]
 80089b8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80089bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80089c0:	ee17 2a90 	vmov	r2, s15
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 80089c8:	4b13      	ldr	r3, [pc, #76]	; (8008a18 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80089ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089cc:	0e1b      	lsrs	r3, r3, #24
 80089ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80089d2:	ee07 3a90 	vmov	s15, r3
 80089d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80089da:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80089de:	ee37 7a87 	vadd.f32	s14, s15, s14
 80089e2:	edd7 6a07 	vldr	s13, [r7, #28]
 80089e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80089ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80089ee:	ee17 2a90 	vmov	r2, s15
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80089f6:	e008      	b.n	8008a0a <HAL_RCCEx_GetPLL3ClockFreq+0x272>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	2200      	movs	r2, #0
 80089fc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	2200      	movs	r2, #0
 8008a02:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	2200      	movs	r2, #0
 8008a08:	609a      	str	r2, [r3, #8]
}
 8008a0a:	bf00      	nop
 8008a0c:	3724      	adds	r7, #36	; 0x24
 8008a0e:	46bd      	mov	sp, r7
 8008a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a14:	4770      	bx	lr
 8008a16:	bf00      	nop
 8008a18:	58024400 	.word	0x58024400
 8008a1c:	03d09000 	.word	0x03d09000
 8008a20:	46000000 	.word	0x46000000
 8008a24:	4c742400 	.word	0x4c742400
 8008a28:	4a742400 	.word	0x4a742400
 8008a2c:	4bbebc20 	.word	0x4bbebc20

08008a30 <HAL_RCCEx_GetD1SysClockFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCCEx_GetD1SysClockFreq(void)
{
 8008a30:	b580      	push	{r7, lr}
 8008a32:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8008a34:	f7fe fca4 	bl	8007380 <HAL_RCC_GetSysClockFreq>
 8008a38:	4601      	mov	r1, r0
 8008a3a:	4b08      	ldr	r3, [pc, #32]	; (8008a5c <HAL_RCCEx_GetD1SysClockFreq+0x2c>)
 8008a3c:	699b      	ldr	r3, [r3, #24]
 8008a3e:	0a1b      	lsrs	r3, r3, #8
 8008a40:	f003 030f 	and.w	r3, r3, #15
 8008a44:	4a06      	ldr	r2, [pc, #24]	; (8008a60 <HAL_RCCEx_GetD1SysClockFreq+0x30>)
 8008a46:	5cd3      	ldrb	r3, [r2, r3]
 8008a48:	f003 031f 	and.w	r3, r3, #31
 8008a4c:	fa21 f303 	lsr.w	r3, r1, r3
 8008a50:	4a04      	ldr	r2, [pc, #16]	; (8008a64 <HAL_RCCEx_GetD1SysClockFreq+0x34>)
 8008a52:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 8008a54:	4b03      	ldr	r3, [pc, #12]	; (8008a64 <HAL_RCCEx_GetD1SysClockFreq+0x34>)
 8008a56:	681b      	ldr	r3, [r3, #0]
}
 8008a58:	4618      	mov	r0, r3
 8008a5a:	bd80      	pop	{r7, pc}
 8008a5c:	58024400 	.word	0x58024400
 8008a60:	0800f0b0 	.word	0x0800f0b0
 8008a64:	24000088 	.word	0x24000088

08008a68 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8008a68:	b580      	push	{r7, lr}
 8008a6a:	b084      	sub	sp, #16
 8008a6c:	af00      	add	r7, sp, #0
 8008a6e:	6078      	str	r0, [r7, #4]
 8008a70:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008a72:	2300      	movs	r3, #0
 8008a74:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008a76:	4b53      	ldr	r3, [pc, #332]	; (8008bc4 <RCCEx_PLL2_Config+0x15c>)
 8008a78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a7a:	f003 0303 	and.w	r3, r3, #3
 8008a7e:	2b03      	cmp	r3, #3
 8008a80:	d101      	bne.n	8008a86 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8008a82:	2301      	movs	r3, #1
 8008a84:	e099      	b.n	8008bba <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8008a86:	4b4f      	ldr	r3, [pc, #316]	; (8008bc4 <RCCEx_PLL2_Config+0x15c>)
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	4a4e      	ldr	r2, [pc, #312]	; (8008bc4 <RCCEx_PLL2_Config+0x15c>)
 8008a8c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008a90:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008a92:	f7f9 fe1b 	bl	80026cc <HAL_GetTick>
 8008a96:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008a98:	e008      	b.n	8008aac <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8008a9a:	f7f9 fe17 	bl	80026cc <HAL_GetTick>
 8008a9e:	4602      	mov	r2, r0
 8008aa0:	68bb      	ldr	r3, [r7, #8]
 8008aa2:	1ad3      	subs	r3, r2, r3
 8008aa4:	2b02      	cmp	r3, #2
 8008aa6:	d901      	bls.n	8008aac <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008aa8:	2303      	movs	r3, #3
 8008aaa:	e086      	b.n	8008bba <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008aac:	4b45      	ldr	r3, [pc, #276]	; (8008bc4 <RCCEx_PLL2_Config+0x15c>)
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d1f0      	bne.n	8008a9a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8008ab8:	4b42      	ldr	r3, [pc, #264]	; (8008bc4 <RCCEx_PLL2_Config+0x15c>)
 8008aba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008abc:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	031b      	lsls	r3, r3, #12
 8008ac6:	493f      	ldr	r1, [pc, #252]	; (8008bc4 <RCCEx_PLL2_Config+0x15c>)
 8008ac8:	4313      	orrs	r3, r2
 8008aca:	628b      	str	r3, [r1, #40]	; 0x28
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	685b      	ldr	r3, [r3, #4]
 8008ad0:	3b01      	subs	r3, #1
 8008ad2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	689b      	ldr	r3, [r3, #8]
 8008ada:	3b01      	subs	r3, #1
 8008adc:	025b      	lsls	r3, r3, #9
 8008ade:	b29b      	uxth	r3, r3
 8008ae0:	431a      	orrs	r2, r3
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	68db      	ldr	r3, [r3, #12]
 8008ae6:	3b01      	subs	r3, #1
 8008ae8:	041b      	lsls	r3, r3, #16
 8008aea:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008aee:	431a      	orrs	r2, r3
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	691b      	ldr	r3, [r3, #16]
 8008af4:	3b01      	subs	r3, #1
 8008af6:	061b      	lsls	r3, r3, #24
 8008af8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008afc:	4931      	ldr	r1, [pc, #196]	; (8008bc4 <RCCEx_PLL2_Config+0x15c>)
 8008afe:	4313      	orrs	r3, r2
 8008b00:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8008b02:	4b30      	ldr	r3, [pc, #192]	; (8008bc4 <RCCEx_PLL2_Config+0x15c>)
 8008b04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b06:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	695b      	ldr	r3, [r3, #20]
 8008b0e:	492d      	ldr	r1, [pc, #180]	; (8008bc4 <RCCEx_PLL2_Config+0x15c>)
 8008b10:	4313      	orrs	r3, r2
 8008b12:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8008b14:	4b2b      	ldr	r3, [pc, #172]	; (8008bc4 <RCCEx_PLL2_Config+0x15c>)
 8008b16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b18:	f023 0220 	bic.w	r2, r3, #32
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	699b      	ldr	r3, [r3, #24]
 8008b20:	4928      	ldr	r1, [pc, #160]	; (8008bc4 <RCCEx_PLL2_Config+0x15c>)
 8008b22:	4313      	orrs	r3, r2
 8008b24:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8008b26:	4b27      	ldr	r3, [pc, #156]	; (8008bc4 <RCCEx_PLL2_Config+0x15c>)
 8008b28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b2a:	4a26      	ldr	r2, [pc, #152]	; (8008bc4 <RCCEx_PLL2_Config+0x15c>)
 8008b2c:	f023 0310 	bic.w	r3, r3, #16
 8008b30:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8008b32:	4b24      	ldr	r3, [pc, #144]	; (8008bc4 <RCCEx_PLL2_Config+0x15c>)
 8008b34:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008b36:	4b24      	ldr	r3, [pc, #144]	; (8008bc8 <RCCEx_PLL2_Config+0x160>)
 8008b38:	4013      	ands	r3, r2
 8008b3a:	687a      	ldr	r2, [r7, #4]
 8008b3c:	69d2      	ldr	r2, [r2, #28]
 8008b3e:	00d2      	lsls	r2, r2, #3
 8008b40:	4920      	ldr	r1, [pc, #128]	; (8008bc4 <RCCEx_PLL2_Config+0x15c>)
 8008b42:	4313      	orrs	r3, r2
 8008b44:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8008b46:	4b1f      	ldr	r3, [pc, #124]	; (8008bc4 <RCCEx_PLL2_Config+0x15c>)
 8008b48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b4a:	4a1e      	ldr	r2, [pc, #120]	; (8008bc4 <RCCEx_PLL2_Config+0x15c>)
 8008b4c:	f043 0310 	orr.w	r3, r3, #16
 8008b50:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8008b52:	683b      	ldr	r3, [r7, #0]
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d106      	bne.n	8008b66 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8008b58:	4b1a      	ldr	r3, [pc, #104]	; (8008bc4 <RCCEx_PLL2_Config+0x15c>)
 8008b5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b5c:	4a19      	ldr	r2, [pc, #100]	; (8008bc4 <RCCEx_PLL2_Config+0x15c>)
 8008b5e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008b62:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008b64:	e00f      	b.n	8008b86 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8008b66:	683b      	ldr	r3, [r7, #0]
 8008b68:	2b01      	cmp	r3, #1
 8008b6a:	d106      	bne.n	8008b7a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8008b6c:	4b15      	ldr	r3, [pc, #84]	; (8008bc4 <RCCEx_PLL2_Config+0x15c>)
 8008b6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b70:	4a14      	ldr	r2, [pc, #80]	; (8008bc4 <RCCEx_PLL2_Config+0x15c>)
 8008b72:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008b76:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008b78:	e005      	b.n	8008b86 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8008b7a:	4b12      	ldr	r3, [pc, #72]	; (8008bc4 <RCCEx_PLL2_Config+0x15c>)
 8008b7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b7e:	4a11      	ldr	r2, [pc, #68]	; (8008bc4 <RCCEx_PLL2_Config+0x15c>)
 8008b80:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008b84:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8008b86:	4b0f      	ldr	r3, [pc, #60]	; (8008bc4 <RCCEx_PLL2_Config+0x15c>)
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	4a0e      	ldr	r2, [pc, #56]	; (8008bc4 <RCCEx_PLL2_Config+0x15c>)
 8008b8c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008b90:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008b92:	f7f9 fd9b 	bl	80026cc <HAL_GetTick>
 8008b96:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008b98:	e008      	b.n	8008bac <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8008b9a:	f7f9 fd97 	bl	80026cc <HAL_GetTick>
 8008b9e:	4602      	mov	r2, r0
 8008ba0:	68bb      	ldr	r3, [r7, #8]
 8008ba2:	1ad3      	subs	r3, r2, r3
 8008ba4:	2b02      	cmp	r3, #2
 8008ba6:	d901      	bls.n	8008bac <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008ba8:	2303      	movs	r3, #3
 8008baa:	e006      	b.n	8008bba <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008bac:	4b05      	ldr	r3, [pc, #20]	; (8008bc4 <RCCEx_PLL2_Config+0x15c>)
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d0f0      	beq.n	8008b9a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8008bb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008bba:	4618      	mov	r0, r3
 8008bbc:	3710      	adds	r7, #16
 8008bbe:	46bd      	mov	sp, r7
 8008bc0:	bd80      	pop	{r7, pc}
 8008bc2:	bf00      	nop
 8008bc4:	58024400 	.word	0x58024400
 8008bc8:	ffff0007 	.word	0xffff0007

08008bcc <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8008bcc:	b580      	push	{r7, lr}
 8008bce:	b084      	sub	sp, #16
 8008bd0:	af00      	add	r7, sp, #0
 8008bd2:	6078      	str	r0, [r7, #4]
 8008bd4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008bd6:	2300      	movs	r3, #0
 8008bd8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008bda:	4b53      	ldr	r3, [pc, #332]	; (8008d28 <RCCEx_PLL3_Config+0x15c>)
 8008bdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bde:	f003 0303 	and.w	r3, r3, #3
 8008be2:	2b03      	cmp	r3, #3
 8008be4:	d101      	bne.n	8008bea <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8008be6:	2301      	movs	r3, #1
 8008be8:	e099      	b.n	8008d1e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8008bea:	4b4f      	ldr	r3, [pc, #316]	; (8008d28 <RCCEx_PLL3_Config+0x15c>)
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	4a4e      	ldr	r2, [pc, #312]	; (8008d28 <RCCEx_PLL3_Config+0x15c>)
 8008bf0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008bf4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008bf6:	f7f9 fd69 	bl	80026cc <HAL_GetTick>
 8008bfa:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008bfc:	e008      	b.n	8008c10 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8008bfe:	f7f9 fd65 	bl	80026cc <HAL_GetTick>
 8008c02:	4602      	mov	r2, r0
 8008c04:	68bb      	ldr	r3, [r7, #8]
 8008c06:	1ad3      	subs	r3, r2, r3
 8008c08:	2b02      	cmp	r3, #2
 8008c0a:	d901      	bls.n	8008c10 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008c0c:	2303      	movs	r3, #3
 8008c0e:	e086      	b.n	8008d1e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008c10:	4b45      	ldr	r3, [pc, #276]	; (8008d28 <RCCEx_PLL3_Config+0x15c>)
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d1f0      	bne.n	8008bfe <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8008c1c:	4b42      	ldr	r3, [pc, #264]	; (8008d28 <RCCEx_PLL3_Config+0x15c>)
 8008c1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c20:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	051b      	lsls	r3, r3, #20
 8008c2a:	493f      	ldr	r1, [pc, #252]	; (8008d28 <RCCEx_PLL3_Config+0x15c>)
 8008c2c:	4313      	orrs	r3, r2
 8008c2e:	628b      	str	r3, [r1, #40]	; 0x28
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	685b      	ldr	r3, [r3, #4]
 8008c34:	3b01      	subs	r3, #1
 8008c36:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	689b      	ldr	r3, [r3, #8]
 8008c3e:	3b01      	subs	r3, #1
 8008c40:	025b      	lsls	r3, r3, #9
 8008c42:	b29b      	uxth	r3, r3
 8008c44:	431a      	orrs	r2, r3
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	68db      	ldr	r3, [r3, #12]
 8008c4a:	3b01      	subs	r3, #1
 8008c4c:	041b      	lsls	r3, r3, #16
 8008c4e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008c52:	431a      	orrs	r2, r3
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	691b      	ldr	r3, [r3, #16]
 8008c58:	3b01      	subs	r3, #1
 8008c5a:	061b      	lsls	r3, r3, #24
 8008c5c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008c60:	4931      	ldr	r1, [pc, #196]	; (8008d28 <RCCEx_PLL3_Config+0x15c>)
 8008c62:	4313      	orrs	r3, r2
 8008c64:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8008c66:	4b30      	ldr	r3, [pc, #192]	; (8008d28 <RCCEx_PLL3_Config+0x15c>)
 8008c68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c6a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	695b      	ldr	r3, [r3, #20]
 8008c72:	492d      	ldr	r1, [pc, #180]	; (8008d28 <RCCEx_PLL3_Config+0x15c>)
 8008c74:	4313      	orrs	r3, r2
 8008c76:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8008c78:	4b2b      	ldr	r3, [pc, #172]	; (8008d28 <RCCEx_PLL3_Config+0x15c>)
 8008c7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c7c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	699b      	ldr	r3, [r3, #24]
 8008c84:	4928      	ldr	r1, [pc, #160]	; (8008d28 <RCCEx_PLL3_Config+0x15c>)
 8008c86:	4313      	orrs	r3, r2
 8008c88:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8008c8a:	4b27      	ldr	r3, [pc, #156]	; (8008d28 <RCCEx_PLL3_Config+0x15c>)
 8008c8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c8e:	4a26      	ldr	r2, [pc, #152]	; (8008d28 <RCCEx_PLL3_Config+0x15c>)
 8008c90:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008c94:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8008c96:	4b24      	ldr	r3, [pc, #144]	; (8008d28 <RCCEx_PLL3_Config+0x15c>)
 8008c98:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008c9a:	4b24      	ldr	r3, [pc, #144]	; (8008d2c <RCCEx_PLL3_Config+0x160>)
 8008c9c:	4013      	ands	r3, r2
 8008c9e:	687a      	ldr	r2, [r7, #4]
 8008ca0:	69d2      	ldr	r2, [r2, #28]
 8008ca2:	00d2      	lsls	r2, r2, #3
 8008ca4:	4920      	ldr	r1, [pc, #128]	; (8008d28 <RCCEx_PLL3_Config+0x15c>)
 8008ca6:	4313      	orrs	r3, r2
 8008ca8:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8008caa:	4b1f      	ldr	r3, [pc, #124]	; (8008d28 <RCCEx_PLL3_Config+0x15c>)
 8008cac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cae:	4a1e      	ldr	r2, [pc, #120]	; (8008d28 <RCCEx_PLL3_Config+0x15c>)
 8008cb0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008cb4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8008cb6:	683b      	ldr	r3, [r7, #0]
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d106      	bne.n	8008cca <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8008cbc:	4b1a      	ldr	r3, [pc, #104]	; (8008d28 <RCCEx_PLL3_Config+0x15c>)
 8008cbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cc0:	4a19      	ldr	r2, [pc, #100]	; (8008d28 <RCCEx_PLL3_Config+0x15c>)
 8008cc2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8008cc6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008cc8:	e00f      	b.n	8008cea <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8008cca:	683b      	ldr	r3, [r7, #0]
 8008ccc:	2b01      	cmp	r3, #1
 8008cce:	d106      	bne.n	8008cde <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8008cd0:	4b15      	ldr	r3, [pc, #84]	; (8008d28 <RCCEx_PLL3_Config+0x15c>)
 8008cd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cd4:	4a14      	ldr	r2, [pc, #80]	; (8008d28 <RCCEx_PLL3_Config+0x15c>)
 8008cd6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008cda:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008cdc:	e005      	b.n	8008cea <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8008cde:	4b12      	ldr	r3, [pc, #72]	; (8008d28 <RCCEx_PLL3_Config+0x15c>)
 8008ce0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ce2:	4a11      	ldr	r2, [pc, #68]	; (8008d28 <RCCEx_PLL3_Config+0x15c>)
 8008ce4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008ce8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8008cea:	4b0f      	ldr	r3, [pc, #60]	; (8008d28 <RCCEx_PLL3_Config+0x15c>)
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	4a0e      	ldr	r2, [pc, #56]	; (8008d28 <RCCEx_PLL3_Config+0x15c>)
 8008cf0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008cf4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008cf6:	f7f9 fce9 	bl	80026cc <HAL_GetTick>
 8008cfa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008cfc:	e008      	b.n	8008d10 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8008cfe:	f7f9 fce5 	bl	80026cc <HAL_GetTick>
 8008d02:	4602      	mov	r2, r0
 8008d04:	68bb      	ldr	r3, [r7, #8]
 8008d06:	1ad3      	subs	r3, r2, r3
 8008d08:	2b02      	cmp	r3, #2
 8008d0a:	d901      	bls.n	8008d10 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008d0c:	2303      	movs	r3, #3
 8008d0e:	e006      	b.n	8008d1e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008d10:	4b05      	ldr	r3, [pc, #20]	; (8008d28 <RCCEx_PLL3_Config+0x15c>)
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d0f0      	beq.n	8008cfe <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8008d1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d1e:	4618      	mov	r0, r3
 8008d20:	3710      	adds	r7, #16
 8008d22:	46bd      	mov	sp, r7
 8008d24:	bd80      	pop	{r7, pc}
 8008d26:	bf00      	nop
 8008d28:	58024400 	.word	0x58024400
 8008d2c:	ffff0007 	.word	0xffff0007

08008d30 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008d30:	b580      	push	{r7, lr}
 8008d32:	b082      	sub	sp, #8
 8008d34:	af00      	add	r7, sp, #0
 8008d36:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d101      	bne.n	8008d42 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008d3e:	2301      	movs	r3, #1
 8008d40:	e042      	b.n	8008dc8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d106      	bne.n	8008d5a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	2200      	movs	r2, #0
 8008d50:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008d54:	6878      	ldr	r0, [r7, #4]
 8008d56:	f7f8 ff35 	bl	8001bc4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	2224      	movs	r2, #36	; 0x24
 8008d5e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	681a      	ldr	r2, [r3, #0]
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	f022 0201 	bic.w	r2, r2, #1
 8008d70:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008d72:	6878      	ldr	r0, [r7, #4]
 8008d74:	f000 facc 	bl	8009310 <UART_SetConfig>
 8008d78:	4603      	mov	r3, r0
 8008d7a:	2b01      	cmp	r3, #1
 8008d7c:	d101      	bne.n	8008d82 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8008d7e:	2301      	movs	r3, #1
 8008d80:	e022      	b.n	8008dc8 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d002      	beq.n	8008d90 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8008d8a:	6878      	ldr	r0, [r7, #4]
 8008d8c:	f002 fc3e 	bl	800b60c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	685a      	ldr	r2, [r3, #4]
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008d9e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	689a      	ldr	r2, [r3, #8]
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008dae:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	681a      	ldr	r2, [r3, #0]
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	f042 0201 	orr.w	r2, r2, #1
 8008dbe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008dc0:	6878      	ldr	r0, [r7, #4]
 8008dc2:	f002 fcc5 	bl	800b750 <UART_CheckIdleState>
 8008dc6:	4603      	mov	r3, r0
}
 8008dc8:	4618      	mov	r0, r3
 8008dca:	3708      	adds	r7, #8
 8008dcc:	46bd      	mov	sp, r7
 8008dce:	bd80      	pop	{r7, pc}

08008dd0 <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8008dd0:	b580      	push	{r7, lr}
 8008dd2:	b082      	sub	sp, #8
 8008dd4:	af00      	add	r7, sp, #0
 8008dd6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d101      	bne.n	8008de2 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8008dde:	2301      	movs	r3, #1
 8008de0:	e02b      	b.n	8008e3a <HAL_UART_DeInit+0x6a>
  }

  /* Check the parameters */
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));

  huart->gState = HAL_UART_STATE_BUSY;
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	2224      	movs	r2, #36	; 0x24
 8008de6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	681a      	ldr	r2, [r3, #0]
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	f022 0201 	bic.w	r2, r2, #1
 8008df8:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	2200      	movs	r2, #0
 8008e00:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	2200      	movs	r2, #0
 8008e08:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	2200      	movs	r2, #0
 8008e10:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8008e12:	6878      	ldr	r0, [r7, #4]
 8008e14:	f7f8 ff28 	bl	8001c68 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	2200      	movs	r2, #0
 8008e1c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->gState = HAL_UART_STATE_RESET;
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	2200      	movs	r2, #0
 8008e24:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_RESET;
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	2200      	movs	r2, #0
 8008e2c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	2200      	movs	r2, #0
 8008e34:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8008e38:	2300      	movs	r3, #0
}
 8008e3a:	4618      	mov	r0, r3
 8008e3c:	3708      	adds	r7, #8
 8008e3e:	46bd      	mov	sp, r7
 8008e40:	bd80      	pop	{r7, pc}

08008e42 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008e42:	b580      	push	{r7, lr}
 8008e44:	b08a      	sub	sp, #40	; 0x28
 8008e46:	af02      	add	r7, sp, #8
 8008e48:	60f8      	str	r0, [r7, #12]
 8008e4a:	60b9      	str	r1, [r7, #8]
 8008e4c:	603b      	str	r3, [r7, #0]
 8008e4e:	4613      	mov	r3, r2
 8008e50:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008e58:	2b20      	cmp	r3, #32
 8008e5a:	f040 80bd 	bne.w	8008fd8 <HAL_UART_Receive+0x196>
  {
    if ((pData == NULL) || (Size == 0U))
 8008e5e:	68bb      	ldr	r3, [r7, #8]
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d002      	beq.n	8008e6a <HAL_UART_Receive+0x28>
 8008e64:	88fb      	ldrh	r3, [r7, #6]
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d101      	bne.n	8008e6e <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8008e6a:	2301      	movs	r3, #1
 8008e6c:	e0b5      	b.n	8008fda <HAL_UART_Receive+0x198>
    }

    __HAL_LOCK(huart);
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8008e74:	2b01      	cmp	r3, #1
 8008e76:	d101      	bne.n	8008e7c <HAL_UART_Receive+0x3a>
 8008e78:	2302      	movs	r3, #2
 8008e7a:	e0ae      	b.n	8008fda <HAL_UART_Receive+0x198>
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	2201      	movs	r2, #1
 8008e80:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	2200      	movs	r2, #0
 8008e88:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	2222      	movs	r2, #34	; 0x22
 8008e90:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8008e94:	f7f9 fc1a 	bl	80026cc <HAL_GetTick>
 8008e98:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	88fa      	ldrh	r2, [r7, #6]
 8008e9e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	88fa      	ldrh	r2, [r7, #6]
 8008ea6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	689b      	ldr	r3, [r3, #8]
 8008eae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008eb2:	d10e      	bne.n	8008ed2 <HAL_UART_Receive+0x90>
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	691b      	ldr	r3, [r3, #16]
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d105      	bne.n	8008ec8 <HAL_UART_Receive+0x86>
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	f240 12ff 	movw	r2, #511	; 0x1ff
 8008ec2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008ec6:	e02d      	b.n	8008f24 <HAL_UART_Receive+0xe2>
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	22ff      	movs	r2, #255	; 0xff
 8008ecc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008ed0:	e028      	b.n	8008f24 <HAL_UART_Receive+0xe2>
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	689b      	ldr	r3, [r3, #8]
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d10d      	bne.n	8008ef6 <HAL_UART_Receive+0xb4>
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	691b      	ldr	r3, [r3, #16]
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d104      	bne.n	8008eec <HAL_UART_Receive+0xaa>
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	22ff      	movs	r2, #255	; 0xff
 8008ee6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008eea:	e01b      	b.n	8008f24 <HAL_UART_Receive+0xe2>
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	227f      	movs	r2, #127	; 0x7f
 8008ef0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008ef4:	e016      	b.n	8008f24 <HAL_UART_Receive+0xe2>
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	689b      	ldr	r3, [r3, #8]
 8008efa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008efe:	d10d      	bne.n	8008f1c <HAL_UART_Receive+0xda>
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	691b      	ldr	r3, [r3, #16]
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d104      	bne.n	8008f12 <HAL_UART_Receive+0xd0>
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	227f      	movs	r2, #127	; 0x7f
 8008f0c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008f10:	e008      	b.n	8008f24 <HAL_UART_Receive+0xe2>
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	223f      	movs	r2, #63	; 0x3f
 8008f16:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008f1a:	e003      	b.n	8008f24 <HAL_UART_Receive+0xe2>
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	2200      	movs	r2, #0
 8008f20:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008f2a:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	689b      	ldr	r3, [r3, #8]
 8008f30:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008f34:	d108      	bne.n	8008f48 <HAL_UART_Receive+0x106>
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	691b      	ldr	r3, [r3, #16]
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d104      	bne.n	8008f48 <HAL_UART_Receive+0x106>
    {
      pdata8bits  = NULL;
 8008f3e:	2300      	movs	r3, #0
 8008f40:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8008f42:	68bb      	ldr	r3, [r7, #8]
 8008f44:	61bb      	str	r3, [r7, #24]
 8008f46:	e003      	b.n	8008f50 <HAL_UART_Receive+0x10e>
    }
    else
    {
      pdata8bits  = pData;
 8008f48:	68bb      	ldr	r3, [r7, #8]
 8008f4a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008f4c:	2300      	movs	r3, #0
 8008f4e:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8008f50:	e032      	b.n	8008fb8 <HAL_UART_Receive+0x176>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8008f52:	683b      	ldr	r3, [r7, #0]
 8008f54:	9300      	str	r3, [sp, #0]
 8008f56:	697b      	ldr	r3, [r7, #20]
 8008f58:	2200      	movs	r2, #0
 8008f5a:	2120      	movs	r1, #32
 8008f5c:	68f8      	ldr	r0, [r7, #12]
 8008f5e:	f002 fc3f 	bl	800b7e0 <UART_WaitOnFlagUntilTimeout>
 8008f62:	4603      	mov	r3, r0
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d001      	beq.n	8008f6c <HAL_UART_Receive+0x12a>
      {
        return HAL_TIMEOUT;
 8008f68:	2303      	movs	r3, #3
 8008f6a:	e036      	b.n	8008fda <HAL_UART_Receive+0x198>
      }
      if (pdata8bits == NULL)
 8008f6c:	69fb      	ldr	r3, [r7, #28]
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d10c      	bne.n	8008f8c <HAL_UART_Receive+0x14a>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f78:	b29a      	uxth	r2, r3
 8008f7a:	8a7b      	ldrh	r3, [r7, #18]
 8008f7c:	4013      	ands	r3, r2
 8008f7e:	b29a      	uxth	r2, r3
 8008f80:	69bb      	ldr	r3, [r7, #24]
 8008f82:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8008f84:	69bb      	ldr	r3, [r7, #24]
 8008f86:	3302      	adds	r3, #2
 8008f88:	61bb      	str	r3, [r7, #24]
 8008f8a:	e00c      	b.n	8008fa6 <HAL_UART_Receive+0x164>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f92:	b2da      	uxtb	r2, r3
 8008f94:	8a7b      	ldrh	r3, [r7, #18]
 8008f96:	b2db      	uxtb	r3, r3
 8008f98:	4013      	ands	r3, r2
 8008f9a:	b2da      	uxtb	r2, r3
 8008f9c:	69fb      	ldr	r3, [r7, #28]
 8008f9e:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8008fa0:	69fb      	ldr	r3, [r7, #28]
 8008fa2:	3301      	adds	r3, #1
 8008fa4:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008fac:	b29b      	uxth	r3, r3
 8008fae:	3b01      	subs	r3, #1
 8008fb0:	b29a      	uxth	r2, r3
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008fbe:	b29b      	uxth	r3, r3
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d1c6      	bne.n	8008f52 <HAL_UART_Receive+0x110>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	2220      	movs	r2, #32
 8008fc8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    __HAL_UNLOCK(huart);
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	2200      	movs	r2, #0
 8008fd0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8008fd4:	2300      	movs	r3, #0
 8008fd6:	e000      	b.n	8008fda <HAL_UART_Receive+0x198>
  }
  else
  {
    return HAL_BUSY;
 8008fd8:	2302      	movs	r3, #2
  }
}
 8008fda:	4618      	mov	r0, r3
 8008fdc:	3720      	adds	r7, #32
 8008fde:	46bd      	mov	sp, r7
 8008fe0:	bd80      	pop	{r7, pc}
	...

08008fe4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008fe4:	b580      	push	{r7, lr}
 8008fe6:	b088      	sub	sp, #32
 8008fe8:	af00      	add	r7, sp, #0
 8008fea:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	69db      	ldr	r3, [r3, #28]
 8008ff2:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	689b      	ldr	r3, [r3, #8]
 8009002:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8009004:	69fa      	ldr	r2, [r7, #28]
 8009006:	f640 030f 	movw	r3, #2063	; 0x80f
 800900a:	4013      	ands	r3, r2
 800900c:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800900e:	693b      	ldr	r3, [r7, #16]
 8009010:	2b00      	cmp	r3, #0
 8009012:	d118      	bne.n	8009046 <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009014:	69fb      	ldr	r3, [r7, #28]
 8009016:	f003 0320 	and.w	r3, r3, #32
 800901a:	2b00      	cmp	r3, #0
 800901c:	d013      	beq.n	8009046 <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800901e:	69bb      	ldr	r3, [r7, #24]
 8009020:	f003 0320 	and.w	r3, r3, #32
 8009024:	2b00      	cmp	r3, #0
 8009026:	d104      	bne.n	8009032 <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009028:	697b      	ldr	r3, [r7, #20]
 800902a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800902e:	2b00      	cmp	r3, #0
 8009030:	d009      	beq.n	8009046 <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009036:	2b00      	cmp	r3, #0
 8009038:	f000 8145 	beq.w	80092c6 <HAL_UART_IRQHandler+0x2e2>
      {
        huart->RxISR(huart);
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009040:	6878      	ldr	r0, [r7, #4]
 8009042:	4798      	blx	r3
      }
      return;
 8009044:	e13f      	b.n	80092c6 <HAL_UART_IRQHandler+0x2e2>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8009046:	693b      	ldr	r3, [r7, #16]
 8009048:	2b00      	cmp	r3, #0
 800904a:	f000 80e8 	beq.w	800921e <HAL_UART_IRQHandler+0x23a>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800904e:	697a      	ldr	r2, [r7, #20]
 8009050:	4ba1      	ldr	r3, [pc, #644]	; (80092d8 <HAL_UART_IRQHandler+0x2f4>)
 8009052:	4013      	ands	r3, r2
 8009054:	2b00      	cmp	r3, #0
 8009056:	d105      	bne.n	8009064 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8009058:	69ba      	ldr	r2, [r7, #24]
 800905a:	4ba0      	ldr	r3, [pc, #640]	; (80092dc <HAL_UART_IRQHandler+0x2f8>)
 800905c:	4013      	ands	r3, r2
 800905e:	2b00      	cmp	r3, #0
 8009060:	f000 80dd 	beq.w	800921e <HAL_UART_IRQHandler+0x23a>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009064:	69fb      	ldr	r3, [r7, #28]
 8009066:	f003 0301 	and.w	r3, r3, #1
 800906a:	2b00      	cmp	r3, #0
 800906c:	d010      	beq.n	8009090 <HAL_UART_IRQHandler+0xac>
 800906e:	69bb      	ldr	r3, [r7, #24]
 8009070:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009074:	2b00      	cmp	r3, #0
 8009076:	d00b      	beq.n	8009090 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	2201      	movs	r2, #1
 800907e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009086:	f043 0201 	orr.w	r2, r3, #1
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009090:	69fb      	ldr	r3, [r7, #28]
 8009092:	f003 0302 	and.w	r3, r3, #2
 8009096:	2b00      	cmp	r3, #0
 8009098:	d010      	beq.n	80090bc <HAL_UART_IRQHandler+0xd8>
 800909a:	697b      	ldr	r3, [r7, #20]
 800909c:	f003 0301 	and.w	r3, r3, #1
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d00b      	beq.n	80090bc <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	2202      	movs	r2, #2
 80090aa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80090b2:	f043 0204 	orr.w	r2, r3, #4
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80090bc:	69fb      	ldr	r3, [r7, #28]
 80090be:	f003 0304 	and.w	r3, r3, #4
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d010      	beq.n	80090e8 <HAL_UART_IRQHandler+0x104>
 80090c6:	697b      	ldr	r3, [r7, #20]
 80090c8:	f003 0301 	and.w	r3, r3, #1
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d00b      	beq.n	80090e8 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	2204      	movs	r2, #4
 80090d6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80090de:	f043 0202 	orr.w	r2, r3, #2
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80090e8:	69fb      	ldr	r3, [r7, #28]
 80090ea:	f003 0308 	and.w	r3, r3, #8
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d015      	beq.n	800911e <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80090f2:	69bb      	ldr	r3, [r7, #24]
 80090f4:	f003 0320 	and.w	r3, r3, #32
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d104      	bne.n	8009106 <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80090fc:	697a      	ldr	r2, [r7, #20]
 80090fe:	4b76      	ldr	r3, [pc, #472]	; (80092d8 <HAL_UART_IRQHandler+0x2f4>)
 8009100:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009102:	2b00      	cmp	r3, #0
 8009104:	d00b      	beq.n	800911e <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	2208      	movs	r2, #8
 800910c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009114:	f043 0208 	orr.w	r2, r3, #8
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800911e:	69fb      	ldr	r3, [r7, #28]
 8009120:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009124:	2b00      	cmp	r3, #0
 8009126:	d011      	beq.n	800914c <HAL_UART_IRQHandler+0x168>
 8009128:	69bb      	ldr	r3, [r7, #24]
 800912a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800912e:	2b00      	cmp	r3, #0
 8009130:	d00c      	beq.n	800914c <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800913a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009142:	f043 0220 	orr.w	r2, r3, #32
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009152:	2b00      	cmp	r3, #0
 8009154:	f000 80b9 	beq.w	80092ca <HAL_UART_IRQHandler+0x2e6>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009158:	69fb      	ldr	r3, [r7, #28]
 800915a:	f003 0320 	and.w	r3, r3, #32
 800915e:	2b00      	cmp	r3, #0
 8009160:	d011      	beq.n	8009186 <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009162:	69bb      	ldr	r3, [r7, #24]
 8009164:	f003 0320 	and.w	r3, r3, #32
 8009168:	2b00      	cmp	r3, #0
 800916a:	d104      	bne.n	8009176 <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800916c:	697b      	ldr	r3, [r7, #20]
 800916e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009172:	2b00      	cmp	r3, #0
 8009174:	d007      	beq.n	8009186 <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800917a:	2b00      	cmp	r3, #0
 800917c:	d003      	beq.n	8009186 <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009182:	6878      	ldr	r0, [r7, #4]
 8009184:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800918c:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	689b      	ldr	r3, [r3, #8]
 8009194:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009198:	2b40      	cmp	r3, #64	; 0x40
 800919a:	d004      	beq.n	80091a6 <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d031      	beq.n	800920a <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80091a6:	6878      	ldr	r0, [r7, #4]
 80091a8:	f002 fb9a 	bl	800b8e0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	689b      	ldr	r3, [r3, #8]
 80091b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80091b6:	2b40      	cmp	r3, #64	; 0x40
 80091b8:	d123      	bne.n	8009202 <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	689a      	ldr	r2, [r3, #8]
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80091c8:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d013      	beq.n	80091fa <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80091d6:	4a42      	ldr	r2, [pc, #264]	; (80092e0 <HAL_UART_IRQHandler+0x2fc>)
 80091d8:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80091de:	4618      	mov	r0, r3
 80091e0:	f7f9 fbee 	bl	80029c0 <HAL_DMA_Abort_IT>
 80091e4:	4603      	mov	r3, r0
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d017      	beq.n	800921a <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80091ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80091f0:	687a      	ldr	r2, [r7, #4]
 80091f2:	6f92      	ldr	r2, [r2, #120]	; 0x78
 80091f4:	4610      	mov	r0, r2
 80091f6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80091f8:	e00f      	b.n	800921a <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80091fa:	6878      	ldr	r0, [r7, #4]
 80091fc:	f000 f87c 	bl	80092f8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009200:	e00b      	b.n	800921a <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009202:	6878      	ldr	r0, [r7, #4]
 8009204:	f000 f878 	bl	80092f8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009208:	e007      	b.n	800921a <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800920a:	6878      	ldr	r0, [r7, #4]
 800920c:	f000 f874 	bl	80092f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	2200      	movs	r2, #0
 8009214:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      }
    }
    return;
 8009218:	e057      	b.n	80092ca <HAL_UART_IRQHandler+0x2e6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800921a:	bf00      	nop
    return;
 800921c:	e055      	b.n	80092ca <HAL_UART_IRQHandler+0x2e6>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800921e:	69fb      	ldr	r3, [r7, #28]
 8009220:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009224:	2b00      	cmp	r3, #0
 8009226:	d00d      	beq.n	8009244 <HAL_UART_IRQHandler+0x260>
 8009228:	697b      	ldr	r3, [r7, #20]
 800922a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800922e:	2b00      	cmp	r3, #0
 8009230:	d008      	beq.n	8009244 <HAL_UART_IRQHandler+0x260>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800923a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800923c:	6878      	ldr	r0, [r7, #4]
 800923e:	f002 fba3 	bl	800b988 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009242:	e045      	b.n	80092d0 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8009244:	69fb      	ldr	r3, [r7, #28]
 8009246:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800924a:	2b00      	cmp	r3, #0
 800924c:	d012      	beq.n	8009274 <HAL_UART_IRQHandler+0x290>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800924e:	69bb      	ldr	r3, [r7, #24]
 8009250:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009254:	2b00      	cmp	r3, #0
 8009256:	d104      	bne.n	8009262 <HAL_UART_IRQHandler+0x27e>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8009258:	697b      	ldr	r3, [r7, #20]
 800925a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800925e:	2b00      	cmp	r3, #0
 8009260:	d008      	beq.n	8009274 <HAL_UART_IRQHandler+0x290>
  {
    if (huart->TxISR != NULL)
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009266:	2b00      	cmp	r3, #0
 8009268:	d031      	beq.n	80092ce <HAL_UART_IRQHandler+0x2ea>
    {
      huart->TxISR(huart);
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800926e:	6878      	ldr	r0, [r7, #4]
 8009270:	4798      	blx	r3
    }
    return;
 8009272:	e02c      	b.n	80092ce <HAL_UART_IRQHandler+0x2ea>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009274:	69fb      	ldr	r3, [r7, #28]
 8009276:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800927a:	2b00      	cmp	r3, #0
 800927c:	d008      	beq.n	8009290 <HAL_UART_IRQHandler+0x2ac>
 800927e:	69bb      	ldr	r3, [r7, #24]
 8009280:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009284:	2b00      	cmp	r3, #0
 8009286:	d003      	beq.n	8009290 <HAL_UART_IRQHandler+0x2ac>
  {
    UART_EndTransmit_IT(huart);
 8009288:	6878      	ldr	r0, [r7, #4]
 800928a:	f002 fb63 	bl	800b954 <UART_EndTransmit_IT>
    return;
 800928e:	e01f      	b.n	80092d0 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8009290:	69fb      	ldr	r3, [r7, #28]
 8009292:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009296:	2b00      	cmp	r3, #0
 8009298:	d008      	beq.n	80092ac <HAL_UART_IRQHandler+0x2c8>
 800929a:	69bb      	ldr	r3, [r7, #24]
 800929c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d003      	beq.n	80092ac <HAL_UART_IRQHandler+0x2c8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80092a4:	6878      	ldr	r0, [r7, #4]
 80092a6:	f002 fb83 	bl	800b9b0 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80092aa:	e011      	b.n	80092d0 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80092ac:	69fb      	ldr	r3, [r7, #28]
 80092ae:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d00c      	beq.n	80092d0 <HAL_UART_IRQHandler+0x2ec>
 80092b6:	69bb      	ldr	r3, [r7, #24]
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	da09      	bge.n	80092d0 <HAL_UART_IRQHandler+0x2ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80092bc:	6878      	ldr	r0, [r7, #4]
 80092be:	f002 fb6d 	bl	800b99c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80092c2:	bf00      	nop
 80092c4:	e004      	b.n	80092d0 <HAL_UART_IRQHandler+0x2ec>
      return;
 80092c6:	bf00      	nop
 80092c8:	e002      	b.n	80092d0 <HAL_UART_IRQHandler+0x2ec>
    return;
 80092ca:	bf00      	nop
 80092cc:	e000      	b.n	80092d0 <HAL_UART_IRQHandler+0x2ec>
    return;
 80092ce:	bf00      	nop
  }
}
 80092d0:	3720      	adds	r7, #32
 80092d2:	46bd      	mov	sp, r7
 80092d4:	bd80      	pop	{r7, pc}
 80092d6:	bf00      	nop
 80092d8:	10000001 	.word	0x10000001
 80092dc:	04000120 	.word	0x04000120
 80092e0:	0800b929 	.word	0x0800b929

080092e4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80092e4:	b480      	push	{r7}
 80092e6:	b083      	sub	sp, #12
 80092e8:	af00      	add	r7, sp, #0
 80092ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80092ec:	bf00      	nop
 80092ee:	370c      	adds	r7, #12
 80092f0:	46bd      	mov	sp, r7
 80092f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092f6:	4770      	bx	lr

080092f8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80092f8:	b480      	push	{r7}
 80092fa:	b083      	sub	sp, #12
 80092fc:	af00      	add	r7, sp, #0
 80092fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009300:	bf00      	nop
 8009302:	370c      	adds	r7, #12
 8009304:	46bd      	mov	sp, r7
 8009306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800930a:	4770      	bx	lr
 800930c:	0000      	movs	r0, r0
	...

08009310 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009310:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8009314:	b090      	sub	sp, #64	; 0x40
 8009316:	af00      	add	r7, sp, #0
 8009318:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800931a:	2300      	movs	r3, #0
 800931c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_StatusTypeDef ret               = HAL_OK;
 800931e:	2300      	movs	r3, #0
 8009320:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8009324:	2300      	movs	r3, #0
 8009326:	62fb      	str	r3, [r7, #44]	; 0x2c
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	689a      	ldr	r2, [r3, #8]
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	691b      	ldr	r3, [r3, #16]
 8009330:	431a      	orrs	r2, r3
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	695b      	ldr	r3, [r3, #20]
 8009336:	431a      	orrs	r2, r3
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	69db      	ldr	r3, [r3, #28]
 800933c:	4313      	orrs	r3, r2
 800933e:	63fb      	str	r3, [r7, #60]	; 0x3c
  tmpreg |= (uint32_t)huart->FifoMode;
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009344:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009346:	4313      	orrs	r3, r2
 8009348:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	681a      	ldr	r2, [r3, #0]
 8009350:	4bc1      	ldr	r3, [pc, #772]	; (8009658 <UART_SetConfig+0x348>)
 8009352:	4013      	ands	r3, r2
 8009354:	687a      	ldr	r2, [r7, #4]
 8009356:	6812      	ldr	r2, [r2, #0]
 8009358:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800935a:	430b      	orrs	r3, r1
 800935c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	685b      	ldr	r3, [r3, #4]
 8009364:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	68da      	ldr	r2, [r3, #12]
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	430a      	orrs	r2, r1
 8009372:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	699b      	ldr	r3, [r3, #24]
 8009378:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	4ab7      	ldr	r2, [pc, #732]	; (800965c <UART_SetConfig+0x34c>)
 8009380:	4293      	cmp	r3, r2
 8009382:	d004      	beq.n	800938e <UART_SetConfig+0x7e>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	6a1b      	ldr	r3, [r3, #32]
 8009388:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800938a:	4313      	orrs	r3, r2
 800938c:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	689a      	ldr	r2, [r3, #8]
 8009394:	4bb2      	ldr	r3, [pc, #712]	; (8009660 <UART_SetConfig+0x350>)
 8009396:	4013      	ands	r3, r2
 8009398:	687a      	ldr	r2, [r7, #4]
 800939a:	6812      	ldr	r2, [r2, #0]
 800939c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800939e:	430b      	orrs	r3, r1
 80093a0:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093a8:	f023 010f 	bic.w	r1, r3, #15
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	430a      	orrs	r2, r1
 80093b6:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	4aa9      	ldr	r2, [pc, #676]	; (8009664 <UART_SetConfig+0x354>)
 80093be:	4293      	cmp	r3, r2
 80093c0:	d177      	bne.n	80094b2 <UART_SetConfig+0x1a2>
 80093c2:	4ba9      	ldr	r3, [pc, #676]	; (8009668 <UART_SetConfig+0x358>)
 80093c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80093c6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80093ca:	2b28      	cmp	r3, #40	; 0x28
 80093cc:	d86c      	bhi.n	80094a8 <UART_SetConfig+0x198>
 80093ce:	a201      	add	r2, pc, #4	; (adr r2, 80093d4 <UART_SetConfig+0xc4>)
 80093d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093d4:	08009479 	.word	0x08009479
 80093d8:	080094a9 	.word	0x080094a9
 80093dc:	080094a9 	.word	0x080094a9
 80093e0:	080094a9 	.word	0x080094a9
 80093e4:	080094a9 	.word	0x080094a9
 80093e8:	080094a9 	.word	0x080094a9
 80093ec:	080094a9 	.word	0x080094a9
 80093f0:	080094a9 	.word	0x080094a9
 80093f4:	08009481 	.word	0x08009481
 80093f8:	080094a9 	.word	0x080094a9
 80093fc:	080094a9 	.word	0x080094a9
 8009400:	080094a9 	.word	0x080094a9
 8009404:	080094a9 	.word	0x080094a9
 8009408:	080094a9 	.word	0x080094a9
 800940c:	080094a9 	.word	0x080094a9
 8009410:	080094a9 	.word	0x080094a9
 8009414:	08009489 	.word	0x08009489
 8009418:	080094a9 	.word	0x080094a9
 800941c:	080094a9 	.word	0x080094a9
 8009420:	080094a9 	.word	0x080094a9
 8009424:	080094a9 	.word	0x080094a9
 8009428:	080094a9 	.word	0x080094a9
 800942c:	080094a9 	.word	0x080094a9
 8009430:	080094a9 	.word	0x080094a9
 8009434:	08009491 	.word	0x08009491
 8009438:	080094a9 	.word	0x080094a9
 800943c:	080094a9 	.word	0x080094a9
 8009440:	080094a9 	.word	0x080094a9
 8009444:	080094a9 	.word	0x080094a9
 8009448:	080094a9 	.word	0x080094a9
 800944c:	080094a9 	.word	0x080094a9
 8009450:	080094a9 	.word	0x080094a9
 8009454:	08009499 	.word	0x08009499
 8009458:	080094a9 	.word	0x080094a9
 800945c:	080094a9 	.word	0x080094a9
 8009460:	080094a9 	.word	0x080094a9
 8009464:	080094a9 	.word	0x080094a9
 8009468:	080094a9 	.word	0x080094a9
 800946c:	080094a9 	.word	0x080094a9
 8009470:	080094a9 	.word	0x080094a9
 8009474:	080094a1 	.word	0x080094a1
 8009478:	2301      	movs	r3, #1
 800947a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800947e:	e233      	b.n	80098e8 <UART_SetConfig+0x5d8>
 8009480:	2304      	movs	r3, #4
 8009482:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009486:	e22f      	b.n	80098e8 <UART_SetConfig+0x5d8>
 8009488:	2308      	movs	r3, #8
 800948a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800948e:	e22b      	b.n	80098e8 <UART_SetConfig+0x5d8>
 8009490:	2310      	movs	r3, #16
 8009492:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009496:	e227      	b.n	80098e8 <UART_SetConfig+0x5d8>
 8009498:	2320      	movs	r3, #32
 800949a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800949e:	e223      	b.n	80098e8 <UART_SetConfig+0x5d8>
 80094a0:	2340      	movs	r3, #64	; 0x40
 80094a2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80094a6:	e21f      	b.n	80098e8 <UART_SetConfig+0x5d8>
 80094a8:	2380      	movs	r3, #128	; 0x80
 80094aa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80094ae:	bf00      	nop
 80094b0:	e21a      	b.n	80098e8 <UART_SetConfig+0x5d8>
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	4a6d      	ldr	r2, [pc, #436]	; (800966c <UART_SetConfig+0x35c>)
 80094b8:	4293      	cmp	r3, r2
 80094ba:	d132      	bne.n	8009522 <UART_SetConfig+0x212>
 80094bc:	4b6a      	ldr	r3, [pc, #424]	; (8009668 <UART_SetConfig+0x358>)
 80094be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80094c0:	f003 0307 	and.w	r3, r3, #7
 80094c4:	2b05      	cmp	r3, #5
 80094c6:	d827      	bhi.n	8009518 <UART_SetConfig+0x208>
 80094c8:	a201      	add	r2, pc, #4	; (adr r2, 80094d0 <UART_SetConfig+0x1c0>)
 80094ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094ce:	bf00      	nop
 80094d0:	080094e9 	.word	0x080094e9
 80094d4:	080094f1 	.word	0x080094f1
 80094d8:	080094f9 	.word	0x080094f9
 80094dc:	08009501 	.word	0x08009501
 80094e0:	08009509 	.word	0x08009509
 80094e4:	08009511 	.word	0x08009511
 80094e8:	2300      	movs	r3, #0
 80094ea:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80094ee:	e1fb      	b.n	80098e8 <UART_SetConfig+0x5d8>
 80094f0:	2304      	movs	r3, #4
 80094f2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80094f6:	e1f7      	b.n	80098e8 <UART_SetConfig+0x5d8>
 80094f8:	2308      	movs	r3, #8
 80094fa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80094fe:	e1f3      	b.n	80098e8 <UART_SetConfig+0x5d8>
 8009500:	2310      	movs	r3, #16
 8009502:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009506:	e1ef      	b.n	80098e8 <UART_SetConfig+0x5d8>
 8009508:	2320      	movs	r3, #32
 800950a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800950e:	e1eb      	b.n	80098e8 <UART_SetConfig+0x5d8>
 8009510:	2340      	movs	r3, #64	; 0x40
 8009512:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009516:	e1e7      	b.n	80098e8 <UART_SetConfig+0x5d8>
 8009518:	2380      	movs	r3, #128	; 0x80
 800951a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800951e:	bf00      	nop
 8009520:	e1e2      	b.n	80098e8 <UART_SetConfig+0x5d8>
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	4a52      	ldr	r2, [pc, #328]	; (8009670 <UART_SetConfig+0x360>)
 8009528:	4293      	cmp	r3, r2
 800952a:	d132      	bne.n	8009592 <UART_SetConfig+0x282>
 800952c:	4b4e      	ldr	r3, [pc, #312]	; (8009668 <UART_SetConfig+0x358>)
 800952e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009530:	f003 0307 	and.w	r3, r3, #7
 8009534:	2b05      	cmp	r3, #5
 8009536:	d827      	bhi.n	8009588 <UART_SetConfig+0x278>
 8009538:	a201      	add	r2, pc, #4	; (adr r2, 8009540 <UART_SetConfig+0x230>)
 800953a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800953e:	bf00      	nop
 8009540:	08009559 	.word	0x08009559
 8009544:	08009561 	.word	0x08009561
 8009548:	08009569 	.word	0x08009569
 800954c:	08009571 	.word	0x08009571
 8009550:	08009579 	.word	0x08009579
 8009554:	08009581 	.word	0x08009581
 8009558:	2300      	movs	r3, #0
 800955a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800955e:	e1c3      	b.n	80098e8 <UART_SetConfig+0x5d8>
 8009560:	2304      	movs	r3, #4
 8009562:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009566:	e1bf      	b.n	80098e8 <UART_SetConfig+0x5d8>
 8009568:	2308      	movs	r3, #8
 800956a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800956e:	e1bb      	b.n	80098e8 <UART_SetConfig+0x5d8>
 8009570:	2310      	movs	r3, #16
 8009572:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009576:	e1b7      	b.n	80098e8 <UART_SetConfig+0x5d8>
 8009578:	2320      	movs	r3, #32
 800957a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800957e:	e1b3      	b.n	80098e8 <UART_SetConfig+0x5d8>
 8009580:	2340      	movs	r3, #64	; 0x40
 8009582:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009586:	e1af      	b.n	80098e8 <UART_SetConfig+0x5d8>
 8009588:	2380      	movs	r3, #128	; 0x80
 800958a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800958e:	bf00      	nop
 8009590:	e1aa      	b.n	80098e8 <UART_SetConfig+0x5d8>
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	4a37      	ldr	r2, [pc, #220]	; (8009674 <UART_SetConfig+0x364>)
 8009598:	4293      	cmp	r3, r2
 800959a:	d132      	bne.n	8009602 <UART_SetConfig+0x2f2>
 800959c:	4b32      	ldr	r3, [pc, #200]	; (8009668 <UART_SetConfig+0x358>)
 800959e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80095a0:	f003 0307 	and.w	r3, r3, #7
 80095a4:	2b05      	cmp	r3, #5
 80095a6:	d827      	bhi.n	80095f8 <UART_SetConfig+0x2e8>
 80095a8:	a201      	add	r2, pc, #4	; (adr r2, 80095b0 <UART_SetConfig+0x2a0>)
 80095aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095ae:	bf00      	nop
 80095b0:	080095c9 	.word	0x080095c9
 80095b4:	080095d1 	.word	0x080095d1
 80095b8:	080095d9 	.word	0x080095d9
 80095bc:	080095e1 	.word	0x080095e1
 80095c0:	080095e9 	.word	0x080095e9
 80095c4:	080095f1 	.word	0x080095f1
 80095c8:	2300      	movs	r3, #0
 80095ca:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80095ce:	e18b      	b.n	80098e8 <UART_SetConfig+0x5d8>
 80095d0:	2304      	movs	r3, #4
 80095d2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80095d6:	e187      	b.n	80098e8 <UART_SetConfig+0x5d8>
 80095d8:	2308      	movs	r3, #8
 80095da:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80095de:	e183      	b.n	80098e8 <UART_SetConfig+0x5d8>
 80095e0:	2310      	movs	r3, #16
 80095e2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80095e6:	e17f      	b.n	80098e8 <UART_SetConfig+0x5d8>
 80095e8:	2320      	movs	r3, #32
 80095ea:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80095ee:	e17b      	b.n	80098e8 <UART_SetConfig+0x5d8>
 80095f0:	2340      	movs	r3, #64	; 0x40
 80095f2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80095f6:	e177      	b.n	80098e8 <UART_SetConfig+0x5d8>
 80095f8:	2380      	movs	r3, #128	; 0x80
 80095fa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80095fe:	bf00      	nop
 8009600:	e172      	b.n	80098e8 <UART_SetConfig+0x5d8>
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	4a1c      	ldr	r2, [pc, #112]	; (8009678 <UART_SetConfig+0x368>)
 8009608:	4293      	cmp	r3, r2
 800960a:	d144      	bne.n	8009696 <UART_SetConfig+0x386>
 800960c:	4b16      	ldr	r3, [pc, #88]	; (8009668 <UART_SetConfig+0x358>)
 800960e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009610:	f003 0307 	and.w	r3, r3, #7
 8009614:	2b05      	cmp	r3, #5
 8009616:	d839      	bhi.n	800968c <UART_SetConfig+0x37c>
 8009618:	a201      	add	r2, pc, #4	; (adr r2, 8009620 <UART_SetConfig+0x310>)
 800961a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800961e:	bf00      	nop
 8009620:	08009639 	.word	0x08009639
 8009624:	08009641 	.word	0x08009641
 8009628:	08009649 	.word	0x08009649
 800962c:	08009651 	.word	0x08009651
 8009630:	0800967d 	.word	0x0800967d
 8009634:	08009685 	.word	0x08009685
 8009638:	2300      	movs	r3, #0
 800963a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800963e:	e153      	b.n	80098e8 <UART_SetConfig+0x5d8>
 8009640:	2304      	movs	r3, #4
 8009642:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009646:	e14f      	b.n	80098e8 <UART_SetConfig+0x5d8>
 8009648:	2308      	movs	r3, #8
 800964a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800964e:	e14b      	b.n	80098e8 <UART_SetConfig+0x5d8>
 8009650:	2310      	movs	r3, #16
 8009652:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009656:	e147      	b.n	80098e8 <UART_SetConfig+0x5d8>
 8009658:	cfff69f3 	.word	0xcfff69f3
 800965c:	58000c00 	.word	0x58000c00
 8009660:	11fff4ff 	.word	0x11fff4ff
 8009664:	40011000 	.word	0x40011000
 8009668:	58024400 	.word	0x58024400
 800966c:	40004400 	.word	0x40004400
 8009670:	40004800 	.word	0x40004800
 8009674:	40004c00 	.word	0x40004c00
 8009678:	40005000 	.word	0x40005000
 800967c:	2320      	movs	r3, #32
 800967e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009682:	e131      	b.n	80098e8 <UART_SetConfig+0x5d8>
 8009684:	2340      	movs	r3, #64	; 0x40
 8009686:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800968a:	e12d      	b.n	80098e8 <UART_SetConfig+0x5d8>
 800968c:	2380      	movs	r3, #128	; 0x80
 800968e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009692:	bf00      	nop
 8009694:	e128      	b.n	80098e8 <UART_SetConfig+0x5d8>
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	4ac3      	ldr	r2, [pc, #780]	; (80099a8 <UART_SetConfig+0x698>)
 800969c:	4293      	cmp	r3, r2
 800969e:	d178      	bne.n	8009792 <UART_SetConfig+0x482>
 80096a0:	4bc2      	ldr	r3, [pc, #776]	; (80099ac <UART_SetConfig+0x69c>)
 80096a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80096a4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80096a8:	2b28      	cmp	r3, #40	; 0x28
 80096aa:	d86d      	bhi.n	8009788 <UART_SetConfig+0x478>
 80096ac:	a201      	add	r2, pc, #4	; (adr r2, 80096b4 <UART_SetConfig+0x3a4>)
 80096ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096b2:	bf00      	nop
 80096b4:	08009759 	.word	0x08009759
 80096b8:	08009789 	.word	0x08009789
 80096bc:	08009789 	.word	0x08009789
 80096c0:	08009789 	.word	0x08009789
 80096c4:	08009789 	.word	0x08009789
 80096c8:	08009789 	.word	0x08009789
 80096cc:	08009789 	.word	0x08009789
 80096d0:	08009789 	.word	0x08009789
 80096d4:	08009761 	.word	0x08009761
 80096d8:	08009789 	.word	0x08009789
 80096dc:	08009789 	.word	0x08009789
 80096e0:	08009789 	.word	0x08009789
 80096e4:	08009789 	.word	0x08009789
 80096e8:	08009789 	.word	0x08009789
 80096ec:	08009789 	.word	0x08009789
 80096f0:	08009789 	.word	0x08009789
 80096f4:	08009769 	.word	0x08009769
 80096f8:	08009789 	.word	0x08009789
 80096fc:	08009789 	.word	0x08009789
 8009700:	08009789 	.word	0x08009789
 8009704:	08009789 	.word	0x08009789
 8009708:	08009789 	.word	0x08009789
 800970c:	08009789 	.word	0x08009789
 8009710:	08009789 	.word	0x08009789
 8009714:	08009771 	.word	0x08009771
 8009718:	08009789 	.word	0x08009789
 800971c:	08009789 	.word	0x08009789
 8009720:	08009789 	.word	0x08009789
 8009724:	08009789 	.word	0x08009789
 8009728:	08009789 	.word	0x08009789
 800972c:	08009789 	.word	0x08009789
 8009730:	08009789 	.word	0x08009789
 8009734:	08009779 	.word	0x08009779
 8009738:	08009789 	.word	0x08009789
 800973c:	08009789 	.word	0x08009789
 8009740:	08009789 	.word	0x08009789
 8009744:	08009789 	.word	0x08009789
 8009748:	08009789 	.word	0x08009789
 800974c:	08009789 	.word	0x08009789
 8009750:	08009789 	.word	0x08009789
 8009754:	08009781 	.word	0x08009781
 8009758:	2301      	movs	r3, #1
 800975a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800975e:	e0c3      	b.n	80098e8 <UART_SetConfig+0x5d8>
 8009760:	2304      	movs	r3, #4
 8009762:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009766:	e0bf      	b.n	80098e8 <UART_SetConfig+0x5d8>
 8009768:	2308      	movs	r3, #8
 800976a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800976e:	e0bb      	b.n	80098e8 <UART_SetConfig+0x5d8>
 8009770:	2310      	movs	r3, #16
 8009772:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009776:	e0b7      	b.n	80098e8 <UART_SetConfig+0x5d8>
 8009778:	2320      	movs	r3, #32
 800977a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800977e:	e0b3      	b.n	80098e8 <UART_SetConfig+0x5d8>
 8009780:	2340      	movs	r3, #64	; 0x40
 8009782:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009786:	e0af      	b.n	80098e8 <UART_SetConfig+0x5d8>
 8009788:	2380      	movs	r3, #128	; 0x80
 800978a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800978e:	bf00      	nop
 8009790:	e0aa      	b.n	80098e8 <UART_SetConfig+0x5d8>
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	4a86      	ldr	r2, [pc, #536]	; (80099b0 <UART_SetConfig+0x6a0>)
 8009798:	4293      	cmp	r3, r2
 800979a:	d132      	bne.n	8009802 <UART_SetConfig+0x4f2>
 800979c:	4b83      	ldr	r3, [pc, #524]	; (80099ac <UART_SetConfig+0x69c>)
 800979e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80097a0:	f003 0307 	and.w	r3, r3, #7
 80097a4:	2b05      	cmp	r3, #5
 80097a6:	d827      	bhi.n	80097f8 <UART_SetConfig+0x4e8>
 80097a8:	a201      	add	r2, pc, #4	; (adr r2, 80097b0 <UART_SetConfig+0x4a0>)
 80097aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097ae:	bf00      	nop
 80097b0:	080097c9 	.word	0x080097c9
 80097b4:	080097d1 	.word	0x080097d1
 80097b8:	080097d9 	.word	0x080097d9
 80097bc:	080097e1 	.word	0x080097e1
 80097c0:	080097e9 	.word	0x080097e9
 80097c4:	080097f1 	.word	0x080097f1
 80097c8:	2300      	movs	r3, #0
 80097ca:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80097ce:	e08b      	b.n	80098e8 <UART_SetConfig+0x5d8>
 80097d0:	2304      	movs	r3, #4
 80097d2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80097d6:	e087      	b.n	80098e8 <UART_SetConfig+0x5d8>
 80097d8:	2308      	movs	r3, #8
 80097da:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80097de:	e083      	b.n	80098e8 <UART_SetConfig+0x5d8>
 80097e0:	2310      	movs	r3, #16
 80097e2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80097e6:	e07f      	b.n	80098e8 <UART_SetConfig+0x5d8>
 80097e8:	2320      	movs	r3, #32
 80097ea:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80097ee:	e07b      	b.n	80098e8 <UART_SetConfig+0x5d8>
 80097f0:	2340      	movs	r3, #64	; 0x40
 80097f2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80097f6:	e077      	b.n	80098e8 <UART_SetConfig+0x5d8>
 80097f8:	2380      	movs	r3, #128	; 0x80
 80097fa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80097fe:	bf00      	nop
 8009800:	e072      	b.n	80098e8 <UART_SetConfig+0x5d8>
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	4a6b      	ldr	r2, [pc, #428]	; (80099b4 <UART_SetConfig+0x6a4>)
 8009808:	4293      	cmp	r3, r2
 800980a:	d132      	bne.n	8009872 <UART_SetConfig+0x562>
 800980c:	4b67      	ldr	r3, [pc, #412]	; (80099ac <UART_SetConfig+0x69c>)
 800980e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009810:	f003 0307 	and.w	r3, r3, #7
 8009814:	2b05      	cmp	r3, #5
 8009816:	d827      	bhi.n	8009868 <UART_SetConfig+0x558>
 8009818:	a201      	add	r2, pc, #4	; (adr r2, 8009820 <UART_SetConfig+0x510>)
 800981a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800981e:	bf00      	nop
 8009820:	08009839 	.word	0x08009839
 8009824:	08009841 	.word	0x08009841
 8009828:	08009849 	.word	0x08009849
 800982c:	08009851 	.word	0x08009851
 8009830:	08009859 	.word	0x08009859
 8009834:	08009861 	.word	0x08009861
 8009838:	2300      	movs	r3, #0
 800983a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800983e:	e053      	b.n	80098e8 <UART_SetConfig+0x5d8>
 8009840:	2304      	movs	r3, #4
 8009842:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009846:	e04f      	b.n	80098e8 <UART_SetConfig+0x5d8>
 8009848:	2308      	movs	r3, #8
 800984a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800984e:	e04b      	b.n	80098e8 <UART_SetConfig+0x5d8>
 8009850:	2310      	movs	r3, #16
 8009852:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009856:	e047      	b.n	80098e8 <UART_SetConfig+0x5d8>
 8009858:	2320      	movs	r3, #32
 800985a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800985e:	e043      	b.n	80098e8 <UART_SetConfig+0x5d8>
 8009860:	2340      	movs	r3, #64	; 0x40
 8009862:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009866:	e03f      	b.n	80098e8 <UART_SetConfig+0x5d8>
 8009868:	2380      	movs	r3, #128	; 0x80
 800986a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800986e:	bf00      	nop
 8009870:	e03a      	b.n	80098e8 <UART_SetConfig+0x5d8>
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	4a50      	ldr	r2, [pc, #320]	; (80099b8 <UART_SetConfig+0x6a8>)
 8009878:	4293      	cmp	r3, r2
 800987a:	d132      	bne.n	80098e2 <UART_SetConfig+0x5d2>
 800987c:	4b4b      	ldr	r3, [pc, #300]	; (80099ac <UART_SetConfig+0x69c>)
 800987e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009880:	f003 0307 	and.w	r3, r3, #7
 8009884:	2b05      	cmp	r3, #5
 8009886:	d827      	bhi.n	80098d8 <UART_SetConfig+0x5c8>
 8009888:	a201      	add	r2, pc, #4	; (adr r2, 8009890 <UART_SetConfig+0x580>)
 800988a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800988e:	bf00      	nop
 8009890:	080098a9 	.word	0x080098a9
 8009894:	080098b1 	.word	0x080098b1
 8009898:	080098b9 	.word	0x080098b9
 800989c:	080098c1 	.word	0x080098c1
 80098a0:	080098c9 	.word	0x080098c9
 80098a4:	080098d1 	.word	0x080098d1
 80098a8:	2302      	movs	r3, #2
 80098aa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80098ae:	e01b      	b.n	80098e8 <UART_SetConfig+0x5d8>
 80098b0:	2304      	movs	r3, #4
 80098b2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80098b6:	e017      	b.n	80098e8 <UART_SetConfig+0x5d8>
 80098b8:	2308      	movs	r3, #8
 80098ba:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80098be:	e013      	b.n	80098e8 <UART_SetConfig+0x5d8>
 80098c0:	2310      	movs	r3, #16
 80098c2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80098c6:	e00f      	b.n	80098e8 <UART_SetConfig+0x5d8>
 80098c8:	2320      	movs	r3, #32
 80098ca:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80098ce:	e00b      	b.n	80098e8 <UART_SetConfig+0x5d8>
 80098d0:	2340      	movs	r3, #64	; 0x40
 80098d2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80098d6:	e007      	b.n	80098e8 <UART_SetConfig+0x5d8>
 80098d8:	2380      	movs	r3, #128	; 0x80
 80098da:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80098de:	bf00      	nop
 80098e0:	e002      	b.n	80098e8 <UART_SetConfig+0x5d8>
 80098e2:	2380      	movs	r3, #128	; 0x80
 80098e4:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	4a32      	ldr	r2, [pc, #200]	; (80099b8 <UART_SetConfig+0x6a8>)
 80098ee:	4293      	cmp	r3, r2
 80098f0:	f040 86f7 	bne.w	800a6e2 <UART_SetConfig+0x13d2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80098f4:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80098f8:	2b08      	cmp	r3, #8
 80098fa:	f000 80c0 	beq.w	8009a7e <UART_SetConfig+0x76e>
 80098fe:	2b08      	cmp	r3, #8
 8009900:	dc04      	bgt.n	800990c <UART_SetConfig+0x5fc>
 8009902:	2b02      	cmp	r3, #2
 8009904:	d00c      	beq.n	8009920 <UART_SetConfig+0x610>
 8009906:	2b04      	cmp	r3, #4
 8009908:	d065      	beq.n	80099d6 <UART_SetConfig+0x6c6>
 800990a:	e27a      	b.n	8009e02 <UART_SetConfig+0xaf2>
 800990c:	2b20      	cmp	r3, #32
 800990e:	f000 81b0 	beq.w	8009c72 <UART_SetConfig+0x962>
 8009912:	2b40      	cmp	r3, #64	; 0x40
 8009914:	f000 821e 	beq.w	8009d54 <UART_SetConfig+0xa44>
 8009918:	2b10      	cmp	r3, #16
 800991a:	f000 8104 	beq.w	8009b26 <UART_SetConfig+0x816>
 800991e:	e270      	b.n	8009e02 <UART_SetConfig+0xaf2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        lpuart_ker_ck_pres = (HAL_RCCEx_GetD3PCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8009920:	f7fe fdd8 	bl	80084d4 <HAL_RCCEx_GetD3PCLK1Freq>
 8009924:	4602      	mov	r2, r0
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800992a:	2b00      	cmp	r3, #0
 800992c:	d04e      	beq.n	80099cc <UART_SetConfig+0x6bc>
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009932:	2b01      	cmp	r3, #1
 8009934:	d048      	beq.n	80099c8 <UART_SetConfig+0x6b8>
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800993a:	2b02      	cmp	r3, #2
 800993c:	d042      	beq.n	80099c4 <UART_SetConfig+0x6b4>
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009942:	2b03      	cmp	r3, #3
 8009944:	d03c      	beq.n	80099c0 <UART_SetConfig+0x6b0>
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800994a:	2b04      	cmp	r3, #4
 800994c:	d036      	beq.n	80099bc <UART_SetConfig+0x6ac>
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009952:	2b05      	cmp	r3, #5
 8009954:	d026      	beq.n	80099a4 <UART_SetConfig+0x694>
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800995a:	2b06      	cmp	r3, #6
 800995c:	d020      	beq.n	80099a0 <UART_SetConfig+0x690>
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009962:	2b07      	cmp	r3, #7
 8009964:	d01a      	beq.n	800999c <UART_SetConfig+0x68c>
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800996a:	2b08      	cmp	r3, #8
 800996c:	d014      	beq.n	8009998 <UART_SetConfig+0x688>
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009972:	2b09      	cmp	r3, #9
 8009974:	d00e      	beq.n	8009994 <UART_SetConfig+0x684>
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800997a:	2b0a      	cmp	r3, #10
 800997c:	d008      	beq.n	8009990 <UART_SetConfig+0x680>
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009982:	2b0b      	cmp	r3, #11
 8009984:	d102      	bne.n	800998c <UART_SetConfig+0x67c>
 8009986:	f44f 7380 	mov.w	r3, #256	; 0x100
 800998a:	e020      	b.n	80099ce <UART_SetConfig+0x6be>
 800998c:	2301      	movs	r3, #1
 800998e:	e01e      	b.n	80099ce <UART_SetConfig+0x6be>
 8009990:	2380      	movs	r3, #128	; 0x80
 8009992:	e01c      	b.n	80099ce <UART_SetConfig+0x6be>
 8009994:	2340      	movs	r3, #64	; 0x40
 8009996:	e01a      	b.n	80099ce <UART_SetConfig+0x6be>
 8009998:	2320      	movs	r3, #32
 800999a:	e018      	b.n	80099ce <UART_SetConfig+0x6be>
 800999c:	2310      	movs	r3, #16
 800999e:	e016      	b.n	80099ce <UART_SetConfig+0x6be>
 80099a0:	230c      	movs	r3, #12
 80099a2:	e014      	b.n	80099ce <UART_SetConfig+0x6be>
 80099a4:	230a      	movs	r3, #10
 80099a6:	e012      	b.n	80099ce <UART_SetConfig+0x6be>
 80099a8:	40011400 	.word	0x40011400
 80099ac:	58024400 	.word	0x58024400
 80099b0:	40007800 	.word	0x40007800
 80099b4:	40007c00 	.word	0x40007c00
 80099b8:	58000c00 	.word	0x58000c00
 80099bc:	2308      	movs	r3, #8
 80099be:	e006      	b.n	80099ce <UART_SetConfig+0x6be>
 80099c0:	2306      	movs	r3, #6
 80099c2:	e004      	b.n	80099ce <UART_SetConfig+0x6be>
 80099c4:	2304      	movs	r3, #4
 80099c6:	e002      	b.n	80099ce <UART_SetConfig+0x6be>
 80099c8:	2302      	movs	r3, #2
 80099ca:	e000      	b.n	80099ce <UART_SetConfig+0x6be>
 80099cc:	2301      	movs	r3, #1
 80099ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80099d2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80099d4:	e219      	b.n	8009e0a <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80099d6:	f107 0318 	add.w	r3, r7, #24
 80099da:	4618      	mov	r0, r3
 80099dc:	f7fe fd90 	bl	8008500 <HAL_RCCEx_GetPLL2ClockFreq>
        lpuart_ker_ck_pres = (pll2_clocks.PLL2_Q_Frequency / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80099e0:	69fa      	ldr	r2, [r7, #28]
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	d044      	beq.n	8009a74 <UART_SetConfig+0x764>
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099ee:	2b01      	cmp	r3, #1
 80099f0:	d03e      	beq.n	8009a70 <UART_SetConfig+0x760>
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099f6:	2b02      	cmp	r3, #2
 80099f8:	d038      	beq.n	8009a6c <UART_SetConfig+0x75c>
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099fe:	2b03      	cmp	r3, #3
 8009a00:	d032      	beq.n	8009a68 <UART_SetConfig+0x758>
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a06:	2b04      	cmp	r3, #4
 8009a08:	d02c      	beq.n	8009a64 <UART_SetConfig+0x754>
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a0e:	2b05      	cmp	r3, #5
 8009a10:	d026      	beq.n	8009a60 <UART_SetConfig+0x750>
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a16:	2b06      	cmp	r3, #6
 8009a18:	d020      	beq.n	8009a5c <UART_SetConfig+0x74c>
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a1e:	2b07      	cmp	r3, #7
 8009a20:	d01a      	beq.n	8009a58 <UART_SetConfig+0x748>
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a26:	2b08      	cmp	r3, #8
 8009a28:	d014      	beq.n	8009a54 <UART_SetConfig+0x744>
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a2e:	2b09      	cmp	r3, #9
 8009a30:	d00e      	beq.n	8009a50 <UART_SetConfig+0x740>
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a36:	2b0a      	cmp	r3, #10
 8009a38:	d008      	beq.n	8009a4c <UART_SetConfig+0x73c>
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a3e:	2b0b      	cmp	r3, #11
 8009a40:	d102      	bne.n	8009a48 <UART_SetConfig+0x738>
 8009a42:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009a46:	e016      	b.n	8009a76 <UART_SetConfig+0x766>
 8009a48:	2301      	movs	r3, #1
 8009a4a:	e014      	b.n	8009a76 <UART_SetConfig+0x766>
 8009a4c:	2380      	movs	r3, #128	; 0x80
 8009a4e:	e012      	b.n	8009a76 <UART_SetConfig+0x766>
 8009a50:	2340      	movs	r3, #64	; 0x40
 8009a52:	e010      	b.n	8009a76 <UART_SetConfig+0x766>
 8009a54:	2320      	movs	r3, #32
 8009a56:	e00e      	b.n	8009a76 <UART_SetConfig+0x766>
 8009a58:	2310      	movs	r3, #16
 8009a5a:	e00c      	b.n	8009a76 <UART_SetConfig+0x766>
 8009a5c:	230c      	movs	r3, #12
 8009a5e:	e00a      	b.n	8009a76 <UART_SetConfig+0x766>
 8009a60:	230a      	movs	r3, #10
 8009a62:	e008      	b.n	8009a76 <UART_SetConfig+0x766>
 8009a64:	2308      	movs	r3, #8
 8009a66:	e006      	b.n	8009a76 <UART_SetConfig+0x766>
 8009a68:	2306      	movs	r3, #6
 8009a6a:	e004      	b.n	8009a76 <UART_SetConfig+0x766>
 8009a6c:	2304      	movs	r3, #4
 8009a6e:	e002      	b.n	8009a76 <UART_SetConfig+0x766>
 8009a70:	2302      	movs	r3, #2
 8009a72:	e000      	b.n	8009a76 <UART_SetConfig+0x766>
 8009a74:	2301      	movs	r3, #1
 8009a76:	fbb2 f3f3 	udiv	r3, r2, r3
 8009a7a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009a7c:	e1c5      	b.n	8009e0a <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009a7e:	f107 030c 	add.w	r3, r7, #12
 8009a82:	4618      	mov	r0, r3
 8009a84:	f7fe fe88 	bl	8008798 <HAL_RCCEx_GetPLL3ClockFreq>
        lpuart_ker_ck_pres = (pll3_clocks.PLL3_Q_Frequency / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8009a88:	693a      	ldr	r2, [r7, #16]
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d044      	beq.n	8009b1c <UART_SetConfig+0x80c>
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a96:	2b01      	cmp	r3, #1
 8009a98:	d03e      	beq.n	8009b18 <UART_SetConfig+0x808>
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a9e:	2b02      	cmp	r3, #2
 8009aa0:	d038      	beq.n	8009b14 <UART_SetConfig+0x804>
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009aa6:	2b03      	cmp	r3, #3
 8009aa8:	d032      	beq.n	8009b10 <UART_SetConfig+0x800>
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009aae:	2b04      	cmp	r3, #4
 8009ab0:	d02c      	beq.n	8009b0c <UART_SetConfig+0x7fc>
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ab6:	2b05      	cmp	r3, #5
 8009ab8:	d026      	beq.n	8009b08 <UART_SetConfig+0x7f8>
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009abe:	2b06      	cmp	r3, #6
 8009ac0:	d020      	beq.n	8009b04 <UART_SetConfig+0x7f4>
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ac6:	2b07      	cmp	r3, #7
 8009ac8:	d01a      	beq.n	8009b00 <UART_SetConfig+0x7f0>
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ace:	2b08      	cmp	r3, #8
 8009ad0:	d014      	beq.n	8009afc <UART_SetConfig+0x7ec>
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ad6:	2b09      	cmp	r3, #9
 8009ad8:	d00e      	beq.n	8009af8 <UART_SetConfig+0x7e8>
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ade:	2b0a      	cmp	r3, #10
 8009ae0:	d008      	beq.n	8009af4 <UART_SetConfig+0x7e4>
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ae6:	2b0b      	cmp	r3, #11
 8009ae8:	d102      	bne.n	8009af0 <UART_SetConfig+0x7e0>
 8009aea:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009aee:	e016      	b.n	8009b1e <UART_SetConfig+0x80e>
 8009af0:	2301      	movs	r3, #1
 8009af2:	e014      	b.n	8009b1e <UART_SetConfig+0x80e>
 8009af4:	2380      	movs	r3, #128	; 0x80
 8009af6:	e012      	b.n	8009b1e <UART_SetConfig+0x80e>
 8009af8:	2340      	movs	r3, #64	; 0x40
 8009afa:	e010      	b.n	8009b1e <UART_SetConfig+0x80e>
 8009afc:	2320      	movs	r3, #32
 8009afe:	e00e      	b.n	8009b1e <UART_SetConfig+0x80e>
 8009b00:	2310      	movs	r3, #16
 8009b02:	e00c      	b.n	8009b1e <UART_SetConfig+0x80e>
 8009b04:	230c      	movs	r3, #12
 8009b06:	e00a      	b.n	8009b1e <UART_SetConfig+0x80e>
 8009b08:	230a      	movs	r3, #10
 8009b0a:	e008      	b.n	8009b1e <UART_SetConfig+0x80e>
 8009b0c:	2308      	movs	r3, #8
 8009b0e:	e006      	b.n	8009b1e <UART_SetConfig+0x80e>
 8009b10:	2306      	movs	r3, #6
 8009b12:	e004      	b.n	8009b1e <UART_SetConfig+0x80e>
 8009b14:	2304      	movs	r3, #4
 8009b16:	e002      	b.n	8009b1e <UART_SetConfig+0x80e>
 8009b18:	2302      	movs	r3, #2
 8009b1a:	e000      	b.n	8009b1e <UART_SetConfig+0x80e>
 8009b1c:	2301      	movs	r3, #1
 8009b1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009b22:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009b24:	e171      	b.n	8009e0a <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009b26:	4b7a      	ldr	r3, [pc, #488]	; (8009d10 <UART_SetConfig+0xa00>)
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	f003 0320 	and.w	r3, r3, #32
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	d054      	beq.n	8009bdc <UART_SetConfig+0x8cc>
        {
          lpuart_ker_ck_pres = ((uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)) / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8009b32:	4b77      	ldr	r3, [pc, #476]	; (8009d10 <UART_SetConfig+0xa00>)
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	08db      	lsrs	r3, r3, #3
 8009b38:	f003 0303 	and.w	r3, r3, #3
 8009b3c:	4a75      	ldr	r2, [pc, #468]	; (8009d14 <UART_SetConfig+0xa04>)
 8009b3e:	40da      	lsrs	r2, r3
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d044      	beq.n	8009bd2 <UART_SetConfig+0x8c2>
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b4c:	2b01      	cmp	r3, #1
 8009b4e:	d03e      	beq.n	8009bce <UART_SetConfig+0x8be>
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b54:	2b02      	cmp	r3, #2
 8009b56:	d038      	beq.n	8009bca <UART_SetConfig+0x8ba>
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b5c:	2b03      	cmp	r3, #3
 8009b5e:	d032      	beq.n	8009bc6 <UART_SetConfig+0x8b6>
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b64:	2b04      	cmp	r3, #4
 8009b66:	d02c      	beq.n	8009bc2 <UART_SetConfig+0x8b2>
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b6c:	2b05      	cmp	r3, #5
 8009b6e:	d026      	beq.n	8009bbe <UART_SetConfig+0x8ae>
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b74:	2b06      	cmp	r3, #6
 8009b76:	d020      	beq.n	8009bba <UART_SetConfig+0x8aa>
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b7c:	2b07      	cmp	r3, #7
 8009b7e:	d01a      	beq.n	8009bb6 <UART_SetConfig+0x8a6>
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b84:	2b08      	cmp	r3, #8
 8009b86:	d014      	beq.n	8009bb2 <UART_SetConfig+0x8a2>
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b8c:	2b09      	cmp	r3, #9
 8009b8e:	d00e      	beq.n	8009bae <UART_SetConfig+0x89e>
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b94:	2b0a      	cmp	r3, #10
 8009b96:	d008      	beq.n	8009baa <UART_SetConfig+0x89a>
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b9c:	2b0b      	cmp	r3, #11
 8009b9e:	d102      	bne.n	8009ba6 <UART_SetConfig+0x896>
 8009ba0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009ba4:	e016      	b.n	8009bd4 <UART_SetConfig+0x8c4>
 8009ba6:	2301      	movs	r3, #1
 8009ba8:	e014      	b.n	8009bd4 <UART_SetConfig+0x8c4>
 8009baa:	2380      	movs	r3, #128	; 0x80
 8009bac:	e012      	b.n	8009bd4 <UART_SetConfig+0x8c4>
 8009bae:	2340      	movs	r3, #64	; 0x40
 8009bb0:	e010      	b.n	8009bd4 <UART_SetConfig+0x8c4>
 8009bb2:	2320      	movs	r3, #32
 8009bb4:	e00e      	b.n	8009bd4 <UART_SetConfig+0x8c4>
 8009bb6:	2310      	movs	r3, #16
 8009bb8:	e00c      	b.n	8009bd4 <UART_SetConfig+0x8c4>
 8009bba:	230c      	movs	r3, #12
 8009bbc:	e00a      	b.n	8009bd4 <UART_SetConfig+0x8c4>
 8009bbe:	230a      	movs	r3, #10
 8009bc0:	e008      	b.n	8009bd4 <UART_SetConfig+0x8c4>
 8009bc2:	2308      	movs	r3, #8
 8009bc4:	e006      	b.n	8009bd4 <UART_SetConfig+0x8c4>
 8009bc6:	2306      	movs	r3, #6
 8009bc8:	e004      	b.n	8009bd4 <UART_SetConfig+0x8c4>
 8009bca:	2304      	movs	r3, #4
 8009bcc:	e002      	b.n	8009bd4 <UART_SetConfig+0x8c4>
 8009bce:	2302      	movs	r3, #2
 8009bd0:	e000      	b.n	8009bd4 <UART_SetConfig+0x8c4>
 8009bd2:	2301      	movs	r3, #1
 8009bd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8009bd8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          lpuart_ker_ck_pres = ((uint32_t) HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
        }
        break;
 8009bda:	e116      	b.n	8009e0a <UART_SetConfig+0xafa>
          lpuart_ker_ck_pres = ((uint32_t) HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	d043      	beq.n	8009c6c <UART_SetConfig+0x95c>
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009be8:	2b01      	cmp	r3, #1
 8009bea:	d03d      	beq.n	8009c68 <UART_SetConfig+0x958>
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bf0:	2b02      	cmp	r3, #2
 8009bf2:	d037      	beq.n	8009c64 <UART_SetConfig+0x954>
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bf8:	2b03      	cmp	r3, #3
 8009bfa:	d031      	beq.n	8009c60 <UART_SetConfig+0x950>
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c00:	2b04      	cmp	r3, #4
 8009c02:	d02b      	beq.n	8009c5c <UART_SetConfig+0x94c>
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c08:	2b05      	cmp	r3, #5
 8009c0a:	d025      	beq.n	8009c58 <UART_SetConfig+0x948>
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c10:	2b06      	cmp	r3, #6
 8009c12:	d01f      	beq.n	8009c54 <UART_SetConfig+0x944>
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c18:	2b07      	cmp	r3, #7
 8009c1a:	d019      	beq.n	8009c50 <UART_SetConfig+0x940>
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c20:	2b08      	cmp	r3, #8
 8009c22:	d013      	beq.n	8009c4c <UART_SetConfig+0x93c>
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c28:	2b09      	cmp	r3, #9
 8009c2a:	d00d      	beq.n	8009c48 <UART_SetConfig+0x938>
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c30:	2b0a      	cmp	r3, #10
 8009c32:	d007      	beq.n	8009c44 <UART_SetConfig+0x934>
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c38:	2b0b      	cmp	r3, #11
 8009c3a:	d101      	bne.n	8009c40 <UART_SetConfig+0x930>
 8009c3c:	4b36      	ldr	r3, [pc, #216]	; (8009d18 <UART_SetConfig+0xa08>)
 8009c3e:	e016      	b.n	8009c6e <UART_SetConfig+0x95e>
 8009c40:	4b34      	ldr	r3, [pc, #208]	; (8009d14 <UART_SetConfig+0xa04>)
 8009c42:	e014      	b.n	8009c6e <UART_SetConfig+0x95e>
 8009c44:	4b35      	ldr	r3, [pc, #212]	; (8009d1c <UART_SetConfig+0xa0c>)
 8009c46:	e012      	b.n	8009c6e <UART_SetConfig+0x95e>
 8009c48:	4b35      	ldr	r3, [pc, #212]	; (8009d20 <UART_SetConfig+0xa10>)
 8009c4a:	e010      	b.n	8009c6e <UART_SetConfig+0x95e>
 8009c4c:	4b35      	ldr	r3, [pc, #212]	; (8009d24 <UART_SetConfig+0xa14>)
 8009c4e:	e00e      	b.n	8009c6e <UART_SetConfig+0x95e>
 8009c50:	4b35      	ldr	r3, [pc, #212]	; (8009d28 <UART_SetConfig+0xa18>)
 8009c52:	e00c      	b.n	8009c6e <UART_SetConfig+0x95e>
 8009c54:	4b35      	ldr	r3, [pc, #212]	; (8009d2c <UART_SetConfig+0xa1c>)
 8009c56:	e00a      	b.n	8009c6e <UART_SetConfig+0x95e>
 8009c58:	4b35      	ldr	r3, [pc, #212]	; (8009d30 <UART_SetConfig+0xa20>)
 8009c5a:	e008      	b.n	8009c6e <UART_SetConfig+0x95e>
 8009c5c:	4b35      	ldr	r3, [pc, #212]	; (8009d34 <UART_SetConfig+0xa24>)
 8009c5e:	e006      	b.n	8009c6e <UART_SetConfig+0x95e>
 8009c60:	4b35      	ldr	r3, [pc, #212]	; (8009d38 <UART_SetConfig+0xa28>)
 8009c62:	e004      	b.n	8009c6e <UART_SetConfig+0x95e>
 8009c64:	4b35      	ldr	r3, [pc, #212]	; (8009d3c <UART_SetConfig+0xa2c>)
 8009c66:	e002      	b.n	8009c6e <UART_SetConfig+0x95e>
 8009c68:	4b35      	ldr	r3, [pc, #212]	; (8009d40 <UART_SetConfig+0xa30>)
 8009c6a:	e000      	b.n	8009c6e <UART_SetConfig+0x95e>
 8009c6c:	4b29      	ldr	r3, [pc, #164]	; (8009d14 <UART_SetConfig+0xa04>)
 8009c6e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009c70:	e0cb      	b.n	8009e0a <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_CSI:
        lpuart_ker_ck_pres = ((uint32_t)CSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d046      	beq.n	8009d08 <UART_SetConfig+0x9f8>
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c7e:	2b01      	cmp	r3, #1
 8009c80:	d040      	beq.n	8009d04 <UART_SetConfig+0x9f4>
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c86:	2b02      	cmp	r3, #2
 8009c88:	d03a      	beq.n	8009d00 <UART_SetConfig+0x9f0>
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c8e:	2b03      	cmp	r3, #3
 8009c90:	d034      	beq.n	8009cfc <UART_SetConfig+0x9ec>
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c96:	2b04      	cmp	r3, #4
 8009c98:	d02e      	beq.n	8009cf8 <UART_SetConfig+0x9e8>
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c9e:	2b05      	cmp	r3, #5
 8009ca0:	d028      	beq.n	8009cf4 <UART_SetConfig+0x9e4>
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ca6:	2b06      	cmp	r3, #6
 8009ca8:	d022      	beq.n	8009cf0 <UART_SetConfig+0x9e0>
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cae:	2b07      	cmp	r3, #7
 8009cb0:	d01c      	beq.n	8009cec <UART_SetConfig+0x9dc>
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cb6:	2b08      	cmp	r3, #8
 8009cb8:	d016      	beq.n	8009ce8 <UART_SetConfig+0x9d8>
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cbe:	2b09      	cmp	r3, #9
 8009cc0:	d00f      	beq.n	8009ce2 <UART_SetConfig+0x9d2>
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cc6:	2b0a      	cmp	r3, #10
 8009cc8:	d008      	beq.n	8009cdc <UART_SetConfig+0x9cc>
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cce:	2b0b      	cmp	r3, #11
 8009cd0:	d102      	bne.n	8009cd8 <UART_SetConfig+0x9c8>
 8009cd2:	f643 5309 	movw	r3, #15625	; 0x3d09
 8009cd6:	e018      	b.n	8009d0a <UART_SetConfig+0x9fa>
 8009cd8:	4b13      	ldr	r3, [pc, #76]	; (8009d28 <UART_SetConfig+0xa18>)
 8009cda:	e016      	b.n	8009d0a <UART_SetConfig+0x9fa>
 8009cdc:	f647 2312 	movw	r3, #31250	; 0x7a12
 8009ce0:	e013      	b.n	8009d0a <UART_SetConfig+0x9fa>
 8009ce2:	f24f 4324 	movw	r3, #62500	; 0xf424
 8009ce6:	e010      	b.n	8009d0a <UART_SetConfig+0x9fa>
 8009ce8:	4b16      	ldr	r3, [pc, #88]	; (8009d44 <UART_SetConfig+0xa34>)
 8009cea:	e00e      	b.n	8009d0a <UART_SetConfig+0x9fa>
 8009cec:	4b0a      	ldr	r3, [pc, #40]	; (8009d18 <UART_SetConfig+0xa08>)
 8009cee:	e00c      	b.n	8009d0a <UART_SetConfig+0x9fa>
 8009cf0:	4b15      	ldr	r3, [pc, #84]	; (8009d48 <UART_SetConfig+0xa38>)
 8009cf2:	e00a      	b.n	8009d0a <UART_SetConfig+0x9fa>
 8009cf4:	4b15      	ldr	r3, [pc, #84]	; (8009d4c <UART_SetConfig+0xa3c>)
 8009cf6:	e008      	b.n	8009d0a <UART_SetConfig+0x9fa>
 8009cf8:	4b08      	ldr	r3, [pc, #32]	; (8009d1c <UART_SetConfig+0xa0c>)
 8009cfa:	e006      	b.n	8009d0a <UART_SetConfig+0x9fa>
 8009cfc:	4b14      	ldr	r3, [pc, #80]	; (8009d50 <UART_SetConfig+0xa40>)
 8009cfe:	e004      	b.n	8009d0a <UART_SetConfig+0x9fa>
 8009d00:	4b07      	ldr	r3, [pc, #28]	; (8009d20 <UART_SetConfig+0xa10>)
 8009d02:	e002      	b.n	8009d0a <UART_SetConfig+0x9fa>
 8009d04:	4b07      	ldr	r3, [pc, #28]	; (8009d24 <UART_SetConfig+0xa14>)
 8009d06:	e000      	b.n	8009d0a <UART_SetConfig+0x9fa>
 8009d08:	4b07      	ldr	r3, [pc, #28]	; (8009d28 <UART_SetConfig+0xa18>)
 8009d0a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009d0c:	e07d      	b.n	8009e0a <UART_SetConfig+0xafa>
 8009d0e:	bf00      	nop
 8009d10:	58024400 	.word	0x58024400
 8009d14:	03d09000 	.word	0x03d09000
 8009d18:	0003d090 	.word	0x0003d090
 8009d1c:	0007a120 	.word	0x0007a120
 8009d20:	000f4240 	.word	0x000f4240
 8009d24:	001e8480 	.word	0x001e8480
 8009d28:	003d0900 	.word	0x003d0900
 8009d2c:	00516155 	.word	0x00516155
 8009d30:	0061a800 	.word	0x0061a800
 8009d34:	007a1200 	.word	0x007a1200
 8009d38:	00a2c2aa 	.word	0x00a2c2aa
 8009d3c:	00f42400 	.word	0x00f42400
 8009d40:	01e84800 	.word	0x01e84800
 8009d44:	0001e848 	.word	0x0001e848
 8009d48:	00051615 	.word	0x00051615
 8009d4c:	00061a80 	.word	0x00061a80
 8009d50:	000a2c2a 	.word	0x000a2c2a
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d04e      	beq.n	8009dfa <UART_SetConfig+0xaea>
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d60:	2b01      	cmp	r3, #1
 8009d62:	d047      	beq.n	8009df4 <UART_SetConfig+0xae4>
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d68:	2b02      	cmp	r3, #2
 8009d6a:	d040      	beq.n	8009dee <UART_SetConfig+0xade>
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d70:	2b03      	cmp	r3, #3
 8009d72:	d039      	beq.n	8009de8 <UART_SetConfig+0xad8>
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d78:	2b04      	cmp	r3, #4
 8009d7a:	d032      	beq.n	8009de2 <UART_SetConfig+0xad2>
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d80:	2b05      	cmp	r3, #5
 8009d82:	d02b      	beq.n	8009ddc <UART_SetConfig+0xacc>
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d88:	2b06      	cmp	r3, #6
 8009d8a:	d024      	beq.n	8009dd6 <UART_SetConfig+0xac6>
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d90:	2b07      	cmp	r3, #7
 8009d92:	d01d      	beq.n	8009dd0 <UART_SetConfig+0xac0>
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d98:	2b08      	cmp	r3, #8
 8009d9a:	d016      	beq.n	8009dca <UART_SetConfig+0xaba>
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009da0:	2b09      	cmp	r3, #9
 8009da2:	d00f      	beq.n	8009dc4 <UART_SetConfig+0xab4>
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009da8:	2b0a      	cmp	r3, #10
 8009daa:	d008      	beq.n	8009dbe <UART_SetConfig+0xaae>
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009db0:	2b0b      	cmp	r3, #11
 8009db2:	d101      	bne.n	8009db8 <UART_SetConfig+0xaa8>
 8009db4:	2380      	movs	r3, #128	; 0x80
 8009db6:	e022      	b.n	8009dfe <UART_SetConfig+0xaee>
 8009db8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009dbc:	e01f      	b.n	8009dfe <UART_SetConfig+0xaee>
 8009dbe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009dc2:	e01c      	b.n	8009dfe <UART_SetConfig+0xaee>
 8009dc4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009dc8:	e019      	b.n	8009dfe <UART_SetConfig+0xaee>
 8009dca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009dce:	e016      	b.n	8009dfe <UART_SetConfig+0xaee>
 8009dd0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009dd4:	e013      	b.n	8009dfe <UART_SetConfig+0xaee>
 8009dd6:	f640 23aa 	movw	r3, #2730	; 0xaaa
 8009dda:	e010      	b.n	8009dfe <UART_SetConfig+0xaee>
 8009ddc:	f640 43cc 	movw	r3, #3276	; 0xccc
 8009de0:	e00d      	b.n	8009dfe <UART_SetConfig+0xaee>
 8009de2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009de6:	e00a      	b.n	8009dfe <UART_SetConfig+0xaee>
 8009de8:	f241 5355 	movw	r3, #5461	; 0x1555
 8009dec:	e007      	b.n	8009dfe <UART_SetConfig+0xaee>
 8009dee:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009df2:	e004      	b.n	8009dfe <UART_SetConfig+0xaee>
 8009df4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8009df8:	e001      	b.n	8009dfe <UART_SetConfig+0xaee>
 8009dfa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009dfe:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009e00:	e003      	b.n	8009e0a <UART_SetConfig+0xafa>
      default:
        ret = HAL_ERROR;
 8009e02:	2301      	movs	r3, #1
 8009e04:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 8009e08:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8009e0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	f001 83e8 	beq.w	800b5e2 <UART_SetConfig+0x22d2>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	685a      	ldr	r2, [r3, #4]
 8009e16:	4613      	mov	r3, r2
 8009e18:	005b      	lsls	r3, r3, #1
 8009e1a:	4413      	add	r3, r2
 8009e1c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009e1e:	429a      	cmp	r2, r3
 8009e20:	d305      	bcc.n	8009e2e <UART_SetConfig+0xb1e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	685b      	ldr	r3, [r3, #4]
 8009e26:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009e28:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009e2a:	429a      	cmp	r2, r3
 8009e2c:	d904      	bls.n	8009e38 <UART_SetConfig+0xb28>
      {
        ret = HAL_ERROR;
 8009e2e:	2301      	movs	r3, #1
 8009e30:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009e34:	f001 bbd5 	b.w	800b5e2 <UART_SetConfig+0x22d2>
      }
      else
      {
        switch (clocksource)
 8009e38:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8009e3c:	2b08      	cmp	r3, #8
 8009e3e:	f000 8154 	beq.w	800a0ea <UART_SetConfig+0xdda>
 8009e42:	2b08      	cmp	r3, #8
 8009e44:	dc06      	bgt.n	8009e54 <UART_SetConfig+0xb44>
 8009e46:	2b02      	cmp	r3, #2
 8009e48:	d00f      	beq.n	8009e6a <UART_SetConfig+0xb5a>
 8009e4a:	2b04      	cmp	r3, #4
 8009e4c:	f000 80ac 	beq.w	8009fa8 <UART_SetConfig+0xc98>
 8009e50:	f000 bc30 	b.w	800a6b4 <UART_SetConfig+0x13a4>
 8009e54:	2b20      	cmp	r3, #32
 8009e56:	f000 832d 	beq.w	800a4b4 <UART_SetConfig+0x11a4>
 8009e5a:	2b40      	cmp	r3, #64	; 0x40
 8009e5c:	f000 83a5 	beq.w	800a5aa <UART_SetConfig+0x129a>
 8009e60:	2b10      	cmp	r3, #16
 8009e62:	f000 81e3 	beq.w	800a22c <UART_SetConfig+0xf1c>
 8009e66:	f000 bc25 	b.w	800a6b4 <UART_SetConfig+0x13a4>
        {
          case UART_CLOCKSOURCE_D3PCLK1:
            pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8009e6a:	f7fe fb33 	bl	80084d4 <HAL_RCCEx_GetD3PCLK1Freq>
 8009e6e:	62b8      	str	r0, [r7, #40]	; 0x28
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009e70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e72:	4618      	mov	r0, r3
 8009e74:	f04f 0100 	mov.w	r1, #0
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	d067      	beq.n	8009f50 <UART_SetConfig+0xc40>
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e84:	2b01      	cmp	r3, #1
 8009e86:	d05e      	beq.n	8009f46 <UART_SetConfig+0xc36>
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e8c:	2b02      	cmp	r3, #2
 8009e8e:	d055      	beq.n	8009f3c <UART_SetConfig+0xc2c>
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e94:	2b03      	cmp	r3, #3
 8009e96:	d04c      	beq.n	8009f32 <UART_SetConfig+0xc22>
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e9c:	2b04      	cmp	r3, #4
 8009e9e:	d043      	beq.n	8009f28 <UART_SetConfig+0xc18>
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ea4:	2b05      	cmp	r3, #5
 8009ea6:	d03a      	beq.n	8009f1e <UART_SetConfig+0xc0e>
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009eac:	2b06      	cmp	r3, #6
 8009eae:	d031      	beq.n	8009f14 <UART_SetConfig+0xc04>
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009eb4:	2b07      	cmp	r3, #7
 8009eb6:	d028      	beq.n	8009f0a <UART_SetConfig+0xbfa>
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ebc:	2b08      	cmp	r3, #8
 8009ebe:	d01f      	beq.n	8009f00 <UART_SetConfig+0xbf0>
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ec4:	2b09      	cmp	r3, #9
 8009ec6:	d016      	beq.n	8009ef6 <UART_SetConfig+0xbe6>
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ecc:	2b0a      	cmp	r3, #10
 8009ece:	d00d      	beq.n	8009eec <UART_SetConfig+0xbdc>
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ed4:	2b0b      	cmp	r3, #11
 8009ed6:	d104      	bne.n	8009ee2 <UART_SetConfig+0xbd2>
 8009ed8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009edc:	f04f 0400 	mov.w	r4, #0
 8009ee0:	e03a      	b.n	8009f58 <UART_SetConfig+0xc48>
 8009ee2:	f04f 0301 	mov.w	r3, #1
 8009ee6:	f04f 0400 	mov.w	r4, #0
 8009eea:	e035      	b.n	8009f58 <UART_SetConfig+0xc48>
 8009eec:	f04f 0380 	mov.w	r3, #128	; 0x80
 8009ef0:	f04f 0400 	mov.w	r4, #0
 8009ef4:	e030      	b.n	8009f58 <UART_SetConfig+0xc48>
 8009ef6:	f04f 0340 	mov.w	r3, #64	; 0x40
 8009efa:	f04f 0400 	mov.w	r4, #0
 8009efe:	e02b      	b.n	8009f58 <UART_SetConfig+0xc48>
 8009f00:	f04f 0320 	mov.w	r3, #32
 8009f04:	f04f 0400 	mov.w	r4, #0
 8009f08:	e026      	b.n	8009f58 <UART_SetConfig+0xc48>
 8009f0a:	f04f 0310 	mov.w	r3, #16
 8009f0e:	f04f 0400 	mov.w	r4, #0
 8009f12:	e021      	b.n	8009f58 <UART_SetConfig+0xc48>
 8009f14:	f04f 030c 	mov.w	r3, #12
 8009f18:	f04f 0400 	mov.w	r4, #0
 8009f1c:	e01c      	b.n	8009f58 <UART_SetConfig+0xc48>
 8009f1e:	f04f 030a 	mov.w	r3, #10
 8009f22:	f04f 0400 	mov.w	r4, #0
 8009f26:	e017      	b.n	8009f58 <UART_SetConfig+0xc48>
 8009f28:	f04f 0308 	mov.w	r3, #8
 8009f2c:	f04f 0400 	mov.w	r4, #0
 8009f30:	e012      	b.n	8009f58 <UART_SetConfig+0xc48>
 8009f32:	f04f 0306 	mov.w	r3, #6
 8009f36:	f04f 0400 	mov.w	r4, #0
 8009f3a:	e00d      	b.n	8009f58 <UART_SetConfig+0xc48>
 8009f3c:	f04f 0304 	mov.w	r3, #4
 8009f40:	f04f 0400 	mov.w	r4, #0
 8009f44:	e008      	b.n	8009f58 <UART_SetConfig+0xc48>
 8009f46:	f04f 0302 	mov.w	r3, #2
 8009f4a:	f04f 0400 	mov.w	r4, #0
 8009f4e:	e003      	b.n	8009f58 <UART_SetConfig+0xc48>
 8009f50:	f04f 0301 	mov.w	r3, #1
 8009f54:	f04f 0400 	mov.w	r4, #0
 8009f58:	461a      	mov	r2, r3
 8009f5a:	4623      	mov	r3, r4
 8009f5c:	f7f6 fa10 	bl	8000380 <__aeabi_uldivmod>
 8009f60:	4603      	mov	r3, r0
 8009f62:	460c      	mov	r4, r1
 8009f64:	4619      	mov	r1, r3
 8009f66:	4622      	mov	r2, r4
 8009f68:	f04f 0300 	mov.w	r3, #0
 8009f6c:	f04f 0400 	mov.w	r4, #0
 8009f70:	0214      	lsls	r4, r2, #8
 8009f72:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8009f76:	020b      	lsls	r3, r1, #8
 8009f78:	687a      	ldr	r2, [r7, #4]
 8009f7a:	6852      	ldr	r2, [r2, #4]
 8009f7c:	0852      	lsrs	r2, r2, #1
 8009f7e:	4611      	mov	r1, r2
 8009f80:	f04f 0200 	mov.w	r2, #0
 8009f84:	eb13 0b01 	adds.w	fp, r3, r1
 8009f88:	eb44 0c02 	adc.w	ip, r4, r2
 8009f8c:	4658      	mov	r0, fp
 8009f8e:	4661      	mov	r1, ip
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	685b      	ldr	r3, [r3, #4]
 8009f94:	f04f 0400 	mov.w	r4, #0
 8009f98:	461a      	mov	r2, r3
 8009f9a:	4623      	mov	r3, r4
 8009f9c:	f7f6 f9f0 	bl	8000380 <__aeabi_uldivmod>
 8009fa0:	4603      	mov	r3, r0
 8009fa2:	460c      	mov	r4, r1
 8009fa4:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8009fa6:	e389      	b.n	800a6bc <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_PLL2:
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009fa8:	f107 0318 	add.w	r3, r7, #24
 8009fac:	4618      	mov	r0, r3
 8009fae:	f7fe faa7 	bl	8008500 <HAL_RCCEx_GetPLL2ClockFreq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009fb2:	69fb      	ldr	r3, [r7, #28]
 8009fb4:	4618      	mov	r0, r3
 8009fb6:	f04f 0100 	mov.w	r1, #0
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	d067      	beq.n	800a092 <UART_SetConfig+0xd82>
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fc6:	2b01      	cmp	r3, #1
 8009fc8:	d05e      	beq.n	800a088 <UART_SetConfig+0xd78>
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fce:	2b02      	cmp	r3, #2
 8009fd0:	d055      	beq.n	800a07e <UART_SetConfig+0xd6e>
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fd6:	2b03      	cmp	r3, #3
 8009fd8:	d04c      	beq.n	800a074 <UART_SetConfig+0xd64>
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fde:	2b04      	cmp	r3, #4
 8009fe0:	d043      	beq.n	800a06a <UART_SetConfig+0xd5a>
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fe6:	2b05      	cmp	r3, #5
 8009fe8:	d03a      	beq.n	800a060 <UART_SetConfig+0xd50>
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fee:	2b06      	cmp	r3, #6
 8009ff0:	d031      	beq.n	800a056 <UART_SetConfig+0xd46>
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ff6:	2b07      	cmp	r3, #7
 8009ff8:	d028      	beq.n	800a04c <UART_SetConfig+0xd3c>
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ffe:	2b08      	cmp	r3, #8
 800a000:	d01f      	beq.n	800a042 <UART_SetConfig+0xd32>
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a006:	2b09      	cmp	r3, #9
 800a008:	d016      	beq.n	800a038 <UART_SetConfig+0xd28>
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a00e:	2b0a      	cmp	r3, #10
 800a010:	d00d      	beq.n	800a02e <UART_SetConfig+0xd1e>
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a016:	2b0b      	cmp	r3, #11
 800a018:	d104      	bne.n	800a024 <UART_SetConfig+0xd14>
 800a01a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a01e:	f04f 0400 	mov.w	r4, #0
 800a022:	e03a      	b.n	800a09a <UART_SetConfig+0xd8a>
 800a024:	f04f 0301 	mov.w	r3, #1
 800a028:	f04f 0400 	mov.w	r4, #0
 800a02c:	e035      	b.n	800a09a <UART_SetConfig+0xd8a>
 800a02e:	f04f 0380 	mov.w	r3, #128	; 0x80
 800a032:	f04f 0400 	mov.w	r4, #0
 800a036:	e030      	b.n	800a09a <UART_SetConfig+0xd8a>
 800a038:	f04f 0340 	mov.w	r3, #64	; 0x40
 800a03c:	f04f 0400 	mov.w	r4, #0
 800a040:	e02b      	b.n	800a09a <UART_SetConfig+0xd8a>
 800a042:	f04f 0320 	mov.w	r3, #32
 800a046:	f04f 0400 	mov.w	r4, #0
 800a04a:	e026      	b.n	800a09a <UART_SetConfig+0xd8a>
 800a04c:	f04f 0310 	mov.w	r3, #16
 800a050:	f04f 0400 	mov.w	r4, #0
 800a054:	e021      	b.n	800a09a <UART_SetConfig+0xd8a>
 800a056:	f04f 030c 	mov.w	r3, #12
 800a05a:	f04f 0400 	mov.w	r4, #0
 800a05e:	e01c      	b.n	800a09a <UART_SetConfig+0xd8a>
 800a060:	f04f 030a 	mov.w	r3, #10
 800a064:	f04f 0400 	mov.w	r4, #0
 800a068:	e017      	b.n	800a09a <UART_SetConfig+0xd8a>
 800a06a:	f04f 0308 	mov.w	r3, #8
 800a06e:	f04f 0400 	mov.w	r4, #0
 800a072:	e012      	b.n	800a09a <UART_SetConfig+0xd8a>
 800a074:	f04f 0306 	mov.w	r3, #6
 800a078:	f04f 0400 	mov.w	r4, #0
 800a07c:	e00d      	b.n	800a09a <UART_SetConfig+0xd8a>
 800a07e:	f04f 0304 	mov.w	r3, #4
 800a082:	f04f 0400 	mov.w	r4, #0
 800a086:	e008      	b.n	800a09a <UART_SetConfig+0xd8a>
 800a088:	f04f 0302 	mov.w	r3, #2
 800a08c:	f04f 0400 	mov.w	r4, #0
 800a090:	e003      	b.n	800a09a <UART_SetConfig+0xd8a>
 800a092:	f04f 0301 	mov.w	r3, #1
 800a096:	f04f 0400 	mov.w	r4, #0
 800a09a:	461a      	mov	r2, r3
 800a09c:	4623      	mov	r3, r4
 800a09e:	f7f6 f96f 	bl	8000380 <__aeabi_uldivmod>
 800a0a2:	4603      	mov	r3, r0
 800a0a4:	460c      	mov	r4, r1
 800a0a6:	4619      	mov	r1, r3
 800a0a8:	4622      	mov	r2, r4
 800a0aa:	f04f 0300 	mov.w	r3, #0
 800a0ae:	f04f 0400 	mov.w	r4, #0
 800a0b2:	0214      	lsls	r4, r2, #8
 800a0b4:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800a0b8:	020b      	lsls	r3, r1, #8
 800a0ba:	687a      	ldr	r2, [r7, #4]
 800a0bc:	6852      	ldr	r2, [r2, #4]
 800a0be:	0852      	lsrs	r2, r2, #1
 800a0c0:	4611      	mov	r1, r2
 800a0c2:	f04f 0200 	mov.w	r2, #0
 800a0c6:	eb13 0b01 	adds.w	fp, r3, r1
 800a0ca:	eb44 0c02 	adc.w	ip, r4, r2
 800a0ce:	4658      	mov	r0, fp
 800a0d0:	4661      	mov	r1, ip
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	685b      	ldr	r3, [r3, #4]
 800a0d6:	f04f 0400 	mov.w	r4, #0
 800a0da:	461a      	mov	r2, r3
 800a0dc:	4623      	mov	r3, r4
 800a0de:	f7f6 f94f 	bl	8000380 <__aeabi_uldivmod>
 800a0e2:	4603      	mov	r3, r0
 800a0e4:	460c      	mov	r4, r1
 800a0e6:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800a0e8:	e2e8      	b.n	800a6bc <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_PLL3:
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a0ea:	f107 030c 	add.w	r3, r7, #12
 800a0ee:	4618      	mov	r0, r3
 800a0f0:	f7fe fb52 	bl	8008798 <HAL_RCCEx_GetPLL3ClockFreq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a0f4:	693b      	ldr	r3, [r7, #16]
 800a0f6:	4618      	mov	r0, r3
 800a0f8:	f04f 0100 	mov.w	r1, #0
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a100:	2b00      	cmp	r3, #0
 800a102:	d067      	beq.n	800a1d4 <UART_SetConfig+0xec4>
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a108:	2b01      	cmp	r3, #1
 800a10a:	d05e      	beq.n	800a1ca <UART_SetConfig+0xeba>
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a110:	2b02      	cmp	r3, #2
 800a112:	d055      	beq.n	800a1c0 <UART_SetConfig+0xeb0>
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a118:	2b03      	cmp	r3, #3
 800a11a:	d04c      	beq.n	800a1b6 <UART_SetConfig+0xea6>
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a120:	2b04      	cmp	r3, #4
 800a122:	d043      	beq.n	800a1ac <UART_SetConfig+0xe9c>
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a128:	2b05      	cmp	r3, #5
 800a12a:	d03a      	beq.n	800a1a2 <UART_SetConfig+0xe92>
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a130:	2b06      	cmp	r3, #6
 800a132:	d031      	beq.n	800a198 <UART_SetConfig+0xe88>
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a138:	2b07      	cmp	r3, #7
 800a13a:	d028      	beq.n	800a18e <UART_SetConfig+0xe7e>
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a140:	2b08      	cmp	r3, #8
 800a142:	d01f      	beq.n	800a184 <UART_SetConfig+0xe74>
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a148:	2b09      	cmp	r3, #9
 800a14a:	d016      	beq.n	800a17a <UART_SetConfig+0xe6a>
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a150:	2b0a      	cmp	r3, #10
 800a152:	d00d      	beq.n	800a170 <UART_SetConfig+0xe60>
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a158:	2b0b      	cmp	r3, #11
 800a15a:	d104      	bne.n	800a166 <UART_SetConfig+0xe56>
 800a15c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a160:	f04f 0400 	mov.w	r4, #0
 800a164:	e03a      	b.n	800a1dc <UART_SetConfig+0xecc>
 800a166:	f04f 0301 	mov.w	r3, #1
 800a16a:	f04f 0400 	mov.w	r4, #0
 800a16e:	e035      	b.n	800a1dc <UART_SetConfig+0xecc>
 800a170:	f04f 0380 	mov.w	r3, #128	; 0x80
 800a174:	f04f 0400 	mov.w	r4, #0
 800a178:	e030      	b.n	800a1dc <UART_SetConfig+0xecc>
 800a17a:	f04f 0340 	mov.w	r3, #64	; 0x40
 800a17e:	f04f 0400 	mov.w	r4, #0
 800a182:	e02b      	b.n	800a1dc <UART_SetConfig+0xecc>
 800a184:	f04f 0320 	mov.w	r3, #32
 800a188:	f04f 0400 	mov.w	r4, #0
 800a18c:	e026      	b.n	800a1dc <UART_SetConfig+0xecc>
 800a18e:	f04f 0310 	mov.w	r3, #16
 800a192:	f04f 0400 	mov.w	r4, #0
 800a196:	e021      	b.n	800a1dc <UART_SetConfig+0xecc>
 800a198:	f04f 030c 	mov.w	r3, #12
 800a19c:	f04f 0400 	mov.w	r4, #0
 800a1a0:	e01c      	b.n	800a1dc <UART_SetConfig+0xecc>
 800a1a2:	f04f 030a 	mov.w	r3, #10
 800a1a6:	f04f 0400 	mov.w	r4, #0
 800a1aa:	e017      	b.n	800a1dc <UART_SetConfig+0xecc>
 800a1ac:	f04f 0308 	mov.w	r3, #8
 800a1b0:	f04f 0400 	mov.w	r4, #0
 800a1b4:	e012      	b.n	800a1dc <UART_SetConfig+0xecc>
 800a1b6:	f04f 0306 	mov.w	r3, #6
 800a1ba:	f04f 0400 	mov.w	r4, #0
 800a1be:	e00d      	b.n	800a1dc <UART_SetConfig+0xecc>
 800a1c0:	f04f 0304 	mov.w	r3, #4
 800a1c4:	f04f 0400 	mov.w	r4, #0
 800a1c8:	e008      	b.n	800a1dc <UART_SetConfig+0xecc>
 800a1ca:	f04f 0302 	mov.w	r3, #2
 800a1ce:	f04f 0400 	mov.w	r4, #0
 800a1d2:	e003      	b.n	800a1dc <UART_SetConfig+0xecc>
 800a1d4:	f04f 0301 	mov.w	r3, #1
 800a1d8:	f04f 0400 	mov.w	r4, #0
 800a1dc:	461a      	mov	r2, r3
 800a1de:	4623      	mov	r3, r4
 800a1e0:	f7f6 f8ce 	bl	8000380 <__aeabi_uldivmod>
 800a1e4:	4603      	mov	r3, r0
 800a1e6:	460c      	mov	r4, r1
 800a1e8:	4619      	mov	r1, r3
 800a1ea:	4622      	mov	r2, r4
 800a1ec:	f04f 0300 	mov.w	r3, #0
 800a1f0:	f04f 0400 	mov.w	r4, #0
 800a1f4:	0214      	lsls	r4, r2, #8
 800a1f6:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800a1fa:	020b      	lsls	r3, r1, #8
 800a1fc:	687a      	ldr	r2, [r7, #4]
 800a1fe:	6852      	ldr	r2, [r2, #4]
 800a200:	0852      	lsrs	r2, r2, #1
 800a202:	4611      	mov	r1, r2
 800a204:	f04f 0200 	mov.w	r2, #0
 800a208:	eb13 0b01 	adds.w	fp, r3, r1
 800a20c:	eb44 0c02 	adc.w	ip, r4, r2
 800a210:	4658      	mov	r0, fp
 800a212:	4661      	mov	r1, ip
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	685b      	ldr	r3, [r3, #4]
 800a218:	f04f 0400 	mov.w	r4, #0
 800a21c:	461a      	mov	r2, r3
 800a21e:	4623      	mov	r3, r4
 800a220:	f7f6 f8ae 	bl	8000380 <__aeabi_uldivmod>
 800a224:	4603      	mov	r3, r0
 800a226:	460c      	mov	r4, r1
 800a228:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800a22a:	e247      	b.n	800a6bc <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_HSI:
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a22c:	4b96      	ldr	r3, [pc, #600]	; (800a488 <UART_SetConfig+0x1178>)
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	f003 0320 	and.w	r3, r3, #32
 800a234:	2b00      	cmp	r3, #0
 800a236:	f000 80a3 	beq.w	800a380 <UART_SetConfig+0x1070>
            {
              usartdiv = (uint32_t)(UART_DIV_LPUART((uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a23a:	4b93      	ldr	r3, [pc, #588]	; (800a488 <UART_SetConfig+0x1178>)
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	08db      	lsrs	r3, r3, #3
 800a240:	f003 0303 	and.w	r3, r3, #3
 800a244:	4a91      	ldr	r2, [pc, #580]	; (800a48c <UART_SetConfig+0x117c>)
 800a246:	fa22 f303 	lsr.w	r3, r2, r3
 800a24a:	4618      	mov	r0, r3
 800a24c:	f04f 0100 	mov.w	r1, #0
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a254:	2b00      	cmp	r3, #0
 800a256:	d067      	beq.n	800a328 <UART_SetConfig+0x1018>
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a25c:	2b01      	cmp	r3, #1
 800a25e:	d05e      	beq.n	800a31e <UART_SetConfig+0x100e>
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a264:	2b02      	cmp	r3, #2
 800a266:	d055      	beq.n	800a314 <UART_SetConfig+0x1004>
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a26c:	2b03      	cmp	r3, #3
 800a26e:	d04c      	beq.n	800a30a <UART_SetConfig+0xffa>
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a274:	2b04      	cmp	r3, #4
 800a276:	d043      	beq.n	800a300 <UART_SetConfig+0xff0>
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a27c:	2b05      	cmp	r3, #5
 800a27e:	d03a      	beq.n	800a2f6 <UART_SetConfig+0xfe6>
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a284:	2b06      	cmp	r3, #6
 800a286:	d031      	beq.n	800a2ec <UART_SetConfig+0xfdc>
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a28c:	2b07      	cmp	r3, #7
 800a28e:	d028      	beq.n	800a2e2 <UART_SetConfig+0xfd2>
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a294:	2b08      	cmp	r3, #8
 800a296:	d01f      	beq.n	800a2d8 <UART_SetConfig+0xfc8>
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a29c:	2b09      	cmp	r3, #9
 800a29e:	d016      	beq.n	800a2ce <UART_SetConfig+0xfbe>
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2a4:	2b0a      	cmp	r3, #10
 800a2a6:	d00d      	beq.n	800a2c4 <UART_SetConfig+0xfb4>
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2ac:	2b0b      	cmp	r3, #11
 800a2ae:	d104      	bne.n	800a2ba <UART_SetConfig+0xfaa>
 800a2b0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a2b4:	f04f 0400 	mov.w	r4, #0
 800a2b8:	e03a      	b.n	800a330 <UART_SetConfig+0x1020>
 800a2ba:	f04f 0301 	mov.w	r3, #1
 800a2be:	f04f 0400 	mov.w	r4, #0
 800a2c2:	e035      	b.n	800a330 <UART_SetConfig+0x1020>
 800a2c4:	f04f 0380 	mov.w	r3, #128	; 0x80
 800a2c8:	f04f 0400 	mov.w	r4, #0
 800a2cc:	e030      	b.n	800a330 <UART_SetConfig+0x1020>
 800a2ce:	f04f 0340 	mov.w	r3, #64	; 0x40
 800a2d2:	f04f 0400 	mov.w	r4, #0
 800a2d6:	e02b      	b.n	800a330 <UART_SetConfig+0x1020>
 800a2d8:	f04f 0320 	mov.w	r3, #32
 800a2dc:	f04f 0400 	mov.w	r4, #0
 800a2e0:	e026      	b.n	800a330 <UART_SetConfig+0x1020>
 800a2e2:	f04f 0310 	mov.w	r3, #16
 800a2e6:	f04f 0400 	mov.w	r4, #0
 800a2ea:	e021      	b.n	800a330 <UART_SetConfig+0x1020>
 800a2ec:	f04f 030c 	mov.w	r3, #12
 800a2f0:	f04f 0400 	mov.w	r4, #0
 800a2f4:	e01c      	b.n	800a330 <UART_SetConfig+0x1020>
 800a2f6:	f04f 030a 	mov.w	r3, #10
 800a2fa:	f04f 0400 	mov.w	r4, #0
 800a2fe:	e017      	b.n	800a330 <UART_SetConfig+0x1020>
 800a300:	f04f 0308 	mov.w	r3, #8
 800a304:	f04f 0400 	mov.w	r4, #0
 800a308:	e012      	b.n	800a330 <UART_SetConfig+0x1020>
 800a30a:	f04f 0306 	mov.w	r3, #6
 800a30e:	f04f 0400 	mov.w	r4, #0
 800a312:	e00d      	b.n	800a330 <UART_SetConfig+0x1020>
 800a314:	f04f 0304 	mov.w	r3, #4
 800a318:	f04f 0400 	mov.w	r4, #0
 800a31c:	e008      	b.n	800a330 <UART_SetConfig+0x1020>
 800a31e:	f04f 0302 	mov.w	r3, #2
 800a322:	f04f 0400 	mov.w	r4, #0
 800a326:	e003      	b.n	800a330 <UART_SetConfig+0x1020>
 800a328:	f04f 0301 	mov.w	r3, #1
 800a32c:	f04f 0400 	mov.w	r4, #0
 800a330:	461a      	mov	r2, r3
 800a332:	4623      	mov	r3, r4
 800a334:	f7f6 f824 	bl	8000380 <__aeabi_uldivmod>
 800a338:	4603      	mov	r3, r0
 800a33a:	460c      	mov	r4, r1
 800a33c:	4619      	mov	r1, r3
 800a33e:	4622      	mov	r2, r4
 800a340:	f04f 0300 	mov.w	r3, #0
 800a344:	f04f 0400 	mov.w	r4, #0
 800a348:	0214      	lsls	r4, r2, #8
 800a34a:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800a34e:	020b      	lsls	r3, r1, #8
 800a350:	687a      	ldr	r2, [r7, #4]
 800a352:	6852      	ldr	r2, [r2, #4]
 800a354:	0852      	lsrs	r2, r2, #1
 800a356:	4611      	mov	r1, r2
 800a358:	f04f 0200 	mov.w	r2, #0
 800a35c:	eb13 0b01 	adds.w	fp, r3, r1
 800a360:	eb44 0c02 	adc.w	ip, r4, r2
 800a364:	4658      	mov	r0, fp
 800a366:	4661      	mov	r1, ip
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	685b      	ldr	r3, [r3, #4]
 800a36c:	f04f 0400 	mov.w	r4, #0
 800a370:	461a      	mov	r2, r3
 800a372:	4623      	mov	r3, r4
 800a374:	f7f6 f804 	bl	8000380 <__aeabi_uldivmod>
 800a378:	4603      	mov	r3, r0
 800a37a:	460c      	mov	r4, r1
 800a37c:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
            }
            break;
 800a37e:	e19d      	b.n	800a6bc <UART_SetConfig+0x13ac>
              usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a384:	2b00      	cmp	r3, #0
 800a386:	d05b      	beq.n	800a440 <UART_SetConfig+0x1130>
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a38c:	2b01      	cmp	r3, #1
 800a38e:	d053      	beq.n	800a438 <UART_SetConfig+0x1128>
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a394:	2b02      	cmp	r3, #2
 800a396:	d04b      	beq.n	800a430 <UART_SetConfig+0x1120>
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a39c:	2b03      	cmp	r3, #3
 800a39e:	d043      	beq.n	800a428 <UART_SetConfig+0x1118>
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3a4:	2b04      	cmp	r3, #4
 800a3a6:	d03b      	beq.n	800a420 <UART_SetConfig+0x1110>
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3ac:	2b05      	cmp	r3, #5
 800a3ae:	d033      	beq.n	800a418 <UART_SetConfig+0x1108>
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3b4:	2b06      	cmp	r3, #6
 800a3b6:	d02b      	beq.n	800a410 <UART_SetConfig+0x1100>
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3bc:	2b07      	cmp	r3, #7
 800a3be:	d023      	beq.n	800a408 <UART_SetConfig+0x10f8>
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3c4:	2b08      	cmp	r3, #8
 800a3c6:	d01b      	beq.n	800a400 <UART_SetConfig+0x10f0>
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3cc:	2b09      	cmp	r3, #9
 800a3ce:	d013      	beq.n	800a3f8 <UART_SetConfig+0x10e8>
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3d4:	2b0a      	cmp	r3, #10
 800a3d6:	d00b      	beq.n	800a3f0 <UART_SetConfig+0x10e0>
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3dc:	2b0b      	cmp	r3, #11
 800a3de:	d103      	bne.n	800a3e8 <UART_SetConfig+0x10d8>
 800a3e0:	4b2a      	ldr	r3, [pc, #168]	; (800a48c <UART_SetConfig+0x117c>)
 800a3e2:	f04f 0400 	mov.w	r4, #0
 800a3e6:	e02e      	b.n	800a446 <UART_SetConfig+0x1136>
 800a3e8:	4b29      	ldr	r3, [pc, #164]	; (800a490 <UART_SetConfig+0x1180>)
 800a3ea:	f04f 0403 	mov.w	r4, #3
 800a3ee:	e02a      	b.n	800a446 <UART_SetConfig+0x1136>
 800a3f0:	4b28      	ldr	r3, [pc, #160]	; (800a494 <UART_SetConfig+0x1184>)
 800a3f2:	f04f 0400 	mov.w	r4, #0
 800a3f6:	e026      	b.n	800a446 <UART_SetConfig+0x1136>
 800a3f8:	4b27      	ldr	r3, [pc, #156]	; (800a498 <UART_SetConfig+0x1188>)
 800a3fa:	f04f 0400 	mov.w	r4, #0
 800a3fe:	e022      	b.n	800a446 <UART_SetConfig+0x1136>
 800a400:	4b26      	ldr	r3, [pc, #152]	; (800a49c <UART_SetConfig+0x118c>)
 800a402:	f04f 0400 	mov.w	r4, #0
 800a406:	e01e      	b.n	800a446 <UART_SetConfig+0x1136>
 800a408:	4b25      	ldr	r3, [pc, #148]	; (800a4a0 <UART_SetConfig+0x1190>)
 800a40a:	f04f 0400 	mov.w	r4, #0
 800a40e:	e01a      	b.n	800a446 <UART_SetConfig+0x1136>
 800a410:	a419      	add	r4, pc, #100	; (adr r4, 800a478 <UART_SetConfig+0x1168>)
 800a412:	e9d4 3400 	ldrd	r3, r4, [r4]
 800a416:	e016      	b.n	800a446 <UART_SetConfig+0x1136>
 800a418:	4b22      	ldr	r3, [pc, #136]	; (800a4a4 <UART_SetConfig+0x1194>)
 800a41a:	f04f 0400 	mov.w	r4, #0
 800a41e:	e012      	b.n	800a446 <UART_SetConfig+0x1136>
 800a420:	4b21      	ldr	r3, [pc, #132]	; (800a4a8 <UART_SetConfig+0x1198>)
 800a422:	f04f 0400 	mov.w	r4, #0
 800a426:	e00e      	b.n	800a446 <UART_SetConfig+0x1136>
 800a428:	a415      	add	r4, pc, #84	; (adr r4, 800a480 <UART_SetConfig+0x1170>)
 800a42a:	e9d4 3400 	ldrd	r3, r4, [r4]
 800a42e:	e00a      	b.n	800a446 <UART_SetConfig+0x1136>
 800a430:	4b1e      	ldr	r3, [pc, #120]	; (800a4ac <UART_SetConfig+0x119c>)
 800a432:	f04f 0400 	mov.w	r4, #0
 800a436:	e006      	b.n	800a446 <UART_SetConfig+0x1136>
 800a438:	4b1d      	ldr	r3, [pc, #116]	; (800a4b0 <UART_SetConfig+0x11a0>)
 800a43a:	f04f 0401 	mov.w	r4, #1
 800a43e:	e002      	b.n	800a446 <UART_SetConfig+0x1136>
 800a440:	4b13      	ldr	r3, [pc, #76]	; (800a490 <UART_SetConfig+0x1180>)
 800a442:	f04f 0403 	mov.w	r4, #3
 800a446:	687a      	ldr	r2, [r7, #4]
 800a448:	6852      	ldr	r2, [r2, #4]
 800a44a:	0852      	lsrs	r2, r2, #1
 800a44c:	4611      	mov	r1, r2
 800a44e:	f04f 0200 	mov.w	r2, #0
 800a452:	eb13 0b01 	adds.w	fp, r3, r1
 800a456:	eb44 0c02 	adc.w	ip, r4, r2
 800a45a:	4658      	mov	r0, fp
 800a45c:	4661      	mov	r1, ip
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	685b      	ldr	r3, [r3, #4]
 800a462:	f04f 0400 	mov.w	r4, #0
 800a466:	461a      	mov	r2, r3
 800a468:	4623      	mov	r3, r4
 800a46a:	f7f5 ff89 	bl	8000380 <__aeabi_uldivmod>
 800a46e:	4603      	mov	r3, r0
 800a470:	460c      	mov	r4, r1
 800a472:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800a474:	e122      	b.n	800a6bc <UART_SetConfig+0x13ac>
 800a476:	bf00      	nop
 800a478:	51615500 	.word	0x51615500
 800a47c:	00000000 	.word	0x00000000
 800a480:	a2c2aa00 	.word	0xa2c2aa00
 800a484:	00000000 	.word	0x00000000
 800a488:	58024400 	.word	0x58024400
 800a48c:	03d09000 	.word	0x03d09000
 800a490:	d0900000 	.word	0xd0900000
 800a494:	07a12000 	.word	0x07a12000
 800a498:	0f424000 	.word	0x0f424000
 800a49c:	1e848000 	.word	0x1e848000
 800a4a0:	3d090000 	.word	0x3d090000
 800a4a4:	61a80000 	.word	0x61a80000
 800a4a8:	7a120000 	.word	0x7a120000
 800a4ac:	f4240000 	.word	0xf4240000
 800a4b0:	e8480000 	.word	0xe8480000
          case UART_CLOCKSOURCE_CSI:
            usartdiv = (uint32_t)(UART_DIV_LPUART(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4b8:	2b00      	cmp	r3, #0
 800a4ba:	d05b      	beq.n	800a574 <UART_SetConfig+0x1264>
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4c0:	2b01      	cmp	r3, #1
 800a4c2:	d053      	beq.n	800a56c <UART_SetConfig+0x125c>
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4c8:	2b02      	cmp	r3, #2
 800a4ca:	d04b      	beq.n	800a564 <UART_SetConfig+0x1254>
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4d0:	2b03      	cmp	r3, #3
 800a4d2:	d043      	beq.n	800a55c <UART_SetConfig+0x124c>
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4d8:	2b04      	cmp	r3, #4
 800a4da:	d03b      	beq.n	800a554 <UART_SetConfig+0x1244>
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4e0:	2b05      	cmp	r3, #5
 800a4e2:	d033      	beq.n	800a54c <UART_SetConfig+0x123c>
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4e8:	2b06      	cmp	r3, #6
 800a4ea:	d02b      	beq.n	800a544 <UART_SetConfig+0x1234>
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4f0:	2b07      	cmp	r3, #7
 800a4f2:	d023      	beq.n	800a53c <UART_SetConfig+0x122c>
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4f8:	2b08      	cmp	r3, #8
 800a4fa:	d01b      	beq.n	800a534 <UART_SetConfig+0x1224>
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a500:	2b09      	cmp	r3, #9
 800a502:	d013      	beq.n	800a52c <UART_SetConfig+0x121c>
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a508:	2b0a      	cmp	r3, #10
 800a50a:	d00b      	beq.n	800a524 <UART_SetConfig+0x1214>
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a510:	2b0b      	cmp	r3, #11
 800a512:	d103      	bne.n	800a51c <UART_SetConfig+0x120c>
 800a514:	4bc0      	ldr	r3, [pc, #768]	; (800a818 <UART_SetConfig+0x1508>)
 800a516:	f04f 0400 	mov.w	r4, #0
 800a51a:	e02e      	b.n	800a57a <UART_SetConfig+0x126a>
 800a51c:	4bbf      	ldr	r3, [pc, #764]	; (800a81c <UART_SetConfig+0x150c>)
 800a51e:	f04f 0400 	mov.w	r4, #0
 800a522:	e02a      	b.n	800a57a <UART_SetConfig+0x126a>
 800a524:	4bbe      	ldr	r3, [pc, #760]	; (800a820 <UART_SetConfig+0x1510>)
 800a526:	f04f 0400 	mov.w	r4, #0
 800a52a:	e026      	b.n	800a57a <UART_SetConfig+0x126a>
 800a52c:	4bbd      	ldr	r3, [pc, #756]	; (800a824 <UART_SetConfig+0x1514>)
 800a52e:	f04f 0400 	mov.w	r4, #0
 800a532:	e022      	b.n	800a57a <UART_SetConfig+0x126a>
 800a534:	4bbc      	ldr	r3, [pc, #752]	; (800a828 <UART_SetConfig+0x1518>)
 800a536:	f04f 0400 	mov.w	r4, #0
 800a53a:	e01e      	b.n	800a57a <UART_SetConfig+0x126a>
 800a53c:	4bbb      	ldr	r3, [pc, #748]	; (800a82c <UART_SetConfig+0x151c>)
 800a53e:	f04f 0400 	mov.w	r4, #0
 800a542:	e01a      	b.n	800a57a <UART_SetConfig+0x126a>
 800a544:	a4b0      	add	r4, pc, #704	; (adr r4, 800a808 <UART_SetConfig+0x14f8>)
 800a546:	e9d4 3400 	ldrd	r3, r4, [r4]
 800a54a:	e016      	b.n	800a57a <UART_SetConfig+0x126a>
 800a54c:	4bb8      	ldr	r3, [pc, #736]	; (800a830 <UART_SetConfig+0x1520>)
 800a54e:	f04f 0400 	mov.w	r4, #0
 800a552:	e012      	b.n	800a57a <UART_SetConfig+0x126a>
 800a554:	4bb7      	ldr	r3, [pc, #732]	; (800a834 <UART_SetConfig+0x1524>)
 800a556:	f04f 0400 	mov.w	r4, #0
 800a55a:	e00e      	b.n	800a57a <UART_SetConfig+0x126a>
 800a55c:	a4ac      	add	r4, pc, #688	; (adr r4, 800a810 <UART_SetConfig+0x1500>)
 800a55e:	e9d4 3400 	ldrd	r3, r4, [r4]
 800a562:	e00a      	b.n	800a57a <UART_SetConfig+0x126a>
 800a564:	4bb4      	ldr	r3, [pc, #720]	; (800a838 <UART_SetConfig+0x1528>)
 800a566:	f04f 0400 	mov.w	r4, #0
 800a56a:	e006      	b.n	800a57a <UART_SetConfig+0x126a>
 800a56c:	4bb3      	ldr	r3, [pc, #716]	; (800a83c <UART_SetConfig+0x152c>)
 800a56e:	f04f 0400 	mov.w	r4, #0
 800a572:	e002      	b.n	800a57a <UART_SetConfig+0x126a>
 800a574:	4ba9      	ldr	r3, [pc, #676]	; (800a81c <UART_SetConfig+0x150c>)
 800a576:	f04f 0400 	mov.w	r4, #0
 800a57a:	687a      	ldr	r2, [r7, #4]
 800a57c:	6852      	ldr	r2, [r2, #4]
 800a57e:	0852      	lsrs	r2, r2, #1
 800a580:	4611      	mov	r1, r2
 800a582:	f04f 0200 	mov.w	r2, #0
 800a586:	eb13 0b01 	adds.w	fp, r3, r1
 800a58a:	eb44 0c02 	adc.w	ip, r4, r2
 800a58e:	4658      	mov	r0, fp
 800a590:	4661      	mov	r1, ip
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	685b      	ldr	r3, [r3, #4]
 800a596:	f04f 0400 	mov.w	r4, #0
 800a59a:	461a      	mov	r2, r3
 800a59c:	4623      	mov	r3, r4
 800a59e:	f7f5 feef 	bl	8000380 <__aeabi_uldivmod>
 800a5a2:	4603      	mov	r3, r0
 800a5a4:	460c      	mov	r4, r1
 800a5a6:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800a5a8:	e088      	b.n	800a6bc <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_LSE:
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5ae:	2b00      	cmp	r3, #0
 800a5b0:	d064      	beq.n	800a67c <UART_SetConfig+0x136c>
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5b6:	2b01      	cmp	r3, #1
 800a5b8:	d05b      	beq.n	800a672 <UART_SetConfig+0x1362>
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5be:	2b02      	cmp	r3, #2
 800a5c0:	d052      	beq.n	800a668 <UART_SetConfig+0x1358>
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5c6:	2b03      	cmp	r3, #3
 800a5c8:	d04a      	beq.n	800a660 <UART_SetConfig+0x1350>
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5ce:	2b04      	cmp	r3, #4
 800a5d0:	d041      	beq.n	800a656 <UART_SetConfig+0x1346>
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5d6:	2b05      	cmp	r3, #5
 800a5d8:	d039      	beq.n	800a64e <UART_SetConfig+0x133e>
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5de:	2b06      	cmp	r3, #6
 800a5e0:	d031      	beq.n	800a646 <UART_SetConfig+0x1336>
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5e6:	2b07      	cmp	r3, #7
 800a5e8:	d028      	beq.n	800a63c <UART_SetConfig+0x132c>
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5ee:	2b08      	cmp	r3, #8
 800a5f0:	d01f      	beq.n	800a632 <UART_SetConfig+0x1322>
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5f6:	2b09      	cmp	r3, #9
 800a5f8:	d016      	beq.n	800a628 <UART_SetConfig+0x1318>
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5fe:	2b0a      	cmp	r3, #10
 800a600:	d00d      	beq.n	800a61e <UART_SetConfig+0x130e>
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a606:	2b0b      	cmp	r3, #11
 800a608:	d104      	bne.n	800a614 <UART_SetConfig+0x1304>
 800a60a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a60e:	f04f 0400 	mov.w	r4, #0
 800a612:	e037      	b.n	800a684 <UART_SetConfig+0x1374>
 800a614:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800a618:	f04f 0400 	mov.w	r4, #0
 800a61c:	e032      	b.n	800a684 <UART_SetConfig+0x1374>
 800a61e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800a622:	f04f 0400 	mov.w	r4, #0
 800a626:	e02d      	b.n	800a684 <UART_SetConfig+0x1374>
 800a628:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800a62c:	f04f 0400 	mov.w	r4, #0
 800a630:	e028      	b.n	800a684 <UART_SetConfig+0x1374>
 800a632:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800a636:	f04f 0400 	mov.w	r4, #0
 800a63a:	e023      	b.n	800a684 <UART_SetConfig+0x1374>
 800a63c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800a640:	f04f 0400 	mov.w	r4, #0
 800a644:	e01e      	b.n	800a684 <UART_SetConfig+0x1374>
 800a646:	4b7e      	ldr	r3, [pc, #504]	; (800a840 <UART_SetConfig+0x1530>)
 800a648:	f04f 0400 	mov.w	r4, #0
 800a64c:	e01a      	b.n	800a684 <UART_SetConfig+0x1374>
 800a64e:	4b7d      	ldr	r3, [pc, #500]	; (800a844 <UART_SetConfig+0x1534>)
 800a650:	f04f 0400 	mov.w	r4, #0
 800a654:	e016      	b.n	800a684 <UART_SetConfig+0x1374>
 800a656:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800a65a:	f04f 0400 	mov.w	r4, #0
 800a65e:	e011      	b.n	800a684 <UART_SetConfig+0x1374>
 800a660:	4b79      	ldr	r3, [pc, #484]	; (800a848 <UART_SetConfig+0x1538>)
 800a662:	f04f 0400 	mov.w	r4, #0
 800a666:	e00d      	b.n	800a684 <UART_SetConfig+0x1374>
 800a668:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800a66c:	f04f 0400 	mov.w	r4, #0
 800a670:	e008      	b.n	800a684 <UART_SetConfig+0x1374>
 800a672:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800a676:	f04f 0400 	mov.w	r4, #0
 800a67a:	e003      	b.n	800a684 <UART_SetConfig+0x1374>
 800a67c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800a680:	f04f 0400 	mov.w	r4, #0
 800a684:	687a      	ldr	r2, [r7, #4]
 800a686:	6852      	ldr	r2, [r2, #4]
 800a688:	0852      	lsrs	r2, r2, #1
 800a68a:	4611      	mov	r1, r2
 800a68c:	f04f 0200 	mov.w	r2, #0
 800a690:	eb13 0b01 	adds.w	fp, r3, r1
 800a694:	eb44 0c02 	adc.w	ip, r4, r2
 800a698:	4658      	mov	r0, fp
 800a69a:	4661      	mov	r1, ip
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	685b      	ldr	r3, [r3, #4]
 800a6a0:	f04f 0400 	mov.w	r4, #0
 800a6a4:	461a      	mov	r2, r3
 800a6a6:	4623      	mov	r3, r4
 800a6a8:	f7f5 fe6a 	bl	8000380 <__aeabi_uldivmod>
 800a6ac:	4603      	mov	r3, r0
 800a6ae:	460c      	mov	r4, r1
 800a6b0:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800a6b2:	e003      	b.n	800a6bc <UART_SetConfig+0x13ac>
          default:
            ret = HAL_ERROR;
 800a6b4:	2301      	movs	r3, #1
 800a6b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            break;
 800a6ba:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a6bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a6be:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a6c2:	d309      	bcc.n	800a6d8 <UART_SetConfig+0x13c8>
 800a6c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a6c6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a6ca:	d205      	bcs.n	800a6d8 <UART_SetConfig+0x13c8>
        {
          huart->Instance->BRR = usartdiv;
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a6d2:	60da      	str	r2, [r3, #12]
 800a6d4:	f000 bf85 	b.w	800b5e2 <UART_SetConfig+0x22d2>
        }
        else
        {
          ret = HAL_ERROR;
 800a6d8:	2301      	movs	r3, #1
 800a6da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a6de:	f000 bf80 	b.w	800b5e2 <UART_SetConfig+0x22d2>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	69db      	ldr	r3, [r3, #28]
 800a6e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a6ea:	f040 83da 	bne.w	800aea2 <UART_SetConfig+0x1b92>
  {
    switch (clocksource)
 800a6ee:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800a6f2:	2b40      	cmp	r3, #64	; 0x40
 800a6f4:	f200 83b3 	bhi.w	800ae5e <UART_SetConfig+0x1b4e>
 800a6f8:	a201      	add	r2, pc, #4	; (adr r2, 800a700 <UART_SetConfig+0x13f0>)
 800a6fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6fe:	bf00      	nop
 800a700:	0800a84d 	.word	0x0800a84d
 800a704:	0800a905 	.word	0x0800a905
 800a708:	0800ae5f 	.word	0x0800ae5f
 800a70c:	0800ae5f 	.word	0x0800ae5f
 800a710:	0800a9bd 	.word	0x0800a9bd
 800a714:	0800ae5f 	.word	0x0800ae5f
 800a718:	0800ae5f 	.word	0x0800ae5f
 800a71c:	0800ae5f 	.word	0x0800ae5f
 800a720:	0800aa79 	.word	0x0800aa79
 800a724:	0800ae5f 	.word	0x0800ae5f
 800a728:	0800ae5f 	.word	0x0800ae5f
 800a72c:	0800ae5f 	.word	0x0800ae5f
 800a730:	0800ae5f 	.word	0x0800ae5f
 800a734:	0800ae5f 	.word	0x0800ae5f
 800a738:	0800ae5f 	.word	0x0800ae5f
 800a73c:	0800ae5f 	.word	0x0800ae5f
 800a740:	0800ab35 	.word	0x0800ab35
 800a744:	0800ae5f 	.word	0x0800ae5f
 800a748:	0800ae5f 	.word	0x0800ae5f
 800a74c:	0800ae5f 	.word	0x0800ae5f
 800a750:	0800ae5f 	.word	0x0800ae5f
 800a754:	0800ae5f 	.word	0x0800ae5f
 800a758:	0800ae5f 	.word	0x0800ae5f
 800a75c:	0800ae5f 	.word	0x0800ae5f
 800a760:	0800ae5f 	.word	0x0800ae5f
 800a764:	0800ae5f 	.word	0x0800ae5f
 800a768:	0800ae5f 	.word	0x0800ae5f
 800a76c:	0800ae5f 	.word	0x0800ae5f
 800a770:	0800ae5f 	.word	0x0800ae5f
 800a774:	0800ae5f 	.word	0x0800ae5f
 800a778:	0800ae5f 	.word	0x0800ae5f
 800a77c:	0800ae5f 	.word	0x0800ae5f
 800a780:	0800aca7 	.word	0x0800aca7
 800a784:	0800ae5f 	.word	0x0800ae5f
 800a788:	0800ae5f 	.word	0x0800ae5f
 800a78c:	0800ae5f 	.word	0x0800ae5f
 800a790:	0800ae5f 	.word	0x0800ae5f
 800a794:	0800ae5f 	.word	0x0800ae5f
 800a798:	0800ae5f 	.word	0x0800ae5f
 800a79c:	0800ae5f 	.word	0x0800ae5f
 800a7a0:	0800ae5f 	.word	0x0800ae5f
 800a7a4:	0800ae5f 	.word	0x0800ae5f
 800a7a8:	0800ae5f 	.word	0x0800ae5f
 800a7ac:	0800ae5f 	.word	0x0800ae5f
 800a7b0:	0800ae5f 	.word	0x0800ae5f
 800a7b4:	0800ae5f 	.word	0x0800ae5f
 800a7b8:	0800ae5f 	.word	0x0800ae5f
 800a7bc:	0800ae5f 	.word	0x0800ae5f
 800a7c0:	0800ae5f 	.word	0x0800ae5f
 800a7c4:	0800ae5f 	.word	0x0800ae5f
 800a7c8:	0800ae5f 	.word	0x0800ae5f
 800a7cc:	0800ae5f 	.word	0x0800ae5f
 800a7d0:	0800ae5f 	.word	0x0800ae5f
 800a7d4:	0800ae5f 	.word	0x0800ae5f
 800a7d8:	0800ae5f 	.word	0x0800ae5f
 800a7dc:	0800ae5f 	.word	0x0800ae5f
 800a7e0:	0800ae5f 	.word	0x0800ae5f
 800a7e4:	0800ae5f 	.word	0x0800ae5f
 800a7e8:	0800ae5f 	.word	0x0800ae5f
 800a7ec:	0800ae5f 	.word	0x0800ae5f
 800a7f0:	0800ae5f 	.word	0x0800ae5f
 800a7f4:	0800ae5f 	.word	0x0800ae5f
 800a7f8:	0800ae5f 	.word	0x0800ae5f
 800a7fc:	0800ae5f 	.word	0x0800ae5f
 800a800:	0800ad9d 	.word	0x0800ad9d
 800a804:	f3af 8000 	nop.w
 800a808:	05161500 	.word	0x05161500
 800a80c:	00000000 	.word	0x00000000
 800a810:	0a2c2a00 	.word	0x0a2c2a00
 800a814:	00000000 	.word	0x00000000
 800a818:	003d0900 	.word	0x003d0900
 800a81c:	3d090000 	.word	0x3d090000
 800a820:	007a1200 	.word	0x007a1200
 800a824:	00f42400 	.word	0x00f42400
 800a828:	01e84800 	.word	0x01e84800
 800a82c:	03d09000 	.word	0x03d09000
 800a830:	061a8000 	.word	0x061a8000
 800a834:	07a12000 	.word	0x07a12000
 800a838:	0f424000 	.word	0x0f424000
 800a83c:	1e848000 	.word	0x1e848000
 800a840:	000aaa00 	.word	0x000aaa00
 800a844:	000ccc00 	.word	0x000ccc00
 800a848:	00155500 	.word	0x00155500
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a84c:	f7fc ff26 	bl	800769c <HAL_RCC_GetPCLK1Freq>
 800a850:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a856:	2b00      	cmp	r3, #0
 800a858:	d044      	beq.n	800a8e4 <UART_SetConfig+0x15d4>
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a85e:	2b01      	cmp	r3, #1
 800a860:	d03e      	beq.n	800a8e0 <UART_SetConfig+0x15d0>
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a866:	2b02      	cmp	r3, #2
 800a868:	d038      	beq.n	800a8dc <UART_SetConfig+0x15cc>
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a86e:	2b03      	cmp	r3, #3
 800a870:	d032      	beq.n	800a8d8 <UART_SetConfig+0x15c8>
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a876:	2b04      	cmp	r3, #4
 800a878:	d02c      	beq.n	800a8d4 <UART_SetConfig+0x15c4>
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a87e:	2b05      	cmp	r3, #5
 800a880:	d026      	beq.n	800a8d0 <UART_SetConfig+0x15c0>
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a886:	2b06      	cmp	r3, #6
 800a888:	d020      	beq.n	800a8cc <UART_SetConfig+0x15bc>
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a88e:	2b07      	cmp	r3, #7
 800a890:	d01a      	beq.n	800a8c8 <UART_SetConfig+0x15b8>
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a896:	2b08      	cmp	r3, #8
 800a898:	d014      	beq.n	800a8c4 <UART_SetConfig+0x15b4>
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a89e:	2b09      	cmp	r3, #9
 800a8a0:	d00e      	beq.n	800a8c0 <UART_SetConfig+0x15b0>
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8a6:	2b0a      	cmp	r3, #10
 800a8a8:	d008      	beq.n	800a8bc <UART_SetConfig+0x15ac>
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8ae:	2b0b      	cmp	r3, #11
 800a8b0:	d102      	bne.n	800a8b8 <UART_SetConfig+0x15a8>
 800a8b2:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a8b6:	e016      	b.n	800a8e6 <UART_SetConfig+0x15d6>
 800a8b8:	2301      	movs	r3, #1
 800a8ba:	e014      	b.n	800a8e6 <UART_SetConfig+0x15d6>
 800a8bc:	2380      	movs	r3, #128	; 0x80
 800a8be:	e012      	b.n	800a8e6 <UART_SetConfig+0x15d6>
 800a8c0:	2340      	movs	r3, #64	; 0x40
 800a8c2:	e010      	b.n	800a8e6 <UART_SetConfig+0x15d6>
 800a8c4:	2320      	movs	r3, #32
 800a8c6:	e00e      	b.n	800a8e6 <UART_SetConfig+0x15d6>
 800a8c8:	2310      	movs	r3, #16
 800a8ca:	e00c      	b.n	800a8e6 <UART_SetConfig+0x15d6>
 800a8cc:	230c      	movs	r3, #12
 800a8ce:	e00a      	b.n	800a8e6 <UART_SetConfig+0x15d6>
 800a8d0:	230a      	movs	r3, #10
 800a8d2:	e008      	b.n	800a8e6 <UART_SetConfig+0x15d6>
 800a8d4:	2308      	movs	r3, #8
 800a8d6:	e006      	b.n	800a8e6 <UART_SetConfig+0x15d6>
 800a8d8:	2306      	movs	r3, #6
 800a8da:	e004      	b.n	800a8e6 <UART_SetConfig+0x15d6>
 800a8dc:	2304      	movs	r3, #4
 800a8de:	e002      	b.n	800a8e6 <UART_SetConfig+0x15d6>
 800a8e0:	2302      	movs	r3, #2
 800a8e2:	e000      	b.n	800a8e6 <UART_SetConfig+0x15d6>
 800a8e4:	2301      	movs	r3, #1
 800a8e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a8e8:	fbb2 f3f3 	udiv	r3, r2, r3
 800a8ec:	005a      	lsls	r2, r3, #1
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	685b      	ldr	r3, [r3, #4]
 800a8f2:	085b      	lsrs	r3, r3, #1
 800a8f4:	441a      	add	r2, r3
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	685b      	ldr	r3, [r3, #4]
 800a8fa:	fbb2 f3f3 	udiv	r3, r2, r3
 800a8fe:	b29b      	uxth	r3, r3
 800a900:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800a902:	e2b0      	b.n	800ae66 <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a904:	f7fc fee0 	bl	80076c8 <HAL_RCC_GetPCLK2Freq>
 800a908:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a90e:	2b00      	cmp	r3, #0
 800a910:	d044      	beq.n	800a99c <UART_SetConfig+0x168c>
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a916:	2b01      	cmp	r3, #1
 800a918:	d03e      	beq.n	800a998 <UART_SetConfig+0x1688>
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a91e:	2b02      	cmp	r3, #2
 800a920:	d038      	beq.n	800a994 <UART_SetConfig+0x1684>
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a926:	2b03      	cmp	r3, #3
 800a928:	d032      	beq.n	800a990 <UART_SetConfig+0x1680>
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a92e:	2b04      	cmp	r3, #4
 800a930:	d02c      	beq.n	800a98c <UART_SetConfig+0x167c>
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a936:	2b05      	cmp	r3, #5
 800a938:	d026      	beq.n	800a988 <UART_SetConfig+0x1678>
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a93e:	2b06      	cmp	r3, #6
 800a940:	d020      	beq.n	800a984 <UART_SetConfig+0x1674>
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a946:	2b07      	cmp	r3, #7
 800a948:	d01a      	beq.n	800a980 <UART_SetConfig+0x1670>
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a94e:	2b08      	cmp	r3, #8
 800a950:	d014      	beq.n	800a97c <UART_SetConfig+0x166c>
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a956:	2b09      	cmp	r3, #9
 800a958:	d00e      	beq.n	800a978 <UART_SetConfig+0x1668>
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a95e:	2b0a      	cmp	r3, #10
 800a960:	d008      	beq.n	800a974 <UART_SetConfig+0x1664>
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a966:	2b0b      	cmp	r3, #11
 800a968:	d102      	bne.n	800a970 <UART_SetConfig+0x1660>
 800a96a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a96e:	e016      	b.n	800a99e <UART_SetConfig+0x168e>
 800a970:	2301      	movs	r3, #1
 800a972:	e014      	b.n	800a99e <UART_SetConfig+0x168e>
 800a974:	2380      	movs	r3, #128	; 0x80
 800a976:	e012      	b.n	800a99e <UART_SetConfig+0x168e>
 800a978:	2340      	movs	r3, #64	; 0x40
 800a97a:	e010      	b.n	800a99e <UART_SetConfig+0x168e>
 800a97c:	2320      	movs	r3, #32
 800a97e:	e00e      	b.n	800a99e <UART_SetConfig+0x168e>
 800a980:	2310      	movs	r3, #16
 800a982:	e00c      	b.n	800a99e <UART_SetConfig+0x168e>
 800a984:	230c      	movs	r3, #12
 800a986:	e00a      	b.n	800a99e <UART_SetConfig+0x168e>
 800a988:	230a      	movs	r3, #10
 800a98a:	e008      	b.n	800a99e <UART_SetConfig+0x168e>
 800a98c:	2308      	movs	r3, #8
 800a98e:	e006      	b.n	800a99e <UART_SetConfig+0x168e>
 800a990:	2306      	movs	r3, #6
 800a992:	e004      	b.n	800a99e <UART_SetConfig+0x168e>
 800a994:	2304      	movs	r3, #4
 800a996:	e002      	b.n	800a99e <UART_SetConfig+0x168e>
 800a998:	2302      	movs	r3, #2
 800a99a:	e000      	b.n	800a99e <UART_SetConfig+0x168e>
 800a99c:	2301      	movs	r3, #1
 800a99e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a9a0:	fbb2 f3f3 	udiv	r3, r2, r3
 800a9a4:	005a      	lsls	r2, r3, #1
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	685b      	ldr	r3, [r3, #4]
 800a9aa:	085b      	lsrs	r3, r3, #1
 800a9ac:	441a      	add	r2, r3
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	685b      	ldr	r3, [r3, #4]
 800a9b2:	fbb2 f3f3 	udiv	r3, r2, r3
 800a9b6:	b29b      	uxth	r3, r3
 800a9b8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800a9ba:	e254      	b.n	800ae66 <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a9bc:	f107 0318 	add.w	r3, r7, #24
 800a9c0:	4618      	mov	r0, r3
 800a9c2:	f7fd fd9d 	bl	8008500 <HAL_RCCEx_GetPLL2ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a9c6:	69fa      	ldr	r2, [r7, #28]
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	d044      	beq.n	800aa5a <UART_SetConfig+0x174a>
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9d4:	2b01      	cmp	r3, #1
 800a9d6:	d03e      	beq.n	800aa56 <UART_SetConfig+0x1746>
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9dc:	2b02      	cmp	r3, #2
 800a9de:	d038      	beq.n	800aa52 <UART_SetConfig+0x1742>
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9e4:	2b03      	cmp	r3, #3
 800a9e6:	d032      	beq.n	800aa4e <UART_SetConfig+0x173e>
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9ec:	2b04      	cmp	r3, #4
 800a9ee:	d02c      	beq.n	800aa4a <UART_SetConfig+0x173a>
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9f4:	2b05      	cmp	r3, #5
 800a9f6:	d026      	beq.n	800aa46 <UART_SetConfig+0x1736>
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9fc:	2b06      	cmp	r3, #6
 800a9fe:	d020      	beq.n	800aa42 <UART_SetConfig+0x1732>
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa04:	2b07      	cmp	r3, #7
 800aa06:	d01a      	beq.n	800aa3e <UART_SetConfig+0x172e>
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa0c:	2b08      	cmp	r3, #8
 800aa0e:	d014      	beq.n	800aa3a <UART_SetConfig+0x172a>
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa14:	2b09      	cmp	r3, #9
 800aa16:	d00e      	beq.n	800aa36 <UART_SetConfig+0x1726>
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa1c:	2b0a      	cmp	r3, #10
 800aa1e:	d008      	beq.n	800aa32 <UART_SetConfig+0x1722>
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa24:	2b0b      	cmp	r3, #11
 800aa26:	d102      	bne.n	800aa2e <UART_SetConfig+0x171e>
 800aa28:	f44f 7380 	mov.w	r3, #256	; 0x100
 800aa2c:	e016      	b.n	800aa5c <UART_SetConfig+0x174c>
 800aa2e:	2301      	movs	r3, #1
 800aa30:	e014      	b.n	800aa5c <UART_SetConfig+0x174c>
 800aa32:	2380      	movs	r3, #128	; 0x80
 800aa34:	e012      	b.n	800aa5c <UART_SetConfig+0x174c>
 800aa36:	2340      	movs	r3, #64	; 0x40
 800aa38:	e010      	b.n	800aa5c <UART_SetConfig+0x174c>
 800aa3a:	2320      	movs	r3, #32
 800aa3c:	e00e      	b.n	800aa5c <UART_SetConfig+0x174c>
 800aa3e:	2310      	movs	r3, #16
 800aa40:	e00c      	b.n	800aa5c <UART_SetConfig+0x174c>
 800aa42:	230c      	movs	r3, #12
 800aa44:	e00a      	b.n	800aa5c <UART_SetConfig+0x174c>
 800aa46:	230a      	movs	r3, #10
 800aa48:	e008      	b.n	800aa5c <UART_SetConfig+0x174c>
 800aa4a:	2308      	movs	r3, #8
 800aa4c:	e006      	b.n	800aa5c <UART_SetConfig+0x174c>
 800aa4e:	2306      	movs	r3, #6
 800aa50:	e004      	b.n	800aa5c <UART_SetConfig+0x174c>
 800aa52:	2304      	movs	r3, #4
 800aa54:	e002      	b.n	800aa5c <UART_SetConfig+0x174c>
 800aa56:	2302      	movs	r3, #2
 800aa58:	e000      	b.n	800aa5c <UART_SetConfig+0x174c>
 800aa5a:	2301      	movs	r3, #1
 800aa5c:	fbb2 f3f3 	udiv	r3, r2, r3
 800aa60:	005a      	lsls	r2, r3, #1
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	685b      	ldr	r3, [r3, #4]
 800aa66:	085b      	lsrs	r3, r3, #1
 800aa68:	441a      	add	r2, r3
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	685b      	ldr	r3, [r3, #4]
 800aa6e:	fbb2 f3f3 	udiv	r3, r2, r3
 800aa72:	b29b      	uxth	r3, r3
 800aa74:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800aa76:	e1f6      	b.n	800ae66 <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800aa78:	f107 030c 	add.w	r3, r7, #12
 800aa7c:	4618      	mov	r0, r3
 800aa7e:	f7fd fe8b 	bl	8008798 <HAL_RCCEx_GetPLL3ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800aa82:	693a      	ldr	r2, [r7, #16]
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa88:	2b00      	cmp	r3, #0
 800aa8a:	d044      	beq.n	800ab16 <UART_SetConfig+0x1806>
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa90:	2b01      	cmp	r3, #1
 800aa92:	d03e      	beq.n	800ab12 <UART_SetConfig+0x1802>
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa98:	2b02      	cmp	r3, #2
 800aa9a:	d038      	beq.n	800ab0e <UART_SetConfig+0x17fe>
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aaa0:	2b03      	cmp	r3, #3
 800aaa2:	d032      	beq.n	800ab0a <UART_SetConfig+0x17fa>
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aaa8:	2b04      	cmp	r3, #4
 800aaaa:	d02c      	beq.n	800ab06 <UART_SetConfig+0x17f6>
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aab0:	2b05      	cmp	r3, #5
 800aab2:	d026      	beq.n	800ab02 <UART_SetConfig+0x17f2>
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aab8:	2b06      	cmp	r3, #6
 800aaba:	d020      	beq.n	800aafe <UART_SetConfig+0x17ee>
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aac0:	2b07      	cmp	r3, #7
 800aac2:	d01a      	beq.n	800aafa <UART_SetConfig+0x17ea>
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aac8:	2b08      	cmp	r3, #8
 800aaca:	d014      	beq.n	800aaf6 <UART_SetConfig+0x17e6>
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aad0:	2b09      	cmp	r3, #9
 800aad2:	d00e      	beq.n	800aaf2 <UART_SetConfig+0x17e2>
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aad8:	2b0a      	cmp	r3, #10
 800aada:	d008      	beq.n	800aaee <UART_SetConfig+0x17de>
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aae0:	2b0b      	cmp	r3, #11
 800aae2:	d102      	bne.n	800aaea <UART_SetConfig+0x17da>
 800aae4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800aae8:	e016      	b.n	800ab18 <UART_SetConfig+0x1808>
 800aaea:	2301      	movs	r3, #1
 800aaec:	e014      	b.n	800ab18 <UART_SetConfig+0x1808>
 800aaee:	2380      	movs	r3, #128	; 0x80
 800aaf0:	e012      	b.n	800ab18 <UART_SetConfig+0x1808>
 800aaf2:	2340      	movs	r3, #64	; 0x40
 800aaf4:	e010      	b.n	800ab18 <UART_SetConfig+0x1808>
 800aaf6:	2320      	movs	r3, #32
 800aaf8:	e00e      	b.n	800ab18 <UART_SetConfig+0x1808>
 800aafa:	2310      	movs	r3, #16
 800aafc:	e00c      	b.n	800ab18 <UART_SetConfig+0x1808>
 800aafe:	230c      	movs	r3, #12
 800ab00:	e00a      	b.n	800ab18 <UART_SetConfig+0x1808>
 800ab02:	230a      	movs	r3, #10
 800ab04:	e008      	b.n	800ab18 <UART_SetConfig+0x1808>
 800ab06:	2308      	movs	r3, #8
 800ab08:	e006      	b.n	800ab18 <UART_SetConfig+0x1808>
 800ab0a:	2306      	movs	r3, #6
 800ab0c:	e004      	b.n	800ab18 <UART_SetConfig+0x1808>
 800ab0e:	2304      	movs	r3, #4
 800ab10:	e002      	b.n	800ab18 <UART_SetConfig+0x1808>
 800ab12:	2302      	movs	r3, #2
 800ab14:	e000      	b.n	800ab18 <UART_SetConfig+0x1808>
 800ab16:	2301      	movs	r3, #1
 800ab18:	fbb2 f3f3 	udiv	r3, r2, r3
 800ab1c:	005a      	lsls	r2, r3, #1
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	685b      	ldr	r3, [r3, #4]
 800ab22:	085b      	lsrs	r3, r3, #1
 800ab24:	441a      	add	r2, r3
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	685b      	ldr	r3, [r3, #4]
 800ab2a:	fbb2 f3f3 	udiv	r3, r2, r3
 800ab2e:	b29b      	uxth	r3, r3
 800ab30:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800ab32:	e198      	b.n	800ae66 <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ab34:	4b87      	ldr	r3, [pc, #540]	; (800ad54 <UART_SetConfig+0x1a44>)
 800ab36:	681b      	ldr	r3, [r3, #0]
 800ab38:	f003 0320 	and.w	r3, r3, #32
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	d05e      	beq.n	800abfe <UART_SetConfig+0x18ee>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ab40:	4b84      	ldr	r3, [pc, #528]	; (800ad54 <UART_SetConfig+0x1a44>)
 800ab42:	681b      	ldr	r3, [r3, #0]
 800ab44:	08db      	lsrs	r3, r3, #3
 800ab46:	f003 0303 	and.w	r3, r3, #3
 800ab4a:	4a83      	ldr	r2, [pc, #524]	; (800ad58 <UART_SetConfig+0x1a48>)
 800ab4c:	40da      	lsrs	r2, r3
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	d044      	beq.n	800abe0 <UART_SetConfig+0x18d0>
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab5a:	2b01      	cmp	r3, #1
 800ab5c:	d03e      	beq.n	800abdc <UART_SetConfig+0x18cc>
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab62:	2b02      	cmp	r3, #2
 800ab64:	d038      	beq.n	800abd8 <UART_SetConfig+0x18c8>
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab6a:	2b03      	cmp	r3, #3
 800ab6c:	d032      	beq.n	800abd4 <UART_SetConfig+0x18c4>
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab72:	2b04      	cmp	r3, #4
 800ab74:	d02c      	beq.n	800abd0 <UART_SetConfig+0x18c0>
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab7a:	2b05      	cmp	r3, #5
 800ab7c:	d026      	beq.n	800abcc <UART_SetConfig+0x18bc>
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab82:	2b06      	cmp	r3, #6
 800ab84:	d020      	beq.n	800abc8 <UART_SetConfig+0x18b8>
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab8a:	2b07      	cmp	r3, #7
 800ab8c:	d01a      	beq.n	800abc4 <UART_SetConfig+0x18b4>
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab92:	2b08      	cmp	r3, #8
 800ab94:	d014      	beq.n	800abc0 <UART_SetConfig+0x18b0>
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab9a:	2b09      	cmp	r3, #9
 800ab9c:	d00e      	beq.n	800abbc <UART_SetConfig+0x18ac>
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aba2:	2b0a      	cmp	r3, #10
 800aba4:	d008      	beq.n	800abb8 <UART_SetConfig+0x18a8>
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abaa:	2b0b      	cmp	r3, #11
 800abac:	d102      	bne.n	800abb4 <UART_SetConfig+0x18a4>
 800abae:	f44f 7380 	mov.w	r3, #256	; 0x100
 800abb2:	e016      	b.n	800abe2 <UART_SetConfig+0x18d2>
 800abb4:	2301      	movs	r3, #1
 800abb6:	e014      	b.n	800abe2 <UART_SetConfig+0x18d2>
 800abb8:	2380      	movs	r3, #128	; 0x80
 800abba:	e012      	b.n	800abe2 <UART_SetConfig+0x18d2>
 800abbc:	2340      	movs	r3, #64	; 0x40
 800abbe:	e010      	b.n	800abe2 <UART_SetConfig+0x18d2>
 800abc0:	2320      	movs	r3, #32
 800abc2:	e00e      	b.n	800abe2 <UART_SetConfig+0x18d2>
 800abc4:	2310      	movs	r3, #16
 800abc6:	e00c      	b.n	800abe2 <UART_SetConfig+0x18d2>
 800abc8:	230c      	movs	r3, #12
 800abca:	e00a      	b.n	800abe2 <UART_SetConfig+0x18d2>
 800abcc:	230a      	movs	r3, #10
 800abce:	e008      	b.n	800abe2 <UART_SetConfig+0x18d2>
 800abd0:	2308      	movs	r3, #8
 800abd2:	e006      	b.n	800abe2 <UART_SetConfig+0x18d2>
 800abd4:	2306      	movs	r3, #6
 800abd6:	e004      	b.n	800abe2 <UART_SetConfig+0x18d2>
 800abd8:	2304      	movs	r3, #4
 800abda:	e002      	b.n	800abe2 <UART_SetConfig+0x18d2>
 800abdc:	2302      	movs	r3, #2
 800abde:	e000      	b.n	800abe2 <UART_SetConfig+0x18d2>
 800abe0:	2301      	movs	r3, #1
 800abe2:	fbb2 f3f3 	udiv	r3, r2, r3
 800abe6:	005a      	lsls	r2, r3, #1
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	685b      	ldr	r3, [r3, #4]
 800abec:	085b      	lsrs	r3, r3, #1
 800abee:	441a      	add	r2, r3
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	685b      	ldr	r3, [r3, #4]
 800abf4:	fbb2 f3f3 	udiv	r3, r2, r3
 800abf8:	b29b      	uxth	r3, r3
 800abfa:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
        }
        break;
 800abfc:	e133      	b.n	800ae66 <UART_SetConfig+0x1b56>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	d043      	beq.n	800ac8e <UART_SetConfig+0x197e>
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac0a:	2b01      	cmp	r3, #1
 800ac0c:	d03d      	beq.n	800ac8a <UART_SetConfig+0x197a>
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac12:	2b02      	cmp	r3, #2
 800ac14:	d037      	beq.n	800ac86 <UART_SetConfig+0x1976>
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac1a:	2b03      	cmp	r3, #3
 800ac1c:	d031      	beq.n	800ac82 <UART_SetConfig+0x1972>
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac22:	2b04      	cmp	r3, #4
 800ac24:	d02b      	beq.n	800ac7e <UART_SetConfig+0x196e>
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac2a:	2b05      	cmp	r3, #5
 800ac2c:	d025      	beq.n	800ac7a <UART_SetConfig+0x196a>
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac32:	2b06      	cmp	r3, #6
 800ac34:	d01f      	beq.n	800ac76 <UART_SetConfig+0x1966>
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac3a:	2b07      	cmp	r3, #7
 800ac3c:	d019      	beq.n	800ac72 <UART_SetConfig+0x1962>
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac42:	2b08      	cmp	r3, #8
 800ac44:	d013      	beq.n	800ac6e <UART_SetConfig+0x195e>
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac4a:	2b09      	cmp	r3, #9
 800ac4c:	d00d      	beq.n	800ac6a <UART_SetConfig+0x195a>
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac52:	2b0a      	cmp	r3, #10
 800ac54:	d007      	beq.n	800ac66 <UART_SetConfig+0x1956>
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac5a:	2b0b      	cmp	r3, #11
 800ac5c:	d101      	bne.n	800ac62 <UART_SetConfig+0x1952>
 800ac5e:	4b3f      	ldr	r3, [pc, #252]	; (800ad5c <UART_SetConfig+0x1a4c>)
 800ac60:	e016      	b.n	800ac90 <UART_SetConfig+0x1980>
 800ac62:	4b3f      	ldr	r3, [pc, #252]	; (800ad60 <UART_SetConfig+0x1a50>)
 800ac64:	e014      	b.n	800ac90 <UART_SetConfig+0x1980>
 800ac66:	4b3f      	ldr	r3, [pc, #252]	; (800ad64 <UART_SetConfig+0x1a54>)
 800ac68:	e012      	b.n	800ac90 <UART_SetConfig+0x1980>
 800ac6a:	4b3f      	ldr	r3, [pc, #252]	; (800ad68 <UART_SetConfig+0x1a58>)
 800ac6c:	e010      	b.n	800ac90 <UART_SetConfig+0x1980>
 800ac6e:	4b3f      	ldr	r3, [pc, #252]	; (800ad6c <UART_SetConfig+0x1a5c>)
 800ac70:	e00e      	b.n	800ac90 <UART_SetConfig+0x1980>
 800ac72:	4b3f      	ldr	r3, [pc, #252]	; (800ad70 <UART_SetConfig+0x1a60>)
 800ac74:	e00c      	b.n	800ac90 <UART_SetConfig+0x1980>
 800ac76:	4b3f      	ldr	r3, [pc, #252]	; (800ad74 <UART_SetConfig+0x1a64>)
 800ac78:	e00a      	b.n	800ac90 <UART_SetConfig+0x1980>
 800ac7a:	4b3f      	ldr	r3, [pc, #252]	; (800ad78 <UART_SetConfig+0x1a68>)
 800ac7c:	e008      	b.n	800ac90 <UART_SetConfig+0x1980>
 800ac7e:	4b3f      	ldr	r3, [pc, #252]	; (800ad7c <UART_SetConfig+0x1a6c>)
 800ac80:	e006      	b.n	800ac90 <UART_SetConfig+0x1980>
 800ac82:	4b3f      	ldr	r3, [pc, #252]	; (800ad80 <UART_SetConfig+0x1a70>)
 800ac84:	e004      	b.n	800ac90 <UART_SetConfig+0x1980>
 800ac86:	4b3f      	ldr	r3, [pc, #252]	; (800ad84 <UART_SetConfig+0x1a74>)
 800ac88:	e002      	b.n	800ac90 <UART_SetConfig+0x1980>
 800ac8a:	4b33      	ldr	r3, [pc, #204]	; (800ad58 <UART_SetConfig+0x1a48>)
 800ac8c:	e000      	b.n	800ac90 <UART_SetConfig+0x1980>
 800ac8e:	4b34      	ldr	r3, [pc, #208]	; (800ad60 <UART_SetConfig+0x1a50>)
 800ac90:	687a      	ldr	r2, [r7, #4]
 800ac92:	6852      	ldr	r2, [r2, #4]
 800ac94:	0852      	lsrs	r2, r2, #1
 800ac96:	441a      	add	r2, r3
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	685b      	ldr	r3, [r3, #4]
 800ac9c:	fbb2 f3f3 	udiv	r3, r2, r3
 800aca0:	b29b      	uxth	r3, r3
 800aca2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800aca4:	e0df      	b.n	800ae66 <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_CSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acaa:	2b00      	cmp	r3, #0
 800acac:	d045      	beq.n	800ad3a <UART_SetConfig+0x1a2a>
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acb2:	2b01      	cmp	r3, #1
 800acb4:	d03f      	beq.n	800ad36 <UART_SetConfig+0x1a26>
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acba:	2b02      	cmp	r3, #2
 800acbc:	d039      	beq.n	800ad32 <UART_SetConfig+0x1a22>
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acc2:	2b03      	cmp	r3, #3
 800acc4:	d033      	beq.n	800ad2e <UART_SetConfig+0x1a1e>
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acca:	2b04      	cmp	r3, #4
 800accc:	d02d      	beq.n	800ad2a <UART_SetConfig+0x1a1a>
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acd2:	2b05      	cmp	r3, #5
 800acd4:	d027      	beq.n	800ad26 <UART_SetConfig+0x1a16>
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acda:	2b06      	cmp	r3, #6
 800acdc:	d021      	beq.n	800ad22 <UART_SetConfig+0x1a12>
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ace2:	2b07      	cmp	r3, #7
 800ace4:	d01b      	beq.n	800ad1e <UART_SetConfig+0x1a0e>
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acea:	2b08      	cmp	r3, #8
 800acec:	d015      	beq.n	800ad1a <UART_SetConfig+0x1a0a>
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acf2:	2b09      	cmp	r3, #9
 800acf4:	d00f      	beq.n	800ad16 <UART_SetConfig+0x1a06>
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acfa:	2b0a      	cmp	r3, #10
 800acfc:	d008      	beq.n	800ad10 <UART_SetConfig+0x1a00>
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad02:	2b0b      	cmp	r3, #11
 800ad04:	d102      	bne.n	800ad0c <UART_SetConfig+0x19fc>
 800ad06:	f647 2312 	movw	r3, #31250	; 0x7a12
 800ad0a:	e017      	b.n	800ad3c <UART_SetConfig+0x1a2c>
 800ad0c:	4b18      	ldr	r3, [pc, #96]	; (800ad70 <UART_SetConfig+0x1a60>)
 800ad0e:	e015      	b.n	800ad3c <UART_SetConfig+0x1a2c>
 800ad10:	f24f 4324 	movw	r3, #62500	; 0xf424
 800ad14:	e012      	b.n	800ad3c <UART_SetConfig+0x1a2c>
 800ad16:	4b1c      	ldr	r3, [pc, #112]	; (800ad88 <UART_SetConfig+0x1a78>)
 800ad18:	e010      	b.n	800ad3c <UART_SetConfig+0x1a2c>
 800ad1a:	4b1c      	ldr	r3, [pc, #112]	; (800ad8c <UART_SetConfig+0x1a7c>)
 800ad1c:	e00e      	b.n	800ad3c <UART_SetConfig+0x1a2c>
 800ad1e:	4b0f      	ldr	r3, [pc, #60]	; (800ad5c <UART_SetConfig+0x1a4c>)
 800ad20:	e00c      	b.n	800ad3c <UART_SetConfig+0x1a2c>
 800ad22:	4b1b      	ldr	r3, [pc, #108]	; (800ad90 <UART_SetConfig+0x1a80>)
 800ad24:	e00a      	b.n	800ad3c <UART_SetConfig+0x1a2c>
 800ad26:	4b1b      	ldr	r3, [pc, #108]	; (800ad94 <UART_SetConfig+0x1a84>)
 800ad28:	e008      	b.n	800ad3c <UART_SetConfig+0x1a2c>
 800ad2a:	4b0e      	ldr	r3, [pc, #56]	; (800ad64 <UART_SetConfig+0x1a54>)
 800ad2c:	e006      	b.n	800ad3c <UART_SetConfig+0x1a2c>
 800ad2e:	4b1a      	ldr	r3, [pc, #104]	; (800ad98 <UART_SetConfig+0x1a88>)
 800ad30:	e004      	b.n	800ad3c <UART_SetConfig+0x1a2c>
 800ad32:	4b0d      	ldr	r3, [pc, #52]	; (800ad68 <UART_SetConfig+0x1a58>)
 800ad34:	e002      	b.n	800ad3c <UART_SetConfig+0x1a2c>
 800ad36:	4b0d      	ldr	r3, [pc, #52]	; (800ad6c <UART_SetConfig+0x1a5c>)
 800ad38:	e000      	b.n	800ad3c <UART_SetConfig+0x1a2c>
 800ad3a:	4b0d      	ldr	r3, [pc, #52]	; (800ad70 <UART_SetConfig+0x1a60>)
 800ad3c:	687a      	ldr	r2, [r7, #4]
 800ad3e:	6852      	ldr	r2, [r2, #4]
 800ad40:	0852      	lsrs	r2, r2, #1
 800ad42:	441a      	add	r2, r3
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	685b      	ldr	r3, [r3, #4]
 800ad48:	fbb2 f3f3 	udiv	r3, r2, r3
 800ad4c:	b29b      	uxth	r3, r3
 800ad4e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800ad50:	e089      	b.n	800ae66 <UART_SetConfig+0x1b56>
 800ad52:	bf00      	nop
 800ad54:	58024400 	.word	0x58024400
 800ad58:	03d09000 	.word	0x03d09000
 800ad5c:	0007a120 	.word	0x0007a120
 800ad60:	07a12000 	.word	0x07a12000
 800ad64:	000f4240 	.word	0x000f4240
 800ad68:	001e8480 	.word	0x001e8480
 800ad6c:	003d0900 	.word	0x003d0900
 800ad70:	007a1200 	.word	0x007a1200
 800ad74:	00a2c2aa 	.word	0x00a2c2aa
 800ad78:	00c35000 	.word	0x00c35000
 800ad7c:	00f42400 	.word	0x00f42400
 800ad80:	01458554 	.word	0x01458554
 800ad84:	01e84800 	.word	0x01e84800
 800ad88:	0001e848 	.word	0x0001e848
 800ad8c:	0003d090 	.word	0x0003d090
 800ad90:	000a2c2a 	.word	0x000a2c2a
 800ad94:	000c3500 	.word	0x000c3500
 800ad98:	00145854 	.word	0x00145854
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ada0:	2b00      	cmp	r3, #0
 800ada2:	d04f      	beq.n	800ae44 <UART_SetConfig+0x1b34>
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ada8:	2b01      	cmp	r3, #1
 800adaa:	d048      	beq.n	800ae3e <UART_SetConfig+0x1b2e>
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adb0:	2b02      	cmp	r3, #2
 800adb2:	d041      	beq.n	800ae38 <UART_SetConfig+0x1b28>
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adb8:	2b03      	cmp	r3, #3
 800adba:	d03a      	beq.n	800ae32 <UART_SetConfig+0x1b22>
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adc0:	2b04      	cmp	r3, #4
 800adc2:	d033      	beq.n	800ae2c <UART_SetConfig+0x1b1c>
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adc8:	2b05      	cmp	r3, #5
 800adca:	d02c      	beq.n	800ae26 <UART_SetConfig+0x1b16>
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800add0:	2b06      	cmp	r3, #6
 800add2:	d025      	beq.n	800ae20 <UART_SetConfig+0x1b10>
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800add8:	2b07      	cmp	r3, #7
 800adda:	d01e      	beq.n	800ae1a <UART_SetConfig+0x1b0a>
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ade0:	2b08      	cmp	r3, #8
 800ade2:	d017      	beq.n	800ae14 <UART_SetConfig+0x1b04>
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ade8:	2b09      	cmp	r3, #9
 800adea:	d010      	beq.n	800ae0e <UART_SetConfig+0x1afe>
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adf0:	2b0a      	cmp	r3, #10
 800adf2:	d009      	beq.n	800ae08 <UART_SetConfig+0x1af8>
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adf8:	2b0b      	cmp	r3, #11
 800adfa:	d102      	bne.n	800ae02 <UART_SetConfig+0x1af2>
 800adfc:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ae00:	e022      	b.n	800ae48 <UART_SetConfig+0x1b38>
 800ae02:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800ae06:	e01f      	b.n	800ae48 <UART_SetConfig+0x1b38>
 800ae08:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ae0c:	e01c      	b.n	800ae48 <UART_SetConfig+0x1b38>
 800ae0e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ae12:	e019      	b.n	800ae48 <UART_SetConfig+0x1b38>
 800ae14:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ae18:	e016      	b.n	800ae48 <UART_SetConfig+0x1b38>
 800ae1a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ae1e:	e013      	b.n	800ae48 <UART_SetConfig+0x1b38>
 800ae20:	f241 5354 	movw	r3, #5460	; 0x1554
 800ae24:	e010      	b.n	800ae48 <UART_SetConfig+0x1b38>
 800ae26:	f641 1398 	movw	r3, #6552	; 0x1998
 800ae2a:	e00d      	b.n	800ae48 <UART_SetConfig+0x1b38>
 800ae2c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800ae30:	e00a      	b.n	800ae48 <UART_SetConfig+0x1b38>
 800ae32:	f642 23aa 	movw	r3, #10922	; 0x2aaa
 800ae36:	e007      	b.n	800ae48 <UART_SetConfig+0x1b38>
 800ae38:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800ae3c:	e004      	b.n	800ae48 <UART_SetConfig+0x1b38>
 800ae3e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ae42:	e001      	b.n	800ae48 <UART_SetConfig+0x1b38>
 800ae44:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800ae48:	687a      	ldr	r2, [r7, #4]
 800ae4a:	6852      	ldr	r2, [r2, #4]
 800ae4c:	0852      	lsrs	r2, r2, #1
 800ae4e:	441a      	add	r2, r3
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	685b      	ldr	r3, [r3, #4]
 800ae54:	fbb2 f3f3 	udiv	r3, r2, r3
 800ae58:	b29b      	uxth	r3, r3
 800ae5a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800ae5c:	e003      	b.n	800ae66 <UART_SetConfig+0x1b56>
      default:
        ret = HAL_ERROR;
 800ae5e:	2301      	movs	r3, #1
 800ae60:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 800ae64:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ae66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae68:	2b0f      	cmp	r3, #15
 800ae6a:	d916      	bls.n	800ae9a <UART_SetConfig+0x1b8a>
 800ae6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae6e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ae72:	d212      	bcs.n	800ae9a <UART_SetConfig+0x1b8a>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800ae74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae76:	b29b      	uxth	r3, r3
 800ae78:	f023 030f 	bic.w	r3, r3, #15
 800ae7c:	84fb      	strh	r3, [r7, #38]	; 0x26
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800ae7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae80:	085b      	lsrs	r3, r3, #1
 800ae82:	b29b      	uxth	r3, r3
 800ae84:	f003 0307 	and.w	r3, r3, #7
 800ae88:	b29a      	uxth	r2, r3
 800ae8a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800ae8c:	4313      	orrs	r3, r2
 800ae8e:	84fb      	strh	r3, [r7, #38]	; 0x26
      huart->Instance->BRR = brrtemp;
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	681b      	ldr	r3, [r3, #0]
 800ae94:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800ae96:	60da      	str	r2, [r3, #12]
 800ae98:	e3a3      	b.n	800b5e2 <UART_SetConfig+0x22d2>
    }
    else
    {
      ret = HAL_ERROR;
 800ae9a:	2301      	movs	r3, #1
 800ae9c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aea0:	e39f      	b.n	800b5e2 <UART_SetConfig+0x22d2>
    }
  }
  else
  {
    switch (clocksource)
 800aea2:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800aea6:	2b40      	cmp	r3, #64	; 0x40
 800aea8:	f200 8388 	bhi.w	800b5bc <UART_SetConfig+0x22ac>
 800aeac:	a201      	add	r2, pc, #4	; (adr r2, 800aeb4 <UART_SetConfig+0x1ba4>)
 800aeae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aeb2:	bf00      	nop
 800aeb4:	0800afb9 	.word	0x0800afb9
 800aeb8:	0800b06f 	.word	0x0800b06f
 800aebc:	0800b5bd 	.word	0x0800b5bd
 800aec0:	0800b5bd 	.word	0x0800b5bd
 800aec4:	0800b125 	.word	0x0800b125
 800aec8:	0800b5bd 	.word	0x0800b5bd
 800aecc:	0800b5bd 	.word	0x0800b5bd
 800aed0:	0800b5bd 	.word	0x0800b5bd
 800aed4:	0800b1df 	.word	0x0800b1df
 800aed8:	0800b5bd 	.word	0x0800b5bd
 800aedc:	0800b5bd 	.word	0x0800b5bd
 800aee0:	0800b5bd 	.word	0x0800b5bd
 800aee4:	0800b5bd 	.word	0x0800b5bd
 800aee8:	0800b5bd 	.word	0x0800b5bd
 800aeec:	0800b5bd 	.word	0x0800b5bd
 800aef0:	0800b5bd 	.word	0x0800b5bd
 800aef4:	0800b299 	.word	0x0800b299
 800aef8:	0800b5bd 	.word	0x0800b5bd
 800aefc:	0800b5bd 	.word	0x0800b5bd
 800af00:	0800b5bd 	.word	0x0800b5bd
 800af04:	0800b5bd 	.word	0x0800b5bd
 800af08:	0800b5bd 	.word	0x0800b5bd
 800af0c:	0800b5bd 	.word	0x0800b5bd
 800af10:	0800b5bd 	.word	0x0800b5bd
 800af14:	0800b5bd 	.word	0x0800b5bd
 800af18:	0800b5bd 	.word	0x0800b5bd
 800af1c:	0800b5bd 	.word	0x0800b5bd
 800af20:	0800b5bd 	.word	0x0800b5bd
 800af24:	0800b5bd 	.word	0x0800b5bd
 800af28:	0800b5bd 	.word	0x0800b5bd
 800af2c:	0800b5bd 	.word	0x0800b5bd
 800af30:	0800b5bd 	.word	0x0800b5bd
 800af34:	0800b409 	.word	0x0800b409
 800af38:	0800b5bd 	.word	0x0800b5bd
 800af3c:	0800b5bd 	.word	0x0800b5bd
 800af40:	0800b5bd 	.word	0x0800b5bd
 800af44:	0800b5bd 	.word	0x0800b5bd
 800af48:	0800b5bd 	.word	0x0800b5bd
 800af4c:	0800b5bd 	.word	0x0800b5bd
 800af50:	0800b5bd 	.word	0x0800b5bd
 800af54:	0800b5bd 	.word	0x0800b5bd
 800af58:	0800b5bd 	.word	0x0800b5bd
 800af5c:	0800b5bd 	.word	0x0800b5bd
 800af60:	0800b5bd 	.word	0x0800b5bd
 800af64:	0800b5bd 	.word	0x0800b5bd
 800af68:	0800b5bd 	.word	0x0800b5bd
 800af6c:	0800b5bd 	.word	0x0800b5bd
 800af70:	0800b5bd 	.word	0x0800b5bd
 800af74:	0800b5bd 	.word	0x0800b5bd
 800af78:	0800b5bd 	.word	0x0800b5bd
 800af7c:	0800b5bd 	.word	0x0800b5bd
 800af80:	0800b5bd 	.word	0x0800b5bd
 800af84:	0800b5bd 	.word	0x0800b5bd
 800af88:	0800b5bd 	.word	0x0800b5bd
 800af8c:	0800b5bd 	.word	0x0800b5bd
 800af90:	0800b5bd 	.word	0x0800b5bd
 800af94:	0800b5bd 	.word	0x0800b5bd
 800af98:	0800b5bd 	.word	0x0800b5bd
 800af9c:	0800b5bd 	.word	0x0800b5bd
 800afa0:	0800b5bd 	.word	0x0800b5bd
 800afa4:	0800b5bd 	.word	0x0800b5bd
 800afa8:	0800b5bd 	.word	0x0800b5bd
 800afac:	0800b5bd 	.word	0x0800b5bd
 800afb0:	0800b5bd 	.word	0x0800b5bd
 800afb4:	0800b4fd 	.word	0x0800b4fd
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800afb8:	f7fc fb70 	bl	800769c <HAL_RCC_GetPCLK1Freq>
 800afbc:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afc2:	2b00      	cmp	r3, #0
 800afc4:	d044      	beq.n	800b050 <UART_SetConfig+0x1d40>
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afca:	2b01      	cmp	r3, #1
 800afcc:	d03e      	beq.n	800b04c <UART_SetConfig+0x1d3c>
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afd2:	2b02      	cmp	r3, #2
 800afd4:	d038      	beq.n	800b048 <UART_SetConfig+0x1d38>
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afda:	2b03      	cmp	r3, #3
 800afdc:	d032      	beq.n	800b044 <UART_SetConfig+0x1d34>
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afe2:	2b04      	cmp	r3, #4
 800afe4:	d02c      	beq.n	800b040 <UART_SetConfig+0x1d30>
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afea:	2b05      	cmp	r3, #5
 800afec:	d026      	beq.n	800b03c <UART_SetConfig+0x1d2c>
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aff2:	2b06      	cmp	r3, #6
 800aff4:	d020      	beq.n	800b038 <UART_SetConfig+0x1d28>
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800affa:	2b07      	cmp	r3, #7
 800affc:	d01a      	beq.n	800b034 <UART_SetConfig+0x1d24>
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b002:	2b08      	cmp	r3, #8
 800b004:	d014      	beq.n	800b030 <UART_SetConfig+0x1d20>
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b00a:	2b09      	cmp	r3, #9
 800b00c:	d00e      	beq.n	800b02c <UART_SetConfig+0x1d1c>
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b012:	2b0a      	cmp	r3, #10
 800b014:	d008      	beq.n	800b028 <UART_SetConfig+0x1d18>
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b01a:	2b0b      	cmp	r3, #11
 800b01c:	d102      	bne.n	800b024 <UART_SetConfig+0x1d14>
 800b01e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b022:	e016      	b.n	800b052 <UART_SetConfig+0x1d42>
 800b024:	2301      	movs	r3, #1
 800b026:	e014      	b.n	800b052 <UART_SetConfig+0x1d42>
 800b028:	2380      	movs	r3, #128	; 0x80
 800b02a:	e012      	b.n	800b052 <UART_SetConfig+0x1d42>
 800b02c:	2340      	movs	r3, #64	; 0x40
 800b02e:	e010      	b.n	800b052 <UART_SetConfig+0x1d42>
 800b030:	2320      	movs	r3, #32
 800b032:	e00e      	b.n	800b052 <UART_SetConfig+0x1d42>
 800b034:	2310      	movs	r3, #16
 800b036:	e00c      	b.n	800b052 <UART_SetConfig+0x1d42>
 800b038:	230c      	movs	r3, #12
 800b03a:	e00a      	b.n	800b052 <UART_SetConfig+0x1d42>
 800b03c:	230a      	movs	r3, #10
 800b03e:	e008      	b.n	800b052 <UART_SetConfig+0x1d42>
 800b040:	2308      	movs	r3, #8
 800b042:	e006      	b.n	800b052 <UART_SetConfig+0x1d42>
 800b044:	2306      	movs	r3, #6
 800b046:	e004      	b.n	800b052 <UART_SetConfig+0x1d42>
 800b048:	2304      	movs	r3, #4
 800b04a:	e002      	b.n	800b052 <UART_SetConfig+0x1d42>
 800b04c:	2302      	movs	r3, #2
 800b04e:	e000      	b.n	800b052 <UART_SetConfig+0x1d42>
 800b050:	2301      	movs	r3, #1
 800b052:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b054:	fbb2 f2f3 	udiv	r2, r2, r3
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	685b      	ldr	r3, [r3, #4]
 800b05c:	085b      	lsrs	r3, r3, #1
 800b05e:	441a      	add	r2, r3
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	685b      	ldr	r3, [r3, #4]
 800b064:	fbb2 f3f3 	udiv	r3, r2, r3
 800b068:	b29b      	uxth	r3, r3
 800b06a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b06c:	e2aa      	b.n	800b5c4 <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b06e:	f7fc fb2b 	bl	80076c8 <HAL_RCC_GetPCLK2Freq>
 800b072:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b078:	2b00      	cmp	r3, #0
 800b07a:	d044      	beq.n	800b106 <UART_SetConfig+0x1df6>
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b080:	2b01      	cmp	r3, #1
 800b082:	d03e      	beq.n	800b102 <UART_SetConfig+0x1df2>
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b088:	2b02      	cmp	r3, #2
 800b08a:	d038      	beq.n	800b0fe <UART_SetConfig+0x1dee>
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b090:	2b03      	cmp	r3, #3
 800b092:	d032      	beq.n	800b0fa <UART_SetConfig+0x1dea>
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b098:	2b04      	cmp	r3, #4
 800b09a:	d02c      	beq.n	800b0f6 <UART_SetConfig+0x1de6>
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0a0:	2b05      	cmp	r3, #5
 800b0a2:	d026      	beq.n	800b0f2 <UART_SetConfig+0x1de2>
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0a8:	2b06      	cmp	r3, #6
 800b0aa:	d020      	beq.n	800b0ee <UART_SetConfig+0x1dde>
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0b0:	2b07      	cmp	r3, #7
 800b0b2:	d01a      	beq.n	800b0ea <UART_SetConfig+0x1dda>
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0b8:	2b08      	cmp	r3, #8
 800b0ba:	d014      	beq.n	800b0e6 <UART_SetConfig+0x1dd6>
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0c0:	2b09      	cmp	r3, #9
 800b0c2:	d00e      	beq.n	800b0e2 <UART_SetConfig+0x1dd2>
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0c8:	2b0a      	cmp	r3, #10
 800b0ca:	d008      	beq.n	800b0de <UART_SetConfig+0x1dce>
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0d0:	2b0b      	cmp	r3, #11
 800b0d2:	d102      	bne.n	800b0da <UART_SetConfig+0x1dca>
 800b0d4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b0d8:	e016      	b.n	800b108 <UART_SetConfig+0x1df8>
 800b0da:	2301      	movs	r3, #1
 800b0dc:	e014      	b.n	800b108 <UART_SetConfig+0x1df8>
 800b0de:	2380      	movs	r3, #128	; 0x80
 800b0e0:	e012      	b.n	800b108 <UART_SetConfig+0x1df8>
 800b0e2:	2340      	movs	r3, #64	; 0x40
 800b0e4:	e010      	b.n	800b108 <UART_SetConfig+0x1df8>
 800b0e6:	2320      	movs	r3, #32
 800b0e8:	e00e      	b.n	800b108 <UART_SetConfig+0x1df8>
 800b0ea:	2310      	movs	r3, #16
 800b0ec:	e00c      	b.n	800b108 <UART_SetConfig+0x1df8>
 800b0ee:	230c      	movs	r3, #12
 800b0f0:	e00a      	b.n	800b108 <UART_SetConfig+0x1df8>
 800b0f2:	230a      	movs	r3, #10
 800b0f4:	e008      	b.n	800b108 <UART_SetConfig+0x1df8>
 800b0f6:	2308      	movs	r3, #8
 800b0f8:	e006      	b.n	800b108 <UART_SetConfig+0x1df8>
 800b0fa:	2306      	movs	r3, #6
 800b0fc:	e004      	b.n	800b108 <UART_SetConfig+0x1df8>
 800b0fe:	2304      	movs	r3, #4
 800b100:	e002      	b.n	800b108 <UART_SetConfig+0x1df8>
 800b102:	2302      	movs	r3, #2
 800b104:	e000      	b.n	800b108 <UART_SetConfig+0x1df8>
 800b106:	2301      	movs	r3, #1
 800b108:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b10a:	fbb2 f2f3 	udiv	r2, r2, r3
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	685b      	ldr	r3, [r3, #4]
 800b112:	085b      	lsrs	r3, r3, #1
 800b114:	441a      	add	r2, r3
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	685b      	ldr	r3, [r3, #4]
 800b11a:	fbb2 f3f3 	udiv	r3, r2, r3
 800b11e:	b29b      	uxth	r3, r3
 800b120:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b122:	e24f      	b.n	800b5c4 <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b124:	f107 0318 	add.w	r3, r7, #24
 800b128:	4618      	mov	r0, r3
 800b12a:	f7fd f9e9 	bl	8008500 <HAL_RCCEx_GetPLL2ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b12e:	69fa      	ldr	r2, [r7, #28]
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b134:	2b00      	cmp	r3, #0
 800b136:	d044      	beq.n	800b1c2 <UART_SetConfig+0x1eb2>
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b13c:	2b01      	cmp	r3, #1
 800b13e:	d03e      	beq.n	800b1be <UART_SetConfig+0x1eae>
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b144:	2b02      	cmp	r3, #2
 800b146:	d038      	beq.n	800b1ba <UART_SetConfig+0x1eaa>
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b14c:	2b03      	cmp	r3, #3
 800b14e:	d032      	beq.n	800b1b6 <UART_SetConfig+0x1ea6>
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b154:	2b04      	cmp	r3, #4
 800b156:	d02c      	beq.n	800b1b2 <UART_SetConfig+0x1ea2>
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b15c:	2b05      	cmp	r3, #5
 800b15e:	d026      	beq.n	800b1ae <UART_SetConfig+0x1e9e>
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b164:	2b06      	cmp	r3, #6
 800b166:	d020      	beq.n	800b1aa <UART_SetConfig+0x1e9a>
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b16c:	2b07      	cmp	r3, #7
 800b16e:	d01a      	beq.n	800b1a6 <UART_SetConfig+0x1e96>
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b174:	2b08      	cmp	r3, #8
 800b176:	d014      	beq.n	800b1a2 <UART_SetConfig+0x1e92>
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b17c:	2b09      	cmp	r3, #9
 800b17e:	d00e      	beq.n	800b19e <UART_SetConfig+0x1e8e>
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b184:	2b0a      	cmp	r3, #10
 800b186:	d008      	beq.n	800b19a <UART_SetConfig+0x1e8a>
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b18c:	2b0b      	cmp	r3, #11
 800b18e:	d102      	bne.n	800b196 <UART_SetConfig+0x1e86>
 800b190:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b194:	e016      	b.n	800b1c4 <UART_SetConfig+0x1eb4>
 800b196:	2301      	movs	r3, #1
 800b198:	e014      	b.n	800b1c4 <UART_SetConfig+0x1eb4>
 800b19a:	2380      	movs	r3, #128	; 0x80
 800b19c:	e012      	b.n	800b1c4 <UART_SetConfig+0x1eb4>
 800b19e:	2340      	movs	r3, #64	; 0x40
 800b1a0:	e010      	b.n	800b1c4 <UART_SetConfig+0x1eb4>
 800b1a2:	2320      	movs	r3, #32
 800b1a4:	e00e      	b.n	800b1c4 <UART_SetConfig+0x1eb4>
 800b1a6:	2310      	movs	r3, #16
 800b1a8:	e00c      	b.n	800b1c4 <UART_SetConfig+0x1eb4>
 800b1aa:	230c      	movs	r3, #12
 800b1ac:	e00a      	b.n	800b1c4 <UART_SetConfig+0x1eb4>
 800b1ae:	230a      	movs	r3, #10
 800b1b0:	e008      	b.n	800b1c4 <UART_SetConfig+0x1eb4>
 800b1b2:	2308      	movs	r3, #8
 800b1b4:	e006      	b.n	800b1c4 <UART_SetConfig+0x1eb4>
 800b1b6:	2306      	movs	r3, #6
 800b1b8:	e004      	b.n	800b1c4 <UART_SetConfig+0x1eb4>
 800b1ba:	2304      	movs	r3, #4
 800b1bc:	e002      	b.n	800b1c4 <UART_SetConfig+0x1eb4>
 800b1be:	2302      	movs	r3, #2
 800b1c0:	e000      	b.n	800b1c4 <UART_SetConfig+0x1eb4>
 800b1c2:	2301      	movs	r3, #1
 800b1c4:	fbb2 f2f3 	udiv	r2, r2, r3
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	685b      	ldr	r3, [r3, #4]
 800b1cc:	085b      	lsrs	r3, r3, #1
 800b1ce:	441a      	add	r2, r3
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	685b      	ldr	r3, [r3, #4]
 800b1d4:	fbb2 f3f3 	udiv	r3, r2, r3
 800b1d8:	b29b      	uxth	r3, r3
 800b1da:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b1dc:	e1f2      	b.n	800b5c4 <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b1de:	f107 030c 	add.w	r3, r7, #12
 800b1e2:	4618      	mov	r0, r3
 800b1e4:	f7fd fad8 	bl	8008798 <HAL_RCCEx_GetPLL3ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b1e8:	693a      	ldr	r2, [r7, #16]
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1ee:	2b00      	cmp	r3, #0
 800b1f0:	d044      	beq.n	800b27c <UART_SetConfig+0x1f6c>
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1f6:	2b01      	cmp	r3, #1
 800b1f8:	d03e      	beq.n	800b278 <UART_SetConfig+0x1f68>
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1fe:	2b02      	cmp	r3, #2
 800b200:	d038      	beq.n	800b274 <UART_SetConfig+0x1f64>
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b206:	2b03      	cmp	r3, #3
 800b208:	d032      	beq.n	800b270 <UART_SetConfig+0x1f60>
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b20e:	2b04      	cmp	r3, #4
 800b210:	d02c      	beq.n	800b26c <UART_SetConfig+0x1f5c>
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b216:	2b05      	cmp	r3, #5
 800b218:	d026      	beq.n	800b268 <UART_SetConfig+0x1f58>
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b21e:	2b06      	cmp	r3, #6
 800b220:	d020      	beq.n	800b264 <UART_SetConfig+0x1f54>
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b226:	2b07      	cmp	r3, #7
 800b228:	d01a      	beq.n	800b260 <UART_SetConfig+0x1f50>
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b22e:	2b08      	cmp	r3, #8
 800b230:	d014      	beq.n	800b25c <UART_SetConfig+0x1f4c>
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b236:	2b09      	cmp	r3, #9
 800b238:	d00e      	beq.n	800b258 <UART_SetConfig+0x1f48>
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b23e:	2b0a      	cmp	r3, #10
 800b240:	d008      	beq.n	800b254 <UART_SetConfig+0x1f44>
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b246:	2b0b      	cmp	r3, #11
 800b248:	d102      	bne.n	800b250 <UART_SetConfig+0x1f40>
 800b24a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b24e:	e016      	b.n	800b27e <UART_SetConfig+0x1f6e>
 800b250:	2301      	movs	r3, #1
 800b252:	e014      	b.n	800b27e <UART_SetConfig+0x1f6e>
 800b254:	2380      	movs	r3, #128	; 0x80
 800b256:	e012      	b.n	800b27e <UART_SetConfig+0x1f6e>
 800b258:	2340      	movs	r3, #64	; 0x40
 800b25a:	e010      	b.n	800b27e <UART_SetConfig+0x1f6e>
 800b25c:	2320      	movs	r3, #32
 800b25e:	e00e      	b.n	800b27e <UART_SetConfig+0x1f6e>
 800b260:	2310      	movs	r3, #16
 800b262:	e00c      	b.n	800b27e <UART_SetConfig+0x1f6e>
 800b264:	230c      	movs	r3, #12
 800b266:	e00a      	b.n	800b27e <UART_SetConfig+0x1f6e>
 800b268:	230a      	movs	r3, #10
 800b26a:	e008      	b.n	800b27e <UART_SetConfig+0x1f6e>
 800b26c:	2308      	movs	r3, #8
 800b26e:	e006      	b.n	800b27e <UART_SetConfig+0x1f6e>
 800b270:	2306      	movs	r3, #6
 800b272:	e004      	b.n	800b27e <UART_SetConfig+0x1f6e>
 800b274:	2304      	movs	r3, #4
 800b276:	e002      	b.n	800b27e <UART_SetConfig+0x1f6e>
 800b278:	2302      	movs	r3, #2
 800b27a:	e000      	b.n	800b27e <UART_SetConfig+0x1f6e>
 800b27c:	2301      	movs	r3, #1
 800b27e:	fbb2 f2f3 	udiv	r2, r2, r3
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	685b      	ldr	r3, [r3, #4]
 800b286:	085b      	lsrs	r3, r3, #1
 800b288:	441a      	add	r2, r3
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	685b      	ldr	r3, [r3, #4]
 800b28e:	fbb2 f3f3 	udiv	r3, r2, r3
 800b292:	b29b      	uxth	r3, r3
 800b294:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b296:	e195      	b.n	800b5c4 <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b298:	4b87      	ldr	r3, [pc, #540]	; (800b4b8 <UART_SetConfig+0x21a8>)
 800b29a:	681b      	ldr	r3, [r3, #0]
 800b29c:	f003 0320 	and.w	r3, r3, #32
 800b2a0:	2b00      	cmp	r3, #0
 800b2a2:	d05d      	beq.n	800b360 <UART_SetConfig+0x2050>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b2a4:	4b84      	ldr	r3, [pc, #528]	; (800b4b8 <UART_SetConfig+0x21a8>)
 800b2a6:	681b      	ldr	r3, [r3, #0]
 800b2a8:	08db      	lsrs	r3, r3, #3
 800b2aa:	f003 0303 	and.w	r3, r3, #3
 800b2ae:	4a83      	ldr	r2, [pc, #524]	; (800b4bc <UART_SetConfig+0x21ac>)
 800b2b0:	40da      	lsrs	r2, r3
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2b6:	2b00      	cmp	r3, #0
 800b2b8:	d044      	beq.n	800b344 <UART_SetConfig+0x2034>
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2be:	2b01      	cmp	r3, #1
 800b2c0:	d03e      	beq.n	800b340 <UART_SetConfig+0x2030>
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2c6:	2b02      	cmp	r3, #2
 800b2c8:	d038      	beq.n	800b33c <UART_SetConfig+0x202c>
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2ce:	2b03      	cmp	r3, #3
 800b2d0:	d032      	beq.n	800b338 <UART_SetConfig+0x2028>
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2d6:	2b04      	cmp	r3, #4
 800b2d8:	d02c      	beq.n	800b334 <UART_SetConfig+0x2024>
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2de:	2b05      	cmp	r3, #5
 800b2e0:	d026      	beq.n	800b330 <UART_SetConfig+0x2020>
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2e6:	2b06      	cmp	r3, #6
 800b2e8:	d020      	beq.n	800b32c <UART_SetConfig+0x201c>
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2ee:	2b07      	cmp	r3, #7
 800b2f0:	d01a      	beq.n	800b328 <UART_SetConfig+0x2018>
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2f6:	2b08      	cmp	r3, #8
 800b2f8:	d014      	beq.n	800b324 <UART_SetConfig+0x2014>
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2fe:	2b09      	cmp	r3, #9
 800b300:	d00e      	beq.n	800b320 <UART_SetConfig+0x2010>
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b306:	2b0a      	cmp	r3, #10
 800b308:	d008      	beq.n	800b31c <UART_SetConfig+0x200c>
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b30e:	2b0b      	cmp	r3, #11
 800b310:	d102      	bne.n	800b318 <UART_SetConfig+0x2008>
 800b312:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b316:	e016      	b.n	800b346 <UART_SetConfig+0x2036>
 800b318:	2301      	movs	r3, #1
 800b31a:	e014      	b.n	800b346 <UART_SetConfig+0x2036>
 800b31c:	2380      	movs	r3, #128	; 0x80
 800b31e:	e012      	b.n	800b346 <UART_SetConfig+0x2036>
 800b320:	2340      	movs	r3, #64	; 0x40
 800b322:	e010      	b.n	800b346 <UART_SetConfig+0x2036>
 800b324:	2320      	movs	r3, #32
 800b326:	e00e      	b.n	800b346 <UART_SetConfig+0x2036>
 800b328:	2310      	movs	r3, #16
 800b32a:	e00c      	b.n	800b346 <UART_SetConfig+0x2036>
 800b32c:	230c      	movs	r3, #12
 800b32e:	e00a      	b.n	800b346 <UART_SetConfig+0x2036>
 800b330:	230a      	movs	r3, #10
 800b332:	e008      	b.n	800b346 <UART_SetConfig+0x2036>
 800b334:	2308      	movs	r3, #8
 800b336:	e006      	b.n	800b346 <UART_SetConfig+0x2036>
 800b338:	2306      	movs	r3, #6
 800b33a:	e004      	b.n	800b346 <UART_SetConfig+0x2036>
 800b33c:	2304      	movs	r3, #4
 800b33e:	e002      	b.n	800b346 <UART_SetConfig+0x2036>
 800b340:	2302      	movs	r3, #2
 800b342:	e000      	b.n	800b346 <UART_SetConfig+0x2036>
 800b344:	2301      	movs	r3, #1
 800b346:	fbb2 f2f3 	udiv	r2, r2, r3
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	685b      	ldr	r3, [r3, #4]
 800b34e:	085b      	lsrs	r3, r3, #1
 800b350:	441a      	add	r2, r3
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	685b      	ldr	r3, [r3, #4]
 800b356:	fbb2 f3f3 	udiv	r3, r2, r3
 800b35a:	b29b      	uxth	r3, r3
 800b35c:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
        }
        break;
 800b35e:	e131      	b.n	800b5c4 <UART_SetConfig+0x22b4>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b364:	2b00      	cmp	r3, #0
 800b366:	d043      	beq.n	800b3f0 <UART_SetConfig+0x20e0>
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b36c:	2b01      	cmp	r3, #1
 800b36e:	d03d      	beq.n	800b3ec <UART_SetConfig+0x20dc>
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b374:	2b02      	cmp	r3, #2
 800b376:	d037      	beq.n	800b3e8 <UART_SetConfig+0x20d8>
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b37c:	2b03      	cmp	r3, #3
 800b37e:	d031      	beq.n	800b3e4 <UART_SetConfig+0x20d4>
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b384:	2b04      	cmp	r3, #4
 800b386:	d02b      	beq.n	800b3e0 <UART_SetConfig+0x20d0>
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b38c:	2b05      	cmp	r3, #5
 800b38e:	d025      	beq.n	800b3dc <UART_SetConfig+0x20cc>
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b394:	2b06      	cmp	r3, #6
 800b396:	d01f      	beq.n	800b3d8 <UART_SetConfig+0x20c8>
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b39c:	2b07      	cmp	r3, #7
 800b39e:	d019      	beq.n	800b3d4 <UART_SetConfig+0x20c4>
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3a4:	2b08      	cmp	r3, #8
 800b3a6:	d013      	beq.n	800b3d0 <UART_SetConfig+0x20c0>
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3ac:	2b09      	cmp	r3, #9
 800b3ae:	d00d      	beq.n	800b3cc <UART_SetConfig+0x20bc>
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3b4:	2b0a      	cmp	r3, #10
 800b3b6:	d007      	beq.n	800b3c8 <UART_SetConfig+0x20b8>
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3bc:	2b0b      	cmp	r3, #11
 800b3be:	d101      	bne.n	800b3c4 <UART_SetConfig+0x20b4>
 800b3c0:	4b3f      	ldr	r3, [pc, #252]	; (800b4c0 <UART_SetConfig+0x21b0>)
 800b3c2:	e016      	b.n	800b3f2 <UART_SetConfig+0x20e2>
 800b3c4:	4b3d      	ldr	r3, [pc, #244]	; (800b4bc <UART_SetConfig+0x21ac>)
 800b3c6:	e014      	b.n	800b3f2 <UART_SetConfig+0x20e2>
 800b3c8:	4b3e      	ldr	r3, [pc, #248]	; (800b4c4 <UART_SetConfig+0x21b4>)
 800b3ca:	e012      	b.n	800b3f2 <UART_SetConfig+0x20e2>
 800b3cc:	4b3e      	ldr	r3, [pc, #248]	; (800b4c8 <UART_SetConfig+0x21b8>)
 800b3ce:	e010      	b.n	800b3f2 <UART_SetConfig+0x20e2>
 800b3d0:	4b3e      	ldr	r3, [pc, #248]	; (800b4cc <UART_SetConfig+0x21bc>)
 800b3d2:	e00e      	b.n	800b3f2 <UART_SetConfig+0x20e2>
 800b3d4:	4b3e      	ldr	r3, [pc, #248]	; (800b4d0 <UART_SetConfig+0x21c0>)
 800b3d6:	e00c      	b.n	800b3f2 <UART_SetConfig+0x20e2>
 800b3d8:	4b3e      	ldr	r3, [pc, #248]	; (800b4d4 <UART_SetConfig+0x21c4>)
 800b3da:	e00a      	b.n	800b3f2 <UART_SetConfig+0x20e2>
 800b3dc:	4b3e      	ldr	r3, [pc, #248]	; (800b4d8 <UART_SetConfig+0x21c8>)
 800b3de:	e008      	b.n	800b3f2 <UART_SetConfig+0x20e2>
 800b3e0:	4b3e      	ldr	r3, [pc, #248]	; (800b4dc <UART_SetConfig+0x21cc>)
 800b3e2:	e006      	b.n	800b3f2 <UART_SetConfig+0x20e2>
 800b3e4:	4b3e      	ldr	r3, [pc, #248]	; (800b4e0 <UART_SetConfig+0x21d0>)
 800b3e6:	e004      	b.n	800b3f2 <UART_SetConfig+0x20e2>
 800b3e8:	4b3e      	ldr	r3, [pc, #248]	; (800b4e4 <UART_SetConfig+0x21d4>)
 800b3ea:	e002      	b.n	800b3f2 <UART_SetConfig+0x20e2>
 800b3ec:	4b3e      	ldr	r3, [pc, #248]	; (800b4e8 <UART_SetConfig+0x21d8>)
 800b3ee:	e000      	b.n	800b3f2 <UART_SetConfig+0x20e2>
 800b3f0:	4b32      	ldr	r3, [pc, #200]	; (800b4bc <UART_SetConfig+0x21ac>)
 800b3f2:	687a      	ldr	r2, [r7, #4]
 800b3f4:	6852      	ldr	r2, [r2, #4]
 800b3f6:	0852      	lsrs	r2, r2, #1
 800b3f8:	441a      	add	r2, r3
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	685b      	ldr	r3, [r3, #4]
 800b3fe:	fbb2 f3f3 	udiv	r3, r2, r3
 800b402:	b29b      	uxth	r3, r3
 800b404:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b406:	e0dd      	b.n	800b5c4 <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_CSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b40c:	2b00      	cmp	r3, #0
 800b40e:	d046      	beq.n	800b49e <UART_SetConfig+0x218e>
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b414:	2b01      	cmp	r3, #1
 800b416:	d040      	beq.n	800b49a <UART_SetConfig+0x218a>
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b41c:	2b02      	cmp	r3, #2
 800b41e:	d03a      	beq.n	800b496 <UART_SetConfig+0x2186>
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b424:	2b03      	cmp	r3, #3
 800b426:	d034      	beq.n	800b492 <UART_SetConfig+0x2182>
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b42c:	2b04      	cmp	r3, #4
 800b42e:	d02e      	beq.n	800b48e <UART_SetConfig+0x217e>
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b434:	2b05      	cmp	r3, #5
 800b436:	d028      	beq.n	800b48a <UART_SetConfig+0x217a>
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b43c:	2b06      	cmp	r3, #6
 800b43e:	d022      	beq.n	800b486 <UART_SetConfig+0x2176>
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b444:	2b07      	cmp	r3, #7
 800b446:	d01c      	beq.n	800b482 <UART_SetConfig+0x2172>
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b44c:	2b08      	cmp	r3, #8
 800b44e:	d016      	beq.n	800b47e <UART_SetConfig+0x216e>
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b454:	2b09      	cmp	r3, #9
 800b456:	d00f      	beq.n	800b478 <UART_SetConfig+0x2168>
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b45c:	2b0a      	cmp	r3, #10
 800b45e:	d008      	beq.n	800b472 <UART_SetConfig+0x2162>
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b464:	2b0b      	cmp	r3, #11
 800b466:	d102      	bne.n	800b46e <UART_SetConfig+0x215e>
 800b468:	f643 5309 	movw	r3, #15625	; 0x3d09
 800b46c:	e018      	b.n	800b4a0 <UART_SetConfig+0x2190>
 800b46e:	4b18      	ldr	r3, [pc, #96]	; (800b4d0 <UART_SetConfig+0x21c0>)
 800b470:	e016      	b.n	800b4a0 <UART_SetConfig+0x2190>
 800b472:	f647 2312 	movw	r3, #31250	; 0x7a12
 800b476:	e013      	b.n	800b4a0 <UART_SetConfig+0x2190>
 800b478:	f24f 4324 	movw	r3, #62500	; 0xf424
 800b47c:	e010      	b.n	800b4a0 <UART_SetConfig+0x2190>
 800b47e:	4b1b      	ldr	r3, [pc, #108]	; (800b4ec <UART_SetConfig+0x21dc>)
 800b480:	e00e      	b.n	800b4a0 <UART_SetConfig+0x2190>
 800b482:	4b0f      	ldr	r3, [pc, #60]	; (800b4c0 <UART_SetConfig+0x21b0>)
 800b484:	e00c      	b.n	800b4a0 <UART_SetConfig+0x2190>
 800b486:	4b1a      	ldr	r3, [pc, #104]	; (800b4f0 <UART_SetConfig+0x21e0>)
 800b488:	e00a      	b.n	800b4a0 <UART_SetConfig+0x2190>
 800b48a:	4b1a      	ldr	r3, [pc, #104]	; (800b4f4 <UART_SetConfig+0x21e4>)
 800b48c:	e008      	b.n	800b4a0 <UART_SetConfig+0x2190>
 800b48e:	4b0d      	ldr	r3, [pc, #52]	; (800b4c4 <UART_SetConfig+0x21b4>)
 800b490:	e006      	b.n	800b4a0 <UART_SetConfig+0x2190>
 800b492:	4b19      	ldr	r3, [pc, #100]	; (800b4f8 <UART_SetConfig+0x21e8>)
 800b494:	e004      	b.n	800b4a0 <UART_SetConfig+0x2190>
 800b496:	4b0c      	ldr	r3, [pc, #48]	; (800b4c8 <UART_SetConfig+0x21b8>)
 800b498:	e002      	b.n	800b4a0 <UART_SetConfig+0x2190>
 800b49a:	4b0c      	ldr	r3, [pc, #48]	; (800b4cc <UART_SetConfig+0x21bc>)
 800b49c:	e000      	b.n	800b4a0 <UART_SetConfig+0x2190>
 800b49e:	4b0c      	ldr	r3, [pc, #48]	; (800b4d0 <UART_SetConfig+0x21c0>)
 800b4a0:	687a      	ldr	r2, [r7, #4]
 800b4a2:	6852      	ldr	r2, [r2, #4]
 800b4a4:	0852      	lsrs	r2, r2, #1
 800b4a6:	441a      	add	r2, r3
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	685b      	ldr	r3, [r3, #4]
 800b4ac:	fbb2 f3f3 	udiv	r3, r2, r3
 800b4b0:	b29b      	uxth	r3, r3
 800b4b2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b4b4:	e086      	b.n	800b5c4 <UART_SetConfig+0x22b4>
 800b4b6:	bf00      	nop
 800b4b8:	58024400 	.word	0x58024400
 800b4bc:	03d09000 	.word	0x03d09000
 800b4c0:	0003d090 	.word	0x0003d090
 800b4c4:	0007a120 	.word	0x0007a120
 800b4c8:	000f4240 	.word	0x000f4240
 800b4cc:	001e8480 	.word	0x001e8480
 800b4d0:	003d0900 	.word	0x003d0900
 800b4d4:	00516155 	.word	0x00516155
 800b4d8:	0061a800 	.word	0x0061a800
 800b4dc:	007a1200 	.word	0x007a1200
 800b4e0:	00a2c2aa 	.word	0x00a2c2aa
 800b4e4:	00f42400 	.word	0x00f42400
 800b4e8:	01e84800 	.word	0x01e84800
 800b4ec:	0001e848 	.word	0x0001e848
 800b4f0:	00051615 	.word	0x00051615
 800b4f4:	00061a80 	.word	0x00061a80
 800b4f8:	000a2c2a 	.word	0x000a2c2a
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b500:	2b00      	cmp	r3, #0
 800b502:	d04e      	beq.n	800b5a2 <UART_SetConfig+0x2292>
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b508:	2b01      	cmp	r3, #1
 800b50a:	d047      	beq.n	800b59c <UART_SetConfig+0x228c>
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b510:	2b02      	cmp	r3, #2
 800b512:	d040      	beq.n	800b596 <UART_SetConfig+0x2286>
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b518:	2b03      	cmp	r3, #3
 800b51a:	d039      	beq.n	800b590 <UART_SetConfig+0x2280>
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b520:	2b04      	cmp	r3, #4
 800b522:	d032      	beq.n	800b58a <UART_SetConfig+0x227a>
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b528:	2b05      	cmp	r3, #5
 800b52a:	d02b      	beq.n	800b584 <UART_SetConfig+0x2274>
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b530:	2b06      	cmp	r3, #6
 800b532:	d024      	beq.n	800b57e <UART_SetConfig+0x226e>
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b538:	2b07      	cmp	r3, #7
 800b53a:	d01d      	beq.n	800b578 <UART_SetConfig+0x2268>
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b540:	2b08      	cmp	r3, #8
 800b542:	d016      	beq.n	800b572 <UART_SetConfig+0x2262>
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b548:	2b09      	cmp	r3, #9
 800b54a:	d00f      	beq.n	800b56c <UART_SetConfig+0x225c>
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b550:	2b0a      	cmp	r3, #10
 800b552:	d008      	beq.n	800b566 <UART_SetConfig+0x2256>
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b558:	2b0b      	cmp	r3, #11
 800b55a:	d101      	bne.n	800b560 <UART_SetConfig+0x2250>
 800b55c:	2380      	movs	r3, #128	; 0x80
 800b55e:	e022      	b.n	800b5a6 <UART_SetConfig+0x2296>
 800b560:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b564:	e01f      	b.n	800b5a6 <UART_SetConfig+0x2296>
 800b566:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b56a:	e01c      	b.n	800b5a6 <UART_SetConfig+0x2296>
 800b56c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b570:	e019      	b.n	800b5a6 <UART_SetConfig+0x2296>
 800b572:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b576:	e016      	b.n	800b5a6 <UART_SetConfig+0x2296>
 800b578:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b57c:	e013      	b.n	800b5a6 <UART_SetConfig+0x2296>
 800b57e:	f640 23aa 	movw	r3, #2730	; 0xaaa
 800b582:	e010      	b.n	800b5a6 <UART_SetConfig+0x2296>
 800b584:	f640 43cc 	movw	r3, #3276	; 0xccc
 800b588:	e00d      	b.n	800b5a6 <UART_SetConfig+0x2296>
 800b58a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b58e:	e00a      	b.n	800b5a6 <UART_SetConfig+0x2296>
 800b590:	f241 5355 	movw	r3, #5461	; 0x1555
 800b594:	e007      	b.n	800b5a6 <UART_SetConfig+0x2296>
 800b596:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b59a:	e004      	b.n	800b5a6 <UART_SetConfig+0x2296>
 800b59c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800b5a0:	e001      	b.n	800b5a6 <UART_SetConfig+0x2296>
 800b5a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b5a6:	687a      	ldr	r2, [r7, #4]
 800b5a8:	6852      	ldr	r2, [r2, #4]
 800b5aa:	0852      	lsrs	r2, r2, #1
 800b5ac:	441a      	add	r2, r3
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	685b      	ldr	r3, [r3, #4]
 800b5b2:	fbb2 f3f3 	udiv	r3, r2, r3
 800b5b6:	b29b      	uxth	r3, r3
 800b5b8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b5ba:	e003      	b.n	800b5c4 <UART_SetConfig+0x22b4>
      default:
        ret = HAL_ERROR;
 800b5bc:	2301      	movs	r3, #1
 800b5be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 800b5c2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b5c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b5c6:	2b0f      	cmp	r3, #15
 800b5c8:	d908      	bls.n	800b5dc <UART_SetConfig+0x22cc>
 800b5ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b5cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b5d0:	d204      	bcs.n	800b5dc <UART_SetConfig+0x22cc>
    {
      huart->Instance->BRR = usartdiv;
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	681b      	ldr	r3, [r3, #0]
 800b5d6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b5d8:	60da      	str	r2, [r3, #12]
 800b5da:	e002      	b.n	800b5e2 <UART_SetConfig+0x22d2>
    }
    else
    {
      ret = HAL_ERROR;
 800b5dc:	2301      	movs	r3, #1
 800b5de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	2201      	movs	r2, #1
 800b5e6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	2201      	movs	r2, #1
 800b5ee:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	2200      	movs	r2, #0
 800b5f6:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	2200      	movs	r2, #0
 800b5fc:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 800b5fe:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 800b602:	4618      	mov	r0, r3
 800b604:	3740      	adds	r7, #64	; 0x40
 800b606:	46bd      	mov	sp, r7
 800b608:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

0800b60c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b60c:	b480      	push	{r7}
 800b60e:	b083      	sub	sp, #12
 800b610:	af00      	add	r7, sp, #0
 800b612:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b618:	f003 0301 	and.w	r3, r3, #1
 800b61c:	2b00      	cmp	r3, #0
 800b61e:	d00a      	beq.n	800b636 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	681b      	ldr	r3, [r3, #0]
 800b624:	685b      	ldr	r3, [r3, #4]
 800b626:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	681b      	ldr	r3, [r3, #0]
 800b632:	430a      	orrs	r2, r1
 800b634:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b63a:	f003 0302 	and.w	r3, r3, #2
 800b63e:	2b00      	cmp	r3, #0
 800b640:	d00a      	beq.n	800b658 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	681b      	ldr	r3, [r3, #0]
 800b646:	685b      	ldr	r3, [r3, #4]
 800b648:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	681b      	ldr	r3, [r3, #0]
 800b654:	430a      	orrs	r2, r1
 800b656:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b65c:	f003 0304 	and.w	r3, r3, #4
 800b660:	2b00      	cmp	r3, #0
 800b662:	d00a      	beq.n	800b67a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	681b      	ldr	r3, [r3, #0]
 800b668:	685b      	ldr	r3, [r3, #4]
 800b66a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	681b      	ldr	r3, [r3, #0]
 800b676:	430a      	orrs	r2, r1
 800b678:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b67e:	f003 0308 	and.w	r3, r3, #8
 800b682:	2b00      	cmp	r3, #0
 800b684:	d00a      	beq.n	800b69c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	681b      	ldr	r3, [r3, #0]
 800b68a:	685b      	ldr	r3, [r3, #4]
 800b68c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	681b      	ldr	r3, [r3, #0]
 800b698:	430a      	orrs	r2, r1
 800b69a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b6a0:	f003 0310 	and.w	r3, r3, #16
 800b6a4:	2b00      	cmp	r3, #0
 800b6a6:	d00a      	beq.n	800b6be <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	681b      	ldr	r3, [r3, #0]
 800b6ac:	689b      	ldr	r3, [r3, #8]
 800b6ae:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	681b      	ldr	r3, [r3, #0]
 800b6ba:	430a      	orrs	r2, r1
 800b6bc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b6c2:	f003 0320 	and.w	r3, r3, #32
 800b6c6:	2b00      	cmp	r3, #0
 800b6c8:	d00a      	beq.n	800b6e0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	681b      	ldr	r3, [r3, #0]
 800b6ce:	689b      	ldr	r3, [r3, #8]
 800b6d0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	681b      	ldr	r3, [r3, #0]
 800b6dc:	430a      	orrs	r2, r1
 800b6de:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b6e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b6e8:	2b00      	cmp	r3, #0
 800b6ea:	d01a      	beq.n	800b722 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	681b      	ldr	r3, [r3, #0]
 800b6f0:	685b      	ldr	r3, [r3, #4]
 800b6f2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	681b      	ldr	r3, [r3, #0]
 800b6fe:	430a      	orrs	r2, r1
 800b700:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b706:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b70a:	d10a      	bne.n	800b722 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	681b      	ldr	r3, [r3, #0]
 800b710:	685b      	ldr	r3, [r3, #4]
 800b712:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	681b      	ldr	r3, [r3, #0]
 800b71e:	430a      	orrs	r2, r1
 800b720:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b726:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b72a:	2b00      	cmp	r3, #0
 800b72c:	d00a      	beq.n	800b744 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	681b      	ldr	r3, [r3, #0]
 800b732:	685b      	ldr	r3, [r3, #4]
 800b734:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	681b      	ldr	r3, [r3, #0]
 800b740:	430a      	orrs	r2, r1
 800b742:	605a      	str	r2, [r3, #4]
  }
}
 800b744:	bf00      	nop
 800b746:	370c      	adds	r7, #12
 800b748:	46bd      	mov	sp, r7
 800b74a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b74e:	4770      	bx	lr

0800b750 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b750:	b580      	push	{r7, lr}
 800b752:	b086      	sub	sp, #24
 800b754:	af02      	add	r7, sp, #8
 800b756:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	2200      	movs	r2, #0
 800b75c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800b760:	f7f6 ffb4 	bl	80026cc <HAL_GetTick>
 800b764:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	681b      	ldr	r3, [r3, #0]
 800b76a:	681b      	ldr	r3, [r3, #0]
 800b76c:	f003 0308 	and.w	r3, r3, #8
 800b770:	2b08      	cmp	r3, #8
 800b772:	d10e      	bne.n	800b792 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b774:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b778:	9300      	str	r3, [sp, #0]
 800b77a:	68fb      	ldr	r3, [r7, #12]
 800b77c:	2200      	movs	r2, #0
 800b77e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800b782:	6878      	ldr	r0, [r7, #4]
 800b784:	f000 f82c 	bl	800b7e0 <UART_WaitOnFlagUntilTimeout>
 800b788:	4603      	mov	r3, r0
 800b78a:	2b00      	cmp	r3, #0
 800b78c:	d001      	beq.n	800b792 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b78e:	2303      	movs	r3, #3
 800b790:	e022      	b.n	800b7d8 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	681b      	ldr	r3, [r3, #0]
 800b796:	681b      	ldr	r3, [r3, #0]
 800b798:	f003 0304 	and.w	r3, r3, #4
 800b79c:	2b04      	cmp	r3, #4
 800b79e:	d10e      	bne.n	800b7be <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b7a0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b7a4:	9300      	str	r3, [sp, #0]
 800b7a6:	68fb      	ldr	r3, [r7, #12]
 800b7a8:	2200      	movs	r2, #0
 800b7aa:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800b7ae:	6878      	ldr	r0, [r7, #4]
 800b7b0:	f000 f816 	bl	800b7e0 <UART_WaitOnFlagUntilTimeout>
 800b7b4:	4603      	mov	r3, r0
 800b7b6:	2b00      	cmp	r3, #0
 800b7b8:	d001      	beq.n	800b7be <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b7ba:	2303      	movs	r3, #3
 800b7bc:	e00c      	b.n	800b7d8 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	2220      	movs	r2, #32
 800b7c2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	2220      	movs	r2, #32
 800b7ca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	2200      	movs	r2, #0
 800b7d2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800b7d6:	2300      	movs	r3, #0
}
 800b7d8:	4618      	mov	r0, r3
 800b7da:	3710      	adds	r7, #16
 800b7dc:	46bd      	mov	sp, r7
 800b7de:	bd80      	pop	{r7, pc}

0800b7e0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b7e0:	b580      	push	{r7, lr}
 800b7e2:	b084      	sub	sp, #16
 800b7e4:	af00      	add	r7, sp, #0
 800b7e6:	60f8      	str	r0, [r7, #12]
 800b7e8:	60b9      	str	r1, [r7, #8]
 800b7ea:	603b      	str	r3, [r7, #0]
 800b7ec:	4613      	mov	r3, r2
 800b7ee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b7f0:	e062      	b.n	800b8b8 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b7f2:	69bb      	ldr	r3, [r7, #24]
 800b7f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b7f8:	d05e      	beq.n	800b8b8 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b7fa:	f7f6 ff67 	bl	80026cc <HAL_GetTick>
 800b7fe:	4602      	mov	r2, r0
 800b800:	683b      	ldr	r3, [r7, #0]
 800b802:	1ad3      	subs	r3, r2, r3
 800b804:	69ba      	ldr	r2, [r7, #24]
 800b806:	429a      	cmp	r2, r3
 800b808:	d302      	bcc.n	800b810 <UART_WaitOnFlagUntilTimeout+0x30>
 800b80a:	69bb      	ldr	r3, [r7, #24]
 800b80c:	2b00      	cmp	r3, #0
 800b80e:	d11d      	bne.n	800b84c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800b810:	68fb      	ldr	r3, [r7, #12]
 800b812:	681b      	ldr	r3, [r3, #0]
 800b814:	681a      	ldr	r2, [r3, #0]
 800b816:	68fb      	ldr	r3, [r7, #12]
 800b818:	681b      	ldr	r3, [r3, #0]
 800b81a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800b81e:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b820:	68fb      	ldr	r3, [r7, #12]
 800b822:	681b      	ldr	r3, [r3, #0]
 800b824:	689a      	ldr	r2, [r3, #8]
 800b826:	68fb      	ldr	r3, [r7, #12]
 800b828:	681b      	ldr	r3, [r3, #0]
 800b82a:	f022 0201 	bic.w	r2, r2, #1
 800b82e:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800b830:	68fb      	ldr	r3, [r7, #12]
 800b832:	2220      	movs	r2, #32
 800b834:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 800b838:	68fb      	ldr	r3, [r7, #12]
 800b83a:	2220      	movs	r2, #32
 800b83c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 800b840:	68fb      	ldr	r3, [r7, #12]
 800b842:	2200      	movs	r2, #0
 800b844:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800b848:	2303      	movs	r3, #3
 800b84a:	e045      	b.n	800b8d8 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800b84c:	68fb      	ldr	r3, [r7, #12]
 800b84e:	681b      	ldr	r3, [r3, #0]
 800b850:	681b      	ldr	r3, [r3, #0]
 800b852:	f003 0304 	and.w	r3, r3, #4
 800b856:	2b00      	cmp	r3, #0
 800b858:	d02e      	beq.n	800b8b8 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b85a:	68fb      	ldr	r3, [r7, #12]
 800b85c:	681b      	ldr	r3, [r3, #0]
 800b85e:	69db      	ldr	r3, [r3, #28]
 800b860:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b864:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b868:	d126      	bne.n	800b8b8 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b86a:	68fb      	ldr	r3, [r7, #12]
 800b86c:	681b      	ldr	r3, [r3, #0]
 800b86e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b872:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800b874:	68fb      	ldr	r3, [r7, #12]
 800b876:	681b      	ldr	r3, [r3, #0]
 800b878:	681a      	ldr	r2, [r3, #0]
 800b87a:	68fb      	ldr	r3, [r7, #12]
 800b87c:	681b      	ldr	r3, [r3, #0]
 800b87e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800b882:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b884:	68fb      	ldr	r3, [r7, #12]
 800b886:	681b      	ldr	r3, [r3, #0]
 800b888:	689a      	ldr	r2, [r3, #8]
 800b88a:	68fb      	ldr	r3, [r7, #12]
 800b88c:	681b      	ldr	r3, [r3, #0]
 800b88e:	f022 0201 	bic.w	r2, r2, #1
 800b892:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800b894:	68fb      	ldr	r3, [r7, #12]
 800b896:	2220      	movs	r2, #32
 800b898:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 800b89c:	68fb      	ldr	r3, [r7, #12]
 800b89e:	2220      	movs	r2, #32
 800b8a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b8a4:	68fb      	ldr	r3, [r7, #12]
 800b8a6:	2220      	movs	r2, #32
 800b8a8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b8ac:	68fb      	ldr	r3, [r7, #12]
 800b8ae:	2200      	movs	r2, #0
 800b8b0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
          
          return HAL_TIMEOUT;
 800b8b4:	2303      	movs	r3, #3
 800b8b6:	e00f      	b.n	800b8d8 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b8b8:	68fb      	ldr	r3, [r7, #12]
 800b8ba:	681b      	ldr	r3, [r3, #0]
 800b8bc:	69da      	ldr	r2, [r3, #28]
 800b8be:	68bb      	ldr	r3, [r7, #8]
 800b8c0:	4013      	ands	r3, r2
 800b8c2:	68ba      	ldr	r2, [r7, #8]
 800b8c4:	429a      	cmp	r2, r3
 800b8c6:	bf0c      	ite	eq
 800b8c8:	2301      	moveq	r3, #1
 800b8ca:	2300      	movne	r3, #0
 800b8cc:	b2db      	uxtb	r3, r3
 800b8ce:	461a      	mov	r2, r3
 800b8d0:	79fb      	ldrb	r3, [r7, #7]
 800b8d2:	429a      	cmp	r2, r3
 800b8d4:	d08d      	beq.n	800b7f2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b8d6:	2300      	movs	r3, #0
}
 800b8d8:	4618      	mov	r0, r3
 800b8da:	3710      	adds	r7, #16
 800b8dc:	46bd      	mov	sp, r7
 800b8de:	bd80      	pop	{r7, pc}

0800b8e0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b8e0:	b480      	push	{r7}
 800b8e2:	b083      	sub	sp, #12
 800b8e4:	af00      	add	r7, sp, #0
 800b8e6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	681b      	ldr	r3, [r3, #0]
 800b8ec:	681a      	ldr	r2, [r3, #0]
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	681b      	ldr	r3, [r3, #0]
 800b8f2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800b8f6:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	681b      	ldr	r3, [r3, #0]
 800b8fc:	6899      	ldr	r1, [r3, #8]
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	681a      	ldr	r2, [r3, #0]
 800b902:	4b08      	ldr	r3, [pc, #32]	; (800b924 <UART_EndRxTransfer+0x44>)
 800b904:	400b      	ands	r3, r1
 800b906:	6093      	str	r3, [r2, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	2220      	movs	r2, #32
 800b90c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	2200      	movs	r2, #0
 800b914:	66da      	str	r2, [r3, #108]	; 0x6c
}
 800b916:	bf00      	nop
 800b918:	370c      	adds	r7, #12
 800b91a:	46bd      	mov	sp, r7
 800b91c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b920:	4770      	bx	lr
 800b922:	bf00      	nop
 800b924:	effffffe 	.word	0xeffffffe

0800b928 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b928:	b580      	push	{r7, lr}
 800b92a:	b084      	sub	sp, #16
 800b92c:	af00      	add	r7, sp, #0
 800b92e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b934:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800b936:	68fb      	ldr	r3, [r7, #12]
 800b938:	2200      	movs	r2, #0
 800b93a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800b93e:	68fb      	ldr	r3, [r7, #12]
 800b940:	2200      	movs	r2, #0
 800b942:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b946:	68f8      	ldr	r0, [r7, #12]
 800b948:	f7fd fcd6 	bl	80092f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b94c:	bf00      	nop
 800b94e:	3710      	adds	r7, #16
 800b950:	46bd      	mov	sp, r7
 800b952:	bd80      	pop	{r7, pc}

0800b954 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b954:	b580      	push	{r7, lr}
 800b956:	b082      	sub	sp, #8
 800b958:	af00      	add	r7, sp, #0
 800b95a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	681b      	ldr	r3, [r3, #0]
 800b960:	681a      	ldr	r2, [r3, #0]
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	681b      	ldr	r3, [r3, #0]
 800b966:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b96a:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	2220      	movs	r2, #32
 800b970:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	2200      	movs	r2, #0
 800b978:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b97a:	6878      	ldr	r0, [r7, #4]
 800b97c:	f7fd fcb2 	bl	80092e4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b980:	bf00      	nop
 800b982:	3708      	adds	r7, #8
 800b984:	46bd      	mov	sp, r7
 800b986:	bd80      	pop	{r7, pc}

0800b988 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800b988:	b480      	push	{r7}
 800b98a:	b083      	sub	sp, #12
 800b98c:	af00      	add	r7, sp, #0
 800b98e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800b990:	bf00      	nop
 800b992:	370c      	adds	r7, #12
 800b994:	46bd      	mov	sp, r7
 800b996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b99a:	4770      	bx	lr

0800b99c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800b99c:	b480      	push	{r7}
 800b99e:	b083      	sub	sp, #12
 800b9a0:	af00      	add	r7, sp, #0
 800b9a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800b9a4:	bf00      	nop
 800b9a6:	370c      	adds	r7, #12
 800b9a8:	46bd      	mov	sp, r7
 800b9aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9ae:	4770      	bx	lr

0800b9b0 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800b9b0:	b480      	push	{r7}
 800b9b2:	b083      	sub	sp, #12
 800b9b4:	af00      	add	r7, sp, #0
 800b9b6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800b9b8:	bf00      	nop
 800b9ba:	370c      	adds	r7, #12
 800b9bc:	46bd      	mov	sp, r7
 800b9be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9c2:	4770      	bx	lr

0800b9c4 <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 800b9c4:	b580      	push	{r7, lr}
 800b9c6:	b084      	sub	sp, #16
 800b9c8:	af00      	add	r7, sp, #0
 800b9ca:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800b9d2:	2b01      	cmp	r3, #1
 800b9d4:	d101      	bne.n	800b9da <HAL_UARTEx_EnableFifoMode+0x16>
 800b9d6:	2302      	movs	r3, #2
 800b9d8:	e02b      	b.n	800ba32 <HAL_UARTEx_EnableFifoMode+0x6e>
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	2201      	movs	r2, #1
 800b9de:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	2224      	movs	r2, #36	; 0x24
 800b9e6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	681b      	ldr	r3, [r3, #0]
 800b9ee:	681b      	ldr	r3, [r3, #0]
 800b9f0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	681b      	ldr	r3, [r3, #0]
 800b9f6:	681a      	ldr	r2, [r3, #0]
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	681b      	ldr	r3, [r3, #0]
 800b9fc:	f022 0201 	bic.w	r2, r2, #1
 800ba00:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 800ba02:	68fb      	ldr	r3, [r7, #12]
 800ba04:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800ba08:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800ba10:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	681b      	ldr	r3, [r3, #0]
 800ba16:	68fa      	ldr	r2, [r7, #12]
 800ba18:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ba1a:	6878      	ldr	r0, [r7, #4]
 800ba1c:	f000 f88a 	bl	800bb34 <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	2220      	movs	r2, #32
 800ba24:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	2200      	movs	r2, #0
 800ba2c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800ba30:	2300      	movs	r3, #0
}
 800ba32:	4618      	mov	r0, r3
 800ba34:	3710      	adds	r7, #16
 800ba36:	46bd      	mov	sp, r7
 800ba38:	bd80      	pop	{r7, pc}

0800ba3a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ba3a:	b580      	push	{r7, lr}
 800ba3c:	b084      	sub	sp, #16
 800ba3e:	af00      	add	r7, sp, #0
 800ba40:	6078      	str	r0, [r7, #4]
 800ba42:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800ba4a:	2b01      	cmp	r3, #1
 800ba4c:	d101      	bne.n	800ba52 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800ba4e:	2302      	movs	r3, #2
 800ba50:	e02d      	b.n	800baae <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	2201      	movs	r2, #1
 800ba56:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	2224      	movs	r2, #36	; 0x24
 800ba5e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	681b      	ldr	r3, [r3, #0]
 800ba66:	681b      	ldr	r3, [r3, #0]
 800ba68:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	681b      	ldr	r3, [r3, #0]
 800ba6e:	681a      	ldr	r2, [r3, #0]
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	681b      	ldr	r3, [r3, #0]
 800ba74:	f022 0201 	bic.w	r2, r2, #1
 800ba78:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	681b      	ldr	r3, [r3, #0]
 800ba7e:	689b      	ldr	r3, [r3, #8]
 800ba80:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	681b      	ldr	r3, [r3, #0]
 800ba88:	683a      	ldr	r2, [r7, #0]
 800ba8a:	430a      	orrs	r2, r1
 800ba8c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ba8e:	6878      	ldr	r0, [r7, #4]
 800ba90:	f000 f850 	bl	800bb34 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	681b      	ldr	r3, [r3, #0]
 800ba98:	68fa      	ldr	r2, [r7, #12]
 800ba9a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	2220      	movs	r2, #32
 800baa0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	2200      	movs	r2, #0
 800baa8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800baac:	2300      	movs	r3, #0
}
 800baae:	4618      	mov	r0, r3
 800bab0:	3710      	adds	r7, #16
 800bab2:	46bd      	mov	sp, r7
 800bab4:	bd80      	pop	{r7, pc}

0800bab6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800bab6:	b580      	push	{r7, lr}
 800bab8:	b084      	sub	sp, #16
 800baba:	af00      	add	r7, sp, #0
 800babc:	6078      	str	r0, [r7, #4]
 800babe:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800bac6:	2b01      	cmp	r3, #1
 800bac8:	d101      	bne.n	800bace <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800baca:	2302      	movs	r3, #2
 800bacc:	e02d      	b.n	800bb2a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	2201      	movs	r2, #1
 800bad2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	2224      	movs	r2, #36	; 0x24
 800bada:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	681b      	ldr	r3, [r3, #0]
 800bae2:	681b      	ldr	r3, [r3, #0]
 800bae4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	681b      	ldr	r3, [r3, #0]
 800baea:	681a      	ldr	r2, [r3, #0]
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	681b      	ldr	r3, [r3, #0]
 800baf0:	f022 0201 	bic.w	r2, r2, #1
 800baf4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	681b      	ldr	r3, [r3, #0]
 800bafa:	689b      	ldr	r3, [r3, #8]
 800bafc:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	681b      	ldr	r3, [r3, #0]
 800bb04:	683a      	ldr	r2, [r7, #0]
 800bb06:	430a      	orrs	r2, r1
 800bb08:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800bb0a:	6878      	ldr	r0, [r7, #4]
 800bb0c:	f000 f812 	bl	800bb34 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	681b      	ldr	r3, [r3, #0]
 800bb14:	68fa      	ldr	r2, [r7, #12]
 800bb16:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	2220      	movs	r2, #32
 800bb1c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	2200      	movs	r2, #0
 800bb24:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800bb28:	2300      	movs	r3, #0
}
 800bb2a:	4618      	mov	r0, r3
 800bb2c:	3710      	adds	r7, #16
 800bb2e:	46bd      	mov	sp, r7
 800bb30:	bd80      	pop	{r7, pc}
	...

0800bb34 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800bb34:	b480      	push	{r7}
 800bb36:	b089      	sub	sp, #36	; 0x24
 800bb38:	af00      	add	r7, sp, #0
 800bb3a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 800bb3c:	4a2f      	ldr	r2, [pc, #188]	; (800bbfc <UARTEx_SetNbDataToProcess+0xc8>)
 800bb3e:	f107 0314 	add.w	r3, r7, #20
 800bb42:	e892 0003 	ldmia.w	r2, {r0, r1}
 800bb46:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 800bb4a:	4a2d      	ldr	r2, [pc, #180]	; (800bc00 <UARTEx_SetNbDataToProcess+0xcc>)
 800bb4c:	f107 030c 	add.w	r3, r7, #12
 800bb50:	e892 0003 	ldmia.w	r2, {r0, r1}
 800bb54:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bb5c:	2b00      	cmp	r3, #0
 800bb5e:	d108      	bne.n	800bb72 <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	2201      	movs	r2, #1
 800bb64:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	2201      	movs	r2, #1
 800bb6c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800bb70:	e03d      	b.n	800bbee <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800bb72:	2308      	movs	r3, #8
 800bb74:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800bb76:	2308      	movs	r3, #8
 800bb78:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	681b      	ldr	r3, [r3, #0]
 800bb7e:	689b      	ldr	r3, [r3, #8]
 800bb80:	0e5b      	lsrs	r3, r3, #25
 800bb82:	b2db      	uxtb	r3, r3
 800bb84:	f003 0307 	and.w	r3, r3, #7
 800bb88:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	681b      	ldr	r3, [r3, #0]
 800bb8e:	689b      	ldr	r3, [r3, #8]
 800bb90:	0f5b      	lsrs	r3, r3, #29
 800bb92:	b2db      	uxtb	r3, r3
 800bb94:	f003 0307 	and.w	r3, r3, #7
 800bb98:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 800bb9a:	7fbb      	ldrb	r3, [r7, #30]
 800bb9c:	7f3a      	ldrb	r2, [r7, #28]
 800bb9e:	f107 0120 	add.w	r1, r7, #32
 800bba2:	440a      	add	r2, r1
 800bba4:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800bba8:	fb02 f303 	mul.w	r3, r2, r3
 800bbac:	7f3a      	ldrb	r2, [r7, #28]
 800bbae:	f107 0120 	add.w	r1, r7, #32
 800bbb2:	440a      	add	r2, r1
 800bbb4:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800bbb8:	fb93 f3f2 	sdiv	r3, r3, r2
 800bbbc:	b29a      	uxth	r2, r3
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 800bbc4:	7ffb      	ldrb	r3, [r7, #31]
 800bbc6:	7f7a      	ldrb	r2, [r7, #29]
 800bbc8:	f107 0120 	add.w	r1, r7, #32
 800bbcc:	440a      	add	r2, r1
 800bbce:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800bbd2:	fb02 f303 	mul.w	r3, r2, r3
 800bbd6:	7f7a      	ldrb	r2, [r7, #29]
 800bbd8:	f107 0120 	add.w	r1, r7, #32
 800bbdc:	440a      	add	r2, r1
 800bbde:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800bbe2:	fb93 f3f2 	sdiv	r3, r3, r2
 800bbe6:	b29a      	uxth	r2, r3
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800bbee:	bf00      	nop
 800bbf0:	3724      	adds	r7, #36	; 0x24
 800bbf2:	46bd      	mov	sp, r7
 800bbf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbf8:	4770      	bx	lr
 800bbfa:	bf00      	nop
 800bbfc:	0800ebe8 	.word	0x0800ebe8
 800bc00:	0800ebf0 	.word	0x0800ebf0

0800bc04 <_ZN11HAL_VL53L0X27getSingleRangingMeasurementEP32VL53L0X_RangingMeasurementData_tb>:
   Serial.print during execution. Defaults to false.
    @returns True if address was set successfully, False otherwise
*/
/**************************************************************************/
VL53L0X_Error HAL_VL53L0X::getSingleRangingMeasurement(
    VL53L0X_RangingMeasurementData_t *RangingMeasurementData, bool debug) {
 800bc04:	b580      	push	{r7, lr}
 800bc06:	b086      	sub	sp, #24
 800bc08:	af00      	add	r7, sp, #0
 800bc0a:	60f8      	str	r0, [r7, #12]
 800bc0c:	60b9      	str	r1, [r7, #8]
 800bc0e:	4613      	mov	r3, r2
 800bc10:	71fb      	strb	r3, [r7, #7]
  VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800bc12:	2300      	movs	r3, #0
 800bc14:	75fb      	strb	r3, [r7, #23]

  /*
   *  Step  4 : Test ranging mode
   */

  if (Status == VL53L0X_ERROR_NONE) {
 800bc16:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800bc1a:	2b00      	cmp	r3, #0
 800bc1c:	d11b      	bne.n	800bc56 <_ZN11HAL_VL53L0X27getSingleRangingMeasurementEP32VL53L0X_RangingMeasurementData_tb+0x52>
    Status = VL53L0X_PerformSingleRangingMeasurement(pMyDevice,
 800bc1e:	68fb      	ldr	r3, [r7, #12]
 800bc20:	f8d3 3168 	ldr.w	r3, [r3, #360]	; 0x168
 800bc24:	68b9      	ldr	r1, [r7, #8]
 800bc26:	4618      	mov	r0, r3
 800bc28:	f000 fc98 	bl	800c55c <VL53L0X_PerformSingleRangingMeasurement>
 800bc2c:	4603      	mov	r3, r0
 800bc2e:	75fb      	strb	r3, [r7, #23]
                                                     RangingMeasurementData);

    if (debug) {
 800bc30:	79fb      	ldrb	r3, [r7, #7]
 800bc32:	2b00      	cmp	r3, #0
 800bc34:	d003      	beq.n	800bc3e <_ZN11HAL_VL53L0X27getSingleRangingMeasurementEP32VL53L0X_RangingMeasurementData_tb+0x3a>
      printRangeStatus(RangingMeasurementData);
 800bc36:	68b9      	ldr	r1, [r7, #8]
 800bc38:	68f8      	ldr	r0, [r7, #12]
 800bc3a:	f000 f813 	bl	800bc64 <_ZN11HAL_VL53L0X16printRangeStatusEP32VL53L0X_RangingMeasurementData_t>
    }

    if (debug) {
 800bc3e:	79fb      	ldrb	r3, [r7, #7]
 800bc40:	2b00      	cmp	r3, #0
 800bc42:	d008      	beq.n	800bc56 <_ZN11HAL_VL53L0X27getSingleRangingMeasurementEP32VL53L0X_RangingMeasurementData_tb+0x52>
      VL53L0X_GetLimitCheckCurrent(pMyDevice,
 800bc44:	68fb      	ldr	r3, [r7, #12]
 800bc46:	f8d3 3168 	ldr.w	r3, [r3, #360]	; 0x168
 800bc4a:	f107 0210 	add.w	r2, r7, #16
 800bc4e:	2103      	movs	r1, #3
 800bc50:	4618      	mov	r0, r3
 800bc52:	f000 f95d 	bl	800bf10 <VL53L0X_GetLimitCheckCurrent>
                                   &LimitCheckCurrent);

    }
  }

  return Status;
 800bc56:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800bc5a:	4618      	mov	r0, r3
 800bc5c:	3718      	adds	r7, #24
 800bc5e:	46bd      	mov	sp, r7
 800bc60:	bd80      	pop	{r7, pc}
	...

0800bc64 <_ZN11HAL_VL53L0X16printRangeStatusEP32VL53L0X_RangingMeasurementData_t>:
   format
    @param pRangingMeasurementData a pointer to the ranging measurement data
*/
/**************************************************************************/
void HAL_VL53L0X::printRangeStatus(
    VL53L0X_RangingMeasurementData_t *pRangingMeasurementData) {
 800bc64:	b580      	push	{r7, lr}
 800bc66:	b08c      	sub	sp, #48	; 0x30
 800bc68:	af00      	add	r7, sp, #0
 800bc6a:	6078      	str	r0, [r7, #4]
 800bc6c:	6039      	str	r1, [r7, #0]
  /*
   * New Range Status: data is valid when pRangingMeasurementData->RangeStatus =
   * 0
   */

  RangeStatus = pRangingMeasurementData->RangeStatus;
 800bc6e:	683b      	ldr	r3, [r7, #0]
 800bc70:	7e1b      	ldrb	r3, [r3, #24]
 800bc72:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  VL53L0X_GetRangeStatusString(RangeStatus, buf);
 800bc76:	f107 020c 	add.w	r2, r7, #12
 800bc7a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800bc7e:	4611      	mov	r1, r2
 800bc80:	4618      	mov	r0, r3
 800bc82:	f000 f80d 	bl	800bca0 <VL53L0X_GetRangeStatusString>

  printf("Range Status: %d\n", RangeStatus);
 800bc86:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800bc8a:	4619      	mov	r1, r3
 800bc8c:	4803      	ldr	r0, [pc, #12]	; (800bc9c <_ZN11HAL_VL53L0X16printRangeStatusEP32VL53L0X_RangingMeasurementData_t+0x38>)
 800bc8e:	f001 fe5b 	bl	800d948 <iprintf>
}
 800bc92:	bf00      	nop
 800bc94:	3730      	adds	r7, #48	; 0x30
 800bc96:	46bd      	mov	sp, r7
 800bc98:	bd80      	pop	{r7, pc}
 800bc9a:	bf00      	nop
 800bc9c:	0800ebf8 	.word	0x0800ebf8

0800bca0 <VL53L0X_GetRangeStatusString>:
  LOG_FUNCTION_END(Status);
  return Status;
}

VL53L0X_Error VL53L0X_GetRangeStatusString(uint8_t RangeStatus,
                                           char *pRangeStatusString) {
 800bca0:	b580      	push	{r7, lr}
 800bca2:	b084      	sub	sp, #16
 800bca4:	af00      	add	r7, sp, #0
 800bca6:	4603      	mov	r3, r0
 800bca8:	6039      	str	r1, [r7, #0]
 800bcaa:	71fb      	strb	r3, [r7, #7]
  VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800bcac:	2300      	movs	r3, #0
 800bcae:	73fb      	strb	r3, [r7, #15]
  LOG_FUNCTION_START("");

  Status = VL53L0X_get_range_status_string(RangeStatus, pRangeStatusString);
 800bcb0:	79fb      	ldrb	r3, [r7, #7]
 800bcb2:	6839      	ldr	r1, [r7, #0]
 800bcb4:	4618      	mov	r0, r3
 800bcb6:	f001 fc1b 	bl	800d4f0 <VL53L0X_get_range_status_string>
 800bcba:	4603      	mov	r3, r0
 800bcbc:	73fb      	strb	r3, [r7, #15]

  LOG_FUNCTION_END(Status);
  return Status;
 800bcbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800bcc2:	4618      	mov	r0, r3
 800bcc4:	3710      	adds	r7, #16
 800bcc6:	46bd      	mov	sp, r7
 800bcc8:	bd80      	pop	{r7, pc}
	...

0800bccc <VL53L0X_SetDeviceMode>:
  LOG_FUNCTION_END(Status);
  return Status;
}

VL53L0X_Error VL53L0X_SetDeviceMode(VL53L0X_DEV Dev,
                                    VL53L0X_DeviceModes DeviceMode) {
 800bccc:	b480      	push	{r7}
 800bcce:	b085      	sub	sp, #20
 800bcd0:	af00      	add	r7, sp, #0
 800bcd2:	6078      	str	r0, [r7, #4]
 800bcd4:	460b      	mov	r3, r1
 800bcd6:	70fb      	strb	r3, [r7, #3]
  VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800bcd8:	2300      	movs	r3, #0
 800bcda:	73fb      	strb	r3, [r7, #15]

  LOG_FUNCTION_START("%d", (int)DeviceMode);

  switch (DeviceMode) {
 800bcdc:	78fb      	ldrb	r3, [r7, #3]
 800bcde:	2b15      	cmp	r3, #21
 800bce0:	d832      	bhi.n	800bd48 <VL53L0X_SetDeviceMode+0x7c>
 800bce2:	a201      	add	r2, pc, #4	; (adr r2, 800bce8 <VL53L0X_SetDeviceMode+0x1c>)
 800bce4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bce8:	0800bd41 	.word	0x0800bd41
 800bcec:	0800bd41 	.word	0x0800bd41
 800bcf0:	0800bd49 	.word	0x0800bd49
 800bcf4:	0800bd41 	.word	0x0800bd41
 800bcf8:	0800bd49 	.word	0x0800bd49
 800bcfc:	0800bd49 	.word	0x0800bd49
 800bd00:	0800bd49 	.word	0x0800bd49
 800bd04:	0800bd49 	.word	0x0800bd49
 800bd08:	0800bd49 	.word	0x0800bd49
 800bd0c:	0800bd49 	.word	0x0800bd49
 800bd10:	0800bd49 	.word	0x0800bd49
 800bd14:	0800bd49 	.word	0x0800bd49
 800bd18:	0800bd49 	.word	0x0800bd49
 800bd1c:	0800bd49 	.word	0x0800bd49
 800bd20:	0800bd49 	.word	0x0800bd49
 800bd24:	0800bd49 	.word	0x0800bd49
 800bd28:	0800bd49 	.word	0x0800bd49
 800bd2c:	0800bd49 	.word	0x0800bd49
 800bd30:	0800bd49 	.word	0x0800bd49
 800bd34:	0800bd49 	.word	0x0800bd49
 800bd38:	0800bd41 	.word	0x0800bd41
 800bd3c:	0800bd41 	.word	0x0800bd41
  case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
  case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
  case VL53L0X_DEVICEMODE_GPIO_DRIVE:
  case VL53L0X_DEVICEMODE_GPIO_OSC:
    /* Supported modes */
    VL53L0X_SETPARAMETERFIELD(Dev, DeviceMode, DeviceMode);
 800bd40:	78fa      	ldrb	r2, [r7, #3]
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	741a      	strb	r2, [r3, #16]
    break;
 800bd46:	e001      	b.n	800bd4c <VL53L0X_SetDeviceMode+0x80>
  default:
    /* Unsupported mode */
    Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 800bd48:	23f8      	movs	r3, #248	; 0xf8
 800bd4a:	73fb      	strb	r3, [r7, #15]
  }

  LOG_FUNCTION_END(Status);
  return Status;
 800bd4c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800bd50:	4618      	mov	r0, r3
 800bd52:	3714      	adds	r7, #20
 800bd54:	46bd      	mov	sp, r7
 800bd56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd5a:	4770      	bx	lr

0800bd5c <VL53L0X_GetDeviceMode>:

VL53L0X_Error VL53L0X_GetDeviceMode(VL53L0X_DEV Dev,
                                    VL53L0X_DeviceModes *pDeviceMode) {
 800bd5c:	b480      	push	{r7}
 800bd5e:	b085      	sub	sp, #20
 800bd60:	af00      	add	r7, sp, #0
 800bd62:	6078      	str	r0, [r7, #4]
 800bd64:	6039      	str	r1, [r7, #0]
  VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800bd66:	2300      	movs	r3, #0
 800bd68:	73fb      	strb	r3, [r7, #15]
  LOG_FUNCTION_START("");

  VL53L0X_GETPARAMETERFIELD(Dev, DeviceMode, *pDeviceMode);
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	7c1a      	ldrb	r2, [r3, #16]
 800bd6e:	683b      	ldr	r3, [r7, #0]
 800bd70:	701a      	strb	r2, [r3, #0]

  LOG_FUNCTION_END(Status);
  return Status;
 800bd72:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800bd76:	4618      	mov	r0, r3
 800bd78:	3714      	adds	r7, #20
 800bd7a:	46bd      	mov	sp, r7
 800bd7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd80:	4770      	bx	lr

0800bd82 <VL53L0X_GetXTalkCompensationEnable>:
  return Status;
}

VL53L0X_Error
VL53L0X_GetXTalkCompensationEnable(VL53L0X_DEV Dev,
                                   uint8_t *pXTalkCompensationEnable) {
 800bd82:	b480      	push	{r7}
 800bd84:	b085      	sub	sp, #20
 800bd86:	af00      	add	r7, sp, #0
 800bd88:	6078      	str	r0, [r7, #4]
 800bd8a:	6039      	str	r1, [r7, #0]
  VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800bd8c:	2300      	movs	r3, #0
 800bd8e:	73fb      	strb	r3, [r7, #15]
  uint8_t Temp8;
  LOG_FUNCTION_START("");

  VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable, Temp8);
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	7f1b      	ldrb	r3, [r3, #28]
 800bd94:	73bb      	strb	r3, [r7, #14]
  *pXTalkCompensationEnable = Temp8;
 800bd96:	683b      	ldr	r3, [r7, #0]
 800bd98:	7bba      	ldrb	r2, [r7, #14]
 800bd9a:	701a      	strb	r2, [r3, #0]

  LOG_FUNCTION_END(Status);
  return Status;
 800bd9c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800bda0:	4618      	mov	r0, r3
 800bda2:	3714      	adds	r7, #20
 800bda4:	46bd      	mov	sp, r7
 800bda6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdaa:	4770      	bx	lr

0800bdac <VL53L0X_GetLimitCheckEnable>:
  return Status;
}

VL53L0X_Error VL53L0X_GetLimitCheckEnable(VL53L0X_DEV Dev,
                                          uint16_t LimitCheckId,
                                          uint8_t *pLimitCheckEnable) {
 800bdac:	b480      	push	{r7}
 800bdae:	b087      	sub	sp, #28
 800bdb0:	af00      	add	r7, sp, #0
 800bdb2:	60f8      	str	r0, [r7, #12]
 800bdb4:	460b      	mov	r3, r1
 800bdb6:	607a      	str	r2, [r7, #4]
 800bdb8:	817b      	strh	r3, [r7, #10]
  VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800bdba:	2300      	movs	r3, #0
 800bdbc:	75fb      	strb	r3, [r7, #23]
  uint8_t Temp8;

  LOG_FUNCTION_START("");

  if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 800bdbe:	897b      	ldrh	r3, [r7, #10]
 800bdc0:	2b05      	cmp	r3, #5
 800bdc2:	d905      	bls.n	800bdd0 <VL53L0X_GetLimitCheckEnable+0x24>
    Status = VL53L0X_ERROR_INVALID_PARAMS;
 800bdc4:	23fc      	movs	r3, #252	; 0xfc
 800bdc6:	75fb      	strb	r3, [r7, #23]
    *pLimitCheckEnable = 0;
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	2200      	movs	r2, #0
 800bdcc:	701a      	strb	r2, [r3, #0]
 800bdce:	e008      	b.n	800bde2 <VL53L0X_GetLimitCheckEnable+0x36>
  } else {
    VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable, LimitCheckId, Temp8);
 800bdd0:	897b      	ldrh	r3, [r7, #10]
 800bdd2:	68fa      	ldr	r2, [r7, #12]
 800bdd4:	4413      	add	r3, r2
 800bdd6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bdda:	75bb      	strb	r3, [r7, #22]
    *pLimitCheckEnable = Temp8;
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	7dba      	ldrb	r2, [r7, #22]
 800bde0:	701a      	strb	r2, [r3, #0]
  }

  LOG_FUNCTION_END(Status);
  return Status;
 800bde2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800bde6:	4618      	mov	r0, r3
 800bde8:	371c      	adds	r7, #28
 800bdea:	46bd      	mov	sp, r7
 800bdec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdf0:	4770      	bx	lr
	...

0800bdf4 <VL53L0X_GetLimitCheckValue>:
  LOG_FUNCTION_END(Status);
  return Status;
}

VL53L0X_Error VL53L0X_GetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
                                         FixPoint1616_t *pLimitCheckValue) {
 800bdf4:	b580      	push	{r7, lr}
 800bdf6:	b086      	sub	sp, #24
 800bdf8:	af00      	add	r7, sp, #0
 800bdfa:	60f8      	str	r0, [r7, #12]
 800bdfc:	460b      	mov	r3, r1
 800bdfe:	607a      	str	r2, [r7, #4]
 800be00:	817b      	strh	r3, [r7, #10]
  VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800be02:	2300      	movs	r3, #0
 800be04:	75fb      	strb	r3, [r7, #23]
  uint8_t EnableZeroValue = 0;
 800be06:	2300      	movs	r3, #0
 800be08:	75bb      	strb	r3, [r7, #22]
  uint16_t Temp16;
  FixPoint1616_t TempFix1616;

  LOG_FUNCTION_START("");

  switch (LimitCheckId) {
 800be0a:	897b      	ldrh	r3, [r7, #10]
 800be0c:	2b05      	cmp	r3, #5
 800be0e:	d847      	bhi.n	800bea0 <VL53L0X_GetLimitCheckValue+0xac>
 800be10:	a201      	add	r2, pc, #4	; (adr r2, 800be18 <VL53L0X_GetLimitCheckValue+0x24>)
 800be12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be16:	bf00      	nop
 800be18:	0800be31 	.word	0x0800be31
 800be1c:	0800be3d 	.word	0x0800be3d
 800be20:	0800be63 	.word	0x0800be63
 800be24:	0800be6f 	.word	0x0800be6f
 800be28:	0800be7b 	.word	0x0800be7b
 800be2c:	0800be7b 	.word	0x0800be7b

  case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
    /* internal computation: */
    VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800be30:	68fb      	ldr	r3, [r7, #12]
 800be32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800be34:	613b      	str	r3, [r7, #16]
                                   VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
                                   TempFix1616);
    EnableZeroValue = 0;
 800be36:	2300      	movs	r3, #0
 800be38:	75bb      	strb	r3, [r7, #22]
    break;
 800be3a:	e033      	b.n	800bea4 <VL53L0X_GetLimitCheckValue+0xb0>

  case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
    Status = VL53L0X_RdWord(
 800be3c:	f107 0314 	add.w	r3, r7, #20
 800be40:	461a      	mov	r2, r3
 800be42:	2144      	movs	r1, #68	; 0x44
 800be44:	68f8      	ldr	r0, [r7, #12]
 800be46:	f001 fd0f 	bl	800d868 <VL53L0X_RdWord>
 800be4a:	4603      	mov	r3, r0
 800be4c:	75fb      	strb	r3, [r7, #23]
        Dev, VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT, &Temp16);
    if (Status == VL53L0X_ERROR_NONE)
 800be4e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800be52:	2b00      	cmp	r3, #0
 800be54:	d102      	bne.n	800be5c <VL53L0X_GetLimitCheckValue+0x68>
      TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 800be56:	8abb      	ldrh	r3, [r7, #20]
 800be58:	025b      	lsls	r3, r3, #9
 800be5a:	613b      	str	r3, [r7, #16]

    EnableZeroValue = 1;
 800be5c:	2301      	movs	r3, #1
 800be5e:	75bb      	strb	r3, [r7, #22]
    break;
 800be60:	e020      	b.n	800bea4 <VL53L0X_GetLimitCheckValue+0xb0>

  case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:
    /* internal computation: */
    VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800be62:	68fb      	ldr	r3, [r7, #12]
 800be64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800be66:	613b      	str	r3, [r7, #16]
                                   VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
                                   TempFix1616);
    EnableZeroValue = 0;
 800be68:	2300      	movs	r3, #0
 800be6a:	75bb      	strb	r3, [r7, #22]
    break;
 800be6c:	e01a      	b.n	800bea4 <VL53L0X_GetLimitCheckValue+0xb0>

  case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:
    /* internal computation: */
    VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800be6e:	68fb      	ldr	r3, [r7, #12]
 800be70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be72:	613b      	str	r3, [r7, #16]
                                   VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
                                   TempFix1616);
    EnableZeroValue = 0;
 800be74:	2300      	movs	r3, #0
 800be76:	75bb      	strb	r3, [r7, #22]
    break;
 800be78:	e014      	b.n	800bea4 <VL53L0X_GetLimitCheckValue+0xb0>

  case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
  case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:
    Status = VL53L0X_RdWord(Dev, VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
 800be7a:	f107 0314 	add.w	r3, r7, #20
 800be7e:	461a      	mov	r2, r3
 800be80:	2164      	movs	r1, #100	; 0x64
 800be82:	68f8      	ldr	r0, [r7, #12]
 800be84:	f001 fcf0 	bl	800d868 <VL53L0X_RdWord>
 800be88:	4603      	mov	r3, r0
 800be8a:	75fb      	strb	r3, [r7, #23]
                            &Temp16);
    if (Status == VL53L0X_ERROR_NONE)
 800be8c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800be90:	2b00      	cmp	r3, #0
 800be92:	d102      	bne.n	800be9a <VL53L0X_GetLimitCheckValue+0xa6>
      TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 800be94:	8abb      	ldrh	r3, [r7, #20]
 800be96:	025b      	lsls	r3, r3, #9
 800be98:	613b      	str	r3, [r7, #16]

    EnableZeroValue = 0;
 800be9a:	2300      	movs	r3, #0
 800be9c:	75bb      	strb	r3, [r7, #22]
    break;
 800be9e:	e001      	b.n	800bea4 <VL53L0X_GetLimitCheckValue+0xb0>

  default:
    Status = VL53L0X_ERROR_INVALID_PARAMS;
 800bea0:	23fc      	movs	r3, #252	; 0xfc
 800bea2:	75fb      	strb	r3, [r7, #23]
  }

  if (Status == VL53L0X_ERROR_NONE) {
 800bea4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800bea8:	2b00      	cmp	r3, #0
 800beaa:	d12a      	bne.n	800bf02 <VL53L0X_GetLimitCheckValue+0x10e>

    if (EnableZeroValue == 1) {
 800beac:	7dbb      	ldrb	r3, [r7, #22]
 800beae:	2b01      	cmp	r3, #1
 800beb0:	d124      	bne.n	800befc <VL53L0X_GetLimitCheckValue+0x108>

      if (TempFix1616 == 0) {
 800beb2:	693b      	ldr	r3, [r7, #16]
 800beb4:	2b00      	cmp	r3, #0
 800beb6:	d110      	bne.n	800beda <VL53L0X_GetLimitCheckValue+0xe6>
        /* disabled: return value from memory */
        VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue, LimitCheckId,
 800beb8:	897b      	ldrh	r3, [r7, #10]
 800beba:	68fa      	ldr	r2, [r7, #12]
 800bebc:	330c      	adds	r3, #12
 800bebe:	009b      	lsls	r3, r3, #2
 800bec0:	4413      	add	r3, r2
 800bec2:	685b      	ldr	r3, [r3, #4]
 800bec4:	613b      	str	r3, [r7, #16]
                                       TempFix1616);
        *pLimitCheckValue = TempFix1616;
 800bec6:	693a      	ldr	r2, [r7, #16]
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	601a      	str	r2, [r3, #0]
        VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable, LimitCheckId, 0);
 800becc:	897b      	ldrh	r3, [r7, #10]
 800bece:	68fa      	ldr	r2, [r7, #12]
 800bed0:	4413      	add	r3, r2
 800bed2:	2200      	movs	r2, #0
 800bed4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 800bed8:	e013      	b.n	800bf02 <VL53L0X_GetLimitCheckValue+0x10e>
      } else {
        *pLimitCheckValue = TempFix1616;
 800beda:	693a      	ldr	r2, [r7, #16]
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	601a      	str	r2, [r3, #0]
        VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue, LimitCheckId,
 800bee0:	897b      	ldrh	r3, [r7, #10]
 800bee2:	693a      	ldr	r2, [r7, #16]
 800bee4:	68f9      	ldr	r1, [r7, #12]
 800bee6:	330c      	adds	r3, #12
 800bee8:	009b      	lsls	r3, r3, #2
 800beea:	440b      	add	r3, r1
 800beec:	605a      	str	r2, [r3, #4]
                                       TempFix1616);
        VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable, LimitCheckId, 1);
 800beee:	897b      	ldrh	r3, [r7, #10]
 800bef0:	68fa      	ldr	r2, [r7, #12]
 800bef2:	4413      	add	r3, r2
 800bef4:	2201      	movs	r2, #1
 800bef6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 800befa:	e002      	b.n	800bf02 <VL53L0X_GetLimitCheckValue+0x10e>
      }
    } else {
      *pLimitCheckValue = TempFix1616;
 800befc:	693a      	ldr	r2, [r7, #16]
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	601a      	str	r2, [r3, #0]
    }
  }

  LOG_FUNCTION_END(Status);
  return Status;
 800bf02:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800bf06:	4618      	mov	r0, r3
 800bf08:	3718      	adds	r7, #24
 800bf0a:	46bd      	mov	sp, r7
 800bf0c:	bd80      	pop	{r7, pc}
 800bf0e:	bf00      	nop

0800bf10 <VL53L0X_GetLimitCheckCurrent>:

VL53L0X_Error VL53L0X_GetLimitCheckCurrent(VL53L0X_DEV Dev,
                                           uint16_t LimitCheckId,
                                           FixPoint1616_t *pLimitCheckCurrent) {
 800bf10:	b4b0      	push	{r4, r5, r7}
 800bf12:	b08d      	sub	sp, #52	; 0x34
 800bf14:	af00      	add	r7, sp, #0
 800bf16:	60f8      	str	r0, [r7, #12]
 800bf18:	460b      	mov	r3, r1
 800bf1a:	607a      	str	r2, [r7, #4]
 800bf1c:	817b      	strh	r3, [r7, #10]
  VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800bf1e:	2300      	movs	r3, #0
 800bf20:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  VL53L0X_RangingMeasurementData_t LastRangeDataBuffer;

  LOG_FUNCTION_START("");

  if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 800bf24:	897b      	ldrh	r3, [r7, #10]
 800bf26:	2b05      	cmp	r3, #5
 800bf28:	d903      	bls.n	800bf32 <VL53L0X_GetLimitCheckCurrent+0x22>
    Status = VL53L0X_ERROR_INVALID_PARAMS;
 800bf2a:	23fc      	movs	r3, #252	; 0xfc
 800bf2c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800bf30:	e05d      	b.n	800bfee <VL53L0X_GetLimitCheckCurrent+0xde>
  } else {
    switch (LimitCheckId) {
 800bf32:	897b      	ldrh	r3, [r7, #10]
 800bf34:	2b05      	cmp	r3, #5
 800bf36:	d857      	bhi.n	800bfe8 <VL53L0X_GetLimitCheckCurrent+0xd8>
 800bf38:	a201      	add	r2, pc, #4	; (adr r2, 800bf40 <VL53L0X_GetLimitCheckCurrent+0x30>)
 800bf3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf3e:	bf00      	nop
 800bf40:	0800bf59 	.word	0x0800bf59
 800bf44:	0800bf65 	.word	0x0800bf65
 800bf48:	0800bf83 	.word	0x0800bf83
 800bf4c:	0800bf8f 	.word	0x0800bf8f
 800bf50:	0800bfad 	.word	0x0800bfad
 800bf54:	0800bfcb 	.word	0x0800bfcb
    case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
      /* Need to run a ranging to have the latest values */
      *pLimitCheckCurrent = PALDevDataGet(Dev, SigmaEstimate);
 800bf58:	68fb      	ldr	r3, [r7, #12]
 800bf5a:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	601a      	str	r2, [r3, #0]

      break;
 800bf62:	e044      	b.n	800bfee <VL53L0X_GetLimitCheckCurrent+0xde>

    case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
      /* Need to run a ranging to have the latest values */
      LastRangeDataBuffer = PALDevDataGet(Dev, LastRangeMeasure);
 800bf64:	68fb      	ldr	r3, [r7, #12]
 800bf66:	f107 0410 	add.w	r4, r7, #16
 800bf6a:	f103 0550 	add.w	r5, r3, #80	; 0x50
 800bf6e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800bf70:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800bf72:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800bf76:	e884 0007 	stmia.w	r4, {r0, r1, r2}
      *pLimitCheckCurrent = LastRangeDataBuffer.SignalRateRtnMegaCps;
 800bf7a:	69fa      	ldr	r2, [r7, #28]
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	601a      	str	r2, [r3, #0]

      break;
 800bf80:	e035      	b.n	800bfee <VL53L0X_GetLimitCheckCurrent+0xde>

    case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:
      /* Need to run a ranging to have the latest values */
      *pLimitCheckCurrent = PALDevDataGet(Dev, LastSignalRefMcps);
 800bf82:	68fb      	ldr	r3, [r7, #12]
 800bf84:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	601a      	str	r2, [r3, #0]

      break;
 800bf8c:	e02f      	b.n	800bfee <VL53L0X_GetLimitCheckCurrent+0xde>

    case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:
      /* Need to run a ranging to have the latest values */
      LastRangeDataBuffer = PALDevDataGet(Dev, LastRangeMeasure);
 800bf8e:	68fb      	ldr	r3, [r7, #12]
 800bf90:	f107 0410 	add.w	r4, r7, #16
 800bf94:	f103 0550 	add.w	r5, r3, #80	; 0x50
 800bf98:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800bf9a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800bf9c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800bfa0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
      *pLimitCheckCurrent = LastRangeDataBuffer.SignalRateRtnMegaCps;
 800bfa4:	69fa      	ldr	r2, [r7, #28]
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	601a      	str	r2, [r3, #0]

      break;
 800bfaa:	e020      	b.n	800bfee <VL53L0X_GetLimitCheckCurrent+0xde>

    case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
      /* Need to run a ranging to have the latest values */
      LastRangeDataBuffer = PALDevDataGet(Dev, LastRangeMeasure);
 800bfac:	68fb      	ldr	r3, [r7, #12]
 800bfae:	f107 0410 	add.w	r4, r7, #16
 800bfb2:	f103 0550 	add.w	r5, r3, #80	; 0x50
 800bfb6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800bfb8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800bfba:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800bfbe:	e884 0007 	stmia.w	r4, {r0, r1, r2}
      *pLimitCheckCurrent = LastRangeDataBuffer.SignalRateRtnMegaCps;
 800bfc2:	69fa      	ldr	r2, [r7, #28]
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	601a      	str	r2, [r3, #0]

      break;
 800bfc8:	e011      	b.n	800bfee <VL53L0X_GetLimitCheckCurrent+0xde>

    case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:
      /* Need to run a ranging to have the latest values */
      LastRangeDataBuffer = PALDevDataGet(Dev, LastRangeMeasure);
 800bfca:	68fb      	ldr	r3, [r7, #12]
 800bfcc:	f107 0410 	add.w	r4, r7, #16
 800bfd0:	f103 0550 	add.w	r5, r3, #80	; 0x50
 800bfd4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800bfd6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800bfd8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800bfdc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
      *pLimitCheckCurrent = LastRangeDataBuffer.SignalRateRtnMegaCps;
 800bfe0:	69fa      	ldr	r2, [r7, #28]
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	601a      	str	r2, [r3, #0]

      break;
 800bfe6:	e002      	b.n	800bfee <VL53L0X_GetLimitCheckCurrent+0xde>

    default:
      Status = VL53L0X_ERROR_INVALID_PARAMS;
 800bfe8:	23fc      	movs	r3, #252	; 0xfc
 800bfea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }
  }

  LOG_FUNCTION_END(Status);
  return Status;
 800bfee:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800bff2:	4618      	mov	r0, r3
 800bff4:	3734      	adds	r7, #52	; 0x34
 800bff6:	46bd      	mov	sp, r7
 800bff8:	bcb0      	pop	{r4, r5, r7}
 800bffa:	4770      	bx	lr

0800bffc <VL53L0X_PerformSingleMeasurement>:
}

/* End Group PAL Parameters Functions */

/* Group PAL Measurement Functions */
VL53L0X_Error VL53L0X_PerformSingleMeasurement(VL53L0X_DEV Dev) {
 800bffc:	b580      	push	{r7, lr}
 800bffe:	b084      	sub	sp, #16
 800c000:	af00      	add	r7, sp, #0
 800c002:	6078      	str	r0, [r7, #4]
  VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c004:	2300      	movs	r3, #0
 800c006:	73fb      	strb	r3, [r7, #15]
  VL53L0X_DeviceModes DeviceMode;

  LOG_FUNCTION_START("");

  /* Get Current DeviceMode */
  Status = VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 800c008:	f107 030e 	add.w	r3, r7, #14
 800c00c:	4619      	mov	r1, r3
 800c00e:	6878      	ldr	r0, [r7, #4]
 800c010:	f7ff fea4 	bl	800bd5c <VL53L0X_GetDeviceMode>
 800c014:	4603      	mov	r3, r0
 800c016:	73fb      	strb	r3, [r7, #15]

  /* Start immediately to run a single ranging measurement in case of
   * single ranging or single histogram */
  if (Status == VL53L0X_ERROR_NONE &&
 800c018:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c01c:	2b00      	cmp	r3, #0
 800c01e:	d107      	bne.n	800c030 <VL53L0X_PerformSingleMeasurement+0x34>
      DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 800c020:	7bbb      	ldrb	r3, [r7, #14]
  if (Status == VL53L0X_ERROR_NONE &&
 800c022:	2b00      	cmp	r3, #0
 800c024:	d104      	bne.n	800c030 <VL53L0X_PerformSingleMeasurement+0x34>
    Status = VL53L0X_StartMeasurement(Dev);
 800c026:	6878      	ldr	r0, [r7, #4]
 800c028:	f000 f882 	bl	800c130 <VL53L0X_StartMeasurement>
 800c02c:	4603      	mov	r3, r0
 800c02e:	73fb      	strb	r3, [r7, #15]

  if (Status == VL53L0X_ERROR_NONE)
 800c030:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c034:	2b00      	cmp	r3, #0
 800c036:	d104      	bne.n	800c042 <VL53L0X_PerformSingleMeasurement+0x46>
    Status = VL53L0X_measurement_poll_for_completion(Dev);
 800c038:	6878      	ldr	r0, [r7, #4]
 800c03a:	f000 fb68 	bl	800c70e <VL53L0X_measurement_poll_for_completion>
 800c03e:	4603      	mov	r3, r0
 800c040:	73fb      	strb	r3, [r7, #15]

  /* Change PAL State in case of single ranging or single histogram */
  if (Status == VL53L0X_ERROR_NONE &&
 800c042:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c046:	2b00      	cmp	r3, #0
 800c048:	d106      	bne.n	800c058 <VL53L0X_PerformSingleMeasurement+0x5c>
      DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 800c04a:	7bbb      	ldrb	r3, [r7, #14]
  if (Status == VL53L0X_ERROR_NONE &&
 800c04c:	2b00      	cmp	r3, #0
 800c04e:	d103      	bne.n	800c058 <VL53L0X_PerformSingleMeasurement+0x5c>
    PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	2203      	movs	r2, #3
 800c054:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132

  LOG_FUNCTION_END(Status);
  return Status;
 800c058:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c05c:	4618      	mov	r0, r3
 800c05e:	3710      	adds	r7, #16
 800c060:	46bd      	mov	sp, r7
 800c062:	bd80      	pop	{r7, pc}

0800c064 <_Z37VL53L0X_CheckAndLoadInterruptSettingsP13VL53L0X_Dev_th>:
  LOG_FUNCTION_END(Status);
  return Status;
}

VL53L0X_Error VL53L0X_CheckAndLoadInterruptSettings(VL53L0X_DEV Dev,
                                                    uint8_t StartNotStopFlag) {
 800c064:	b580      	push	{r7, lr}
 800c066:	b086      	sub	sp, #24
 800c068:	af00      	add	r7, sp, #0
 800c06a:	6078      	str	r0, [r7, #4]
 800c06c:	460b      	mov	r3, r1
 800c06e:	70fb      	strb	r3, [r7, #3]
  uint8_t InterruptConfig;
  FixPoint1616_t ThresholdLow;
  FixPoint1616_t ThresholdHigh;
  VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c070:	2300      	movs	r3, #0
 800c072:	75fb      	strb	r3, [r7, #23]

  InterruptConfig =
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	f893 30da 	ldrb.w	r3, [r3, #218]	; 0xda
 800c07a:	75bb      	strb	r3, [r7, #22]
      VL53L0X_GETDEVICESPECIFICPARAMETER(Dev, Pin0GpioFunctionality);

  if ((InterruptConfig == VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW) ||
 800c07c:	7dbb      	ldrb	r3, [r7, #22]
 800c07e:	2b01      	cmp	r3, #1
 800c080:	d005      	beq.n	800c08e <_Z37VL53L0X_CheckAndLoadInterruptSettingsP13VL53L0X_Dev_th+0x2a>
 800c082:	7dbb      	ldrb	r3, [r7, #22]
 800c084:	2b02      	cmp	r3, #2
 800c086:	d002      	beq.n	800c08e <_Z37VL53L0X_CheckAndLoadInterruptSettingsP13VL53L0X_Dev_th+0x2a>
      (InterruptConfig == VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH) ||
 800c088:	7dbb      	ldrb	r3, [r7, #22]
 800c08a:	2b03      	cmp	r3, #3
 800c08c:	d147      	bne.n	800c11e <_Z37VL53L0X_CheckAndLoadInterruptSettingsP13VL53L0X_Dev_th+0xba>
      (InterruptConfig == VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT)) {

    Status = VL53L0X_GetInterruptThresholds(
 800c08e:	f107 030c 	add.w	r3, r7, #12
 800c092:	f107 0210 	add.w	r2, r7, #16
 800c096:	2101      	movs	r1, #1
 800c098:	6878      	ldr	r0, [r7, #4]
 800c09a:	f000 fa8f 	bl	800c5bc <VL53L0X_GetInterruptThresholds>
 800c09e:	4603      	mov	r3, r0
 800c0a0:	75fb      	strb	r3, [r7, #23]
        Dev, VL53L0X_DEVICEMODE_CONTINUOUS_RANGING, &ThresholdLow,
        &ThresholdHigh);

    if (((ThresholdLow > 255 * 65536) || (ThresholdHigh > 255 * 65536)) &&
 800c0a2:	693b      	ldr	r3, [r7, #16]
 800c0a4:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 800c0a8:	d803      	bhi.n	800c0b2 <_Z37VL53L0X_CheckAndLoadInterruptSettingsP13VL53L0X_Dev_th+0x4e>
 800c0aa:	68fb      	ldr	r3, [r7, #12]
 800c0ac:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 800c0b0:	d935      	bls.n	800c11e <_Z37VL53L0X_CheckAndLoadInterruptSettingsP13VL53L0X_Dev_th+0xba>
 800c0b2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c0b6:	2b00      	cmp	r3, #0
 800c0b8:	d131      	bne.n	800c11e <_Z37VL53L0X_CheckAndLoadInterruptSettingsP13VL53L0X_Dev_th+0xba>
        (Status == VL53L0X_ERROR_NONE)) {

      if (StartNotStopFlag != 0) {
 800c0ba:	78fb      	ldrb	r3, [r7, #3]
 800c0bc:	2b00      	cmp	r3, #0
 800c0be:	d006      	beq.n	800c0ce <_Z37VL53L0X_CheckAndLoadInterruptSettingsP13VL53L0X_Dev_th+0x6a>
        Status = VL53L0X_load_tuning_settings(Dev, InterruptThresholdSettings);
 800c0c0:	491a      	ldr	r1, [pc, #104]	; (800c12c <_Z37VL53L0X_CheckAndLoadInterruptSettingsP13VL53L0X_Dev_th+0xc8>)
 800c0c2:	6878      	ldr	r0, [r7, #4]
 800c0c4:	f000 fbce 	bl	800c864 <VL53L0X_load_tuning_settings>
 800c0c8:	4603      	mov	r3, r0
 800c0ca:	75fb      	strb	r3, [r7, #23]
 800c0cc:	e027      	b.n	800c11e <_Z37VL53L0X_CheckAndLoadInterruptSettingsP13VL53L0X_Dev_th+0xba>
      } else {
        Status |= VL53L0X_WrByte(Dev, 0xFF, 0x04);
 800c0ce:	2204      	movs	r2, #4
 800c0d0:	21ff      	movs	r1, #255	; 0xff
 800c0d2:	6878      	ldr	r0, [r7, #4]
 800c0d4:	f001 fb85 	bl	800d7e2 <VL53L0X_WrByte>
 800c0d8:	4603      	mov	r3, r0
 800c0da:	461a      	mov	r2, r3
 800c0dc:	7dfb      	ldrb	r3, [r7, #23]
 800c0de:	4313      	orrs	r3, r2
 800c0e0:	75fb      	strb	r3, [r7, #23]
        Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
 800c0e2:	2200      	movs	r2, #0
 800c0e4:	2170      	movs	r1, #112	; 0x70
 800c0e6:	6878      	ldr	r0, [r7, #4]
 800c0e8:	f001 fb7b 	bl	800d7e2 <VL53L0X_WrByte>
 800c0ec:	4603      	mov	r3, r0
 800c0ee:	461a      	mov	r2, r3
 800c0f0:	7dfb      	ldrb	r3, [r7, #23]
 800c0f2:	4313      	orrs	r3, r2
 800c0f4:	75fb      	strb	r3, [r7, #23]
        Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800c0f6:	2200      	movs	r2, #0
 800c0f8:	21ff      	movs	r1, #255	; 0xff
 800c0fa:	6878      	ldr	r0, [r7, #4]
 800c0fc:	f001 fb71 	bl	800d7e2 <VL53L0X_WrByte>
 800c100:	4603      	mov	r3, r0
 800c102:	461a      	mov	r2, r3
 800c104:	7dfb      	ldrb	r3, [r7, #23]
 800c106:	4313      	orrs	r3, r2
 800c108:	75fb      	strb	r3, [r7, #23]
        Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 800c10a:	2200      	movs	r2, #0
 800c10c:	2180      	movs	r1, #128	; 0x80
 800c10e:	6878      	ldr	r0, [r7, #4]
 800c110:	f001 fb67 	bl	800d7e2 <VL53L0X_WrByte>
 800c114:	4603      	mov	r3, r0
 800c116:	461a      	mov	r2, r3
 800c118:	7dfb      	ldrb	r3, [r7, #23]
 800c11a:	4313      	orrs	r3, r2
 800c11c:	75fb      	strb	r3, [r7, #23]
      }
    }
  }

  return Status;
 800c11e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c122:	4618      	mov	r0, r3
 800c124:	3718      	adds	r7, #24
 800c126:	46bd      	mov	sp, r7
 800c128:	bd80      	pop	{r7, pc}
 800c12a:	bf00      	nop
 800c12c:	24000098 	.word	0x24000098

0800c130 <VL53L0X_StartMeasurement>:

VL53L0X_Error VL53L0X_StartMeasurement(VL53L0X_DEV Dev) {
 800c130:	b580      	push	{r7, lr}
 800c132:	b086      	sub	sp, #24
 800c134:	af00      	add	r7, sp, #0
 800c136:	6078      	str	r0, [r7, #4]
  VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c138:	2300      	movs	r3, #0
 800c13a:	75fb      	strb	r3, [r7, #23]
  VL53L0X_DeviceModes DeviceMode;
  uint8_t Byte;
  uint8_t StartStopByte = VL53L0X_REG_SYSRANGE_MODE_START_STOP;
 800c13c:	2301      	movs	r3, #1
 800c13e:	73fb      	strb	r3, [r7, #15]
  uint32_t LoopNb;
  LOG_FUNCTION_START("");

  /* Get Current DeviceMode */
  VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 800c140:	f107 030e 	add.w	r3, r7, #14
 800c144:	4619      	mov	r1, r3
 800c146:	6878      	ldr	r0, [r7, #4]
 800c148:	f7ff fe08 	bl	800bd5c <VL53L0X_GetDeviceMode>

  Status = VL53L0X_WrByte(Dev, 0x80, 0x01);
 800c14c:	2201      	movs	r2, #1
 800c14e:	2180      	movs	r1, #128	; 0x80
 800c150:	6878      	ldr	r0, [r7, #4]
 800c152:	f001 fb46 	bl	800d7e2 <VL53L0X_WrByte>
 800c156:	4603      	mov	r3, r0
 800c158:	75fb      	strb	r3, [r7, #23]
  Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800c15a:	2201      	movs	r2, #1
 800c15c:	21ff      	movs	r1, #255	; 0xff
 800c15e:	6878      	ldr	r0, [r7, #4]
 800c160:	f001 fb3f 	bl	800d7e2 <VL53L0X_WrByte>
 800c164:	4603      	mov	r3, r0
 800c166:	75fb      	strb	r3, [r7, #23]
  Status = VL53L0X_WrByte(Dev, 0x00, 0x00);
 800c168:	2200      	movs	r2, #0
 800c16a:	2100      	movs	r1, #0
 800c16c:	6878      	ldr	r0, [r7, #4]
 800c16e:	f001 fb38 	bl	800d7e2 <VL53L0X_WrByte>
 800c172:	4603      	mov	r3, r0
 800c174:	75fb      	strb	r3, [r7, #23]
  Status = VL53L0X_WrByte(Dev, 0x91, PALDevDataGet(Dev, StopVariable));
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 800c17c:	461a      	mov	r2, r3
 800c17e:	2191      	movs	r1, #145	; 0x91
 800c180:	6878      	ldr	r0, [r7, #4]
 800c182:	f001 fb2e 	bl	800d7e2 <VL53L0X_WrByte>
 800c186:	4603      	mov	r3, r0
 800c188:	75fb      	strb	r3, [r7, #23]
  Status = VL53L0X_WrByte(Dev, 0x00, 0x01);
 800c18a:	2201      	movs	r2, #1
 800c18c:	2100      	movs	r1, #0
 800c18e:	6878      	ldr	r0, [r7, #4]
 800c190:	f001 fb27 	bl	800d7e2 <VL53L0X_WrByte>
 800c194:	4603      	mov	r3, r0
 800c196:	75fb      	strb	r3, [r7, #23]
  Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800c198:	2200      	movs	r2, #0
 800c19a:	21ff      	movs	r1, #255	; 0xff
 800c19c:	6878      	ldr	r0, [r7, #4]
 800c19e:	f001 fb20 	bl	800d7e2 <VL53L0X_WrByte>
 800c1a2:	4603      	mov	r3, r0
 800c1a4:	75fb      	strb	r3, [r7, #23]
  Status = VL53L0X_WrByte(Dev, 0x80, 0x00);
 800c1a6:	2200      	movs	r2, #0
 800c1a8:	2180      	movs	r1, #128	; 0x80
 800c1aa:	6878      	ldr	r0, [r7, #4]
 800c1ac:	f001 fb19 	bl	800d7e2 <VL53L0X_WrByte>
 800c1b0:	4603      	mov	r3, r0
 800c1b2:	75fb      	strb	r3, [r7, #23]

  switch (DeviceMode) {
 800c1b4:	7bbb      	ldrb	r3, [r7, #14]
 800c1b6:	2b01      	cmp	r3, #1
 800c1b8:	d036      	beq.n	800c228 <VL53L0X_StartMeasurement+0xf8>
 800c1ba:	2b03      	cmp	r3, #3
 800c1bc:	d04e      	beq.n	800c25c <VL53L0X_StartMeasurement+0x12c>
 800c1be:	2b00      	cmp	r3, #0
 800c1c0:	d166      	bne.n	800c290 <VL53L0X_StartMeasurement+0x160>
  case VL53L0X_DEVICEMODE_SINGLE_RANGING:
    Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x01);
 800c1c2:	2201      	movs	r2, #1
 800c1c4:	2100      	movs	r1, #0
 800c1c6:	6878      	ldr	r0, [r7, #4]
 800c1c8:	f001 fb0b 	bl	800d7e2 <VL53L0X_WrByte>
 800c1cc:	4603      	mov	r3, r0
 800c1ce:	75fb      	strb	r3, [r7, #23]

    Byte = StartStopByte;
 800c1d0:	7bfb      	ldrb	r3, [r7, #15]
 800c1d2:	737b      	strb	r3, [r7, #13]
    if (Status == VL53L0X_ERROR_NONE) {
 800c1d4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c1d8:	2b00      	cmp	r3, #0
 800c1da:	d15c      	bne.n	800c296 <VL53L0X_StartMeasurement+0x166>
      /* Wait until start bit has been cleared */
      LoopNb = 0;
 800c1dc:	2300      	movs	r3, #0
 800c1de:	613b      	str	r3, [r7, #16]
      do {
        if (LoopNb > 0)
 800c1e0:	693b      	ldr	r3, [r7, #16]
 800c1e2:	2b00      	cmp	r3, #0
 800c1e4:	d008      	beq.n	800c1f8 <VL53L0X_StartMeasurement+0xc8>
          Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSRANGE_START, &Byte);
 800c1e6:	f107 030d 	add.w	r3, r7, #13
 800c1ea:	461a      	mov	r2, r3
 800c1ec:	2100      	movs	r1, #0
 800c1ee:	6878      	ldr	r0, [r7, #4]
 800c1f0:	f001 fb19 	bl	800d826 <VL53L0X_RdByte>
 800c1f4:	4603      	mov	r3, r0
 800c1f6:	75fb      	strb	r3, [r7, #23]
        LoopNb = LoopNb + 1;
 800c1f8:	693b      	ldr	r3, [r7, #16]
 800c1fa:	3301      	adds	r3, #1
 800c1fc:	613b      	str	r3, [r7, #16]
      } while (((Byte & StartStopByte) == StartStopByte) &&
 800c1fe:	7b7a      	ldrb	r2, [r7, #13]
 800c200:	7bfb      	ldrb	r3, [r7, #15]
 800c202:	4013      	ands	r3, r2
 800c204:	b2db      	uxtb	r3, r3
               (Status == VL53L0X_ERROR_NONE) &&
 800c206:	7bfa      	ldrb	r2, [r7, #15]
 800c208:	429a      	cmp	r2, r3
 800c20a:	d107      	bne.n	800c21c <VL53L0X_StartMeasurement+0xec>
      } while (((Byte & StartStopByte) == StartStopByte) &&
 800c20c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c210:	2b00      	cmp	r3, #0
 800c212:	d103      	bne.n	800c21c <VL53L0X_StartMeasurement+0xec>
               (Status == VL53L0X_ERROR_NONE) &&
 800c214:	693b      	ldr	r3, [r7, #16]
 800c216:	2bc7      	cmp	r3, #199	; 0xc7
 800c218:	d800      	bhi.n	800c21c <VL53L0X_StartMeasurement+0xec>
      do {
 800c21a:	e7e1      	b.n	800c1e0 <VL53L0X_StartMeasurement+0xb0>
               (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));

      if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 800c21c:	693b      	ldr	r3, [r7, #16]
 800c21e:	2bc7      	cmp	r3, #199	; 0xc7
 800c220:	d939      	bls.n	800c296 <VL53L0X_StartMeasurement+0x166>
        Status = VL53L0X_ERROR_TIME_OUT;
 800c222:	23f9      	movs	r3, #249	; 0xf9
 800c224:	75fb      	strb	r3, [r7, #23]
    }

    break;
 800c226:	e036      	b.n	800c296 <VL53L0X_StartMeasurement+0x166>
  case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
    /* Back-to-back mode */

    /* Check if need to apply interrupt settings */
    if (Status == VL53L0X_ERROR_NONE)
 800c228:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c22c:	2b00      	cmp	r3, #0
 800c22e:	d105      	bne.n	800c23c <VL53L0X_StartMeasurement+0x10c>
      Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 800c230:	2101      	movs	r1, #1
 800c232:	6878      	ldr	r0, [r7, #4]
 800c234:	f7ff ff16 	bl	800c064 <_Z37VL53L0X_CheckAndLoadInterruptSettingsP13VL53L0X_Dev_th>
 800c238:	4603      	mov	r3, r0
 800c23a:	75fb      	strb	r3, [r7, #23]

    Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START,
 800c23c:	2202      	movs	r2, #2
 800c23e:	2100      	movs	r1, #0
 800c240:	6878      	ldr	r0, [r7, #4]
 800c242:	f001 face 	bl	800d7e2 <VL53L0X_WrByte>
 800c246:	4603      	mov	r3, r0
 800c248:	75fb      	strb	r3, [r7, #23]
                            VL53L0X_REG_SYSRANGE_MODE_BACKTOBACK);
    if (Status == VL53L0X_ERROR_NONE) {
 800c24a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c24e:	2b00      	cmp	r3, #0
 800c250:	d123      	bne.n	800c29a <VL53L0X_StartMeasurement+0x16a>
      /* Set PAL State to Running */
      PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	2204      	movs	r2, #4
 800c256:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
    }
    break;
 800c25a:	e01e      	b.n	800c29a <VL53L0X_StartMeasurement+0x16a>
  case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
    /* Continuous mode */
    /* Check if need to apply interrupt settings */
    if (Status == VL53L0X_ERROR_NONE)
 800c25c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c260:	2b00      	cmp	r3, #0
 800c262:	d105      	bne.n	800c270 <VL53L0X_StartMeasurement+0x140>
      Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 800c264:	2101      	movs	r1, #1
 800c266:	6878      	ldr	r0, [r7, #4]
 800c268:	f7ff fefc 	bl	800c064 <_Z37VL53L0X_CheckAndLoadInterruptSettingsP13VL53L0X_Dev_th>
 800c26c:	4603      	mov	r3, r0
 800c26e:	75fb      	strb	r3, [r7, #23]

    Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START,
 800c270:	2204      	movs	r2, #4
 800c272:	2100      	movs	r1, #0
 800c274:	6878      	ldr	r0, [r7, #4]
 800c276:	f001 fab4 	bl	800d7e2 <VL53L0X_WrByte>
 800c27a:	4603      	mov	r3, r0
 800c27c:	75fb      	strb	r3, [r7, #23]
                            VL53L0X_REG_SYSRANGE_MODE_TIMED);

    if (Status == VL53L0X_ERROR_NONE) {
 800c27e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c282:	2b00      	cmp	r3, #0
 800c284:	d10b      	bne.n	800c29e <VL53L0X_StartMeasurement+0x16e>
      /* Set PAL State to Running */
      PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	2204      	movs	r2, #4
 800c28a:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
    }
    break;
 800c28e:	e006      	b.n	800c29e <VL53L0X_StartMeasurement+0x16e>
  default:
    /* Selected mode not supported */
    Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 800c290:	23f8      	movs	r3, #248	; 0xf8
 800c292:	75fb      	strb	r3, [r7, #23]
 800c294:	e004      	b.n	800c2a0 <VL53L0X_StartMeasurement+0x170>
    break;
 800c296:	bf00      	nop
 800c298:	e002      	b.n	800c2a0 <VL53L0X_StartMeasurement+0x170>
    break;
 800c29a:	bf00      	nop
 800c29c:	e000      	b.n	800c2a0 <VL53L0X_StartMeasurement+0x170>
    break;
 800c29e:	bf00      	nop
  }

  LOG_FUNCTION_END(Status);
  return Status;
 800c2a0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c2a4:	4618      	mov	r0, r3
 800c2a6:	3718      	adds	r7, #24
 800c2a8:	46bd      	mov	sp, r7
 800c2aa:	bd80      	pop	{r7, pc}

0800c2ac <VL53L0X_GetMeasurementDataReady>:
  LOG_FUNCTION_END(Status);
  return Status;
}

VL53L0X_Error VL53L0X_GetMeasurementDataReady(VL53L0X_DEV Dev,
                                              uint8_t *pMeasurementDataReady) {
 800c2ac:	b580      	push	{r7, lr}
 800c2ae:	b084      	sub	sp, #16
 800c2b0:	af00      	add	r7, sp, #0
 800c2b2:	6078      	str	r0, [r7, #4]
 800c2b4:	6039      	str	r1, [r7, #0]
  VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c2b6:	2300      	movs	r3, #0
 800c2b8:	73fb      	strb	r3, [r7, #15]
  uint8_t SysRangeStatusRegister;
  uint8_t InterruptConfig;
  uint32_t InterruptMask;
  LOG_FUNCTION_START("");

  InterruptConfig =
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	f893 30da 	ldrb.w	r3, [r3, #218]	; 0xda
 800c2c0:	73bb      	strb	r3, [r7, #14]
      VL53L0X_GETDEVICESPECIFICPARAMETER(Dev, Pin0GpioFunctionality);

  if (InterruptConfig == VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY) {
 800c2c2:	7bbb      	ldrb	r3, [r7, #14]
 800c2c4:	2b04      	cmp	r3, #4
 800c2c6:	d112      	bne.n	800c2ee <VL53L0X_GetMeasurementDataReady+0x42>
    Status = VL53L0X_GetInterruptMaskStatus(Dev, &InterruptMask);
 800c2c8:	f107 0308 	add.w	r3, r7, #8
 800c2cc:	4619      	mov	r1, r3
 800c2ce:	6878      	ldr	r0, [r7, #4]
 800c2d0:	f000 f9eb 	bl	800c6aa <VL53L0X_GetInterruptMaskStatus>
 800c2d4:	4603      	mov	r3, r0
 800c2d6:	73fb      	strb	r3, [r7, #15]
    if (InterruptMask == VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY)
 800c2d8:	68bb      	ldr	r3, [r7, #8]
 800c2da:	2b04      	cmp	r3, #4
 800c2dc:	d103      	bne.n	800c2e6 <VL53L0X_GetMeasurementDataReady+0x3a>
      *pMeasurementDataReady = 1;
 800c2de:	683b      	ldr	r3, [r7, #0]
 800c2e0:	2201      	movs	r2, #1
 800c2e2:	701a      	strb	r2, [r3, #0]
 800c2e4:	e01c      	b.n	800c320 <VL53L0X_GetMeasurementDataReady+0x74>
    else
      *pMeasurementDataReady = 0;
 800c2e6:	683b      	ldr	r3, [r7, #0]
 800c2e8:	2200      	movs	r2, #0
 800c2ea:	701a      	strb	r2, [r3, #0]
 800c2ec:	e018      	b.n	800c320 <VL53L0X_GetMeasurementDataReady+0x74>
  } else {
    Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_RANGE_STATUS,
 800c2ee:	f107 030d 	add.w	r3, r7, #13
 800c2f2:	461a      	mov	r2, r3
 800c2f4:	2114      	movs	r1, #20
 800c2f6:	6878      	ldr	r0, [r7, #4]
 800c2f8:	f001 fa95 	bl	800d826 <VL53L0X_RdByte>
 800c2fc:	4603      	mov	r3, r0
 800c2fe:	73fb      	strb	r3, [r7, #15]
                            &SysRangeStatusRegister);
    if (Status == VL53L0X_ERROR_NONE) {
 800c300:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c304:	2b00      	cmp	r3, #0
 800c306:	d10b      	bne.n	800c320 <VL53L0X_GetMeasurementDataReady+0x74>
      if (SysRangeStatusRegister & 0x01)
 800c308:	7b7b      	ldrb	r3, [r7, #13]
 800c30a:	f003 0301 	and.w	r3, r3, #1
 800c30e:	2b00      	cmp	r3, #0
 800c310:	d003      	beq.n	800c31a <VL53L0X_GetMeasurementDataReady+0x6e>
        *pMeasurementDataReady = 1;
 800c312:	683b      	ldr	r3, [r7, #0]
 800c314:	2201      	movs	r2, #1
 800c316:	701a      	strb	r2, [r3, #0]
 800c318:	e002      	b.n	800c320 <VL53L0X_GetMeasurementDataReady+0x74>
      else
        *pMeasurementDataReady = 0;
 800c31a:	683b      	ldr	r3, [r7, #0]
 800c31c:	2200      	movs	r2, #0
 800c31e:	701a      	strb	r2, [r3, #0]
    }
  }

  LOG_FUNCTION_END(Status);
  return Status;
 800c320:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c324:	4618      	mov	r0, r3
 800c326:	3710      	adds	r7, #16
 800c328:	46bd      	mov	sp, r7
 800c32a:	bd80      	pop	{r7, pc}

0800c32c <VL53L0X_GetRangingMeasurementData>:
  return Status;
}

VL53L0X_Error VL53L0X_GetRangingMeasurementData(
    VL53L0X_DEV Dev,
    VL53L0X_RangingMeasurementData_t *pRangingMeasurementData) {
 800c32c:	b5b0      	push	{r4, r5, r7, lr}
 800c32e:	b094      	sub	sp, #80	; 0x50
 800c330:	af02      	add	r7, sp, #8
 800c332:	6078      	str	r0, [r7, #4]
 800c334:	6039      	str	r1, [r7, #0]
  VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c336:	2300      	movs	r3, #0
 800c338:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
   * use multi read even if some registers are not useful, result will
   * be more efficient
   * start reading at 0x14 dec20
   * end reading at 0x21 dec33 total 14 bytes to read
   */
  Status = VL53L0X_ReadMulti(Dev, 0x14, localBuffer, 12);
 800c33c:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800c340:	230c      	movs	r3, #12
 800c342:	2114      	movs	r1, #20
 800c344:	6878      	ldr	r0, [r7, #4]
 800c346:	f001 fa23 	bl	800d790 <VL53L0X_ReadMulti>
 800c34a:	4603      	mov	r3, r0
 800c34c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

  if (Status == VL53L0X_ERROR_NONE) {
 800c350:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800c354:	2b00      	cmp	r3, #0
 800c356:	f040 80c5 	bne.w	800c4e4 <VL53L0X_GetRangingMeasurementData+0x1b8>

    pRangingMeasurementData->ZoneId = 0;    /* Only one zone */
 800c35a:	683b      	ldr	r3, [r7, #0]
 800c35c:	2200      	movs	r2, #0
 800c35e:	759a      	strb	r2, [r3, #22]
    pRangingMeasurementData->TimeStamp = 0; /* Not Implemented */
 800c360:	683b      	ldr	r3, [r7, #0]
 800c362:	2200      	movs	r2, #0
 800c364:	601a      	str	r2, [r3, #0]

    tmpuint16 = VL53L0X_MAKEUINT16(localBuffer[11], localBuffer[10]);
 800c366:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800c36a:	b29b      	uxth	r3, r3
 800c36c:	021b      	lsls	r3, r3, #8
 800c36e:	b29a      	uxth	r2, r3
 800c370:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c374:	b29b      	uxth	r3, r3
 800c376:	4413      	add	r3, r2
 800c378:	b29b      	uxth	r3, r3
 800c37a:	863b      	strh	r3, [r7, #48]	; 0x30
    /* cut1.1 if SYSTEM__RANGE_CONFIG if 1 range is 2bits fractional
     *(format 11.2) else no fractional
     */

    pRangingMeasurementData->MeasurementTimeUsec = 0;
 800c37c:	683b      	ldr	r3, [r7, #0]
 800c37e:	2200      	movs	r2, #0
 800c380:	605a      	str	r2, [r3, #4]

    SignalRate = VL53L0X_FIXPOINT97TOFIXPOINT1616(
 800c382:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800c386:	b29b      	uxth	r3, r3
 800c388:	021b      	lsls	r3, r3, #8
 800c38a:	b29a      	uxth	r2, r3
 800c38c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800c390:	b29b      	uxth	r3, r3
 800c392:	4413      	add	r3, r2
 800c394:	b29b      	uxth	r3, r3
 800c396:	025b      	lsls	r3, r3, #9
 800c398:	643b      	str	r3, [r7, #64]	; 0x40
        VL53L0X_MAKEUINT16(localBuffer[7], localBuffer[6]));
    /* peak_signal_count_rate_rtn_mcps */
    pRangingMeasurementData->SignalRateRtnMegaCps = SignalRate;
 800c39a:	683b      	ldr	r3, [r7, #0]
 800c39c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c39e:	60da      	str	r2, [r3, #12]

    AmbientRate = VL53L0X_MAKEUINT16(localBuffer[9], localBuffer[8]);
 800c3a0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800c3a4:	b29b      	uxth	r3, r3
 800c3a6:	021b      	lsls	r3, r3, #8
 800c3a8:	b29a      	uxth	r2, r3
 800c3aa:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800c3ae:	b29b      	uxth	r3, r3
 800c3b0:	4413      	add	r3, r2
 800c3b2:	87fb      	strh	r3, [r7, #62]	; 0x3e
    pRangingMeasurementData->AmbientRateRtnMegaCps =
        VL53L0X_FIXPOINT97TOFIXPOINT1616(AmbientRate);
 800c3b4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800c3b6:	025b      	lsls	r3, r3, #9
 800c3b8:	461a      	mov	r2, r3
    pRangingMeasurementData->AmbientRateRtnMegaCps =
 800c3ba:	683b      	ldr	r3, [r7, #0]
 800c3bc:	611a      	str	r2, [r3, #16]

    EffectiveSpadRtnCount = VL53L0X_MAKEUINT16(localBuffer[3], localBuffer[2]);
 800c3be:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c3c2:	b29b      	uxth	r3, r3
 800c3c4:	021b      	lsls	r3, r3, #8
 800c3c6:	b29a      	uxth	r2, r3
 800c3c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c3cc:	b29b      	uxth	r3, r3
 800c3ce:	4413      	add	r3, r2
 800c3d0:	87bb      	strh	r3, [r7, #60]	; 0x3c
    /* EffectiveSpadRtnCount is 8.8 format */
    pRangingMeasurementData->EffectiveSpadRtnCount = EffectiveSpadRtnCount;
 800c3d2:	683b      	ldr	r3, [r7, #0]
 800c3d4:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 800c3d6:	829a      	strh	r2, [r3, #20]

    DeviceRangeStatus = localBuffer[0];
 800c3d8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800c3dc:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

    /* Get Linearity Corrective Gain */
    LinearityCorrectiveGain = PALDevDataGet(Dev, LinearityCorrectiveGain);
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	f8b3 3152 	ldrh.w	r3, [r3, #338]	; 0x152
 800c3e6:	873b      	strh	r3, [r7, #56]	; 0x38

    /* Get ranging configuration */
    RangeFractionalEnable = PALDevDataGet(Dev, RangeFractionalEnable);
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	f893 3131 	ldrb.w	r3, [r3, #305]	; 0x131
 800c3ee:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

    if (LinearityCorrectiveGain != 1000) {
 800c3f2:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800c3f4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c3f8:	d043      	beq.n	800c482 <VL53L0X_GetRangingMeasurementData+0x156>

      tmpuint16 =
          (uint16_t)((LinearityCorrectiveGain * tmpuint16 + 500) / 1000);
 800c3fa:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800c3fc:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 800c3fe:	fb02 f303 	mul.w	r3, r2, r3
 800c402:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800c406:	4a54      	ldr	r2, [pc, #336]	; (800c558 <VL53L0X_GetRangingMeasurementData+0x22c>)
 800c408:	fb82 1203 	smull	r1, r2, r2, r3
 800c40c:	1192      	asrs	r2, r2, #6
 800c40e:	17db      	asrs	r3, r3, #31
 800c410:	1ad3      	subs	r3, r2, r3
      tmpuint16 =
 800c412:	b29b      	uxth	r3, r3
 800c414:	863b      	strh	r3, [r7, #48]	; 0x30

      /* Implement Xtalk */
      VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps,
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	6a1b      	ldr	r3, [r3, #32]
 800c41a:	86bb      	strh	r3, [r7, #52]	; 0x34
                                XTalkCompensationRateMegaCps);
      VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	7f1b      	ldrb	r3, [r3, #28]
 800c420:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
                                XTalkCompensationEnable);

      if (XTalkCompensationEnable) {
 800c424:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800c428:	2b00      	cmp	r3, #0
 800c42a:	d02a      	beq.n	800c482 <VL53L0X_GetRangingMeasurementData+0x156>

        if ((SignalRate -
             ((XTalkCompensationRateMegaCps * EffectiveSpadRtnCount) >> 8)) <=
 800c42c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800c42e:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 800c430:	fb02 f303 	mul.w	r3, r2, r3
 800c434:	121b      	asrs	r3, r3, #8
 800c436:	461a      	mov	r2, r3
        if ((SignalRate -
 800c438:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c43a:	4293      	cmp	r3, r2
 800c43c:	d10d      	bne.n	800c45a <VL53L0X_GetRangingMeasurementData+0x12e>
            0) {
          if (RangeFractionalEnable)
 800c43e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c442:	2b00      	cmp	r3, #0
 800c444:	d004      	beq.n	800c450 <VL53L0X_GetRangingMeasurementData+0x124>
            XtalkRangeMilliMeter = 8888;
 800c446:	f242 23b8 	movw	r3, #8888	; 0x22b8
 800c44a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800c44e:	e015      	b.n	800c47c <VL53L0X_GetRangingMeasurementData+0x150>
          else
            XtalkRangeMilliMeter = 8888 << 2;
 800c450:	f648 23e0 	movw	r3, #35552	; 0x8ae0
 800c454:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800c458:	e010      	b.n	800c47c <VL53L0X_GetRangingMeasurementData+0x150>
        } else {
          XtalkRangeMilliMeter =
              (tmpuint16 * SignalRate) /
 800c45a:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800c45c:	461a      	mov	r2, r3
 800c45e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c460:	fb03 f202 	mul.w	r2, r3, r2
              (SignalRate -
               ((XTalkCompensationRateMegaCps * EffectiveSpadRtnCount) >> 8));
 800c464:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800c466:	8fb9      	ldrh	r1, [r7, #60]	; 0x3c
 800c468:	fb01 f303 	mul.w	r3, r1, r3
 800c46c:	121b      	asrs	r3, r3, #8
 800c46e:	4619      	mov	r1, r3
              (SignalRate -
 800c470:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c472:	1a5b      	subs	r3, r3, r1
              (tmpuint16 * SignalRate) /
 800c474:	fbb2 f3f3 	udiv	r3, r2, r3
          XtalkRangeMilliMeter =
 800c478:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
        }

        tmpuint16 = XtalkRangeMilliMeter;
 800c47c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800c480:	863b      	strh	r3, [r7, #48]	; 0x30
      }
    }

    if (RangeFractionalEnable) {
 800c482:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c486:	2b00      	cmp	r3, #0
 800c488:	d00a      	beq.n	800c4a0 <VL53L0X_GetRangingMeasurementData+0x174>
      pRangingMeasurementData->RangeMilliMeter = (uint16_t)((tmpuint16) >> 2);
 800c48a:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800c48c:	109b      	asrs	r3, r3, #2
 800c48e:	b29a      	uxth	r2, r3
 800c490:	683b      	ldr	r3, [r7, #0]
 800c492:	811a      	strh	r2, [r3, #8]
      pRangingMeasurementData->RangeFractionalPart =
          (uint8_t)((tmpuint16 & 0x03) << 6);
 800c494:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800c496:	019b      	lsls	r3, r3, #6
      pRangingMeasurementData->RangeFractionalPart =
 800c498:	b2da      	uxtb	r2, r3
 800c49a:	683b      	ldr	r3, [r7, #0]
 800c49c:	75da      	strb	r2, [r3, #23]
 800c49e:	e005      	b.n	800c4ac <VL53L0X_GetRangingMeasurementData+0x180>
    } else {
      pRangingMeasurementData->RangeMilliMeter = tmpuint16;
 800c4a0:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 800c4a2:	683b      	ldr	r3, [r7, #0]
 800c4a4:	811a      	strh	r2, [r3, #8]
      pRangingMeasurementData->RangeFractionalPart = 0;
 800c4a6:	683b      	ldr	r3, [r7, #0]
 800c4a8:	2200      	movs	r2, #0
 800c4aa:	75da      	strb	r2, [r3, #23]
     * For a standard definition of RangeStatus, this should
     * return 0 in case of good result after a ranging
     * The range status depends on the device so call a device
     * specific function to obtain the right Status.
     */
    Status |= VL53L0X_get_pal_range_status(
 800c4ac:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 800c4ae:	f897 103b 	ldrb.w	r1, [r7, #59]	; 0x3b
 800c4b2:	f107 0332 	add.w	r3, r7, #50	; 0x32
 800c4b6:	9301      	str	r3, [sp, #4]
 800c4b8:	683b      	ldr	r3, [r7, #0]
 800c4ba:	9300      	str	r3, [sp, #0]
 800c4bc:	4613      	mov	r3, r2
 800c4be:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c4c0:	6878      	ldr	r0, [r7, #4]
 800c4c2:	f000 fe45 	bl	800d150 <VL53L0X_get_pal_range_status>
 800c4c6:	4603      	mov	r3, r0
 800c4c8:	461a      	mov	r2, r3
 800c4ca:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800c4ce:	4313      	orrs	r3, r2
 800c4d0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
        Dev, DeviceRangeStatus, SignalRate, EffectiveSpadRtnCount,
        pRangingMeasurementData, &PalRangeStatus);

    if (Status == VL53L0X_ERROR_NONE)
 800c4d4:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800c4d8:	2b00      	cmp	r3, #0
 800c4da:	d103      	bne.n	800c4e4 <VL53L0X_GetRangingMeasurementData+0x1b8>
      pRangingMeasurementData->RangeStatus = PalRangeStatus;
 800c4dc:	f897 2032 	ldrb.w	r2, [r7, #50]	; 0x32
 800c4e0:	683b      	ldr	r3, [r7, #0]
 800c4e2:	761a      	strb	r2, [r3, #24]
  }

  if (Status == VL53L0X_ERROR_NONE) {
 800c4e4:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800c4e8:	2b00      	cmp	r3, #0
 800c4ea:	d12e      	bne.n	800c54a <VL53L0X_GetRangingMeasurementData+0x21e>
    /* Copy last read data into Dev buffer */
    LastRangeDataBuffer = PALDevDataGet(Dev, LastRangeMeasure);
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	f107 0408 	add.w	r4, r7, #8
 800c4f2:	f103 0550 	add.w	r5, r3, #80	; 0x50
 800c4f6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c4f8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c4fa:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800c4fe:	e884 0007 	stmia.w	r4, {r0, r1, r2}

    LastRangeDataBuffer.RangeMilliMeter =
        pRangingMeasurementData->RangeMilliMeter;
 800c502:	683b      	ldr	r3, [r7, #0]
 800c504:	891b      	ldrh	r3, [r3, #8]
    LastRangeDataBuffer.RangeMilliMeter =
 800c506:	823b      	strh	r3, [r7, #16]
    LastRangeDataBuffer.RangeFractionalPart =
        pRangingMeasurementData->RangeFractionalPart;
 800c508:	683b      	ldr	r3, [r7, #0]
 800c50a:	7ddb      	ldrb	r3, [r3, #23]
    LastRangeDataBuffer.RangeFractionalPart =
 800c50c:	77fb      	strb	r3, [r7, #31]
    LastRangeDataBuffer.RangeDMaxMilliMeter =
        pRangingMeasurementData->RangeDMaxMilliMeter;
 800c50e:	683b      	ldr	r3, [r7, #0]
 800c510:	895b      	ldrh	r3, [r3, #10]
    LastRangeDataBuffer.RangeDMaxMilliMeter =
 800c512:	827b      	strh	r3, [r7, #18]
    LastRangeDataBuffer.MeasurementTimeUsec =
        pRangingMeasurementData->MeasurementTimeUsec;
 800c514:	683b      	ldr	r3, [r7, #0]
 800c516:	685b      	ldr	r3, [r3, #4]
    LastRangeDataBuffer.MeasurementTimeUsec =
 800c518:	60fb      	str	r3, [r7, #12]
    LastRangeDataBuffer.SignalRateRtnMegaCps =
        pRangingMeasurementData->SignalRateRtnMegaCps;
 800c51a:	683b      	ldr	r3, [r7, #0]
 800c51c:	68db      	ldr	r3, [r3, #12]
    LastRangeDataBuffer.SignalRateRtnMegaCps =
 800c51e:	617b      	str	r3, [r7, #20]
    LastRangeDataBuffer.AmbientRateRtnMegaCps =
        pRangingMeasurementData->AmbientRateRtnMegaCps;
 800c520:	683b      	ldr	r3, [r7, #0]
 800c522:	691b      	ldr	r3, [r3, #16]
    LastRangeDataBuffer.AmbientRateRtnMegaCps =
 800c524:	61bb      	str	r3, [r7, #24]
    LastRangeDataBuffer.EffectiveSpadRtnCount =
        pRangingMeasurementData->EffectiveSpadRtnCount;
 800c526:	683b      	ldr	r3, [r7, #0]
 800c528:	8a9b      	ldrh	r3, [r3, #20]
    LastRangeDataBuffer.EffectiveSpadRtnCount =
 800c52a:	83bb      	strh	r3, [r7, #28]
    LastRangeDataBuffer.RangeStatus = pRangingMeasurementData->RangeStatus;
 800c52c:	683b      	ldr	r3, [r7, #0]
 800c52e:	7e1b      	ldrb	r3, [r3, #24]
 800c530:	f887 3020 	strb.w	r3, [r7, #32]

    PALDevDataSet(Dev, LastRangeMeasure, LastRangeDataBuffer);
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	f103 0450 	add.w	r4, r3, #80	; 0x50
 800c53a:	f107 0508 	add.w	r5, r7, #8
 800c53e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c540:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c542:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800c546:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  }

  LOG_FUNCTION_END(Status);
  return Status;
 800c54a:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
}
 800c54e:	4618      	mov	r0, r3
 800c550:	3748      	adds	r7, #72	; 0x48
 800c552:	46bd      	mov	sp, r7
 800c554:	bdb0      	pop	{r4, r5, r7, pc}
 800c556:	bf00      	nop
 800c558:	10624dd3 	.word	0x10624dd3

0800c55c <VL53L0X_PerformSingleRangingMeasurement>:
  return Status;
}

VL53L0X_Error VL53L0X_PerformSingleRangingMeasurement(
    VL53L0X_DEV Dev,
    VL53L0X_RangingMeasurementData_t *pRangingMeasurementData) {
 800c55c:	b580      	push	{r7, lr}
 800c55e:	b084      	sub	sp, #16
 800c560:	af00      	add	r7, sp, #0
 800c562:	6078      	str	r0, [r7, #4]
 800c564:	6039      	str	r1, [r7, #0]
  VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c566:	2300      	movs	r3, #0
 800c568:	73fb      	strb	r3, [r7, #15]

  LOG_FUNCTION_START("");

  /* This function will do a complete single ranging
   * Here we fix the mode! */
  Status = VL53L0X_SetDeviceMode(Dev, VL53L0X_DEVICEMODE_SINGLE_RANGING);
 800c56a:	2100      	movs	r1, #0
 800c56c:	6878      	ldr	r0, [r7, #4]
 800c56e:	f7ff fbad 	bl	800bccc <VL53L0X_SetDeviceMode>
 800c572:	4603      	mov	r3, r0
 800c574:	73fb      	strb	r3, [r7, #15]

  if (Status == VL53L0X_ERROR_NONE)
 800c576:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c57a:	2b00      	cmp	r3, #0
 800c57c:	d104      	bne.n	800c588 <VL53L0X_PerformSingleRangingMeasurement+0x2c>
    Status = VL53L0X_PerformSingleMeasurement(Dev);
 800c57e:	6878      	ldr	r0, [r7, #4]
 800c580:	f7ff fd3c 	bl	800bffc <VL53L0X_PerformSingleMeasurement>
 800c584:	4603      	mov	r3, r0
 800c586:	73fb      	strb	r3, [r7, #15]

  if (Status == VL53L0X_ERROR_NONE)
 800c588:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c58c:	2b00      	cmp	r3, #0
 800c58e:	d105      	bne.n	800c59c <VL53L0X_PerformSingleRangingMeasurement+0x40>
    Status = VL53L0X_GetRangingMeasurementData(Dev, pRangingMeasurementData);
 800c590:	6839      	ldr	r1, [r7, #0]
 800c592:	6878      	ldr	r0, [r7, #4]
 800c594:	f7ff feca 	bl	800c32c <VL53L0X_GetRangingMeasurementData>
 800c598:	4603      	mov	r3, r0
 800c59a:	73fb      	strb	r3, [r7, #15]

  if (Status == VL53L0X_ERROR_NONE)
 800c59c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c5a0:	2b00      	cmp	r3, #0
 800c5a2:	d105      	bne.n	800c5b0 <VL53L0X_PerformSingleRangingMeasurement+0x54>
    Status = VL53L0X_ClearInterruptMask(Dev, 0);
 800c5a4:	2100      	movs	r1, #0
 800c5a6:	6878      	ldr	r0, [r7, #4]
 800c5a8:	f000 f83e 	bl	800c628 <VL53L0X_ClearInterruptMask>
 800c5ac:	4603      	mov	r3, r0
 800c5ae:	73fb      	strb	r3, [r7, #15]

  LOG_FUNCTION_END(Status);
  return Status;
 800c5b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c5b4:	4618      	mov	r0, r3
 800c5b6:	3710      	adds	r7, #16
 800c5b8:	46bd      	mov	sp, r7
 800c5ba:	bd80      	pop	{r7, pc}

0800c5bc <VL53L0X_GetInterruptThresholds>:
}

VL53L0X_Error VL53L0X_GetInterruptThresholds(VL53L0X_DEV Dev,
                                             VL53L0X_DeviceModes DeviceMode,
                                             FixPoint1616_t *pThresholdLow,
                                             FixPoint1616_t *pThresholdHigh) {
 800c5bc:	b580      	push	{r7, lr}
 800c5be:	b086      	sub	sp, #24
 800c5c0:	af00      	add	r7, sp, #0
 800c5c2:	60f8      	str	r0, [r7, #12]
 800c5c4:	607a      	str	r2, [r7, #4]
 800c5c6:	603b      	str	r3, [r7, #0]
 800c5c8:	460b      	mov	r3, r1
 800c5ca:	72fb      	strb	r3, [r7, #11]
  VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c5cc:	2300      	movs	r3, #0
 800c5ce:	75fb      	strb	r3, [r7, #23]
  uint16_t Threshold16;
  LOG_FUNCTION_START("");

  /* no dependency on DeviceMode for Ewok */

  Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_LOW, &Threshold16);
 800c5d0:	f107 0314 	add.w	r3, r7, #20
 800c5d4:	461a      	mov	r2, r3
 800c5d6:	210e      	movs	r1, #14
 800c5d8:	68f8      	ldr	r0, [r7, #12]
 800c5da:	f001 f945 	bl	800d868 <VL53L0X_RdWord>
 800c5de:	4603      	mov	r3, r0
 800c5e0:	75fb      	strb	r3, [r7, #23]
  /* Need to multiply by 2 because the FW will apply a x2 */
  *pThresholdLow = (FixPoint1616_t)((0x00fff & Threshold16) << 17);
 800c5e2:	8abb      	ldrh	r3, [r7, #20]
 800c5e4:	045b      	lsls	r3, r3, #17
 800c5e6:	461a      	mov	r2, r3
 800c5e8:	4b0e      	ldr	r3, [pc, #56]	; (800c624 <VL53L0X_GetInterruptThresholds+0x68>)
 800c5ea:	4013      	ands	r3, r2
 800c5ec:	687a      	ldr	r2, [r7, #4]
 800c5ee:	6013      	str	r3, [r2, #0]

  if (Status == VL53L0X_ERROR_NONE) {
 800c5f0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c5f4:	2b00      	cmp	r3, #0
 800c5f6:	d10f      	bne.n	800c618 <VL53L0X_GetInterruptThresholds+0x5c>
    Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_HIGH, &Threshold16);
 800c5f8:	f107 0314 	add.w	r3, r7, #20
 800c5fc:	461a      	mov	r2, r3
 800c5fe:	210c      	movs	r1, #12
 800c600:	68f8      	ldr	r0, [r7, #12]
 800c602:	f001 f931 	bl	800d868 <VL53L0X_RdWord>
 800c606:	4603      	mov	r3, r0
 800c608:	75fb      	strb	r3, [r7, #23]
    /* Need to multiply by 2 because the FW will apply a x2 */
    *pThresholdHigh = (FixPoint1616_t)((0x00fff & Threshold16) << 17);
 800c60a:	8abb      	ldrh	r3, [r7, #20]
 800c60c:	045b      	lsls	r3, r3, #17
 800c60e:	461a      	mov	r2, r3
 800c610:	4b04      	ldr	r3, [pc, #16]	; (800c624 <VL53L0X_GetInterruptThresholds+0x68>)
 800c612:	4013      	ands	r3, r2
 800c614:	683a      	ldr	r2, [r7, #0]
 800c616:	6013      	str	r3, [r2, #0]
  }

  LOG_FUNCTION_END(Status);
  return Status;
 800c618:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c61c:	4618      	mov	r0, r3
 800c61e:	3718      	adds	r7, #24
 800c620:	46bd      	mov	sp, r7
 800c622:	bd80      	pop	{r7, pc}
 800c624:	1ffe0000 	.word	0x1ffe0000

0800c628 <VL53L0X_ClearInterruptMask>:
  return Status;
}

/* Group PAL Interrupt Functions */
VL53L0X_Error VL53L0X_ClearInterruptMask(VL53L0X_DEV Dev,
                                         uint32_t InterruptMask) {
 800c628:	b580      	push	{r7, lr}
 800c62a:	b084      	sub	sp, #16
 800c62c:	af00      	add	r7, sp, #0
 800c62e:	6078      	str	r0, [r7, #4]
 800c630:	6039      	str	r1, [r7, #0]
  VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c632:	2300      	movs	r3, #0
 800c634:	73fb      	strb	r3, [r7, #15]
  uint8_t LoopCount;
  uint8_t Byte;
  LOG_FUNCTION_START("");

  /* clear bit 0 range interrupt, bit 1 error interrupt */
  LoopCount = 0;
 800c636:	2300      	movs	r3, #0
 800c638:	73bb      	strb	r3, [r7, #14]
  do {
    Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x01);
 800c63a:	2201      	movs	r2, #1
 800c63c:	210b      	movs	r1, #11
 800c63e:	6878      	ldr	r0, [r7, #4]
 800c640:	f001 f8cf 	bl	800d7e2 <VL53L0X_WrByte>
 800c644:	4603      	mov	r3, r0
 800c646:	73fb      	strb	r3, [r7, #15]
    Status |= VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x00);
 800c648:	2200      	movs	r2, #0
 800c64a:	210b      	movs	r1, #11
 800c64c:	6878      	ldr	r0, [r7, #4]
 800c64e:	f001 f8c8 	bl	800d7e2 <VL53L0X_WrByte>
 800c652:	4603      	mov	r3, r0
 800c654:	461a      	mov	r2, r3
 800c656:	7bfb      	ldrb	r3, [r7, #15]
 800c658:	4313      	orrs	r3, r2
 800c65a:	73fb      	strb	r3, [r7, #15]
    Status |= VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
 800c65c:	f107 030d 	add.w	r3, r7, #13
 800c660:	461a      	mov	r2, r3
 800c662:	2113      	movs	r1, #19
 800c664:	6878      	ldr	r0, [r7, #4]
 800c666:	f001 f8de 	bl	800d826 <VL53L0X_RdByte>
 800c66a:	4603      	mov	r3, r0
 800c66c:	461a      	mov	r2, r3
 800c66e:	7bfb      	ldrb	r3, [r7, #15]
 800c670:	4313      	orrs	r3, r2
 800c672:	73fb      	strb	r3, [r7, #15]
    LoopCount++;
 800c674:	7bbb      	ldrb	r3, [r7, #14]
 800c676:	3301      	adds	r3, #1
 800c678:	73bb      	strb	r3, [r7, #14]
  } while (((Byte & 0x07) != 0x00) && (LoopCount < 3) &&
 800c67a:	7b7b      	ldrb	r3, [r7, #13]
 800c67c:	f003 0307 	and.w	r3, r3, #7
 800c680:	2b00      	cmp	r3, #0
 800c682:	d007      	beq.n	800c694 <VL53L0X_ClearInterruptMask+0x6c>
 800c684:	7bbb      	ldrb	r3, [r7, #14]
 800c686:	2b02      	cmp	r3, #2
 800c688:	d804      	bhi.n	800c694 <VL53L0X_ClearInterruptMask+0x6c>
 800c68a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c68e:	2b00      	cmp	r3, #0
 800c690:	d100      	bne.n	800c694 <VL53L0X_ClearInterruptMask+0x6c>
  do {
 800c692:	e7d2      	b.n	800c63a <VL53L0X_ClearInterruptMask+0x12>
           (Status == VL53L0X_ERROR_NONE));

  if (LoopCount >= 3)
 800c694:	7bbb      	ldrb	r3, [r7, #14]
 800c696:	2b02      	cmp	r3, #2
 800c698:	d901      	bls.n	800c69e <VL53L0X_ClearInterruptMask+0x76>
    Status = VL53L0X_ERROR_INTERRUPT_NOT_CLEARED;
 800c69a:	23f4      	movs	r3, #244	; 0xf4
 800c69c:	73fb      	strb	r3, [r7, #15]

  LOG_FUNCTION_END(Status);
  return Status;
 800c69e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c6a2:	4618      	mov	r0, r3
 800c6a4:	3710      	adds	r7, #16
 800c6a6:	46bd      	mov	sp, r7
 800c6a8:	bd80      	pop	{r7, pc}

0800c6aa <VL53L0X_GetInterruptMaskStatus>:

VL53L0X_Error VL53L0X_GetInterruptMaskStatus(VL53L0X_DEV Dev,
                                             uint32_t *pInterruptMaskStatus) {
 800c6aa:	b580      	push	{r7, lr}
 800c6ac:	b084      	sub	sp, #16
 800c6ae:	af00      	add	r7, sp, #0
 800c6b0:	6078      	str	r0, [r7, #4]
 800c6b2:	6039      	str	r1, [r7, #0]
  VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c6b4:	2300      	movs	r3, #0
 800c6b6:	73fb      	strb	r3, [r7, #15]
  uint8_t Byte;
  LOG_FUNCTION_START("");

  Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
 800c6b8:	f107 030e 	add.w	r3, r7, #14
 800c6bc:	461a      	mov	r2, r3
 800c6be:	2113      	movs	r1, #19
 800c6c0:	6878      	ldr	r0, [r7, #4]
 800c6c2:	f001 f8b0 	bl	800d826 <VL53L0X_RdByte>
 800c6c6:	4603      	mov	r3, r0
 800c6c8:	73fb      	strb	r3, [r7, #15]
  *pInterruptMaskStatus = Byte & 0x07;
 800c6ca:	7bbb      	ldrb	r3, [r7, #14]
 800c6cc:	f003 0207 	and.w	r2, r3, #7
 800c6d0:	683b      	ldr	r3, [r7, #0]
 800c6d2:	601a      	str	r2, [r3, #0]

  if (Byte & 0x18)
 800c6d4:	7bbb      	ldrb	r3, [r7, #14]
 800c6d6:	f003 0318 	and.w	r3, r3, #24
 800c6da:	2b00      	cmp	r3, #0
 800c6dc:	d001      	beq.n	800c6e2 <VL53L0X_GetInterruptMaskStatus+0x38>
    Status = VL53L0X_ERROR_RANGE_ERROR;
 800c6de:	23fa      	movs	r3, #250	; 0xfa
 800c6e0:	73fb      	strb	r3, [r7, #15]

  LOG_FUNCTION_END(Status);
  return Status;
 800c6e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c6e6:	4618      	mov	r0, r3
 800c6e8:	3710      	adds	r7, #16
 800c6ea:	46bd      	mov	sp, r7
 800c6ec:	bd80      	pop	{r7, pc}

0800c6ee <_ZSt3absd>:
// 2294. <cstdlib> should declare abs(double)

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR double
  abs(double __x)
  { return __builtin_fabs(__x); }
 800c6ee:	b480      	push	{r7}
 800c6f0:	b083      	sub	sp, #12
 800c6f2:	af00      	add	r7, sp, #0
 800c6f4:	ed87 0b00 	vstr	d0, [r7]
 800c6f8:	ed97 7b00 	vldr	d7, [r7]
 800c6fc:	eeb0 7bc7 	vabs.f64	d7, d7
 800c700:	eeb0 0b47 	vmov.f64	d0, d7
 800c704:	370c      	adds	r7, #12
 800c706:	46bd      	mov	sp, r7
 800c708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c70c:	4770      	bx	lr

0800c70e <VL53L0X_measurement_poll_for_completion>:
    data[mirrorIndex] = tempData;
  }
  return Status;
}

VL53L0X_Error VL53L0X_measurement_poll_for_completion(VL53L0X_DEV Dev) {
 800c70e:	b580      	push	{r7, lr}
 800c710:	b086      	sub	sp, #24
 800c712:	af00      	add	r7, sp, #0
 800c714:	6078      	str	r0, [r7, #4]
  VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c716:	2300      	movs	r3, #0
 800c718:	75fb      	strb	r3, [r7, #23]
  uint8_t NewDataReady = 0;
 800c71a:	2300      	movs	r3, #0
 800c71c:	73fb      	strb	r3, [r7, #15]
  uint32_t LoopNb;

  LOG_FUNCTION_START("");

  LoopNb = 0;
 800c71e:	2300      	movs	r3, #0
 800c720:	613b      	str	r3, [r7, #16]

  do {
    Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 800c722:	f107 030f 	add.w	r3, r7, #15
 800c726:	4619      	mov	r1, r3
 800c728:	6878      	ldr	r0, [r7, #4]
 800c72a:	f7ff fdbf 	bl	800c2ac <VL53L0X_GetMeasurementDataReady>
 800c72e:	4603      	mov	r3, r0
 800c730:	75fb      	strb	r3, [r7, #23]
    if (Status != 0)
 800c732:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c736:	2b00      	cmp	r3, #0
 800c738:	d10f      	bne.n	800c75a <VL53L0X_measurement_poll_for_completion+0x4c>
      break; /* the error is set */

    if (NewDataReady == 1)
 800c73a:	7bfb      	ldrb	r3, [r7, #15]
 800c73c:	2b01      	cmp	r3, #1
 800c73e:	d00e      	beq.n	800c75e <VL53L0X_measurement_poll_for_completion+0x50>
      break; /* done note that status == 0 */

    LoopNb++;
 800c740:	693b      	ldr	r3, [r7, #16]
 800c742:	3301      	adds	r3, #1
 800c744:	613b      	str	r3, [r7, #16]
    if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP) {
 800c746:	693b      	ldr	r3, [r7, #16]
 800c748:	2bc7      	cmp	r3, #199	; 0xc7
 800c74a:	d902      	bls.n	800c752 <VL53L0X_measurement_poll_for_completion+0x44>
      Status = VL53L0X_ERROR_TIME_OUT;
 800c74c:	23f9      	movs	r3, #249	; 0xf9
 800c74e:	75fb      	strb	r3, [r7, #23]
      break;
 800c750:	e006      	b.n	800c760 <VL53L0X_measurement_poll_for_completion+0x52>
    }

    VL53L0X_PollingDelay(Dev);
 800c752:	6878      	ldr	r0, [r7, #4]
 800c754:	f001 f8a9 	bl	800d8aa <VL53L0X_PollingDelay>
    Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 800c758:	e7e3      	b.n	800c722 <VL53L0X_measurement_poll_for_completion+0x14>
      break; /* the error is set */
 800c75a:	bf00      	nop
 800c75c:	e000      	b.n	800c760 <VL53L0X_measurement_poll_for_completion+0x52>
      break; /* done note that status == 0 */
 800c75e:	bf00      	nop
  } while (1);

  LOG_FUNCTION_END(Status);

  return Status;
 800c760:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c764:	4618      	mov	r0, r3
 800c766:	3718      	adds	r7, #24
 800c768:	46bd      	mov	sp, r7
 800c76a:	bd80      	pop	{r7, pc}

0800c76c <VL53L0X_isqrt>:
  vcsel_period_reg = (vcsel_period_pclks >> 1) - 1;

  return vcsel_period_reg;
}

uint32_t VL53L0X_isqrt(uint32_t num) {
 800c76c:	b480      	push	{r7}
 800c76e:	b085      	sub	sp, #20
 800c770:	af00      	add	r7, sp, #0
 800c772:	6078      	str	r0, [r7, #4]
   * Implements an integer square root
   *
   * From: http://en.wikipedia.org/wiki/Methods_of_computing_square_roots
   */

  uint32_t res = 0;
 800c774:	2300      	movs	r3, #0
 800c776:	60fb      	str	r3, [r7, #12]
  uint32_t bit = 1 << 30;
 800c778:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c77c:	60bb      	str	r3, [r7, #8]
  /* The second-to-top bit is set:
   *	1 << 14 for 16-bits, 1 << 30 for 32 bits */

  /* "bit" starts at the highest power of four <= the argument. */
  while (bit > num)
 800c77e:	68ba      	ldr	r2, [r7, #8]
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	429a      	cmp	r2, r3
 800c784:	d903      	bls.n	800c78e <VL53L0X_isqrt+0x22>
    bit >>= 2;
 800c786:	68bb      	ldr	r3, [r7, #8]
 800c788:	089b      	lsrs	r3, r3, #2
 800c78a:	60bb      	str	r3, [r7, #8]
  while (bit > num)
 800c78c:	e7f7      	b.n	800c77e <VL53L0X_isqrt+0x12>

  while (bit != 0) {
 800c78e:	68bb      	ldr	r3, [r7, #8]
 800c790:	2b00      	cmp	r3, #0
 800c792:	d018      	beq.n	800c7c6 <VL53L0X_isqrt+0x5a>
    if (num >= res + bit) {
 800c794:	68fa      	ldr	r2, [r7, #12]
 800c796:	68bb      	ldr	r3, [r7, #8]
 800c798:	4413      	add	r3, r2
 800c79a:	687a      	ldr	r2, [r7, #4]
 800c79c:	429a      	cmp	r2, r3
 800c79e:	d30b      	bcc.n	800c7b8 <VL53L0X_isqrt+0x4c>
      num -= res + bit;
 800c7a0:	68fa      	ldr	r2, [r7, #12]
 800c7a2:	68bb      	ldr	r3, [r7, #8]
 800c7a4:	4413      	add	r3, r2
 800c7a6:	687a      	ldr	r2, [r7, #4]
 800c7a8:	1ad3      	subs	r3, r2, r3
 800c7aa:	607b      	str	r3, [r7, #4]
      res = (res >> 1) + bit;
 800c7ac:	68fb      	ldr	r3, [r7, #12]
 800c7ae:	085b      	lsrs	r3, r3, #1
 800c7b0:	68ba      	ldr	r2, [r7, #8]
 800c7b2:	4413      	add	r3, r2
 800c7b4:	60fb      	str	r3, [r7, #12]
 800c7b6:	e002      	b.n	800c7be <VL53L0X_isqrt+0x52>
    } else
      res >>= 1;
 800c7b8:	68fb      	ldr	r3, [r7, #12]
 800c7ba:	085b      	lsrs	r3, r3, #1
 800c7bc:	60fb      	str	r3, [r7, #12]

    bit >>= 2;
 800c7be:	68bb      	ldr	r3, [r7, #8]
 800c7c0:	089b      	lsrs	r3, r3, #2
 800c7c2:	60bb      	str	r3, [r7, #8]
  while (bit != 0) {
 800c7c4:	e7e3      	b.n	800c78e <VL53L0X_isqrt+0x22>
  }

  return res;
 800c7c6:	68fb      	ldr	r3, [r7, #12]
}
 800c7c8:	4618      	mov	r0, r3
 800c7ca:	3714      	adds	r7, #20
 800c7cc:	46bd      	mov	sp, r7
 800c7ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7d2:	4770      	bx	lr

0800c7d4 <_Z28VL53L0X_calc_macro_period_psP13VL53L0X_Dev_th>:
  LOG_FUNCTION_END(Status);
  return Status;
}

uint32_t VL53L0X_calc_macro_period_ps(VL53L0X_DEV Dev,
                                      uint8_t vcsel_period_pclks) {
 800c7d4:	b490      	push	{r4, r7}
 800c7d6:	b086      	sub	sp, #24
 800c7d8:	af00      	add	r7, sp, #0
 800c7da:	6078      	str	r0, [r7, #4]
 800c7dc:	460b      	mov	r3, r1
 800c7de:	70fb      	strb	r3, [r7, #3]
  LOG_FUNCTION_START("");

  /* The above calculation will produce rounding errors,
     therefore set fixed value
  */
  PLL_period_ps = 1655;
 800c7e0:	f240 6377 	movw	r3, #1655	; 0x677
 800c7e4:	f04f 0400 	mov.w	r4, #0
 800c7e8:	e9c7 3404 	strd	r3, r4, [r7, #16]

  macro_period_vclks = 2304;
 800c7ec:	f44f 6310 	mov.w	r3, #2304	; 0x900
 800c7f0:	60fb      	str	r3, [r7, #12]
  macro_period_ps =
 800c7f2:	78fb      	ldrb	r3, [r7, #3]
      (uint32_t)(macro_period_vclks * vcsel_period_pclks * PLL_period_ps);
 800c7f4:	68fa      	ldr	r2, [r7, #12]
 800c7f6:	fb02 f303 	mul.w	r3, r2, r3
  macro_period_ps =
 800c7fa:	693a      	ldr	r2, [r7, #16]
 800c7fc:	fb02 f303 	mul.w	r3, r2, r3
 800c800:	60bb      	str	r3, [r7, #8]

  LOG_FUNCTION_END("");
  return macro_period_ps;
 800c802:	68bb      	ldr	r3, [r7, #8]
}
 800c804:	4618      	mov	r0, r3
 800c806:	3718      	adds	r7, #24
 800c808:	46bd      	mov	sp, r7
 800c80a:	bc90      	pop	{r4, r7}
 800c80c:	4770      	bx	lr
	...

0800c810 <VL53L0X_calc_timeout_mclks>:
  return timeout_macro_clks;
}

/* To convert ms into register value */
uint32_t VL53L0X_calc_timeout_mclks(VL53L0X_DEV Dev, uint32_t timeout_period_us,
                                    uint8_t vcsel_period_pclks) {
 800c810:	b580      	push	{r7, lr}
 800c812:	b088      	sub	sp, #32
 800c814:	af00      	add	r7, sp, #0
 800c816:	60f8      	str	r0, [r7, #12]
 800c818:	60b9      	str	r1, [r7, #8]
 800c81a:	4613      	mov	r3, r2
 800c81c:	71fb      	strb	r3, [r7, #7]
  uint32_t macro_period_ps;
  uint32_t macro_period_ns;
  uint32_t timeout_period_mclks = 0;
 800c81e:	2300      	movs	r3, #0
 800c820:	61fb      	str	r3, [r7, #28]

  macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 800c822:	79fb      	ldrb	r3, [r7, #7]
 800c824:	4619      	mov	r1, r3
 800c826:	68f8      	ldr	r0, [r7, #12]
 800c828:	f7ff ffd4 	bl	800c7d4 <_Z28VL53L0X_calc_macro_period_psP13VL53L0X_Dev_th>
 800c82c:	61b8      	str	r0, [r7, #24]
  macro_period_ns = (macro_period_ps + 500) / 1000;
 800c82e:	69bb      	ldr	r3, [r7, #24]
 800c830:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800c834:	4a0a      	ldr	r2, [pc, #40]	; (800c860 <VL53L0X_calc_timeout_mclks+0x50>)
 800c836:	fba2 2303 	umull	r2, r3, r2, r3
 800c83a:	099b      	lsrs	r3, r3, #6
 800c83c:	617b      	str	r3, [r7, #20]

  timeout_period_mclks = (uint32_t)(
      ((timeout_period_us * 1000) + (macro_period_ns / 2)) / macro_period_ns);
 800c83e:	68bb      	ldr	r3, [r7, #8]
 800c840:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800c844:	fb02 f203 	mul.w	r2, r2, r3
 800c848:	697b      	ldr	r3, [r7, #20]
 800c84a:	085b      	lsrs	r3, r3, #1
 800c84c:	441a      	add	r2, r3
  timeout_period_mclks = (uint32_t)(
 800c84e:	697b      	ldr	r3, [r7, #20]
 800c850:	fbb2 f3f3 	udiv	r3, r2, r3
 800c854:	61fb      	str	r3, [r7, #28]

  return timeout_period_mclks;
 800c856:	69fb      	ldr	r3, [r7, #28]
}
 800c858:	4618      	mov	r0, r3
 800c85a:	3720      	adds	r7, #32
 800c85c:	46bd      	mov	sp, r7
 800c85e:	bd80      	pop	{r7, pc}
 800c860:	10624dd3 	.word	0x10624dd3

0800c864 <VL53L0X_load_tuning_settings>:
  LOG_FUNCTION_END(Status);
  return Status;
}

VL53L0X_Error VL53L0X_load_tuning_settings(VL53L0X_DEV Dev,
                                           uint8_t *pTuningSettingBuffer) {
 800c864:	b580      	push	{r7, lr}
 800c866:	b08a      	sub	sp, #40	; 0x28
 800c868:	af00      	add	r7, sp, #0
 800c86a:	6078      	str	r0, [r7, #4]
 800c86c:	6039      	str	r1, [r7, #0]
  VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c86e:	2300      	movs	r3, #0
 800c870:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t localBuffer[4]; /* max */
  uint16_t Temp16;

  LOG_FUNCTION_START("");

  Index = 0;
 800c874:	2300      	movs	r3, #0
 800c876:	61fb      	str	r3, [r7, #28]

  while ((*(pTuningSettingBuffer + Index) != 0) &&
 800c878:	69fb      	ldr	r3, [r7, #28]
 800c87a:	683a      	ldr	r2, [r7, #0]
 800c87c:	4413      	add	r3, r2
 800c87e:	781b      	ldrb	r3, [r3, #0]
 800c880:	2b00      	cmp	r3, #0
 800c882:	f000 80d6 	beq.w	800ca32 <VL53L0X_load_tuning_settings+0x1ce>
 800c886:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c88a:	2b00      	cmp	r3, #0
 800c88c:	f040 80d1 	bne.w	800ca32 <VL53L0X_load_tuning_settings+0x1ce>
         (Status == VL53L0X_ERROR_NONE)) {
    NumberOfWrites = *(pTuningSettingBuffer + Index);
 800c890:	69fb      	ldr	r3, [r7, #28]
 800c892:	683a      	ldr	r2, [r7, #0]
 800c894:	4413      	add	r3, r2
 800c896:	781b      	ldrb	r3, [r3, #0]
 800c898:	76fb      	strb	r3, [r7, #27]
    Index++;
 800c89a:	69fb      	ldr	r3, [r7, #28]
 800c89c:	3301      	adds	r3, #1
 800c89e:	61fb      	str	r3, [r7, #28]
    if (NumberOfWrites == 0xFF) {
 800c8a0:	7efb      	ldrb	r3, [r7, #27]
 800c8a2:	2bff      	cmp	r3, #255	; 0xff
 800c8a4:	f040 8094 	bne.w	800c9d0 <VL53L0X_load_tuning_settings+0x16c>
      /* internal parameters */
      SelectParam = *(pTuningSettingBuffer + Index);
 800c8a8:	69fb      	ldr	r3, [r7, #28]
 800c8aa:	683a      	ldr	r2, [r7, #0]
 800c8ac:	4413      	add	r3, r2
 800c8ae:	781b      	ldrb	r3, [r3, #0]
 800c8b0:	767b      	strb	r3, [r7, #25]
      Index++;
 800c8b2:	69fb      	ldr	r3, [r7, #28]
 800c8b4:	3301      	adds	r3, #1
 800c8b6:	61fb      	str	r3, [r7, #28]
      switch (SelectParam) {
 800c8b8:	7e7b      	ldrb	r3, [r7, #25]
 800c8ba:	2b03      	cmp	r3, #3
 800c8bc:	f200 8084 	bhi.w	800c9c8 <VL53L0X_load_tuning_settings+0x164>
 800c8c0:	a201      	add	r2, pc, #4	; (adr r2, 800c8c8 <VL53L0X_load_tuning_settings+0x64>)
 800c8c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c8c6:	bf00      	nop
 800c8c8:	0800c8d9 	.word	0x0800c8d9
 800c8cc:	0800c915 	.word	0x0800c915
 800c8d0:	0800c951 	.word	0x0800c951
 800c8d4:	0800c98d 	.word	0x0800c98d
      case 0: /* uint16_t SigmaEstRefArray -> 2 bytes */
        msb = *(pTuningSettingBuffer + Index);
 800c8d8:	69fb      	ldr	r3, [r7, #28]
 800c8da:	683a      	ldr	r2, [r7, #0]
 800c8dc:	4413      	add	r3, r2
 800c8de:	781b      	ldrb	r3, [r3, #0]
 800c8e0:	763b      	strb	r3, [r7, #24]
        Index++;
 800c8e2:	69fb      	ldr	r3, [r7, #28]
 800c8e4:	3301      	adds	r3, #1
 800c8e6:	61fb      	str	r3, [r7, #28]
        lsb = *(pTuningSettingBuffer + Index);
 800c8e8:	69fb      	ldr	r3, [r7, #28]
 800c8ea:	683a      	ldr	r2, [r7, #0]
 800c8ec:	4413      	add	r3, r2
 800c8ee:	781b      	ldrb	r3, [r3, #0]
 800c8f0:	75fb      	strb	r3, [r7, #23]
        Index++;
 800c8f2:	69fb      	ldr	r3, [r7, #28]
 800c8f4:	3301      	adds	r3, #1
 800c8f6:	61fb      	str	r3, [r7, #28]
        Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800c8f8:	7e3b      	ldrb	r3, [r7, #24]
 800c8fa:	b29b      	uxth	r3, r3
 800c8fc:	021b      	lsls	r3, r3, #8
 800c8fe:	b29a      	uxth	r2, r3
 800c900:	7dfb      	ldrb	r3, [r7, #23]
 800c902:	b29b      	uxth	r3, r3
 800c904:	4413      	add	r3, r2
 800c906:	b29b      	uxth	r3, r3
 800c908:	81fb      	strh	r3, [r7, #14]
        PALDevDataSet(Dev, SigmaEstRefArray, Temp16);
 800c90a:	89fa      	ldrh	r2, [r7, #14]
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
        break;
 800c912:	e08d      	b.n	800ca30 <VL53L0X_load_tuning_settings+0x1cc>
      case 1: /* uint16_t SigmaEstEffPulseWidth -> 2 bytes */
        msb = *(pTuningSettingBuffer + Index);
 800c914:	69fb      	ldr	r3, [r7, #28]
 800c916:	683a      	ldr	r2, [r7, #0]
 800c918:	4413      	add	r3, r2
 800c91a:	781b      	ldrb	r3, [r3, #0]
 800c91c:	763b      	strb	r3, [r7, #24]
        Index++;
 800c91e:	69fb      	ldr	r3, [r7, #28]
 800c920:	3301      	adds	r3, #1
 800c922:	61fb      	str	r3, [r7, #28]
        lsb = *(pTuningSettingBuffer + Index);
 800c924:	69fb      	ldr	r3, [r7, #28]
 800c926:	683a      	ldr	r2, [r7, #0]
 800c928:	4413      	add	r3, r2
 800c92a:	781b      	ldrb	r3, [r3, #0]
 800c92c:	75fb      	strb	r3, [r7, #23]
        Index++;
 800c92e:	69fb      	ldr	r3, [r7, #28]
 800c930:	3301      	adds	r3, #1
 800c932:	61fb      	str	r3, [r7, #28]
        Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800c934:	7e3b      	ldrb	r3, [r7, #24]
 800c936:	b29b      	uxth	r3, r3
 800c938:	021b      	lsls	r3, r3, #8
 800c93a:	b29a      	uxth	r2, r3
 800c93c:	7dfb      	ldrb	r3, [r7, #23]
 800c93e:	b29b      	uxth	r3, r3
 800c940:	4413      	add	r3, r2
 800c942:	b29b      	uxth	r3, r3
 800c944:	81fb      	strh	r3, [r7, #14]
        PALDevDataSet(Dev, SigmaEstEffPulseWidth, Temp16);
 800c946:	89fa      	ldrh	r2, [r7, #14]
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	f8a3 2136 	strh.w	r2, [r3, #310]	; 0x136
        break;
 800c94e:	e06f      	b.n	800ca30 <VL53L0X_load_tuning_settings+0x1cc>
      case 2: /* uint16_t SigmaEstEffAmbWidth -> 2 bytes */
        msb = *(pTuningSettingBuffer + Index);
 800c950:	69fb      	ldr	r3, [r7, #28]
 800c952:	683a      	ldr	r2, [r7, #0]
 800c954:	4413      	add	r3, r2
 800c956:	781b      	ldrb	r3, [r3, #0]
 800c958:	763b      	strb	r3, [r7, #24]
        Index++;
 800c95a:	69fb      	ldr	r3, [r7, #28]
 800c95c:	3301      	adds	r3, #1
 800c95e:	61fb      	str	r3, [r7, #28]
        lsb = *(pTuningSettingBuffer + Index);
 800c960:	69fb      	ldr	r3, [r7, #28]
 800c962:	683a      	ldr	r2, [r7, #0]
 800c964:	4413      	add	r3, r2
 800c966:	781b      	ldrb	r3, [r3, #0]
 800c968:	75fb      	strb	r3, [r7, #23]
        Index++;
 800c96a:	69fb      	ldr	r3, [r7, #28]
 800c96c:	3301      	adds	r3, #1
 800c96e:	61fb      	str	r3, [r7, #28]
        Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800c970:	7e3b      	ldrb	r3, [r7, #24]
 800c972:	b29b      	uxth	r3, r3
 800c974:	021b      	lsls	r3, r3, #8
 800c976:	b29a      	uxth	r2, r3
 800c978:	7dfb      	ldrb	r3, [r7, #23]
 800c97a:	b29b      	uxth	r3, r3
 800c97c:	4413      	add	r3, r2
 800c97e:	b29b      	uxth	r3, r3
 800c980:	81fb      	strh	r3, [r7, #14]
        PALDevDataSet(Dev, SigmaEstEffAmbWidth, Temp16);
 800c982:	89fa      	ldrh	r2, [r7, #14]
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	f8a3 2138 	strh.w	r2, [r3, #312]	; 0x138
        break;
 800c98a:	e051      	b.n	800ca30 <VL53L0X_load_tuning_settings+0x1cc>
      case 3: /* uint16_t targetRefRate -> 2 bytes */
        msb = *(pTuningSettingBuffer + Index);
 800c98c:	69fb      	ldr	r3, [r7, #28]
 800c98e:	683a      	ldr	r2, [r7, #0]
 800c990:	4413      	add	r3, r2
 800c992:	781b      	ldrb	r3, [r3, #0]
 800c994:	763b      	strb	r3, [r7, #24]
        Index++;
 800c996:	69fb      	ldr	r3, [r7, #28]
 800c998:	3301      	adds	r3, #1
 800c99a:	61fb      	str	r3, [r7, #28]
        lsb = *(pTuningSettingBuffer + Index);
 800c99c:	69fb      	ldr	r3, [r7, #28]
 800c99e:	683a      	ldr	r2, [r7, #0]
 800c9a0:	4413      	add	r3, r2
 800c9a2:	781b      	ldrb	r3, [r3, #0]
 800c9a4:	75fb      	strb	r3, [r7, #23]
        Index++;
 800c9a6:	69fb      	ldr	r3, [r7, #28]
 800c9a8:	3301      	adds	r3, #1
 800c9aa:	61fb      	str	r3, [r7, #28]
        Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800c9ac:	7e3b      	ldrb	r3, [r7, #24]
 800c9ae:	b29b      	uxth	r3, r3
 800c9b0:	021b      	lsls	r3, r3, #8
 800c9b2:	b29a      	uxth	r2, r3
 800c9b4:	7dfb      	ldrb	r3, [r7, #23]
 800c9b6:	b29b      	uxth	r3, r3
 800c9b8:	4413      	add	r3, r2
 800c9ba:	b29b      	uxth	r3, r3
 800c9bc:	81fb      	strh	r3, [r7, #14]
        PALDevDataSet(Dev, targetRefRate, Temp16);
 800c9be:	89fa      	ldrh	r2, [r7, #14]
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	f8a3 213c 	strh.w	r2, [r3, #316]	; 0x13c
        break;
 800c9c6:	e033      	b.n	800ca30 <VL53L0X_load_tuning_settings+0x1cc>
      default: /* invalid parameter */
        Status = VL53L0X_ERROR_INVALID_PARAMS;
 800c9c8:	23fc      	movs	r3, #252	; 0xfc
 800c9ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c9ce:	e753      	b.n	800c878 <VL53L0X_load_tuning_settings+0x14>
      }

    } else if (NumberOfWrites <= 4) {
 800c9d0:	7efb      	ldrb	r3, [r7, #27]
 800c9d2:	2b04      	cmp	r3, #4
 800c9d4:	d829      	bhi.n	800ca2a <VL53L0X_load_tuning_settings+0x1c6>
      Address = *(pTuningSettingBuffer + Index);
 800c9d6:	69fb      	ldr	r3, [r7, #28]
 800c9d8:	683a      	ldr	r2, [r7, #0]
 800c9da:	4413      	add	r3, r2
 800c9dc:	781b      	ldrb	r3, [r3, #0]
 800c9de:	76bb      	strb	r3, [r7, #26]
      Index++;
 800c9e0:	69fb      	ldr	r3, [r7, #28]
 800c9e2:	3301      	adds	r3, #1
 800c9e4:	61fb      	str	r3, [r7, #28]

      for (i = 0; i < NumberOfWrites; i++) {
 800c9e6:	2300      	movs	r3, #0
 800c9e8:	623b      	str	r3, [r7, #32]
 800c9ea:	7efb      	ldrb	r3, [r7, #27]
 800c9ec:	6a3a      	ldr	r2, [r7, #32]
 800c9ee:	429a      	cmp	r2, r3
 800c9f0:	da10      	bge.n	800ca14 <VL53L0X_load_tuning_settings+0x1b0>
        localBuffer[i] = *(pTuningSettingBuffer + Index);
 800c9f2:	69fb      	ldr	r3, [r7, #28]
 800c9f4:	683a      	ldr	r2, [r7, #0]
 800c9f6:	4413      	add	r3, r2
 800c9f8:	7819      	ldrb	r1, [r3, #0]
 800c9fa:	f107 0210 	add.w	r2, r7, #16
 800c9fe:	6a3b      	ldr	r3, [r7, #32]
 800ca00:	4413      	add	r3, r2
 800ca02:	460a      	mov	r2, r1
 800ca04:	701a      	strb	r2, [r3, #0]
        Index++;
 800ca06:	69fb      	ldr	r3, [r7, #28]
 800ca08:	3301      	adds	r3, #1
 800ca0a:	61fb      	str	r3, [r7, #28]
      for (i = 0; i < NumberOfWrites; i++) {
 800ca0c:	6a3b      	ldr	r3, [r7, #32]
 800ca0e:	3301      	adds	r3, #1
 800ca10:	623b      	str	r3, [r7, #32]
 800ca12:	e7ea      	b.n	800c9ea <VL53L0X_load_tuning_settings+0x186>
      }

      Status = VL53L0X_WriteMulti(Dev, Address, localBuffer, NumberOfWrites);
 800ca14:	7efb      	ldrb	r3, [r7, #27]
 800ca16:	f107 0210 	add.w	r2, r7, #16
 800ca1a:	7eb9      	ldrb	r1, [r7, #26]
 800ca1c:	6878      	ldr	r0, [r7, #4]
 800ca1e:	f000 fe8c 	bl	800d73a <VL53L0X_WriteMulti>
 800ca22:	4603      	mov	r3, r0
 800ca24:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ca28:	e726      	b.n	800c878 <VL53L0X_load_tuning_settings+0x14>

    } else {
      Status = VL53L0X_ERROR_INVALID_PARAMS;
 800ca2a:	23fc      	movs	r3, #252	; 0xfc
 800ca2c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  while ((*(pTuningSettingBuffer + Index) != 0) &&
 800ca30:	e722      	b.n	800c878 <VL53L0X_load_tuning_settings+0x14>
    }
  }

  LOG_FUNCTION_END(Status);
  return Status;
 800ca32:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800ca36:	4618      	mov	r0, r3
 800ca38:	3728      	adds	r7, #40	; 0x28
 800ca3a:	46bd      	mov	sp, r7
 800ca3c:	bd80      	pop	{r7, pc}
 800ca3e:	bf00      	nop

0800ca40 <VL53L0X_get_total_xtalk_rate>:

VL53L0X_Error VL53L0X_get_total_xtalk_rate(
    VL53L0X_DEV Dev, VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
    FixPoint1616_t *ptotal_xtalk_rate_mcps) {
 800ca40:	b580      	push	{r7, lr}
 800ca42:	b088      	sub	sp, #32
 800ca44:	af00      	add	r7, sp, #0
 800ca46:	60f8      	str	r0, [r7, #12]
 800ca48:	60b9      	str	r1, [r7, #8]
 800ca4a:	607a      	str	r2, [r7, #4]
  VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ca4c:	2300      	movs	r3, #0
 800ca4e:	77fb      	strb	r3, [r7, #31]

  uint8_t xtalkCompEnable;
  FixPoint1616_t totalXtalkMegaCps;
  FixPoint1616_t xtalkPerSpadMegaCps;

  *ptotal_xtalk_rate_mcps = 0;
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	2200      	movs	r2, #0
 800ca54:	601a      	str	r2, [r3, #0]

  Status = VL53L0X_GetXTalkCompensationEnable(Dev, &xtalkCompEnable);
 800ca56:	f107 0313 	add.w	r3, r7, #19
 800ca5a:	4619      	mov	r1, r3
 800ca5c:	68f8      	ldr	r0, [r7, #12]
 800ca5e:	f7ff f990 	bl	800bd82 <VL53L0X_GetXTalkCompensationEnable>
 800ca62:	4603      	mov	r3, r0
 800ca64:	77fb      	strb	r3, [r7, #31]
  if (Status == VL53L0X_ERROR_NONE) {
 800ca66:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800ca6a:	2b00      	cmp	r3, #0
 800ca6c:	d111      	bne.n	800ca92 <VL53L0X_get_total_xtalk_rate+0x52>

    if (xtalkCompEnable) {
 800ca6e:	7cfb      	ldrb	r3, [r7, #19]
 800ca70:	2b00      	cmp	r3, #0
 800ca72:	d00e      	beq.n	800ca92 <VL53L0X_get_total_xtalk_rate+0x52>

      VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps,
 800ca74:	68fb      	ldr	r3, [r7, #12]
 800ca76:	6a1b      	ldr	r3, [r3, #32]
 800ca78:	61bb      	str	r3, [r7, #24]
                                xtalkPerSpadMegaCps);

      /* FixPoint1616 * FixPoint 8:8 = FixPoint0824 */
      totalXtalkMegaCps =
          pRangingMeasurementData->EffectiveSpadRtnCount * xtalkPerSpadMegaCps;
 800ca7a:	68bb      	ldr	r3, [r7, #8]
 800ca7c:	8a9b      	ldrh	r3, [r3, #20]
 800ca7e:	461a      	mov	r2, r3
      totalXtalkMegaCps =
 800ca80:	69bb      	ldr	r3, [r7, #24]
 800ca82:	fb02 f303 	mul.w	r3, r2, r3
 800ca86:	617b      	str	r3, [r7, #20]

      /* FixPoint0824 >> 8 = FixPoint1616 */
      *ptotal_xtalk_rate_mcps = (totalXtalkMegaCps + 0x80) >> 8;
 800ca88:	697b      	ldr	r3, [r7, #20]
 800ca8a:	3380      	adds	r3, #128	; 0x80
 800ca8c:	0a1a      	lsrs	r2, r3, #8
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	601a      	str	r2, [r3, #0]
    }
  }

  return Status;
 800ca92:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800ca96:	4618      	mov	r0, r3
 800ca98:	3720      	adds	r7, #32
 800ca9a:	46bd      	mov	sp, r7
 800ca9c:	bd80      	pop	{r7, pc}

0800ca9e <VL53L0X_get_total_signal_rate>:

VL53L0X_Error VL53L0X_get_total_signal_rate(
    VL53L0X_DEV Dev, VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
    FixPoint1616_t *ptotal_signal_rate_mcps) {
 800ca9e:	b580      	push	{r7, lr}
 800caa0:	b086      	sub	sp, #24
 800caa2:	af00      	add	r7, sp, #0
 800caa4:	60f8      	str	r0, [r7, #12]
 800caa6:	60b9      	str	r1, [r7, #8]
 800caa8:	607a      	str	r2, [r7, #4]
  VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800caaa:	2300      	movs	r3, #0
 800caac:	75fb      	strb	r3, [r7, #23]
  FixPoint1616_t totalXtalkMegaCps;

  LOG_FUNCTION_START("");

  *ptotal_signal_rate_mcps = pRangingMeasurementData->SignalRateRtnMegaCps;
 800caae:	68bb      	ldr	r3, [r7, #8]
 800cab0:	68da      	ldr	r2, [r3, #12]
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	601a      	str	r2, [r3, #0]

  Status = VL53L0X_get_total_xtalk_rate(Dev, pRangingMeasurementData,
 800cab6:	f107 0310 	add.w	r3, r7, #16
 800caba:	461a      	mov	r2, r3
 800cabc:	68b9      	ldr	r1, [r7, #8]
 800cabe:	68f8      	ldr	r0, [r7, #12]
 800cac0:	f7ff ffbe 	bl	800ca40 <VL53L0X_get_total_xtalk_rate>
 800cac4:	4603      	mov	r3, r0
 800cac6:	75fb      	strb	r3, [r7, #23]
                                        &totalXtalkMegaCps);

  if (Status == VL53L0X_ERROR_NONE)
 800cac8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800cacc:	2b00      	cmp	r3, #0
 800cace:	d105      	bne.n	800cadc <VL53L0X_get_total_signal_rate+0x3e>
    *ptotal_signal_rate_mcps += totalXtalkMegaCps;
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	681a      	ldr	r2, [r3, #0]
 800cad4:	693b      	ldr	r3, [r7, #16]
 800cad6:	441a      	add	r2, r3
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	601a      	str	r2, [r3, #0]

  return Status;
 800cadc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800cae0:	4618      	mov	r0, r3
 800cae2:	3718      	adds	r7, #24
 800cae4:	46bd      	mov	sp, r7
 800cae6:	bd80      	pop	{r7, pc}

0800cae8 <_Z17VL53L0X_calc_dmaxP13VL53L0X_Dev_tmmmmmmPm>:
                                FixPoint1616_t totalSignalRate_mcps,
                                FixPoint1616_t totalCorrSignalRate_mcps,
                                FixPoint1616_t pwMult, uint32_t sigmaEstimateP1,
                                FixPoint1616_t sigmaEstimateP2,
                                uint32_t peakVcselDuration_us,
                                uint32_t *pdmax_mm) {
 800cae8:	b580      	push	{r7, lr}
 800caea:	b09a      	sub	sp, #104	; 0x68
 800caec:	af00      	add	r7, sp, #0
 800caee:	60f8      	str	r0, [r7, #12]
 800caf0:	60b9      	str	r1, [r7, #8]
 800caf2:	607a      	str	r2, [r7, #4]
 800caf4:	603b      	str	r3, [r7, #0]
  const uint32_t cSigmaLimit = 18;
 800caf6:	2312      	movs	r3, #18
 800caf8:	657b      	str	r3, [r7, #84]	; 0x54
  const FixPoint1616_t cSignalLimit = 0x4000;     /* 0.25 */
 800cafa:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800cafe:	653b      	str	r3, [r7, #80]	; 0x50
  const FixPoint1616_t cSigmaEstRef = 0x00000042; /* 0.001 */
 800cb00:	2342      	movs	r3, #66	; 0x42
 800cb02:	64fb      	str	r3, [r7, #76]	; 0x4c
  const uint32_t cAmbEffWidthSigmaEst_ns = 6;
 800cb04:	2306      	movs	r3, #6
 800cb06:	64bb      	str	r3, [r7, #72]	; 0x48
  const uint32_t cAmbEffWidthDMax_ns = 7;
 800cb08:	2307      	movs	r3, #7
 800cb0a:	647b      	str	r3, [r7, #68]	; 0x44
  FixPoint1616_t dmaxAmbient;
  FixPoint1616_t dmaxDarkTmp;
  FixPoint1616_t sigmaEstP2Tmp;
  uint32_t signalRateTemp_mcps;

  VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800cb0c:	2300      	movs	r3, #0
 800cb0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  LOG_FUNCTION_START("");

  dmaxCalRange_mm = PALDevDataGet(Dev, DmaxCalRangeMilliMeter);
 800cb12:	68fb      	ldr	r3, [r7, #12]
 800cb14:	f8b3 3154 	ldrh.w	r3, [r3, #340]	; 0x154
 800cb18:	63fb      	str	r3, [r7, #60]	; 0x3c

  dmaxCalSignalRateRtn_mcps = PALDevDataGet(Dev, DmaxCalSignalRateRtnMegaCps);
 800cb1a:	68fb      	ldr	r3, [r7, #12]
 800cb1c:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 800cb20:	63bb      	str	r3, [r7, #56]	; 0x38

  /* uint32 * FixPoint1616 = FixPoint1616 */
  SignalAt0mm = dmaxCalRange_mm * dmaxCalSignalRateRtn_mcps;
 800cb22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cb24:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cb26:	fb02 f303 	mul.w	r3, r2, r3
 800cb2a:	637b      	str	r3, [r7, #52]	; 0x34

  /* FixPoint1616 >> 8 = FixPoint2408 */
  SignalAt0mm = (SignalAt0mm + 0x80) >> 8;
 800cb2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cb2e:	3380      	adds	r3, #128	; 0x80
 800cb30:	0a1b      	lsrs	r3, r3, #8
 800cb32:	637b      	str	r3, [r7, #52]	; 0x34
  SignalAt0mm *= dmaxCalRange_mm;
 800cb34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cb36:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800cb38:	fb02 f303 	mul.w	r3, r2, r3
 800cb3c:	637b      	str	r3, [r7, #52]	; 0x34

  minSignalNeeded_p1 = 0;
 800cb3e:	2300      	movs	r3, #0
 800cb40:	667b      	str	r3, [r7, #100]	; 0x64
  if (totalCorrSignalRate_mcps > 0) {
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	2b00      	cmp	r3, #0
 800cb46:	d01b      	beq.n	800cb80 <_Z17VL53L0X_calc_dmaxP13VL53L0X_Dev_tmmmmmmPm+0x98>

    /* Shift by 10 bits to increase resolution prior to the
     * division */
    signalRateTemp_mcps = totalSignalRate_mcps << 10;
 800cb48:	68bb      	ldr	r3, [r7, #8]
 800cb4a:	029b      	lsls	r3, r3, #10
 800cb4c:	633b      	str	r3, [r7, #48]	; 0x30

    /* Add rounding value prior to division */
    minSignalNeeded_p1 = signalRateTemp_mcps + (totalCorrSignalRate_mcps / 2);
 800cb4e:	687b      	ldr	r3, [r7, #4]
 800cb50:	085b      	lsrs	r3, r3, #1
 800cb52:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cb54:	4413      	add	r3, r2
 800cb56:	667b      	str	r3, [r7, #100]	; 0x64

    /* FixPoint0626/FixPoint1616 = FixPoint2210 */
    minSignalNeeded_p1 /= totalCorrSignalRate_mcps;
 800cb58:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	fbb2 f3f3 	udiv	r3, r2, r3
 800cb60:	667b      	str	r3, [r7, #100]	; 0x64

    /* Apply a factored version of the speed of light.
     Correction to be applied at the end */
    minSignalNeeded_p1 *= 3;
 800cb62:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800cb64:	4613      	mov	r3, r2
 800cb66:	005b      	lsls	r3, r3, #1
 800cb68:	4413      	add	r3, r2
 800cb6a:	667b      	str	r3, [r7, #100]	; 0x64

    /* FixPoint2210 * FixPoint2210 = FixPoint1220 */
    minSignalNeeded_p1 *= minSignalNeeded_p1;
 800cb6c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cb6e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800cb70:	fb02 f303 	mul.w	r3, r2, r3
 800cb74:	667b      	str	r3, [r7, #100]	; 0x64

    /* FixPoint1220 >> 16 = FixPoint2804 */
    minSignalNeeded_p1 = (minSignalNeeded_p1 + 0x8000) >> 16;
 800cb76:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cb78:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800cb7c:	0c1b      	lsrs	r3, r3, #16
 800cb7e:	667b      	str	r3, [r7, #100]	; 0x64
  }

  minSignalNeeded_p2 = pwMult * sigmaEstimateP1;
 800cb80:	683b      	ldr	r3, [r7, #0]
 800cb82:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800cb84:	fb02 f303 	mul.w	r3, r2, r3
 800cb88:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* FixPoint1616 >> 16 =	 uint32 */
  minSignalNeeded_p2 = (minSignalNeeded_p2 + 0x8000) >> 16;
 800cb8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb8c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800cb90:	0c1b      	lsrs	r3, r3, #16
 800cb92:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* uint32 * uint32	=  uint32 */
  minSignalNeeded_p2 *= minSignalNeeded_p2;
 800cb94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb96:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cb98:	fb02 f303 	mul.w	r3, r2, r3
 800cb9c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Check sigmaEstimateP2
   * If this value is too high there is not enough signal rate
   * to calculate dmax value so set a suitable value to ensure
   * a very small dmax.
   */
  sigmaEstP2Tmp = (sigmaEstimateP2 + 0x8000) >> 16;
 800cb9e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800cba0:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800cba4:	0c1b      	lsrs	r3, r3, #16
 800cba6:	62bb      	str	r3, [r7, #40]	; 0x28
  sigmaEstP2Tmp =
      (sigmaEstP2Tmp + cAmbEffWidthSigmaEst_ns / 2) / cAmbEffWidthSigmaEst_ns;
 800cba8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cbaa:	3303      	adds	r3, #3
  sigmaEstP2Tmp =
 800cbac:	4a56      	ldr	r2, [pc, #344]	; (800cd08 <_Z17VL53L0X_calc_dmaxP13VL53L0X_Dev_tmmmmmmPm+0x220>)
 800cbae:	fba2 2303 	umull	r2, r3, r2, r3
 800cbb2:	089b      	lsrs	r3, r3, #2
 800cbb4:	62bb      	str	r3, [r7, #40]	; 0x28
  sigmaEstP2Tmp *= cAmbEffWidthDMax_ns;
 800cbb6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cbb8:	4613      	mov	r3, r2
 800cbba:	00db      	lsls	r3, r3, #3
 800cbbc:	1a9b      	subs	r3, r3, r2
 800cbbe:	62bb      	str	r3, [r7, #40]	; 0x28

  if (sigmaEstP2Tmp > 0xffff) {
 800cbc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cbc2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cbc6:	d302      	bcc.n	800cbce <_Z17VL53L0X_calc_dmaxP13VL53L0X_Dev_tmmmmmmPm+0xe6>
    minSignalNeeded_p3 = 0xfff00000;
 800cbc8:	4b50      	ldr	r3, [pc, #320]	; (800cd0c <_Z17VL53L0X_calc_dmaxP13VL53L0X_Dev_tmmmmmmPm+0x224>)
 800cbca:	663b      	str	r3, [r7, #96]	; 0x60
 800cbcc:	e015      	b.n	800cbfa <_Z17VL53L0X_calc_dmaxP13VL53L0X_Dev_tmmmmmmPm+0x112>

    /* DMAX uses a different ambient width from sigma, so apply
     * correction.
     * Perform division before multiplication to prevent overflow.
     */
    sigmaEstimateP2 = (sigmaEstimateP2 + cAmbEffWidthSigmaEst_ns / 2) /
 800cbce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800cbd0:	3303      	adds	r3, #3
 800cbd2:	4a4d      	ldr	r2, [pc, #308]	; (800cd08 <_Z17VL53L0X_calc_dmaxP13VL53L0X_Dev_tmmmmmmPm+0x220>)
 800cbd4:	fba2 2303 	umull	r2, r3, r2, r3
 800cbd8:	089b      	lsrs	r3, r3, #2
 800cbda:	677b      	str	r3, [r7, #116]	; 0x74
                      cAmbEffWidthSigmaEst_ns;
    sigmaEstimateP2 *= cAmbEffWidthDMax_ns;
 800cbdc:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800cbde:	4613      	mov	r3, r2
 800cbe0:	00db      	lsls	r3, r3, #3
 800cbe2:	1a9b      	subs	r3, r3, r2
 800cbe4:	677b      	str	r3, [r7, #116]	; 0x74

    /* FixPoint1616 >> 16 = uint32 */
    minSignalNeeded_p3 = (sigmaEstimateP2 + 0x8000) >> 16;
 800cbe6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800cbe8:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800cbec:	0c1b      	lsrs	r3, r3, #16
 800cbee:	663b      	str	r3, [r7, #96]	; 0x60

    minSignalNeeded_p3 *= minSignalNeeded_p3;
 800cbf0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800cbf2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800cbf4:	fb02 f303 	mul.w	r3, r2, r3
 800cbf8:	663b      	str	r3, [r7, #96]	; 0x60
  }

  /* FixPoint1814 / uint32 = FixPoint1814 */
  sigmaLimitTmp = ((cSigmaLimit << 14) + 500) / 1000;
 800cbfa:	f240 1327 	movw	r3, #295	; 0x127
 800cbfe:	627b      	str	r3, [r7, #36]	; 0x24

  /* FixPoint1814 * FixPoint1814 = FixPoint3628 := FixPoint0428 */
  sigmaLimitTmp *= sigmaLimitTmp;
 800cc00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cc04:	fb02 f303 	mul.w	r3, r2, r3
 800cc08:	627b      	str	r3, [r7, #36]	; 0x24

  /* FixPoint1616 * FixPoint1616 = FixPoint3232 */
  sigmaEstSqTmp = cSigmaEstRef * cSigmaEstRef;
 800cc0a:	f241 1304 	movw	r3, #4356	; 0x1104
 800cc0e:	623b      	str	r3, [r7, #32]

  /* FixPoint3232 >> 4 = FixPoint0428 */
  sigmaEstSqTmp = (sigmaEstSqTmp + 0x08) >> 4;
 800cc10:	6a3b      	ldr	r3, [r7, #32]
 800cc12:	3308      	adds	r3, #8
 800cc14:	091b      	lsrs	r3, r3, #4
 800cc16:	623b      	str	r3, [r7, #32]

  /* FixPoint0428 - FixPoint0428	= FixPoint0428 */
  sigmaLimitTmp -= sigmaEstSqTmp;
 800cc18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cc1a:	6a3b      	ldr	r3, [r7, #32]
 800cc1c:	1ad3      	subs	r3, r2, r3
 800cc1e:	627b      	str	r3, [r7, #36]	; 0x24

  /* uint32_t * FixPoint0428 = FixPoint0428 */
  minSignalNeeded_p4 = 4 * 12 * sigmaLimitTmp;
 800cc20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cc22:	4613      	mov	r3, r2
 800cc24:	005b      	lsls	r3, r3, #1
 800cc26:	4413      	add	r3, r2
 800cc28:	011b      	lsls	r3, r3, #4
 800cc2a:	61fb      	str	r3, [r7, #28]

  /* FixPoint0428 >> 14 = FixPoint1814 */
  minSignalNeeded_p4 = (minSignalNeeded_p4 + 0x2000) >> 14;
 800cc2c:	69fb      	ldr	r3, [r7, #28]
 800cc2e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800cc32:	0b9b      	lsrs	r3, r3, #14
 800cc34:	61fb      	str	r3, [r7, #28]

  /* uint32 + uint32 = uint32 */
  minSignalNeeded = (minSignalNeeded_p2 + minSignalNeeded_p3);
 800cc36:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cc38:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800cc3a:	4413      	add	r3, r2
 800cc3c:	61bb      	str	r3, [r7, #24]

  /* uint32 / uint32 = uint32 */
  minSignalNeeded += (peakVcselDuration_us / 2);
 800cc3e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800cc40:	085b      	lsrs	r3, r3, #1
 800cc42:	69ba      	ldr	r2, [r7, #24]
 800cc44:	4413      	add	r3, r2
 800cc46:	61bb      	str	r3, [r7, #24]
  minSignalNeeded /= peakVcselDuration_us;
 800cc48:	69ba      	ldr	r2, [r7, #24]
 800cc4a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800cc4c:	fbb2 f3f3 	udiv	r3, r2, r3
 800cc50:	61bb      	str	r3, [r7, #24]

  /* uint32 << 14 = FixPoint1814 */
  minSignalNeeded <<= 14;
 800cc52:	69bb      	ldr	r3, [r7, #24]
 800cc54:	039b      	lsls	r3, r3, #14
 800cc56:	61bb      	str	r3, [r7, #24]

  /* FixPoint1814 / FixPoint1814 = uint32 */
  minSignalNeeded += (minSignalNeeded_p4 / 2);
 800cc58:	69fb      	ldr	r3, [r7, #28]
 800cc5a:	085b      	lsrs	r3, r3, #1
 800cc5c:	69ba      	ldr	r2, [r7, #24]
 800cc5e:	4413      	add	r3, r2
 800cc60:	61bb      	str	r3, [r7, #24]
  minSignalNeeded /= minSignalNeeded_p4;
 800cc62:	69ba      	ldr	r2, [r7, #24]
 800cc64:	69fb      	ldr	r3, [r7, #28]
 800cc66:	fbb2 f3f3 	udiv	r3, r2, r3
 800cc6a:	61bb      	str	r3, [r7, #24]

  /* FixPoint3200 * FixPoint2804 := FixPoint2804*/
  minSignalNeeded *= minSignalNeeded_p1;
 800cc6c:	69bb      	ldr	r3, [r7, #24]
 800cc6e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800cc70:	fb02 f303 	mul.w	r3, r2, r3
 800cc74:	61bb      	str	r3, [r7, #24]
   * and 10E-22 on the denominator.
   * We do this because 32bit fix point calculation can't
   * handle the larger and smaller elements of this equation,
   * i.e. speed of light and pulse widths.
   */
  minSignalNeeded = (minSignalNeeded + 500) / 1000;
 800cc76:	69bb      	ldr	r3, [r7, #24]
 800cc78:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800cc7c:	4a24      	ldr	r2, [pc, #144]	; (800cd10 <_Z17VL53L0X_calc_dmaxP13VL53L0X_Dev_tmmmmmmPm+0x228>)
 800cc7e:	fba2 2303 	umull	r2, r3, r2, r3
 800cc82:	099b      	lsrs	r3, r3, #6
 800cc84:	61bb      	str	r3, [r7, #24]
  minSignalNeeded <<= 4;
 800cc86:	69bb      	ldr	r3, [r7, #24]
 800cc88:	011b      	lsls	r3, r3, #4
 800cc8a:	61bb      	str	r3, [r7, #24]

  minSignalNeeded = (minSignalNeeded + 500) / 1000;
 800cc8c:	69bb      	ldr	r3, [r7, #24]
 800cc8e:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800cc92:	4a1f      	ldr	r2, [pc, #124]	; (800cd10 <_Z17VL53L0X_calc_dmaxP13VL53L0X_Dev_tmmmmmmPm+0x228>)
 800cc94:	fba2 2303 	umull	r2, r3, r2, r3
 800cc98:	099b      	lsrs	r3, r3, #6
 800cc9a:	61bb      	str	r3, [r7, #24]

  /* FixPoint1616 >> 8 = FixPoint2408 */
  signalLimitTmp = (cSignalLimit + 0x80) >> 8;
 800cc9c:	2340      	movs	r3, #64	; 0x40
 800cc9e:	617b      	str	r3, [r7, #20]

  /* FixPoint2408/FixPoint2408 = uint32 */
  if (signalLimitTmp != 0)
 800cca0:	697b      	ldr	r3, [r7, #20]
 800cca2:	2b00      	cmp	r3, #0
 800cca4:	d008      	beq.n	800ccb8 <_Z17VL53L0X_calc_dmaxP13VL53L0X_Dev_tmmmmmmPm+0x1d0>
    dmaxDarkTmp = (SignalAt0mm + (signalLimitTmp / 2)) / signalLimitTmp;
 800cca6:	697b      	ldr	r3, [r7, #20]
 800cca8:	085a      	lsrs	r2, r3, #1
 800ccaa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ccac:	441a      	add	r2, r3
 800ccae:	697b      	ldr	r3, [r7, #20]
 800ccb0:	fbb2 f3f3 	udiv	r3, r2, r3
 800ccb4:	65bb      	str	r3, [r7, #88]	; 0x58
 800ccb6:	e001      	b.n	800ccbc <_Z17VL53L0X_calc_dmaxP13VL53L0X_Dev_tmmmmmmPm+0x1d4>
  else
    dmaxDarkTmp = 0;
 800ccb8:	2300      	movs	r3, #0
 800ccba:	65bb      	str	r3, [r7, #88]	; 0x58

  dmaxDark = VL53L0X_isqrt(dmaxDarkTmp);
 800ccbc:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800ccbe:	f7ff fd55 	bl	800c76c <VL53L0X_isqrt>
 800ccc2:	6138      	str	r0, [r7, #16]

  /* FixPoint2408/FixPoint2408 = uint32 */
  if (minSignalNeeded != 0)
 800ccc4:	69bb      	ldr	r3, [r7, #24]
 800ccc6:	2b00      	cmp	r3, #0
 800ccc8:	d008      	beq.n	800ccdc <_Z17VL53L0X_calc_dmaxP13VL53L0X_Dev_tmmmmmmPm+0x1f4>
    dmaxAmbient = (SignalAt0mm + minSignalNeeded / 2) / minSignalNeeded;
 800ccca:	69bb      	ldr	r3, [r7, #24]
 800cccc:	085a      	lsrs	r2, r3, #1
 800ccce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ccd0:	441a      	add	r2, r3
 800ccd2:	69bb      	ldr	r3, [r7, #24]
 800ccd4:	fbb2 f3f3 	udiv	r3, r2, r3
 800ccd8:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ccda:	e001      	b.n	800cce0 <_Z17VL53L0X_calc_dmaxP13VL53L0X_Dev_tmmmmmmPm+0x1f8>
  else
    dmaxAmbient = 0;
 800ccdc:	2300      	movs	r3, #0
 800ccde:	65fb      	str	r3, [r7, #92]	; 0x5c

  dmaxAmbient = VL53L0X_isqrt(dmaxAmbient);
 800cce0:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800cce2:	f7ff fd43 	bl	800c76c <VL53L0X_isqrt>
 800cce6:	65f8      	str	r0, [r7, #92]	; 0x5c

  *pdmax_mm = dmaxDark;
 800cce8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800ccea:	693a      	ldr	r2, [r7, #16]
 800ccec:	601a      	str	r2, [r3, #0]
  if (dmaxDark > dmaxAmbient)
 800ccee:	693a      	ldr	r2, [r7, #16]
 800ccf0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ccf2:	429a      	cmp	r2, r3
 800ccf4:	d902      	bls.n	800ccfc <_Z17VL53L0X_calc_dmaxP13VL53L0X_Dev_tmmmmmmPm+0x214>
    *pdmax_mm = dmaxAmbient;
 800ccf6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800ccf8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800ccfa:	601a      	str	r2, [r3, #0]

  LOG_FUNCTION_END(Status);

  return Status;
 800ccfc:	f997 3043 	ldrsb.w	r3, [r7, #67]	; 0x43
}
 800cd00:	4618      	mov	r0, r3
 800cd02:	3768      	adds	r7, #104	; 0x68
 800cd04:	46bd      	mov	sp, r7
 800cd06:	bd80      	pop	{r7, pc}
 800cd08:	aaaaaaab 	.word	0xaaaaaaab
 800cd0c:	fff00000 	.word	0xfff00000
 800cd10:	10624dd3 	.word	0x10624dd3

0800cd14 <VL53L0X_calc_sigma_estimate>:

VL53L0X_Error VL53L0X_calc_sigma_estimate(
    VL53L0X_DEV Dev, VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
    FixPoint1616_t *pSigmaEstimate, uint32_t *pDmax_mm) {
 800cd14:	b580      	push	{r7, lr}
 800cd16:	b0b2      	sub	sp, #200	; 0xc8
 800cd18:	af04      	add	r7, sp, #16
 800cd1a:	60f8      	str	r0, [r7, #12]
 800cd1c:	60b9      	str	r1, [r7, #8]
 800cd1e:	607a      	str	r2, [r7, #4]
 800cd20:	603b      	str	r3, [r7, #0]
  /* Expressed in 100ths of a ns, i.e. centi-ns */
  const uint32_t cPulseEffectiveWidth_centi_ns = 800;
 800cd22:	f44f 7348 	mov.w	r3, #800	; 0x320
 800cd26:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  /* Expressed in 100ths of a ns, i.e. centi-ns */
  const uint32_t cAmbientEffectiveWidth_centi_ns = 600;
 800cd2a:	f44f 7316 	mov.w	r3, #600	; 0x258
 800cd2e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  const FixPoint1616_t cSigmaEstRef = 0x00000042; /* 0.001 */
 800cd32:	2342      	movs	r3, #66	; 0x42
 800cd34:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  const uint32_t cVcselPulseWidth_ps = 4700;      /* pico secs */
 800cd38:	f241 235c 	movw	r3, #4700	; 0x125c
 800cd3c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  const FixPoint1616_t cSigmaEstMax = 0x028F87AE;
 800cd40:	4b69      	ldr	r3, [pc, #420]	; (800cee8 <VL53L0X_calc_sigma_estimate+0x1d4>)
 800cd42:	61fb      	str	r3, [r7, #28]
  const FixPoint1616_t cSigmaEstRtnMax = 0xF000;
 800cd44:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800cd48:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  const FixPoint1616_t cAmbToSignalRatioMax =
 800cd4c:	4b67      	ldr	r3, [pc, #412]	; (800ceec <VL53L0X_calc_sigma_estimate+0x1d8>)
 800cd4e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
      0xF0000000 / cAmbientEffectiveWidth_centi_ns;
  /* Time Of Flight per mm (6.6 pico secs) */
  const FixPoint1616_t cTOF_per_mm_ps = 0x0006999A;
 800cd52:	4b67      	ldr	r3, [pc, #412]	; (800cef0 <VL53L0X_calc_sigma_estimate+0x1dc>)
 800cd54:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  const uint32_t c16BitRoundingParam = 0x00008000;
 800cd58:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800cd5c:	67fb      	str	r3, [r7, #124]	; 0x7c
  const FixPoint1616_t cMaxXTalk_kcps = 0x00320000;
 800cd5e:	f44f 1348 	mov.w	r3, #3276800	; 0x320000
 800cd62:	67bb      	str	r3, [r7, #120]	; 0x78
  const uint32_t cPllPeriod_ps = 1655;
 800cd64:	f240 6377 	movw	r3, #1655	; 0x677
 800cd68:	677b      	str	r3, [r7, #116]	; 0x74
  FixPoint1616_t xTalkCorrection;
  FixPoint1616_t ambientRate_kcps;
  FixPoint1616_t peakSignalRate_kcps;
  FixPoint1616_t xTalkCompRate_mcps;
  uint32_t xTalkCompRate_kcps;
  VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800cd6a:	2300      	movs	r3, #0
 800cd6c:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
   *	- SigmaEstEffAmbWidth
   */

  LOG_FUNCTION_START("");

  VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps,
 800cd70:	68fb      	ldr	r3, [r7, #12]
 800cd72:	6a1b      	ldr	r3, [r3, #32]
 800cd74:	617b      	str	r3, [r7, #20]
   * We work in kcps rather than mcps as this helps keep within the
   * confines of the 32 Fix1616 type.
   */

  ambientRate_kcps =
      (pRangingMeasurementData->AmbientRateRtnMegaCps * 1000) >> 16;
 800cd76:	68bb      	ldr	r3, [r7, #8]
 800cd78:	691b      	ldr	r3, [r3, #16]
 800cd7a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800cd7e:	fb02 f303 	mul.w	r3, r2, r3
  ambientRate_kcps =
 800cd82:	0c1b      	lsrs	r3, r3, #16
 800cd84:	673b      	str	r3, [r7, #112]	; 0x70

  correctedSignalRate_mcps = pRangingMeasurementData->SignalRateRtnMegaCps;
 800cd86:	68bb      	ldr	r3, [r7, #8]
 800cd88:	68db      	ldr	r3, [r3, #12]
 800cd8a:	66fb      	str	r3, [r7, #108]	; 0x6c

  Status = VL53L0X_get_total_signal_rate(Dev, pRangingMeasurementData,
 800cd8c:	f107 0310 	add.w	r3, r7, #16
 800cd90:	461a      	mov	r2, r3
 800cd92:	68b9      	ldr	r1, [r7, #8]
 800cd94:	68f8      	ldr	r0, [r7, #12]
 800cd96:	f7ff fe82 	bl	800ca9e <VL53L0X_get_total_signal_rate>
 800cd9a:	4603      	mov	r3, r0
 800cd9c:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
                                         &totalSignalRate_mcps);
  Status = VL53L0X_get_total_xtalk_rate(Dev, pRangingMeasurementData,
 800cda0:	f107 0314 	add.w	r3, r7, #20
 800cda4:	461a      	mov	r2, r3
 800cda6:	68b9      	ldr	r1, [r7, #8]
 800cda8:	68f8      	ldr	r0, [r7, #12]
 800cdaa:	f7ff fe49 	bl	800ca40 <VL53L0X_get_total_xtalk_rate>
 800cdae:	4603      	mov	r3, r0
 800cdb0:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
                                        &xTalkCompRate_mcps);

  /* Signal rate measurement provided by device is the
   * peak signal rate, not average.
   */
  peakSignalRate_kcps = (totalSignalRate_mcps * 1000);
 800cdb4:	693b      	ldr	r3, [r7, #16]
 800cdb6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800cdba:	fb02 f303 	mul.w	r3, r2, r3
 800cdbe:	66bb      	str	r3, [r7, #104]	; 0x68
  peakSignalRate_kcps = (peakSignalRate_kcps + 0x8000) >> 16;
 800cdc0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800cdc2:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800cdc6:	0c1b      	lsrs	r3, r3, #16
 800cdc8:	66bb      	str	r3, [r7, #104]	; 0x68

  xTalkCompRate_kcps = xTalkCompRate_mcps * 1000;
 800cdca:	697b      	ldr	r3, [r7, #20]
 800cdcc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800cdd0:	fb02 f303 	mul.w	r3, r2, r3
 800cdd4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (xTalkCompRate_kcps > cMaxXTalk_kcps)
 800cdd8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800cddc:	f5b3 1f48 	cmp.w	r3, #3276800	; 0x320000
 800cde0:	d903      	bls.n	800cdea <VL53L0X_calc_sigma_estimate+0xd6>
    xTalkCompRate_kcps = cMaxXTalk_kcps;
 800cde2:	f44f 1348 	mov.w	r3, #3276800	; 0x320000
 800cde6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (Status == VL53L0X_ERROR_NONE) {
 800cdea:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
 800cdee:	2b00      	cmp	r3, #0
 800cdf0:	d165      	bne.n	800cebe <VL53L0X_calc_sigma_estimate+0x1aa>

    /* Calculate final range macro periods */
    finalRangeTimeoutMicroSecs =
 800cdf2:	68fb      	ldr	r3, [r7, #12]
 800cdf4:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800cdf8:	667b      	str	r3, [r7, #100]	; 0x64
        VL53L0X_GETDEVICESPECIFICPARAMETER(Dev, FinalRangeTimeoutMicroSecs);

    finalRangeVcselPCLKS =
 800cdfa:	68fb      	ldr	r3, [r7, #12]
 800cdfc:	f893 30e0 	ldrb.w	r3, [r3, #224]	; 0xe0
 800ce00:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
        VL53L0X_GETDEVICESPECIFICPARAMETER(Dev, FinalRangeVcselPulsePeriod);

    finalRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 800ce04:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 800ce08:	461a      	mov	r2, r3
 800ce0a:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800ce0c:	68f8      	ldr	r0, [r7, #12]
 800ce0e:	f7ff fcff 	bl	800c810 <VL53L0X_calc_timeout_mclks>
 800ce12:	65f8      	str	r0, [r7, #92]	; 0x5c
        Dev, finalRangeTimeoutMicroSecs, finalRangeVcselPCLKS);

    /* Calculate pre-range macro periods */
    preRangeTimeoutMicroSecs =
 800ce14:	68fb      	ldr	r3, [r7, #12]
 800ce16:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800ce1a:	65bb      	str	r3, [r7, #88]	; 0x58
        VL53L0X_GETDEVICESPECIFICPARAMETER(Dev, PreRangeTimeoutMicroSecs);

    preRangeVcselPCLKS =
 800ce1c:	68fb      	ldr	r3, [r7, #12]
 800ce1e:	f893 30e8 	ldrb.w	r3, [r3, #232]	; 0xe8
 800ce22:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        VL53L0X_GETDEVICESPECIFICPARAMETER(Dev, PreRangeVcselPulsePeriod);

    preRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 800ce26:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ce2a:	461a      	mov	r2, r3
 800ce2c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800ce2e:	68f8      	ldr	r0, [r7, #12]
 800ce30:	f7ff fcee 	bl	800c810 <VL53L0X_calc_timeout_mclks>
 800ce34:	6538      	str	r0, [r7, #80]	; 0x50
        Dev, preRangeTimeoutMicroSecs, preRangeVcselPCLKS);

    vcselWidth = 3;
 800ce36:	2303      	movs	r3, #3
 800ce38:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    if (finalRangeVcselPCLKS == 8)
 800ce3c:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 800ce40:	2b08      	cmp	r3, #8
 800ce42:	d102      	bne.n	800ce4a <VL53L0X_calc_sigma_estimate+0x136>
      vcselWidth = 2;
 800ce44:	2302      	movs	r3, #2
 800ce46:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

    peakVcselDuration_us =
        vcselWidth * 2048 * (preRangeMacroPCLKS + finalRangeMacroPCLKS);
 800ce4a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ce4c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ce4e:	4413      	add	r3, r2
 800ce50:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800ce54:	fb02 f303 	mul.w	r3, r2, r3
    peakVcselDuration_us =
 800ce58:	02db      	lsls	r3, r3, #11
 800ce5a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    peakVcselDuration_us = (peakVcselDuration_us + 500) / 1000;
 800ce5e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800ce62:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800ce66:	4a23      	ldr	r2, [pc, #140]	; (800cef4 <VL53L0X_calc_sigma_estimate+0x1e0>)
 800ce68:	fba2 2303 	umull	r2, r3, r2, r3
 800ce6c:	099b      	lsrs	r3, r3, #6
 800ce6e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    peakVcselDuration_us *= cPllPeriod_ps;
 800ce72:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800ce76:	f240 6277 	movw	r2, #1655	; 0x677
 800ce7a:	fb02 f303 	mul.w	r3, r2, r3
 800ce7e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    peakVcselDuration_us = (peakVcselDuration_us + 500) / 1000;
 800ce82:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800ce86:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800ce8a:	4a1a      	ldr	r2, [pc, #104]	; (800cef4 <VL53L0X_calc_sigma_estimate+0x1e0>)
 800ce8c:	fba2 2303 	umull	r2, r3, r2, r3
 800ce90:	099b      	lsrs	r3, r3, #6
 800ce92:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

    /* Fix1616 >> 8 = Fix2408 */
    totalSignalRate_mcps = (totalSignalRate_mcps + 0x80) >> 8;
 800ce96:	693b      	ldr	r3, [r7, #16]
 800ce98:	3380      	adds	r3, #128	; 0x80
 800ce9a:	0a1b      	lsrs	r3, r3, #8
 800ce9c:	613b      	str	r3, [r7, #16]

    /* Fix2408 * uint32 = Fix2408 */
    vcselTotalEventsRtn = totalSignalRate_mcps * peakVcselDuration_us;
 800ce9e:	693a      	ldr	r2, [r7, #16]
 800cea0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800cea4:	fb02 f303 	mul.w	r3, r2, r3
 800cea8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

    /* Fix2408 >> 8 = uint32 */
    vcselTotalEventsRtn = (vcselTotalEventsRtn + 0x80) >> 8;
 800ceac:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800ceb0:	3380      	adds	r3, #128	; 0x80
 800ceb2:	0a1b      	lsrs	r3, r3, #8
 800ceb4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

    /* Fix2408 << 8 = Fix1616 = */
    totalSignalRate_mcps <<= 8;
 800ceb8:	693b      	ldr	r3, [r7, #16]
 800ceba:	021b      	lsls	r3, r3, #8
 800cebc:	613b      	str	r3, [r7, #16]
  }

  if (Status != VL53L0X_ERROR_NONE) {
 800cebe:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
 800cec2:	2b00      	cmp	r3, #0
 800cec4:	d002      	beq.n	800cecc <VL53L0X_calc_sigma_estimate+0x1b8>
    LOG_FUNCTION_END(Status);
    return Status;
 800cec6:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
 800ceca:	e12e      	b.n	800d12a <VL53L0X_calc_sigma_estimate+0x416>
  }

  if (peakSignalRate_kcps == 0) {
 800cecc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800cece:	2b00      	cmp	r3, #0
 800ced0:	d112      	bne.n	800cef8 <VL53L0X_calc_sigma_estimate+0x1e4>
    *pSigmaEstimate = cSigmaEstMax;
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	4a04      	ldr	r2, [pc, #16]	; (800cee8 <VL53L0X_calc_sigma_estimate+0x1d4>)
 800ced6:	601a      	str	r2, [r3, #0]
    PALDevDataSet(Dev, SigmaEstimate, cSigmaEstMax);
 800ced8:	68fb      	ldr	r3, [r7, #12]
 800ceda:	4a03      	ldr	r2, [pc, #12]	; (800cee8 <VL53L0X_calc_sigma_estimate+0x1d4>)
 800cedc:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
    *pDmax_mm = 0;
 800cee0:	683b      	ldr	r3, [r7, #0]
 800cee2:	2200      	movs	r2, #0
 800cee4:	601a      	str	r2, [r3, #0]
 800cee6:	e11e      	b.n	800d126 <VL53L0X_calc_sigma_estimate+0x412>
 800cee8:	028f87ae 	.word	0x028f87ae
 800ceec:	00666666 	.word	0x00666666
 800cef0:	0006999a 	.word	0x0006999a
 800cef4:	10624dd3 	.word	0x10624dd3
  } else {
    if (vcselTotalEventsRtn < 1)
 800cef8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800cefc:	2b00      	cmp	r3, #0
 800cefe:	d102      	bne.n	800cf06 <VL53L0X_calc_sigma_estimate+0x1f2>
      vcselTotalEventsRtn = 1;
 800cf00:	2301      	movs	r3, #1
 800cf02:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
     * deltaT_ps represents the time of flight in pico secs for the
     * current range measurement, using the "TOF per mm" constant
     * (in ps).
     */

    sigmaEstimateP1 = cPulseEffectiveWidth_centi_ns;
 800cf06:	f44f 7348 	mov.w	r3, #800	; 0x320
 800cf0a:	64fb      	str	r3, [r7, #76]	; 0x4c

    /* ((FixPoint1616 << 16)* uint32)/uint32 = FixPoint1616 */
    sigmaEstimateP2 = (ambientRate_kcps << 16) / peakSignalRate_kcps;
 800cf0c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800cf0e:	041a      	lsls	r2, r3, #16
 800cf10:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800cf12:	fbb2 f3f3 	udiv	r3, r2, r3
 800cf16:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    if (sigmaEstimateP2 > cAmbToSignalRatioMax) {
 800cf1a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800cf1e:	4a85      	ldr	r2, [pc, #532]	; (800d134 <VL53L0X_calc_sigma_estimate+0x420>)
 800cf20:	4293      	cmp	r3, r2
 800cf22:	d902      	bls.n	800cf2a <VL53L0X_calc_sigma_estimate+0x216>
      /* Clip to prevent overflow. Will ensure safe
       * max result. */
      sigmaEstimateP2 = cAmbToSignalRatioMax;
 800cf24:	4b83      	ldr	r3, [pc, #524]	; (800d134 <VL53L0X_calc_sigma_estimate+0x420>)
 800cf26:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    }
    sigmaEstimateP2 *= cAmbientEffectiveWidth_centi_ns;
 800cf2a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800cf2e:	f44f 7216 	mov.w	r2, #600	; 0x258
 800cf32:	fb02 f303 	mul.w	r3, r2, r3
 800cf36:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

    sigmaEstimateP3 = 2 * VL53L0X_isqrt(vcselTotalEventsRtn * 12);
 800cf3a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800cf3e:	4613      	mov	r3, r2
 800cf40:	005b      	lsls	r3, r3, #1
 800cf42:	4413      	add	r3, r2
 800cf44:	009b      	lsls	r3, r3, #2
 800cf46:	4618      	mov	r0, r3
 800cf48:	f7ff fc10 	bl	800c76c <VL53L0X_isqrt>
 800cf4c:	4603      	mov	r3, r0
 800cf4e:	005b      	lsls	r3, r3, #1
 800cf50:	64bb      	str	r3, [r7, #72]	; 0x48

    /* uint32 * FixPoint1616 = FixPoint1616 */
    deltaT_ps = pRangingMeasurementData->RangeMilliMeter * cTOF_per_mm_ps;
 800cf52:	68bb      	ldr	r3, [r7, #8]
 800cf54:	891b      	ldrh	r3, [r3, #8]
 800cf56:	461a      	mov	r2, r3
 800cf58:	4b77      	ldr	r3, [pc, #476]	; (800d138 <VL53L0X_calc_sigma_estimate+0x424>)
 800cf5a:	fb03 f302 	mul.w	r3, r3, r2
 800cf5e:	647b      	str	r3, [r7, #68]	; 0x44
     * Divide result by 1000 to convert to mcps.
     * 500 is added to ensure rounding when integer division
     * truncates.
     */
    diff1_mcps =
        (((peakSignalRate_kcps << 16) - xTalkCompRate_kcps) + 500) / 1000;
 800cf60:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800cf62:	041a      	lsls	r2, r3, #16
 800cf64:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800cf68:	1ad3      	subs	r3, r2, r3
 800cf6a:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
    diff1_mcps =
 800cf6e:	4a73      	ldr	r2, [pc, #460]	; (800d13c <VL53L0X_calc_sigma_estimate+0x428>)
 800cf70:	fba2 2303 	umull	r2, r3, r2, r3
 800cf74:	099b      	lsrs	r3, r3, #6
 800cf76:	643b      	str	r3, [r7, #64]	; 0x40

    /* vcselRate + xtalkCompRate */
    diff2_mcps =
        (((peakSignalRate_kcps << 16) + xTalkCompRate_kcps) + 500) / 1000;
 800cf78:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800cf7a:	041a      	lsls	r2, r3, #16
 800cf7c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800cf80:	4413      	add	r3, r2
 800cf82:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
    diff2_mcps =
 800cf86:	4a6d      	ldr	r2, [pc, #436]	; (800d13c <VL53L0X_calc_sigma_estimate+0x428>)
 800cf88:	fba2 2303 	umull	r2, r3, r2, r3
 800cf8c:	099b      	lsrs	r3, r3, #6
 800cf8e:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Shift by 8 bits to increase resolution prior to the
     * division */
    diff1_mcps <<= 8;
 800cf90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cf92:	021b      	lsls	r3, r3, #8
 800cf94:	643b      	str	r3, [r7, #64]	; 0x40

    /* FixPoint0824/FixPoint1616 = FixPoint2408 */
    xTalkCorrection = abs((double) (diff1_mcps / diff2_mcps));
 800cf96:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800cf98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cf9a:	fbb2 f3f3 	udiv	r3, r2, r3
 800cf9e:	ee07 3a90 	vmov	s15, r3
 800cfa2:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800cfa6:	eeb0 0b47 	vmov.f64	d0, d7
 800cfaa:	f7ff fba0 	bl	800c6ee <_ZSt3absd>
 800cfae:	eeb0 7b40 	vmov.f64	d7, d0
 800cfb2:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800cfb6:	ee17 3a90 	vmov	r3, s15
 800cfba:	63bb      	str	r3, [r7, #56]	; 0x38

    /* FixPoint2408 << 8 = FixPoint1616 */
    xTalkCorrection <<= 8;
 800cfbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfbe:	021b      	lsls	r3, r3, #8
 800cfc0:	63bb      	str	r3, [r7, #56]	; 0x38

    /* FixPoint1616/uint32 = FixPoint1616 */
    pwMult = deltaT_ps / cVcselPulseWidth_ps; /* smaller than 1.0f */
 800cfc2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cfc4:	4a5e      	ldr	r2, [pc, #376]	; (800d140 <VL53L0X_calc_sigma_estimate+0x42c>)
 800cfc6:	fba2 2303 	umull	r2, r3, r2, r3
 800cfca:	0a9b      	lsrs	r3, r3, #10
 800cfcc:	637b      	str	r3, [r7, #52]	; 0x34
    /*
     * FixPoint1616 * FixPoint1616 = FixPoint3232, however both
     * values are small enough such that32 bits will not be
     * exceeded.
     */
    pwMult *= ((1 << 16) - xTalkCorrection);
 800cfce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfd0:	f5c3 3280 	rsb	r2, r3, #65536	; 0x10000
 800cfd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cfd6:	fb02 f303 	mul.w	r3, r2, r3
 800cfda:	637b      	str	r3, [r7, #52]	; 0x34

    /* (FixPoint3232 >> 16) = FixPoint1616 */
    pwMult = (pwMult + c16BitRoundingParam) >> 16;
 800cfdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cfde:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800cfe2:	0c1b      	lsrs	r3, r3, #16
 800cfe4:	637b      	str	r3, [r7, #52]	; 0x34

    /* FixPoint1616 + FixPoint1616 = FixPoint1616 */
    pwMult += (1 << 16);
 800cfe6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cfe8:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800cfec:	637b      	str	r3, [r7, #52]	; 0x34
    /*
     * At this point the value will be 1.xx, therefore if we square
     * the value this will exceed 32 bits. To address this perform
     * a single shift to the right before the multiplication.
     */
    pwMult >>= 1;
 800cfee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cff0:	085b      	lsrs	r3, r3, #1
 800cff2:	637b      	str	r3, [r7, #52]	; 0x34
    /* FixPoint1715 * FixPoint1715 = FixPoint3430 */
    pwMult = pwMult * pwMult;
 800cff4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cff6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cff8:	fb02 f303 	mul.w	r3, r2, r3
 800cffc:	637b      	str	r3, [r7, #52]	; 0x34

    /* (FixPoint3430 >> 14) = Fix1616 */
    pwMult >>= 14;
 800cffe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d000:	0b9b      	lsrs	r3, r3, #14
 800d002:	637b      	str	r3, [r7, #52]	; 0x34

    /* FixPoint1616 * uint32 = FixPoint1616 */
    sqr1 = pwMult * sigmaEstimateP1;
 800d004:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d006:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d008:	fb02 f303 	mul.w	r3, r2, r3
 800d00c:	633b      	str	r3, [r7, #48]	; 0x30

    /* (FixPoint1616 >> 16) = FixPoint3200 */
    sqr1 = (sqr1 + 0x8000) >> 16;
 800d00e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d010:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800d014:	0c1b      	lsrs	r3, r3, #16
 800d016:	633b      	str	r3, [r7, #48]	; 0x30

    /* FixPoint3200 * FixPoint3200 = FixPoint6400 */
    sqr1 *= sqr1;
 800d018:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d01a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d01c:	fb02 f303 	mul.w	r3, r2, r3
 800d020:	633b      	str	r3, [r7, #48]	; 0x30

    sqr2 = sigmaEstimateP2;
 800d022:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800d026:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* (FixPoint1616 >> 16) = FixPoint3200 */
    sqr2 = (sqr2 + 0x8000) >> 16;
 800d028:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d02a:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800d02e:	0c1b      	lsrs	r3, r3, #16
 800d030:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* FixPoint3200 * FixPoint3200 = FixPoint6400 */
    sqr2 *= sqr2;
 800d032:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d034:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d036:	fb02 f303 	mul.w	r3, r2, r3
 800d03a:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* FixPoint64000 + FixPoint6400 = FixPoint6400 */
    sqrSum = sqr1 + sqr2;
 800d03c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d03e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d040:	4413      	add	r3, r2
 800d042:	62bb      	str	r3, [r7, #40]	; 0x28

    /* SQRT(FixPoin6400) = FixPoint3200 */
    sqrtResult_centi_ns = VL53L0X_isqrt(sqrSum);
 800d044:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d046:	f7ff fb91 	bl	800c76c <VL53L0X_isqrt>
 800d04a:	6278      	str	r0, [r7, #36]	; 0x24

    /* (FixPoint3200 << 16) = FixPoint1616 */
    sqrtResult_centi_ns <<= 16;
 800d04c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d04e:	041b      	lsls	r3, r3, #16
 800d050:	627b      	str	r3, [r7, #36]	; 0x24
    /*
     * Note that the Speed Of Light is expressed in um per 1E-10
     * seconds (2997) Therefore to get mm/ns we have to divide by
     * 10000
     */
    sigmaEstRtn = (((sqrtResult_centi_ns + 50) / 100) / sigmaEstimateP3);
 800d052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d054:	3332      	adds	r3, #50	; 0x32
 800d056:	4a3b      	ldr	r2, [pc, #236]	; (800d144 <VL53L0X_calc_sigma_estimate+0x430>)
 800d058:	fba2 2303 	umull	r2, r3, r2, r3
 800d05c:	095a      	lsrs	r2, r3, #5
 800d05e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d060:	fbb2 f3f3 	udiv	r3, r2, r3
 800d064:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    sigmaEstRtn *= VL53L0X_SPEED_OF_LIGHT_IN_AIR;
 800d068:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800d06c:	f640 32b5 	movw	r2, #2997	; 0xbb5
 800d070:	fb02 f303 	mul.w	r3, r2, r3
 800d074:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

    /* Add 5000 before dividing by 10000 to ensure rounding. */
    sigmaEstRtn += 5000;
 800d078:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800d07c:	f241 3388 	movw	r3, #5000	; 0x1388
 800d080:	4413      	add	r3, r2
 800d082:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    sigmaEstRtn /= 10000;
 800d086:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800d08a:	4a2f      	ldr	r2, [pc, #188]	; (800d148 <VL53L0X_calc_sigma_estimate+0x434>)
 800d08c:	fba2 2303 	umull	r2, r3, r2, r3
 800d090:	0b5b      	lsrs	r3, r3, #13
 800d092:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

    if (sigmaEstRtn > cSigmaEstRtnMax) {
 800d096:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800d09a:	f5b3 4f70 	cmp.w	r3, #61440	; 0xf000
 800d09e:	d903      	bls.n	800d0a8 <VL53L0X_calc_sigma_estimate+0x394>
      /* Clip to prevent overflow. Will ensure safe
       * max result. */
      sigmaEstRtn = cSigmaEstRtnMax;
 800d0a0:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800d0a4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    }

    /* FixPoint1616 * FixPoint1616 = FixPoint3232 */
    sqr1 = sigmaEstRtn * sigmaEstRtn;
 800d0a8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800d0ac:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800d0b0:	fb02 f303 	mul.w	r3, r2, r3
 800d0b4:	633b      	str	r3, [r7, #48]	; 0x30
    /* FixPoint1616 * FixPoint1616 = FixPoint3232 */
    sqr2 = cSigmaEstRef * cSigmaEstRef;
 800d0b6:	f241 1304 	movw	r3, #4356	; 0x1104
 800d0ba:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* sqrt(FixPoint3232) = FixPoint1616 */
    sqrtResult = VL53L0X_isqrt((sqr1 + sqr2));
 800d0bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d0be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0c0:	4413      	add	r3, r2
 800d0c2:	4618      	mov	r0, r3
 800d0c4:	f7ff fb52 	bl	800c76c <VL53L0X_isqrt>
 800d0c8:	6238      	str	r0, [r7, #32]
     * Note that the Shift by 4 bits increases resolution prior to
     * the sqrt, therefore the result must be shifted by 2 bits to
     * the right to revert back to the FixPoint1616 format.
     */

    sigmaEstimate = 1000 * sqrtResult;
 800d0ca:	6a3b      	ldr	r3, [r7, #32]
 800d0cc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800d0d0:	fb02 f303 	mul.w	r3, r2, r3
 800d0d4:	61bb      	str	r3, [r7, #24]

    if ((peakSignalRate_kcps < 1) || (vcselTotalEventsRtn < 1) ||
 800d0d6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d0d8:	2b00      	cmp	r3, #0
 800d0da:	d007      	beq.n	800d0ec <VL53L0X_calc_sigma_estimate+0x3d8>
 800d0dc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800d0e0:	2b00      	cmp	r3, #0
 800d0e2:	d003      	beq.n	800d0ec <VL53L0X_calc_sigma_estimate+0x3d8>
        (sigmaEstimate > cSigmaEstMax)) {
 800d0e4:	69bb      	ldr	r3, [r7, #24]
    if ((peakSignalRate_kcps < 1) || (vcselTotalEventsRtn < 1) ||
 800d0e6:	4a19      	ldr	r2, [pc, #100]	; (800d14c <VL53L0X_calc_sigma_estimate+0x438>)
 800d0e8:	4293      	cmp	r3, r2
 800d0ea:	d901      	bls.n	800d0f0 <VL53L0X_calc_sigma_estimate+0x3dc>
      sigmaEstimate = cSigmaEstMax;
 800d0ec:	4b17      	ldr	r3, [pc, #92]	; (800d14c <VL53L0X_calc_sigma_estimate+0x438>)
 800d0ee:	61bb      	str	r3, [r7, #24]
    }

    *pSigmaEstimate = (uint32_t)(sigmaEstimate);
 800d0f0:	69ba      	ldr	r2, [r7, #24]
 800d0f2:	687b      	ldr	r3, [r7, #4]
 800d0f4:	601a      	str	r2, [r3, #0]
    PALDevDataSet(Dev, SigmaEstimate, *pSigmaEstimate);
 800d0f6:	687b      	ldr	r3, [r7, #4]
 800d0f8:	681a      	ldr	r2, [r3, #0]
 800d0fa:	68fb      	ldr	r3, [r7, #12]
 800d0fc:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
    Status = VL53L0X_calc_dmax(
 800d100:	6939      	ldr	r1, [r7, #16]
 800d102:	683b      	ldr	r3, [r7, #0]
 800d104:	9303      	str	r3, [sp, #12]
 800d106:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800d10a:	9302      	str	r3, [sp, #8]
 800d10c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800d110:	9301      	str	r3, [sp, #4]
 800d112:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d114:	9300      	str	r3, [sp, #0]
 800d116:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d118:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800d11a:	68f8      	ldr	r0, [r7, #12]
 800d11c:	f7ff fce4 	bl	800cae8 <_Z17VL53L0X_calc_dmaxP13VL53L0X_Dev_tmmmmmmPm>
 800d120:	4603      	mov	r3, r0
 800d122:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
        Dev, totalSignalRate_mcps, correctedSignalRate_mcps, pwMult,
        sigmaEstimateP1, sigmaEstimateP2, peakVcselDuration_us, pDmax_mm);
  }

  LOG_FUNCTION_END(Status);
  return Status;
 800d126:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
}
 800d12a:	4618      	mov	r0, r3
 800d12c:	37b8      	adds	r7, #184	; 0xb8
 800d12e:	46bd      	mov	sp, r7
 800d130:	bd80      	pop	{r7, pc}
 800d132:	bf00      	nop
 800d134:	00666666 	.word	0x00666666
 800d138:	0006999a 	.word	0x0006999a
 800d13c:	10624dd3 	.word	0x10624dd3
 800d140:	37c67b51 	.word	0x37c67b51
 800d144:	51eb851f 	.word	0x51eb851f
 800d148:	d1b71759 	.word	0xd1b71759
 800d14c:	028f87ae 	.word	0x028f87ae

0800d150 <VL53L0X_get_pal_range_status>:

VL53L0X_Error VL53L0X_get_pal_range_status(
    VL53L0X_DEV Dev, uint8_t DeviceRangeStatus, FixPoint1616_t SignalRate,
    uint16_t EffectiveSpadRtnCount,
    VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
    uint8_t *pPalRangeStatus) {
 800d150:	b580      	push	{r7, lr}
 800d152:	b090      	sub	sp, #64	; 0x40
 800d154:	af00      	add	r7, sp, #0
 800d156:	60f8      	str	r0, [r7, #12]
 800d158:	607a      	str	r2, [r7, #4]
 800d15a:	461a      	mov	r2, r3
 800d15c:	460b      	mov	r3, r1
 800d15e:	72fb      	strb	r3, [r7, #11]
 800d160:	4613      	mov	r3, r2
 800d162:	813b      	strh	r3, [r7, #8]
  VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800d164:	2300      	movs	r3, #0
 800d166:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint8_t NoneFlag;
  uint8_t SigmaLimitflag = 0;
 800d16a:	2300      	movs	r3, #0
 800d16c:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  uint8_t SignalRefClipflag = 0;
 800d170:	2300      	movs	r3, #0
 800d172:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  uint8_t RangeIgnoreThresholdflag = 0;
 800d176:	2300      	movs	r3, #0
 800d178:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  uint8_t SigmaLimitCheckEnable = 0;
 800d17c:	2300      	movs	r3, #0
 800d17e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  uint8_t SignalRateFinalRangeLimitCheckEnable = 0;
 800d182:	2300      	movs	r3, #0
 800d184:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  uint8_t SignalRefClipLimitCheckEnable = 0;
 800d188:	2300      	movs	r3, #0
 800d18a:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  uint8_t RangeIgnoreThresholdLimitCheckEnable = 0;
 800d18e:	2300      	movs	r3, #0
 800d190:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  FixPoint1616_t SigmaEstimate;
  FixPoint1616_t SigmaLimitValue;
  FixPoint1616_t SignalRefClipValue;
  FixPoint1616_t RangeIgnoreThresholdValue;
  FixPoint1616_t SignalRatePerSpad;
  uint8_t DeviceRangeStatusInternal = 0;
 800d194:	2300      	movs	r3, #0
 800d196:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  uint16_t tmpWord = 0;
 800d19a:	2300      	movs	r3, #0
 800d19c:	837b      	strh	r3, [r7, #26]
  uint8_t Temp8;
  uint32_t Dmax_mm = 0;
 800d19e:	2300      	movs	r3, #0
 800d1a0:	617b      	str	r3, [r7, #20]
   * the value 11 in the DeviceRangeStatus.
   * In addition, the SigmaEstimator is not included in the VL53L0X
   * DeviceRangeStatus, this will be added in the PalRangeStatus.
   */

  DeviceRangeStatusInternal = ((DeviceRangeStatus & 0x78) >> 3);
 800d1a2:	7afb      	ldrb	r3, [r7, #11]
 800d1a4:	10db      	asrs	r3, r3, #3
 800d1a6:	b2db      	uxtb	r3, r3
 800d1a8:	f003 030f 	and.w	r3, r3, #15
 800d1ac:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  if (DeviceRangeStatusInternal == 0 || DeviceRangeStatusInternal == 5 ||
 800d1b0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800d1b4:	2b00      	cmp	r3, #0
 800d1b6:	d017      	beq.n	800d1e8 <VL53L0X_get_pal_range_status+0x98>
 800d1b8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800d1bc:	2b05      	cmp	r3, #5
 800d1be:	d013      	beq.n	800d1e8 <VL53L0X_get_pal_range_status+0x98>
 800d1c0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800d1c4:	2b07      	cmp	r3, #7
 800d1c6:	d00f      	beq.n	800d1e8 <VL53L0X_get_pal_range_status+0x98>
      DeviceRangeStatusInternal == 7 || DeviceRangeStatusInternal == 12 ||
 800d1c8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800d1cc:	2b0c      	cmp	r3, #12
 800d1ce:	d00b      	beq.n	800d1e8 <VL53L0X_get_pal_range_status+0x98>
 800d1d0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800d1d4:	2b0d      	cmp	r3, #13
 800d1d6:	d007      	beq.n	800d1e8 <VL53L0X_get_pal_range_status+0x98>
      DeviceRangeStatusInternal == 13 || DeviceRangeStatusInternal == 14 ||
 800d1d8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800d1dc:	2b0e      	cmp	r3, #14
 800d1de:	d003      	beq.n	800d1e8 <VL53L0X_get_pal_range_status+0x98>
 800d1e0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800d1e4:	2b0f      	cmp	r3, #15
 800d1e6:	d103      	bne.n	800d1f0 <VL53L0X_get_pal_range_status+0xa0>
      DeviceRangeStatusInternal == 15) {
    NoneFlag = 1;
 800d1e8:	2301      	movs	r3, #1
 800d1ea:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 800d1ee:	e002      	b.n	800d1f6 <VL53L0X_get_pal_range_status+0xa6>
  } else {
    NoneFlag = 0;
 800d1f0:	2300      	movs	r3, #0
 800d1f2:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  }

  /* LastSignalRefMcps */
  if (Status == VL53L0X_ERROR_NONE)
 800d1f6:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800d1fa:	2b00      	cmp	r3, #0
 800d1fc:	d107      	bne.n	800d20e <VL53L0X_get_pal_range_status+0xbe>
    Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800d1fe:	2201      	movs	r2, #1
 800d200:	21ff      	movs	r1, #255	; 0xff
 800d202:	68f8      	ldr	r0, [r7, #12]
 800d204:	f000 faed 	bl	800d7e2 <VL53L0X_WrByte>
 800d208:	4603      	mov	r3, r0
 800d20a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

  if (Status == VL53L0X_ERROR_NONE)
 800d20e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800d212:	2b00      	cmp	r3, #0
 800d214:	d109      	bne.n	800d22a <VL53L0X_get_pal_range_status+0xda>
    Status =
 800d216:	f107 031a 	add.w	r3, r7, #26
 800d21a:	461a      	mov	r2, r3
 800d21c:	21b6      	movs	r1, #182	; 0xb6
 800d21e:	68f8      	ldr	r0, [r7, #12]
 800d220:	f000 fb22 	bl	800d868 <VL53L0X_RdWord>
 800d224:	4603      	mov	r3, r0
 800d226:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
        VL53L0X_RdWord(Dev, VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF, &tmpWord);

  LastSignalRefMcps = VL53L0X_FIXPOINT97TOFIXPOINT1616(tmpWord);
 800d22a:	8b7b      	ldrh	r3, [r7, #26]
 800d22c:	025b      	lsls	r3, r3, #9
 800d22e:	613b      	str	r3, [r7, #16]

  if (Status == VL53L0X_ERROR_NONE)
 800d230:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800d234:	2b00      	cmp	r3, #0
 800d236:	d107      	bne.n	800d248 <VL53L0X_get_pal_range_status+0xf8>
    Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800d238:	2200      	movs	r2, #0
 800d23a:	21ff      	movs	r1, #255	; 0xff
 800d23c:	68f8      	ldr	r0, [r7, #12]
 800d23e:	f000 fad0 	bl	800d7e2 <VL53L0X_WrByte>
 800d242:	4603      	mov	r3, r0
 800d244:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

  PALDevDataSet(Dev, LastSignalRefMcps, LastSignalRefMcps);
 800d248:	693a      	ldr	r2, [r7, #16]
 800d24a:	68fb      	ldr	r3, [r7, #12]
 800d24c:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148

  /*
   * Check if Sigma limit is enabled, if yes then do comparison with limit
   * value and put the result back into pPalRangeStatus.
   */
  if (Status == VL53L0X_ERROR_NONE)
 800d250:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800d254:	2b00      	cmp	r3, #0
 800d256:	d109      	bne.n	800d26c <VL53L0X_get_pal_range_status+0x11c>
    Status = VL53L0X_GetLimitCheckEnable(
 800d258:	f107 0332 	add.w	r3, r7, #50	; 0x32
 800d25c:	461a      	mov	r2, r3
 800d25e:	2100      	movs	r1, #0
 800d260:	68f8      	ldr	r0, [r7, #12]
 800d262:	f7fe fda3 	bl	800bdac <VL53L0X_GetLimitCheckEnable>
 800d266:	4603      	mov	r3, r0
 800d268:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
        Dev, VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, &SigmaLimitCheckEnable);

  if ((SigmaLimitCheckEnable != 0) && (Status == VL53L0X_ERROR_NONE)) {
 800d26c:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800d270:	2b00      	cmp	r3, #0
 800d272:	d02e      	beq.n	800d2d2 <VL53L0X_get_pal_range_status+0x182>
 800d274:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800d278:	2b00      	cmp	r3, #0
 800d27a:	d12a      	bne.n	800d2d2 <VL53L0X_get_pal_range_status+0x182>
    /*
     * compute the Sigma and check with limit
     */
    Status = VL53L0X_calc_sigma_estimate(Dev, pRangingMeasurementData,
 800d27c:	f107 0314 	add.w	r3, r7, #20
 800d280:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800d284:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800d286:	68f8      	ldr	r0, [r7, #12]
 800d288:	f7ff fd44 	bl	800cd14 <VL53L0X_calc_sigma_estimate>
 800d28c:	4603      	mov	r3, r0
 800d28e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
                                         &SigmaEstimate, &Dmax_mm);
    if (Status == VL53L0X_ERROR_NONE)
 800d292:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800d296:	2b00      	cmp	r3, #0
 800d298:	d103      	bne.n	800d2a2 <VL53L0X_get_pal_range_status+0x152>
      pRangingMeasurementData->RangeDMaxMilliMeter = Dmax_mm;
 800d29a:	697b      	ldr	r3, [r7, #20]
 800d29c:	b29a      	uxth	r2, r3
 800d29e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d2a0:	815a      	strh	r2, [r3, #10]

    if (Status == VL53L0X_ERROR_NONE) {
 800d2a2:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800d2a6:	2b00      	cmp	r3, #0
 800d2a8:	d113      	bne.n	800d2d2 <VL53L0X_get_pal_range_status+0x182>
      Status = VL53L0X_GetLimitCheckValue(
 800d2aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d2ae:	461a      	mov	r2, r3
 800d2b0:	2100      	movs	r1, #0
 800d2b2:	68f8      	ldr	r0, [r7, #12]
 800d2b4:	f7fe fd9e 	bl	800bdf4 <VL53L0X_GetLimitCheckValue>
 800d2b8:	4603      	mov	r3, r0
 800d2ba:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
          Dev, VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, &SigmaLimitValue);

      if ((SigmaLimitValue > 0) && (SigmaEstimate > SigmaLimitValue))
 800d2be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2c0:	2b00      	cmp	r3, #0
 800d2c2:	d006      	beq.n	800d2d2 <VL53L0X_get_pal_range_status+0x182>
 800d2c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d2c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2c8:	429a      	cmp	r2, r3
 800d2ca:	d902      	bls.n	800d2d2 <VL53L0X_get_pal_range_status+0x182>
        /* Limit Fail */
        SigmaLimitflag = 1;
 800d2cc:	2301      	movs	r3, #1
 800d2ce:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

  /*
   * Check if Signal ref clip limit is enabled, if yes then do comparison
   * with limit value and put the result back into pPalRangeStatus.
   */
  if (Status == VL53L0X_ERROR_NONE)
 800d2d2:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800d2d6:	2b00      	cmp	r3, #0
 800d2d8:	d109      	bne.n	800d2ee <VL53L0X_get_pal_range_status+0x19e>
    Status =
 800d2da:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800d2de:	461a      	mov	r2, r3
 800d2e0:	2102      	movs	r1, #2
 800d2e2:	68f8      	ldr	r0, [r7, #12]
 800d2e4:	f7fe fd62 	bl	800bdac <VL53L0X_GetLimitCheckEnable>
 800d2e8:	4603      	mov	r3, r0
 800d2ea:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
        VL53L0X_GetLimitCheckEnable(Dev, VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
                                    &SignalRefClipLimitCheckEnable);

  if ((SignalRefClipLimitCheckEnable != 0) && (Status == VL53L0X_ERROR_NONE)) {
 800d2ee:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800d2f2:	2b00      	cmp	r3, #0
 800d2f4:	d017      	beq.n	800d326 <VL53L0X_get_pal_range_status+0x1d6>
 800d2f6:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800d2fa:	2b00      	cmp	r3, #0
 800d2fc:	d113      	bne.n	800d326 <VL53L0X_get_pal_range_status+0x1d6>

    Status = VL53L0X_GetLimitCheckValue(
 800d2fe:	f107 0320 	add.w	r3, r7, #32
 800d302:	461a      	mov	r2, r3
 800d304:	2102      	movs	r1, #2
 800d306:	68f8      	ldr	r0, [r7, #12]
 800d308:	f7fe fd74 	bl	800bdf4 <VL53L0X_GetLimitCheckValue>
 800d30c:	4603      	mov	r3, r0
 800d30e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
        Dev, VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, &SignalRefClipValue);

    if ((SignalRefClipValue > 0) && (LastSignalRefMcps > SignalRefClipValue)) {
 800d312:	6a3b      	ldr	r3, [r7, #32]
 800d314:	2b00      	cmp	r3, #0
 800d316:	d006      	beq.n	800d326 <VL53L0X_get_pal_range_status+0x1d6>
 800d318:	693a      	ldr	r2, [r7, #16]
 800d31a:	6a3b      	ldr	r3, [r7, #32]
 800d31c:	429a      	cmp	r2, r3
 800d31e:	d902      	bls.n	800d326 <VL53L0X_get_pal_range_status+0x1d6>
      /* Limit Fail */
      SignalRefClipflag = 1;
 800d320:	2301      	movs	r3, #1
 800d322:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
   * Check if Signal ref clip limit is enabled, if yes then do comparison
   * with limit value and put the result back into pPalRangeStatus.
   * EffectiveSpadRtnCount has a format 8.8
   * If (Return signal rate < (1.5 x Xtalk x number of Spads)) : FAIL
   */
  if (Status == VL53L0X_ERROR_NONE)
 800d326:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800d32a:	2b00      	cmp	r3, #0
 800d32c:	d109      	bne.n	800d342 <VL53L0X_get_pal_range_status+0x1f2>
    Status = VL53L0X_GetLimitCheckEnable(
 800d32e:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 800d332:	461a      	mov	r2, r3
 800d334:	2103      	movs	r1, #3
 800d336:	68f8      	ldr	r0, [r7, #12]
 800d338:	f7fe fd38 	bl	800bdac <VL53L0X_GetLimitCheckEnable>
 800d33c:	4603      	mov	r3, r0
 800d33e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
        Dev, VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
        &RangeIgnoreThresholdLimitCheckEnable);

  if ((RangeIgnoreThresholdLimitCheckEnable != 0) &&
 800d342:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d346:	2b00      	cmp	r3, #0
 800d348:	d023      	beq.n	800d392 <VL53L0X_get_pal_range_status+0x242>
 800d34a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800d34e:	2b00      	cmp	r3, #0
 800d350:	d11f      	bne.n	800d392 <VL53L0X_get_pal_range_status+0x242>
      (Status == VL53L0X_ERROR_NONE)) {

    /* Compute the signal rate per spad */
    if (EffectiveSpadRtnCount == 0) {
 800d352:	893b      	ldrh	r3, [r7, #8]
 800d354:	2b00      	cmp	r3, #0
 800d356:	d102      	bne.n	800d35e <VL53L0X_get_pal_range_status+0x20e>
      SignalRatePerSpad = 0;
 800d358:	2300      	movs	r3, #0
 800d35a:	637b      	str	r3, [r7, #52]	; 0x34
 800d35c:	e005      	b.n	800d36a <VL53L0X_get_pal_range_status+0x21a>
    } else {
      SignalRatePerSpad =
          (FixPoint1616_t)((256 * SignalRate) / EffectiveSpadRtnCount);
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	021a      	lsls	r2, r3, #8
 800d362:	893b      	ldrh	r3, [r7, #8]
      SignalRatePerSpad =
 800d364:	fbb2 f3f3 	udiv	r3, r2, r3
 800d368:	637b      	str	r3, [r7, #52]	; 0x34
    }

    Status = VL53L0X_GetLimitCheckValue(
 800d36a:	f107 031c 	add.w	r3, r7, #28
 800d36e:	461a      	mov	r2, r3
 800d370:	2103      	movs	r1, #3
 800d372:	68f8      	ldr	r0, [r7, #12]
 800d374:	f7fe fd3e 	bl	800bdf4 <VL53L0X_GetLimitCheckValue>
 800d378:	4603      	mov	r3, r0
 800d37a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
        Dev, VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
        &RangeIgnoreThresholdValue);

    if ((RangeIgnoreThresholdValue > 0) &&
 800d37e:	69fb      	ldr	r3, [r7, #28]
 800d380:	2b00      	cmp	r3, #0
 800d382:	d006      	beq.n	800d392 <VL53L0X_get_pal_range_status+0x242>
        (SignalRatePerSpad < RangeIgnoreThresholdValue)) {
 800d384:	69fb      	ldr	r3, [r7, #28]
    if ((RangeIgnoreThresholdValue > 0) &&
 800d386:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d388:	429a      	cmp	r2, r3
 800d38a:	d202      	bcs.n	800d392 <VL53L0X_get_pal_range_status+0x242>
      /* Limit Fail add 2^6 to range status */
      RangeIgnoreThresholdflag = 1;
 800d38c:	2301      	movs	r3, #1
 800d38e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    }
  }

  if (Status == VL53L0X_ERROR_NONE) {
 800d392:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800d396:	2b00      	cmp	r3, #0
 800d398:	d14a      	bne.n	800d430 <VL53L0X_get_pal_range_status+0x2e0>
    if (NoneFlag == 1) {
 800d39a:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800d39e:	2b01      	cmp	r3, #1
 800d3a0:	d103      	bne.n	800d3aa <VL53L0X_get_pal_range_status+0x25a>
      *pPalRangeStatus = 255; /* NONE */
 800d3a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d3a4:	22ff      	movs	r2, #255	; 0xff
 800d3a6:	701a      	strb	r2, [r3, #0]
 800d3a8:	e042      	b.n	800d430 <VL53L0X_get_pal_range_status+0x2e0>
    } else if (DeviceRangeStatusInternal == 1 ||
 800d3aa:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800d3ae:	2b01      	cmp	r3, #1
 800d3b0:	d007      	beq.n	800d3c2 <VL53L0X_get_pal_range_status+0x272>
 800d3b2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800d3b6:	2b02      	cmp	r3, #2
 800d3b8:	d003      	beq.n	800d3c2 <VL53L0X_get_pal_range_status+0x272>
               DeviceRangeStatusInternal == 2 ||
 800d3ba:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800d3be:	2b03      	cmp	r3, #3
 800d3c0:	d103      	bne.n	800d3ca <VL53L0X_get_pal_range_status+0x27a>
               DeviceRangeStatusInternal == 3) {
      *pPalRangeStatus = 5; /* HW fail */
 800d3c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d3c4:	2205      	movs	r2, #5
 800d3c6:	701a      	strb	r2, [r3, #0]
 800d3c8:	e032      	b.n	800d430 <VL53L0X_get_pal_range_status+0x2e0>
    } else if (DeviceRangeStatusInternal == 6 ||
 800d3ca:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800d3ce:	2b06      	cmp	r3, #6
 800d3d0:	d003      	beq.n	800d3da <VL53L0X_get_pal_range_status+0x28a>
 800d3d2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800d3d6:	2b09      	cmp	r3, #9
 800d3d8:	d103      	bne.n	800d3e2 <VL53L0X_get_pal_range_status+0x292>
               DeviceRangeStatusInternal == 9) {
      *pPalRangeStatus = 4; /* Phase fail */
 800d3da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d3dc:	2204      	movs	r2, #4
 800d3de:	701a      	strb	r2, [r3, #0]
 800d3e0:	e026      	b.n	800d430 <VL53L0X_get_pal_range_status+0x2e0>
    } else if (DeviceRangeStatusInternal == 8 ||
 800d3e2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800d3e6:	2b08      	cmp	r3, #8
 800d3e8:	d007      	beq.n	800d3fa <VL53L0X_get_pal_range_status+0x2aa>
 800d3ea:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800d3ee:	2b0a      	cmp	r3, #10
 800d3f0:	d003      	beq.n	800d3fa <VL53L0X_get_pal_range_status+0x2aa>
               DeviceRangeStatusInternal == 10 || SignalRefClipflag == 1) {
 800d3f2:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800d3f6:	2b01      	cmp	r3, #1
 800d3f8:	d103      	bne.n	800d402 <VL53L0X_get_pal_range_status+0x2b2>
      *pPalRangeStatus = 3; /* Min range */
 800d3fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d3fc:	2203      	movs	r2, #3
 800d3fe:	701a      	strb	r2, [r3, #0]
 800d400:	e016      	b.n	800d430 <VL53L0X_get_pal_range_status+0x2e0>
    } else if (DeviceRangeStatusInternal == 4 ||
 800d402:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800d406:	2b04      	cmp	r3, #4
 800d408:	d003      	beq.n	800d412 <VL53L0X_get_pal_range_status+0x2c2>
 800d40a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800d40e:	2b01      	cmp	r3, #1
 800d410:	d103      	bne.n	800d41a <VL53L0X_get_pal_range_status+0x2ca>
               RangeIgnoreThresholdflag == 1) {
      *pPalRangeStatus = 2; /* Signal Fail */
 800d412:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d414:	2202      	movs	r2, #2
 800d416:	701a      	strb	r2, [r3, #0]
 800d418:	e00a      	b.n	800d430 <VL53L0X_get_pal_range_status+0x2e0>
    } else if (SigmaLimitflag == 1) {
 800d41a:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800d41e:	2b01      	cmp	r3, #1
 800d420:	d103      	bne.n	800d42a <VL53L0X_get_pal_range_status+0x2da>
      *pPalRangeStatus = 1; /* Sigma	 Fail */
 800d422:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d424:	2201      	movs	r2, #1
 800d426:	701a      	strb	r2, [r3, #0]
 800d428:	e002      	b.n	800d430 <VL53L0X_get_pal_range_status+0x2e0>
    } else {
      *pPalRangeStatus = 0; /* Range Valid */
 800d42a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d42c:	2200      	movs	r2, #0
 800d42e:	701a      	strb	r2, [r3, #0]
    }
  }

  /* DMAX only relevant during range error */
  if (*pPalRangeStatus == 0)
 800d430:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d432:	781b      	ldrb	r3, [r3, #0]
 800d434:	2b00      	cmp	r3, #0
 800d436:	d102      	bne.n	800d43e <VL53L0X_get_pal_range_status+0x2ee>
    pRangingMeasurementData->RangeDMaxMilliMeter = 0;
 800d438:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d43a:	2200      	movs	r2, #0
 800d43c:	815a      	strh	r2, [r3, #10]

  /* fill the Limit Check Status */

  Status = VL53L0X_GetLimitCheckEnable(
 800d43e:	f107 0331 	add.w	r3, r7, #49	; 0x31
 800d442:	461a      	mov	r2, r3
 800d444:	2101      	movs	r1, #1
 800d446:	68f8      	ldr	r0, [r7, #12]
 800d448:	f7fe fcb0 	bl	800bdac <VL53L0X_GetLimitCheckEnable>
 800d44c:	4603      	mov	r3, r0
 800d44e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
      Dev, VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
      &SignalRateFinalRangeLimitCheckEnable);

  if (Status == VL53L0X_ERROR_NONE) {
 800d452:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800d456:	2b00      	cmp	r3, #0
 800d458:	d143      	bne.n	800d4e2 <VL53L0X_get_pal_range_status+0x392>
    if ((SigmaLimitCheckEnable == 0) || (SigmaLimitflag == 1))
 800d45a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800d45e:	2b00      	cmp	r3, #0
 800d460:	d003      	beq.n	800d46a <VL53L0X_get_pal_range_status+0x31a>
 800d462:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800d466:	2b01      	cmp	r3, #1
 800d468:	d102      	bne.n	800d470 <VL53L0X_get_pal_range_status+0x320>
      Temp8 = 1;
 800d46a:	2301      	movs	r3, #1
 800d46c:	767b      	strb	r3, [r7, #25]
 800d46e:	e001      	b.n	800d474 <VL53L0X_get_pal_range_status+0x324>
    else
      Temp8 = 0;
 800d470:	2300      	movs	r3, #0
 800d472:	767b      	strb	r3, [r7, #25]
    VL53L0X_SETARRAYPARAMETERFIELD(
 800d474:	7e7a      	ldrb	r2, [r7, #25]
 800d476:	68fb      	ldr	r3, [r7, #12]
 800d478:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
        Dev, LimitChecksStatus, VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, Temp8);

    if ((DeviceRangeStatusInternal == 4) ||
 800d47c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800d480:	2b04      	cmp	r3, #4
 800d482:	d003      	beq.n	800d48c <VL53L0X_get_pal_range_status+0x33c>
        (SignalRateFinalRangeLimitCheckEnable == 0))
 800d484:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
    if ((DeviceRangeStatusInternal == 4) ||
 800d488:	2b00      	cmp	r3, #0
 800d48a:	d102      	bne.n	800d492 <VL53L0X_get_pal_range_status+0x342>
      Temp8 = 1;
 800d48c:	2301      	movs	r3, #1
 800d48e:	767b      	strb	r3, [r7, #25]
 800d490:	e001      	b.n	800d496 <VL53L0X_get_pal_range_status+0x346>
    else
      Temp8 = 0;
 800d492:	2300      	movs	r3, #0
 800d494:	767b      	strb	r3, [r7, #25]
    VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800d496:	7e7a      	ldrb	r2, [r7, #25]
 800d498:	68fb      	ldr	r3, [r7, #12]
 800d49a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
                                   VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
                                   Temp8);

    if ((SignalRefClipLimitCheckEnable == 0) || (SignalRefClipflag == 1))
 800d49e:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800d4a2:	2b00      	cmp	r3, #0
 800d4a4:	d003      	beq.n	800d4ae <VL53L0X_get_pal_range_status+0x35e>
 800d4a6:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800d4aa:	2b01      	cmp	r3, #1
 800d4ac:	d102      	bne.n	800d4b4 <VL53L0X_get_pal_range_status+0x364>
      Temp8 = 1;
 800d4ae:	2301      	movs	r3, #1
 800d4b0:	767b      	strb	r3, [r7, #25]
 800d4b2:	e001      	b.n	800d4b8 <VL53L0X_get_pal_range_status+0x368>
    else
      Temp8 = 0;
 800d4b4:	2300      	movs	r3, #0
 800d4b6:	767b      	strb	r3, [r7, #25]

    VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800d4b8:	7e7a      	ldrb	r2, [r7, #25]
 800d4ba:	68fb      	ldr	r3, [r7, #12]
 800d4bc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
                                   VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, Temp8);

    if ((RangeIgnoreThresholdLimitCheckEnable == 0) ||
 800d4c0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d4c4:	2b00      	cmp	r3, #0
 800d4c6:	d003      	beq.n	800d4d0 <VL53L0X_get_pal_range_status+0x380>
 800d4c8:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800d4cc:	2b01      	cmp	r3, #1
 800d4ce:	d102      	bne.n	800d4d6 <VL53L0X_get_pal_range_status+0x386>
        (RangeIgnoreThresholdflag == 1))
      Temp8 = 1;
 800d4d0:	2301      	movs	r3, #1
 800d4d2:	767b      	strb	r3, [r7, #25]
 800d4d4:	e001      	b.n	800d4da <VL53L0X_get_pal_range_status+0x38a>
    else
      Temp8 = 0;
 800d4d6:	2300      	movs	r3, #0
 800d4d8:	767b      	strb	r3, [r7, #25]

    VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800d4da:	7e7a      	ldrb	r2, [r7, #25]
 800d4dc:	68fb      	ldr	r3, [r7, #12]
 800d4de:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
                                   VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
                                   Temp8);
  }

  LOG_FUNCTION_END(Status);
  return Status;
 800d4e2:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800d4e6:	4618      	mov	r0, r3
 800d4e8:	3740      	adds	r7, #64	; 0x40
 800d4ea:	46bd      	mov	sp, r7
 800d4ec:	bd80      	pop	{r7, pc}
	...

0800d4f0 <VL53L0X_get_range_status_string>:
  LOG_FUNCTION_END(Status);
  return Status;
}

VL53L0X_Error VL53L0X_get_range_status_string(uint8_t RangeStatus,
                                              char *pRangeStatusString) {
 800d4f0:	b490      	push	{r4, r7}
 800d4f2:	b084      	sub	sp, #16
 800d4f4:	af00      	add	r7, sp, #0
 800d4f6:	4603      	mov	r3, r0
 800d4f8:	6039      	str	r1, [r7, #0]
 800d4fa:	71fb      	strb	r3, [r7, #7]
  VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800d4fc:	2300      	movs	r3, #0
 800d4fe:	73fb      	strb	r3, [r7, #15]

  LOG_FUNCTION_START("");

  switch (RangeStatus) {
 800d500:	79fb      	ldrb	r3, [r7, #7]
 800d502:	2b05      	cmp	r3, #5
 800d504:	d850      	bhi.n	800d5a8 <VL53L0X_get_range_status_string+0xb8>
 800d506:	a201      	add	r2, pc, #4	; (adr r2, 800d50c <VL53L0X_get_range_status_string+0x1c>)
 800d508:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d50c:	0800d525 	.word	0x0800d525
 800d510:	0800d537 	.word	0x0800d537
 800d514:	0800d54f 	.word	0x0800d54f
 800d518:	0800d561 	.word	0x0800d561
 800d51c:	0800d57b 	.word	0x0800d57b
 800d520:	0800d593 	.word	0x0800d593
  case 0:
    VL53L0X_COPYSTRING(pRangeStatusString,
 800d524:	683b      	ldr	r3, [r7, #0]
 800d526:	4a28      	ldr	r2, [pc, #160]	; (800d5c8 <VL53L0X_get_range_status_string+0xd8>)
 800d528:	461c      	mov	r4, r3
 800d52a:	4613      	mov	r3, r2
 800d52c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800d52e:	6020      	str	r0, [r4, #0]
 800d530:	6061      	str	r1, [r4, #4]
 800d532:	60a2      	str	r2, [r4, #8]
                       VL53L0X_STRING_RANGESTATUS_RANGEVALID);
    break;
 800d534:	e041      	b.n	800d5ba <VL53L0X_get_range_status_string+0xca>
  case 1:
    VL53L0X_COPYSTRING(pRangeStatusString, VL53L0X_STRING_RANGESTATUS_SIGMA);
 800d536:	683b      	ldr	r3, [r7, #0]
 800d538:	4924      	ldr	r1, [pc, #144]	; (800d5cc <VL53L0X_get_range_status_string+0xdc>)
 800d53a:	461a      	mov	r2, r3
 800d53c:	460b      	mov	r3, r1
 800d53e:	cb03      	ldmia	r3!, {r0, r1}
 800d540:	6010      	str	r0, [r2, #0]
 800d542:	6051      	str	r1, [r2, #4]
 800d544:	8819      	ldrh	r1, [r3, #0]
 800d546:	789b      	ldrb	r3, [r3, #2]
 800d548:	8111      	strh	r1, [r2, #8]
 800d54a:	7293      	strb	r3, [r2, #10]
    break;
 800d54c:	e035      	b.n	800d5ba <VL53L0X_get_range_status_string+0xca>
  case 2:
    VL53L0X_COPYSTRING(pRangeStatusString, VL53L0X_STRING_RANGESTATUS_SIGNAL);
 800d54e:	683b      	ldr	r3, [r7, #0]
 800d550:	4a1f      	ldr	r2, [pc, #124]	; (800d5d0 <VL53L0X_get_range_status_string+0xe0>)
 800d552:	461c      	mov	r4, r3
 800d554:	4613      	mov	r3, r2
 800d556:	cb07      	ldmia	r3!, {r0, r1, r2}
 800d558:	6020      	str	r0, [r4, #0]
 800d55a:	6061      	str	r1, [r4, #4]
 800d55c:	60a2      	str	r2, [r4, #8]
    break;
 800d55e:	e02c      	b.n	800d5ba <VL53L0X_get_range_status_string+0xca>
  case 3:
    VL53L0X_COPYSTRING(pRangeStatusString, VL53L0X_STRING_RANGESTATUS_MINRANGE);
 800d560:	683b      	ldr	r3, [r7, #0]
 800d562:	4a1c      	ldr	r2, [pc, #112]	; (800d5d4 <VL53L0X_get_range_status_string+0xe4>)
 800d564:	461c      	mov	r4, r3
 800d566:	4613      	mov	r3, r2
 800d568:	cb07      	ldmia	r3!, {r0, r1, r2}
 800d56a:	6020      	str	r0, [r4, #0]
 800d56c:	6061      	str	r1, [r4, #4]
 800d56e:	60a2      	str	r2, [r4, #8]
 800d570:	881a      	ldrh	r2, [r3, #0]
 800d572:	789b      	ldrb	r3, [r3, #2]
 800d574:	81a2      	strh	r2, [r4, #12]
 800d576:	73a3      	strb	r3, [r4, #14]
    break;
 800d578:	e01f      	b.n	800d5ba <VL53L0X_get_range_status_string+0xca>
  case 4:
    VL53L0X_COPYSTRING(pRangeStatusString, VL53L0X_STRING_RANGESTATUS_PHASE);
 800d57a:	683b      	ldr	r3, [r7, #0]
 800d57c:	4916      	ldr	r1, [pc, #88]	; (800d5d8 <VL53L0X_get_range_status_string+0xe8>)
 800d57e:	461a      	mov	r2, r3
 800d580:	460b      	mov	r3, r1
 800d582:	cb03      	ldmia	r3!, {r0, r1}
 800d584:	6010      	str	r0, [r2, #0]
 800d586:	6051      	str	r1, [r2, #4]
 800d588:	8819      	ldrh	r1, [r3, #0]
 800d58a:	789b      	ldrb	r3, [r3, #2]
 800d58c:	8111      	strh	r1, [r2, #8]
 800d58e:	7293      	strb	r3, [r2, #10]
    break;
 800d590:	e013      	b.n	800d5ba <VL53L0X_get_range_status_string+0xca>
  case 5:
    VL53L0X_COPYSTRING(pRangeStatusString, VL53L0X_STRING_RANGESTATUS_HW);
 800d592:	683b      	ldr	r3, [r7, #0]
 800d594:	4a11      	ldr	r2, [pc, #68]	; (800d5dc <VL53L0X_get_range_status_string+0xec>)
 800d596:	461c      	mov	r4, r3
 800d598:	4613      	mov	r3, r2
 800d59a:	cb07      	ldmia	r3!, {r0, r1, r2}
 800d59c:	6020      	str	r0, [r4, #0]
 800d59e:	6061      	str	r1, [r4, #4]
 800d5a0:	60a2      	str	r2, [r4, #8]
 800d5a2:	881b      	ldrh	r3, [r3, #0]
 800d5a4:	81a3      	strh	r3, [r4, #12]
    break;
 800d5a6:	e008      	b.n	800d5ba <VL53L0X_get_range_status_string+0xca>

  default: /**/
    VL53L0X_COPYSTRING(pRangeStatusString, VL53L0X_STRING_RANGESTATUS_NONE);
 800d5a8:	683b      	ldr	r3, [r7, #0]
 800d5aa:	490d      	ldr	r1, [pc, #52]	; (800d5e0 <VL53L0X_get_range_status_string+0xf0>)
 800d5ac:	461a      	mov	r2, r3
 800d5ae:	460b      	mov	r3, r1
 800d5b0:	cb03      	ldmia	r3!, {r0, r1}
 800d5b2:	6010      	str	r0, [r2, #0]
 800d5b4:	6051      	str	r1, [r2, #4]
 800d5b6:	881b      	ldrh	r3, [r3, #0]
 800d5b8:	8113      	strh	r3, [r2, #8]
  }

  LOG_FUNCTION_END(Status);
  return Status;
 800d5ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800d5be:	4618      	mov	r0, r3
 800d5c0:	3710      	adds	r7, #16
 800d5c2:	46bd      	mov	sp, r7
 800d5c4:	bc90      	pop	{r4, r7}
 800d5c6:	4770      	bx	lr
 800d5c8:	0800edb8 	.word	0x0800edb8
 800d5cc:	0800edc4 	.word	0x0800edc4
 800d5d0:	0800edd0 	.word	0x0800edd0
 800d5d4:	0800eddc 	.word	0x0800eddc
 800d5d8:	0800edec 	.word	0x0800edec
 800d5dc:	0800edf8 	.word	0x0800edf8
 800d5e0:	0800ec50 	.word	0x0800ec50

0800d5e4 <_Z19VL53L0X_write_multihhPhmP19__I2C_HandleTypeDef>:

  return VL53L0X_ERROR_NONE;
}

int VL53L0X_write_multi(uint8_t deviceAddress, uint8_t index, uint8_t *pdata,
                        uint32_t count, I2C_HandleTypeDef* hi2c) {
 800d5e4:	b580      	push	{r7, lr}
 800d5e6:	b088      	sub	sp, #32
 800d5e8:	af02      	add	r7, sp, #8
 800d5ea:	60ba      	str	r2, [r7, #8]
 800d5ec:	607b      	str	r3, [r7, #4]
 800d5ee:	4603      	mov	r3, r0
 800d5f0:	73fb      	strb	r3, [r7, #15]
 800d5f2:	460b      	mov	r3, r1
 800d5f4:	73bb      	strb	r3, [r7, #14]
	HAL_StatusTypeDef res;
	res = HAL_I2C_Master_Transmit(hi2c, deviceAddress << 1, &index, 1, 100);
 800d5f6:	7bfb      	ldrb	r3, [r7, #15]
 800d5f8:	b29b      	uxth	r3, r3
 800d5fa:	005b      	lsls	r3, r3, #1
 800d5fc:	b299      	uxth	r1, r3
 800d5fe:	f107 020e 	add.w	r2, r7, #14
 800d602:	2364      	movs	r3, #100	; 0x64
 800d604:	9300      	str	r3, [sp, #0]
 800d606:	2301      	movs	r3, #1
 800d608:	6a38      	ldr	r0, [r7, #32]
 800d60a:	f7f5 fed3 	bl	80033b4 <HAL_I2C_Master_Transmit>
 800d60e:	4603      	mov	r3, r0
 800d610:	75fb      	strb	r3, [r7, #23]
#ifdef I2C_DEBUG
  printf("Writing index: %d\nResult: %d\n", index, res);
#endif
  	res = HAL_I2C_Master_Transmit(hi2c, deviceAddress << 1, pdata, count, 100);
 800d612:	7bfb      	ldrb	r3, [r7, #15]
 800d614:	b29b      	uxth	r3, r3
 800d616:	005b      	lsls	r3, r3, #1
 800d618:	b299      	uxth	r1, r3
 800d61a:	687b      	ldr	r3, [r7, #4]
 800d61c:	b29a      	uxth	r2, r3
 800d61e:	2364      	movs	r3, #100	; 0x64
 800d620:	9300      	str	r3, [sp, #0]
 800d622:	4613      	mov	r3, r2
 800d624:	68ba      	ldr	r2, [r7, #8]
 800d626:	6a38      	ldr	r0, [r7, #32]
 800d628:	f7f5 fec4 	bl	80033b4 <HAL_I2C_Master_Transmit>
 800d62c:	4603      	mov	r3, r0
 800d62e:	75fb      	strb	r3, [r7, #23]
#ifdef I2C_DEBUG
  	printf("Finished sending message, result: %d\n", res);
#endif

  return VL53L0X_ERROR_NONE;
 800d630:	2300      	movs	r3, #0
}
 800d632:	4618      	mov	r0, r3
 800d634:	3718      	adds	r7, #24
 800d636:	46bd      	mov	sp, r7
 800d638:	bd80      	pop	{r7, pc}

0800d63a <_Z18VL53L0X_read_multihhPhmP19__I2C_HandleTypeDef>:

int VL53L0X_read_multi(uint8_t deviceAddress, uint8_t index, uint8_t *pdata,
                       uint32_t count, I2C_HandleTypeDef* hi2c) {
 800d63a:	b580      	push	{r7, lr}
 800d63c:	b088      	sub	sp, #32
 800d63e:	af02      	add	r7, sp, #8
 800d640:	60ba      	str	r2, [r7, #8]
 800d642:	607b      	str	r3, [r7, #4]
 800d644:	4603      	mov	r3, r0
 800d646:	73fb      	strb	r3, [r7, #15]
 800d648:	460b      	mov	r3, r1
 800d64a:	73bb      	strb	r3, [r7, #14]
	HAL_StatusTypeDef res;
	pdata[0] = 0;
 800d64c:	68bb      	ldr	r3, [r7, #8]
 800d64e:	2200      	movs	r2, #0
 800d650:	701a      	strb	r2, [r3, #0]
	res = HAL_I2C_Master_Transmit(hi2c, deviceAddress << 1, &index, 1, 25);
 800d652:	7bfb      	ldrb	r3, [r7, #15]
 800d654:	b29b      	uxth	r3, r3
 800d656:	005b      	lsls	r3, r3, #1
 800d658:	b299      	uxth	r1, r3
 800d65a:	f107 020e 	add.w	r2, r7, #14
 800d65e:	2319      	movs	r3, #25
 800d660:	9300      	str	r3, [sp, #0]
 800d662:	2301      	movs	r3, #1
 800d664:	6a38      	ldr	r0, [r7, #32]
 800d666:	f7f5 fea5 	bl	80033b4 <HAL_I2C_Master_Transmit>
 800d66a:	4603      	mov	r3, r0
 800d66c:	75fb      	strb	r3, [r7, #23]
#ifdef I2C_DEBUG
  printf("Writing index: %d\nResult: %d\n", index, res);
#endif

  res = HAL_I2C_Master_Receive(hi2c, deviceAddress << 1, pdata, count, 25);
 800d66e:	7bfb      	ldrb	r3, [r7, #15]
 800d670:	b29b      	uxth	r3, r3
 800d672:	005b      	lsls	r3, r3, #1
 800d674:	b299      	uxth	r1, r3
 800d676:	687b      	ldr	r3, [r7, #4]
 800d678:	b29a      	uxth	r2, r3
 800d67a:	2319      	movs	r3, #25
 800d67c:	9300      	str	r3, [sp, #0]
 800d67e:	4613      	mov	r3, r2
 800d680:	68ba      	ldr	r2, [r7, #8]
 800d682:	6a38      	ldr	r0, [r7, #32]
 800d684:	f7f5 ff8a 	bl	800359c <HAL_I2C_Master_Receive>
 800d688:	4603      	mov	r3, r0
 800d68a:	75fb      	strb	r3, [r7, #23]
#ifdef I2C_DEBUG
  printf("Finished receiving message, result: %d\n", res);
#endif

  return VL53L0X_ERROR_NONE;
 800d68c:	2300      	movs	r3, #0
}
 800d68e:	4618      	mov	r0, r3
 800d690:	3718      	adds	r7, #24
 800d692:	46bd      	mov	sp, r7
 800d694:	bd80      	pop	{r7, pc}

0800d696 <_Z18VL53L0X_write_bytehhhP19__I2C_HandleTypeDef>:

int VL53L0X_write_byte(uint8_t deviceAddress, uint8_t index, uint8_t data,
		I2C_HandleTypeDef* hi2c) {
 800d696:	b580      	push	{r7, lr}
 800d698:	b084      	sub	sp, #16
 800d69a:	af02      	add	r7, sp, #8
 800d69c:	603b      	str	r3, [r7, #0]
 800d69e:	4603      	mov	r3, r0
 800d6a0:	71fb      	strb	r3, [r7, #7]
 800d6a2:	460b      	mov	r3, r1
 800d6a4:	71bb      	strb	r3, [r7, #6]
 800d6a6:	4613      	mov	r3, r2
 800d6a8:	717b      	strb	r3, [r7, #5]
  return VL53L0X_write_multi(deviceAddress, index, &data, 1, hi2c);
 800d6aa:	1d7a      	adds	r2, r7, #5
 800d6ac:	79b9      	ldrb	r1, [r7, #6]
 800d6ae:	79f8      	ldrb	r0, [r7, #7]
 800d6b0:	683b      	ldr	r3, [r7, #0]
 800d6b2:	9300      	str	r3, [sp, #0]
 800d6b4:	2301      	movs	r3, #1
 800d6b6:	f7ff ff95 	bl	800d5e4 <_Z19VL53L0X_write_multihhPhmP19__I2C_HandleTypeDef>
 800d6ba:	4603      	mov	r3, r0
}
 800d6bc:	4618      	mov	r0, r3
 800d6be:	3708      	adds	r7, #8
 800d6c0:	46bd      	mov	sp, r7
 800d6c2:	bd80      	pop	{r7, pc}

0800d6c4 <_Z17VL53L0X_read_bytehhPhP19__I2C_HandleTypeDef>:

  return VL53L0X_write_multi(deviceAddress, index, buff, 4, hi2c);
}

int VL53L0X_read_byte(uint8_t deviceAddress, uint8_t index, uint8_t *data,
		I2C_HandleTypeDef* hi2c) {
 800d6c4:	b580      	push	{r7, lr}
 800d6c6:	b086      	sub	sp, #24
 800d6c8:	af02      	add	r7, sp, #8
 800d6ca:	60ba      	str	r2, [r7, #8]
 800d6cc:	607b      	str	r3, [r7, #4]
 800d6ce:	4603      	mov	r3, r0
 800d6d0:	73fb      	strb	r3, [r7, #15]
 800d6d2:	460b      	mov	r3, r1
 800d6d4:	73bb      	strb	r3, [r7, #14]
  return VL53L0X_read_multi(deviceAddress, index, data, 1, hi2c);
 800d6d6:	7bb9      	ldrb	r1, [r7, #14]
 800d6d8:	7bf8      	ldrb	r0, [r7, #15]
 800d6da:	687b      	ldr	r3, [r7, #4]
 800d6dc:	9300      	str	r3, [sp, #0]
 800d6de:	2301      	movs	r3, #1
 800d6e0:	68ba      	ldr	r2, [r7, #8]
 800d6e2:	f7ff ffaa 	bl	800d63a <_Z18VL53L0X_read_multihhPhmP19__I2C_HandleTypeDef>
 800d6e6:	4603      	mov	r3, r0
}
 800d6e8:	4618      	mov	r0, r3
 800d6ea:	3710      	adds	r7, #16
 800d6ec:	46bd      	mov	sp, r7
 800d6ee:	bd80      	pop	{r7, pc}

0800d6f0 <_Z17VL53L0X_read_wordhhPtP19__I2C_HandleTypeDef>:

int VL53L0X_read_word(uint8_t deviceAddress, uint8_t index, uint16_t *data,
		I2C_HandleTypeDef* hi2c) {
 800d6f0:	b580      	push	{r7, lr}
 800d6f2:	b088      	sub	sp, #32
 800d6f4:	af02      	add	r7, sp, #8
 800d6f6:	60ba      	str	r2, [r7, #8]
 800d6f8:	607b      	str	r3, [r7, #4]
 800d6fa:	4603      	mov	r3, r0
 800d6fc:	73fb      	strb	r3, [r7, #15]
 800d6fe:	460b      	mov	r3, r1
 800d700:	73bb      	strb	r3, [r7, #14]
  uint8_t buff[2];
  int r = VL53L0X_read_multi(deviceAddress, index, buff, 2, hi2c);
 800d702:	f107 0210 	add.w	r2, r7, #16
 800d706:	7bb9      	ldrb	r1, [r7, #14]
 800d708:	7bf8      	ldrb	r0, [r7, #15]
 800d70a:	687b      	ldr	r3, [r7, #4]
 800d70c:	9300      	str	r3, [sp, #0]
 800d70e:	2302      	movs	r3, #2
 800d710:	f7ff ff93 	bl	800d63a <_Z18VL53L0X_read_multihhPhmP19__I2C_HandleTypeDef>
 800d714:	6178      	str	r0, [r7, #20]

  uint16_t tmp;
  tmp = buff[0];
 800d716:	7c3b      	ldrb	r3, [r7, #16]
 800d718:	827b      	strh	r3, [r7, #18]
  tmp <<= 8;
 800d71a:	8a7b      	ldrh	r3, [r7, #18]
 800d71c:	021b      	lsls	r3, r3, #8
 800d71e:	827b      	strh	r3, [r7, #18]
  tmp |= buff[1];
 800d720:	7c7b      	ldrb	r3, [r7, #17]
 800d722:	b29a      	uxth	r2, r3
 800d724:	8a7b      	ldrh	r3, [r7, #18]
 800d726:	4313      	orrs	r3, r2
 800d728:	827b      	strh	r3, [r7, #18]
  *data = tmp;
 800d72a:	68bb      	ldr	r3, [r7, #8]
 800d72c:	8a7a      	ldrh	r2, [r7, #18]
 800d72e:	801a      	strh	r2, [r3, #0]

  return r;
 800d730:	697b      	ldr	r3, [r7, #20]
}
 800d732:	4618      	mov	r0, r3
 800d734:	3718      	adds	r7, #24
 800d736:	46bd      	mov	sp, r7
 800d738:	bd80      	pop	{r7, pc}

0800d73a <VL53L0X_WriteMulti>:
  return Status;
}

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_WriteMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata,
                                 uint32_t count) {
 800d73a:	b580      	push	{r7, lr}
 800d73c:	b08a      	sub	sp, #40	; 0x28
 800d73e:	af02      	add	r7, sp, #8
 800d740:	60f8      	str	r0, [r7, #12]
 800d742:	607a      	str	r2, [r7, #4]
 800d744:	603b      	str	r3, [r7, #0]
 800d746:	460b      	mov	r3, r1
 800d748:	72fb      	strb	r3, [r7, #11]

  VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800d74a:	2300      	movs	r3, #0
 800d74c:	77fb      	strb	r3, [r7, #31]
  int32_t status_int = 0;
 800d74e:	2300      	movs	r3, #0
 800d750:	61bb      	str	r3, [r7, #24]
  uint8_t deviceAddress;

  if (count >= VL53L0X_MAX_I2C_XFER_SIZE) {
 800d752:	683b      	ldr	r3, [r7, #0]
 800d754:	2b3f      	cmp	r3, #63	; 0x3f
 800d756:	d901      	bls.n	800d75c <VL53L0X_WriteMulti+0x22>
    Status = VL53L0X_ERROR_INVALID_PARAMS;
 800d758:	23fc      	movs	r3, #252	; 0xfc
 800d75a:	77fb      	strb	r3, [r7, #31]
  }

  deviceAddress = Dev->I2cDevAddr;
 800d75c:	68fb      	ldr	r3, [r7, #12]
 800d75e:	f893 315c 	ldrb.w	r3, [r3, #348]	; 0x15c
 800d762:	75fb      	strb	r3, [r7, #23]

  status_int =
      VL53L0X_write_multi(deviceAddress, index, pdata, count, Dev->hi2c);
 800d764:	68fb      	ldr	r3, [r7, #12]
 800d766:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
  status_int =
 800d76a:	7af9      	ldrb	r1, [r7, #11]
 800d76c:	7df8      	ldrb	r0, [r7, #23]
 800d76e:	9300      	str	r3, [sp, #0]
 800d770:	683b      	ldr	r3, [r7, #0]
 800d772:	687a      	ldr	r2, [r7, #4]
 800d774:	f7ff ff36 	bl	800d5e4 <_Z19VL53L0X_write_multihhPhmP19__I2C_HandleTypeDef>
 800d778:	61b8      	str	r0, [r7, #24]

  if (status_int != 0)
 800d77a:	69bb      	ldr	r3, [r7, #24]
 800d77c:	2b00      	cmp	r3, #0
 800d77e:	d001      	beq.n	800d784 <VL53L0X_WriteMulti+0x4a>
    Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800d780:	23ec      	movs	r3, #236	; 0xec
 800d782:	77fb      	strb	r3, [r7, #31]

  return Status;
 800d784:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800d788:	4618      	mov	r0, r3
 800d78a:	3720      	adds	r7, #32
 800d78c:	46bd      	mov	sp, r7
 800d78e:	bd80      	pop	{r7, pc}

0800d790 <VL53L0X_ReadMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_ReadMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata,
                                uint32_t count) {
 800d790:	b580      	push	{r7, lr}
 800d792:	b088      	sub	sp, #32
 800d794:	af02      	add	r7, sp, #8
 800d796:	60f8      	str	r0, [r7, #12]
 800d798:	607a      	str	r2, [r7, #4]
 800d79a:	603b      	str	r3, [r7, #0]
 800d79c:	460b      	mov	r3, r1
 800d79e:	72fb      	strb	r3, [r7, #11]
  VL53L0X_I2C_USER_VAR
  VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800d7a0:	2300      	movs	r3, #0
 800d7a2:	75fb      	strb	r3, [r7, #23]
  int32_t status_int;
  uint8_t deviceAddress;

  if (count >= VL53L0X_MAX_I2C_XFER_SIZE) {
 800d7a4:	683b      	ldr	r3, [r7, #0]
 800d7a6:	2b3f      	cmp	r3, #63	; 0x3f
 800d7a8:	d901      	bls.n	800d7ae <VL53L0X_ReadMulti+0x1e>
    Status = VL53L0X_ERROR_INVALID_PARAMS;
 800d7aa:	23fc      	movs	r3, #252	; 0xfc
 800d7ac:	75fb      	strb	r3, [r7, #23]
  }

  deviceAddress = Dev->I2cDevAddr;
 800d7ae:	68fb      	ldr	r3, [r7, #12]
 800d7b0:	f893 315c 	ldrb.w	r3, [r3, #348]	; 0x15c
 800d7b4:	75bb      	strb	r3, [r7, #22]

  status_int = VL53L0X_read_multi(deviceAddress, index, pdata, count, Dev->hi2c);
 800d7b6:	68fb      	ldr	r3, [r7, #12]
 800d7b8:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 800d7bc:	7af9      	ldrb	r1, [r7, #11]
 800d7be:	7db8      	ldrb	r0, [r7, #22]
 800d7c0:	9300      	str	r3, [sp, #0]
 800d7c2:	683b      	ldr	r3, [r7, #0]
 800d7c4:	687a      	ldr	r2, [r7, #4]
 800d7c6:	f7ff ff38 	bl	800d63a <_Z18VL53L0X_read_multihhPhmP19__I2C_HandleTypeDef>
 800d7ca:	6138      	str	r0, [r7, #16]

  if (status_int != 0)
 800d7cc:	693b      	ldr	r3, [r7, #16]
 800d7ce:	2b00      	cmp	r3, #0
 800d7d0:	d001      	beq.n	800d7d6 <VL53L0X_ReadMulti+0x46>
    Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800d7d2:	23ec      	movs	r3, #236	; 0xec
 800d7d4:	75fb      	strb	r3, [r7, #23]

  return Status;
 800d7d6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d7da:	4618      	mov	r0, r3
 800d7dc:	3718      	adds	r7, #24
 800d7de:	46bd      	mov	sp, r7
 800d7e0:	bd80      	pop	{r7, pc}

0800d7e2 <VL53L0X_WrByte>:

VL53L0X_Error VL53L0X_WrByte(VL53L0X_DEV Dev, uint8_t index, uint8_t data) {
 800d7e2:	b580      	push	{r7, lr}
 800d7e4:	b084      	sub	sp, #16
 800d7e6:	af00      	add	r7, sp, #0
 800d7e8:	6078      	str	r0, [r7, #4]
 800d7ea:	460b      	mov	r3, r1
 800d7ec:	70fb      	strb	r3, [r7, #3]
 800d7ee:	4613      	mov	r3, r2
 800d7f0:	70bb      	strb	r3, [r7, #2]
  VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800d7f2:	2300      	movs	r3, #0
 800d7f4:	73fb      	strb	r3, [r7, #15]
  int32_t status_int;
  uint8_t deviceAddress;

  deviceAddress = Dev->I2cDevAddr;
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	f893 315c 	ldrb.w	r3, [r3, #348]	; 0x15c
 800d7fc:	73bb      	strb	r3, [r7, #14]

  status_int = VL53L0X_write_byte(deviceAddress, index, data, Dev->hi2c);
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 800d804:	78ba      	ldrb	r2, [r7, #2]
 800d806:	78f9      	ldrb	r1, [r7, #3]
 800d808:	7bb8      	ldrb	r0, [r7, #14]
 800d80a:	f7ff ff44 	bl	800d696 <_Z18VL53L0X_write_bytehhhP19__I2C_HandleTypeDef>
 800d80e:	60b8      	str	r0, [r7, #8]

  if (status_int != 0)
 800d810:	68bb      	ldr	r3, [r7, #8]
 800d812:	2b00      	cmp	r3, #0
 800d814:	d001      	beq.n	800d81a <VL53L0X_WrByte+0x38>
    Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800d816:	23ec      	movs	r3, #236	; 0xec
 800d818:	73fb      	strb	r3, [r7, #15]

  return Status;
 800d81a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800d81e:	4618      	mov	r0, r3
 800d820:	3710      	adds	r7, #16
 800d822:	46bd      	mov	sp, r7
 800d824:	bd80      	pop	{r7, pc}

0800d826 <VL53L0X_RdByte>:
  }

  return Status;
}

VL53L0X_Error VL53L0X_RdByte(VL53L0X_DEV Dev, uint8_t index, uint8_t *data) {
 800d826:	b580      	push	{r7, lr}
 800d828:	b086      	sub	sp, #24
 800d82a:	af00      	add	r7, sp, #0
 800d82c:	60f8      	str	r0, [r7, #12]
 800d82e:	460b      	mov	r3, r1
 800d830:	607a      	str	r2, [r7, #4]
 800d832:	72fb      	strb	r3, [r7, #11]
  VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800d834:	2300      	movs	r3, #0
 800d836:	75fb      	strb	r3, [r7, #23]
  int32_t status_int;
  uint8_t deviceAddress;

  deviceAddress = Dev->I2cDevAddr;
 800d838:	68fb      	ldr	r3, [r7, #12]
 800d83a:	f893 315c 	ldrb.w	r3, [r3, #348]	; 0x15c
 800d83e:	75bb      	strb	r3, [r7, #22]

  status_int = VL53L0X_read_byte(deviceAddress, index, data, Dev->hi2c);
 800d840:	68fb      	ldr	r3, [r7, #12]
 800d842:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 800d846:	7af9      	ldrb	r1, [r7, #11]
 800d848:	7db8      	ldrb	r0, [r7, #22]
 800d84a:	687a      	ldr	r2, [r7, #4]
 800d84c:	f7ff ff3a 	bl	800d6c4 <_Z17VL53L0X_read_bytehhPhP19__I2C_HandleTypeDef>
 800d850:	6138      	str	r0, [r7, #16]

  if (status_int != 0)
 800d852:	693b      	ldr	r3, [r7, #16]
 800d854:	2b00      	cmp	r3, #0
 800d856:	d001      	beq.n	800d85c <VL53L0X_RdByte+0x36>
    Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800d858:	23ec      	movs	r3, #236	; 0xec
 800d85a:	75fb      	strb	r3, [r7, #23]

  return Status;
 800d85c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d860:	4618      	mov	r0, r3
 800d862:	3718      	adds	r7, #24
 800d864:	46bd      	mov	sp, r7
 800d866:	bd80      	pop	{r7, pc}

0800d868 <VL53L0X_RdWord>:

VL53L0X_Error VL53L0X_RdWord(VL53L0X_DEV Dev, uint8_t index, uint16_t *data) {
 800d868:	b580      	push	{r7, lr}
 800d86a:	b086      	sub	sp, #24
 800d86c:	af00      	add	r7, sp, #0
 800d86e:	60f8      	str	r0, [r7, #12]
 800d870:	460b      	mov	r3, r1
 800d872:	607a      	str	r2, [r7, #4]
 800d874:	72fb      	strb	r3, [r7, #11]
  VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800d876:	2300      	movs	r3, #0
 800d878:	75fb      	strb	r3, [r7, #23]
  int32_t status_int;
  uint8_t deviceAddress;

  deviceAddress = Dev->I2cDevAddr;
 800d87a:	68fb      	ldr	r3, [r7, #12]
 800d87c:	f893 315c 	ldrb.w	r3, [r3, #348]	; 0x15c
 800d880:	75bb      	strb	r3, [r7, #22]

  status_int = VL53L0X_read_word(deviceAddress, index, data, Dev->hi2c);
 800d882:	68fb      	ldr	r3, [r7, #12]
 800d884:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 800d888:	7af9      	ldrb	r1, [r7, #11]
 800d88a:	7db8      	ldrb	r0, [r7, #22]
 800d88c:	687a      	ldr	r2, [r7, #4]
 800d88e:	f7ff ff2f 	bl	800d6f0 <_Z17VL53L0X_read_wordhhPtP19__I2C_HandleTypeDef>
 800d892:	6138      	str	r0, [r7, #16]

  if (status_int != 0)
 800d894:	693b      	ldr	r3, [r7, #16]
 800d896:	2b00      	cmp	r3, #0
 800d898:	d001      	beq.n	800d89e <VL53L0X_RdWord+0x36>
    Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800d89a:	23ec      	movs	r3, #236	; 0xec
 800d89c:	75fb      	strb	r3, [r7, #23]

  return Status;
 800d89e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d8a2:	4618      	mov	r0, r3
 800d8a4:	3718      	adds	r7, #24
 800d8a6:	46bd      	mov	sp, r7
 800d8a8:	bd80      	pop	{r7, pc}

0800d8aa <VL53L0X_PollingDelay>:

  return Status;
}

#define VL53L0X_POLLINGDELAY_LOOPNB 250
VL53L0X_Error VL53L0X_PollingDelay(VL53L0X_DEV Dev) {
 800d8aa:	b480      	push	{r7}
 800d8ac:	b085      	sub	sp, #20
 800d8ae:	af00      	add	r7, sp, #0
 800d8b0:	6078      	str	r0, [r7, #4]
  VL53L0X_Error status = VL53L0X_ERROR_NONE;
 800d8b2:	2300      	movs	r3, #0
 800d8b4:	73fb      	strb	r3, [r7, #15]
  volatile uint32_t i;
  LOG_FUNCTION_START("");

  for (i = 0; i < VL53L0X_POLLINGDELAY_LOOPNB; i++) {
 800d8b6:	2300      	movs	r3, #0
 800d8b8:	60bb      	str	r3, [r7, #8]
 800d8ba:	68bb      	ldr	r3, [r7, #8]
 800d8bc:	2bf9      	cmp	r3, #249	; 0xf9
 800d8be:	bf94      	ite	ls
 800d8c0:	2301      	movls	r3, #1
 800d8c2:	2300      	movhi	r3, #0
 800d8c4:	b2db      	uxtb	r3, r3
 800d8c6:	2b00      	cmp	r3, #0
 800d8c8:	d004      	beq.n	800d8d4 <VL53L0X_PollingDelay+0x2a>
    // Do nothing
    asm("nop");
 800d8ca:	bf00      	nop
  for (i = 0; i < VL53L0X_POLLINGDELAY_LOOPNB; i++) {
 800d8cc:	68bb      	ldr	r3, [r7, #8]
 800d8ce:	3301      	adds	r3, #1
 800d8d0:	60bb      	str	r3, [r7, #8]
 800d8d2:	e7f2      	b.n	800d8ba <VL53L0X_PollingDelay+0x10>
  }

  LOG_FUNCTION_END(status);
  return status;
 800d8d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800d8d8:	4618      	mov	r0, r3
 800d8da:	3714      	adds	r7, #20
 800d8dc:	46bd      	mov	sp, r7
 800d8de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8e2:	4770      	bx	lr

0800d8e4 <__errno>:
 800d8e4:	4b01      	ldr	r3, [pc, #4]	; (800d8ec <__errno+0x8>)
 800d8e6:	6818      	ldr	r0, [r3, #0]
 800d8e8:	4770      	bx	lr
 800d8ea:	bf00      	nop
 800d8ec:	24000250 	.word	0x24000250

0800d8f0 <__libc_init_array>:
 800d8f0:	b570      	push	{r4, r5, r6, lr}
 800d8f2:	4e0d      	ldr	r6, [pc, #52]	; (800d928 <__libc_init_array+0x38>)
 800d8f4:	4c0d      	ldr	r4, [pc, #52]	; (800d92c <__libc_init_array+0x3c>)
 800d8f6:	1ba4      	subs	r4, r4, r6
 800d8f8:	10a4      	asrs	r4, r4, #2
 800d8fa:	2500      	movs	r5, #0
 800d8fc:	42a5      	cmp	r5, r4
 800d8fe:	d109      	bne.n	800d914 <__libc_init_array+0x24>
 800d900:	4e0b      	ldr	r6, [pc, #44]	; (800d930 <__libc_init_array+0x40>)
 800d902:	4c0c      	ldr	r4, [pc, #48]	; (800d934 <__libc_init_array+0x44>)
 800d904:	f000 ffb2 	bl	800e86c <_init>
 800d908:	1ba4      	subs	r4, r4, r6
 800d90a:	10a4      	asrs	r4, r4, #2
 800d90c:	2500      	movs	r5, #0
 800d90e:	42a5      	cmp	r5, r4
 800d910:	d105      	bne.n	800d91e <__libc_init_array+0x2e>
 800d912:	bd70      	pop	{r4, r5, r6, pc}
 800d914:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800d918:	4798      	blx	r3
 800d91a:	3501      	adds	r5, #1
 800d91c:	e7ee      	b.n	800d8fc <__libc_init_array+0xc>
 800d91e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800d922:	4798      	blx	r3
 800d924:	3501      	adds	r5, #1
 800d926:	e7f2      	b.n	800d90e <__libc_init_array+0x1e>
 800d928:	0800f3c0 	.word	0x0800f3c0
 800d92c:	0800f3c0 	.word	0x0800f3c0
 800d930:	0800f3c0 	.word	0x0800f3c0
 800d934:	0800f3c8 	.word	0x0800f3c8

0800d938 <memset>:
 800d938:	4402      	add	r2, r0
 800d93a:	4603      	mov	r3, r0
 800d93c:	4293      	cmp	r3, r2
 800d93e:	d100      	bne.n	800d942 <memset+0xa>
 800d940:	4770      	bx	lr
 800d942:	f803 1b01 	strb.w	r1, [r3], #1
 800d946:	e7f9      	b.n	800d93c <memset+0x4>

0800d948 <iprintf>:
 800d948:	b40f      	push	{r0, r1, r2, r3}
 800d94a:	4b0a      	ldr	r3, [pc, #40]	; (800d974 <iprintf+0x2c>)
 800d94c:	b513      	push	{r0, r1, r4, lr}
 800d94e:	681c      	ldr	r4, [r3, #0]
 800d950:	b124      	cbz	r4, 800d95c <iprintf+0x14>
 800d952:	69a3      	ldr	r3, [r4, #24]
 800d954:	b913      	cbnz	r3, 800d95c <iprintf+0x14>
 800d956:	4620      	mov	r0, r4
 800d958:	f000 fa36 	bl	800ddc8 <__sinit>
 800d95c:	ab05      	add	r3, sp, #20
 800d95e:	9a04      	ldr	r2, [sp, #16]
 800d960:	68a1      	ldr	r1, [r4, #8]
 800d962:	9301      	str	r3, [sp, #4]
 800d964:	4620      	mov	r0, r4
 800d966:	f000 fbef 	bl	800e148 <_vfiprintf_r>
 800d96a:	b002      	add	sp, #8
 800d96c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d970:	b004      	add	sp, #16
 800d972:	4770      	bx	lr
 800d974:	24000250 	.word	0x24000250

0800d978 <putchar>:
 800d978:	b538      	push	{r3, r4, r5, lr}
 800d97a:	4b08      	ldr	r3, [pc, #32]	; (800d99c <putchar+0x24>)
 800d97c:	681c      	ldr	r4, [r3, #0]
 800d97e:	4605      	mov	r5, r0
 800d980:	b124      	cbz	r4, 800d98c <putchar+0x14>
 800d982:	69a3      	ldr	r3, [r4, #24]
 800d984:	b913      	cbnz	r3, 800d98c <putchar+0x14>
 800d986:	4620      	mov	r0, r4
 800d988:	f000 fa1e 	bl	800ddc8 <__sinit>
 800d98c:	68a2      	ldr	r2, [r4, #8]
 800d98e:	4629      	mov	r1, r5
 800d990:	4620      	mov	r0, r4
 800d992:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d996:	f000 be75 	b.w	800e684 <_putc_r>
 800d99a:	bf00      	nop
 800d99c:	24000250 	.word	0x24000250

0800d9a0 <_puts_r>:
 800d9a0:	b570      	push	{r4, r5, r6, lr}
 800d9a2:	460e      	mov	r6, r1
 800d9a4:	4605      	mov	r5, r0
 800d9a6:	b118      	cbz	r0, 800d9b0 <_puts_r+0x10>
 800d9a8:	6983      	ldr	r3, [r0, #24]
 800d9aa:	b90b      	cbnz	r3, 800d9b0 <_puts_r+0x10>
 800d9ac:	f000 fa0c 	bl	800ddc8 <__sinit>
 800d9b0:	69ab      	ldr	r3, [r5, #24]
 800d9b2:	68ac      	ldr	r4, [r5, #8]
 800d9b4:	b913      	cbnz	r3, 800d9bc <_puts_r+0x1c>
 800d9b6:	4628      	mov	r0, r5
 800d9b8:	f000 fa06 	bl	800ddc8 <__sinit>
 800d9bc:	4b23      	ldr	r3, [pc, #140]	; (800da4c <_puts_r+0xac>)
 800d9be:	429c      	cmp	r4, r3
 800d9c0:	d117      	bne.n	800d9f2 <_puts_r+0x52>
 800d9c2:	686c      	ldr	r4, [r5, #4]
 800d9c4:	89a3      	ldrh	r3, [r4, #12]
 800d9c6:	071b      	lsls	r3, r3, #28
 800d9c8:	d51d      	bpl.n	800da06 <_puts_r+0x66>
 800d9ca:	6923      	ldr	r3, [r4, #16]
 800d9cc:	b1db      	cbz	r3, 800da06 <_puts_r+0x66>
 800d9ce:	3e01      	subs	r6, #1
 800d9d0:	68a3      	ldr	r3, [r4, #8]
 800d9d2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800d9d6:	3b01      	subs	r3, #1
 800d9d8:	60a3      	str	r3, [r4, #8]
 800d9da:	b9e9      	cbnz	r1, 800da18 <_puts_r+0x78>
 800d9dc:	2b00      	cmp	r3, #0
 800d9de:	da2e      	bge.n	800da3e <_puts_r+0x9e>
 800d9e0:	4622      	mov	r2, r4
 800d9e2:	210a      	movs	r1, #10
 800d9e4:	4628      	mov	r0, r5
 800d9e6:	f000 f83f 	bl	800da68 <__swbuf_r>
 800d9ea:	3001      	adds	r0, #1
 800d9ec:	d011      	beq.n	800da12 <_puts_r+0x72>
 800d9ee:	200a      	movs	r0, #10
 800d9f0:	e011      	b.n	800da16 <_puts_r+0x76>
 800d9f2:	4b17      	ldr	r3, [pc, #92]	; (800da50 <_puts_r+0xb0>)
 800d9f4:	429c      	cmp	r4, r3
 800d9f6:	d101      	bne.n	800d9fc <_puts_r+0x5c>
 800d9f8:	68ac      	ldr	r4, [r5, #8]
 800d9fa:	e7e3      	b.n	800d9c4 <_puts_r+0x24>
 800d9fc:	4b15      	ldr	r3, [pc, #84]	; (800da54 <_puts_r+0xb4>)
 800d9fe:	429c      	cmp	r4, r3
 800da00:	bf08      	it	eq
 800da02:	68ec      	ldreq	r4, [r5, #12]
 800da04:	e7de      	b.n	800d9c4 <_puts_r+0x24>
 800da06:	4621      	mov	r1, r4
 800da08:	4628      	mov	r0, r5
 800da0a:	f000 f87f 	bl	800db0c <__swsetup_r>
 800da0e:	2800      	cmp	r0, #0
 800da10:	d0dd      	beq.n	800d9ce <_puts_r+0x2e>
 800da12:	f04f 30ff 	mov.w	r0, #4294967295
 800da16:	bd70      	pop	{r4, r5, r6, pc}
 800da18:	2b00      	cmp	r3, #0
 800da1a:	da04      	bge.n	800da26 <_puts_r+0x86>
 800da1c:	69a2      	ldr	r2, [r4, #24]
 800da1e:	429a      	cmp	r2, r3
 800da20:	dc06      	bgt.n	800da30 <_puts_r+0x90>
 800da22:	290a      	cmp	r1, #10
 800da24:	d004      	beq.n	800da30 <_puts_r+0x90>
 800da26:	6823      	ldr	r3, [r4, #0]
 800da28:	1c5a      	adds	r2, r3, #1
 800da2a:	6022      	str	r2, [r4, #0]
 800da2c:	7019      	strb	r1, [r3, #0]
 800da2e:	e7cf      	b.n	800d9d0 <_puts_r+0x30>
 800da30:	4622      	mov	r2, r4
 800da32:	4628      	mov	r0, r5
 800da34:	f000 f818 	bl	800da68 <__swbuf_r>
 800da38:	3001      	adds	r0, #1
 800da3a:	d1c9      	bne.n	800d9d0 <_puts_r+0x30>
 800da3c:	e7e9      	b.n	800da12 <_puts_r+0x72>
 800da3e:	6823      	ldr	r3, [r4, #0]
 800da40:	200a      	movs	r0, #10
 800da42:	1c5a      	adds	r2, r3, #1
 800da44:	6022      	str	r2, [r4, #0]
 800da46:	7018      	strb	r0, [r3, #0]
 800da48:	e7e5      	b.n	800da16 <_puts_r+0x76>
 800da4a:	bf00      	nop
 800da4c:	0800f344 	.word	0x0800f344
 800da50:	0800f364 	.word	0x0800f364
 800da54:	0800f324 	.word	0x0800f324

0800da58 <puts>:
 800da58:	4b02      	ldr	r3, [pc, #8]	; (800da64 <puts+0xc>)
 800da5a:	4601      	mov	r1, r0
 800da5c:	6818      	ldr	r0, [r3, #0]
 800da5e:	f7ff bf9f 	b.w	800d9a0 <_puts_r>
 800da62:	bf00      	nop
 800da64:	24000250 	.word	0x24000250

0800da68 <__swbuf_r>:
 800da68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800da6a:	460e      	mov	r6, r1
 800da6c:	4614      	mov	r4, r2
 800da6e:	4605      	mov	r5, r0
 800da70:	b118      	cbz	r0, 800da7a <__swbuf_r+0x12>
 800da72:	6983      	ldr	r3, [r0, #24]
 800da74:	b90b      	cbnz	r3, 800da7a <__swbuf_r+0x12>
 800da76:	f000 f9a7 	bl	800ddc8 <__sinit>
 800da7a:	4b21      	ldr	r3, [pc, #132]	; (800db00 <__swbuf_r+0x98>)
 800da7c:	429c      	cmp	r4, r3
 800da7e:	d12a      	bne.n	800dad6 <__swbuf_r+0x6e>
 800da80:	686c      	ldr	r4, [r5, #4]
 800da82:	69a3      	ldr	r3, [r4, #24]
 800da84:	60a3      	str	r3, [r4, #8]
 800da86:	89a3      	ldrh	r3, [r4, #12]
 800da88:	071a      	lsls	r2, r3, #28
 800da8a:	d52e      	bpl.n	800daea <__swbuf_r+0x82>
 800da8c:	6923      	ldr	r3, [r4, #16]
 800da8e:	b363      	cbz	r3, 800daea <__swbuf_r+0x82>
 800da90:	6923      	ldr	r3, [r4, #16]
 800da92:	6820      	ldr	r0, [r4, #0]
 800da94:	1ac0      	subs	r0, r0, r3
 800da96:	6963      	ldr	r3, [r4, #20]
 800da98:	b2f6      	uxtb	r6, r6
 800da9a:	4283      	cmp	r3, r0
 800da9c:	4637      	mov	r7, r6
 800da9e:	dc04      	bgt.n	800daaa <__swbuf_r+0x42>
 800daa0:	4621      	mov	r1, r4
 800daa2:	4628      	mov	r0, r5
 800daa4:	f000 f926 	bl	800dcf4 <_fflush_r>
 800daa8:	bb28      	cbnz	r0, 800daf6 <__swbuf_r+0x8e>
 800daaa:	68a3      	ldr	r3, [r4, #8]
 800daac:	3b01      	subs	r3, #1
 800daae:	60a3      	str	r3, [r4, #8]
 800dab0:	6823      	ldr	r3, [r4, #0]
 800dab2:	1c5a      	adds	r2, r3, #1
 800dab4:	6022      	str	r2, [r4, #0]
 800dab6:	701e      	strb	r6, [r3, #0]
 800dab8:	6963      	ldr	r3, [r4, #20]
 800daba:	3001      	adds	r0, #1
 800dabc:	4283      	cmp	r3, r0
 800dabe:	d004      	beq.n	800daca <__swbuf_r+0x62>
 800dac0:	89a3      	ldrh	r3, [r4, #12]
 800dac2:	07db      	lsls	r3, r3, #31
 800dac4:	d519      	bpl.n	800dafa <__swbuf_r+0x92>
 800dac6:	2e0a      	cmp	r6, #10
 800dac8:	d117      	bne.n	800dafa <__swbuf_r+0x92>
 800daca:	4621      	mov	r1, r4
 800dacc:	4628      	mov	r0, r5
 800dace:	f000 f911 	bl	800dcf4 <_fflush_r>
 800dad2:	b190      	cbz	r0, 800dafa <__swbuf_r+0x92>
 800dad4:	e00f      	b.n	800daf6 <__swbuf_r+0x8e>
 800dad6:	4b0b      	ldr	r3, [pc, #44]	; (800db04 <__swbuf_r+0x9c>)
 800dad8:	429c      	cmp	r4, r3
 800dada:	d101      	bne.n	800dae0 <__swbuf_r+0x78>
 800dadc:	68ac      	ldr	r4, [r5, #8]
 800dade:	e7d0      	b.n	800da82 <__swbuf_r+0x1a>
 800dae0:	4b09      	ldr	r3, [pc, #36]	; (800db08 <__swbuf_r+0xa0>)
 800dae2:	429c      	cmp	r4, r3
 800dae4:	bf08      	it	eq
 800dae6:	68ec      	ldreq	r4, [r5, #12]
 800dae8:	e7cb      	b.n	800da82 <__swbuf_r+0x1a>
 800daea:	4621      	mov	r1, r4
 800daec:	4628      	mov	r0, r5
 800daee:	f000 f80d 	bl	800db0c <__swsetup_r>
 800daf2:	2800      	cmp	r0, #0
 800daf4:	d0cc      	beq.n	800da90 <__swbuf_r+0x28>
 800daf6:	f04f 37ff 	mov.w	r7, #4294967295
 800dafa:	4638      	mov	r0, r7
 800dafc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dafe:	bf00      	nop
 800db00:	0800f344 	.word	0x0800f344
 800db04:	0800f364 	.word	0x0800f364
 800db08:	0800f324 	.word	0x0800f324

0800db0c <__swsetup_r>:
 800db0c:	4b32      	ldr	r3, [pc, #200]	; (800dbd8 <__swsetup_r+0xcc>)
 800db0e:	b570      	push	{r4, r5, r6, lr}
 800db10:	681d      	ldr	r5, [r3, #0]
 800db12:	4606      	mov	r6, r0
 800db14:	460c      	mov	r4, r1
 800db16:	b125      	cbz	r5, 800db22 <__swsetup_r+0x16>
 800db18:	69ab      	ldr	r3, [r5, #24]
 800db1a:	b913      	cbnz	r3, 800db22 <__swsetup_r+0x16>
 800db1c:	4628      	mov	r0, r5
 800db1e:	f000 f953 	bl	800ddc8 <__sinit>
 800db22:	4b2e      	ldr	r3, [pc, #184]	; (800dbdc <__swsetup_r+0xd0>)
 800db24:	429c      	cmp	r4, r3
 800db26:	d10f      	bne.n	800db48 <__swsetup_r+0x3c>
 800db28:	686c      	ldr	r4, [r5, #4]
 800db2a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800db2e:	b29a      	uxth	r2, r3
 800db30:	0715      	lsls	r5, r2, #28
 800db32:	d42c      	bmi.n	800db8e <__swsetup_r+0x82>
 800db34:	06d0      	lsls	r0, r2, #27
 800db36:	d411      	bmi.n	800db5c <__swsetup_r+0x50>
 800db38:	2209      	movs	r2, #9
 800db3a:	6032      	str	r2, [r6, #0]
 800db3c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800db40:	81a3      	strh	r3, [r4, #12]
 800db42:	f04f 30ff 	mov.w	r0, #4294967295
 800db46:	e03e      	b.n	800dbc6 <__swsetup_r+0xba>
 800db48:	4b25      	ldr	r3, [pc, #148]	; (800dbe0 <__swsetup_r+0xd4>)
 800db4a:	429c      	cmp	r4, r3
 800db4c:	d101      	bne.n	800db52 <__swsetup_r+0x46>
 800db4e:	68ac      	ldr	r4, [r5, #8]
 800db50:	e7eb      	b.n	800db2a <__swsetup_r+0x1e>
 800db52:	4b24      	ldr	r3, [pc, #144]	; (800dbe4 <__swsetup_r+0xd8>)
 800db54:	429c      	cmp	r4, r3
 800db56:	bf08      	it	eq
 800db58:	68ec      	ldreq	r4, [r5, #12]
 800db5a:	e7e6      	b.n	800db2a <__swsetup_r+0x1e>
 800db5c:	0751      	lsls	r1, r2, #29
 800db5e:	d512      	bpl.n	800db86 <__swsetup_r+0x7a>
 800db60:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800db62:	b141      	cbz	r1, 800db76 <__swsetup_r+0x6a>
 800db64:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800db68:	4299      	cmp	r1, r3
 800db6a:	d002      	beq.n	800db72 <__swsetup_r+0x66>
 800db6c:	4630      	mov	r0, r6
 800db6e:	f000 fa19 	bl	800dfa4 <_free_r>
 800db72:	2300      	movs	r3, #0
 800db74:	6363      	str	r3, [r4, #52]	; 0x34
 800db76:	89a3      	ldrh	r3, [r4, #12]
 800db78:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800db7c:	81a3      	strh	r3, [r4, #12]
 800db7e:	2300      	movs	r3, #0
 800db80:	6063      	str	r3, [r4, #4]
 800db82:	6923      	ldr	r3, [r4, #16]
 800db84:	6023      	str	r3, [r4, #0]
 800db86:	89a3      	ldrh	r3, [r4, #12]
 800db88:	f043 0308 	orr.w	r3, r3, #8
 800db8c:	81a3      	strh	r3, [r4, #12]
 800db8e:	6923      	ldr	r3, [r4, #16]
 800db90:	b94b      	cbnz	r3, 800dba6 <__swsetup_r+0x9a>
 800db92:	89a3      	ldrh	r3, [r4, #12]
 800db94:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800db98:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800db9c:	d003      	beq.n	800dba6 <__swsetup_r+0x9a>
 800db9e:	4621      	mov	r1, r4
 800dba0:	4630      	mov	r0, r6
 800dba2:	f000 f9bf 	bl	800df24 <__smakebuf_r>
 800dba6:	89a2      	ldrh	r2, [r4, #12]
 800dba8:	f012 0301 	ands.w	r3, r2, #1
 800dbac:	d00c      	beq.n	800dbc8 <__swsetup_r+0xbc>
 800dbae:	2300      	movs	r3, #0
 800dbb0:	60a3      	str	r3, [r4, #8]
 800dbb2:	6963      	ldr	r3, [r4, #20]
 800dbb4:	425b      	negs	r3, r3
 800dbb6:	61a3      	str	r3, [r4, #24]
 800dbb8:	6923      	ldr	r3, [r4, #16]
 800dbba:	b953      	cbnz	r3, 800dbd2 <__swsetup_r+0xc6>
 800dbbc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dbc0:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800dbc4:	d1ba      	bne.n	800db3c <__swsetup_r+0x30>
 800dbc6:	bd70      	pop	{r4, r5, r6, pc}
 800dbc8:	0792      	lsls	r2, r2, #30
 800dbca:	bf58      	it	pl
 800dbcc:	6963      	ldrpl	r3, [r4, #20]
 800dbce:	60a3      	str	r3, [r4, #8]
 800dbd0:	e7f2      	b.n	800dbb8 <__swsetup_r+0xac>
 800dbd2:	2000      	movs	r0, #0
 800dbd4:	e7f7      	b.n	800dbc6 <__swsetup_r+0xba>
 800dbd6:	bf00      	nop
 800dbd8:	24000250 	.word	0x24000250
 800dbdc:	0800f344 	.word	0x0800f344
 800dbe0:	0800f364 	.word	0x0800f364
 800dbe4:	0800f324 	.word	0x0800f324

0800dbe8 <__sflush_r>:
 800dbe8:	898a      	ldrh	r2, [r1, #12]
 800dbea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dbee:	4605      	mov	r5, r0
 800dbf0:	0710      	lsls	r0, r2, #28
 800dbf2:	460c      	mov	r4, r1
 800dbf4:	d458      	bmi.n	800dca8 <__sflush_r+0xc0>
 800dbf6:	684b      	ldr	r3, [r1, #4]
 800dbf8:	2b00      	cmp	r3, #0
 800dbfa:	dc05      	bgt.n	800dc08 <__sflush_r+0x20>
 800dbfc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800dbfe:	2b00      	cmp	r3, #0
 800dc00:	dc02      	bgt.n	800dc08 <__sflush_r+0x20>
 800dc02:	2000      	movs	r0, #0
 800dc04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dc08:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800dc0a:	2e00      	cmp	r6, #0
 800dc0c:	d0f9      	beq.n	800dc02 <__sflush_r+0x1a>
 800dc0e:	2300      	movs	r3, #0
 800dc10:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800dc14:	682f      	ldr	r7, [r5, #0]
 800dc16:	6a21      	ldr	r1, [r4, #32]
 800dc18:	602b      	str	r3, [r5, #0]
 800dc1a:	d032      	beq.n	800dc82 <__sflush_r+0x9a>
 800dc1c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800dc1e:	89a3      	ldrh	r3, [r4, #12]
 800dc20:	075a      	lsls	r2, r3, #29
 800dc22:	d505      	bpl.n	800dc30 <__sflush_r+0x48>
 800dc24:	6863      	ldr	r3, [r4, #4]
 800dc26:	1ac0      	subs	r0, r0, r3
 800dc28:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800dc2a:	b10b      	cbz	r3, 800dc30 <__sflush_r+0x48>
 800dc2c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800dc2e:	1ac0      	subs	r0, r0, r3
 800dc30:	2300      	movs	r3, #0
 800dc32:	4602      	mov	r2, r0
 800dc34:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800dc36:	6a21      	ldr	r1, [r4, #32]
 800dc38:	4628      	mov	r0, r5
 800dc3a:	47b0      	blx	r6
 800dc3c:	1c43      	adds	r3, r0, #1
 800dc3e:	89a3      	ldrh	r3, [r4, #12]
 800dc40:	d106      	bne.n	800dc50 <__sflush_r+0x68>
 800dc42:	6829      	ldr	r1, [r5, #0]
 800dc44:	291d      	cmp	r1, #29
 800dc46:	d848      	bhi.n	800dcda <__sflush_r+0xf2>
 800dc48:	4a29      	ldr	r2, [pc, #164]	; (800dcf0 <__sflush_r+0x108>)
 800dc4a:	40ca      	lsrs	r2, r1
 800dc4c:	07d6      	lsls	r6, r2, #31
 800dc4e:	d544      	bpl.n	800dcda <__sflush_r+0xf2>
 800dc50:	2200      	movs	r2, #0
 800dc52:	6062      	str	r2, [r4, #4]
 800dc54:	04d9      	lsls	r1, r3, #19
 800dc56:	6922      	ldr	r2, [r4, #16]
 800dc58:	6022      	str	r2, [r4, #0]
 800dc5a:	d504      	bpl.n	800dc66 <__sflush_r+0x7e>
 800dc5c:	1c42      	adds	r2, r0, #1
 800dc5e:	d101      	bne.n	800dc64 <__sflush_r+0x7c>
 800dc60:	682b      	ldr	r3, [r5, #0]
 800dc62:	b903      	cbnz	r3, 800dc66 <__sflush_r+0x7e>
 800dc64:	6560      	str	r0, [r4, #84]	; 0x54
 800dc66:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800dc68:	602f      	str	r7, [r5, #0]
 800dc6a:	2900      	cmp	r1, #0
 800dc6c:	d0c9      	beq.n	800dc02 <__sflush_r+0x1a>
 800dc6e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800dc72:	4299      	cmp	r1, r3
 800dc74:	d002      	beq.n	800dc7c <__sflush_r+0x94>
 800dc76:	4628      	mov	r0, r5
 800dc78:	f000 f994 	bl	800dfa4 <_free_r>
 800dc7c:	2000      	movs	r0, #0
 800dc7e:	6360      	str	r0, [r4, #52]	; 0x34
 800dc80:	e7c0      	b.n	800dc04 <__sflush_r+0x1c>
 800dc82:	2301      	movs	r3, #1
 800dc84:	4628      	mov	r0, r5
 800dc86:	47b0      	blx	r6
 800dc88:	1c41      	adds	r1, r0, #1
 800dc8a:	d1c8      	bne.n	800dc1e <__sflush_r+0x36>
 800dc8c:	682b      	ldr	r3, [r5, #0]
 800dc8e:	2b00      	cmp	r3, #0
 800dc90:	d0c5      	beq.n	800dc1e <__sflush_r+0x36>
 800dc92:	2b1d      	cmp	r3, #29
 800dc94:	d001      	beq.n	800dc9a <__sflush_r+0xb2>
 800dc96:	2b16      	cmp	r3, #22
 800dc98:	d101      	bne.n	800dc9e <__sflush_r+0xb6>
 800dc9a:	602f      	str	r7, [r5, #0]
 800dc9c:	e7b1      	b.n	800dc02 <__sflush_r+0x1a>
 800dc9e:	89a3      	ldrh	r3, [r4, #12]
 800dca0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dca4:	81a3      	strh	r3, [r4, #12]
 800dca6:	e7ad      	b.n	800dc04 <__sflush_r+0x1c>
 800dca8:	690f      	ldr	r7, [r1, #16]
 800dcaa:	2f00      	cmp	r7, #0
 800dcac:	d0a9      	beq.n	800dc02 <__sflush_r+0x1a>
 800dcae:	0793      	lsls	r3, r2, #30
 800dcb0:	680e      	ldr	r6, [r1, #0]
 800dcb2:	bf08      	it	eq
 800dcb4:	694b      	ldreq	r3, [r1, #20]
 800dcb6:	600f      	str	r7, [r1, #0]
 800dcb8:	bf18      	it	ne
 800dcba:	2300      	movne	r3, #0
 800dcbc:	eba6 0807 	sub.w	r8, r6, r7
 800dcc0:	608b      	str	r3, [r1, #8]
 800dcc2:	f1b8 0f00 	cmp.w	r8, #0
 800dcc6:	dd9c      	ble.n	800dc02 <__sflush_r+0x1a>
 800dcc8:	4643      	mov	r3, r8
 800dcca:	463a      	mov	r2, r7
 800dccc:	6a21      	ldr	r1, [r4, #32]
 800dcce:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800dcd0:	4628      	mov	r0, r5
 800dcd2:	47b0      	blx	r6
 800dcd4:	2800      	cmp	r0, #0
 800dcd6:	dc06      	bgt.n	800dce6 <__sflush_r+0xfe>
 800dcd8:	89a3      	ldrh	r3, [r4, #12]
 800dcda:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dcde:	81a3      	strh	r3, [r4, #12]
 800dce0:	f04f 30ff 	mov.w	r0, #4294967295
 800dce4:	e78e      	b.n	800dc04 <__sflush_r+0x1c>
 800dce6:	4407      	add	r7, r0
 800dce8:	eba8 0800 	sub.w	r8, r8, r0
 800dcec:	e7e9      	b.n	800dcc2 <__sflush_r+0xda>
 800dcee:	bf00      	nop
 800dcf0:	20400001 	.word	0x20400001

0800dcf4 <_fflush_r>:
 800dcf4:	b538      	push	{r3, r4, r5, lr}
 800dcf6:	690b      	ldr	r3, [r1, #16]
 800dcf8:	4605      	mov	r5, r0
 800dcfa:	460c      	mov	r4, r1
 800dcfc:	b1db      	cbz	r3, 800dd36 <_fflush_r+0x42>
 800dcfe:	b118      	cbz	r0, 800dd08 <_fflush_r+0x14>
 800dd00:	6983      	ldr	r3, [r0, #24]
 800dd02:	b90b      	cbnz	r3, 800dd08 <_fflush_r+0x14>
 800dd04:	f000 f860 	bl	800ddc8 <__sinit>
 800dd08:	4b0c      	ldr	r3, [pc, #48]	; (800dd3c <_fflush_r+0x48>)
 800dd0a:	429c      	cmp	r4, r3
 800dd0c:	d109      	bne.n	800dd22 <_fflush_r+0x2e>
 800dd0e:	686c      	ldr	r4, [r5, #4]
 800dd10:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dd14:	b17b      	cbz	r3, 800dd36 <_fflush_r+0x42>
 800dd16:	4621      	mov	r1, r4
 800dd18:	4628      	mov	r0, r5
 800dd1a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dd1e:	f7ff bf63 	b.w	800dbe8 <__sflush_r>
 800dd22:	4b07      	ldr	r3, [pc, #28]	; (800dd40 <_fflush_r+0x4c>)
 800dd24:	429c      	cmp	r4, r3
 800dd26:	d101      	bne.n	800dd2c <_fflush_r+0x38>
 800dd28:	68ac      	ldr	r4, [r5, #8]
 800dd2a:	e7f1      	b.n	800dd10 <_fflush_r+0x1c>
 800dd2c:	4b05      	ldr	r3, [pc, #20]	; (800dd44 <_fflush_r+0x50>)
 800dd2e:	429c      	cmp	r4, r3
 800dd30:	bf08      	it	eq
 800dd32:	68ec      	ldreq	r4, [r5, #12]
 800dd34:	e7ec      	b.n	800dd10 <_fflush_r+0x1c>
 800dd36:	2000      	movs	r0, #0
 800dd38:	bd38      	pop	{r3, r4, r5, pc}
 800dd3a:	bf00      	nop
 800dd3c:	0800f344 	.word	0x0800f344
 800dd40:	0800f364 	.word	0x0800f364
 800dd44:	0800f324 	.word	0x0800f324

0800dd48 <std>:
 800dd48:	2300      	movs	r3, #0
 800dd4a:	b510      	push	{r4, lr}
 800dd4c:	4604      	mov	r4, r0
 800dd4e:	e9c0 3300 	strd	r3, r3, [r0]
 800dd52:	6083      	str	r3, [r0, #8]
 800dd54:	8181      	strh	r1, [r0, #12]
 800dd56:	6643      	str	r3, [r0, #100]	; 0x64
 800dd58:	81c2      	strh	r2, [r0, #14]
 800dd5a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800dd5e:	6183      	str	r3, [r0, #24]
 800dd60:	4619      	mov	r1, r3
 800dd62:	2208      	movs	r2, #8
 800dd64:	305c      	adds	r0, #92	; 0x5c
 800dd66:	f7ff fde7 	bl	800d938 <memset>
 800dd6a:	4b05      	ldr	r3, [pc, #20]	; (800dd80 <std+0x38>)
 800dd6c:	6263      	str	r3, [r4, #36]	; 0x24
 800dd6e:	4b05      	ldr	r3, [pc, #20]	; (800dd84 <std+0x3c>)
 800dd70:	62a3      	str	r3, [r4, #40]	; 0x28
 800dd72:	4b05      	ldr	r3, [pc, #20]	; (800dd88 <std+0x40>)
 800dd74:	62e3      	str	r3, [r4, #44]	; 0x2c
 800dd76:	4b05      	ldr	r3, [pc, #20]	; (800dd8c <std+0x44>)
 800dd78:	6224      	str	r4, [r4, #32]
 800dd7a:	6323      	str	r3, [r4, #48]	; 0x30
 800dd7c:	bd10      	pop	{r4, pc}
 800dd7e:	bf00      	nop
 800dd80:	0800e711 	.word	0x0800e711
 800dd84:	0800e733 	.word	0x0800e733
 800dd88:	0800e76b 	.word	0x0800e76b
 800dd8c:	0800e78f 	.word	0x0800e78f

0800dd90 <_cleanup_r>:
 800dd90:	4901      	ldr	r1, [pc, #4]	; (800dd98 <_cleanup_r+0x8>)
 800dd92:	f000 b885 	b.w	800dea0 <_fwalk_reent>
 800dd96:	bf00      	nop
 800dd98:	0800dcf5 	.word	0x0800dcf5

0800dd9c <__sfmoreglue>:
 800dd9c:	b570      	push	{r4, r5, r6, lr}
 800dd9e:	1e4a      	subs	r2, r1, #1
 800dda0:	2568      	movs	r5, #104	; 0x68
 800dda2:	4355      	muls	r5, r2
 800dda4:	460e      	mov	r6, r1
 800dda6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800ddaa:	f000 f949 	bl	800e040 <_malloc_r>
 800ddae:	4604      	mov	r4, r0
 800ddb0:	b140      	cbz	r0, 800ddc4 <__sfmoreglue+0x28>
 800ddb2:	2100      	movs	r1, #0
 800ddb4:	e9c0 1600 	strd	r1, r6, [r0]
 800ddb8:	300c      	adds	r0, #12
 800ddba:	60a0      	str	r0, [r4, #8]
 800ddbc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800ddc0:	f7ff fdba 	bl	800d938 <memset>
 800ddc4:	4620      	mov	r0, r4
 800ddc6:	bd70      	pop	{r4, r5, r6, pc}

0800ddc8 <__sinit>:
 800ddc8:	6983      	ldr	r3, [r0, #24]
 800ddca:	b510      	push	{r4, lr}
 800ddcc:	4604      	mov	r4, r0
 800ddce:	bb33      	cbnz	r3, 800de1e <__sinit+0x56>
 800ddd0:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800ddd4:	6503      	str	r3, [r0, #80]	; 0x50
 800ddd6:	4b12      	ldr	r3, [pc, #72]	; (800de20 <__sinit+0x58>)
 800ddd8:	4a12      	ldr	r2, [pc, #72]	; (800de24 <__sinit+0x5c>)
 800ddda:	681b      	ldr	r3, [r3, #0]
 800dddc:	6282      	str	r2, [r0, #40]	; 0x28
 800ddde:	4298      	cmp	r0, r3
 800dde0:	bf04      	itt	eq
 800dde2:	2301      	moveq	r3, #1
 800dde4:	6183      	streq	r3, [r0, #24]
 800dde6:	f000 f81f 	bl	800de28 <__sfp>
 800ddea:	6060      	str	r0, [r4, #4]
 800ddec:	4620      	mov	r0, r4
 800ddee:	f000 f81b 	bl	800de28 <__sfp>
 800ddf2:	60a0      	str	r0, [r4, #8]
 800ddf4:	4620      	mov	r0, r4
 800ddf6:	f000 f817 	bl	800de28 <__sfp>
 800ddfa:	2200      	movs	r2, #0
 800ddfc:	60e0      	str	r0, [r4, #12]
 800ddfe:	2104      	movs	r1, #4
 800de00:	6860      	ldr	r0, [r4, #4]
 800de02:	f7ff ffa1 	bl	800dd48 <std>
 800de06:	2201      	movs	r2, #1
 800de08:	2109      	movs	r1, #9
 800de0a:	68a0      	ldr	r0, [r4, #8]
 800de0c:	f7ff ff9c 	bl	800dd48 <std>
 800de10:	2202      	movs	r2, #2
 800de12:	2112      	movs	r1, #18
 800de14:	68e0      	ldr	r0, [r4, #12]
 800de16:	f7ff ff97 	bl	800dd48 <std>
 800de1a:	2301      	movs	r3, #1
 800de1c:	61a3      	str	r3, [r4, #24]
 800de1e:	bd10      	pop	{r4, pc}
 800de20:	0800f320 	.word	0x0800f320
 800de24:	0800dd91 	.word	0x0800dd91

0800de28 <__sfp>:
 800de28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800de2a:	4b1b      	ldr	r3, [pc, #108]	; (800de98 <__sfp+0x70>)
 800de2c:	681e      	ldr	r6, [r3, #0]
 800de2e:	69b3      	ldr	r3, [r6, #24]
 800de30:	4607      	mov	r7, r0
 800de32:	b913      	cbnz	r3, 800de3a <__sfp+0x12>
 800de34:	4630      	mov	r0, r6
 800de36:	f7ff ffc7 	bl	800ddc8 <__sinit>
 800de3a:	3648      	adds	r6, #72	; 0x48
 800de3c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800de40:	3b01      	subs	r3, #1
 800de42:	d503      	bpl.n	800de4c <__sfp+0x24>
 800de44:	6833      	ldr	r3, [r6, #0]
 800de46:	b133      	cbz	r3, 800de56 <__sfp+0x2e>
 800de48:	6836      	ldr	r6, [r6, #0]
 800de4a:	e7f7      	b.n	800de3c <__sfp+0x14>
 800de4c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800de50:	b16d      	cbz	r5, 800de6e <__sfp+0x46>
 800de52:	3468      	adds	r4, #104	; 0x68
 800de54:	e7f4      	b.n	800de40 <__sfp+0x18>
 800de56:	2104      	movs	r1, #4
 800de58:	4638      	mov	r0, r7
 800de5a:	f7ff ff9f 	bl	800dd9c <__sfmoreglue>
 800de5e:	6030      	str	r0, [r6, #0]
 800de60:	2800      	cmp	r0, #0
 800de62:	d1f1      	bne.n	800de48 <__sfp+0x20>
 800de64:	230c      	movs	r3, #12
 800de66:	603b      	str	r3, [r7, #0]
 800de68:	4604      	mov	r4, r0
 800de6a:	4620      	mov	r0, r4
 800de6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800de6e:	4b0b      	ldr	r3, [pc, #44]	; (800de9c <__sfp+0x74>)
 800de70:	6665      	str	r5, [r4, #100]	; 0x64
 800de72:	e9c4 5500 	strd	r5, r5, [r4]
 800de76:	60a5      	str	r5, [r4, #8]
 800de78:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800de7c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800de80:	2208      	movs	r2, #8
 800de82:	4629      	mov	r1, r5
 800de84:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800de88:	f7ff fd56 	bl	800d938 <memset>
 800de8c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800de90:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800de94:	e7e9      	b.n	800de6a <__sfp+0x42>
 800de96:	bf00      	nop
 800de98:	0800f320 	.word	0x0800f320
 800de9c:	ffff0001 	.word	0xffff0001

0800dea0 <_fwalk_reent>:
 800dea0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dea4:	4680      	mov	r8, r0
 800dea6:	4689      	mov	r9, r1
 800dea8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800deac:	2600      	movs	r6, #0
 800deae:	b914      	cbnz	r4, 800deb6 <_fwalk_reent+0x16>
 800deb0:	4630      	mov	r0, r6
 800deb2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800deb6:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800deba:	3f01      	subs	r7, #1
 800debc:	d501      	bpl.n	800dec2 <_fwalk_reent+0x22>
 800debe:	6824      	ldr	r4, [r4, #0]
 800dec0:	e7f5      	b.n	800deae <_fwalk_reent+0xe>
 800dec2:	89ab      	ldrh	r3, [r5, #12]
 800dec4:	2b01      	cmp	r3, #1
 800dec6:	d907      	bls.n	800ded8 <_fwalk_reent+0x38>
 800dec8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800decc:	3301      	adds	r3, #1
 800dece:	d003      	beq.n	800ded8 <_fwalk_reent+0x38>
 800ded0:	4629      	mov	r1, r5
 800ded2:	4640      	mov	r0, r8
 800ded4:	47c8      	blx	r9
 800ded6:	4306      	orrs	r6, r0
 800ded8:	3568      	adds	r5, #104	; 0x68
 800deda:	e7ee      	b.n	800deba <_fwalk_reent+0x1a>

0800dedc <__swhatbuf_r>:
 800dedc:	b570      	push	{r4, r5, r6, lr}
 800dede:	460e      	mov	r6, r1
 800dee0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dee4:	2900      	cmp	r1, #0
 800dee6:	b096      	sub	sp, #88	; 0x58
 800dee8:	4614      	mov	r4, r2
 800deea:	461d      	mov	r5, r3
 800deec:	da07      	bge.n	800defe <__swhatbuf_r+0x22>
 800deee:	2300      	movs	r3, #0
 800def0:	602b      	str	r3, [r5, #0]
 800def2:	89b3      	ldrh	r3, [r6, #12]
 800def4:	061a      	lsls	r2, r3, #24
 800def6:	d410      	bmi.n	800df1a <__swhatbuf_r+0x3e>
 800def8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800defc:	e00e      	b.n	800df1c <__swhatbuf_r+0x40>
 800defe:	466a      	mov	r2, sp
 800df00:	f000 fc6c 	bl	800e7dc <_fstat_r>
 800df04:	2800      	cmp	r0, #0
 800df06:	dbf2      	blt.n	800deee <__swhatbuf_r+0x12>
 800df08:	9a01      	ldr	r2, [sp, #4]
 800df0a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800df0e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800df12:	425a      	negs	r2, r3
 800df14:	415a      	adcs	r2, r3
 800df16:	602a      	str	r2, [r5, #0]
 800df18:	e7ee      	b.n	800def8 <__swhatbuf_r+0x1c>
 800df1a:	2340      	movs	r3, #64	; 0x40
 800df1c:	2000      	movs	r0, #0
 800df1e:	6023      	str	r3, [r4, #0]
 800df20:	b016      	add	sp, #88	; 0x58
 800df22:	bd70      	pop	{r4, r5, r6, pc}

0800df24 <__smakebuf_r>:
 800df24:	898b      	ldrh	r3, [r1, #12]
 800df26:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800df28:	079d      	lsls	r5, r3, #30
 800df2a:	4606      	mov	r6, r0
 800df2c:	460c      	mov	r4, r1
 800df2e:	d507      	bpl.n	800df40 <__smakebuf_r+0x1c>
 800df30:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800df34:	6023      	str	r3, [r4, #0]
 800df36:	6123      	str	r3, [r4, #16]
 800df38:	2301      	movs	r3, #1
 800df3a:	6163      	str	r3, [r4, #20]
 800df3c:	b002      	add	sp, #8
 800df3e:	bd70      	pop	{r4, r5, r6, pc}
 800df40:	ab01      	add	r3, sp, #4
 800df42:	466a      	mov	r2, sp
 800df44:	f7ff ffca 	bl	800dedc <__swhatbuf_r>
 800df48:	9900      	ldr	r1, [sp, #0]
 800df4a:	4605      	mov	r5, r0
 800df4c:	4630      	mov	r0, r6
 800df4e:	f000 f877 	bl	800e040 <_malloc_r>
 800df52:	b948      	cbnz	r0, 800df68 <__smakebuf_r+0x44>
 800df54:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800df58:	059a      	lsls	r2, r3, #22
 800df5a:	d4ef      	bmi.n	800df3c <__smakebuf_r+0x18>
 800df5c:	f023 0303 	bic.w	r3, r3, #3
 800df60:	f043 0302 	orr.w	r3, r3, #2
 800df64:	81a3      	strh	r3, [r4, #12]
 800df66:	e7e3      	b.n	800df30 <__smakebuf_r+0xc>
 800df68:	4b0d      	ldr	r3, [pc, #52]	; (800dfa0 <__smakebuf_r+0x7c>)
 800df6a:	62b3      	str	r3, [r6, #40]	; 0x28
 800df6c:	89a3      	ldrh	r3, [r4, #12]
 800df6e:	6020      	str	r0, [r4, #0]
 800df70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800df74:	81a3      	strh	r3, [r4, #12]
 800df76:	9b00      	ldr	r3, [sp, #0]
 800df78:	6163      	str	r3, [r4, #20]
 800df7a:	9b01      	ldr	r3, [sp, #4]
 800df7c:	6120      	str	r0, [r4, #16]
 800df7e:	b15b      	cbz	r3, 800df98 <__smakebuf_r+0x74>
 800df80:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800df84:	4630      	mov	r0, r6
 800df86:	f000 fc3b 	bl	800e800 <_isatty_r>
 800df8a:	b128      	cbz	r0, 800df98 <__smakebuf_r+0x74>
 800df8c:	89a3      	ldrh	r3, [r4, #12]
 800df8e:	f023 0303 	bic.w	r3, r3, #3
 800df92:	f043 0301 	orr.w	r3, r3, #1
 800df96:	81a3      	strh	r3, [r4, #12]
 800df98:	89a3      	ldrh	r3, [r4, #12]
 800df9a:	431d      	orrs	r5, r3
 800df9c:	81a5      	strh	r5, [r4, #12]
 800df9e:	e7cd      	b.n	800df3c <__smakebuf_r+0x18>
 800dfa0:	0800dd91 	.word	0x0800dd91

0800dfa4 <_free_r>:
 800dfa4:	b538      	push	{r3, r4, r5, lr}
 800dfa6:	4605      	mov	r5, r0
 800dfa8:	2900      	cmp	r1, #0
 800dfaa:	d045      	beq.n	800e038 <_free_r+0x94>
 800dfac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dfb0:	1f0c      	subs	r4, r1, #4
 800dfb2:	2b00      	cmp	r3, #0
 800dfb4:	bfb8      	it	lt
 800dfb6:	18e4      	addlt	r4, r4, r3
 800dfb8:	f000 fc44 	bl	800e844 <__malloc_lock>
 800dfbc:	4a1f      	ldr	r2, [pc, #124]	; (800e03c <_free_r+0x98>)
 800dfbe:	6813      	ldr	r3, [r2, #0]
 800dfc0:	4610      	mov	r0, r2
 800dfc2:	b933      	cbnz	r3, 800dfd2 <_free_r+0x2e>
 800dfc4:	6063      	str	r3, [r4, #4]
 800dfc6:	6014      	str	r4, [r2, #0]
 800dfc8:	4628      	mov	r0, r5
 800dfca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dfce:	f000 bc3a 	b.w	800e846 <__malloc_unlock>
 800dfd2:	42a3      	cmp	r3, r4
 800dfd4:	d90c      	bls.n	800dff0 <_free_r+0x4c>
 800dfd6:	6821      	ldr	r1, [r4, #0]
 800dfd8:	1862      	adds	r2, r4, r1
 800dfda:	4293      	cmp	r3, r2
 800dfdc:	bf04      	itt	eq
 800dfde:	681a      	ldreq	r2, [r3, #0]
 800dfe0:	685b      	ldreq	r3, [r3, #4]
 800dfe2:	6063      	str	r3, [r4, #4]
 800dfe4:	bf04      	itt	eq
 800dfe6:	1852      	addeq	r2, r2, r1
 800dfe8:	6022      	streq	r2, [r4, #0]
 800dfea:	6004      	str	r4, [r0, #0]
 800dfec:	e7ec      	b.n	800dfc8 <_free_r+0x24>
 800dfee:	4613      	mov	r3, r2
 800dff0:	685a      	ldr	r2, [r3, #4]
 800dff2:	b10a      	cbz	r2, 800dff8 <_free_r+0x54>
 800dff4:	42a2      	cmp	r2, r4
 800dff6:	d9fa      	bls.n	800dfee <_free_r+0x4a>
 800dff8:	6819      	ldr	r1, [r3, #0]
 800dffa:	1858      	adds	r0, r3, r1
 800dffc:	42a0      	cmp	r0, r4
 800dffe:	d10b      	bne.n	800e018 <_free_r+0x74>
 800e000:	6820      	ldr	r0, [r4, #0]
 800e002:	4401      	add	r1, r0
 800e004:	1858      	adds	r0, r3, r1
 800e006:	4282      	cmp	r2, r0
 800e008:	6019      	str	r1, [r3, #0]
 800e00a:	d1dd      	bne.n	800dfc8 <_free_r+0x24>
 800e00c:	6810      	ldr	r0, [r2, #0]
 800e00e:	6852      	ldr	r2, [r2, #4]
 800e010:	605a      	str	r2, [r3, #4]
 800e012:	4401      	add	r1, r0
 800e014:	6019      	str	r1, [r3, #0]
 800e016:	e7d7      	b.n	800dfc8 <_free_r+0x24>
 800e018:	d902      	bls.n	800e020 <_free_r+0x7c>
 800e01a:	230c      	movs	r3, #12
 800e01c:	602b      	str	r3, [r5, #0]
 800e01e:	e7d3      	b.n	800dfc8 <_free_r+0x24>
 800e020:	6820      	ldr	r0, [r4, #0]
 800e022:	1821      	adds	r1, r4, r0
 800e024:	428a      	cmp	r2, r1
 800e026:	bf04      	itt	eq
 800e028:	6811      	ldreq	r1, [r2, #0]
 800e02a:	6852      	ldreq	r2, [r2, #4]
 800e02c:	6062      	str	r2, [r4, #4]
 800e02e:	bf04      	itt	eq
 800e030:	1809      	addeq	r1, r1, r0
 800e032:	6021      	streq	r1, [r4, #0]
 800e034:	605c      	str	r4, [r3, #4]
 800e036:	e7c7      	b.n	800dfc8 <_free_r+0x24>
 800e038:	bd38      	pop	{r3, r4, r5, pc}
 800e03a:	bf00      	nop
 800e03c:	24056a74 	.word	0x24056a74

0800e040 <_malloc_r>:
 800e040:	b570      	push	{r4, r5, r6, lr}
 800e042:	1ccd      	adds	r5, r1, #3
 800e044:	f025 0503 	bic.w	r5, r5, #3
 800e048:	3508      	adds	r5, #8
 800e04a:	2d0c      	cmp	r5, #12
 800e04c:	bf38      	it	cc
 800e04e:	250c      	movcc	r5, #12
 800e050:	2d00      	cmp	r5, #0
 800e052:	4606      	mov	r6, r0
 800e054:	db01      	blt.n	800e05a <_malloc_r+0x1a>
 800e056:	42a9      	cmp	r1, r5
 800e058:	d903      	bls.n	800e062 <_malloc_r+0x22>
 800e05a:	230c      	movs	r3, #12
 800e05c:	6033      	str	r3, [r6, #0]
 800e05e:	2000      	movs	r0, #0
 800e060:	bd70      	pop	{r4, r5, r6, pc}
 800e062:	f000 fbef 	bl	800e844 <__malloc_lock>
 800e066:	4a21      	ldr	r2, [pc, #132]	; (800e0ec <_malloc_r+0xac>)
 800e068:	6814      	ldr	r4, [r2, #0]
 800e06a:	4621      	mov	r1, r4
 800e06c:	b991      	cbnz	r1, 800e094 <_malloc_r+0x54>
 800e06e:	4c20      	ldr	r4, [pc, #128]	; (800e0f0 <_malloc_r+0xb0>)
 800e070:	6823      	ldr	r3, [r4, #0]
 800e072:	b91b      	cbnz	r3, 800e07c <_malloc_r+0x3c>
 800e074:	4630      	mov	r0, r6
 800e076:	f000 fb3b 	bl	800e6f0 <_sbrk_r>
 800e07a:	6020      	str	r0, [r4, #0]
 800e07c:	4629      	mov	r1, r5
 800e07e:	4630      	mov	r0, r6
 800e080:	f000 fb36 	bl	800e6f0 <_sbrk_r>
 800e084:	1c43      	adds	r3, r0, #1
 800e086:	d124      	bne.n	800e0d2 <_malloc_r+0x92>
 800e088:	230c      	movs	r3, #12
 800e08a:	6033      	str	r3, [r6, #0]
 800e08c:	4630      	mov	r0, r6
 800e08e:	f000 fbda 	bl	800e846 <__malloc_unlock>
 800e092:	e7e4      	b.n	800e05e <_malloc_r+0x1e>
 800e094:	680b      	ldr	r3, [r1, #0]
 800e096:	1b5b      	subs	r3, r3, r5
 800e098:	d418      	bmi.n	800e0cc <_malloc_r+0x8c>
 800e09a:	2b0b      	cmp	r3, #11
 800e09c:	d90f      	bls.n	800e0be <_malloc_r+0x7e>
 800e09e:	600b      	str	r3, [r1, #0]
 800e0a0:	50cd      	str	r5, [r1, r3]
 800e0a2:	18cc      	adds	r4, r1, r3
 800e0a4:	4630      	mov	r0, r6
 800e0a6:	f000 fbce 	bl	800e846 <__malloc_unlock>
 800e0aa:	f104 000b 	add.w	r0, r4, #11
 800e0ae:	1d23      	adds	r3, r4, #4
 800e0b0:	f020 0007 	bic.w	r0, r0, #7
 800e0b4:	1ac3      	subs	r3, r0, r3
 800e0b6:	d0d3      	beq.n	800e060 <_malloc_r+0x20>
 800e0b8:	425a      	negs	r2, r3
 800e0ba:	50e2      	str	r2, [r4, r3]
 800e0bc:	e7d0      	b.n	800e060 <_malloc_r+0x20>
 800e0be:	428c      	cmp	r4, r1
 800e0c0:	684b      	ldr	r3, [r1, #4]
 800e0c2:	bf16      	itet	ne
 800e0c4:	6063      	strne	r3, [r4, #4]
 800e0c6:	6013      	streq	r3, [r2, #0]
 800e0c8:	460c      	movne	r4, r1
 800e0ca:	e7eb      	b.n	800e0a4 <_malloc_r+0x64>
 800e0cc:	460c      	mov	r4, r1
 800e0ce:	6849      	ldr	r1, [r1, #4]
 800e0d0:	e7cc      	b.n	800e06c <_malloc_r+0x2c>
 800e0d2:	1cc4      	adds	r4, r0, #3
 800e0d4:	f024 0403 	bic.w	r4, r4, #3
 800e0d8:	42a0      	cmp	r0, r4
 800e0da:	d005      	beq.n	800e0e8 <_malloc_r+0xa8>
 800e0dc:	1a21      	subs	r1, r4, r0
 800e0de:	4630      	mov	r0, r6
 800e0e0:	f000 fb06 	bl	800e6f0 <_sbrk_r>
 800e0e4:	3001      	adds	r0, #1
 800e0e6:	d0cf      	beq.n	800e088 <_malloc_r+0x48>
 800e0e8:	6025      	str	r5, [r4, #0]
 800e0ea:	e7db      	b.n	800e0a4 <_malloc_r+0x64>
 800e0ec:	24056a74 	.word	0x24056a74
 800e0f0:	24056a78 	.word	0x24056a78

0800e0f4 <__sfputc_r>:
 800e0f4:	6893      	ldr	r3, [r2, #8]
 800e0f6:	3b01      	subs	r3, #1
 800e0f8:	2b00      	cmp	r3, #0
 800e0fa:	b410      	push	{r4}
 800e0fc:	6093      	str	r3, [r2, #8]
 800e0fe:	da08      	bge.n	800e112 <__sfputc_r+0x1e>
 800e100:	6994      	ldr	r4, [r2, #24]
 800e102:	42a3      	cmp	r3, r4
 800e104:	db01      	blt.n	800e10a <__sfputc_r+0x16>
 800e106:	290a      	cmp	r1, #10
 800e108:	d103      	bne.n	800e112 <__sfputc_r+0x1e>
 800e10a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e10e:	f7ff bcab 	b.w	800da68 <__swbuf_r>
 800e112:	6813      	ldr	r3, [r2, #0]
 800e114:	1c58      	adds	r0, r3, #1
 800e116:	6010      	str	r0, [r2, #0]
 800e118:	7019      	strb	r1, [r3, #0]
 800e11a:	4608      	mov	r0, r1
 800e11c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e120:	4770      	bx	lr

0800e122 <__sfputs_r>:
 800e122:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e124:	4606      	mov	r6, r0
 800e126:	460f      	mov	r7, r1
 800e128:	4614      	mov	r4, r2
 800e12a:	18d5      	adds	r5, r2, r3
 800e12c:	42ac      	cmp	r4, r5
 800e12e:	d101      	bne.n	800e134 <__sfputs_r+0x12>
 800e130:	2000      	movs	r0, #0
 800e132:	e007      	b.n	800e144 <__sfputs_r+0x22>
 800e134:	463a      	mov	r2, r7
 800e136:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e13a:	4630      	mov	r0, r6
 800e13c:	f7ff ffda 	bl	800e0f4 <__sfputc_r>
 800e140:	1c43      	adds	r3, r0, #1
 800e142:	d1f3      	bne.n	800e12c <__sfputs_r+0xa>
 800e144:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e148 <_vfiprintf_r>:
 800e148:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e14c:	460c      	mov	r4, r1
 800e14e:	b09d      	sub	sp, #116	; 0x74
 800e150:	4617      	mov	r7, r2
 800e152:	461d      	mov	r5, r3
 800e154:	4606      	mov	r6, r0
 800e156:	b118      	cbz	r0, 800e160 <_vfiprintf_r+0x18>
 800e158:	6983      	ldr	r3, [r0, #24]
 800e15a:	b90b      	cbnz	r3, 800e160 <_vfiprintf_r+0x18>
 800e15c:	f7ff fe34 	bl	800ddc8 <__sinit>
 800e160:	4b7c      	ldr	r3, [pc, #496]	; (800e354 <_vfiprintf_r+0x20c>)
 800e162:	429c      	cmp	r4, r3
 800e164:	d158      	bne.n	800e218 <_vfiprintf_r+0xd0>
 800e166:	6874      	ldr	r4, [r6, #4]
 800e168:	89a3      	ldrh	r3, [r4, #12]
 800e16a:	0718      	lsls	r0, r3, #28
 800e16c:	d55e      	bpl.n	800e22c <_vfiprintf_r+0xe4>
 800e16e:	6923      	ldr	r3, [r4, #16]
 800e170:	2b00      	cmp	r3, #0
 800e172:	d05b      	beq.n	800e22c <_vfiprintf_r+0xe4>
 800e174:	2300      	movs	r3, #0
 800e176:	9309      	str	r3, [sp, #36]	; 0x24
 800e178:	2320      	movs	r3, #32
 800e17a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e17e:	2330      	movs	r3, #48	; 0x30
 800e180:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e184:	9503      	str	r5, [sp, #12]
 800e186:	f04f 0b01 	mov.w	fp, #1
 800e18a:	46b8      	mov	r8, r7
 800e18c:	4645      	mov	r5, r8
 800e18e:	f815 3b01 	ldrb.w	r3, [r5], #1
 800e192:	b10b      	cbz	r3, 800e198 <_vfiprintf_r+0x50>
 800e194:	2b25      	cmp	r3, #37	; 0x25
 800e196:	d154      	bne.n	800e242 <_vfiprintf_r+0xfa>
 800e198:	ebb8 0a07 	subs.w	sl, r8, r7
 800e19c:	d00b      	beq.n	800e1b6 <_vfiprintf_r+0x6e>
 800e19e:	4653      	mov	r3, sl
 800e1a0:	463a      	mov	r2, r7
 800e1a2:	4621      	mov	r1, r4
 800e1a4:	4630      	mov	r0, r6
 800e1a6:	f7ff ffbc 	bl	800e122 <__sfputs_r>
 800e1aa:	3001      	adds	r0, #1
 800e1ac:	f000 80c2 	beq.w	800e334 <_vfiprintf_r+0x1ec>
 800e1b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e1b2:	4453      	add	r3, sl
 800e1b4:	9309      	str	r3, [sp, #36]	; 0x24
 800e1b6:	f898 3000 	ldrb.w	r3, [r8]
 800e1ba:	2b00      	cmp	r3, #0
 800e1bc:	f000 80ba 	beq.w	800e334 <_vfiprintf_r+0x1ec>
 800e1c0:	2300      	movs	r3, #0
 800e1c2:	f04f 32ff 	mov.w	r2, #4294967295
 800e1c6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e1ca:	9304      	str	r3, [sp, #16]
 800e1cc:	9307      	str	r3, [sp, #28]
 800e1ce:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e1d2:	931a      	str	r3, [sp, #104]	; 0x68
 800e1d4:	46a8      	mov	r8, r5
 800e1d6:	2205      	movs	r2, #5
 800e1d8:	f818 1b01 	ldrb.w	r1, [r8], #1
 800e1dc:	485e      	ldr	r0, [pc, #376]	; (800e358 <_vfiprintf_r+0x210>)
 800e1de:	f7f2 f87f 	bl	80002e0 <memchr>
 800e1e2:	9b04      	ldr	r3, [sp, #16]
 800e1e4:	bb78      	cbnz	r0, 800e246 <_vfiprintf_r+0xfe>
 800e1e6:	06d9      	lsls	r1, r3, #27
 800e1e8:	bf44      	itt	mi
 800e1ea:	2220      	movmi	r2, #32
 800e1ec:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800e1f0:	071a      	lsls	r2, r3, #28
 800e1f2:	bf44      	itt	mi
 800e1f4:	222b      	movmi	r2, #43	; 0x2b
 800e1f6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800e1fa:	782a      	ldrb	r2, [r5, #0]
 800e1fc:	2a2a      	cmp	r2, #42	; 0x2a
 800e1fe:	d02a      	beq.n	800e256 <_vfiprintf_r+0x10e>
 800e200:	9a07      	ldr	r2, [sp, #28]
 800e202:	46a8      	mov	r8, r5
 800e204:	2000      	movs	r0, #0
 800e206:	250a      	movs	r5, #10
 800e208:	4641      	mov	r1, r8
 800e20a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e20e:	3b30      	subs	r3, #48	; 0x30
 800e210:	2b09      	cmp	r3, #9
 800e212:	d969      	bls.n	800e2e8 <_vfiprintf_r+0x1a0>
 800e214:	b360      	cbz	r0, 800e270 <_vfiprintf_r+0x128>
 800e216:	e024      	b.n	800e262 <_vfiprintf_r+0x11a>
 800e218:	4b50      	ldr	r3, [pc, #320]	; (800e35c <_vfiprintf_r+0x214>)
 800e21a:	429c      	cmp	r4, r3
 800e21c:	d101      	bne.n	800e222 <_vfiprintf_r+0xda>
 800e21e:	68b4      	ldr	r4, [r6, #8]
 800e220:	e7a2      	b.n	800e168 <_vfiprintf_r+0x20>
 800e222:	4b4f      	ldr	r3, [pc, #316]	; (800e360 <_vfiprintf_r+0x218>)
 800e224:	429c      	cmp	r4, r3
 800e226:	bf08      	it	eq
 800e228:	68f4      	ldreq	r4, [r6, #12]
 800e22a:	e79d      	b.n	800e168 <_vfiprintf_r+0x20>
 800e22c:	4621      	mov	r1, r4
 800e22e:	4630      	mov	r0, r6
 800e230:	f7ff fc6c 	bl	800db0c <__swsetup_r>
 800e234:	2800      	cmp	r0, #0
 800e236:	d09d      	beq.n	800e174 <_vfiprintf_r+0x2c>
 800e238:	f04f 30ff 	mov.w	r0, #4294967295
 800e23c:	b01d      	add	sp, #116	; 0x74
 800e23e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e242:	46a8      	mov	r8, r5
 800e244:	e7a2      	b.n	800e18c <_vfiprintf_r+0x44>
 800e246:	4a44      	ldr	r2, [pc, #272]	; (800e358 <_vfiprintf_r+0x210>)
 800e248:	1a80      	subs	r0, r0, r2
 800e24a:	fa0b f000 	lsl.w	r0, fp, r0
 800e24e:	4318      	orrs	r0, r3
 800e250:	9004      	str	r0, [sp, #16]
 800e252:	4645      	mov	r5, r8
 800e254:	e7be      	b.n	800e1d4 <_vfiprintf_r+0x8c>
 800e256:	9a03      	ldr	r2, [sp, #12]
 800e258:	1d11      	adds	r1, r2, #4
 800e25a:	6812      	ldr	r2, [r2, #0]
 800e25c:	9103      	str	r1, [sp, #12]
 800e25e:	2a00      	cmp	r2, #0
 800e260:	db01      	blt.n	800e266 <_vfiprintf_r+0x11e>
 800e262:	9207      	str	r2, [sp, #28]
 800e264:	e004      	b.n	800e270 <_vfiprintf_r+0x128>
 800e266:	4252      	negs	r2, r2
 800e268:	f043 0302 	orr.w	r3, r3, #2
 800e26c:	9207      	str	r2, [sp, #28]
 800e26e:	9304      	str	r3, [sp, #16]
 800e270:	f898 3000 	ldrb.w	r3, [r8]
 800e274:	2b2e      	cmp	r3, #46	; 0x2e
 800e276:	d10e      	bne.n	800e296 <_vfiprintf_r+0x14e>
 800e278:	f898 3001 	ldrb.w	r3, [r8, #1]
 800e27c:	2b2a      	cmp	r3, #42	; 0x2a
 800e27e:	d138      	bne.n	800e2f2 <_vfiprintf_r+0x1aa>
 800e280:	9b03      	ldr	r3, [sp, #12]
 800e282:	1d1a      	adds	r2, r3, #4
 800e284:	681b      	ldr	r3, [r3, #0]
 800e286:	9203      	str	r2, [sp, #12]
 800e288:	2b00      	cmp	r3, #0
 800e28a:	bfb8      	it	lt
 800e28c:	f04f 33ff 	movlt.w	r3, #4294967295
 800e290:	f108 0802 	add.w	r8, r8, #2
 800e294:	9305      	str	r3, [sp, #20]
 800e296:	4d33      	ldr	r5, [pc, #204]	; (800e364 <_vfiprintf_r+0x21c>)
 800e298:	f898 1000 	ldrb.w	r1, [r8]
 800e29c:	2203      	movs	r2, #3
 800e29e:	4628      	mov	r0, r5
 800e2a0:	f7f2 f81e 	bl	80002e0 <memchr>
 800e2a4:	b140      	cbz	r0, 800e2b8 <_vfiprintf_r+0x170>
 800e2a6:	2340      	movs	r3, #64	; 0x40
 800e2a8:	1b40      	subs	r0, r0, r5
 800e2aa:	fa03 f000 	lsl.w	r0, r3, r0
 800e2ae:	9b04      	ldr	r3, [sp, #16]
 800e2b0:	4303      	orrs	r3, r0
 800e2b2:	f108 0801 	add.w	r8, r8, #1
 800e2b6:	9304      	str	r3, [sp, #16]
 800e2b8:	f898 1000 	ldrb.w	r1, [r8]
 800e2bc:	482a      	ldr	r0, [pc, #168]	; (800e368 <_vfiprintf_r+0x220>)
 800e2be:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e2c2:	2206      	movs	r2, #6
 800e2c4:	f108 0701 	add.w	r7, r8, #1
 800e2c8:	f7f2 f80a 	bl	80002e0 <memchr>
 800e2cc:	2800      	cmp	r0, #0
 800e2ce:	d037      	beq.n	800e340 <_vfiprintf_r+0x1f8>
 800e2d0:	4b26      	ldr	r3, [pc, #152]	; (800e36c <_vfiprintf_r+0x224>)
 800e2d2:	bb1b      	cbnz	r3, 800e31c <_vfiprintf_r+0x1d4>
 800e2d4:	9b03      	ldr	r3, [sp, #12]
 800e2d6:	3307      	adds	r3, #7
 800e2d8:	f023 0307 	bic.w	r3, r3, #7
 800e2dc:	3308      	adds	r3, #8
 800e2de:	9303      	str	r3, [sp, #12]
 800e2e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e2e2:	444b      	add	r3, r9
 800e2e4:	9309      	str	r3, [sp, #36]	; 0x24
 800e2e6:	e750      	b.n	800e18a <_vfiprintf_r+0x42>
 800e2e8:	fb05 3202 	mla	r2, r5, r2, r3
 800e2ec:	2001      	movs	r0, #1
 800e2ee:	4688      	mov	r8, r1
 800e2f0:	e78a      	b.n	800e208 <_vfiprintf_r+0xc0>
 800e2f2:	2300      	movs	r3, #0
 800e2f4:	f108 0801 	add.w	r8, r8, #1
 800e2f8:	9305      	str	r3, [sp, #20]
 800e2fa:	4619      	mov	r1, r3
 800e2fc:	250a      	movs	r5, #10
 800e2fe:	4640      	mov	r0, r8
 800e300:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e304:	3a30      	subs	r2, #48	; 0x30
 800e306:	2a09      	cmp	r2, #9
 800e308:	d903      	bls.n	800e312 <_vfiprintf_r+0x1ca>
 800e30a:	2b00      	cmp	r3, #0
 800e30c:	d0c3      	beq.n	800e296 <_vfiprintf_r+0x14e>
 800e30e:	9105      	str	r1, [sp, #20]
 800e310:	e7c1      	b.n	800e296 <_vfiprintf_r+0x14e>
 800e312:	fb05 2101 	mla	r1, r5, r1, r2
 800e316:	2301      	movs	r3, #1
 800e318:	4680      	mov	r8, r0
 800e31a:	e7f0      	b.n	800e2fe <_vfiprintf_r+0x1b6>
 800e31c:	ab03      	add	r3, sp, #12
 800e31e:	9300      	str	r3, [sp, #0]
 800e320:	4622      	mov	r2, r4
 800e322:	4b13      	ldr	r3, [pc, #76]	; (800e370 <_vfiprintf_r+0x228>)
 800e324:	a904      	add	r1, sp, #16
 800e326:	4630      	mov	r0, r6
 800e328:	f3af 8000 	nop.w
 800e32c:	f1b0 3fff 	cmp.w	r0, #4294967295
 800e330:	4681      	mov	r9, r0
 800e332:	d1d5      	bne.n	800e2e0 <_vfiprintf_r+0x198>
 800e334:	89a3      	ldrh	r3, [r4, #12]
 800e336:	065b      	lsls	r3, r3, #25
 800e338:	f53f af7e 	bmi.w	800e238 <_vfiprintf_r+0xf0>
 800e33c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e33e:	e77d      	b.n	800e23c <_vfiprintf_r+0xf4>
 800e340:	ab03      	add	r3, sp, #12
 800e342:	9300      	str	r3, [sp, #0]
 800e344:	4622      	mov	r2, r4
 800e346:	4b0a      	ldr	r3, [pc, #40]	; (800e370 <_vfiprintf_r+0x228>)
 800e348:	a904      	add	r1, sp, #16
 800e34a:	4630      	mov	r0, r6
 800e34c:	f000 f888 	bl	800e460 <_printf_i>
 800e350:	e7ec      	b.n	800e32c <_vfiprintf_r+0x1e4>
 800e352:	bf00      	nop
 800e354:	0800f344 	.word	0x0800f344
 800e358:	0800f384 	.word	0x0800f384
 800e35c:	0800f364 	.word	0x0800f364
 800e360:	0800f324 	.word	0x0800f324
 800e364:	0800f38a 	.word	0x0800f38a
 800e368:	0800f38e 	.word	0x0800f38e
 800e36c:	00000000 	.word	0x00000000
 800e370:	0800e123 	.word	0x0800e123

0800e374 <_printf_common>:
 800e374:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e378:	4691      	mov	r9, r2
 800e37a:	461f      	mov	r7, r3
 800e37c:	688a      	ldr	r2, [r1, #8]
 800e37e:	690b      	ldr	r3, [r1, #16]
 800e380:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800e384:	4293      	cmp	r3, r2
 800e386:	bfb8      	it	lt
 800e388:	4613      	movlt	r3, r2
 800e38a:	f8c9 3000 	str.w	r3, [r9]
 800e38e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800e392:	4606      	mov	r6, r0
 800e394:	460c      	mov	r4, r1
 800e396:	b112      	cbz	r2, 800e39e <_printf_common+0x2a>
 800e398:	3301      	adds	r3, #1
 800e39a:	f8c9 3000 	str.w	r3, [r9]
 800e39e:	6823      	ldr	r3, [r4, #0]
 800e3a0:	0699      	lsls	r1, r3, #26
 800e3a2:	bf42      	ittt	mi
 800e3a4:	f8d9 3000 	ldrmi.w	r3, [r9]
 800e3a8:	3302      	addmi	r3, #2
 800e3aa:	f8c9 3000 	strmi.w	r3, [r9]
 800e3ae:	6825      	ldr	r5, [r4, #0]
 800e3b0:	f015 0506 	ands.w	r5, r5, #6
 800e3b4:	d107      	bne.n	800e3c6 <_printf_common+0x52>
 800e3b6:	f104 0a19 	add.w	sl, r4, #25
 800e3ba:	68e3      	ldr	r3, [r4, #12]
 800e3bc:	f8d9 2000 	ldr.w	r2, [r9]
 800e3c0:	1a9b      	subs	r3, r3, r2
 800e3c2:	42ab      	cmp	r3, r5
 800e3c4:	dc28      	bgt.n	800e418 <_printf_common+0xa4>
 800e3c6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800e3ca:	6822      	ldr	r2, [r4, #0]
 800e3cc:	3300      	adds	r3, #0
 800e3ce:	bf18      	it	ne
 800e3d0:	2301      	movne	r3, #1
 800e3d2:	0692      	lsls	r2, r2, #26
 800e3d4:	d42d      	bmi.n	800e432 <_printf_common+0xbe>
 800e3d6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e3da:	4639      	mov	r1, r7
 800e3dc:	4630      	mov	r0, r6
 800e3de:	47c0      	blx	r8
 800e3e0:	3001      	adds	r0, #1
 800e3e2:	d020      	beq.n	800e426 <_printf_common+0xb2>
 800e3e4:	6823      	ldr	r3, [r4, #0]
 800e3e6:	68e5      	ldr	r5, [r4, #12]
 800e3e8:	f8d9 2000 	ldr.w	r2, [r9]
 800e3ec:	f003 0306 	and.w	r3, r3, #6
 800e3f0:	2b04      	cmp	r3, #4
 800e3f2:	bf08      	it	eq
 800e3f4:	1aad      	subeq	r5, r5, r2
 800e3f6:	68a3      	ldr	r3, [r4, #8]
 800e3f8:	6922      	ldr	r2, [r4, #16]
 800e3fa:	bf0c      	ite	eq
 800e3fc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e400:	2500      	movne	r5, #0
 800e402:	4293      	cmp	r3, r2
 800e404:	bfc4      	itt	gt
 800e406:	1a9b      	subgt	r3, r3, r2
 800e408:	18ed      	addgt	r5, r5, r3
 800e40a:	f04f 0900 	mov.w	r9, #0
 800e40e:	341a      	adds	r4, #26
 800e410:	454d      	cmp	r5, r9
 800e412:	d11a      	bne.n	800e44a <_printf_common+0xd6>
 800e414:	2000      	movs	r0, #0
 800e416:	e008      	b.n	800e42a <_printf_common+0xb6>
 800e418:	2301      	movs	r3, #1
 800e41a:	4652      	mov	r2, sl
 800e41c:	4639      	mov	r1, r7
 800e41e:	4630      	mov	r0, r6
 800e420:	47c0      	blx	r8
 800e422:	3001      	adds	r0, #1
 800e424:	d103      	bne.n	800e42e <_printf_common+0xba>
 800e426:	f04f 30ff 	mov.w	r0, #4294967295
 800e42a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e42e:	3501      	adds	r5, #1
 800e430:	e7c3      	b.n	800e3ba <_printf_common+0x46>
 800e432:	18e1      	adds	r1, r4, r3
 800e434:	1c5a      	adds	r2, r3, #1
 800e436:	2030      	movs	r0, #48	; 0x30
 800e438:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800e43c:	4422      	add	r2, r4
 800e43e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800e442:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800e446:	3302      	adds	r3, #2
 800e448:	e7c5      	b.n	800e3d6 <_printf_common+0x62>
 800e44a:	2301      	movs	r3, #1
 800e44c:	4622      	mov	r2, r4
 800e44e:	4639      	mov	r1, r7
 800e450:	4630      	mov	r0, r6
 800e452:	47c0      	blx	r8
 800e454:	3001      	adds	r0, #1
 800e456:	d0e6      	beq.n	800e426 <_printf_common+0xb2>
 800e458:	f109 0901 	add.w	r9, r9, #1
 800e45c:	e7d8      	b.n	800e410 <_printf_common+0x9c>
	...

0800e460 <_printf_i>:
 800e460:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e464:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800e468:	460c      	mov	r4, r1
 800e46a:	7e09      	ldrb	r1, [r1, #24]
 800e46c:	b085      	sub	sp, #20
 800e46e:	296e      	cmp	r1, #110	; 0x6e
 800e470:	4617      	mov	r7, r2
 800e472:	4606      	mov	r6, r0
 800e474:	4698      	mov	r8, r3
 800e476:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e478:	f000 80b3 	beq.w	800e5e2 <_printf_i+0x182>
 800e47c:	d822      	bhi.n	800e4c4 <_printf_i+0x64>
 800e47e:	2963      	cmp	r1, #99	; 0x63
 800e480:	d036      	beq.n	800e4f0 <_printf_i+0x90>
 800e482:	d80a      	bhi.n	800e49a <_printf_i+0x3a>
 800e484:	2900      	cmp	r1, #0
 800e486:	f000 80b9 	beq.w	800e5fc <_printf_i+0x19c>
 800e48a:	2958      	cmp	r1, #88	; 0x58
 800e48c:	f000 8083 	beq.w	800e596 <_printf_i+0x136>
 800e490:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e494:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800e498:	e032      	b.n	800e500 <_printf_i+0xa0>
 800e49a:	2964      	cmp	r1, #100	; 0x64
 800e49c:	d001      	beq.n	800e4a2 <_printf_i+0x42>
 800e49e:	2969      	cmp	r1, #105	; 0x69
 800e4a0:	d1f6      	bne.n	800e490 <_printf_i+0x30>
 800e4a2:	6820      	ldr	r0, [r4, #0]
 800e4a4:	6813      	ldr	r3, [r2, #0]
 800e4a6:	0605      	lsls	r5, r0, #24
 800e4a8:	f103 0104 	add.w	r1, r3, #4
 800e4ac:	d52a      	bpl.n	800e504 <_printf_i+0xa4>
 800e4ae:	681b      	ldr	r3, [r3, #0]
 800e4b0:	6011      	str	r1, [r2, #0]
 800e4b2:	2b00      	cmp	r3, #0
 800e4b4:	da03      	bge.n	800e4be <_printf_i+0x5e>
 800e4b6:	222d      	movs	r2, #45	; 0x2d
 800e4b8:	425b      	negs	r3, r3
 800e4ba:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800e4be:	486f      	ldr	r0, [pc, #444]	; (800e67c <_printf_i+0x21c>)
 800e4c0:	220a      	movs	r2, #10
 800e4c2:	e039      	b.n	800e538 <_printf_i+0xd8>
 800e4c4:	2973      	cmp	r1, #115	; 0x73
 800e4c6:	f000 809d 	beq.w	800e604 <_printf_i+0x1a4>
 800e4ca:	d808      	bhi.n	800e4de <_printf_i+0x7e>
 800e4cc:	296f      	cmp	r1, #111	; 0x6f
 800e4ce:	d020      	beq.n	800e512 <_printf_i+0xb2>
 800e4d0:	2970      	cmp	r1, #112	; 0x70
 800e4d2:	d1dd      	bne.n	800e490 <_printf_i+0x30>
 800e4d4:	6823      	ldr	r3, [r4, #0]
 800e4d6:	f043 0320 	orr.w	r3, r3, #32
 800e4da:	6023      	str	r3, [r4, #0]
 800e4dc:	e003      	b.n	800e4e6 <_printf_i+0x86>
 800e4de:	2975      	cmp	r1, #117	; 0x75
 800e4e0:	d017      	beq.n	800e512 <_printf_i+0xb2>
 800e4e2:	2978      	cmp	r1, #120	; 0x78
 800e4e4:	d1d4      	bne.n	800e490 <_printf_i+0x30>
 800e4e6:	2378      	movs	r3, #120	; 0x78
 800e4e8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800e4ec:	4864      	ldr	r0, [pc, #400]	; (800e680 <_printf_i+0x220>)
 800e4ee:	e055      	b.n	800e59c <_printf_i+0x13c>
 800e4f0:	6813      	ldr	r3, [r2, #0]
 800e4f2:	1d19      	adds	r1, r3, #4
 800e4f4:	681b      	ldr	r3, [r3, #0]
 800e4f6:	6011      	str	r1, [r2, #0]
 800e4f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e4fc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e500:	2301      	movs	r3, #1
 800e502:	e08c      	b.n	800e61e <_printf_i+0x1be>
 800e504:	681b      	ldr	r3, [r3, #0]
 800e506:	6011      	str	r1, [r2, #0]
 800e508:	f010 0f40 	tst.w	r0, #64	; 0x40
 800e50c:	bf18      	it	ne
 800e50e:	b21b      	sxthne	r3, r3
 800e510:	e7cf      	b.n	800e4b2 <_printf_i+0x52>
 800e512:	6813      	ldr	r3, [r2, #0]
 800e514:	6825      	ldr	r5, [r4, #0]
 800e516:	1d18      	adds	r0, r3, #4
 800e518:	6010      	str	r0, [r2, #0]
 800e51a:	0628      	lsls	r0, r5, #24
 800e51c:	d501      	bpl.n	800e522 <_printf_i+0xc2>
 800e51e:	681b      	ldr	r3, [r3, #0]
 800e520:	e002      	b.n	800e528 <_printf_i+0xc8>
 800e522:	0668      	lsls	r0, r5, #25
 800e524:	d5fb      	bpl.n	800e51e <_printf_i+0xbe>
 800e526:	881b      	ldrh	r3, [r3, #0]
 800e528:	4854      	ldr	r0, [pc, #336]	; (800e67c <_printf_i+0x21c>)
 800e52a:	296f      	cmp	r1, #111	; 0x6f
 800e52c:	bf14      	ite	ne
 800e52e:	220a      	movne	r2, #10
 800e530:	2208      	moveq	r2, #8
 800e532:	2100      	movs	r1, #0
 800e534:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800e538:	6865      	ldr	r5, [r4, #4]
 800e53a:	60a5      	str	r5, [r4, #8]
 800e53c:	2d00      	cmp	r5, #0
 800e53e:	f2c0 8095 	blt.w	800e66c <_printf_i+0x20c>
 800e542:	6821      	ldr	r1, [r4, #0]
 800e544:	f021 0104 	bic.w	r1, r1, #4
 800e548:	6021      	str	r1, [r4, #0]
 800e54a:	2b00      	cmp	r3, #0
 800e54c:	d13d      	bne.n	800e5ca <_printf_i+0x16a>
 800e54e:	2d00      	cmp	r5, #0
 800e550:	f040 808e 	bne.w	800e670 <_printf_i+0x210>
 800e554:	4665      	mov	r5, ip
 800e556:	2a08      	cmp	r2, #8
 800e558:	d10b      	bne.n	800e572 <_printf_i+0x112>
 800e55a:	6823      	ldr	r3, [r4, #0]
 800e55c:	07db      	lsls	r3, r3, #31
 800e55e:	d508      	bpl.n	800e572 <_printf_i+0x112>
 800e560:	6923      	ldr	r3, [r4, #16]
 800e562:	6862      	ldr	r2, [r4, #4]
 800e564:	429a      	cmp	r2, r3
 800e566:	bfde      	ittt	le
 800e568:	2330      	movle	r3, #48	; 0x30
 800e56a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800e56e:	f105 35ff 	addle.w	r5, r5, #4294967295
 800e572:	ebac 0305 	sub.w	r3, ip, r5
 800e576:	6123      	str	r3, [r4, #16]
 800e578:	f8cd 8000 	str.w	r8, [sp]
 800e57c:	463b      	mov	r3, r7
 800e57e:	aa03      	add	r2, sp, #12
 800e580:	4621      	mov	r1, r4
 800e582:	4630      	mov	r0, r6
 800e584:	f7ff fef6 	bl	800e374 <_printf_common>
 800e588:	3001      	adds	r0, #1
 800e58a:	d14d      	bne.n	800e628 <_printf_i+0x1c8>
 800e58c:	f04f 30ff 	mov.w	r0, #4294967295
 800e590:	b005      	add	sp, #20
 800e592:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e596:	4839      	ldr	r0, [pc, #228]	; (800e67c <_printf_i+0x21c>)
 800e598:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800e59c:	6813      	ldr	r3, [r2, #0]
 800e59e:	6821      	ldr	r1, [r4, #0]
 800e5a0:	1d1d      	adds	r5, r3, #4
 800e5a2:	681b      	ldr	r3, [r3, #0]
 800e5a4:	6015      	str	r5, [r2, #0]
 800e5a6:	060a      	lsls	r2, r1, #24
 800e5a8:	d50b      	bpl.n	800e5c2 <_printf_i+0x162>
 800e5aa:	07ca      	lsls	r2, r1, #31
 800e5ac:	bf44      	itt	mi
 800e5ae:	f041 0120 	orrmi.w	r1, r1, #32
 800e5b2:	6021      	strmi	r1, [r4, #0]
 800e5b4:	b91b      	cbnz	r3, 800e5be <_printf_i+0x15e>
 800e5b6:	6822      	ldr	r2, [r4, #0]
 800e5b8:	f022 0220 	bic.w	r2, r2, #32
 800e5bc:	6022      	str	r2, [r4, #0]
 800e5be:	2210      	movs	r2, #16
 800e5c0:	e7b7      	b.n	800e532 <_printf_i+0xd2>
 800e5c2:	064d      	lsls	r5, r1, #25
 800e5c4:	bf48      	it	mi
 800e5c6:	b29b      	uxthmi	r3, r3
 800e5c8:	e7ef      	b.n	800e5aa <_printf_i+0x14a>
 800e5ca:	4665      	mov	r5, ip
 800e5cc:	fbb3 f1f2 	udiv	r1, r3, r2
 800e5d0:	fb02 3311 	mls	r3, r2, r1, r3
 800e5d4:	5cc3      	ldrb	r3, [r0, r3]
 800e5d6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800e5da:	460b      	mov	r3, r1
 800e5dc:	2900      	cmp	r1, #0
 800e5de:	d1f5      	bne.n	800e5cc <_printf_i+0x16c>
 800e5e0:	e7b9      	b.n	800e556 <_printf_i+0xf6>
 800e5e2:	6813      	ldr	r3, [r2, #0]
 800e5e4:	6825      	ldr	r5, [r4, #0]
 800e5e6:	6961      	ldr	r1, [r4, #20]
 800e5e8:	1d18      	adds	r0, r3, #4
 800e5ea:	6010      	str	r0, [r2, #0]
 800e5ec:	0628      	lsls	r0, r5, #24
 800e5ee:	681b      	ldr	r3, [r3, #0]
 800e5f0:	d501      	bpl.n	800e5f6 <_printf_i+0x196>
 800e5f2:	6019      	str	r1, [r3, #0]
 800e5f4:	e002      	b.n	800e5fc <_printf_i+0x19c>
 800e5f6:	066a      	lsls	r2, r5, #25
 800e5f8:	d5fb      	bpl.n	800e5f2 <_printf_i+0x192>
 800e5fa:	8019      	strh	r1, [r3, #0]
 800e5fc:	2300      	movs	r3, #0
 800e5fe:	6123      	str	r3, [r4, #16]
 800e600:	4665      	mov	r5, ip
 800e602:	e7b9      	b.n	800e578 <_printf_i+0x118>
 800e604:	6813      	ldr	r3, [r2, #0]
 800e606:	1d19      	adds	r1, r3, #4
 800e608:	6011      	str	r1, [r2, #0]
 800e60a:	681d      	ldr	r5, [r3, #0]
 800e60c:	6862      	ldr	r2, [r4, #4]
 800e60e:	2100      	movs	r1, #0
 800e610:	4628      	mov	r0, r5
 800e612:	f7f1 fe65 	bl	80002e0 <memchr>
 800e616:	b108      	cbz	r0, 800e61c <_printf_i+0x1bc>
 800e618:	1b40      	subs	r0, r0, r5
 800e61a:	6060      	str	r0, [r4, #4]
 800e61c:	6863      	ldr	r3, [r4, #4]
 800e61e:	6123      	str	r3, [r4, #16]
 800e620:	2300      	movs	r3, #0
 800e622:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e626:	e7a7      	b.n	800e578 <_printf_i+0x118>
 800e628:	6923      	ldr	r3, [r4, #16]
 800e62a:	462a      	mov	r2, r5
 800e62c:	4639      	mov	r1, r7
 800e62e:	4630      	mov	r0, r6
 800e630:	47c0      	blx	r8
 800e632:	3001      	adds	r0, #1
 800e634:	d0aa      	beq.n	800e58c <_printf_i+0x12c>
 800e636:	6823      	ldr	r3, [r4, #0]
 800e638:	079b      	lsls	r3, r3, #30
 800e63a:	d413      	bmi.n	800e664 <_printf_i+0x204>
 800e63c:	68e0      	ldr	r0, [r4, #12]
 800e63e:	9b03      	ldr	r3, [sp, #12]
 800e640:	4298      	cmp	r0, r3
 800e642:	bfb8      	it	lt
 800e644:	4618      	movlt	r0, r3
 800e646:	e7a3      	b.n	800e590 <_printf_i+0x130>
 800e648:	2301      	movs	r3, #1
 800e64a:	464a      	mov	r2, r9
 800e64c:	4639      	mov	r1, r7
 800e64e:	4630      	mov	r0, r6
 800e650:	47c0      	blx	r8
 800e652:	3001      	adds	r0, #1
 800e654:	d09a      	beq.n	800e58c <_printf_i+0x12c>
 800e656:	3501      	adds	r5, #1
 800e658:	68e3      	ldr	r3, [r4, #12]
 800e65a:	9a03      	ldr	r2, [sp, #12]
 800e65c:	1a9b      	subs	r3, r3, r2
 800e65e:	42ab      	cmp	r3, r5
 800e660:	dcf2      	bgt.n	800e648 <_printf_i+0x1e8>
 800e662:	e7eb      	b.n	800e63c <_printf_i+0x1dc>
 800e664:	2500      	movs	r5, #0
 800e666:	f104 0919 	add.w	r9, r4, #25
 800e66a:	e7f5      	b.n	800e658 <_printf_i+0x1f8>
 800e66c:	2b00      	cmp	r3, #0
 800e66e:	d1ac      	bne.n	800e5ca <_printf_i+0x16a>
 800e670:	7803      	ldrb	r3, [r0, #0]
 800e672:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e676:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e67a:	e76c      	b.n	800e556 <_printf_i+0xf6>
 800e67c:	0800f395 	.word	0x0800f395
 800e680:	0800f3a6 	.word	0x0800f3a6

0800e684 <_putc_r>:
 800e684:	b570      	push	{r4, r5, r6, lr}
 800e686:	460d      	mov	r5, r1
 800e688:	4614      	mov	r4, r2
 800e68a:	4606      	mov	r6, r0
 800e68c:	b118      	cbz	r0, 800e696 <_putc_r+0x12>
 800e68e:	6983      	ldr	r3, [r0, #24]
 800e690:	b90b      	cbnz	r3, 800e696 <_putc_r+0x12>
 800e692:	f7ff fb99 	bl	800ddc8 <__sinit>
 800e696:	4b13      	ldr	r3, [pc, #76]	; (800e6e4 <_putc_r+0x60>)
 800e698:	429c      	cmp	r4, r3
 800e69a:	d112      	bne.n	800e6c2 <_putc_r+0x3e>
 800e69c:	6874      	ldr	r4, [r6, #4]
 800e69e:	68a3      	ldr	r3, [r4, #8]
 800e6a0:	3b01      	subs	r3, #1
 800e6a2:	2b00      	cmp	r3, #0
 800e6a4:	60a3      	str	r3, [r4, #8]
 800e6a6:	da16      	bge.n	800e6d6 <_putc_r+0x52>
 800e6a8:	69a2      	ldr	r2, [r4, #24]
 800e6aa:	4293      	cmp	r3, r2
 800e6ac:	db02      	blt.n	800e6b4 <_putc_r+0x30>
 800e6ae:	b2eb      	uxtb	r3, r5
 800e6b0:	2b0a      	cmp	r3, #10
 800e6b2:	d110      	bne.n	800e6d6 <_putc_r+0x52>
 800e6b4:	4622      	mov	r2, r4
 800e6b6:	4629      	mov	r1, r5
 800e6b8:	4630      	mov	r0, r6
 800e6ba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e6be:	f7ff b9d3 	b.w	800da68 <__swbuf_r>
 800e6c2:	4b09      	ldr	r3, [pc, #36]	; (800e6e8 <_putc_r+0x64>)
 800e6c4:	429c      	cmp	r4, r3
 800e6c6:	d101      	bne.n	800e6cc <_putc_r+0x48>
 800e6c8:	68b4      	ldr	r4, [r6, #8]
 800e6ca:	e7e8      	b.n	800e69e <_putc_r+0x1a>
 800e6cc:	4b07      	ldr	r3, [pc, #28]	; (800e6ec <_putc_r+0x68>)
 800e6ce:	429c      	cmp	r4, r3
 800e6d0:	bf08      	it	eq
 800e6d2:	68f4      	ldreq	r4, [r6, #12]
 800e6d4:	e7e3      	b.n	800e69e <_putc_r+0x1a>
 800e6d6:	6823      	ldr	r3, [r4, #0]
 800e6d8:	1c5a      	adds	r2, r3, #1
 800e6da:	6022      	str	r2, [r4, #0]
 800e6dc:	701d      	strb	r5, [r3, #0]
 800e6de:	b2e8      	uxtb	r0, r5
 800e6e0:	bd70      	pop	{r4, r5, r6, pc}
 800e6e2:	bf00      	nop
 800e6e4:	0800f344 	.word	0x0800f344
 800e6e8:	0800f364 	.word	0x0800f364
 800e6ec:	0800f324 	.word	0x0800f324

0800e6f0 <_sbrk_r>:
 800e6f0:	b538      	push	{r3, r4, r5, lr}
 800e6f2:	4c06      	ldr	r4, [pc, #24]	; (800e70c <_sbrk_r+0x1c>)
 800e6f4:	2300      	movs	r3, #0
 800e6f6:	4605      	mov	r5, r0
 800e6f8:	4608      	mov	r0, r1
 800e6fa:	6023      	str	r3, [r4, #0]
 800e6fc:	f7f3 fb74 	bl	8001de8 <_sbrk>
 800e700:	1c43      	adds	r3, r0, #1
 800e702:	d102      	bne.n	800e70a <_sbrk_r+0x1a>
 800e704:	6823      	ldr	r3, [r4, #0]
 800e706:	b103      	cbz	r3, 800e70a <_sbrk_r+0x1a>
 800e708:	602b      	str	r3, [r5, #0]
 800e70a:	bd38      	pop	{r3, r4, r5, pc}
 800e70c:	24067200 	.word	0x24067200

0800e710 <__sread>:
 800e710:	b510      	push	{r4, lr}
 800e712:	460c      	mov	r4, r1
 800e714:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e718:	f000 f896 	bl	800e848 <_read_r>
 800e71c:	2800      	cmp	r0, #0
 800e71e:	bfab      	itete	ge
 800e720:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800e722:	89a3      	ldrhlt	r3, [r4, #12]
 800e724:	181b      	addge	r3, r3, r0
 800e726:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800e72a:	bfac      	ite	ge
 800e72c:	6563      	strge	r3, [r4, #84]	; 0x54
 800e72e:	81a3      	strhlt	r3, [r4, #12]
 800e730:	bd10      	pop	{r4, pc}

0800e732 <__swrite>:
 800e732:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e736:	461f      	mov	r7, r3
 800e738:	898b      	ldrh	r3, [r1, #12]
 800e73a:	05db      	lsls	r3, r3, #23
 800e73c:	4605      	mov	r5, r0
 800e73e:	460c      	mov	r4, r1
 800e740:	4616      	mov	r6, r2
 800e742:	d505      	bpl.n	800e750 <__swrite+0x1e>
 800e744:	2302      	movs	r3, #2
 800e746:	2200      	movs	r2, #0
 800e748:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e74c:	f000 f868 	bl	800e820 <_lseek_r>
 800e750:	89a3      	ldrh	r3, [r4, #12]
 800e752:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e756:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e75a:	81a3      	strh	r3, [r4, #12]
 800e75c:	4632      	mov	r2, r6
 800e75e:	463b      	mov	r3, r7
 800e760:	4628      	mov	r0, r5
 800e762:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e766:	f000 b817 	b.w	800e798 <_write_r>

0800e76a <__sseek>:
 800e76a:	b510      	push	{r4, lr}
 800e76c:	460c      	mov	r4, r1
 800e76e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e772:	f000 f855 	bl	800e820 <_lseek_r>
 800e776:	1c43      	adds	r3, r0, #1
 800e778:	89a3      	ldrh	r3, [r4, #12]
 800e77a:	bf15      	itete	ne
 800e77c:	6560      	strne	r0, [r4, #84]	; 0x54
 800e77e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800e782:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800e786:	81a3      	strheq	r3, [r4, #12]
 800e788:	bf18      	it	ne
 800e78a:	81a3      	strhne	r3, [r4, #12]
 800e78c:	bd10      	pop	{r4, pc}

0800e78e <__sclose>:
 800e78e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e792:	f000 b813 	b.w	800e7bc <_close_r>
	...

0800e798 <_write_r>:
 800e798:	b538      	push	{r3, r4, r5, lr}
 800e79a:	4c07      	ldr	r4, [pc, #28]	; (800e7b8 <_write_r+0x20>)
 800e79c:	4605      	mov	r5, r0
 800e79e:	4608      	mov	r0, r1
 800e7a0:	4611      	mov	r1, r2
 800e7a2:	2200      	movs	r2, #0
 800e7a4:	6022      	str	r2, [r4, #0]
 800e7a6:	461a      	mov	r2, r3
 800e7a8:	f7f3 f8d0 	bl	800194c <_write>
 800e7ac:	1c43      	adds	r3, r0, #1
 800e7ae:	d102      	bne.n	800e7b6 <_write_r+0x1e>
 800e7b0:	6823      	ldr	r3, [r4, #0]
 800e7b2:	b103      	cbz	r3, 800e7b6 <_write_r+0x1e>
 800e7b4:	602b      	str	r3, [r5, #0]
 800e7b6:	bd38      	pop	{r3, r4, r5, pc}
 800e7b8:	24067200 	.word	0x24067200

0800e7bc <_close_r>:
 800e7bc:	b538      	push	{r3, r4, r5, lr}
 800e7be:	4c06      	ldr	r4, [pc, #24]	; (800e7d8 <_close_r+0x1c>)
 800e7c0:	2300      	movs	r3, #0
 800e7c2:	4605      	mov	r5, r0
 800e7c4:	4608      	mov	r0, r1
 800e7c6:	6023      	str	r3, [r4, #0]
 800e7c8:	f7f3 fad9 	bl	8001d7e <_close>
 800e7cc:	1c43      	adds	r3, r0, #1
 800e7ce:	d102      	bne.n	800e7d6 <_close_r+0x1a>
 800e7d0:	6823      	ldr	r3, [r4, #0]
 800e7d2:	b103      	cbz	r3, 800e7d6 <_close_r+0x1a>
 800e7d4:	602b      	str	r3, [r5, #0]
 800e7d6:	bd38      	pop	{r3, r4, r5, pc}
 800e7d8:	24067200 	.word	0x24067200

0800e7dc <_fstat_r>:
 800e7dc:	b538      	push	{r3, r4, r5, lr}
 800e7de:	4c07      	ldr	r4, [pc, #28]	; (800e7fc <_fstat_r+0x20>)
 800e7e0:	2300      	movs	r3, #0
 800e7e2:	4605      	mov	r5, r0
 800e7e4:	4608      	mov	r0, r1
 800e7e6:	4611      	mov	r1, r2
 800e7e8:	6023      	str	r3, [r4, #0]
 800e7ea:	f7f3 fad4 	bl	8001d96 <_fstat>
 800e7ee:	1c43      	adds	r3, r0, #1
 800e7f0:	d102      	bne.n	800e7f8 <_fstat_r+0x1c>
 800e7f2:	6823      	ldr	r3, [r4, #0]
 800e7f4:	b103      	cbz	r3, 800e7f8 <_fstat_r+0x1c>
 800e7f6:	602b      	str	r3, [r5, #0]
 800e7f8:	bd38      	pop	{r3, r4, r5, pc}
 800e7fa:	bf00      	nop
 800e7fc:	24067200 	.word	0x24067200

0800e800 <_isatty_r>:
 800e800:	b538      	push	{r3, r4, r5, lr}
 800e802:	4c06      	ldr	r4, [pc, #24]	; (800e81c <_isatty_r+0x1c>)
 800e804:	2300      	movs	r3, #0
 800e806:	4605      	mov	r5, r0
 800e808:	4608      	mov	r0, r1
 800e80a:	6023      	str	r3, [r4, #0]
 800e80c:	f7f3 fad3 	bl	8001db6 <_isatty>
 800e810:	1c43      	adds	r3, r0, #1
 800e812:	d102      	bne.n	800e81a <_isatty_r+0x1a>
 800e814:	6823      	ldr	r3, [r4, #0]
 800e816:	b103      	cbz	r3, 800e81a <_isatty_r+0x1a>
 800e818:	602b      	str	r3, [r5, #0]
 800e81a:	bd38      	pop	{r3, r4, r5, pc}
 800e81c:	24067200 	.word	0x24067200

0800e820 <_lseek_r>:
 800e820:	b538      	push	{r3, r4, r5, lr}
 800e822:	4c07      	ldr	r4, [pc, #28]	; (800e840 <_lseek_r+0x20>)
 800e824:	4605      	mov	r5, r0
 800e826:	4608      	mov	r0, r1
 800e828:	4611      	mov	r1, r2
 800e82a:	2200      	movs	r2, #0
 800e82c:	6022      	str	r2, [r4, #0]
 800e82e:	461a      	mov	r2, r3
 800e830:	f7f3 facc 	bl	8001dcc <_lseek>
 800e834:	1c43      	adds	r3, r0, #1
 800e836:	d102      	bne.n	800e83e <_lseek_r+0x1e>
 800e838:	6823      	ldr	r3, [r4, #0]
 800e83a:	b103      	cbz	r3, 800e83e <_lseek_r+0x1e>
 800e83c:	602b      	str	r3, [r5, #0]
 800e83e:	bd38      	pop	{r3, r4, r5, pc}
 800e840:	24067200 	.word	0x24067200

0800e844 <__malloc_lock>:
 800e844:	4770      	bx	lr

0800e846 <__malloc_unlock>:
 800e846:	4770      	bx	lr

0800e848 <_read_r>:
 800e848:	b538      	push	{r3, r4, r5, lr}
 800e84a:	4c07      	ldr	r4, [pc, #28]	; (800e868 <_read_r+0x20>)
 800e84c:	4605      	mov	r5, r0
 800e84e:	4608      	mov	r0, r1
 800e850:	4611      	mov	r1, r2
 800e852:	2200      	movs	r2, #0
 800e854:	6022      	str	r2, [r4, #0]
 800e856:	461a      	mov	r2, r3
 800e858:	f7f3 fa74 	bl	8001d44 <_read>
 800e85c:	1c43      	adds	r3, r0, #1
 800e85e:	d102      	bne.n	800e866 <_read_r+0x1e>
 800e860:	6823      	ldr	r3, [r4, #0]
 800e862:	b103      	cbz	r3, 800e866 <_read_r+0x1e>
 800e864:	602b      	str	r3, [r5, #0]
 800e866:	bd38      	pop	{r3, r4, r5, pc}
 800e868:	24067200 	.word	0x24067200

0800e86c <_init>:
 800e86c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e86e:	bf00      	nop
 800e870:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e872:	bc08      	pop	{r3}
 800e874:	469e      	mov	lr, r3
 800e876:	4770      	bx	lr

0800e878 <_fini>:
 800e878:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e87a:	bf00      	nop
 800e87c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e87e:	bc08      	pop	{r3}
 800e880:	469e      	mov	lr, r3
 800e882:	4770      	bx	lr
