
Block Checkoff.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bcb8  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003f0  0800bf58  0800bf58  0001bf58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c348  0800c348  000200b4  2**0
                  CONTENTS
  4 .ARM          00000008  0800c348  0800c348  0001c348  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c350  0800c350  000200b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c350  0800c350  0001c350  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c354  0800c354  0001c354  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b4  24000000  0800c358  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000708  240000b4  0800c40c  000200b4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  240007bc  0800c40c  000207bc  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000255cb  00000000  00000000  000200e2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003f3b  00000000  00000000  000456ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001460  00000000  00000000  000495e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000012c8  00000000  00000000  0004aa48  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0003978a  00000000  00000000  0004bd10  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00014bf8  00000000  00000000  0008549a  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0015d543  00000000  00000000  0009a092  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001f75d5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005bf4  00000000  00000000  001f7650  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240000b4 	.word	0x240000b4
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800bf40 	.word	0x0800bf40

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240000b8 	.word	0x240000b8
 80002dc:	0800bf40 	.word	0x0800bf40

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b972 	b.w	800067c <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9e08      	ldr	r6, [sp, #32]
 80003b6:	4604      	mov	r4, r0
 80003b8:	4688      	mov	r8, r1
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d14b      	bne.n	8000456 <__udivmoddi4+0xa6>
 80003be:	428a      	cmp	r2, r1
 80003c0:	4615      	mov	r5, r2
 80003c2:	d967      	bls.n	8000494 <__udivmoddi4+0xe4>
 80003c4:	fab2 f282 	clz	r2, r2
 80003c8:	b14a      	cbz	r2, 80003de <__udivmoddi4+0x2e>
 80003ca:	f1c2 0720 	rsb	r7, r2, #32
 80003ce:	fa01 f302 	lsl.w	r3, r1, r2
 80003d2:	fa20 f707 	lsr.w	r7, r0, r7
 80003d6:	4095      	lsls	r5, r2
 80003d8:	ea47 0803 	orr.w	r8, r7, r3
 80003dc:	4094      	lsls	r4, r2
 80003de:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003e2:	0c23      	lsrs	r3, r4, #16
 80003e4:	fbb8 f7fe 	udiv	r7, r8, lr
 80003e8:	fa1f fc85 	uxth.w	ip, r5
 80003ec:	fb0e 8817 	mls	r8, lr, r7, r8
 80003f0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003f4:	fb07 f10c 	mul.w	r1, r7, ip
 80003f8:	4299      	cmp	r1, r3
 80003fa:	d909      	bls.n	8000410 <__udivmoddi4+0x60>
 80003fc:	18eb      	adds	r3, r5, r3
 80003fe:	f107 30ff 	add.w	r0, r7, #4294967295
 8000402:	f080 811b 	bcs.w	800063c <__udivmoddi4+0x28c>
 8000406:	4299      	cmp	r1, r3
 8000408:	f240 8118 	bls.w	800063c <__udivmoddi4+0x28c>
 800040c:	3f02      	subs	r7, #2
 800040e:	442b      	add	r3, r5
 8000410:	1a5b      	subs	r3, r3, r1
 8000412:	b2a4      	uxth	r4, r4
 8000414:	fbb3 f0fe 	udiv	r0, r3, lr
 8000418:	fb0e 3310 	mls	r3, lr, r0, r3
 800041c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000420:	fb00 fc0c 	mul.w	ip, r0, ip
 8000424:	45a4      	cmp	ip, r4
 8000426:	d909      	bls.n	800043c <__udivmoddi4+0x8c>
 8000428:	192c      	adds	r4, r5, r4
 800042a:	f100 33ff 	add.w	r3, r0, #4294967295
 800042e:	f080 8107 	bcs.w	8000640 <__udivmoddi4+0x290>
 8000432:	45a4      	cmp	ip, r4
 8000434:	f240 8104 	bls.w	8000640 <__udivmoddi4+0x290>
 8000438:	3802      	subs	r0, #2
 800043a:	442c      	add	r4, r5
 800043c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000440:	eba4 040c 	sub.w	r4, r4, ip
 8000444:	2700      	movs	r7, #0
 8000446:	b11e      	cbz	r6, 8000450 <__udivmoddi4+0xa0>
 8000448:	40d4      	lsrs	r4, r2
 800044a:	2300      	movs	r3, #0
 800044c:	e9c6 4300 	strd	r4, r3, [r6]
 8000450:	4639      	mov	r1, r7
 8000452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000456:	428b      	cmp	r3, r1
 8000458:	d909      	bls.n	800046e <__udivmoddi4+0xbe>
 800045a:	2e00      	cmp	r6, #0
 800045c:	f000 80eb 	beq.w	8000636 <__udivmoddi4+0x286>
 8000460:	2700      	movs	r7, #0
 8000462:	e9c6 0100 	strd	r0, r1, [r6]
 8000466:	4638      	mov	r0, r7
 8000468:	4639      	mov	r1, r7
 800046a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046e:	fab3 f783 	clz	r7, r3
 8000472:	2f00      	cmp	r7, #0
 8000474:	d147      	bne.n	8000506 <__udivmoddi4+0x156>
 8000476:	428b      	cmp	r3, r1
 8000478:	d302      	bcc.n	8000480 <__udivmoddi4+0xd0>
 800047a:	4282      	cmp	r2, r0
 800047c:	f200 80fa 	bhi.w	8000674 <__udivmoddi4+0x2c4>
 8000480:	1a84      	subs	r4, r0, r2
 8000482:	eb61 0303 	sbc.w	r3, r1, r3
 8000486:	2001      	movs	r0, #1
 8000488:	4698      	mov	r8, r3
 800048a:	2e00      	cmp	r6, #0
 800048c:	d0e0      	beq.n	8000450 <__udivmoddi4+0xa0>
 800048e:	e9c6 4800 	strd	r4, r8, [r6]
 8000492:	e7dd      	b.n	8000450 <__udivmoddi4+0xa0>
 8000494:	b902      	cbnz	r2, 8000498 <__udivmoddi4+0xe8>
 8000496:	deff      	udf	#255	; 0xff
 8000498:	fab2 f282 	clz	r2, r2
 800049c:	2a00      	cmp	r2, #0
 800049e:	f040 808f 	bne.w	80005c0 <__udivmoddi4+0x210>
 80004a2:	1b49      	subs	r1, r1, r5
 80004a4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004a8:	fa1f f885 	uxth.w	r8, r5
 80004ac:	2701      	movs	r7, #1
 80004ae:	fbb1 fcfe 	udiv	ip, r1, lr
 80004b2:	0c23      	lsrs	r3, r4, #16
 80004b4:	fb0e 111c 	mls	r1, lr, ip, r1
 80004b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004bc:	fb08 f10c 	mul.w	r1, r8, ip
 80004c0:	4299      	cmp	r1, r3
 80004c2:	d907      	bls.n	80004d4 <__udivmoddi4+0x124>
 80004c4:	18eb      	adds	r3, r5, r3
 80004c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80004ca:	d202      	bcs.n	80004d2 <__udivmoddi4+0x122>
 80004cc:	4299      	cmp	r1, r3
 80004ce:	f200 80cd 	bhi.w	800066c <__udivmoddi4+0x2bc>
 80004d2:	4684      	mov	ip, r0
 80004d4:	1a59      	subs	r1, r3, r1
 80004d6:	b2a3      	uxth	r3, r4
 80004d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004dc:	fb0e 1410 	mls	r4, lr, r0, r1
 80004e0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80004e4:	fb08 f800 	mul.w	r8, r8, r0
 80004e8:	45a0      	cmp	r8, r4
 80004ea:	d907      	bls.n	80004fc <__udivmoddi4+0x14c>
 80004ec:	192c      	adds	r4, r5, r4
 80004ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80004f2:	d202      	bcs.n	80004fa <__udivmoddi4+0x14a>
 80004f4:	45a0      	cmp	r8, r4
 80004f6:	f200 80b6 	bhi.w	8000666 <__udivmoddi4+0x2b6>
 80004fa:	4618      	mov	r0, r3
 80004fc:	eba4 0408 	sub.w	r4, r4, r8
 8000500:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000504:	e79f      	b.n	8000446 <__udivmoddi4+0x96>
 8000506:	f1c7 0c20 	rsb	ip, r7, #32
 800050a:	40bb      	lsls	r3, r7
 800050c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000510:	ea4e 0e03 	orr.w	lr, lr, r3
 8000514:	fa01 f407 	lsl.w	r4, r1, r7
 8000518:	fa20 f50c 	lsr.w	r5, r0, ip
 800051c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000520:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000524:	4325      	orrs	r5, r4
 8000526:	fbb3 f9f8 	udiv	r9, r3, r8
 800052a:	0c2c      	lsrs	r4, r5, #16
 800052c:	fb08 3319 	mls	r3, r8, r9, r3
 8000530:	fa1f fa8e 	uxth.w	sl, lr
 8000534:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000538:	fb09 f40a 	mul.w	r4, r9, sl
 800053c:	429c      	cmp	r4, r3
 800053e:	fa02 f207 	lsl.w	r2, r2, r7
 8000542:	fa00 f107 	lsl.w	r1, r0, r7
 8000546:	d90b      	bls.n	8000560 <__udivmoddi4+0x1b0>
 8000548:	eb1e 0303 	adds.w	r3, lr, r3
 800054c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000550:	f080 8087 	bcs.w	8000662 <__udivmoddi4+0x2b2>
 8000554:	429c      	cmp	r4, r3
 8000556:	f240 8084 	bls.w	8000662 <__udivmoddi4+0x2b2>
 800055a:	f1a9 0902 	sub.w	r9, r9, #2
 800055e:	4473      	add	r3, lr
 8000560:	1b1b      	subs	r3, r3, r4
 8000562:	b2ad      	uxth	r5, r5
 8000564:	fbb3 f0f8 	udiv	r0, r3, r8
 8000568:	fb08 3310 	mls	r3, r8, r0, r3
 800056c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000570:	fb00 fa0a 	mul.w	sl, r0, sl
 8000574:	45a2      	cmp	sl, r4
 8000576:	d908      	bls.n	800058a <__udivmoddi4+0x1da>
 8000578:	eb1e 0404 	adds.w	r4, lr, r4
 800057c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000580:	d26b      	bcs.n	800065a <__udivmoddi4+0x2aa>
 8000582:	45a2      	cmp	sl, r4
 8000584:	d969      	bls.n	800065a <__udivmoddi4+0x2aa>
 8000586:	3802      	subs	r0, #2
 8000588:	4474      	add	r4, lr
 800058a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800058e:	fba0 8902 	umull	r8, r9, r0, r2
 8000592:	eba4 040a 	sub.w	r4, r4, sl
 8000596:	454c      	cmp	r4, r9
 8000598:	46c2      	mov	sl, r8
 800059a:	464b      	mov	r3, r9
 800059c:	d354      	bcc.n	8000648 <__udivmoddi4+0x298>
 800059e:	d051      	beq.n	8000644 <__udivmoddi4+0x294>
 80005a0:	2e00      	cmp	r6, #0
 80005a2:	d069      	beq.n	8000678 <__udivmoddi4+0x2c8>
 80005a4:	ebb1 050a 	subs.w	r5, r1, sl
 80005a8:	eb64 0403 	sbc.w	r4, r4, r3
 80005ac:	fa04 fc0c 	lsl.w	ip, r4, ip
 80005b0:	40fd      	lsrs	r5, r7
 80005b2:	40fc      	lsrs	r4, r7
 80005b4:	ea4c 0505 	orr.w	r5, ip, r5
 80005b8:	e9c6 5400 	strd	r5, r4, [r6]
 80005bc:	2700      	movs	r7, #0
 80005be:	e747      	b.n	8000450 <__udivmoddi4+0xa0>
 80005c0:	f1c2 0320 	rsb	r3, r2, #32
 80005c4:	fa20 f703 	lsr.w	r7, r0, r3
 80005c8:	4095      	lsls	r5, r2
 80005ca:	fa01 f002 	lsl.w	r0, r1, r2
 80005ce:	fa21 f303 	lsr.w	r3, r1, r3
 80005d2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80005d6:	4338      	orrs	r0, r7
 80005d8:	0c01      	lsrs	r1, r0, #16
 80005da:	fbb3 f7fe 	udiv	r7, r3, lr
 80005de:	fa1f f885 	uxth.w	r8, r5
 80005e2:	fb0e 3317 	mls	r3, lr, r7, r3
 80005e6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005ea:	fb07 f308 	mul.w	r3, r7, r8
 80005ee:	428b      	cmp	r3, r1
 80005f0:	fa04 f402 	lsl.w	r4, r4, r2
 80005f4:	d907      	bls.n	8000606 <__udivmoddi4+0x256>
 80005f6:	1869      	adds	r1, r5, r1
 80005f8:	f107 3cff 	add.w	ip, r7, #4294967295
 80005fc:	d22f      	bcs.n	800065e <__udivmoddi4+0x2ae>
 80005fe:	428b      	cmp	r3, r1
 8000600:	d92d      	bls.n	800065e <__udivmoddi4+0x2ae>
 8000602:	3f02      	subs	r7, #2
 8000604:	4429      	add	r1, r5
 8000606:	1acb      	subs	r3, r1, r3
 8000608:	b281      	uxth	r1, r0
 800060a:	fbb3 f0fe 	udiv	r0, r3, lr
 800060e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000612:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000616:	fb00 f308 	mul.w	r3, r0, r8
 800061a:	428b      	cmp	r3, r1
 800061c:	d907      	bls.n	800062e <__udivmoddi4+0x27e>
 800061e:	1869      	adds	r1, r5, r1
 8000620:	f100 3cff 	add.w	ip, r0, #4294967295
 8000624:	d217      	bcs.n	8000656 <__udivmoddi4+0x2a6>
 8000626:	428b      	cmp	r3, r1
 8000628:	d915      	bls.n	8000656 <__udivmoddi4+0x2a6>
 800062a:	3802      	subs	r0, #2
 800062c:	4429      	add	r1, r5
 800062e:	1ac9      	subs	r1, r1, r3
 8000630:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000634:	e73b      	b.n	80004ae <__udivmoddi4+0xfe>
 8000636:	4637      	mov	r7, r6
 8000638:	4630      	mov	r0, r6
 800063a:	e709      	b.n	8000450 <__udivmoddi4+0xa0>
 800063c:	4607      	mov	r7, r0
 800063e:	e6e7      	b.n	8000410 <__udivmoddi4+0x60>
 8000640:	4618      	mov	r0, r3
 8000642:	e6fb      	b.n	800043c <__udivmoddi4+0x8c>
 8000644:	4541      	cmp	r1, r8
 8000646:	d2ab      	bcs.n	80005a0 <__udivmoddi4+0x1f0>
 8000648:	ebb8 0a02 	subs.w	sl, r8, r2
 800064c:	eb69 020e 	sbc.w	r2, r9, lr
 8000650:	3801      	subs	r0, #1
 8000652:	4613      	mov	r3, r2
 8000654:	e7a4      	b.n	80005a0 <__udivmoddi4+0x1f0>
 8000656:	4660      	mov	r0, ip
 8000658:	e7e9      	b.n	800062e <__udivmoddi4+0x27e>
 800065a:	4618      	mov	r0, r3
 800065c:	e795      	b.n	800058a <__udivmoddi4+0x1da>
 800065e:	4667      	mov	r7, ip
 8000660:	e7d1      	b.n	8000606 <__udivmoddi4+0x256>
 8000662:	4681      	mov	r9, r0
 8000664:	e77c      	b.n	8000560 <__udivmoddi4+0x1b0>
 8000666:	3802      	subs	r0, #2
 8000668:	442c      	add	r4, r5
 800066a:	e747      	b.n	80004fc <__udivmoddi4+0x14c>
 800066c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000670:	442b      	add	r3, r5
 8000672:	e72f      	b.n	80004d4 <__udivmoddi4+0x124>
 8000674:	4638      	mov	r0, r7
 8000676:	e708      	b.n	800048a <__udivmoddi4+0xda>
 8000678:	4637      	mov	r7, r6
 800067a:	e6e9      	b.n	8000450 <__udivmoddi4+0xa0>

0800067c <__aeabi_idiv0>:
 800067c:	4770      	bx	lr
 800067e:	bf00      	nop

08000680 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000680:	b480      	push	{r7}
 8000682:	b083      	sub	sp, #12
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000688:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800068c:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000690:	f003 0301 	and.w	r3, r3, #1
 8000694:	2b00      	cmp	r3, #0
 8000696:	d013      	beq.n	80006c0 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000698:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800069c:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80006a0:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d00b      	beq.n	80006c0 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80006a8:	e000      	b.n	80006ac <ITM_SendChar+0x2c>
    {
      __NOP();
 80006aa:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80006ac:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d0f9      	beq.n	80006aa <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80006b6:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80006ba:	687a      	ldr	r2, [r7, #4]
 80006bc:	b2d2      	uxtb	r2, r2
 80006be:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80006c0:	687b      	ldr	r3, [r7, #4]
}
 80006c2:	4618      	mov	r0, r3
 80006c4:	370c      	adds	r7, #12
 80006c6:	46bd      	mov	sp, r7
 80006c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006cc:	4770      	bx	lr
	...

080006d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80006d2:	b099      	sub	sp, #100	; 0x64
 80006d4:	af02      	add	r7, sp, #8
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006d6:	f000 ff51 	bl	800157c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006da:	f000 f907 	bl	80008ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006de:	f000 fabf 	bl	8000c60 <MX_GPIO_Init>
  MX_I2C1_Init();
 80006e2:	f000 f9bf 	bl	8000a64 <MX_I2C1_Init>
  MX_I2C2_Init();
 80006e6:	f000 f9fd 	bl	8000ae4 <MX_I2C2_Init>
  MX_JPEG_Init();
 80006ea:	f000 fa3b 	bl	8000b64 <MX_JPEG_Init>
  MX_SDMMC1_SD_Init();
 80006ee:	f000 fa4d 	bl	8000b8c <MX_SDMMC1_SD_Init>
  MX_UART4_Init();
 80006f2:	f000 fa69 	bl	8000bc8 <MX_UART4_Init>
  MX_FATFS_Init();
 80006f6:	f00a fa9f 	bl	800ac38 <MX_FATFS_Init>
  MX_LIBJPEG_Init();
 80006fa:	f00a fc3b 	bl	800af74 <MX_LIBJPEG_Init>
  /* USER CODE BEGIN 2 */

  // call for initial reset state
  uint8_t set_up_ack[4];
  Camera_Setup(set_up_ack);
 80006fe:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000702:	4618      	mov	r0, r3
 8000704:	f000 fb38 	bl	8000d78 <Camera_Setup>

  //call for 320x240 resolution
  uint8_t res_ack[5];
  Camera_Set_Res(res_ack, 3);
 8000708:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800070c:	2103      	movs	r1, #3
 800070e:	4618      	mov	r0, r3
 8000710:	f000 fbcc 	bl	8000eac <Camera_Set_Res>

  uint8_t prompt;
  uint8_t count = 0;
 8000714:	2300      	movs	r3, #0
 8000716:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  if (prompt == 0x0)
 800071a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800071e:	2b00      	cmp	r3, #0
 8000720:	d102      	bne.n	8000728 <main+0x58>
		  printf("No I2C comms detected yet.\n");
 8000722:	4868      	ldr	r0, [pc, #416]	; (80008c4 <main+0x1f4>)
 8000724:	f00a fde0 	bl	800b2e8 <puts>

	  HAL_Delay(50);
 8000728:	2032      	movs	r0, #50	; 0x32
 800072a:	f000 ffb5 	bl	8001698 <HAL_Delay>

	  prompt = 0x0;
 800072e:	2300      	movs	r3, #0
 8000730:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	  HAL_I2C_Slave_Receive(&hi2c1, &prompt, 1, HAL_MAX_DELAY);
 8000734:	f107 0137 	add.w	r1, r7, #55	; 0x37
 8000738:	f04f 33ff 	mov.w	r3, #4294967295
 800073c:	2201      	movs	r2, #1
 800073e:	4862      	ldr	r0, [pc, #392]	; (80008c8 <main+0x1f8>)
 8000740:	f001 fc37 	bl	8001fb2 <HAL_I2C_Slave_Receive>

	  printf("Prompt Value: %d\n", prompt);
 8000744:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000748:	4619      	mov	r1, r3
 800074a:	4860      	ldr	r0, [pc, #384]	; (80008cc <main+0x1fc>)
 800074c:	f00a fd58 	bl	800b200 <iprintf>

	  if (prompt == 0x01) {
 8000750:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000754:	2b01      	cmp	r3, #1
 8000756:	d1e0      	bne.n	800071a <main+0x4a>
 8000758:	466b      	mov	r3, sp
 800075a:	461e      	mov	r6, r3
		   * There is no ACK checks for now, simple one would be to
		   * check if the first element is 0x76 as all ACKs involve
		   * that.
		   */

		  count++;
 800075c:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8000760:	3301      	adds	r3, #1
 8000762:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
		  printf("I2C comm detected, count at: %d\n", count);
 8000766:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 800076a:	4619      	mov	r1, r3
 800076c:	4858      	ldr	r0, [pc, #352]	; (80008d0 <main+0x200>)
 800076e:	f00a fd47 	bl	800b200 <iprintf>

		  // get TOF distance values, 7 for the 7 sensors on the board
		  uint8_t dist_vals[7];
		  get_TOF_Data(dist_vals);
 8000772:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000776:	4618      	mov	r0, r3
 8000778:	f000 fbc4 	bl	8000f04 <get_TOF_Data>

		  // get compass heading for calibration, unsure of exact format
		  uint8_t hdng_cal[1];
		  get_Compass_Data(hdng_cal);
 800077c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000780:	4618      	mov	r0, r3
 8000782:	f000 fbc9 	bl	8000f18 <get_Compass_Data>
		   *
		   * Some ACK checks could be added to verify information, but otherwise the
		   * flow of the below code should be mostly finalized.
		   */

		  printf("Taking snapshot...\n");
 8000786:	4853      	ldr	r0, [pc, #332]	; (80008d4 <main+0x204>)
 8000788:	f00a fdae 	bl	800b2e8 <puts>
		  uint8_t snapshot_ack[5];
		  Camera_Snapshot(snapshot_ack);
 800078c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000790:	4618      	mov	r0, r3
 8000792:	f000 fb35 	bl	8000e00 <Camera_Snapshot>

		  printf("Getting image length...\n");
 8000796:	4850      	ldr	r0, [pc, #320]	; (80008d8 <main+0x208>)
 8000798:	f00a fda6 	bl	800b2e8 <puts>
		  uint8_t length_ack[9];
		  Camera_Get_IMG_Length(length_ack);
 800079c:	f107 0318 	add.w	r3, r7, #24
 80007a0:	4618      	mov	r0, r3
 80007a2:	f000 fb43 	bl	8000e2c <Camera_Get_IMG_Length>

		  // indices 7 and 8 of the length_ack should have actual values
		  uint16_t img_length = (uint16_t) length_ack[7]*255 + (uint16_t) length_ack[8];
 80007a6:	7ffb      	ldrb	r3, [r7, #31]
 80007a8:	b29b      	uxth	r3, r3
 80007aa:	461a      	mov	r2, r3
 80007ac:	0212      	lsls	r2, r2, #8
 80007ae:	1ad3      	subs	r3, r2, r3
 80007b0:	b29a      	uxth	r2, r3
 80007b2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80007b6:	b29b      	uxth	r3, r3
 80007b8:	4413      	add	r3, r2
 80007ba:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

		  // need to set up for reading image based on length, variable due to compression
		  CAM_READ_IMG[8] = 0x0;				// indices 8 and 9 should have the mem positions
 80007be:	4b47      	ldr	r3, [pc, #284]	; (80008dc <main+0x20c>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	721a      	strb	r2, [r3, #8]
		  CAM_READ_IMG[9] = 0x0;
 80007c4:	4b45      	ldr	r3, [pc, #276]	; (80008dc <main+0x20c>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	725a      	strb	r2, [r3, #9]
		  CAM_READ_IMG[12] = length_ack[7];		// indices 12 and 13 should have the high and low byte length
 80007ca:	7ffa      	ldrb	r2, [r7, #31]
 80007cc:	4b43      	ldr	r3, [pc, #268]	; (80008dc <main+0x20c>)
 80007ce:	731a      	strb	r2, [r3, #12]
		  CAM_READ_IMG[13] = length_ack[8];
 80007d0:	f897 2020 	ldrb.w	r2, [r7, #32]
 80007d4:	4b41      	ldr	r3, [pc, #260]	; (80008dc <main+0x20c>)
 80007d6:	735a      	strb	r2, [r3, #13]
		  uint8_t img_buf_and_ack[9+img_length];
 80007d8:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80007dc:	f103 0009 	add.w	r0, r3, #9
 80007e0:	1e43      	subs	r3, r0, #1
 80007e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80007e4:	4603      	mov	r3, r0
 80007e6:	4619      	mov	r1, r3
 80007e8:	f04f 0200 	mov.w	r2, #0
 80007ec:	f04f 0300 	mov.w	r3, #0
 80007f0:	f04f 0400 	mov.w	r4, #0
 80007f4:	00d4      	lsls	r4, r2, #3
 80007f6:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 80007fa:	00cb      	lsls	r3, r1, #3
 80007fc:	4603      	mov	r3, r0
 80007fe:	4619      	mov	r1, r3
 8000800:	f04f 0200 	mov.w	r2, #0
 8000804:	f04f 0300 	mov.w	r3, #0
 8000808:	f04f 0400 	mov.w	r4, #0
 800080c:	00d4      	lsls	r4, r2, #3
 800080e:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8000812:	00cb      	lsls	r3, r1, #3
 8000814:	4603      	mov	r3, r0
 8000816:	3307      	adds	r3, #7
 8000818:	08db      	lsrs	r3, r3, #3
 800081a:	00db      	lsls	r3, r3, #3
 800081c:	ebad 0d03 	sub.w	sp, sp, r3
 8000820:	ab02      	add	r3, sp, #8
 8000822:	3300      	adds	r3, #0
 8000824:	64bb      	str	r3, [r7, #72]	; 0x48

		  printf("Getting image...\n");
 8000826:	482e      	ldr	r0, [pc, #184]	; (80008e0 <main+0x210>)
 8000828:	f00a fd5e 	bl	800b2e8 <puts>
		  Camera_Get_IMG(img_buf_and_ack, length_ack[7], length_ack[8], 0x0, 0x0);
 800082c:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800082e:	7ff9      	ldrb	r1, [r7, #31]
 8000830:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000834:	2300      	movs	r3, #0
 8000836:	9300      	str	r3, [sp, #0]
 8000838:	2300      	movs	r3, #0
 800083a:	f000 fb0d 	bl	8000e58 <Camera_Get_IMG>

		  // create image object for easy access to parameters, copy over jpg img data
		  image_t* cam_img = malloc(sizeof(image_t));
 800083e:	2010      	movs	r0, #16
 8000840:	f00a fc26 	bl	800b090 <malloc>
 8000844:	4603      	mov	r3, r0
 8000846:	647b      	str	r3, [r7, #68]	; 0x44
		  cam_img->w = 320;
 8000848:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800084a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800084e:	601a      	str	r2, [r3, #0]
		  cam_img->h = 240;
 8000850:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000852:	22f0      	movs	r2, #240	; 0xf0
 8000854:	605a      	str	r2, [r3, #4]
		  cam_img->bpp = 3;
 8000856:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000858:	2203      	movs	r2, #3
 800085a:	609a      	str	r2, [r3, #8]
		  cam_img->pixels = malloc(img_length*sizeof(uint8_t));
 800085c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8000860:	4618      	mov	r0, r3
 8000862:	f00a fc15 	bl	800b090 <malloc>
 8000866:	4603      	mov	r3, r0
 8000868:	461a      	mov	r2, r3
 800086a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800086c:	60da      	str	r2, [r3, #12]
		  for (int i = 0; i < img_length; i++)
 800086e:	2300      	movs	r3, #0
 8000870:	657b      	str	r3, [r7, #84]	; 0x54
 8000872:	e00b      	b.n	800088c <main+0x1bc>
			  cam_img->pixels[i] = img_buf_and_ack[5+i];
 8000874:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000876:	1d5a      	adds	r2, r3, #5
 8000878:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800087a:	68d9      	ldr	r1, [r3, #12]
 800087c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800087e:	440b      	add	r3, r1
 8000880:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8000882:	5c8a      	ldrb	r2, [r1, r2]
 8000884:	701a      	strb	r2, [r3, #0]
		  for (int i = 0; i < img_length; i++)
 8000886:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000888:	3301      	adds	r3, #1
 800088a:	657b      	str	r3, [r7, #84]	; 0x54
 800088c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8000890:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000892:	429a      	cmp	r2, r3
 8000894:	dbee      	blt.n	8000874 <main+0x1a4>

		  // begin image processing, store into dynamic array of objects
		  obj_t* objects;

		  uint8_t buffer[19];
		  printf("Data collection finished, sending data...");
 8000896:	4813      	ldr	r0, [pc, #76]	; (80008e4 <main+0x214>)
 8000898:	f00a fcb2 	bl	800b200 <iprintf>
		  strcpy(buffer, "Message received.\n");
 800089c:	4b12      	ldr	r3, [pc, #72]	; (80008e8 <main+0x218>)
 800089e:	1d3c      	adds	r4, r7, #4
 80008a0:	461d      	mov	r5, r3
 80008a2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008a6:	682b      	ldr	r3, [r5, #0]
 80008a8:	461a      	mov	r2, r3
 80008aa:	8022      	strh	r2, [r4, #0]
 80008ac:	3402      	adds	r4, #2
 80008ae:	0c1b      	lsrs	r3, r3, #16
 80008b0:	7023      	strb	r3, [r4, #0]
		  HAL_I2C_Slave_Transmit(&hi2c1, buffer, sizeof(buffer)/sizeof(buffer[0]), HAL_MAX_DELAY);
 80008b2:	1d39      	adds	r1, r7, #4
 80008b4:	f04f 33ff 	mov.w	r3, #4294967295
 80008b8:	2213      	movs	r2, #19
 80008ba:	4803      	ldr	r0, [pc, #12]	; (80008c8 <main+0x1f8>)
 80008bc:	f001 fa70 	bl	8001da0 <HAL_I2C_Slave_Transmit>
 80008c0:	46b5      	mov	sp, r6
	  if (prompt == 0x0)
 80008c2:	e72a      	b.n	800071a <main+0x4a>
 80008c4:	0800bf58 	.word	0x0800bf58
 80008c8:	240000e8 	.word	0x240000e8
 80008cc:	0800bf74 	.word	0x0800bf74
 80008d0:	0800bf88 	.word	0x0800bf88
 80008d4:	0800bfac 	.word	0x0800bfac
 80008d8:	0800bfc0 	.word	0x0800bfc0
 80008dc:	24000030 	.word	0x24000030
 80008e0:	0800bfd8 	.word	0x0800bfd8
 80008e4:	0800bfec 	.word	0x0800bfec
 80008e8:	0800c018 	.word	0x0800c018

080008ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b0cc      	sub	sp, #304	; 0x130
 80008f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008f2:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80008f6:	224c      	movs	r2, #76	; 0x4c
 80008f8:	2100      	movs	r1, #0
 80008fa:	4618      	mov	r0, r3
 80008fc:	f00a fbd0 	bl	800b0a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000900:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000904:	2220      	movs	r2, #32
 8000906:	2100      	movs	r1, #0
 8000908:	4618      	mov	r0, r3
 800090a:	f00a fbc9 	bl	800b0a0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800090e:	f107 0308 	add.w	r3, r7, #8
 8000912:	4618      	mov	r0, r3
 8000914:	23bc      	movs	r3, #188	; 0xbc
 8000916:	461a      	mov	r2, r3
 8000918:	2100      	movs	r1, #0
 800091a:	f00a fbc1 	bl	800b0a0 <memset>

  /** Supply configuration update enable 
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800091e:	2002      	movs	r0, #2
 8000920:	f002 fc54 	bl	80031cc <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000924:	1d3b      	adds	r3, r7, #4
 8000926:	2200      	movs	r2, #0
 8000928:	601a      	str	r2, [r3, #0]
 800092a:	4b4b      	ldr	r3, [pc, #300]	; (8000a58 <SystemClock_Config+0x16c>)
 800092c:	699b      	ldr	r3, [r3, #24]
 800092e:	4a4a      	ldr	r2, [pc, #296]	; (8000a58 <SystemClock_Config+0x16c>)
 8000930:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000934:	6193      	str	r3, [r2, #24]
 8000936:	4b48      	ldr	r3, [pc, #288]	; (8000a58 <SystemClock_Config+0x16c>)
 8000938:	699b      	ldr	r3, [r3, #24]
 800093a:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 800093e:	1d3b      	adds	r3, r7, #4
 8000940:	601a      	str	r2, [r3, #0]
 8000942:	4b46      	ldr	r3, [pc, #280]	; (8000a5c <SystemClock_Config+0x170>)
 8000944:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000946:	4a45      	ldr	r2, [pc, #276]	; (8000a5c <SystemClock_Config+0x170>)
 8000948:	f043 0301 	orr.w	r3, r3, #1
 800094c:	62d3      	str	r3, [r2, #44]	; 0x2c
 800094e:	4b43      	ldr	r3, [pc, #268]	; (8000a5c <SystemClock_Config+0x170>)
 8000950:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000952:	f003 0201 	and.w	r2, r3, #1
 8000956:	1d3b      	adds	r3, r7, #4
 8000958:	601a      	str	r2, [r3, #0]
 800095a:	1d3b      	adds	r3, r7, #4
 800095c:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800095e:	bf00      	nop
 8000960:	4b3d      	ldr	r3, [pc, #244]	; (8000a58 <SystemClock_Config+0x16c>)
 8000962:	699b      	ldr	r3, [r3, #24]
 8000964:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000968:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800096c:	d1f8      	bne.n	8000960 <SystemClock_Config+0x74>
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800096e:	2302      	movs	r3, #2
 8000970:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000974:	2301      	movs	r3, #1
 8000976:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800097a:	2320      	movs	r3, #32
 800097c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000980:	2302      	movs	r3, #2
 8000982:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000986:	2300      	movs	r3, #0
 8000988:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800098c:	2304      	movs	r3, #4
 800098e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  RCC_OscInitStruct.PLL.PLLN = 60;
 8000992:	233c      	movs	r3, #60	; 0x3c
 8000994:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000998:	2302      	movs	r3, #2
 800099a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800099e:	2302      	movs	r3, #2
 80009a0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80009a4:	2302      	movs	r3, #2
 80009a6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80009aa:	230c      	movs	r3, #12
 80009ac:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80009b0:	2300      	movs	r3, #0
 80009b2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80009b6:	2300      	movs	r3, #0
 80009b8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009bc:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80009c0:	4618      	mov	r0, r3
 80009c2:	f002 fc3b 	bl	800323c <HAL_RCC_OscConfig>
 80009c6:	4603      	mov	r3, r0
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d001      	beq.n	80009d0 <SystemClock_Config+0xe4>
  {
    Error_Handler();
 80009cc:	f000 fb00 	bl	8000fd0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009d0:	233f      	movs	r3, #63	; 0x3f
 80009d2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009d6:	2303      	movs	r3, #3
 80009d8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80009dc:	2300      	movs	r3, #0
 80009de:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80009e2:	2308      	movs	r3, #8
 80009e4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80009e8:	2340      	movs	r3, #64	; 0x40
 80009ea:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80009ee:	2340      	movs	r3, #64	; 0x40
 80009f0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80009f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80009f8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80009fc:	2340      	movs	r3, #64	; 0x40
 80009fe:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000a02:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000a06:	2104      	movs	r1, #4
 8000a08:	4618      	mov	r0, r3
 8000a0a:	f002 ffcf 	bl	80039ac <HAL_RCC_ClockConfig>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d001      	beq.n	8000a18 <SystemClock_Config+0x12c>
  {
    Error_Handler();
 8000a14:	f000 fadc 	bl	8000fd0 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4|RCC_PERIPHCLK_SDMMC
 8000a18:	f107 0308 	add.w	r3, r7, #8
 8000a1c:	4a10      	ldr	r2, [pc, #64]	; (8000a60 <SystemClock_Config+0x174>)
 8000a1e:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_I2C2|RCC_PERIPHCLK_I2C1;
  PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 8000a20:	f107 0308 	add.w	r3, r7, #8
 8000a24:	2200      	movs	r2, #0
 8000a26:	64da      	str	r2, [r3, #76]	; 0x4c
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000a28:	f107 0308 	add.w	r3, r7, #8
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	675a      	str	r2, [r3, #116]	; 0x74
  PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8000a30:	f107 0308 	add.w	r3, r7, #8
 8000a34:	2200      	movs	r2, #0
 8000a36:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a3a:	f107 0308 	add.w	r3, r7, #8
 8000a3e:	4618      	mov	r0, r3
 8000a40:	f003 fb12 	bl	8004068 <HAL_RCCEx_PeriphCLKConfig>
 8000a44:	4603      	mov	r3, r0
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d001      	beq.n	8000a4e <SystemClock_Config+0x162>
  {
    Error_Handler();
 8000a4a:	f000 fac1 	bl	8000fd0 <Error_Handler>
  }
}
 8000a4e:	bf00      	nop
 8000a50:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8000a54:	46bd      	mov	sp, r7
 8000a56:	bd80      	pop	{r7, pc}
 8000a58:	58024800 	.word	0x58024800
 8000a5c:	58000400 	.word	0x58000400
 8000a60:	0001000a 	.word	0x0001000a

08000a64 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000a68:	4b1b      	ldr	r3, [pc, #108]	; (8000ad8 <MX_I2C1_Init+0x74>)
 8000a6a:	4a1c      	ldr	r2, [pc, #112]	; (8000adc <MX_I2C1_Init+0x78>)
 8000a6c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x307075B1;
 8000a6e:	4b1a      	ldr	r3, [pc, #104]	; (8000ad8 <MX_I2C1_Init+0x74>)
 8000a70:	4a1b      	ldr	r2, [pc, #108]	; (8000ae0 <MX_I2C1_Init+0x7c>)
 8000a72:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0x01;
 8000a74:	4b18      	ldr	r3, [pc, #96]	; (8000ad8 <MX_I2C1_Init+0x74>)
 8000a76:	2201      	movs	r2, #1
 8000a78:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a7a:	4b17      	ldr	r3, [pc, #92]	; (8000ad8 <MX_I2C1_Init+0x74>)
 8000a7c:	2201      	movs	r2, #1
 8000a7e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a80:	4b15      	ldr	r3, [pc, #84]	; (8000ad8 <MX_I2C1_Init+0x74>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000a86:	4b14      	ldr	r3, [pc, #80]	; (8000ad8 <MX_I2C1_Init+0x74>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000a8c:	4b12      	ldr	r3, [pc, #72]	; (8000ad8 <MX_I2C1_Init+0x74>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a92:	4b11      	ldr	r3, [pc, #68]	; (8000ad8 <MX_I2C1_Init+0x74>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a98:	4b0f      	ldr	r3, [pc, #60]	; (8000ad8 <MX_I2C1_Init+0x74>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a9e:	480e      	ldr	r0, [pc, #56]	; (8000ad8 <MX_I2C1_Init+0x74>)
 8000aa0:	f001 f8ee 	bl	8001c80 <HAL_I2C_Init>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d001      	beq.n	8000aae <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000aaa:	f000 fa91 	bl	8000fd0 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000aae:	2100      	movs	r1, #0
 8000ab0:	4809      	ldr	r0, [pc, #36]	; (8000ad8 <MX_I2C1_Init+0x74>)
 8000ab2:	f001 fd2f 	bl	8002514 <HAL_I2CEx_ConfigAnalogFilter>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d001      	beq.n	8000ac0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000abc:	f000 fa88 	bl	8000fd0 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000ac0:	2100      	movs	r1, #0
 8000ac2:	4805      	ldr	r0, [pc, #20]	; (8000ad8 <MX_I2C1_Init+0x74>)
 8000ac4:	f001 fd71 	bl	80025aa <HAL_I2CEx_ConfigDigitalFilter>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d001      	beq.n	8000ad2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000ace:	f000 fa7f 	bl	8000fd0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000ad2:	bf00      	nop
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	bf00      	nop
 8000ad8:	240000e8 	.word	0x240000e8
 8000adc:	40005400 	.word	0x40005400
 8000ae0:	307075b1 	.word	0x307075b1

08000ae4 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000ae8:	4b1b      	ldr	r3, [pc, #108]	; (8000b58 <MX_I2C2_Init+0x74>)
 8000aea:	4a1c      	ldr	r2, [pc, #112]	; (8000b5c <MX_I2C2_Init+0x78>)
 8000aec:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00B03FDB;
 8000aee:	4b1a      	ldr	r3, [pc, #104]	; (8000b58 <MX_I2C2_Init+0x74>)
 8000af0:	4a1b      	ldr	r2, [pc, #108]	; (8000b60 <MX_I2C2_Init+0x7c>)
 8000af2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0x01;
 8000af4:	4b18      	ldr	r3, [pc, #96]	; (8000b58 <MX_I2C2_Init+0x74>)
 8000af6:	2201      	movs	r2, #1
 8000af8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000afa:	4b17      	ldr	r3, [pc, #92]	; (8000b58 <MX_I2C2_Init+0x74>)
 8000afc:	2201      	movs	r2, #1
 8000afe:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b00:	4b15      	ldr	r3, [pc, #84]	; (8000b58 <MX_I2C2_Init+0x74>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000b06:	4b14      	ldr	r3, [pc, #80]	; (8000b58 <MX_I2C2_Init+0x74>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000b0c:	4b12      	ldr	r3, [pc, #72]	; (8000b58 <MX_I2C2_Init+0x74>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b12:	4b11      	ldr	r3, [pc, #68]	; (8000b58 <MX_I2C2_Init+0x74>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b18:	4b0f      	ldr	r3, [pc, #60]	; (8000b58 <MX_I2C2_Init+0x74>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000b1e:	480e      	ldr	r0, [pc, #56]	; (8000b58 <MX_I2C2_Init+0x74>)
 8000b20:	f001 f8ae 	bl	8001c80 <HAL_I2C_Init>
 8000b24:	4603      	mov	r3, r0
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d001      	beq.n	8000b2e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000b2a:	f000 fa51 	bl	8000fd0 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000b2e:	2100      	movs	r1, #0
 8000b30:	4809      	ldr	r0, [pc, #36]	; (8000b58 <MX_I2C2_Init+0x74>)
 8000b32:	f001 fcef 	bl	8002514 <HAL_I2CEx_ConfigAnalogFilter>
 8000b36:	4603      	mov	r3, r0
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d001      	beq.n	8000b40 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000b3c:	f000 fa48 	bl	8000fd0 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000b40:	2100      	movs	r1, #0
 8000b42:	4805      	ldr	r0, [pc, #20]	; (8000b58 <MX_I2C2_Init+0x74>)
 8000b44:	f001 fd31 	bl	80025aa <HAL_I2CEx_ConfigDigitalFilter>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d001      	beq.n	8000b52 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000b4e:	f000 fa3f 	bl	8000fd0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000b52:	bf00      	nop
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	24000134 	.word	0x24000134
 8000b5c:	40005800 	.word	0x40005800
 8000b60:	00b03fdb 	.word	0x00b03fdb

08000b64 <MX_JPEG_Init>:
  * @brief JPEG Initialization Function
  * @param None
  * @retval None
  */
static void MX_JPEG_Init(void)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	af00      	add	r7, sp, #0
  /* USER CODE END JPEG_Init 0 */

  /* USER CODE BEGIN JPEG_Init 1 */

  /* USER CODE END JPEG_Init 1 */
  hjpeg.Instance = JPEG;
 8000b68:	4b06      	ldr	r3, [pc, #24]	; (8000b84 <MX_JPEG_Init+0x20>)
 8000b6a:	4a07      	ldr	r2, [pc, #28]	; (8000b88 <MX_JPEG_Init+0x24>)
 8000b6c:	601a      	str	r2, [r3, #0]
  if (HAL_JPEG_Init(&hjpeg) != HAL_OK)
 8000b6e:	4805      	ldr	r0, [pc, #20]	; (8000b84 <MX_JPEG_Init+0x20>)
 8000b70:	f001 fd68 	bl	8002644 <HAL_JPEG_Init>
 8000b74:	4603      	mov	r3, r0
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d001      	beq.n	8000b7e <MX_JPEG_Init+0x1a>
  {
    Error_Handler();
 8000b7a:	f000 fa29 	bl	8000fd0 <Error_Handler>
  }
  /* USER CODE BEGIN JPEG_Init 2 */

  /* USER CODE END JPEG_Init 2 */

}
 8000b7e:	bf00      	nop
 8000b80:	bd80      	pop	{r7, pc}
 8000b82:	bf00      	nop
 8000b84:	24000200 	.word	0x24000200
 8000b88:	52003000 	.word	0x52003000

08000b8c <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8000b90:	4b0b      	ldr	r3, [pc, #44]	; (8000bc0 <MX_SDMMC1_SD_Init+0x34>)
 8000b92:	4a0c      	ldr	r2, [pc, #48]	; (8000bc4 <MX_SDMMC1_SD_Init+0x38>)
 8000b94:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8000b96:	4b0a      	ldr	r3, [pc, #40]	; (8000bc0 <MX_SDMMC1_SD_Init+0x34>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8000b9c:	4b08      	ldr	r3, [pc, #32]	; (8000bc0 <MX_SDMMC1_SD_Init+0x34>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8000ba2:	4b07      	ldr	r3, [pc, #28]	; (8000bc0 <MX_SDMMC1_SD_Init+0x34>)
 8000ba4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000ba8:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8000baa:	4b05      	ldr	r3, [pc, #20]	; (8000bc0 <MX_SDMMC1_SD_Init+0x34>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 0;
 8000bb0:	4b03      	ldr	r3, [pc, #12]	; (8000bc0 <MX_SDMMC1_SD_Init+0x34>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8000bb6:	bf00      	nop
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbe:	4770      	bx	lr
 8000bc0:	24000180 	.word	0x24000180
 8000bc4:	52007000 	.word	0x52007000

08000bc8 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000bcc:	4b22      	ldr	r3, [pc, #136]	; (8000c58 <MX_UART4_Init+0x90>)
 8000bce:	4a23      	ldr	r2, [pc, #140]	; (8000c5c <MX_UART4_Init+0x94>)
 8000bd0:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000bd2:	4b21      	ldr	r3, [pc, #132]	; (8000c58 <MX_UART4_Init+0x90>)
 8000bd4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000bd8:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000bda:	4b1f      	ldr	r3, [pc, #124]	; (8000c58 <MX_UART4_Init+0x90>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000be0:	4b1d      	ldr	r3, [pc, #116]	; (8000c58 <MX_UART4_Init+0x90>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000be6:	4b1c      	ldr	r3, [pc, #112]	; (8000c58 <MX_UART4_Init+0x90>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000bec:	4b1a      	ldr	r3, [pc, #104]	; (8000c58 <MX_UART4_Init+0x90>)
 8000bee:	220c      	movs	r2, #12
 8000bf0:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bf2:	4b19      	ldr	r3, [pc, #100]	; (8000c58 <MX_UART4_Init+0x90>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bf8:	4b17      	ldr	r3, [pc, #92]	; (8000c58 <MX_UART4_Init+0x90>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000bfe:	4b16      	ldr	r3, [pc, #88]	; (8000c58 <MX_UART4_Init+0x90>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000c04:	4b14      	ldr	r3, [pc, #80]	; (8000c58 <MX_UART4_Init+0x90>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c0a:	4b13      	ldr	r3, [pc, #76]	; (8000c58 <MX_UART4_Init+0x90>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000c10:	4811      	ldr	r0, [pc, #68]	; (8000c58 <MX_UART4_Init+0x90>)
 8000c12:	f006 fc7d 	bl	8007510 <HAL_UART_Init>
 8000c16:	4603      	mov	r3, r0
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d001      	beq.n	8000c20 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8000c1c:	f000 f9d8 	bl	8000fd0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c20:	2100      	movs	r1, #0
 8000c22:	480d      	ldr	r0, [pc, #52]	; (8000c58 <MX_UART4_Init+0x90>)
 8000c24:	f009 f94d 	bl	8009ec2 <HAL_UARTEx_SetTxFifoThreshold>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d001      	beq.n	8000c32 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8000c2e:	f000 f9cf 	bl	8000fd0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c32:	2100      	movs	r1, #0
 8000c34:	4808      	ldr	r0, [pc, #32]	; (8000c58 <MX_UART4_Init+0x90>)
 8000c36:	f009 f982 	bl	8009f3e <HAL_UARTEx_SetRxFifoThreshold>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d001      	beq.n	8000c44 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8000c40:	f000 f9c6 	bl	8000fd0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8000c44:	4804      	ldr	r0, [pc, #16]	; (8000c58 <MX_UART4_Init+0x90>)
 8000c46:	f009 f903 	bl	8009e50 <HAL_UARTEx_DisableFifoMode>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d001      	beq.n	8000c54 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8000c50:	f000 f9be 	bl	8000fd0 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000c54:	bf00      	nop
 8000c56:	bd80      	pop	{r7, pc}
 8000c58:	24000258 	.word	0x24000258
 8000c5c:	40004c00 	.word	0x40004c00

08000c60 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b08c      	sub	sp, #48	; 0x30
 8000c64:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c66:	f107 031c 	add.w	r3, r7, #28
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	601a      	str	r2, [r3, #0]
 8000c6e:	605a      	str	r2, [r3, #4]
 8000c70:	609a      	str	r2, [r3, #8]
 8000c72:	60da      	str	r2, [r3, #12]
 8000c74:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000c76:	4b3e      	ldr	r3, [pc, #248]	; (8000d70 <MX_GPIO_Init+0x110>)
 8000c78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c7c:	4a3c      	ldr	r2, [pc, #240]	; (8000d70 <MX_GPIO_Init+0x110>)
 8000c7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c82:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c86:	4b3a      	ldr	r3, [pc, #232]	; (8000d70 <MX_GPIO_Init+0x110>)
 8000c88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000c90:	61bb      	str	r3, [r7, #24]
 8000c92:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000c94:	4b36      	ldr	r3, [pc, #216]	; (8000d70 <MX_GPIO_Init+0x110>)
 8000c96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c9a:	4a35      	ldr	r2, [pc, #212]	; (8000d70 <MX_GPIO_Init+0x110>)
 8000c9c:	f043 0320 	orr.w	r3, r3, #32
 8000ca0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ca4:	4b32      	ldr	r3, [pc, #200]	; (8000d70 <MX_GPIO_Init+0x110>)
 8000ca6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000caa:	f003 0320 	and.w	r3, r3, #32
 8000cae:	617b      	str	r3, [r7, #20]
 8000cb0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cb2:	4b2f      	ldr	r3, [pc, #188]	; (8000d70 <MX_GPIO_Init+0x110>)
 8000cb4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cb8:	4a2d      	ldr	r2, [pc, #180]	; (8000d70 <MX_GPIO_Init+0x110>)
 8000cba:	f043 0301 	orr.w	r3, r3, #1
 8000cbe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000cc2:	4b2b      	ldr	r3, [pc, #172]	; (8000d70 <MX_GPIO_Init+0x110>)
 8000cc4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cc8:	f003 0301 	and.w	r3, r3, #1
 8000ccc:	613b      	str	r3, [r7, #16]
 8000cce:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cd0:	4b27      	ldr	r3, [pc, #156]	; (8000d70 <MX_GPIO_Init+0x110>)
 8000cd2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cd6:	4a26      	ldr	r2, [pc, #152]	; (8000d70 <MX_GPIO_Init+0x110>)
 8000cd8:	f043 0304 	orr.w	r3, r3, #4
 8000cdc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ce0:	4b23      	ldr	r3, [pc, #140]	; (8000d70 <MX_GPIO_Init+0x110>)
 8000ce2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ce6:	f003 0304 	and.w	r3, r3, #4
 8000cea:	60fb      	str	r3, [r7, #12]
 8000cec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cee:	4b20      	ldr	r3, [pc, #128]	; (8000d70 <MX_GPIO_Init+0x110>)
 8000cf0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cf4:	4a1e      	ldr	r2, [pc, #120]	; (8000d70 <MX_GPIO_Init+0x110>)
 8000cf6:	f043 0308 	orr.w	r3, r3, #8
 8000cfa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000cfe:	4b1c      	ldr	r3, [pc, #112]	; (8000d70 <MX_GPIO_Init+0x110>)
 8000d00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d04:	f003 0308 	and.w	r3, r3, #8
 8000d08:	60bb      	str	r3, [r7, #8]
 8000d0a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d0c:	4b18      	ldr	r3, [pc, #96]	; (8000d70 <MX_GPIO_Init+0x110>)
 8000d0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d12:	4a17      	ldr	r2, [pc, #92]	; (8000d70 <MX_GPIO_Init+0x110>)
 8000d14:	f043 0302 	orr.w	r3, r3, #2
 8000d18:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d1c:	4b14      	ldr	r3, [pc, #80]	; (8000d70 <MX_GPIO_Init+0x110>)
 8000d1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d22:	f003 0302 	and.w	r3, r3, #2
 8000d26:	607b      	str	r3, [r7, #4]
 8000d28:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	2110      	movs	r1, #16
 8000d2e:	4811      	ldr	r0, [pc, #68]	; (8000d74 <MX_GPIO_Init+0x114>)
 8000d30:	f000 ff8c 	bl	8001c4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000d34:	2310      	movs	r3, #16
 8000d36:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d38:	2301      	movs	r3, #1
 8000d3a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d40:	2300      	movs	r3, #0
 8000d42:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d44:	f107 031c 	add.w	r3, r7, #28
 8000d48:	4619      	mov	r1, r3
 8000d4a:	480a      	ldr	r0, [pc, #40]	; (8000d74 <MX_GPIO_Init+0x114>)
 8000d4c:	f000 fdb6 	bl	80018bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000d50:	2320      	movs	r3, #32
 8000d52:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d54:	2300      	movs	r3, #0
 8000d56:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d5c:	f107 031c 	add.w	r3, r7, #28
 8000d60:	4619      	mov	r1, r3
 8000d62:	4804      	ldr	r0, [pc, #16]	; (8000d74 <MX_GPIO_Init+0x114>)
 8000d64:	f000 fdaa 	bl	80018bc <HAL_GPIO_Init>

}
 8000d68:	bf00      	nop
 8000d6a:	3730      	adds	r7, #48	; 0x30
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bd80      	pop	{r7, pc}
 8000d70:	58024400 	.word	0x58024400
 8000d74:	58020400 	.word	0x58020400

08000d78 <Camera_Setup>:

/* USER CODE BEGIN 4 */

// required set-up process for the camera to function, according to documentation
void Camera_Setup(uint8_t* rec)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b084      	sub	sp, #16
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
	HAL_Delay(2500);	//2500 ms delay
 8000d80:	f640 10c4 	movw	r0, #2500	; 0x9c4
 8000d84:	f000 fc88 	bl	8001698 <HAL_Delay>
	while(!send_UART(CAM_RESET, rec)) {}	//repeats until successful message sent and message received
 8000d88:	bf00      	nop
 8000d8a:	6879      	ldr	r1, [r7, #4]
 8000d8c:	4818      	ldr	r0, [pc, #96]	; (8000df0 <Camera_Setup+0x78>)
 8000d8e:	f000 f8cd 	bl	8000f2c <send_UART>
 8000d92:	4603      	mov	r3, r0
 8000d94:	f083 0301 	eor.w	r3, r3, #1
 8000d98:	b2db      	uxtb	r3, r3
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d1f5      	bne.n	8000d8a <Camera_Setup+0x12>

	printf("%d\n", sizeof(rec)/sizeof(rec[0]));
 8000d9e:	2104      	movs	r1, #4
 8000da0:	4814      	ldr	r0, [pc, #80]	; (8000df4 <Camera_Setup+0x7c>)
 8000da2:	f00a fa2d 	bl	800b200 <iprintf>

	for (int i = 0; i < sizeof(rec)/sizeof(rec[0]); i++) {
 8000da6:	2300      	movs	r3, #0
 8000da8:	60fb      	str	r3, [r7, #12]
 8000daa:	e019      	b.n	8000de0 <Camera_Setup+0x68>
		if (rec[i] != CAM_RESET_ACK[i]) {
 8000dac:	68fb      	ldr	r3, [r7, #12]
 8000dae:	687a      	ldr	r2, [r7, #4]
 8000db0:	4413      	add	r3, r2
 8000db2:	781a      	ldrb	r2, [r3, #0]
 8000db4:	4910      	ldr	r1, [pc, #64]	; (8000df8 <Camera_Setup+0x80>)
 8000db6:	68fb      	ldr	r3, [r7, #12]
 8000db8:	440b      	add	r3, r1
 8000dba:	781b      	ldrb	r3, [r3, #0]
 8000dbc:	429a      	cmp	r2, r3
 8000dbe:	d00c      	beq.n	8000dda <Camera_Setup+0x62>
			printf("ACK did not match expected values: %d, %d", rec[i], CAM_RESET_ACK[i]);
 8000dc0:	68fb      	ldr	r3, [r7, #12]
 8000dc2:	687a      	ldr	r2, [r7, #4]
 8000dc4:	4413      	add	r3, r2
 8000dc6:	781b      	ldrb	r3, [r3, #0]
 8000dc8:	4619      	mov	r1, r3
 8000dca:	4a0b      	ldr	r2, [pc, #44]	; (8000df8 <Camera_Setup+0x80>)
 8000dcc:	68fb      	ldr	r3, [r7, #12]
 8000dce:	4413      	add	r3, r2
 8000dd0:	781b      	ldrb	r3, [r3, #0]
 8000dd2:	461a      	mov	r2, r3
 8000dd4:	4809      	ldr	r0, [pc, #36]	; (8000dfc <Camera_Setup+0x84>)
 8000dd6:	f00a fa13 	bl	800b200 <iprintf>
	for (int i = 0; i < sizeof(rec)/sizeof(rec[0]); i++) {
 8000dda:	68fb      	ldr	r3, [r7, #12]
 8000ddc:	3301      	adds	r3, #1
 8000dde:	60fb      	str	r3, [r7, #12]
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	2b03      	cmp	r3, #3
 8000de4:	d9e2      	bls.n	8000dac <Camera_Setup+0x34>
		}
	}
}
 8000de6:	bf00      	nop
 8000de8:	3710      	adds	r7, #16
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}
 8000dee:	bf00      	nop
 8000df0:	24000000 	.word	0x24000000
 8000df4:	0800c02c 	.word	0x0800c02c
 8000df8:	24000004 	.word	0x24000004
 8000dfc:	0800c030 	.word	0x0800c030

08000e00 <Camera_Snapshot>:

//orders camera to take snapshot
void Camera_Snapshot(uint8_t* rec) {
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b082      	sub	sp, #8
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
	while(!send_UART(CAM_CAPTURE,rec)) {}
 8000e08:	bf00      	nop
 8000e0a:	6879      	ldr	r1, [r7, #4]
 8000e0c:	4806      	ldr	r0, [pc, #24]	; (8000e28 <Camera_Snapshot+0x28>)
 8000e0e:	f000 f88d 	bl	8000f2c <send_UART>
 8000e12:	4603      	mov	r3, r0
 8000e14:	f083 0301 	eor.w	r3, r3, #1
 8000e18:	b2db      	uxtb	r3, r3
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d1f5      	bne.n	8000e0a <Camera_Snapshot+0xa>
}
 8000e1e:	bf00      	nop
 8000e20:	3708      	adds	r7, #8
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bd80      	pop	{r7, pc}
 8000e26:	bf00      	nop
 8000e28:	24000020 	.word	0x24000020

08000e2c <Camera_Get_IMG_Length>:

//returns 2-value array of characters, first is high part of 16-bit length, second is low part
void Camera_Get_IMG_Length(uint8_t* rec) {
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b082      	sub	sp, #8
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
	while(!send_UART(CAM_IMG_LENGTH, rec)) {}
 8000e34:	bf00      	nop
 8000e36:	6879      	ldr	r1, [r7, #4]
 8000e38:	4806      	ldr	r0, [pc, #24]	; (8000e54 <Camera_Get_IMG_Length+0x28>)
 8000e3a:	f000 f877 	bl	8000f2c <send_UART>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	f083 0301 	eor.w	r3, r3, #1
 8000e44:	b2db      	uxtb	r3, r3
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d1f5      	bne.n	8000e36 <Camera_Get_IMG_Length+0xa>
}
 8000e4a:	bf00      	nop
 8000e4c:	3708      	adds	r7, #8
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	bf00      	nop
 8000e54:	24000028 	.word	0x24000028

08000e58 <Camera_Get_IMG>:

//records the image into a statically allocated array of the given
void Camera_Get_IMG(uint8_t* rec, uint8_t lengthH, uint8_t lengthL, uint8_t memH, uint8_t memL) {
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b082      	sub	sp, #8
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
 8000e60:	4608      	mov	r0, r1
 8000e62:	4611      	mov	r1, r2
 8000e64:	461a      	mov	r2, r3
 8000e66:	4603      	mov	r3, r0
 8000e68:	70fb      	strb	r3, [r7, #3]
 8000e6a:	460b      	mov	r3, r1
 8000e6c:	70bb      	strb	r3, [r7, #2]
 8000e6e:	4613      	mov	r3, r2
 8000e70:	707b      	strb	r3, [r7, #1]

	CAM_READ_IMG[12] = lengthH;
 8000e72:	4a0d      	ldr	r2, [pc, #52]	; (8000ea8 <Camera_Get_IMG+0x50>)
 8000e74:	78fb      	ldrb	r3, [r7, #3]
 8000e76:	7313      	strb	r3, [r2, #12]
	CAM_READ_IMG[13] = lengthL;
 8000e78:	4a0b      	ldr	r2, [pc, #44]	; (8000ea8 <Camera_Get_IMG+0x50>)
 8000e7a:	78bb      	ldrb	r3, [r7, #2]
 8000e7c:	7353      	strb	r3, [r2, #13]

	CAM_READ_IMG[8] = memH;
 8000e7e:	4a0a      	ldr	r2, [pc, #40]	; (8000ea8 <Camera_Get_IMG+0x50>)
 8000e80:	787b      	ldrb	r3, [r7, #1]
 8000e82:	7213      	strb	r3, [r2, #8]
	CAM_READ_IMG[9] = memL;
 8000e84:	4a08      	ldr	r2, [pc, #32]	; (8000ea8 <Camera_Get_IMG+0x50>)
 8000e86:	7c3b      	ldrb	r3, [r7, #16]
 8000e88:	7253      	strb	r3, [r2, #9]

	while(!send_UART(CAM_READ_IMG, rec)) {}
 8000e8a:	bf00      	nop
 8000e8c:	6879      	ldr	r1, [r7, #4]
 8000e8e:	4806      	ldr	r0, [pc, #24]	; (8000ea8 <Camera_Get_IMG+0x50>)
 8000e90:	f000 f84c 	bl	8000f2c <send_UART>
 8000e94:	4603      	mov	r3, r0
 8000e96:	f083 0301 	eor.w	r3, r3, #1
 8000e9a:	b2db      	uxtb	r3, r3
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d1f5      	bne.n	8000e8c <Camera_Get_IMG+0x34>

}
 8000ea0:	bf00      	nop
 8000ea2:	3708      	adds	r7, #8
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bd80      	pop	{r7, pc}
 8000ea8:	24000030 	.word	0x24000030

08000eac <Camera_Set_Res>:

//sets the resolution of the image, full resolution likely not needed for crude processing
//0x00 is default for 640x480, to get 320x240 must manually send command, replace 0x00 with 0x11
void Camera_Set_Res(uint8_t* rec, uint8_t res) {
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b082      	sub	sp, #8
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
 8000eb4:	460b      	mov	r3, r1
 8000eb6:	70fb      	strb	r3, [r7, #3]

	// for 640x480
	if (res == 6)
 8000eb8:	78fb      	ldrb	r3, [r7, #3]
 8000eba:	2b06      	cmp	r3, #6
 8000ebc:	d10b      	bne.n	8000ed6 <Camera_Set_Res+0x2a>
		while(!send_UART(CAM_RES_640_480, rec)) {}
 8000ebe:	bf00      	nop
 8000ec0:	6879      	ldr	r1, [r7, #4]
 8000ec2:	480e      	ldr	r0, [pc, #56]	; (8000efc <Camera_Set_Res+0x50>)
 8000ec4:	f000 f832 	bl	8000f2c <send_UART>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	f083 0301 	eor.w	r3, r3, #1
 8000ece:	b2db      	uxtb	r3, r3
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d1f5      	bne.n	8000ec0 <Camera_Set_Res+0x14>

	// for 320x240
	else if (res == 3)
		while(!send_UART(CAM_RES_320_240, rec)) {}

}
 8000ed4:	e00d      	b.n	8000ef2 <Camera_Set_Res+0x46>
	else if (res == 3)
 8000ed6:	78fb      	ldrb	r3, [r7, #3]
 8000ed8:	2b03      	cmp	r3, #3
 8000eda:	d10a      	bne.n	8000ef2 <Camera_Set_Res+0x46>
		while(!send_UART(CAM_RES_320_240, rec)) {}
 8000edc:	bf00      	nop
 8000ede:	6879      	ldr	r1, [r7, #4]
 8000ee0:	4807      	ldr	r0, [pc, #28]	; (8000f00 <Camera_Set_Res+0x54>)
 8000ee2:	f000 f823 	bl	8000f2c <send_UART>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	f083 0301 	eor.w	r3, r3, #1
 8000eec:	b2db      	uxtb	r3, r3
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d1f5      	bne.n	8000ede <Camera_Set_Res+0x32>
}
 8000ef2:	bf00      	nop
 8000ef4:	3708      	adds	r7, #8
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	bf00      	nop
 8000efc:	24000008 	.word	0x24000008
 8000f00:	24000014 	.word	0x24000014

08000f04 <get_TOF_Data>:

// dummy functions to be used as interfaces to other blocks
void get_TOF_Data(uint8_t* buf) {
 8000f04:	b480      	push	{r7}
 8000f06:	b083      	sub	sp, #12
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]

}
 8000f0c:	bf00      	nop
 8000f0e:	370c      	adds	r7, #12
 8000f10:	46bd      	mov	sp, r7
 8000f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f16:	4770      	bx	lr

08000f18 <get_Compass_Data>:

void get_Compass_Data(uint8_t* buf) {
 8000f18:	b480      	push	{r7}
 8000f1a:	b083      	sub	sp, #12
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]

}
 8000f20:	bf00      	nop
 8000f22:	370c      	adds	r7, #12
 8000f24:	46bd      	mov	sp, r7
 8000f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2a:	4770      	bx	lr

08000f2c <send_UART>:

// abstracted function for general USART exchange, note that the size of rec should be known beforehand
bool send_UART(uint8_t* comm, uint8_t* rec)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b084      	sub	sp, #16
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
 8000f34:	6039      	str	r1, [r7, #0]
	int i = 0;
 8000f36:	2300      	movs	r3, #0
 8000f38:	60fb      	str	r3, [r7, #12]
	while(HAL_UART_Transmit(&huart4, comm, sizeof(comm)/sizeof(comm[0]), HAL_MAX_DELAY) != HAL_OK)
 8000f3a:	e007      	b.n	8000f4c <send_UART+0x20>
	{
		if (i > 10)
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	2b0a      	cmp	r3, #10
 8000f40:	dd01      	ble.n	8000f46 <send_UART+0x1a>
			return false;
 8000f42:	2300      	movs	r3, #0
 8000f44:	e022      	b.n	8000f8c <send_UART+0x60>
		i++;
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	3301      	adds	r3, #1
 8000f4a:	60fb      	str	r3, [r7, #12]
	while(HAL_UART_Transmit(&huart4, comm, sizeof(comm)/sizeof(comm[0]), HAL_MAX_DELAY) != HAL_OK)
 8000f4c:	f04f 33ff 	mov.w	r3, #4294967295
 8000f50:	2204      	movs	r2, #4
 8000f52:	6879      	ldr	r1, [r7, #4]
 8000f54:	480f      	ldr	r0, [pc, #60]	; (8000f94 <send_UART+0x68>)
 8000f56:	f006 fb2b 	bl	80075b0 <HAL_UART_Transmit>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d1ed      	bne.n	8000f3c <send_UART+0x10>

	}

	i = 0;
 8000f60:	2300      	movs	r3, #0
 8000f62:	60fb      	str	r3, [r7, #12]
	while(HAL_UART_Receive(&huart4, rec, sizeof(rec)/sizeof(rec[0]), HAL_MAX_DELAY) != HAL_OK)
 8000f64:	e007      	b.n	8000f76 <send_UART+0x4a>
	{
		if (i > 10)
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	2b0a      	cmp	r3, #10
 8000f6a:	dd01      	ble.n	8000f70 <send_UART+0x44>
			return false;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	e00d      	b.n	8000f8c <send_UART+0x60>
		i++;
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	3301      	adds	r3, #1
 8000f74:	60fb      	str	r3, [r7, #12]
	while(HAL_UART_Receive(&huart4, rec, sizeof(rec)/sizeof(rec[0]), HAL_MAX_DELAY) != HAL_OK)
 8000f76:	f04f 33ff 	mov.w	r3, #4294967295
 8000f7a:	2204      	movs	r2, #4
 8000f7c:	6839      	ldr	r1, [r7, #0]
 8000f7e:	4805      	ldr	r0, [pc, #20]	; (8000f94 <send_UART+0x68>)
 8000f80:	f006 fbac 	bl	80076dc <HAL_UART_Receive>
 8000f84:	4603      	mov	r3, r0
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d1ed      	bne.n	8000f66 <send_UART+0x3a>
	}

	return true;
 8000f8a:	2301      	movs	r3, #1
}
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	3710      	adds	r7, #16
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bd80      	pop	{r7, pc}
 8000f94:	24000258 	.word	0x24000258

08000f98 <_write>:
 * 		- enable SWV ITM Data Console in Windows
 * 		- enable whichever ports necessary, can leave memory as default, check console settings here
 * 		- ensure that debug settings are enabled as such that SWV is enabled, probe is GDB server, and
 * 			clock matches the SYSCLK, not HCLK
 */
int _write(int file, char* out, int len) {
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b086      	sub	sp, #24
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	60f8      	str	r0, [r7, #12]
 8000fa0:	60b9      	str	r1, [r7, #8]
 8000fa2:	607a      	str	r2, [r7, #4]
	for (int i = 0; i < len; i++) {
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	617b      	str	r3, [r7, #20]
 8000fa8:	e009      	b.n	8000fbe <_write+0x26>
		ITM_SendChar(out[i]);
 8000faa:	697b      	ldr	r3, [r7, #20]
 8000fac:	68ba      	ldr	r2, [r7, #8]
 8000fae:	4413      	add	r3, r2
 8000fb0:	781b      	ldrb	r3, [r3, #0]
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	f7ff fb64 	bl	8000680 <ITM_SendChar>
	for (int i = 0; i < len; i++) {
 8000fb8:	697b      	ldr	r3, [r7, #20]
 8000fba:	3301      	adds	r3, #1
 8000fbc:	617b      	str	r3, [r7, #20]
 8000fbe:	697a      	ldr	r2, [r7, #20]
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	429a      	cmp	r2, r3
 8000fc4:	dbf1      	blt.n	8000faa <_write+0x12>
	}
	return len;
 8000fc6:	687b      	ldr	r3, [r7, #4]
}
 8000fc8:	4618      	mov	r0, r3
 8000fca:	3718      	adds	r7, #24
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd80      	pop	{r7, pc}

08000fd0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000fd4:	bf00      	nop
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fdc:	4770      	bx	lr
	...

08000fe0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	b083      	sub	sp, #12
 8000fe4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fe6:	4b0a      	ldr	r3, [pc, #40]	; (8001010 <HAL_MspInit+0x30>)
 8000fe8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000fec:	4a08      	ldr	r2, [pc, #32]	; (8001010 <HAL_MspInit+0x30>)
 8000fee:	f043 0302 	orr.w	r3, r3, #2
 8000ff2:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000ff6:	4b06      	ldr	r3, [pc, #24]	; (8001010 <HAL_MspInit+0x30>)
 8000ff8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000ffc:	f003 0302 	and.w	r3, r3, #2
 8001000:	607b      	str	r3, [r7, #4]
 8001002:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001004:	bf00      	nop
 8001006:	370c      	adds	r7, #12
 8001008:	46bd      	mov	sp, r7
 800100a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100e:	4770      	bx	lr
 8001010:	58024400 	.word	0x58024400

08001014 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b08c      	sub	sp, #48	; 0x30
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800101c:	f107 031c 	add.w	r3, r7, #28
 8001020:	2200      	movs	r2, #0
 8001022:	601a      	str	r2, [r3, #0]
 8001024:	605a      	str	r2, [r3, #4]
 8001026:	609a      	str	r2, [r3, #8]
 8001028:	60da      	str	r2, [r3, #12]
 800102a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	4a34      	ldr	r2, [pc, #208]	; (8001104 <HAL_I2C_MspInit+0xf0>)
 8001032:	4293      	cmp	r3, r2
 8001034:	d12e      	bne.n	8001094 <HAL_I2C_MspInit+0x80>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001036:	4b34      	ldr	r3, [pc, #208]	; (8001108 <HAL_I2C_MspInit+0xf4>)
 8001038:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800103c:	4a32      	ldr	r2, [pc, #200]	; (8001108 <HAL_I2C_MspInit+0xf4>)
 800103e:	f043 0302 	orr.w	r3, r3, #2
 8001042:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001046:	4b30      	ldr	r3, [pc, #192]	; (8001108 <HAL_I2C_MspInit+0xf4>)
 8001048:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800104c:	f003 0302 	and.w	r3, r3, #2
 8001050:	61bb      	str	r3, [r7, #24]
 8001052:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001054:	23c0      	movs	r3, #192	; 0xc0
 8001056:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001058:	2312      	movs	r3, #18
 800105a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800105c:	2300      	movs	r3, #0
 800105e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001060:	2300      	movs	r3, #0
 8001062:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001064:	2304      	movs	r3, #4
 8001066:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001068:	f107 031c 	add.w	r3, r7, #28
 800106c:	4619      	mov	r1, r3
 800106e:	4827      	ldr	r0, [pc, #156]	; (800110c <HAL_I2C_MspInit+0xf8>)
 8001070:	f000 fc24 	bl	80018bc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001074:	4b24      	ldr	r3, [pc, #144]	; (8001108 <HAL_I2C_MspInit+0xf4>)
 8001076:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800107a:	4a23      	ldr	r2, [pc, #140]	; (8001108 <HAL_I2C_MspInit+0xf4>)
 800107c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001080:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001084:	4b20      	ldr	r3, [pc, #128]	; (8001108 <HAL_I2C_MspInit+0xf4>)
 8001086:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800108a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800108e:	617b      	str	r3, [r7, #20]
 8001090:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001092:	e032      	b.n	80010fa <HAL_I2C_MspInit+0xe6>
  else if(hi2c->Instance==I2C2)
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	4a1d      	ldr	r2, [pc, #116]	; (8001110 <HAL_I2C_MspInit+0xfc>)
 800109a:	4293      	cmp	r3, r2
 800109c:	d12d      	bne.n	80010fa <HAL_I2C_MspInit+0xe6>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800109e:	4b1a      	ldr	r3, [pc, #104]	; (8001108 <HAL_I2C_MspInit+0xf4>)
 80010a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010a4:	4a18      	ldr	r2, [pc, #96]	; (8001108 <HAL_I2C_MspInit+0xf4>)
 80010a6:	f043 0320 	orr.w	r3, r3, #32
 80010aa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80010ae:	4b16      	ldr	r3, [pc, #88]	; (8001108 <HAL_I2C_MspInit+0xf4>)
 80010b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010b4:	f003 0320 	and.w	r3, r3, #32
 80010b8:	613b      	str	r3, [r7, #16]
 80010ba:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80010bc:	2303      	movs	r3, #3
 80010be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010c0:	2312      	movs	r3, #18
 80010c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c4:	2300      	movs	r3, #0
 80010c6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010c8:	2300      	movs	r3, #0
 80010ca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80010cc:	2304      	movs	r3, #4
 80010ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80010d0:	f107 031c 	add.w	r3, r7, #28
 80010d4:	4619      	mov	r1, r3
 80010d6:	480f      	ldr	r0, [pc, #60]	; (8001114 <HAL_I2C_MspInit+0x100>)
 80010d8:	f000 fbf0 	bl	80018bc <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80010dc:	4b0a      	ldr	r3, [pc, #40]	; (8001108 <HAL_I2C_MspInit+0xf4>)
 80010de:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80010e2:	4a09      	ldr	r2, [pc, #36]	; (8001108 <HAL_I2C_MspInit+0xf4>)
 80010e4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80010e8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80010ec:	4b06      	ldr	r3, [pc, #24]	; (8001108 <HAL_I2C_MspInit+0xf4>)
 80010ee:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80010f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80010f6:	60fb      	str	r3, [r7, #12]
 80010f8:	68fb      	ldr	r3, [r7, #12]
}
 80010fa:	bf00      	nop
 80010fc:	3730      	adds	r7, #48	; 0x30
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	40005400 	.word	0x40005400
 8001108:	58024400 	.word	0x58024400
 800110c:	58020400 	.word	0x58020400
 8001110:	40005800 	.word	0x40005800
 8001114:	58021400 	.word	0x58021400

08001118 <HAL_JPEG_MspInit>:
* This function configures the hardware resources used in this example
* @param hjpeg: JPEG handle pointer
* @retval None
*/
void HAL_JPEG_MspInit(JPEG_HandleTypeDef* hjpeg)
{
 8001118:	b480      	push	{r7}
 800111a:	b085      	sub	sp, #20
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
  if(hjpeg->Instance==JPEG)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	4a0b      	ldr	r2, [pc, #44]	; (8001154 <HAL_JPEG_MspInit+0x3c>)
 8001126:	4293      	cmp	r3, r2
 8001128:	d10e      	bne.n	8001148 <HAL_JPEG_MspInit+0x30>
  {
  /* USER CODE BEGIN JPEG_MspInit 0 */

  /* USER CODE END JPEG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_JPEG_CLK_ENABLE();
 800112a:	4b0b      	ldr	r3, [pc, #44]	; (8001158 <HAL_JPEG_MspInit+0x40>)
 800112c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001130:	4a09      	ldr	r2, [pc, #36]	; (8001158 <HAL_JPEG_MspInit+0x40>)
 8001132:	f043 0320 	orr.w	r3, r3, #32
 8001136:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 800113a:	4b07      	ldr	r3, [pc, #28]	; (8001158 <HAL_JPEG_MspInit+0x40>)
 800113c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001140:	f003 0320 	and.w	r3, r3, #32
 8001144:	60fb      	str	r3, [r7, #12]
 8001146:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN JPEG_MspInit 1 */

  /* USER CODE END JPEG_MspInit 1 */
  }

}
 8001148:	bf00      	nop
 800114a:	3714      	adds	r7, #20
 800114c:	46bd      	mov	sp, r7
 800114e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001152:	4770      	bx	lr
 8001154:	52003000 	.word	0x52003000
 8001158:	58024400 	.word	0x58024400

0800115c <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b08a      	sub	sp, #40	; 0x28
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001164:	f107 0314 	add.w	r3, r7, #20
 8001168:	2200      	movs	r2, #0
 800116a:	601a      	str	r2, [r3, #0]
 800116c:	605a      	str	r2, [r3, #4]
 800116e:	609a      	str	r2, [r3, #8]
 8001170:	60da      	str	r2, [r3, #12]
 8001172:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	4a2a      	ldr	r2, [pc, #168]	; (8001224 <HAL_SD_MspInit+0xc8>)
 800117a:	4293      	cmp	r3, r2
 800117c:	d14d      	bne.n	800121a <HAL_SD_MspInit+0xbe>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 800117e:	4b2a      	ldr	r3, [pc, #168]	; (8001228 <HAL_SD_MspInit+0xcc>)
 8001180:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001184:	4a28      	ldr	r2, [pc, #160]	; (8001228 <HAL_SD_MspInit+0xcc>)
 8001186:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800118a:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 800118e:	4b26      	ldr	r3, [pc, #152]	; (8001228 <HAL_SD_MspInit+0xcc>)
 8001190:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001194:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001198:	613b      	str	r3, [r7, #16]
 800119a:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800119c:	4b22      	ldr	r3, [pc, #136]	; (8001228 <HAL_SD_MspInit+0xcc>)
 800119e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011a2:	4a21      	ldr	r2, [pc, #132]	; (8001228 <HAL_SD_MspInit+0xcc>)
 80011a4:	f043 0304 	orr.w	r3, r3, #4
 80011a8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80011ac:	4b1e      	ldr	r3, [pc, #120]	; (8001228 <HAL_SD_MspInit+0xcc>)
 80011ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011b2:	f003 0304 	and.w	r3, r3, #4
 80011b6:	60fb      	str	r3, [r7, #12]
 80011b8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80011ba:	4b1b      	ldr	r3, [pc, #108]	; (8001228 <HAL_SD_MspInit+0xcc>)
 80011bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011c0:	4a19      	ldr	r2, [pc, #100]	; (8001228 <HAL_SD_MspInit+0xcc>)
 80011c2:	f043 0308 	orr.w	r3, r3, #8
 80011c6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80011ca:	4b17      	ldr	r3, [pc, #92]	; (8001228 <HAL_SD_MspInit+0xcc>)
 80011cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011d0:	f003 0308 	and.w	r3, r3, #8
 80011d4:	60bb      	str	r3, [r7, #8]
 80011d6:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 80011d8:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80011dc:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011de:	2302      	movs	r3, #2
 80011e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e2:	2300      	movs	r3, #0
 80011e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011e6:	2303      	movs	r3, #3
 80011e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 80011ea:	230c      	movs	r3, #12
 80011ec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011ee:	f107 0314 	add.w	r3, r7, #20
 80011f2:	4619      	mov	r1, r3
 80011f4:	480d      	ldr	r0, [pc, #52]	; (800122c <HAL_SD_MspInit+0xd0>)
 80011f6:	f000 fb61 	bl	80018bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80011fa:	2304      	movs	r3, #4
 80011fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011fe:	2302      	movs	r3, #2
 8001200:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001202:	2300      	movs	r3, #0
 8001204:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001206:	2303      	movs	r3, #3
 8001208:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 800120a:	230c      	movs	r3, #12
 800120c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800120e:	f107 0314 	add.w	r3, r7, #20
 8001212:	4619      	mov	r1, r3
 8001214:	4806      	ldr	r0, [pc, #24]	; (8001230 <HAL_SD_MspInit+0xd4>)
 8001216:	f000 fb51 	bl	80018bc <HAL_GPIO_Init>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 800121a:	bf00      	nop
 800121c:	3728      	adds	r7, #40	; 0x28
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	52007000 	.word	0x52007000
 8001228:	58024400 	.word	0x58024400
 800122c:	58020800 	.word	0x58020800
 8001230:	58020c00 	.word	0x58020c00

08001234 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b08a      	sub	sp, #40	; 0x28
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800123c:	f107 0314 	add.w	r3, r7, #20
 8001240:	2200      	movs	r2, #0
 8001242:	601a      	str	r2, [r3, #0]
 8001244:	605a      	str	r2, [r3, #4]
 8001246:	609a      	str	r2, [r3, #8]
 8001248:	60da      	str	r2, [r3, #12]
 800124a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	4a2a      	ldr	r2, [pc, #168]	; (80012fc <HAL_UART_MspInit+0xc8>)
 8001252:	4293      	cmp	r3, r2
 8001254:	d14d      	bne.n	80012f2 <HAL_UART_MspInit+0xbe>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001256:	4b2a      	ldr	r3, [pc, #168]	; (8001300 <HAL_UART_MspInit+0xcc>)
 8001258:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800125c:	4a28      	ldr	r2, [pc, #160]	; (8001300 <HAL_UART_MspInit+0xcc>)
 800125e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001262:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001266:	4b26      	ldr	r3, [pc, #152]	; (8001300 <HAL_UART_MspInit+0xcc>)
 8001268:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800126c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001270:	613b      	str	r3, [r7, #16]
 8001272:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8001274:	4b22      	ldr	r3, [pc, #136]	; (8001300 <HAL_UART_MspInit+0xcc>)
 8001276:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800127a:	4a21      	ldr	r2, [pc, #132]	; (8001300 <HAL_UART_MspInit+0xcc>)
 800127c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001280:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001284:	4b1e      	ldr	r3, [pc, #120]	; (8001300 <HAL_UART_MspInit+0xcc>)
 8001286:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800128a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800128e:	60fb      	str	r3, [r7, #12]
 8001290:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001292:	4b1b      	ldr	r3, [pc, #108]	; (8001300 <HAL_UART_MspInit+0xcc>)
 8001294:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001298:	4a19      	ldr	r2, [pc, #100]	; (8001300 <HAL_UART_MspInit+0xcc>)
 800129a:	f043 0301 	orr.w	r3, r3, #1
 800129e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80012a2:	4b17      	ldr	r3, [pc, #92]	; (8001300 <HAL_UART_MspInit+0xcc>)
 80012a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012a8:	f003 0301 	and.w	r3, r3, #1
 80012ac:	60bb      	str	r3, [r7, #8]
 80012ae:	68bb      	ldr	r3, [r7, #8]
    /**UART4 GPIO Configuration    
    PI9     ------> UART4_RX
    PA0     ------> UART4_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80012b0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80012b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012b6:	2302      	movs	r3, #2
 80012b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ba:	2300      	movs	r3, #0
 80012bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012be:	2300      	movs	r3, #0
 80012c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80012c2:	2308      	movs	r3, #8
 80012c4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80012c6:	f107 0314 	add.w	r3, r7, #20
 80012ca:	4619      	mov	r1, r3
 80012cc:	480d      	ldr	r0, [pc, #52]	; (8001304 <HAL_UART_MspInit+0xd0>)
 80012ce:	f000 faf5 	bl	80018bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80012d2:	2301      	movs	r3, #1
 80012d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012d6:	2302      	movs	r3, #2
 80012d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012da:	2300      	movs	r3, #0
 80012dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012de:	2300      	movs	r3, #0
 80012e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80012e2:	2308      	movs	r3, #8
 80012e4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012e6:	f107 0314 	add.w	r3, r7, #20
 80012ea:	4619      	mov	r1, r3
 80012ec:	4806      	ldr	r0, [pc, #24]	; (8001308 <HAL_UART_MspInit+0xd4>)
 80012ee:	f000 fae5 	bl	80018bc <HAL_GPIO_Init>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 80012f2:	bf00      	nop
 80012f4:	3728      	adds	r7, #40	; 0x28
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop
 80012fc:	40004c00 	.word	0x40004c00
 8001300:	58024400 	.word	0x58024400
 8001304:	58022000 	.word	0x58022000
 8001308:	58020000 	.word	0x58020000

0800130c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800130c:	b480      	push	{r7}
 800130e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001310:	bf00      	nop
 8001312:	46bd      	mov	sp, r7
 8001314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001318:	4770      	bx	lr

0800131a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800131a:	b480      	push	{r7}
 800131c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800131e:	e7fe      	b.n	800131e <HardFault_Handler+0x4>

08001320 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001320:	b480      	push	{r7}
 8001322:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001324:	e7fe      	b.n	8001324 <MemManage_Handler+0x4>

08001326 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001326:	b480      	push	{r7}
 8001328:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800132a:	e7fe      	b.n	800132a <BusFault_Handler+0x4>

0800132c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800132c:	b480      	push	{r7}
 800132e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001330:	e7fe      	b.n	8001330 <UsageFault_Handler+0x4>

08001332 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001332:	b480      	push	{r7}
 8001334:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001336:	bf00      	nop
 8001338:	46bd      	mov	sp, r7
 800133a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133e:	4770      	bx	lr

08001340 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001340:	b480      	push	{r7}
 8001342:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001344:	bf00      	nop
 8001346:	46bd      	mov	sp, r7
 8001348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134c:	4770      	bx	lr

0800134e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800134e:	b480      	push	{r7}
 8001350:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001352:	bf00      	nop
 8001354:	46bd      	mov	sp, r7
 8001356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135a:	4770      	bx	lr

0800135c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001360:	f000 f97a 	bl	8001658 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001364:	bf00      	nop
 8001366:	bd80      	pop	{r7, pc}

08001368 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b086      	sub	sp, #24
 800136c:	af00      	add	r7, sp, #0
 800136e:	60f8      	str	r0, [r7, #12]
 8001370:	60b9      	str	r1, [r7, #8]
 8001372:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001374:	2300      	movs	r3, #0
 8001376:	617b      	str	r3, [r7, #20]
 8001378:	e00a      	b.n	8001390 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800137a:	f3af 8000 	nop.w
 800137e:	4601      	mov	r1, r0
 8001380:	68bb      	ldr	r3, [r7, #8]
 8001382:	1c5a      	adds	r2, r3, #1
 8001384:	60ba      	str	r2, [r7, #8]
 8001386:	b2ca      	uxtb	r2, r1
 8001388:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800138a:	697b      	ldr	r3, [r7, #20]
 800138c:	3301      	adds	r3, #1
 800138e:	617b      	str	r3, [r7, #20]
 8001390:	697a      	ldr	r2, [r7, #20]
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	429a      	cmp	r2, r3
 8001396:	dbf0      	blt.n	800137a <_read+0x12>
	}

return len;
 8001398:	687b      	ldr	r3, [r7, #4]
}
 800139a:	4618      	mov	r0, r3
 800139c:	3718      	adds	r7, #24
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}

080013a2 <_close>:
	}
	return len;
}

int _close(int file)
{
 80013a2:	b480      	push	{r7}
 80013a4:	b083      	sub	sp, #12
 80013a6:	af00      	add	r7, sp, #0
 80013a8:	6078      	str	r0, [r7, #4]
	return -1;
 80013aa:	f04f 33ff 	mov.w	r3, #4294967295
}
 80013ae:	4618      	mov	r0, r3
 80013b0:	370c      	adds	r7, #12
 80013b2:	46bd      	mov	sp, r7
 80013b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b8:	4770      	bx	lr

080013ba <_fstat>:


int _fstat(int file, struct stat *st)
{
 80013ba:	b480      	push	{r7}
 80013bc:	b083      	sub	sp, #12
 80013be:	af00      	add	r7, sp, #0
 80013c0:	6078      	str	r0, [r7, #4]
 80013c2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80013ca:	605a      	str	r2, [r3, #4]
	return 0;
 80013cc:	2300      	movs	r3, #0
}
 80013ce:	4618      	mov	r0, r3
 80013d0:	370c      	adds	r7, #12
 80013d2:	46bd      	mov	sp, r7
 80013d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d8:	4770      	bx	lr

080013da <_isatty>:

int _isatty(int file)
{
 80013da:	b480      	push	{r7}
 80013dc:	b083      	sub	sp, #12
 80013de:	af00      	add	r7, sp, #0
 80013e0:	6078      	str	r0, [r7, #4]
	return 1;
 80013e2:	2301      	movs	r3, #1
}
 80013e4:	4618      	mov	r0, r3
 80013e6:	370c      	adds	r7, #12
 80013e8:	46bd      	mov	sp, r7
 80013ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ee:	4770      	bx	lr

080013f0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80013f0:	b480      	push	{r7}
 80013f2:	b085      	sub	sp, #20
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	60f8      	str	r0, [r7, #12]
 80013f8:	60b9      	str	r1, [r7, #8]
 80013fa:	607a      	str	r2, [r7, #4]
	return 0;
 80013fc:	2300      	movs	r3, #0
}
 80013fe:	4618      	mov	r0, r3
 8001400:	3714      	adds	r7, #20
 8001402:	46bd      	mov	sp, r7
 8001404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001408:	4770      	bx	lr
	...

0800140c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b084      	sub	sp, #16
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001414:	4b11      	ldr	r3, [pc, #68]	; (800145c <_sbrk+0x50>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	2b00      	cmp	r3, #0
 800141a:	d102      	bne.n	8001422 <_sbrk+0x16>
		heap_end = &end;
 800141c:	4b0f      	ldr	r3, [pc, #60]	; (800145c <_sbrk+0x50>)
 800141e:	4a10      	ldr	r2, [pc, #64]	; (8001460 <_sbrk+0x54>)
 8001420:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001422:	4b0e      	ldr	r3, [pc, #56]	; (800145c <_sbrk+0x50>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001428:	4b0c      	ldr	r3, [pc, #48]	; (800145c <_sbrk+0x50>)
 800142a:	681a      	ldr	r2, [r3, #0]
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	4413      	add	r3, r2
 8001430:	466a      	mov	r2, sp
 8001432:	4293      	cmp	r3, r2
 8001434:	d907      	bls.n	8001446 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001436:	f009 fe01 	bl	800b03c <__errno>
 800143a:	4602      	mov	r2, r0
 800143c:	230c      	movs	r3, #12
 800143e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001440:	f04f 33ff 	mov.w	r3, #4294967295
 8001444:	e006      	b.n	8001454 <_sbrk+0x48>
	}

	heap_end += incr;
 8001446:	4b05      	ldr	r3, [pc, #20]	; (800145c <_sbrk+0x50>)
 8001448:	681a      	ldr	r2, [r3, #0]
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	4413      	add	r3, r2
 800144e:	4a03      	ldr	r2, [pc, #12]	; (800145c <_sbrk+0x50>)
 8001450:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001452:	68fb      	ldr	r3, [r7, #12]
}
 8001454:	4618      	mov	r0, r3
 8001456:	3710      	adds	r7, #16
 8001458:	46bd      	mov	sp, r7
 800145a:	bd80      	pop	{r7, pc}
 800145c:	240000d0 	.word	0x240000d0
 8001460:	240007c0 	.word	0x240007c0

08001464 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001464:	b480      	push	{r7}
 8001466:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001468:	4b29      	ldr	r3, [pc, #164]	; (8001510 <SystemInit+0xac>)
 800146a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800146e:	4a28      	ldr	r2, [pc, #160]	; (8001510 <SystemInit+0xac>)
 8001470:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001474:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001478:	4b26      	ldr	r3, [pc, #152]	; (8001514 <SystemInit+0xb0>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	4a25      	ldr	r2, [pc, #148]	; (8001514 <SystemInit+0xb0>)
 800147e:	f043 0301 	orr.w	r3, r3, #1
 8001482:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001484:	4b23      	ldr	r3, [pc, #140]	; (8001514 <SystemInit+0xb0>)
 8001486:	2200      	movs	r2, #0
 8001488:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800148a:	4b22      	ldr	r3, [pc, #136]	; (8001514 <SystemInit+0xb0>)
 800148c:	681a      	ldr	r2, [r3, #0]
 800148e:	4921      	ldr	r1, [pc, #132]	; (8001514 <SystemInit+0xb0>)
 8001490:	4b21      	ldr	r3, [pc, #132]	; (8001518 <SystemInit+0xb4>)
 8001492:	4013      	ands	r3, r2
 8001494:	600b      	str	r3, [r1, #0]

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001496:	4b1f      	ldr	r3, [pc, #124]	; (8001514 <SystemInit+0xb0>)
 8001498:	2200      	movs	r2, #0
 800149a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800149c:	4b1d      	ldr	r3, [pc, #116]	; (8001514 <SystemInit+0xb0>)
 800149e:	2200      	movs	r2, #0
 80014a0:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80014a2:	4b1c      	ldr	r3, [pc, #112]	; (8001514 <SystemInit+0xb0>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
 80014a8:	4b1a      	ldr	r3, [pc, #104]	; (8001514 <SystemInit+0xb0>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
 80014ae:	4b19      	ldr	r3, [pc, #100]	; (8001514 <SystemInit+0xb0>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
 80014b4:	4b17      	ldr	r3, [pc, #92]	; (8001514 <SystemInit+0xb0>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80014ba:	4b16      	ldr	r3, [pc, #88]	; (8001514 <SystemInit+0xb0>)
 80014bc:	2200      	movs	r2, #0
 80014be:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
 80014c0:	4b14      	ldr	r3, [pc, #80]	; (8001514 <SystemInit+0xb0>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80014c6:	4b13      	ldr	r3, [pc, #76]	; (8001514 <SystemInit+0xb0>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
 80014cc:	4b11      	ldr	r3, [pc, #68]	; (8001514 <SystemInit+0xb0>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80014d2:	4b10      	ldr	r3, [pc, #64]	; (8001514 <SystemInit+0xb0>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80014d8:	4b0e      	ldr	r3, [pc, #56]	; (8001514 <SystemInit+0xb0>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	4a0d      	ldr	r2, [pc, #52]	; (8001514 <SystemInit+0xb0>)
 80014de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014e2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80014e4:	4b0b      	ldr	r3, [pc, #44]	; (8001514 <SystemInit+0xb0>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	661a      	str	r2, [r3, #96]	; 0x60
  SCB->VTOR = FLASH_BANK2_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
#endif /* VECT_TAB_SRAM */

#else
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80014ea:	4b0c      	ldr	r3, [pc, #48]	; (800151c <SystemInit+0xb8>)
 80014ec:	681a      	ldr	r2, [r3, #0]
 80014ee:	4b0c      	ldr	r3, [pc, #48]	; (8001520 <SystemInit+0xbc>)
 80014f0:	4013      	ands	r3, r2
 80014f2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80014f6:	d202      	bcs.n	80014fe <SystemInit+0x9a>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80014f8:	4b0a      	ldr	r3, [pc, #40]	; (8001524 <SystemInit+0xc0>)
 80014fa:	2201      	movs	r2, #1
 80014fc:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80014fe:	4b04      	ldr	r3, [pc, #16]	; (8001510 <SystemInit+0xac>)
 8001500:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001504:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8001506:	bf00      	nop
 8001508:	46bd      	mov	sp, r7
 800150a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150e:	4770      	bx	lr
 8001510:	e000ed00 	.word	0xe000ed00
 8001514:	58024400 	.word	0x58024400
 8001518:	eaf6ed7f 	.word	0xeaf6ed7f
 800151c:	5c001000 	.word	0x5c001000
 8001520:	ffff0000 	.word	0xffff0000
 8001524:	51008108 	.word	0x51008108

08001528 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001528:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001560 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800152c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800152e:	e003      	b.n	8001538 <LoopCopyDataInit>

08001530 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001530:	4b0c      	ldr	r3, [pc, #48]	; (8001564 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001532:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001534:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001536:	3104      	adds	r1, #4

08001538 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001538:	480b      	ldr	r0, [pc, #44]	; (8001568 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800153a:	4b0c      	ldr	r3, [pc, #48]	; (800156c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800153c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800153e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001540:	d3f6      	bcc.n	8001530 <CopyDataInit>
  ldr  r2, =_sbss
 8001542:	4a0b      	ldr	r2, [pc, #44]	; (8001570 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001544:	e002      	b.n	800154c <LoopFillZerobss>

08001546 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001546:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001548:	f842 3b04 	str.w	r3, [r2], #4

0800154c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800154c:	4b09      	ldr	r3, [pc, #36]	; (8001574 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800154e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001550:	d3f9      	bcc.n	8001546 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001552:	f7ff ff87 	bl	8001464 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001556:	f009 fd77 	bl	800b048 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800155a:	f7ff f8b9 	bl	80006d0 <main>
  bx  lr    
 800155e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001560:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 8001564:	0800c358 	.word	0x0800c358
  ldr  r0, =_sdata
 8001568:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 800156c:	240000b4 	.word	0x240000b4
  ldr  r2, =_sbss
 8001570:	240000b4 	.word	0x240000b4
  ldr  r3, = _ebss
 8001574:	240007bc 	.word	0x240007bc

08001578 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001578:	e7fe      	b.n	8001578 <ADC3_IRQHandler>
	...

0800157c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001580:	2003      	movs	r0, #3
 8001582:	f000 f969 	bl	8001858 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001586:	f002 fbb5 	bl	8003cf4 <HAL_RCC_GetSysClockFreq>
 800158a:	4601      	mov	r1, r0
 800158c:	4b13      	ldr	r3, [pc, #76]	; (80015dc <HAL_Init+0x60>)
 800158e:	699b      	ldr	r3, [r3, #24]
 8001590:	0a1b      	lsrs	r3, r3, #8
 8001592:	f003 030f 	and.w	r3, r3, #15
 8001596:	4a12      	ldr	r2, [pc, #72]	; (80015e0 <HAL_Init+0x64>)
 8001598:	5cd3      	ldrb	r3, [r2, r3]
 800159a:	f003 031f 	and.w	r3, r3, #31
 800159e:	fa21 f303 	lsr.w	r3, r1, r3
 80015a2:	4a10      	ldr	r2, [pc, #64]	; (80015e4 <HAL_Init+0x68>)
 80015a4:	6013      	str	r3, [r2, #0]

  /* Update the SystemD2Clock global variable */
  SystemD2Clock = (SystemCoreClock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80015a6:	4b0f      	ldr	r3, [pc, #60]	; (80015e4 <HAL_Init+0x68>)
 80015a8:	681a      	ldr	r2, [r3, #0]
 80015aa:	4b0c      	ldr	r3, [pc, #48]	; (80015dc <HAL_Init+0x60>)
 80015ac:	699b      	ldr	r3, [r3, #24]
 80015ae:	f003 030f 	and.w	r3, r3, #15
 80015b2:	490b      	ldr	r1, [pc, #44]	; (80015e0 <HAL_Init+0x64>)
 80015b4:	5ccb      	ldrb	r3, [r1, r3]
 80015b6:	f003 031f 	and.w	r3, r3, #31
 80015ba:	fa22 f303 	lsr.w	r3, r2, r3
 80015be:	4a0a      	ldr	r2, [pc, #40]	; (80015e8 <HAL_Init+0x6c>)
 80015c0:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80015c2:	2000      	movs	r0, #0
 80015c4:	f000 f812 	bl	80015ec <HAL_InitTick>
 80015c8:	4603      	mov	r3, r0
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d001      	beq.n	80015d2 <HAL_Init+0x56>
  {
    return HAL_ERROR;
 80015ce:	2301      	movs	r3, #1
 80015d0:	e002      	b.n	80015d8 <HAL_Init+0x5c>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80015d2:	f7ff fd05 	bl	8000fe0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015d6:	2300      	movs	r3, #0
}
 80015d8:	4618      	mov	r0, r3
 80015da:	bd80      	pop	{r7, pc}
 80015dc:	58024400 	.word	0x58024400
 80015e0:	0800c06c 	.word	0x0800c06c
 80015e4:	24000040 	.word	0x24000040
 80015e8:	24000044 	.word	0x24000044

080015ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b082      	sub	sp, #8
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80015f4:	4b15      	ldr	r3, [pc, #84]	; (800164c <HAL_InitTick+0x60>)
 80015f6:	781b      	ldrb	r3, [r3, #0]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d101      	bne.n	8001600 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80015fc:	2301      	movs	r3, #1
 80015fe:	e021      	b.n	8001644 <HAL_InitTick+0x58>
      return HAL_ERROR;
    }
  }
#else
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001600:	4b13      	ldr	r3, [pc, #76]	; (8001650 <HAL_InitTick+0x64>)
 8001602:	681a      	ldr	r2, [r3, #0]
 8001604:	4b11      	ldr	r3, [pc, #68]	; (800164c <HAL_InitTick+0x60>)
 8001606:	781b      	ldrb	r3, [r3, #0]
 8001608:	4619      	mov	r1, r3
 800160a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800160e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001612:	fbb2 f3f3 	udiv	r3, r2, r3
 8001616:	4618      	mov	r0, r3
 8001618:	f000 f943 	bl	80018a2 <HAL_SYSTICK_Config>
 800161c:	4603      	mov	r3, r0
 800161e:	2b00      	cmp	r3, #0
 8001620:	d001      	beq.n	8001626 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
 8001622:	2301      	movs	r3, #1
 8001624:	e00e      	b.n	8001644 <HAL_InitTick+0x58>
  }
#endif

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	2b0f      	cmp	r3, #15
 800162a:	d80a      	bhi.n	8001642 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800162c:	2200      	movs	r2, #0
 800162e:	6879      	ldr	r1, [r7, #4]
 8001630:	f04f 30ff 	mov.w	r0, #4294967295
 8001634:	f000 f91b 	bl	800186e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001638:	4a06      	ldr	r2, [pc, #24]	; (8001654 <HAL_InitTick+0x68>)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800163e:	2300      	movs	r3, #0
 8001640:	e000      	b.n	8001644 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001642:	2301      	movs	r3, #1
}
 8001644:	4618      	mov	r0, r3
 8001646:	3708      	adds	r7, #8
 8001648:	46bd      	mov	sp, r7
 800164a:	bd80      	pop	{r7, pc}
 800164c:	2400004c 	.word	0x2400004c
 8001650:	24000040 	.word	0x24000040
 8001654:	24000048 	.word	0x24000048

08001658 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001658:	b480      	push	{r7}
 800165a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800165c:	4b06      	ldr	r3, [pc, #24]	; (8001678 <HAL_IncTick+0x20>)
 800165e:	781b      	ldrb	r3, [r3, #0]
 8001660:	461a      	mov	r2, r3
 8001662:	4b06      	ldr	r3, [pc, #24]	; (800167c <HAL_IncTick+0x24>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	4413      	add	r3, r2
 8001668:	4a04      	ldr	r2, [pc, #16]	; (800167c <HAL_IncTick+0x24>)
 800166a:	6013      	str	r3, [r2, #0]
}
 800166c:	bf00      	nop
 800166e:	46bd      	mov	sp, r7
 8001670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001674:	4770      	bx	lr
 8001676:	bf00      	nop
 8001678:	2400004c 	.word	0x2400004c
 800167c:	2400034c 	.word	0x2400034c

08001680 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001680:	b480      	push	{r7}
 8001682:	af00      	add	r7, sp, #0
  return uwTick;
 8001684:	4b03      	ldr	r3, [pc, #12]	; (8001694 <HAL_GetTick+0x14>)
 8001686:	681b      	ldr	r3, [r3, #0]
}
 8001688:	4618      	mov	r0, r3
 800168a:	46bd      	mov	sp, r7
 800168c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001690:	4770      	bx	lr
 8001692:	bf00      	nop
 8001694:	2400034c 	.word	0x2400034c

08001698 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b084      	sub	sp, #16
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80016a0:	f7ff ffee 	bl	8001680 <HAL_GetTick>
 80016a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016b0:	d005      	beq.n	80016be <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80016b2:	4b09      	ldr	r3, [pc, #36]	; (80016d8 <HAL_Delay+0x40>)
 80016b4:	781b      	ldrb	r3, [r3, #0]
 80016b6:	461a      	mov	r2, r3
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	4413      	add	r3, r2
 80016bc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80016be:	bf00      	nop
 80016c0:	f7ff ffde 	bl	8001680 <HAL_GetTick>
 80016c4:	4602      	mov	r2, r0
 80016c6:	68bb      	ldr	r3, [r7, #8]
 80016c8:	1ad3      	subs	r3, r2, r3
 80016ca:	68fa      	ldr	r2, [r7, #12]
 80016cc:	429a      	cmp	r2, r3
 80016ce:	d8f7      	bhi.n	80016c0 <HAL_Delay+0x28>
  {
  }
}
 80016d0:	bf00      	nop
 80016d2:	3710      	adds	r7, #16
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bd80      	pop	{r7, pc}
 80016d8:	2400004c 	.word	0x2400004c

080016dc <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80016dc:	b480      	push	{r7}
 80016de:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80016e0:	4b03      	ldr	r3, [pc, #12]	; (80016f0 <HAL_GetREVID+0x14>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	0c1b      	lsrs	r3, r3, #16
}
 80016e6:	4618      	mov	r0, r3
 80016e8:	46bd      	mov	sp, r7
 80016ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ee:	4770      	bx	lr
 80016f0:	5c001000 	.word	0x5c001000

080016f4 <__NVIC_SetPriorityGrouping>:
{
 80016f4:	b480      	push	{r7}
 80016f6:	b085      	sub	sp, #20
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	f003 0307 	and.w	r3, r3, #7
 8001702:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001704:	4b0b      	ldr	r3, [pc, #44]	; (8001734 <__NVIC_SetPriorityGrouping+0x40>)
 8001706:	68db      	ldr	r3, [r3, #12]
 8001708:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800170a:	68ba      	ldr	r2, [r7, #8]
 800170c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001710:	4013      	ands	r3, r2
 8001712:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001718:	68bb      	ldr	r3, [r7, #8]
 800171a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800171c:	4b06      	ldr	r3, [pc, #24]	; (8001738 <__NVIC_SetPriorityGrouping+0x44>)
 800171e:	4313      	orrs	r3, r2
 8001720:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001722:	4a04      	ldr	r2, [pc, #16]	; (8001734 <__NVIC_SetPriorityGrouping+0x40>)
 8001724:	68bb      	ldr	r3, [r7, #8]
 8001726:	60d3      	str	r3, [r2, #12]
}
 8001728:	bf00      	nop
 800172a:	3714      	adds	r7, #20
 800172c:	46bd      	mov	sp, r7
 800172e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001732:	4770      	bx	lr
 8001734:	e000ed00 	.word	0xe000ed00
 8001738:	05fa0000 	.word	0x05fa0000

0800173c <__NVIC_GetPriorityGrouping>:
{
 800173c:	b480      	push	{r7}
 800173e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001740:	4b04      	ldr	r3, [pc, #16]	; (8001754 <__NVIC_GetPriorityGrouping+0x18>)
 8001742:	68db      	ldr	r3, [r3, #12]
 8001744:	0a1b      	lsrs	r3, r3, #8
 8001746:	f003 0307 	and.w	r3, r3, #7
}
 800174a:	4618      	mov	r0, r3
 800174c:	46bd      	mov	sp, r7
 800174e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001752:	4770      	bx	lr
 8001754:	e000ed00 	.word	0xe000ed00

08001758 <__NVIC_SetPriority>:
{
 8001758:	b480      	push	{r7}
 800175a:	b083      	sub	sp, #12
 800175c:	af00      	add	r7, sp, #0
 800175e:	4603      	mov	r3, r0
 8001760:	6039      	str	r1, [r7, #0]
 8001762:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001764:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001768:	2b00      	cmp	r3, #0
 800176a:	db0a      	blt.n	8001782 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	b2da      	uxtb	r2, r3
 8001770:	490c      	ldr	r1, [pc, #48]	; (80017a4 <__NVIC_SetPriority+0x4c>)
 8001772:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001776:	0112      	lsls	r2, r2, #4
 8001778:	b2d2      	uxtb	r2, r2
 800177a:	440b      	add	r3, r1
 800177c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001780:	e00a      	b.n	8001798 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001782:	683b      	ldr	r3, [r7, #0]
 8001784:	b2da      	uxtb	r2, r3
 8001786:	4908      	ldr	r1, [pc, #32]	; (80017a8 <__NVIC_SetPriority+0x50>)
 8001788:	88fb      	ldrh	r3, [r7, #6]
 800178a:	f003 030f 	and.w	r3, r3, #15
 800178e:	3b04      	subs	r3, #4
 8001790:	0112      	lsls	r2, r2, #4
 8001792:	b2d2      	uxtb	r2, r2
 8001794:	440b      	add	r3, r1
 8001796:	761a      	strb	r2, [r3, #24]
}
 8001798:	bf00      	nop
 800179a:	370c      	adds	r7, #12
 800179c:	46bd      	mov	sp, r7
 800179e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a2:	4770      	bx	lr
 80017a4:	e000e100 	.word	0xe000e100
 80017a8:	e000ed00 	.word	0xe000ed00

080017ac <NVIC_EncodePriority>:
{
 80017ac:	b480      	push	{r7}
 80017ae:	b089      	sub	sp, #36	; 0x24
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	60f8      	str	r0, [r7, #12]
 80017b4:	60b9      	str	r1, [r7, #8]
 80017b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	f003 0307 	and.w	r3, r3, #7
 80017be:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017c0:	69fb      	ldr	r3, [r7, #28]
 80017c2:	f1c3 0307 	rsb	r3, r3, #7
 80017c6:	2b04      	cmp	r3, #4
 80017c8:	bf28      	it	cs
 80017ca:	2304      	movcs	r3, #4
 80017cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017ce:	69fb      	ldr	r3, [r7, #28]
 80017d0:	3304      	adds	r3, #4
 80017d2:	2b06      	cmp	r3, #6
 80017d4:	d902      	bls.n	80017dc <NVIC_EncodePriority+0x30>
 80017d6:	69fb      	ldr	r3, [r7, #28]
 80017d8:	3b03      	subs	r3, #3
 80017da:	e000      	b.n	80017de <NVIC_EncodePriority+0x32>
 80017dc:	2300      	movs	r3, #0
 80017de:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017e0:	f04f 32ff 	mov.w	r2, #4294967295
 80017e4:	69bb      	ldr	r3, [r7, #24]
 80017e6:	fa02 f303 	lsl.w	r3, r2, r3
 80017ea:	43da      	mvns	r2, r3
 80017ec:	68bb      	ldr	r3, [r7, #8]
 80017ee:	401a      	ands	r2, r3
 80017f0:	697b      	ldr	r3, [r7, #20]
 80017f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017f4:	f04f 31ff 	mov.w	r1, #4294967295
 80017f8:	697b      	ldr	r3, [r7, #20]
 80017fa:	fa01 f303 	lsl.w	r3, r1, r3
 80017fe:	43d9      	mvns	r1, r3
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001804:	4313      	orrs	r3, r2
}
 8001806:	4618      	mov	r0, r3
 8001808:	3724      	adds	r7, #36	; 0x24
 800180a:	46bd      	mov	sp, r7
 800180c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001810:	4770      	bx	lr
	...

08001814 <SysTick_Config>:
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b082      	sub	sp, #8
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	3b01      	subs	r3, #1
 8001820:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001824:	d301      	bcc.n	800182a <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8001826:	2301      	movs	r3, #1
 8001828:	e00f      	b.n	800184a <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800182a:	4a0a      	ldr	r2, [pc, #40]	; (8001854 <SysTick_Config+0x40>)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	3b01      	subs	r3, #1
 8001830:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001832:	210f      	movs	r1, #15
 8001834:	f04f 30ff 	mov.w	r0, #4294967295
 8001838:	f7ff ff8e 	bl	8001758 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800183c:	4b05      	ldr	r3, [pc, #20]	; (8001854 <SysTick_Config+0x40>)
 800183e:	2200      	movs	r2, #0
 8001840:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001842:	4b04      	ldr	r3, [pc, #16]	; (8001854 <SysTick_Config+0x40>)
 8001844:	2207      	movs	r2, #7
 8001846:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8001848:	2300      	movs	r3, #0
}
 800184a:	4618      	mov	r0, r3
 800184c:	3708      	adds	r7, #8
 800184e:	46bd      	mov	sp, r7
 8001850:	bd80      	pop	{r7, pc}
 8001852:	bf00      	nop
 8001854:	e000e010 	.word	0xe000e010

08001858 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b082      	sub	sp, #8
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001860:	6878      	ldr	r0, [r7, #4]
 8001862:	f7ff ff47 	bl	80016f4 <__NVIC_SetPriorityGrouping>
}
 8001866:	bf00      	nop
 8001868:	3708      	adds	r7, #8
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}

0800186e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800186e:	b580      	push	{r7, lr}
 8001870:	b086      	sub	sp, #24
 8001872:	af00      	add	r7, sp, #0
 8001874:	4603      	mov	r3, r0
 8001876:	60b9      	str	r1, [r7, #8]
 8001878:	607a      	str	r2, [r7, #4]
 800187a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800187c:	f7ff ff5e 	bl	800173c <__NVIC_GetPriorityGrouping>
 8001880:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001882:	687a      	ldr	r2, [r7, #4]
 8001884:	68b9      	ldr	r1, [r7, #8]
 8001886:	6978      	ldr	r0, [r7, #20]
 8001888:	f7ff ff90 	bl	80017ac <NVIC_EncodePriority>
 800188c:	4602      	mov	r2, r0
 800188e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001892:	4611      	mov	r1, r2
 8001894:	4618      	mov	r0, r3
 8001896:	f7ff ff5f 	bl	8001758 <__NVIC_SetPriority>
}
 800189a:	bf00      	nop
 800189c:	3718      	adds	r7, #24
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd80      	pop	{r7, pc}

080018a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018a2:	b580      	push	{r7, lr}
 80018a4:	b082      	sub	sp, #8
 80018a6:	af00      	add	r7, sp, #0
 80018a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018aa:	6878      	ldr	r0, [r7, #4]
 80018ac:	f7ff ffb2 	bl	8001814 <SysTick_Config>
 80018b0:	4603      	mov	r3, r0
}
 80018b2:	4618      	mov	r0, r3
 80018b4:	3708      	adds	r7, #8
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}
	...

080018bc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018bc:	b480      	push	{r7}
 80018be:	b089      	sub	sp, #36	; 0x24
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
 80018c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80018c6:	2300      	movs	r3, #0
 80018c8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80018ca:	4b89      	ldr	r3, [pc, #548]	; (8001af0 <HAL_GPIO_Init+0x234>)
 80018cc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80018ce:	e194      	b.n	8001bfa <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	681a      	ldr	r2, [r3, #0]
 80018d4:	2101      	movs	r1, #1
 80018d6:	69fb      	ldr	r3, [r7, #28]
 80018d8:	fa01 f303 	lsl.w	r3, r1, r3
 80018dc:	4013      	ands	r3, r2
 80018de:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80018e0:	693b      	ldr	r3, [r7, #16]
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	f000 8186 	beq.w	8001bf4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	685b      	ldr	r3, [r3, #4]
 80018ec:	2b02      	cmp	r3, #2
 80018ee:	d003      	beq.n	80018f8 <HAL_GPIO_Init+0x3c>
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	685b      	ldr	r3, [r3, #4]
 80018f4:	2b12      	cmp	r3, #18
 80018f6:	d123      	bne.n	8001940 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80018f8:	69fb      	ldr	r3, [r7, #28]
 80018fa:	08da      	lsrs	r2, r3, #3
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	3208      	adds	r2, #8
 8001900:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001904:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001906:	69fb      	ldr	r3, [r7, #28]
 8001908:	f003 0307 	and.w	r3, r3, #7
 800190c:	009b      	lsls	r3, r3, #2
 800190e:	220f      	movs	r2, #15
 8001910:	fa02 f303 	lsl.w	r3, r2, r3
 8001914:	43db      	mvns	r3, r3
 8001916:	69ba      	ldr	r2, [r7, #24]
 8001918:	4013      	ands	r3, r2
 800191a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	691a      	ldr	r2, [r3, #16]
 8001920:	69fb      	ldr	r3, [r7, #28]
 8001922:	f003 0307 	and.w	r3, r3, #7
 8001926:	009b      	lsls	r3, r3, #2
 8001928:	fa02 f303 	lsl.w	r3, r2, r3
 800192c:	69ba      	ldr	r2, [r7, #24]
 800192e:	4313      	orrs	r3, r2
 8001930:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001932:	69fb      	ldr	r3, [r7, #28]
 8001934:	08da      	lsrs	r2, r3, #3
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	3208      	adds	r2, #8
 800193a:	69b9      	ldr	r1, [r7, #24]
 800193c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001946:	69fb      	ldr	r3, [r7, #28]
 8001948:	005b      	lsls	r3, r3, #1
 800194a:	2203      	movs	r2, #3
 800194c:	fa02 f303 	lsl.w	r3, r2, r3
 8001950:	43db      	mvns	r3, r3
 8001952:	69ba      	ldr	r2, [r7, #24]
 8001954:	4013      	ands	r3, r2
 8001956:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	685b      	ldr	r3, [r3, #4]
 800195c:	f003 0203 	and.w	r2, r3, #3
 8001960:	69fb      	ldr	r3, [r7, #28]
 8001962:	005b      	lsls	r3, r3, #1
 8001964:	fa02 f303 	lsl.w	r3, r2, r3
 8001968:	69ba      	ldr	r2, [r7, #24]
 800196a:	4313      	orrs	r3, r2
 800196c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	69ba      	ldr	r2, [r7, #24]
 8001972:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	685b      	ldr	r3, [r3, #4]
 8001978:	2b01      	cmp	r3, #1
 800197a:	d00b      	beq.n	8001994 <HAL_GPIO_Init+0xd8>
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	685b      	ldr	r3, [r3, #4]
 8001980:	2b02      	cmp	r3, #2
 8001982:	d007      	beq.n	8001994 <HAL_GPIO_Init+0xd8>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001988:	2b11      	cmp	r3, #17
 800198a:	d003      	beq.n	8001994 <HAL_GPIO_Init+0xd8>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	685b      	ldr	r3, [r3, #4]
 8001990:	2b12      	cmp	r3, #18
 8001992:	d130      	bne.n	80019f6 <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	689b      	ldr	r3, [r3, #8]
 8001998:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800199a:	69fb      	ldr	r3, [r7, #28]
 800199c:	005b      	lsls	r3, r3, #1
 800199e:	2203      	movs	r2, #3
 80019a0:	fa02 f303 	lsl.w	r3, r2, r3
 80019a4:	43db      	mvns	r3, r3
 80019a6:	69ba      	ldr	r2, [r7, #24]
 80019a8:	4013      	ands	r3, r2
 80019aa:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	68da      	ldr	r2, [r3, #12]
 80019b0:	69fb      	ldr	r3, [r7, #28]
 80019b2:	005b      	lsls	r3, r3, #1
 80019b4:	fa02 f303 	lsl.w	r3, r2, r3
 80019b8:	69ba      	ldr	r2, [r7, #24]
 80019ba:	4313      	orrs	r3, r2
 80019bc:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	69ba      	ldr	r2, [r7, #24]
 80019c2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	685b      	ldr	r3, [r3, #4]
 80019c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80019ca:	2201      	movs	r2, #1
 80019cc:	69fb      	ldr	r3, [r7, #28]
 80019ce:	fa02 f303 	lsl.w	r3, r2, r3
 80019d2:	43db      	mvns	r3, r3
 80019d4:	69ba      	ldr	r2, [r7, #24]
 80019d6:	4013      	ands	r3, r2
 80019d8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80019da:	683b      	ldr	r3, [r7, #0]
 80019dc:	685b      	ldr	r3, [r3, #4]
 80019de:	091b      	lsrs	r3, r3, #4
 80019e0:	f003 0201 	and.w	r2, r3, #1
 80019e4:	69fb      	ldr	r3, [r7, #28]
 80019e6:	fa02 f303 	lsl.w	r3, r2, r3
 80019ea:	69ba      	ldr	r2, [r7, #24]
 80019ec:	4313      	orrs	r3, r2
 80019ee:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	69ba      	ldr	r2, [r7, #24]
 80019f4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	68db      	ldr	r3, [r3, #12]
 80019fa:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80019fc:	69fb      	ldr	r3, [r7, #28]
 80019fe:	005b      	lsls	r3, r3, #1
 8001a00:	2203      	movs	r2, #3
 8001a02:	fa02 f303 	lsl.w	r3, r2, r3
 8001a06:	43db      	mvns	r3, r3
 8001a08:	69ba      	ldr	r2, [r7, #24]
 8001a0a:	4013      	ands	r3, r2
 8001a0c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	689a      	ldr	r2, [r3, #8]
 8001a12:	69fb      	ldr	r3, [r7, #28]
 8001a14:	005b      	lsls	r3, r3, #1
 8001a16:	fa02 f303 	lsl.w	r3, r2, r3
 8001a1a:	69ba      	ldr	r2, [r7, #24]
 8001a1c:	4313      	orrs	r3, r2
 8001a1e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	69ba      	ldr	r2, [r7, #24]
 8001a24:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	685b      	ldr	r3, [r3, #4]
 8001a2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	f000 80e0 	beq.w	8001bf4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a34:	4b2f      	ldr	r3, [pc, #188]	; (8001af4 <HAL_GPIO_Init+0x238>)
 8001a36:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001a3a:	4a2e      	ldr	r2, [pc, #184]	; (8001af4 <HAL_GPIO_Init+0x238>)
 8001a3c:	f043 0302 	orr.w	r3, r3, #2
 8001a40:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001a44:	4b2b      	ldr	r3, [pc, #172]	; (8001af4 <HAL_GPIO_Init+0x238>)
 8001a46:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001a4a:	f003 0302 	and.w	r3, r3, #2
 8001a4e:	60fb      	str	r3, [r7, #12]
 8001a50:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001a52:	4a29      	ldr	r2, [pc, #164]	; (8001af8 <HAL_GPIO_Init+0x23c>)
 8001a54:	69fb      	ldr	r3, [r7, #28]
 8001a56:	089b      	lsrs	r3, r3, #2
 8001a58:	3302      	adds	r3, #2
 8001a5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001a60:	69fb      	ldr	r3, [r7, #28]
 8001a62:	f003 0303 	and.w	r3, r3, #3
 8001a66:	009b      	lsls	r3, r3, #2
 8001a68:	220f      	movs	r2, #15
 8001a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a6e:	43db      	mvns	r3, r3
 8001a70:	69ba      	ldr	r2, [r7, #24]
 8001a72:	4013      	ands	r3, r2
 8001a74:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	4a20      	ldr	r2, [pc, #128]	; (8001afc <HAL_GPIO_Init+0x240>)
 8001a7a:	4293      	cmp	r3, r2
 8001a7c:	d052      	beq.n	8001b24 <HAL_GPIO_Init+0x268>
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	4a1f      	ldr	r2, [pc, #124]	; (8001b00 <HAL_GPIO_Init+0x244>)
 8001a82:	4293      	cmp	r3, r2
 8001a84:	d031      	beq.n	8001aea <HAL_GPIO_Init+0x22e>
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	4a1e      	ldr	r2, [pc, #120]	; (8001b04 <HAL_GPIO_Init+0x248>)
 8001a8a:	4293      	cmp	r3, r2
 8001a8c:	d02b      	beq.n	8001ae6 <HAL_GPIO_Init+0x22a>
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	4a1d      	ldr	r2, [pc, #116]	; (8001b08 <HAL_GPIO_Init+0x24c>)
 8001a92:	4293      	cmp	r3, r2
 8001a94:	d025      	beq.n	8001ae2 <HAL_GPIO_Init+0x226>
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	4a1c      	ldr	r2, [pc, #112]	; (8001b0c <HAL_GPIO_Init+0x250>)
 8001a9a:	4293      	cmp	r3, r2
 8001a9c:	d01f      	beq.n	8001ade <HAL_GPIO_Init+0x222>
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	4a1b      	ldr	r2, [pc, #108]	; (8001b10 <HAL_GPIO_Init+0x254>)
 8001aa2:	4293      	cmp	r3, r2
 8001aa4:	d019      	beq.n	8001ada <HAL_GPIO_Init+0x21e>
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	4a1a      	ldr	r2, [pc, #104]	; (8001b14 <HAL_GPIO_Init+0x258>)
 8001aaa:	4293      	cmp	r3, r2
 8001aac:	d013      	beq.n	8001ad6 <HAL_GPIO_Init+0x21a>
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	4a19      	ldr	r2, [pc, #100]	; (8001b18 <HAL_GPIO_Init+0x25c>)
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	d00d      	beq.n	8001ad2 <HAL_GPIO_Init+0x216>
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	4a18      	ldr	r2, [pc, #96]	; (8001b1c <HAL_GPIO_Init+0x260>)
 8001aba:	4293      	cmp	r3, r2
 8001abc:	d007      	beq.n	8001ace <HAL_GPIO_Init+0x212>
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	4a17      	ldr	r2, [pc, #92]	; (8001b20 <HAL_GPIO_Init+0x264>)
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d101      	bne.n	8001aca <HAL_GPIO_Init+0x20e>
 8001ac6:	2309      	movs	r3, #9
 8001ac8:	e02d      	b.n	8001b26 <HAL_GPIO_Init+0x26a>
 8001aca:	230a      	movs	r3, #10
 8001acc:	e02b      	b.n	8001b26 <HAL_GPIO_Init+0x26a>
 8001ace:	2308      	movs	r3, #8
 8001ad0:	e029      	b.n	8001b26 <HAL_GPIO_Init+0x26a>
 8001ad2:	2307      	movs	r3, #7
 8001ad4:	e027      	b.n	8001b26 <HAL_GPIO_Init+0x26a>
 8001ad6:	2306      	movs	r3, #6
 8001ad8:	e025      	b.n	8001b26 <HAL_GPIO_Init+0x26a>
 8001ada:	2305      	movs	r3, #5
 8001adc:	e023      	b.n	8001b26 <HAL_GPIO_Init+0x26a>
 8001ade:	2304      	movs	r3, #4
 8001ae0:	e021      	b.n	8001b26 <HAL_GPIO_Init+0x26a>
 8001ae2:	2303      	movs	r3, #3
 8001ae4:	e01f      	b.n	8001b26 <HAL_GPIO_Init+0x26a>
 8001ae6:	2302      	movs	r3, #2
 8001ae8:	e01d      	b.n	8001b26 <HAL_GPIO_Init+0x26a>
 8001aea:	2301      	movs	r3, #1
 8001aec:	e01b      	b.n	8001b26 <HAL_GPIO_Init+0x26a>
 8001aee:	bf00      	nop
 8001af0:	58000080 	.word	0x58000080
 8001af4:	58024400 	.word	0x58024400
 8001af8:	58000400 	.word	0x58000400
 8001afc:	58020000 	.word	0x58020000
 8001b00:	58020400 	.word	0x58020400
 8001b04:	58020800 	.word	0x58020800
 8001b08:	58020c00 	.word	0x58020c00
 8001b0c:	58021000 	.word	0x58021000
 8001b10:	58021400 	.word	0x58021400
 8001b14:	58021800 	.word	0x58021800
 8001b18:	58021c00 	.word	0x58021c00
 8001b1c:	58022000 	.word	0x58022000
 8001b20:	58022400 	.word	0x58022400
 8001b24:	2300      	movs	r3, #0
 8001b26:	69fa      	ldr	r2, [r7, #28]
 8001b28:	f002 0203 	and.w	r2, r2, #3
 8001b2c:	0092      	lsls	r2, r2, #2
 8001b2e:	4093      	lsls	r3, r2
 8001b30:	69ba      	ldr	r2, [r7, #24]
 8001b32:	4313      	orrs	r3, r2
 8001b34:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001b36:	4938      	ldr	r1, [pc, #224]	; (8001c18 <HAL_GPIO_Init+0x35c>)
 8001b38:	69fb      	ldr	r3, [r7, #28]
 8001b3a:	089b      	lsrs	r3, r3, #2
 8001b3c:	3302      	adds	r3, #2
 8001b3e:	69ba      	ldr	r2, [r7, #24]
 8001b40:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001b44:	697b      	ldr	r3, [r7, #20]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001b4a:	693b      	ldr	r3, [r7, #16]
 8001b4c:	43db      	mvns	r3, r3
 8001b4e:	69ba      	ldr	r2, [r7, #24]
 8001b50:	4013      	ands	r3, r2
 8001b52:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	685b      	ldr	r3, [r3, #4]
 8001b58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d003      	beq.n	8001b68 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001b60:	69ba      	ldr	r2, [r7, #24]
 8001b62:	693b      	ldr	r3, [r7, #16]
 8001b64:	4313      	orrs	r3, r2
 8001b66:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001b68:	697b      	ldr	r3, [r7, #20]
 8001b6a:	69ba      	ldr	r2, [r7, #24]
 8001b6c:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8001b6e:	697b      	ldr	r3, [r7, #20]
 8001b70:	685b      	ldr	r3, [r3, #4]
 8001b72:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001b74:	693b      	ldr	r3, [r7, #16]
 8001b76:	43db      	mvns	r3, r3
 8001b78:	69ba      	ldr	r2, [r7, #24]
 8001b7a:	4013      	ands	r3, r2
 8001b7c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d003      	beq.n	8001b92 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001b8a:	69ba      	ldr	r2, [r7, #24]
 8001b8c:	693b      	ldr	r3, [r7, #16]
 8001b8e:	4313      	orrs	r3, r2
 8001b90:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001b92:	697b      	ldr	r3, [r7, #20]
 8001b94:	69ba      	ldr	r2, [r7, #24]
 8001b96:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001b98:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001ba0:	693b      	ldr	r3, [r7, #16]
 8001ba2:	43db      	mvns	r3, r3
 8001ba4:	69ba      	ldr	r2, [r7, #24]
 8001ba6:	4013      	ands	r3, r2
 8001ba8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	685b      	ldr	r3, [r3, #4]
 8001bae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d003      	beq.n	8001bbe <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8001bb6:	69ba      	ldr	r2, [r7, #24]
 8001bb8:	693b      	ldr	r3, [r7, #16]
 8001bba:	4313      	orrs	r3, r2
 8001bbc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001bbe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001bc2:	69bb      	ldr	r3, [r7, #24]
 8001bc4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001bc6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bca:	685b      	ldr	r3, [r3, #4]
 8001bcc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001bce:	693b      	ldr	r3, [r7, #16]
 8001bd0:	43db      	mvns	r3, r3
 8001bd2:	69ba      	ldr	r2, [r7, #24]
 8001bd4:	4013      	ands	r3, r2
 8001bd6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	685b      	ldr	r3, [r3, #4]
 8001bdc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d003      	beq.n	8001bec <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8001be4:	69ba      	ldr	r2, [r7, #24]
 8001be6:	693b      	ldr	r3, [r7, #16]
 8001be8:	4313      	orrs	r3, r2
 8001bea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001bec:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001bf0:	69bb      	ldr	r3, [r7, #24]
 8001bf2:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8001bf4:	69fb      	ldr	r3, [r7, #28]
 8001bf6:	3301      	adds	r3, #1
 8001bf8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	681a      	ldr	r2, [r3, #0]
 8001bfe:	69fb      	ldr	r3, [r7, #28]
 8001c00:	fa22 f303 	lsr.w	r3, r2, r3
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	f47f ae63 	bne.w	80018d0 <HAL_GPIO_Init+0x14>
  }
}
 8001c0a:	bf00      	nop
 8001c0c:	3724      	adds	r7, #36	; 0x24
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c14:	4770      	bx	lr
 8001c16:	bf00      	nop
 8001c18:	58000400 	.word	0x58000400

08001c1c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	b085      	sub	sp, #20
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
 8001c24:	460b      	mov	r3, r1
 8001c26:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	691a      	ldr	r2, [r3, #16]
 8001c2c:	887b      	ldrh	r3, [r7, #2]
 8001c2e:	4013      	ands	r3, r2
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d002      	beq.n	8001c3a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001c34:	2301      	movs	r3, #1
 8001c36:	73fb      	strb	r3, [r7, #15]
 8001c38:	e001      	b.n	8001c3e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001c3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c40:	4618      	mov	r0, r3
 8001c42:	3714      	adds	r7, #20
 8001c44:	46bd      	mov	sp, r7
 8001c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4a:	4770      	bx	lr

08001c4c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	b083      	sub	sp, #12
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
 8001c54:	460b      	mov	r3, r1
 8001c56:	807b      	strh	r3, [r7, #2]
 8001c58:	4613      	mov	r3, r2
 8001c5a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001c5c:	787b      	ldrb	r3, [r7, #1]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d003      	beq.n	8001c6a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c62:	887a      	ldrh	r2, [r7, #2]
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001c68:	e003      	b.n	8001c72 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001c6a:	887b      	ldrh	r3, [r7, #2]
 8001c6c:	041a      	lsls	r2, r3, #16
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	619a      	str	r2, [r3, #24]
}
 8001c72:	bf00      	nop
 8001c74:	370c      	adds	r7, #12
 8001c76:	46bd      	mov	sp, r7
 8001c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7c:	4770      	bx	lr
	...

08001c80 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b082      	sub	sp, #8
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d101      	bne.n	8001c92 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001c8e:	2301      	movs	r3, #1
 8001c90:	e07f      	b.n	8001d92 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001c98:	b2db      	uxtb	r3, r3
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d106      	bne.n	8001cac <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001ca6:	6878      	ldr	r0, [r7, #4]
 8001ca8:	f7ff f9b4 	bl	8001014 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	2224      	movs	r2, #36	; 0x24
 8001cb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	681a      	ldr	r2, [r3, #0]
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f022 0201 	bic.w	r2, r2, #1
 8001cc2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	685a      	ldr	r2, [r3, #4]
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001cd0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	689a      	ldr	r2, [r3, #8]
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001ce0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	68db      	ldr	r3, [r3, #12]
 8001ce6:	2b01      	cmp	r3, #1
 8001ce8:	d107      	bne.n	8001cfa <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	689a      	ldr	r2, [r3, #8]
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001cf6:	609a      	str	r2, [r3, #8]
 8001cf8:	e006      	b.n	8001d08 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	689a      	ldr	r2, [r3, #8]
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001d06:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	68db      	ldr	r3, [r3, #12]
 8001d0c:	2b02      	cmp	r3, #2
 8001d0e:	d104      	bne.n	8001d1a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001d18:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	6859      	ldr	r1, [r3, #4]
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681a      	ldr	r2, [r3, #0]
 8001d24:	4b1d      	ldr	r3, [pc, #116]	; (8001d9c <HAL_I2C_Init+0x11c>)
 8001d26:	430b      	orrs	r3, r1
 8001d28:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	68da      	ldr	r2, [r3, #12]
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001d38:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	691a      	ldr	r2, [r3, #16]
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	695b      	ldr	r3, [r3, #20]
 8001d42:	ea42 0103 	orr.w	r1, r2, r3
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	699b      	ldr	r3, [r3, #24]
 8001d4a:	021a      	lsls	r2, r3, #8
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	430a      	orrs	r2, r1
 8001d52:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	69d9      	ldr	r1, [r3, #28]
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	6a1a      	ldr	r2, [r3, #32]
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	430a      	orrs	r2, r1
 8001d62:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	681a      	ldr	r2, [r3, #0]
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f042 0201 	orr.w	r2, r2, #1
 8001d72:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2200      	movs	r2, #0
 8001d78:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	2220      	movs	r2, #32
 8001d7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	2200      	movs	r2, #0
 8001d86:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001d90:	2300      	movs	r3, #0
}
 8001d92:	4618      	mov	r0, r3
 8001d94:	3708      	adds	r7, #8
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}
 8001d9a:	bf00      	nop
 8001d9c:	02008000 	.word	0x02008000

08001da0 <HAL_I2C_Slave_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Transmit(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b088      	sub	sp, #32
 8001da4:	af02      	add	r7, sp, #8
 8001da6:	60f8      	str	r0, [r7, #12]
 8001da8:	60b9      	str	r1, [r7, #8]
 8001daa:	603b      	str	r3, [r7, #0]
 8001dac:	4613      	mov	r3, r2
 8001dae:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001db6:	b2db      	uxtb	r3, r3
 8001db8:	2b20      	cmp	r3, #32
 8001dba:	f040 80f5 	bne.w	8001fa8 <HAL_I2C_Slave_Transmit+0x208>
  {
    if ((pData == NULL) || (Size == 0U))
 8001dbe:	68bb      	ldr	r3, [r7, #8]
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d002      	beq.n	8001dca <HAL_I2C_Slave_Transmit+0x2a>
 8001dc4:	88fb      	ldrh	r3, [r7, #6]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d105      	bne.n	8001dd6 <HAL_I2C_Slave_Transmit+0x36>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001dd0:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	e0e9      	b.n	8001faa <HAL_I2C_Slave_Transmit+0x20a>
    }
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001ddc:	2b01      	cmp	r3, #1
 8001dde:	d101      	bne.n	8001de4 <HAL_I2C_Slave_Transmit+0x44>
 8001de0:	2302      	movs	r3, #2
 8001de2:	e0e2      	b.n	8001faa <HAL_I2C_Slave_Transmit+0x20a>
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	2201      	movs	r2, #1
 8001de8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001dec:	f7ff fc48 	bl	8001680 <HAL_GetTick>
 8001df0:	6178      	str	r0, [r7, #20]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	2221      	movs	r2, #33	; 0x21
 8001df6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	2220      	movs	r2, #32
 8001dfe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	2200      	movs	r2, #0
 8001e06:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	68ba      	ldr	r2, [r7, #8]
 8001e0c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	88fa      	ldrh	r2, [r7, #6]
 8001e12:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	2200      	movs	r2, #0
 8001e18:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable Address Acknowledge */
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	685a      	ldr	r2, [r3, #4]
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001e28:	605a      	str	r2, [r3, #4]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, RESET, Timeout, tickstart) != HAL_OK)
 8001e2a:	697b      	ldr	r3, [r7, #20]
 8001e2c:	9300      	str	r3, [sp, #0]
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	2200      	movs	r2, #0
 8001e32:	2108      	movs	r1, #8
 8001e34:	68f8      	ldr	r0, [r7, #12]
 8001e36:	f000 f9df 	bl	80021f8 <I2C_WaitOnFlagUntilTimeout>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d009      	beq.n	8001e54 <HAL_I2C_Slave_Transmit+0xb4>
    {
      /* Disable Address Acknowledge */
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	685a      	ldr	r2, [r3, #4]
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001e4e:	605a      	str	r2, [r3, #4]
      return HAL_ERROR;
 8001e50:	2301      	movs	r3, #1
 8001e52:	e0aa      	b.n	8001faa <HAL_I2C_Slave_Transmit+0x20a>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	2208      	movs	r2, #8
 8001e5a:	61da      	str	r2, [r3, #28]

    /* If 10bit addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	68db      	ldr	r3, [r3, #12]
 8001e60:	2b02      	cmp	r3, #2
 8001e62:	d118      	bne.n	8001e96 <HAL_I2C_Slave_Transmit+0xf6>
    {
      /* Wait until ADDR flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, RESET, Timeout, tickstart) != HAL_OK)
 8001e64:	697b      	ldr	r3, [r7, #20]
 8001e66:	9300      	str	r3, [sp, #0]
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	2108      	movs	r1, #8
 8001e6e:	68f8      	ldr	r0, [r7, #12]
 8001e70:	f000 f9c2 	bl	80021f8 <I2C_WaitOnFlagUntilTimeout>
 8001e74:	4603      	mov	r3, r0
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d009      	beq.n	8001e8e <HAL_I2C_Slave_Transmit+0xee>
      {
        /* Disable Address Acknowledge */
        hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	685a      	ldr	r2, [r3, #4]
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001e88:	605a      	str	r2, [r3, #4]
        return HAL_ERROR;
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	e08d      	b.n	8001faa <HAL_I2C_Slave_Transmit+0x20a>
      }

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	2208      	movs	r2, #8
 8001e94:	61da      	str	r2, [r3, #28]
    }

    /* Wait until DIR flag is set Transmitter mode */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_DIR, RESET, Timeout, tickstart) != HAL_OK)
 8001e96:	697b      	ldr	r3, [r7, #20]
 8001e98:	9300      	str	r3, [sp, #0]
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8001ea2:	68f8      	ldr	r0, [r7, #12]
 8001ea4:	f000 f9a8 	bl	80021f8 <I2C_WaitOnFlagUntilTimeout>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d02d      	beq.n	8001f0a <HAL_I2C_Slave_Transmit+0x16a>
    {
      /* Disable Address Acknowledge */
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	685a      	ldr	r2, [r3, #4]
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001ebc:	605a      	str	r2, [r3, #4]
      return HAL_ERROR;
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	e073      	b.n	8001faa <HAL_I2C_Slave_Transmit+0x20a>
    }

    while (hi2c->XferCount > 0U)
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001ec2:	697a      	ldr	r2, [r7, #20]
 8001ec4:	6839      	ldr	r1, [r7, #0]
 8001ec6:	68f8      	ldr	r0, [r7, #12]
 8001ec8:	f000 f9d6 	bl	8002278 <I2C_WaitOnTXISFlagUntilTimeout>
 8001ecc:	4603      	mov	r3, r0
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d009      	beq.n	8001ee6 <HAL_I2C_Slave_Transmit+0x146>
      {
        /* Disable Address Acknowledge */
        hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	685a      	ldr	r2, [r3, #4]
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001ee0:	605a      	str	r2, [r3, #4]
        return HAL_ERROR;
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	e061      	b.n	8001faa <HAL_I2C_Slave_Transmit+0x20a>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eea:	781a      	ldrb	r2, [r3, #0]
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ef6:	1c5a      	adds	r2, r3, #1
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f00:	b29b      	uxth	r3, r3
 8001f02:	3b01      	subs	r3, #1
 8001f04:	b29a      	uxth	r2, r3
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferCount > 0U)
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f0e:	b29b      	uxth	r3, r3
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d1d6      	bne.n	8001ec2 <HAL_I2C_Slave_Transmit+0x122>
    }

    /* Wait until STOP flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f14:	697a      	ldr	r2, [r7, #20]
 8001f16:	6839      	ldr	r1, [r7, #0]
 8001f18:	68f8      	ldr	r0, [r7, #12]
 8001f1a:	f000 f9ed 	bl	80022f8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001f1e:	4603      	mov	r3, r0
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d011      	beq.n	8001f48 <HAL_I2C_Slave_Transmit+0x1a8>
    {
      /* Disable Address Acknowledge */
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	685a      	ldr	r2, [r3, #4]
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001f32:	605a      	str	r2, [r3, #4]

      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f38:	2b04      	cmp	r3, #4
 8001f3a:	d103      	bne.n	8001f44 <HAL_I2C_Slave_Transmit+0x1a4>
      {
        /* Normal use case for Transmitter mode */
        /* A NACK is generated to confirm the end of transfer */
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	2200      	movs	r2, #0
 8001f40:	645a      	str	r2, [r3, #68]	; 0x44
 8001f42:	e001      	b.n	8001f48 <HAL_I2C_Slave_Transmit+0x1a8>
      }
      else
      {
        return HAL_ERROR;
 8001f44:	2301      	movs	r3, #1
 8001f46:	e030      	b.n	8001faa <HAL_I2C_Slave_Transmit+0x20a>
      }
    }

    /* Clear STOP flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	2220      	movs	r2, #32
 8001f4e:	61da      	str	r2, [r3, #28]

    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, Timeout, tickstart) != HAL_OK)
 8001f50:	697b      	ldr	r3, [r7, #20]
 8001f52:	9300      	str	r3, [sp, #0]
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	2201      	movs	r2, #1
 8001f58:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001f5c:	68f8      	ldr	r0, [r7, #12]
 8001f5e:	f000 f94b 	bl	80021f8 <I2C_WaitOnFlagUntilTimeout>
 8001f62:	4603      	mov	r3, r0
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d009      	beq.n	8001f7c <HAL_I2C_Slave_Transmit+0x1dc>
    {
      /* Disable Address Acknowledge */
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	685a      	ldr	r2, [r3, #4]
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001f76:	605a      	str	r2, [r3, #4]
      return HAL_ERROR;
 8001f78:	2301      	movs	r3, #1
 8001f7a:	e016      	b.n	8001faa <HAL_I2C_Slave_Transmit+0x20a>
    }

    /* Disable Address Acknowledge */
    hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	685a      	ldr	r2, [r3, #4]
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001f8a:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	2220      	movs	r2, #32
 8001f90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	2200      	movs	r2, #0
 8001f98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	e000      	b.n	8001faa <HAL_I2C_Slave_Transmit+0x20a>
  }
  else
  {
    return HAL_BUSY;
 8001fa8:	2302      	movs	r3, #2
  }
}
 8001faa:	4618      	mov	r0, r3
 8001fac:	3718      	adds	r7, #24
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bd80      	pop	{r7, pc}

08001fb2 <HAL_I2C_Slave_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Receive(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001fb2:	b580      	push	{r7, lr}
 8001fb4:	b088      	sub	sp, #32
 8001fb6:	af02      	add	r7, sp, #8
 8001fb8:	60f8      	str	r0, [r7, #12]
 8001fba:	60b9      	str	r1, [r7, #8]
 8001fbc:	603b      	str	r3, [r7, #0]
 8001fbe:	4613      	mov	r3, r2
 8001fc0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001fc8:	b2db      	uxtb	r3, r3
 8001fca:	2b20      	cmp	r3, #32
 8001fcc:	f040 80eb 	bne.w	80021a6 <HAL_I2C_Slave_Receive+0x1f4>
  {
    if ((pData == NULL) || (Size == 0U))
 8001fd0:	68bb      	ldr	r3, [r7, #8]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d002      	beq.n	8001fdc <HAL_I2C_Slave_Receive+0x2a>
 8001fd6:	88fb      	ldrh	r3, [r7, #6]
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d105      	bne.n	8001fe8 <HAL_I2C_Slave_Receive+0x36>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001fe2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001fe4:	2301      	movs	r3, #1
 8001fe6:	e0df      	b.n	80021a8 <HAL_I2C_Slave_Receive+0x1f6>
    }
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001fee:	2b01      	cmp	r3, #1
 8001ff0:	d101      	bne.n	8001ff6 <HAL_I2C_Slave_Receive+0x44>
 8001ff2:	2302      	movs	r3, #2
 8001ff4:	e0d8      	b.n	80021a8 <HAL_I2C_Slave_Receive+0x1f6>
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	2201      	movs	r2, #1
 8001ffa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001ffe:	f7ff fb3f 	bl	8001680 <HAL_GetTick>
 8002002:	6178      	str	r0, [r7, #20]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	2222      	movs	r2, #34	; 0x22
 8002008:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	2220      	movs	r2, #32
 8002010:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	2200      	movs	r2, #0
 8002018:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	68ba      	ldr	r2, [r7, #8]
 800201e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	88fa      	ldrh	r2, [r7, #6]
 8002024:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	2200      	movs	r2, #0
 800202a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable Address Acknowledge */
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	685a      	ldr	r2, [r3, #4]
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800203a:	605a      	str	r2, [r3, #4]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, RESET, Timeout, tickstart) != HAL_OK)
 800203c:	697b      	ldr	r3, [r7, #20]
 800203e:	9300      	str	r3, [sp, #0]
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	2200      	movs	r2, #0
 8002044:	2108      	movs	r1, #8
 8002046:	68f8      	ldr	r0, [r7, #12]
 8002048:	f000 f8d6 	bl	80021f8 <I2C_WaitOnFlagUntilTimeout>
 800204c:	4603      	mov	r3, r0
 800204e:	2b00      	cmp	r3, #0
 8002050:	d009      	beq.n	8002066 <HAL_I2C_Slave_Receive+0xb4>
    {
      /* Disable Address Acknowledge */
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	685a      	ldr	r2, [r3, #4]
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002060:	605a      	str	r2, [r3, #4]
      return HAL_ERROR;
 8002062:	2301      	movs	r3, #1
 8002064:	e0a0      	b.n	80021a8 <HAL_I2C_Slave_Receive+0x1f6>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	2208      	movs	r2, #8
 800206c:	61da      	str	r2, [r3, #28]

    /* Wait until DIR flag is reset Receiver mode */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_DIR, SET, Timeout, tickstart) != HAL_OK)
 800206e:	697b      	ldr	r3, [r7, #20]
 8002070:	9300      	str	r3, [sp, #0]
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	2201      	movs	r2, #1
 8002076:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 800207a:	68f8      	ldr	r0, [r7, #12]
 800207c:	f000 f8bc 	bl	80021f8 <I2C_WaitOnFlagUntilTimeout>
 8002080:	4603      	mov	r3, r0
 8002082:	2b00      	cmp	r3, #0
 8002084:	d048      	beq.n	8002118 <HAL_I2C_Slave_Receive+0x166>
    {
      /* Disable Address Acknowledge */
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	685a      	ldr	r2, [r3, #4]
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002094:	605a      	str	r2, [r3, #4]
      return HAL_ERROR;
 8002096:	2301      	movs	r3, #1
 8002098:	e086      	b.n	80021a8 <HAL_I2C_Slave_Receive+0x1f6>
    }

    while (hi2c->XferCount > 0U)
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800209a:	697a      	ldr	r2, [r7, #20]
 800209c:	6839      	ldr	r1, [r7, #0]
 800209e:	68f8      	ldr	r0, [r7, #12]
 80020a0:	f000 f966 	bl	8002370 <I2C_WaitOnRXNEFlagUntilTimeout>
 80020a4:	4603      	mov	r3, r0
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d023      	beq.n	80020f2 <HAL_I2C_Slave_Receive+0x140>
      {
        /* Disable Address Acknowledge */
        hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	685a      	ldr	r2, [r3, #4]
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80020b8:	605a      	str	r2, [r3, #4]

        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	699b      	ldr	r3, [r3, #24]
 80020c0:	f003 0304 	and.w	r3, r3, #4
 80020c4:	2b04      	cmp	r3, #4
 80020c6:	d112      	bne.n	80020ee <HAL_I2C_Slave_Receive+0x13c>
        {
          /* Read data from RXDR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020d2:	b2d2      	uxtb	r2, r2
 80020d4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020da:	1c5a      	adds	r2, r3, #1
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	625a      	str	r2, [r3, #36]	; 0x24

          hi2c->XferCount--;
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020e4:	b29b      	uxth	r3, r3
 80020e6:	3b01      	subs	r3, #1
 80020e8:	b29a      	uxth	r2, r3
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	855a      	strh	r2, [r3, #42]	; 0x2a
        }

        return HAL_ERROR;
 80020ee:	2301      	movs	r3, #1
 80020f0:	e05a      	b.n	80021a8 <HAL_I2C_Slave_Receive+0x1f6>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020fc:	b2d2      	uxtb	r2, r2
 80020fe:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002104:	1c5a      	adds	r2, r3, #1
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800210e:	b29b      	uxth	r3, r3
 8002110:	3b01      	subs	r3, #1
 8002112:	b29a      	uxth	r2, r3
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferCount > 0U)
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800211c:	b29b      	uxth	r3, r3
 800211e:	2b00      	cmp	r3, #0
 8002120:	d1bb      	bne.n	800209a <HAL_I2C_Slave_Receive+0xe8>
    }

    /* Wait until STOP flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002122:	697a      	ldr	r2, [r7, #20]
 8002124:	6839      	ldr	r1, [r7, #0]
 8002126:	68f8      	ldr	r0, [r7, #12]
 8002128:	f000 f8e6 	bl	80022f8 <I2C_WaitOnSTOPFlagUntilTimeout>
 800212c:	4603      	mov	r3, r0
 800212e:	2b00      	cmp	r3, #0
 8002130:	d009      	beq.n	8002146 <HAL_I2C_Slave_Receive+0x194>
    {
      /* Disable Address Acknowledge */
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	685a      	ldr	r2, [r3, #4]
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002140:	605a      	str	r2, [r3, #4]
      return HAL_ERROR;
 8002142:	2301      	movs	r3, #1
 8002144:	e030      	b.n	80021a8 <HAL_I2C_Slave_Receive+0x1f6>
    }

    /* Clear STOP flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	2220      	movs	r2, #32
 800214c:	61da      	str	r2, [r3, #28]

    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, Timeout, tickstart) != HAL_OK)
 800214e:	697b      	ldr	r3, [r7, #20]
 8002150:	9300      	str	r3, [sp, #0]
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	2201      	movs	r2, #1
 8002156:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800215a:	68f8      	ldr	r0, [r7, #12]
 800215c:	f000 f84c 	bl	80021f8 <I2C_WaitOnFlagUntilTimeout>
 8002160:	4603      	mov	r3, r0
 8002162:	2b00      	cmp	r3, #0
 8002164:	d009      	beq.n	800217a <HAL_I2C_Slave_Receive+0x1c8>
    {
      /* Disable Address Acknowledge */
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	685a      	ldr	r2, [r3, #4]
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002174:	605a      	str	r2, [r3, #4]
      return HAL_ERROR;
 8002176:	2301      	movs	r3, #1
 8002178:	e016      	b.n	80021a8 <HAL_I2C_Slave_Receive+0x1f6>
    }

    /* Disable Address Acknowledge */
    hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	685a      	ldr	r2, [r3, #4]
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002188:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	2220      	movs	r2, #32
 800218e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	2200      	movs	r2, #0
 8002196:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	2200      	movs	r2, #0
 800219e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80021a2:	2300      	movs	r3, #0
 80021a4:	e000      	b.n	80021a8 <HAL_I2C_Slave_Receive+0x1f6>
  }
  else
  {
    return HAL_BUSY;
 80021a6:	2302      	movs	r3, #2
  }
}
 80021a8:	4618      	mov	r0, r3
 80021aa:	3718      	adds	r7, #24
 80021ac:	46bd      	mov	sp, r7
 80021ae:	bd80      	pop	{r7, pc}

080021b0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80021b0:	b480      	push	{r7}
 80021b2:	b083      	sub	sp, #12
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	699b      	ldr	r3, [r3, #24]
 80021be:	f003 0302 	and.w	r3, r3, #2
 80021c2:	2b02      	cmp	r3, #2
 80021c4:	d103      	bne.n	80021ce <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	2200      	movs	r2, #0
 80021cc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	699b      	ldr	r3, [r3, #24]
 80021d4:	f003 0301 	and.w	r3, r3, #1
 80021d8:	2b01      	cmp	r3, #1
 80021da:	d007      	beq.n	80021ec <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	699a      	ldr	r2, [r3, #24]
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f042 0201 	orr.w	r2, r2, #1
 80021ea:	619a      	str	r2, [r3, #24]
  }
}
 80021ec:	bf00      	nop
 80021ee:	370c      	adds	r7, #12
 80021f0:	46bd      	mov	sp, r7
 80021f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f6:	4770      	bx	lr

080021f8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b084      	sub	sp, #16
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	60f8      	str	r0, [r7, #12]
 8002200:	60b9      	str	r1, [r7, #8]
 8002202:	603b      	str	r3, [r7, #0]
 8002204:	4613      	mov	r3, r2
 8002206:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002208:	e022      	b.n	8002250 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002210:	d01e      	beq.n	8002250 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002212:	f7ff fa35 	bl	8001680 <HAL_GetTick>
 8002216:	4602      	mov	r2, r0
 8002218:	69bb      	ldr	r3, [r7, #24]
 800221a:	1ad3      	subs	r3, r2, r3
 800221c:	683a      	ldr	r2, [r7, #0]
 800221e:	429a      	cmp	r2, r3
 8002220:	d302      	bcc.n	8002228 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	2b00      	cmp	r3, #0
 8002226:	d113      	bne.n	8002250 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800222c:	f043 0220 	orr.w	r2, r3, #32
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	2220      	movs	r2, #32
 8002238:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	2200      	movs	r2, #0
 8002240:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	2200      	movs	r2, #0
 8002248:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800224c:	2301      	movs	r3, #1
 800224e:	e00f      	b.n	8002270 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	699a      	ldr	r2, [r3, #24]
 8002256:	68bb      	ldr	r3, [r7, #8]
 8002258:	4013      	ands	r3, r2
 800225a:	68ba      	ldr	r2, [r7, #8]
 800225c:	429a      	cmp	r2, r3
 800225e:	bf0c      	ite	eq
 8002260:	2301      	moveq	r3, #1
 8002262:	2300      	movne	r3, #0
 8002264:	b2db      	uxtb	r3, r3
 8002266:	461a      	mov	r2, r3
 8002268:	79fb      	ldrb	r3, [r7, #7]
 800226a:	429a      	cmp	r2, r3
 800226c:	d0cd      	beq.n	800220a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800226e:	2300      	movs	r3, #0
}
 8002270:	4618      	mov	r0, r3
 8002272:	3710      	adds	r7, #16
 8002274:	46bd      	mov	sp, r7
 8002276:	bd80      	pop	{r7, pc}

08002278 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b084      	sub	sp, #16
 800227c:	af00      	add	r7, sp, #0
 800227e:	60f8      	str	r0, [r7, #12]
 8002280:	60b9      	str	r1, [r7, #8]
 8002282:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002284:	e02c      	b.n	80022e0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002286:	687a      	ldr	r2, [r7, #4]
 8002288:	68b9      	ldr	r1, [r7, #8]
 800228a:	68f8      	ldr	r0, [r7, #12]
 800228c:	f000 f8dc 	bl	8002448 <I2C_IsAcknowledgeFailed>
 8002290:	4603      	mov	r3, r0
 8002292:	2b00      	cmp	r3, #0
 8002294:	d001      	beq.n	800229a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002296:	2301      	movs	r3, #1
 8002298:	e02a      	b.n	80022f0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800229a:	68bb      	ldr	r3, [r7, #8]
 800229c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022a0:	d01e      	beq.n	80022e0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80022a2:	f7ff f9ed 	bl	8001680 <HAL_GetTick>
 80022a6:	4602      	mov	r2, r0
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	1ad3      	subs	r3, r2, r3
 80022ac:	68ba      	ldr	r2, [r7, #8]
 80022ae:	429a      	cmp	r2, r3
 80022b0:	d302      	bcc.n	80022b8 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80022b2:	68bb      	ldr	r3, [r7, #8]
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d113      	bne.n	80022e0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022bc:	f043 0220 	orr.w	r2, r3, #32
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	2220      	movs	r2, #32
 80022c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	2200      	movs	r2, #0
 80022d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	2200      	movs	r2, #0
 80022d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80022dc:	2301      	movs	r3, #1
 80022de:	e007      	b.n	80022f0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	699b      	ldr	r3, [r3, #24]
 80022e6:	f003 0302 	and.w	r3, r3, #2
 80022ea:	2b02      	cmp	r3, #2
 80022ec:	d1cb      	bne.n	8002286 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80022ee:	2300      	movs	r3, #0
}
 80022f0:	4618      	mov	r0, r3
 80022f2:	3710      	adds	r7, #16
 80022f4:	46bd      	mov	sp, r7
 80022f6:	bd80      	pop	{r7, pc}

080022f8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b084      	sub	sp, #16
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	60f8      	str	r0, [r7, #12]
 8002300:	60b9      	str	r1, [r7, #8]
 8002302:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002304:	e028      	b.n	8002358 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002306:	687a      	ldr	r2, [r7, #4]
 8002308:	68b9      	ldr	r1, [r7, #8]
 800230a:	68f8      	ldr	r0, [r7, #12]
 800230c:	f000 f89c 	bl	8002448 <I2C_IsAcknowledgeFailed>
 8002310:	4603      	mov	r3, r0
 8002312:	2b00      	cmp	r3, #0
 8002314:	d001      	beq.n	800231a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002316:	2301      	movs	r3, #1
 8002318:	e026      	b.n	8002368 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800231a:	f7ff f9b1 	bl	8001680 <HAL_GetTick>
 800231e:	4602      	mov	r2, r0
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	1ad3      	subs	r3, r2, r3
 8002324:	68ba      	ldr	r2, [r7, #8]
 8002326:	429a      	cmp	r2, r3
 8002328:	d302      	bcc.n	8002330 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800232a:	68bb      	ldr	r3, [r7, #8]
 800232c:	2b00      	cmp	r3, #0
 800232e:	d113      	bne.n	8002358 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002334:	f043 0220 	orr.w	r2, r3, #32
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	2220      	movs	r2, #32
 8002340:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	2200      	movs	r2, #0
 8002348:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	2200      	movs	r2, #0
 8002350:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002354:	2301      	movs	r3, #1
 8002356:	e007      	b.n	8002368 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	699b      	ldr	r3, [r3, #24]
 800235e:	f003 0320 	and.w	r3, r3, #32
 8002362:	2b20      	cmp	r3, #32
 8002364:	d1cf      	bne.n	8002306 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002366:	2300      	movs	r3, #0
}
 8002368:	4618      	mov	r0, r3
 800236a:	3710      	adds	r7, #16
 800236c:	46bd      	mov	sp, r7
 800236e:	bd80      	pop	{r7, pc}

08002370 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b084      	sub	sp, #16
 8002374:	af00      	add	r7, sp, #0
 8002376:	60f8      	str	r0, [r7, #12]
 8002378:	60b9      	str	r1, [r7, #8]
 800237a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800237c:	e055      	b.n	800242a <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800237e:	687a      	ldr	r2, [r7, #4]
 8002380:	68b9      	ldr	r1, [r7, #8]
 8002382:	68f8      	ldr	r0, [r7, #12]
 8002384:	f000 f860 	bl	8002448 <I2C_IsAcknowledgeFailed>
 8002388:	4603      	mov	r3, r0
 800238a:	2b00      	cmp	r3, #0
 800238c:	d001      	beq.n	8002392 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800238e:	2301      	movs	r3, #1
 8002390:	e053      	b.n	800243a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	699b      	ldr	r3, [r3, #24]
 8002398:	f003 0320 	and.w	r3, r3, #32
 800239c:	2b20      	cmp	r3, #32
 800239e:	d129      	bne.n	80023f4 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	699b      	ldr	r3, [r3, #24]
 80023a6:	f003 0304 	and.w	r3, r3, #4
 80023aa:	2b04      	cmp	r3, #4
 80023ac:	d105      	bne.n	80023ba <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d001      	beq.n	80023ba <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80023b6:	2300      	movs	r3, #0
 80023b8:	e03f      	b.n	800243a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	2220      	movs	r2, #32
 80023c0:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	6859      	ldr	r1, [r3, #4]
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	681a      	ldr	r2, [r3, #0]
 80023cc:	4b1d      	ldr	r3, [pc, #116]	; (8002444 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 80023ce:	400b      	ands	r3, r1
 80023d0:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	2200      	movs	r2, #0
 80023d6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	2220      	movs	r2, #32
 80023dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	2200      	movs	r2, #0
 80023e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	2200      	movs	r2, #0
 80023ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80023f0:	2301      	movs	r3, #1
 80023f2:	e022      	b.n	800243a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80023f4:	f7ff f944 	bl	8001680 <HAL_GetTick>
 80023f8:	4602      	mov	r2, r0
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	1ad3      	subs	r3, r2, r3
 80023fe:	68ba      	ldr	r2, [r7, #8]
 8002400:	429a      	cmp	r2, r3
 8002402:	d302      	bcc.n	800240a <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 8002404:	68bb      	ldr	r3, [r7, #8]
 8002406:	2b00      	cmp	r3, #0
 8002408:	d10f      	bne.n	800242a <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800240e:	f043 0220 	orr.w	r2, r3, #32
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	2220      	movs	r2, #32
 800241a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	2200      	movs	r2, #0
 8002422:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002426:	2301      	movs	r3, #1
 8002428:	e007      	b.n	800243a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	699b      	ldr	r3, [r3, #24]
 8002430:	f003 0304 	and.w	r3, r3, #4
 8002434:	2b04      	cmp	r3, #4
 8002436:	d1a2      	bne.n	800237e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002438:	2300      	movs	r3, #0
}
 800243a:	4618      	mov	r0, r3
 800243c:	3710      	adds	r7, #16
 800243e:	46bd      	mov	sp, r7
 8002440:	bd80      	pop	{r7, pc}
 8002442:	bf00      	nop
 8002444:	fe00e800 	.word	0xfe00e800

08002448 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b084      	sub	sp, #16
 800244c:	af00      	add	r7, sp, #0
 800244e:	60f8      	str	r0, [r7, #12]
 8002450:	60b9      	str	r1, [r7, #8]
 8002452:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	699b      	ldr	r3, [r3, #24]
 800245a:	f003 0310 	and.w	r3, r3, #16
 800245e:	2b10      	cmp	r3, #16
 8002460:	d151      	bne.n	8002506 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002462:	e022      	b.n	80024aa <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002464:	68bb      	ldr	r3, [r7, #8]
 8002466:	f1b3 3fff 	cmp.w	r3, #4294967295
 800246a:	d01e      	beq.n	80024aa <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800246c:	f7ff f908 	bl	8001680 <HAL_GetTick>
 8002470:	4602      	mov	r2, r0
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	1ad3      	subs	r3, r2, r3
 8002476:	68ba      	ldr	r2, [r7, #8]
 8002478:	429a      	cmp	r2, r3
 800247a:	d302      	bcc.n	8002482 <I2C_IsAcknowledgeFailed+0x3a>
 800247c:	68bb      	ldr	r3, [r7, #8]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d113      	bne.n	80024aa <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002486:	f043 0220 	orr.w	r2, r3, #32
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	2220      	movs	r2, #32
 8002492:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	2200      	movs	r2, #0
 800249a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	2200      	movs	r2, #0
 80024a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80024a6:	2301      	movs	r3, #1
 80024a8:	e02e      	b.n	8002508 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	699b      	ldr	r3, [r3, #24]
 80024b0:	f003 0320 	and.w	r3, r3, #32
 80024b4:	2b20      	cmp	r3, #32
 80024b6:	d1d5      	bne.n	8002464 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	2210      	movs	r2, #16
 80024be:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	2220      	movs	r2, #32
 80024c6:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80024c8:	68f8      	ldr	r0, [r7, #12]
 80024ca:	f7ff fe71 	bl	80021b0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	6859      	ldr	r1, [r3, #4]
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	681a      	ldr	r2, [r3, #0]
 80024d8:	4b0d      	ldr	r3, [pc, #52]	; (8002510 <I2C_IsAcknowledgeFailed+0xc8>)
 80024da:	400b      	ands	r3, r1
 80024dc:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024e2:	f043 0204 	orr.w	r2, r3, #4
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	2220      	movs	r2, #32
 80024ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	2200      	movs	r2, #0
 80024f6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	2200      	movs	r2, #0
 80024fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8002502:	2301      	movs	r3, #1
 8002504:	e000      	b.n	8002508 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8002506:	2300      	movs	r3, #0
}
 8002508:	4618      	mov	r0, r3
 800250a:	3710      	adds	r7, #16
 800250c:	46bd      	mov	sp, r7
 800250e:	bd80      	pop	{r7, pc}
 8002510:	fe00e800 	.word	0xfe00e800

08002514 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002514:	b480      	push	{r7}
 8002516:	b083      	sub	sp, #12
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
 800251c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002524:	b2db      	uxtb	r3, r3
 8002526:	2b20      	cmp	r3, #32
 8002528:	d138      	bne.n	800259c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002530:	2b01      	cmp	r3, #1
 8002532:	d101      	bne.n	8002538 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002534:	2302      	movs	r3, #2
 8002536:	e032      	b.n	800259e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2201      	movs	r2, #1
 800253c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2224      	movs	r2, #36	; 0x24
 8002544:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	681a      	ldr	r2, [r3, #0]
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f022 0201 	bic.w	r2, r2, #1
 8002556:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	681a      	ldr	r2, [r3, #0]
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002566:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	6819      	ldr	r1, [r3, #0]
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	683a      	ldr	r2, [r7, #0]
 8002574:	430a      	orrs	r2, r1
 8002576:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	681a      	ldr	r2, [r3, #0]
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f042 0201 	orr.w	r2, r2, #1
 8002586:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2220      	movs	r2, #32
 800258c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2200      	movs	r2, #0
 8002594:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002598:	2300      	movs	r3, #0
 800259a:	e000      	b.n	800259e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800259c:	2302      	movs	r3, #2
  }
}
 800259e:	4618      	mov	r0, r3
 80025a0:	370c      	adds	r7, #12
 80025a2:	46bd      	mov	sp, r7
 80025a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a8:	4770      	bx	lr

080025aa <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80025aa:	b480      	push	{r7}
 80025ac:	b085      	sub	sp, #20
 80025ae:	af00      	add	r7, sp, #0
 80025b0:	6078      	str	r0, [r7, #4]
 80025b2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80025ba:	b2db      	uxtb	r3, r3
 80025bc:	2b20      	cmp	r3, #32
 80025be:	d139      	bne.n	8002634 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80025c6:	2b01      	cmp	r3, #1
 80025c8:	d101      	bne.n	80025ce <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80025ca:	2302      	movs	r3, #2
 80025cc:	e033      	b.n	8002636 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	2201      	movs	r2, #1
 80025d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	2224      	movs	r2, #36	; 0x24
 80025da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	681a      	ldr	r2, [r3, #0]
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f022 0201 	bic.w	r2, r2, #1
 80025ec:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80025fc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	021b      	lsls	r3, r3, #8
 8002602:	68fa      	ldr	r2, [r7, #12]
 8002604:	4313      	orrs	r3, r2
 8002606:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	68fa      	ldr	r2, [r7, #12]
 800260e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	681a      	ldr	r2, [r3, #0]
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f042 0201 	orr.w	r2, r2, #1
 800261e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2220      	movs	r2, #32
 8002624:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2200      	movs	r2, #0
 800262c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002630:	2300      	movs	r3, #0
 8002632:	e000      	b.n	8002636 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002634:	2302      	movs	r3, #2
  }
}
 8002636:	4618      	mov	r0, r3
 8002638:	3714      	adds	r7, #20
 800263a:	46bd      	mov	sp, r7
 800263c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002640:	4770      	bx	lr
	...

08002644 <HAL_JPEG_Init>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_JPEG_Init(JPEG_HandleTypeDef *hjpeg)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b082      	sub	sp, #8
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
    99,  99,  99,  99,  99,  99,  99,  99,
    99,  99,  99,  99,  99,  99,  99,  99
  };

  /* Check the JPEG handle allocation */
  if (hjpeg == NULL)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2b00      	cmp	r3, #0
 8002650:	d101      	bne.n	8002656 <HAL_JPEG_Init+0x12>
  {
    return HAL_ERROR;
 8002652:	2301      	movs	r3, #1
 8002654:	e070      	b.n	8002738 <HAL_JPEG_Init+0xf4>

    /* Init the low level hardware */
    hjpeg->MspInitCallback(hjpeg);
  }
#else
  if (hjpeg->State == HAL_JPEG_STATE_RESET)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800265c:	b2db      	uxtb	r3, r3
 800265e:	2b00      	cmp	r3, #0
 8002660:	d106      	bne.n	8002670 <HAL_JPEG_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hjpeg->Lock = HAL_UNLOCKED;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	2200      	movs	r2, #0
 8002666:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

    /* Init the low level hardware : GPIO, CLOCK */
    HAL_JPEG_MspInit(hjpeg);
 800266a:	6878      	ldr	r0, [r7, #4]
 800266c:	f7fe fd54 	bl	8001118 <HAL_JPEG_MspInit>
  }
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

  /* Change the JPEG state */
  hjpeg->State = HAL_JPEG_STATE_BUSY;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2202      	movs	r2, #2
 8002674:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

  /* Start the JPEG Core*/
  __HAL_JPEG_ENABLE(hjpeg);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f042 0201 	orr.w	r2, r2, #1
 8002686:	631a      	str	r2, [r3, #48]	; 0x30

  /* Stop the JPEG encoding/decoding process*/
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	681a      	ldr	r2, [r3, #0]
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f022 0201 	bic.w	r2, r2, #1
 8002696:	601a      	str	r2, [r3, #0]

  /* Disable All Interrupts */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f022 027e 	bic.w	r2, r2, #126	; 0x7e
 80026a6:	631a      	str	r2, [r3, #48]	; 0x30


  /* Flush input and output FIFOs*/
  hjpeg->Instance->CR |= JPEG_CR_IFF;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80026b6:	631a      	str	r2, [r3, #48]	; 0x30
  hjpeg->Instance->CR |= JPEG_CR_OFF;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80026c6:	631a      	str	r2, [r3, #48]	; 0x30

  /* Clear all flags */
  __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 80026d6:	639a      	str	r2, [r3, #56]	; 0x38

  /* init default quantization tables*/
  hjpeg->QuantTable0 = (uint8_t *)((uint32_t)JPEG_LUM_QuantTable);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	4a19      	ldr	r2, [pc, #100]	; (8002740 <HAL_JPEG_Init+0xfc>)
 80026dc:	63da      	str	r2, [r3, #60]	; 0x3c
  hjpeg->QuantTable1 = (uint8_t *)((uint32_t)JPEG_CHROM_QuantTable);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	4a18      	ldr	r2, [pc, #96]	; (8002744 <HAL_JPEG_Init+0x100>)
 80026e2:	641a      	str	r2, [r3, #64]	; 0x40
  hjpeg->QuantTable2 = NULL;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2200      	movs	r2, #0
 80026e8:	645a      	str	r2, [r3, #68]	; 0x44
  hjpeg->QuantTable3 = NULL;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2200      	movs	r2, #0
 80026ee:	649a      	str	r2, [r3, #72]	; 0x48

  /* init the default Huffman tables*/
  if (JPEG_Set_HuffEnc_Mem(hjpeg) != HAL_OK)
 80026f0:	6878      	ldr	r0, [r7, #4]
 80026f2:	f000 fae9 	bl	8002cc8 <JPEG_Set_HuffEnc_Mem>
 80026f6:	4603      	mov	r3, r0
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d004      	beq.n	8002706 <HAL_JPEG_Init+0xc2>
  {
    hjpeg->ErrorCode = HAL_JPEG_ERROR_HUFF_TABLE;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2201      	movs	r2, #1
 8002700:	651a      	str	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8002702:	2301      	movs	r3, #1
 8002704:	e018      	b.n	8002738 <HAL_JPEG_Init+0xf4>
  }

  /* Enable header processing*/
  hjpeg->Instance->CONFR1 |= JPEG_CONFR1_HDR;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	685a      	ldr	r2, [r3, #4]
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002714:	605a      	str	r2, [r3, #4]

  /* Reset JpegInCount and JpegOutCount */
  hjpeg->JpegInCount = 0;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	2200      	movs	r2, #0
 800271a:	621a      	str	r2, [r3, #32]
  hjpeg->JpegOutCount = 0;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2200      	movs	r2, #0
 8002720:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change the JPEG state */
  hjpeg->State = HAL_JPEG_STATE_READY;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	2201      	movs	r2, #1
 8002726:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

  /* Reset the JPEG ErrorCode */
  hjpeg->ErrorCode = HAL_JPEG_ERROR_NONE;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	2200      	movs	r2, #0
 800272e:	651a      	str	r2, [r3, #80]	; 0x50

  /*Clear the context filelds*/
  hjpeg->Context = 0;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2200      	movs	r2, #0
 8002734:	655a      	str	r2, [r3, #84]	; 0x54

  /* Return function status */
  return HAL_OK;
 8002736:	2300      	movs	r3, #0
}
 8002738:	4618      	mov	r0, r3
 800273a:	3708      	adds	r7, #8
 800273c:	46bd      	mov	sp, r7
 800273e:	bd80      	pop	{r7, pc}
 8002740:	0800c21c 	.word	0x0800c21c
 8002744:	0800c25c 	.word	0x0800c25c

08002748 <JPEG_Bits_To_SizeCodes>:
  * @param  Huffcode pointer to codes table
  * @param  LastK pointer to last Coeff (table dimmension)
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Bits_To_SizeCodes(uint8_t *Bits, uint8_t *Huffsize, uint32_t *Huffcode, uint32_t *LastK)
{
 8002748:	b480      	push	{r7}
 800274a:	b08b      	sub	sp, #44	; 0x2c
 800274c:	af00      	add	r7, sp, #0
 800274e:	60f8      	str	r0, [r7, #12]
 8002750:	60b9      	str	r1, [r7, #8]
 8002752:	607a      	str	r2, [r7, #4]
 8002754:	603b      	str	r3, [r7, #0]
  uint32_t i, p, l, code, si;

  /* Figure C.1: Generation of table of Huffman code sizes */
  p = 0;
 8002756:	2300      	movs	r3, #0
 8002758:	623b      	str	r3, [r7, #32]
  for (l = 0; l < 16UL; l++)
 800275a:	2300      	movs	r3, #0
 800275c:	61fb      	str	r3, [r7, #28]
 800275e:	e020      	b.n	80027a2 <JPEG_Bits_To_SizeCodes+0x5a>
  {
    i = (uint32_t)Bits[l];
 8002760:	68fa      	ldr	r2, [r7, #12]
 8002762:	69fb      	ldr	r3, [r7, #28]
 8002764:	4413      	add	r3, r2
 8002766:	781b      	ldrb	r3, [r3, #0]
 8002768:	627b      	str	r3, [r7, #36]	; 0x24
    if ((p + i) > 256UL)
 800276a:	6a3a      	ldr	r2, [r7, #32]
 800276c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800276e:	4413      	add	r3, r2
 8002770:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002774:	d90f      	bls.n	8002796 <JPEG_Bits_To_SizeCodes+0x4e>
    {
      /* check for table overflow */
      return HAL_ERROR;
 8002776:	2301      	movs	r3, #1
 8002778:	e055      	b.n	8002826 <JPEG_Bits_To_SizeCodes+0xde>
    }
    while (i != 0UL)
    {
      Huffsize[p] = (uint8_t) l + 1U;
 800277a:	69fb      	ldr	r3, [r7, #28]
 800277c:	b2da      	uxtb	r2, r3
 800277e:	68b9      	ldr	r1, [r7, #8]
 8002780:	6a3b      	ldr	r3, [r7, #32]
 8002782:	440b      	add	r3, r1
 8002784:	3201      	adds	r2, #1
 8002786:	b2d2      	uxtb	r2, r2
 8002788:	701a      	strb	r2, [r3, #0]
      p++;
 800278a:	6a3b      	ldr	r3, [r7, #32]
 800278c:	3301      	adds	r3, #1
 800278e:	623b      	str	r3, [r7, #32]
      i--;
 8002790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002792:	3b01      	subs	r3, #1
 8002794:	627b      	str	r3, [r7, #36]	; 0x24
    while (i != 0UL)
 8002796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002798:	2b00      	cmp	r3, #0
 800279a:	d1ee      	bne.n	800277a <JPEG_Bits_To_SizeCodes+0x32>
  for (l = 0; l < 16UL; l++)
 800279c:	69fb      	ldr	r3, [r7, #28]
 800279e:	3301      	adds	r3, #1
 80027a0:	61fb      	str	r3, [r7, #28]
 80027a2:	69fb      	ldr	r3, [r7, #28]
 80027a4:	2b0f      	cmp	r3, #15
 80027a6:	d9db      	bls.n	8002760 <JPEG_Bits_To_SizeCodes+0x18>
    }
  }
  Huffsize[p] = 0;
 80027a8:	68ba      	ldr	r2, [r7, #8]
 80027aa:	6a3b      	ldr	r3, [r7, #32]
 80027ac:	4413      	add	r3, r2
 80027ae:	2200      	movs	r2, #0
 80027b0:	701a      	strb	r2, [r3, #0]
  *LastK = p;
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	6a3a      	ldr	r2, [r7, #32]
 80027b6:	601a      	str	r2, [r3, #0]

  /* Figure C.2: Generation of table of Huffman codes */
  code = 0;
 80027b8:	2300      	movs	r3, #0
 80027ba:	61bb      	str	r3, [r7, #24]
  si = Huffsize[0];
 80027bc:	68bb      	ldr	r3, [r7, #8]
 80027be:	781b      	ldrb	r3, [r3, #0]
 80027c0:	617b      	str	r3, [r7, #20]
  p = 0;
 80027c2:	2300      	movs	r3, #0
 80027c4:	623b      	str	r3, [r7, #32]
  while (Huffsize[p] != 0U)
 80027c6:	e027      	b.n	8002818 <JPEG_Bits_To_SizeCodes+0xd0>
  {
    while (((uint32_t) Huffsize[p]) == si)
    {
      Huffcode[p] = code;
 80027c8:	6a3b      	ldr	r3, [r7, #32]
 80027ca:	009b      	lsls	r3, r3, #2
 80027cc:	687a      	ldr	r2, [r7, #4]
 80027ce:	4413      	add	r3, r2
 80027d0:	69ba      	ldr	r2, [r7, #24]
 80027d2:	601a      	str	r2, [r3, #0]
      p++;
 80027d4:	6a3b      	ldr	r3, [r7, #32]
 80027d6:	3301      	adds	r3, #1
 80027d8:	623b      	str	r3, [r7, #32]
      code++;
 80027da:	69bb      	ldr	r3, [r7, #24]
 80027dc:	3301      	adds	r3, #1
 80027de:	61bb      	str	r3, [r7, #24]
    while (((uint32_t) Huffsize[p]) == si)
 80027e0:	68ba      	ldr	r2, [r7, #8]
 80027e2:	6a3b      	ldr	r3, [r7, #32]
 80027e4:	4413      	add	r3, r2
 80027e6:	781b      	ldrb	r3, [r3, #0]
 80027e8:	461a      	mov	r2, r3
 80027ea:	697b      	ldr	r3, [r7, #20]
 80027ec:	4293      	cmp	r3, r2
 80027ee:	d0eb      	beq.n	80027c8 <JPEG_Bits_To_SizeCodes+0x80>
    }
    /* code must fit in "size" bits (si), no code is allowed to be all ones*/
    if(si > 31UL)
 80027f0:	697b      	ldr	r3, [r7, #20]
 80027f2:	2b1f      	cmp	r3, #31
 80027f4:	d901      	bls.n	80027fa <JPEG_Bits_To_SizeCodes+0xb2>
    {
      return HAL_ERROR;
 80027f6:	2301      	movs	r3, #1
 80027f8:	e015      	b.n	8002826 <JPEG_Bits_To_SizeCodes+0xde>
    }
    if (((uint32_t) code) >= (((uint32_t) 1) << si))
 80027fa:	2201      	movs	r2, #1
 80027fc:	697b      	ldr	r3, [r7, #20]
 80027fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002802:	69ba      	ldr	r2, [r7, #24]
 8002804:	429a      	cmp	r2, r3
 8002806:	d301      	bcc.n	800280c <JPEG_Bits_To_SizeCodes+0xc4>
    {
      return HAL_ERROR;
 8002808:	2301      	movs	r3, #1
 800280a:	e00c      	b.n	8002826 <JPEG_Bits_To_SizeCodes+0xde>
    }
    code <<= 1;
 800280c:	69bb      	ldr	r3, [r7, #24]
 800280e:	005b      	lsls	r3, r3, #1
 8002810:	61bb      	str	r3, [r7, #24]
    si++;
 8002812:	697b      	ldr	r3, [r7, #20]
 8002814:	3301      	adds	r3, #1
 8002816:	617b      	str	r3, [r7, #20]
  while (Huffsize[p] != 0U)
 8002818:	68ba      	ldr	r2, [r7, #8]
 800281a:	6a3b      	ldr	r3, [r7, #32]
 800281c:	4413      	add	r3, r2
 800281e:	781b      	ldrb	r3, [r3, #0]
 8002820:	2b00      	cmp	r3, #0
 8002822:	d1dd      	bne.n	80027e0 <JPEG_Bits_To_SizeCodes+0x98>
  }
  /* Return function status */
  return HAL_OK;
 8002824:	2300      	movs	r3, #0
}
 8002826:	4618      	mov	r0, r3
 8002828:	372c      	adds	r7, #44	; 0x2c
 800282a:	46bd      	mov	sp, r7
 800282c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002830:	4770      	bx	lr

08002832 <JPEG_ACHuff_BitsVals_To_SizeCodes>:
  * @param  AC_SizeCodesTable pointer to AC huffman Sizes/Codes table
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_ACHuff_BitsVals_To_SizeCodes(JPEG_ACHuffTableTypeDef *AC_BitsValsTable,
                                                           JPEG_AC_HuffCodeTableTypeDef *AC_SizeCodesTable)
{
 8002832:	b580      	push	{r7, lr}
 8002834:	f5ad 6da5 	sub.w	sp, sp, #1320	; 0x528
 8002838:	af00      	add	r7, sp, #0
 800283a:	1d3b      	adds	r3, r7, #4
 800283c:	6018      	str	r0, [r3, #0]
 800283e:	463b      	mov	r3, r7
 8002840:	6019      	str	r1, [r3, #0]
  uint32_t huffcode[257];
  uint32_t k;
  uint32_t l, lsb, msb;
  uint32_t lastK;

  error = JPEG_Bits_To_SizeCodes(AC_BitsValsTable->Bits, huffsize, huffcode, &lastK);
 8002842:	1d3b      	adds	r3, r7, #4
 8002844:	6818      	ldr	r0, [r3, #0]
 8002846:	f107 0308 	add.w	r3, r7, #8
 800284a:	f107 020c 	add.w	r2, r7, #12
 800284e:	f507 6182 	add.w	r1, r7, #1040	; 0x410
 8002852:	f7ff ff79 	bl	8002748 <JPEG_Bits_To_SizeCodes>
 8002856:	4603      	mov	r3, r0
 8002858:	f887 351f 	strb.w	r3, [r7, #1311]	; 0x51f
  if (error != HAL_OK)
 800285c:	f897 351f 	ldrb.w	r3, [r7, #1311]	; 0x51f
 8002860:	2b00      	cmp	r3, #0
 8002862:	d002      	beq.n	800286a <JPEG_ACHuff_BitsVals_To_SizeCodes+0x38>
  {
    return  error;
 8002864:	f897 351f 	ldrb.w	r3, [r7, #1311]	; 0x51f
 8002868:	e066      	b.n	8002938 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x106>
  }

  /* Figure C.3: Ordering procedure for encoding procedure code tables */
  k = 0;
 800286a:	2300      	movs	r3, #0
 800286c:	f8c7 3524 	str.w	r3, [r7, #1316]	; 0x524

  while (k < lastK)
 8002870:	e05a      	b.n	8002928 <JPEG_ACHuff_BitsVals_To_SizeCodes+0xf6>
  {
    l = AC_BitsValsTable->HuffVal[k];
 8002872:	1d3b      	adds	r3, r7, #4
 8002874:	681a      	ldr	r2, [r3, #0]
 8002876:	f8d7 3524 	ldr.w	r3, [r7, #1316]	; 0x524
 800287a:	4413      	add	r3, r2
 800287c:	3310      	adds	r3, #16
 800287e:	781b      	ldrb	r3, [r3, #0]
 8002880:	f8c7 3520 	str.w	r3, [r7, #1312]	; 0x520
    if (l == 0UL)
 8002884:	f8d7 3520 	ldr.w	r3, [r7, #1312]	; 0x520
 8002888:	2b00      	cmp	r3, #0
 800288a:	d103      	bne.n	8002894 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x62>
    {
      l = 160; /*l = 0x00 EOB code*/
 800288c:	23a0      	movs	r3, #160	; 0xa0
 800288e:	f8c7 3520 	str.w	r3, [r7, #1312]	; 0x520
 8002892:	e021      	b.n	80028d8 <JPEG_ACHuff_BitsVals_To_SizeCodes+0xa6>
    }
    else if (l == 0xF0UL) /* l = 0xF0 ZRL code*/
 8002894:	f8d7 3520 	ldr.w	r3, [r7, #1312]	; 0x520
 8002898:	2bf0      	cmp	r3, #240	; 0xf0
 800289a:	d103      	bne.n	80028a4 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x72>
    {
      l = 161;
 800289c:	23a1      	movs	r3, #161	; 0xa1
 800289e:	f8c7 3520 	str.w	r3, [r7, #1312]	; 0x520
 80028a2:	e019      	b.n	80028d8 <JPEG_ACHuff_BitsVals_To_SizeCodes+0xa6>
    }
    else
    {
      msb = (l & 0xF0UL) >> 4;
 80028a4:	f8d7 3520 	ldr.w	r3, [r7, #1312]	; 0x520
 80028a8:	091b      	lsrs	r3, r3, #4
 80028aa:	f003 030f 	and.w	r3, r3, #15
 80028ae:	f8c7 3518 	str.w	r3, [r7, #1304]	; 0x518
      lsb = (l & 0x0FUL);
 80028b2:	f8d7 3520 	ldr.w	r3, [r7, #1312]	; 0x520
 80028b6:	f003 030f 	and.w	r3, r3, #15
 80028ba:	f8c7 3514 	str.w	r3, [r7, #1300]	; 0x514
      l = (msb * 10UL) + lsb - 1UL;
 80028be:	f8d7 2518 	ldr.w	r2, [r7, #1304]	; 0x518
 80028c2:	4613      	mov	r3, r2
 80028c4:	009b      	lsls	r3, r3, #2
 80028c6:	4413      	add	r3, r2
 80028c8:	005b      	lsls	r3, r3, #1
 80028ca:	461a      	mov	r2, r3
 80028cc:	f8d7 3514 	ldr.w	r3, [r7, #1300]	; 0x514
 80028d0:	4413      	add	r3, r2
 80028d2:	3b01      	subs	r3, #1
 80028d4:	f8c7 3520 	str.w	r3, [r7, #1312]	; 0x520
    }
    if (l >= JPEG_AC_HUFF_TABLE_SIZE)
 80028d8:	f8d7 3520 	ldr.w	r3, [r7, #1312]	; 0x520
 80028dc:	2ba1      	cmp	r3, #161	; 0xa1
 80028de:	d901      	bls.n	80028e4 <JPEG_ACHuff_BitsVals_To_SizeCodes+0xb2>
    {
      return HAL_ERROR; /* Huffman Table overflow error*/
 80028e0:	2301      	movs	r3, #1
 80028e2:	e029      	b.n	8002938 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x106>
    }
    else
    {
      AC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
 80028e4:	f107 030c 	add.w	r3, r7, #12
 80028e8:	f8d7 2524 	ldr.w	r2, [r7, #1316]	; 0x524
 80028ec:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80028f0:	463b      	mov	r3, r7
 80028f2:	6819      	ldr	r1, [r3, #0]
 80028f4:	f8d7 3520 	ldr.w	r3, [r7, #1312]	; 0x520
 80028f8:	3328      	adds	r3, #40	; 0x28
 80028fa:	009b      	lsls	r3, r3, #2
 80028fc:	440b      	add	r3, r1
 80028fe:	605a      	str	r2, [r3, #4]
      AC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
 8002900:	f507 6282 	add.w	r2, r7, #1040	; 0x410
 8002904:	f8d7 3524 	ldr.w	r3, [r7, #1316]	; 0x524
 8002908:	4413      	add	r3, r2
 800290a:	781b      	ldrb	r3, [r3, #0]
 800290c:	3b01      	subs	r3, #1
 800290e:	b2d9      	uxtb	r1, r3
 8002910:	463b      	mov	r3, r7
 8002912:	681a      	ldr	r2, [r3, #0]
 8002914:	f8d7 3520 	ldr.w	r3, [r7, #1312]	; 0x520
 8002918:	4413      	add	r3, r2
 800291a:	460a      	mov	r2, r1
 800291c:	701a      	strb	r2, [r3, #0]
      k++;
 800291e:	f8d7 3524 	ldr.w	r3, [r7, #1316]	; 0x524
 8002922:	3301      	adds	r3, #1
 8002924:	f8c7 3524 	str.w	r3, [r7, #1316]	; 0x524
  while (k < lastK)
 8002928:	f107 0308 	add.w	r3, r7, #8
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f8d7 2524 	ldr.w	r2, [r7, #1316]	; 0x524
 8002932:	429a      	cmp	r2, r3
 8002934:	d39d      	bcc.n	8002872 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x40>
    }
  }

  /* Return function status */
  return HAL_OK;
 8002936:	2300      	movs	r3, #0
}
 8002938:	4618      	mov	r0, r3
 800293a:	f507 67a5 	add.w	r7, r7, #1320	; 0x528
 800293e:	46bd      	mov	sp, r7
 8002940:	bd80      	pop	{r7, pc}

08002942 <JPEG_DCHuff_BitsVals_To_SizeCodes>:
  * @param  DC_SizeCodesTable pointer to DC huffman Sizes/Codes table
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_DCHuff_BitsVals_To_SizeCodes(JPEG_DCHuffTableTypeDef *DC_BitsValsTable,
                                                           JPEG_DC_HuffCodeTableTypeDef *DC_SizeCodesTable)
{
 8002942:	b580      	push	{r7, lr}
 8002944:	f5ad 6da4 	sub.w	sp, sp, #1312	; 0x520
 8002948:	af00      	add	r7, sp, #0
 800294a:	1d3b      	adds	r3, r7, #4
 800294c:	6018      	str	r0, [r3, #0]
 800294e:	463b      	mov	r3, r7
 8002950:	6019      	str	r1, [r3, #0]
  uint32_t k;
  uint32_t l;
  uint32_t lastK;
  uint8_t huffsize[257];
  uint32_t huffcode[257];
  error = JPEG_Bits_To_SizeCodes(DC_BitsValsTable->Bits, huffsize, huffcode, &lastK);
 8002952:	1d3b      	adds	r3, r7, #4
 8002954:	6818      	ldr	r0, [r3, #0]
 8002956:	f507 63a2 	add.w	r3, r7, #1296	; 0x510
 800295a:	f107 0208 	add.w	r2, r7, #8
 800295e:	f207 410c 	addw	r1, r7, #1036	; 0x40c
 8002962:	f7ff fef1 	bl	8002748 <JPEG_Bits_To_SizeCodes>
 8002966:	4603      	mov	r3, r0
 8002968:	f887 351b 	strb.w	r3, [r7, #1307]	; 0x51b
  if (error != HAL_OK)
 800296c:	f897 351b 	ldrb.w	r3, [r7, #1307]	; 0x51b
 8002970:	2b00      	cmp	r3, #0
 8002972:	d002      	beq.n	800297a <JPEG_DCHuff_BitsVals_To_SizeCodes+0x38>
  {
    return  error;
 8002974:	f897 351b 	ldrb.w	r3, [r7, #1307]	; 0x51b
 8002978:	e03b      	b.n	80029f2 <JPEG_DCHuff_BitsVals_To_SizeCodes+0xb0>
  }
  /* Figure C.3: ordering procedure for encoding procedure code tables */
  k = 0;
 800297a:	2300      	movs	r3, #0
 800297c:	f8c7 351c 	str.w	r3, [r7, #1308]	; 0x51c

  while (k < lastK)
 8002980:	e030      	b.n	80029e4 <JPEG_DCHuff_BitsVals_To_SizeCodes+0xa2>
  {
    l = DC_BitsValsTable->HuffVal[k];
 8002982:	1d3b      	adds	r3, r7, #4
 8002984:	681a      	ldr	r2, [r3, #0]
 8002986:	f8d7 351c 	ldr.w	r3, [r7, #1308]	; 0x51c
 800298a:	4413      	add	r3, r2
 800298c:	3310      	adds	r3, #16
 800298e:	781b      	ldrb	r3, [r3, #0]
 8002990:	f8c7 3514 	str.w	r3, [r7, #1300]	; 0x514
    if (l >= JPEG_DC_HUFF_TABLE_SIZE)
 8002994:	f8d7 3514 	ldr.w	r3, [r7, #1300]	; 0x514
 8002998:	2b0b      	cmp	r3, #11
 800299a:	d901      	bls.n	80029a0 <JPEG_DCHuff_BitsVals_To_SizeCodes+0x5e>
    {
      return HAL_ERROR; /* Huffman Table overflow error*/
 800299c:	2301      	movs	r3, #1
 800299e:	e028      	b.n	80029f2 <JPEG_DCHuff_BitsVals_To_SizeCodes+0xb0>
    }
    else
    {
      DC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
 80029a0:	f107 0308 	add.w	r3, r7, #8
 80029a4:	f8d7 251c 	ldr.w	r2, [r7, #1308]	; 0x51c
 80029a8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80029ac:	463b      	mov	r3, r7
 80029ae:	6819      	ldr	r1, [r3, #0]
 80029b0:	f8d7 3514 	ldr.w	r3, [r7, #1300]	; 0x514
 80029b4:	3302      	adds	r3, #2
 80029b6:	009b      	lsls	r3, r3, #2
 80029b8:	440b      	add	r3, r1
 80029ba:	605a      	str	r2, [r3, #4]
      DC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
 80029bc:	f207 420c 	addw	r2, r7, #1036	; 0x40c
 80029c0:	f8d7 351c 	ldr.w	r3, [r7, #1308]	; 0x51c
 80029c4:	4413      	add	r3, r2
 80029c6:	781b      	ldrb	r3, [r3, #0]
 80029c8:	3b01      	subs	r3, #1
 80029ca:	b2d9      	uxtb	r1, r3
 80029cc:	463b      	mov	r3, r7
 80029ce:	681a      	ldr	r2, [r3, #0]
 80029d0:	f8d7 3514 	ldr.w	r3, [r7, #1300]	; 0x514
 80029d4:	4413      	add	r3, r2
 80029d6:	460a      	mov	r2, r1
 80029d8:	701a      	strb	r2, [r3, #0]
      k++;
 80029da:	f8d7 351c 	ldr.w	r3, [r7, #1308]	; 0x51c
 80029de:	3301      	adds	r3, #1
 80029e0:	f8c7 351c 	str.w	r3, [r7, #1308]	; 0x51c
  while (k < lastK)
 80029e4:	f8d7 3510 	ldr.w	r3, [r7, #1296]	; 0x510
 80029e8:	f8d7 251c 	ldr.w	r2, [r7, #1308]	; 0x51c
 80029ec:	429a      	cmp	r2, r3
 80029ee:	d3c8      	bcc.n	8002982 <JPEG_DCHuff_BitsVals_To_SizeCodes+0x40>
    }
  }

  /* Return function status */
  return HAL_OK;
 80029f0:	2300      	movs	r3, #0
}
 80029f2:	4618      	mov	r0, r3
 80029f4:	f507 67a4 	add.w	r7, r7, #1312	; 0x520
 80029f8:	46bd      	mov	sp, r7
 80029fa:	bd80      	pop	{r7, pc}

080029fc <JPEG_Set_HuffDC_Mem>:
  * @param  DCTableAddress Encoder DC huffman table address it could be HUFFENC_DC0 or HUFFENC_DC1.
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Set_HuffDC_Mem(JPEG_HandleTypeDef *hjpeg, JPEG_DCHuffTableTypeDef *HuffTableDC,
                                             const __IO uint32_t *DCTableAddress)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b09a      	sub	sp, #104	; 0x68
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	60f8      	str	r0, [r7, #12]
 8002a04:	60b9      	str	r1, [r7, #8]
 8002a06:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef error;
  JPEG_DC_HuffCodeTableTypeDef dcSizeCodesTable;
  uint32_t i, lsb, msb;
  __IO uint32_t *address, *addressDef;

  if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC0))
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f503 63f8 	add.w	r3, r3, #1984	; 0x7c0
 8002a10:	687a      	ldr	r2, [r7, #4]
 8002a12:	429a      	cmp	r2, r3
 8002a14:	d106      	bne.n	8002a24 <JPEG_Set_HuffDC_Mem+0x28>
  {
    address = (hjpeg->Instance->HUFFENC_DC0 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f503 63f8 	add.w	r3, r3, #1984	; 0x7c0
 8002a1e:	3318      	adds	r3, #24
 8002a20:	663b      	str	r3, [r7, #96]	; 0x60
 8002a22:	e00f      	b.n	8002a44 <JPEG_Set_HuffDC_Mem+0x48>
  }
  else if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC1))
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f503 63fc 	add.w	r3, r3, #2016	; 0x7e0
 8002a2c:	687a      	ldr	r2, [r7, #4]
 8002a2e:	429a      	cmp	r2, r3
 8002a30:	d106      	bne.n	8002a40 <JPEG_Set_HuffDC_Mem+0x44>
  {
    address = (hjpeg->Instance->HUFFENC_DC1 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f503 63fc 	add.w	r3, r3, #2016	; 0x7e0
 8002a3a:	3318      	adds	r3, #24
 8002a3c:	663b      	str	r3, [r7, #96]	; 0x60
 8002a3e:	e001      	b.n	8002a44 <JPEG_Set_HuffDC_Mem+0x48>
  }
  else
  {
    return HAL_ERROR;
 8002a40:	2301      	movs	r3, #1
 8002a42:	e05b      	b.n	8002afc <JPEG_Set_HuffDC_Mem+0x100>
  }

  if (HuffTableDC != NULL)
 8002a44:	68bb      	ldr	r3, [r7, #8]
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d057      	beq.n	8002afa <JPEG_Set_HuffDC_Mem+0xfe>
  {
    error = JPEG_DCHuff_BitsVals_To_SizeCodes(HuffTableDC, &dcSizeCodesTable);
 8002a4a:	f107 0314 	add.w	r3, r7, #20
 8002a4e:	4619      	mov	r1, r3
 8002a50:	68b8      	ldr	r0, [r7, #8]
 8002a52:	f7ff ff76 	bl	8002942 <JPEG_DCHuff_BitsVals_To_SizeCodes>
 8002a56:	4603      	mov	r3, r0
 8002a58:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    if (error != HAL_OK)
 8002a5c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d002      	beq.n	8002a6a <JPEG_Set_HuffDC_Mem+0x6e>
    {
      return  error;
 8002a64:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8002a68:	e048      	b.n	8002afc <JPEG_Set_HuffDC_Mem+0x100>
    }
    addressDef = address;
 8002a6a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002a6c:	65bb      	str	r3, [r7, #88]	; 0x58
    *addressDef = 0x0FFF0FFF;
 8002a6e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002a70:	f06f 22f0 	mvn.w	r2, #4026593280	; 0xf000f000
 8002a74:	601a      	str	r2, [r3, #0]
    addressDef++;
 8002a76:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002a78:	3304      	adds	r3, #4
 8002a7a:	65bb      	str	r3, [r7, #88]	; 0x58
    *addressDef = 0x0FFF0FFF;
 8002a7c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002a7e:	f06f 22f0 	mvn.w	r2, #4026593280	; 0xf000f000
 8002a82:	601a      	str	r2, [r3, #0]

    i = JPEG_DC_HUFF_TABLE_SIZE;
 8002a84:	230c      	movs	r3, #12
 8002a86:	667b      	str	r3, [r7, #100]	; 0x64
    while (i > 1UL)
 8002a88:	e034      	b.n	8002af4 <JPEG_Set_HuffDC_Mem+0xf8>
    {
      i--;
 8002a8a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002a8c:	3b01      	subs	r3, #1
 8002a8e:	667b      	str	r3, [r7, #100]	; 0x64
      address --;
 8002a90:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002a92:	3b04      	subs	r3, #4
 8002a94:	663b      	str	r3, [r7, #96]	; 0x60
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 8002a96:	f107 0214 	add.w	r2, r7, #20
 8002a9a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002a9c:	4413      	add	r3, r2
 8002a9e:	781b      	ldrb	r3, [r3, #0]
 8002aa0:	021b      	lsls	r3, r3, #8
 8002aa2:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8002aa6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002aa8:	3302      	adds	r3, #2
 8002aaa:	009b      	lsls	r3, r3, #2
 8002aac:	f107 0168 	add.w	r1, r7, #104	; 0x68
 8002ab0:	440b      	add	r3, r1
 8002ab2:	f853 3c50 	ldr.w	r3, [r3, #-80]
 8002ab6:	b2db      	uxtb	r3, r3
 8002ab8:	4313      	orrs	r3, r2
 8002aba:	657b      	str	r3, [r7, #84]	; 0x54
                                                                                   0xFFUL);
      i--;
 8002abc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002abe:	3b01      	subs	r3, #1
 8002ac0:	667b      	str	r3, [r7, #100]	; 0x64
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 8002ac2:	f107 0214 	add.w	r2, r7, #20
 8002ac6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002ac8:	4413      	add	r3, r2
 8002aca:	781b      	ldrb	r3, [r3, #0]
 8002acc:	021b      	lsls	r3, r3, #8
 8002ace:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8002ad2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002ad4:	3302      	adds	r3, #2
 8002ad6:	009b      	lsls	r3, r3, #2
 8002ad8:	f107 0168 	add.w	r1, r7, #104	; 0x68
 8002adc:	440b      	add	r3, r1
 8002ade:	f853 3c50 	ldr.w	r3, [r3, #-80]
 8002ae2:	b2db      	uxtb	r3, r3
 8002ae4:	4313      	orrs	r3, r2
 8002ae6:	653b      	str	r3, [r7, #80]	; 0x50
                                                                                   0xFFUL);

      *address = lsb | (msb << 16);
 8002ae8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002aea:	041a      	lsls	r2, r3, #16
 8002aec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002aee:	431a      	orrs	r2, r3
 8002af0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002af2:	601a      	str	r2, [r3, #0]
    while (i > 1UL)
 8002af4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002af6:	2b01      	cmp	r3, #1
 8002af8:	d8c7      	bhi.n	8002a8a <JPEG_Set_HuffDC_Mem+0x8e>
    }
  }

  /* Return function status */
  return HAL_OK;
 8002afa:	2300      	movs	r3, #0
}
 8002afc:	4618      	mov	r0, r3
 8002afe:	3768      	adds	r7, #104	; 0x68
 8002b00:	46bd      	mov	sp, r7
 8002b02:	bd80      	pop	{r7, pc}

08002b04 <JPEG_Set_HuffAC_Mem>:
  * @param  ACTableAddress Encoder AC huffman table address it could be HUFFENC_AC0 or HUFFENC_AC1.
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Set_HuffAC_Mem(JPEG_HandleTypeDef *hjpeg, JPEG_ACHuffTableTypeDef *HuffTableAC,
                                             const __IO uint32_t *ACTableAddress)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	f5ad 7d56 	sub.w	sp, sp, #856	; 0x358
 8002b0a:	af00      	add	r7, sp, #0
 8002b0c:	f107 030c 	add.w	r3, r7, #12
 8002b10:	6018      	str	r0, [r3, #0]
 8002b12:	f107 0308 	add.w	r3, r7, #8
 8002b16:	6019      	str	r1, [r3, #0]
 8002b18:	1d3b      	adds	r3, r7, #4
 8002b1a:	601a      	str	r2, [r3, #0]
  HAL_StatusTypeDef error;
  JPEG_AC_HuffCodeTableTypeDef acSizeCodesTable;
  uint32_t i, lsb, msb;
  __IO uint32_t *address, *addressDef;

  if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC0))
 8002b1c:	f107 030c 	add.w	r3, r7, #12
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b28:	1d3a      	adds	r2, r7, #4
 8002b2a:	6812      	ldr	r2, [r2, #0]
 8002b2c:	429a      	cmp	r2, r3
 8002b2e:	d10a      	bne.n	8002b46 <JPEG_Set_HuffAC_Mem+0x42>
  {
    address = (hjpeg->Instance->HUFFENC_AC0 + (JPEG_AC_HUFF_TABLE_SIZE / 2UL));
 8002b30:	f107 030c 	add.w	r3, r7, #12
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b3c:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8002b40:	f8c7 3350 	str.w	r3, [r7, #848]	; 0x350
 8002b44:	e016      	b.n	8002b74 <JPEG_Set_HuffAC_Mem+0x70>
  }
  else if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC1))
 8002b46:	f107 030c 	add.w	r3, r7, #12
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f503 63cc 	add.w	r3, r3, #1632	; 0x660
 8002b52:	1d3a      	adds	r2, r7, #4
 8002b54:	6812      	ldr	r2, [r2, #0]
 8002b56:	429a      	cmp	r2, r3
 8002b58:	d10a      	bne.n	8002b70 <JPEG_Set_HuffAC_Mem+0x6c>
  {
    address = (hjpeg->Instance->HUFFENC_AC1 + (JPEG_AC_HUFF_TABLE_SIZE / 2UL));
 8002b5a:	f107 030c 	add.w	r3, r7, #12
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f503 63cc 	add.w	r3, r3, #1632	; 0x660
 8002b66:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8002b6a:	f8c7 3350 	str.w	r3, [r7, #848]	; 0x350
 8002b6e:	e001      	b.n	8002b74 <JPEG_Set_HuffAC_Mem+0x70>
  }
  else
  {
    return HAL_ERROR;
 8002b70:	2301      	movs	r3, #1
 8002b72:	e09c      	b.n	8002cae <JPEG_Set_HuffAC_Mem+0x1aa>
  }

  if (HuffTableAC != NULL)
 8002b74:	f107 0308 	add.w	r3, r7, #8
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	f000 8096 	beq.w	8002cac <JPEG_Set_HuffAC_Mem+0x1a8>
  {
    error = JPEG_ACHuff_BitsVals_To_SizeCodes(HuffTableAC, &acSizeCodesTable);
 8002b80:	f107 0214 	add.w	r2, r7, #20
 8002b84:	f107 0308 	add.w	r3, r7, #8
 8002b88:	4611      	mov	r1, r2
 8002b8a:	6818      	ldr	r0, [r3, #0]
 8002b8c:	f7ff fe51 	bl	8002832 <JPEG_ACHuff_BitsVals_To_SizeCodes>
 8002b90:	4603      	mov	r3, r0
 8002b92:	f887 334b 	strb.w	r3, [r7, #843]	; 0x34b
    if (error != HAL_OK)
 8002b96:	f897 334b 	ldrb.w	r3, [r7, #843]	; 0x34b
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d002      	beq.n	8002ba4 <JPEG_Set_HuffAC_Mem+0xa0>
    {
      return  error;
 8002b9e:	f897 334b 	ldrb.w	r3, [r7, #843]	; 0x34b
 8002ba2:	e084      	b.n	8002cae <JPEG_Set_HuffAC_Mem+0x1aa>
    }
    /* Default values settings: 162:167 FFFh , 168:175 FD0h_FD7h */
    /* Locations 162:175 of each AC table contain information used internally by the core */

    addressDef = address;
 8002ba4:	f8d7 3350 	ldr.w	r3, [r7, #848]	; 0x350
 8002ba8:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
    for (i = 0; i < 3UL; i++)
 8002bac:	2300      	movs	r3, #0
 8002bae:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
 8002bb2:	e00e      	b.n	8002bd2 <JPEG_Set_HuffAC_Mem+0xce>
    {
      *addressDef = 0x0FFF0FFF;
 8002bb4:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 8002bb8:	f06f 22f0 	mvn.w	r2, #4026593280	; 0xf000f000
 8002bbc:	601a      	str	r2, [r3, #0]
      addressDef++;
 8002bbe:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 8002bc2:	3304      	adds	r3, #4
 8002bc4:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
    for (i = 0; i < 3UL; i++)
 8002bc8:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 8002bcc:	3301      	adds	r3, #1
 8002bce:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
 8002bd2:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 8002bd6:	2b02      	cmp	r3, #2
 8002bd8:	d9ec      	bls.n	8002bb4 <JPEG_Set_HuffAC_Mem+0xb0>
    }
    *addressDef = 0x0FD10FD0;
 8002bda:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 8002bde:	4a36      	ldr	r2, [pc, #216]	; (8002cb8 <JPEG_Set_HuffAC_Mem+0x1b4>)
 8002be0:	601a      	str	r2, [r3, #0]
    addressDef++;
 8002be2:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 8002be6:	3304      	adds	r3, #4
 8002be8:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
    *addressDef = 0x0FD30FD2;
 8002bec:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 8002bf0:	4a32      	ldr	r2, [pc, #200]	; (8002cbc <JPEG_Set_HuffAC_Mem+0x1b8>)
 8002bf2:	601a      	str	r2, [r3, #0]
    addressDef++;
 8002bf4:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 8002bf8:	3304      	adds	r3, #4
 8002bfa:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
    *addressDef = 0x0FD50FD4;
 8002bfe:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 8002c02:	4a2f      	ldr	r2, [pc, #188]	; (8002cc0 <JPEG_Set_HuffAC_Mem+0x1bc>)
 8002c04:	601a      	str	r2, [r3, #0]
    addressDef++;
 8002c06:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 8002c0a:	3304      	adds	r3, #4
 8002c0c:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
    *addressDef = 0x0FD70FD6;
 8002c10:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 8002c14:	4a2b      	ldr	r2, [pc, #172]	; (8002cc4 <JPEG_Set_HuffAC_Mem+0x1c0>)
 8002c16:	601a      	str	r2, [r3, #0]
    /* end of Locations 162:175  */


    i = JPEG_AC_HUFF_TABLE_SIZE;
 8002c18:	23a2      	movs	r3, #162	; 0xa2
 8002c1a:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
    while (i > 1UL)
 8002c1e:	e041      	b.n	8002ca4 <JPEG_Set_HuffAC_Mem+0x1a0>
    {
      i--;
 8002c20:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 8002c24:	3b01      	subs	r3, #1
 8002c26:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
      address--;
 8002c2a:	f8d7 3350 	ldr.w	r3, [r7, #848]	; 0x350
 8002c2e:	3b04      	subs	r3, #4
 8002c30:	f8c7 3350 	str.w	r3, [r7, #848]	; 0x350
      msb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 8002c34:	f107 0214 	add.w	r2, r7, #20
 8002c38:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 8002c3c:	4413      	add	r3, r2
 8002c3e:	781b      	ldrb	r3, [r3, #0]
 8002c40:	021b      	lsls	r3, r3, #8
 8002c42:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8002c46:	f107 0114 	add.w	r1, r7, #20
 8002c4a:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 8002c4e:	3328      	adds	r3, #40	; 0x28
 8002c50:	009b      	lsls	r3, r3, #2
 8002c52:	440b      	add	r3, r1
 8002c54:	685b      	ldr	r3, [r3, #4]
 8002c56:	b2db      	uxtb	r3, r3
 8002c58:	4313      	orrs	r3, r2
 8002c5a:	f8c7 3344 	str.w	r3, [r7, #836]	; 0x344
                                                                                   0xFFUL);
      i--;
 8002c5e:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 8002c62:	3b01      	subs	r3, #1
 8002c64:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
      lsb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 8002c68:	f107 0214 	add.w	r2, r7, #20
 8002c6c:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 8002c70:	4413      	add	r3, r2
 8002c72:	781b      	ldrb	r3, [r3, #0]
 8002c74:	021b      	lsls	r3, r3, #8
 8002c76:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8002c7a:	f107 0114 	add.w	r1, r7, #20
 8002c7e:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 8002c82:	3328      	adds	r3, #40	; 0x28
 8002c84:	009b      	lsls	r3, r3, #2
 8002c86:	440b      	add	r3, r1
 8002c88:	685b      	ldr	r3, [r3, #4]
 8002c8a:	b2db      	uxtb	r3, r3
 8002c8c:	4313      	orrs	r3, r2
 8002c8e:	f8c7 3340 	str.w	r3, [r7, #832]	; 0x340
                                                                                   0xFFUL);

      *address = lsb | (msb << 16);
 8002c92:	f8d7 3344 	ldr.w	r3, [r7, #836]	; 0x344
 8002c96:	041a      	lsls	r2, r3, #16
 8002c98:	f8d7 3340 	ldr.w	r3, [r7, #832]	; 0x340
 8002c9c:	431a      	orrs	r2, r3
 8002c9e:	f8d7 3350 	ldr.w	r3, [r7, #848]	; 0x350
 8002ca2:	601a      	str	r2, [r3, #0]
    while (i > 1UL)
 8002ca4:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 8002ca8:	2b01      	cmp	r3, #1
 8002caa:	d8b9      	bhi.n	8002c20 <JPEG_Set_HuffAC_Mem+0x11c>
    }
  }

  /* Return function status */
  return HAL_OK;
 8002cac:	2300      	movs	r3, #0
}
 8002cae:	4618      	mov	r0, r3
 8002cb0:	f507 7756 	add.w	r7, r7, #856	; 0x358
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	bd80      	pop	{r7, pc}
 8002cb8:	0fd10fd0 	.word	0x0fd10fd0
 8002cbc:	0fd30fd2 	.word	0x0fd30fd2
 8002cc0:	0fd50fd4 	.word	0x0fd50fd4
 8002cc4:	0fd70fd6 	.word	0x0fd70fd6

08002cc8 <JPEG_Set_HuffEnc_Mem>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
static HAL_StatusTypeDef JPEG_Set_HuffEnc_Mem(JPEG_HandleTypeDef *hjpeg)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b084      	sub	sp, #16
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef error;

  JPEG_Set_Huff_DHTMem(hjpeg);
 8002cd0:	6878      	ldr	r0, [r7, #4]
 8002cd2:	f000 f84d 	bl	8002d70 <JPEG_Set_Huff_DHTMem>
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACLUM_HuffTable,
                              (hjpeg->Instance->HUFFENC_AC0));
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACLUM_HuffTable,
 8002cde:	461a      	mov	r2, r3
 8002ce0:	491f      	ldr	r1, [pc, #124]	; (8002d60 <JPEG_Set_HuffEnc_Mem+0x98>)
 8002ce2:	6878      	ldr	r0, [r7, #4]
 8002ce4:	f7ff ff0e 	bl	8002b04 <JPEG_Set_HuffAC_Mem>
 8002ce8:	4603      	mov	r3, r0
 8002cea:	73fb      	strb	r3, [r7, #15]
  if (error != HAL_OK)
 8002cec:	7bfb      	ldrb	r3, [r7, #15]
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d001      	beq.n	8002cf6 <JPEG_Set_HuffEnc_Mem+0x2e>
  {
    return  error;
 8002cf2:	7bfb      	ldrb	r3, [r7, #15]
 8002cf4:	e030      	b.n	8002d58 <JPEG_Set_HuffEnc_Mem+0x90>
  }

  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACCHROM_HuffTable,
                              (hjpeg->Instance->HUFFENC_AC1));
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f503 63cc 	add.w	r3, r3, #1632	; 0x660
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACCHROM_HuffTable,
 8002cfe:	461a      	mov	r2, r3
 8002d00:	4918      	ldr	r1, [pc, #96]	; (8002d64 <JPEG_Set_HuffEnc_Mem+0x9c>)
 8002d02:	6878      	ldr	r0, [r7, #4]
 8002d04:	f7ff fefe 	bl	8002b04 <JPEG_Set_HuffAC_Mem>
 8002d08:	4603      	mov	r3, r0
 8002d0a:	73fb      	strb	r3, [r7, #15]
  if (error != HAL_OK)
 8002d0c:	7bfb      	ldrb	r3, [r7, #15]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d001      	beq.n	8002d16 <JPEG_Set_HuffEnc_Mem+0x4e>
  {
    return  error;
 8002d12:	7bfb      	ldrb	r3, [r7, #15]
 8002d14:	e020      	b.n	8002d58 <JPEG_Set_HuffEnc_Mem+0x90>
  }

  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCLUM_HuffTable,
                              hjpeg->Instance->HUFFENC_DC0);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f503 63f8 	add.w	r3, r3, #1984	; 0x7c0
  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCLUM_HuffTable,
 8002d1e:	461a      	mov	r2, r3
 8002d20:	4911      	ldr	r1, [pc, #68]	; (8002d68 <JPEG_Set_HuffEnc_Mem+0xa0>)
 8002d22:	6878      	ldr	r0, [r7, #4]
 8002d24:	f7ff fe6a 	bl	80029fc <JPEG_Set_HuffDC_Mem>
 8002d28:	4603      	mov	r3, r0
 8002d2a:	73fb      	strb	r3, [r7, #15]
  if (error != HAL_OK)
 8002d2c:	7bfb      	ldrb	r3, [r7, #15]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d001      	beq.n	8002d36 <JPEG_Set_HuffEnc_Mem+0x6e>
  {
    return  error;
 8002d32:	7bfb      	ldrb	r3, [r7, #15]
 8002d34:	e010      	b.n	8002d58 <JPEG_Set_HuffEnc_Mem+0x90>
  }

  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCCHROM_HuffTable,
                              hjpeg->Instance->HUFFENC_DC1);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f503 63fc 	add.w	r3, r3, #2016	; 0x7e0
  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCCHROM_HuffTable,
 8002d3e:	461a      	mov	r2, r3
 8002d40:	490a      	ldr	r1, [pc, #40]	; (8002d6c <JPEG_Set_HuffEnc_Mem+0xa4>)
 8002d42:	6878      	ldr	r0, [r7, #4]
 8002d44:	f7ff fe5a 	bl	80029fc <JPEG_Set_HuffDC_Mem>
 8002d48:	4603      	mov	r3, r0
 8002d4a:	73fb      	strb	r3, [r7, #15]
  if (error != HAL_OK)
 8002d4c:	7bfb      	ldrb	r3, [r7, #15]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d001      	beq.n	8002d56 <JPEG_Set_HuffEnc_Mem+0x8e>
  {
    return  error;
 8002d52:	7bfb      	ldrb	r3, [r7, #15]
 8002d54:	e000      	b.n	8002d58 <JPEG_Set_HuffEnc_Mem+0x90>
  }
  /* Return function status */
  return HAL_OK;
 8002d56:	2300      	movs	r3, #0
}
 8002d58:	4618      	mov	r0, r3
 8002d5a:	3710      	adds	r7, #16
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	bd80      	pop	{r7, pc}
 8002d60:	0800c0b4 	.word	0x0800c0b4
 8002d64:	0800c168 	.word	0x0800c168
 8002d68:	0800c07c 	.word	0x0800c07c
 8002d6c:	0800c098 	.word	0x0800c098

08002d70 <JPEG_Set_Huff_DHTMem>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
static void JPEG_Set_Huff_DHTMem(JPEG_HandleTypeDef *hjpeg)
{
 8002d70:	b480      	push	{r7}
 8002d72:	b08b      	sub	sp, #44	; 0x2c
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
  JPEG_ACHuffTableTypeDef *HuffTableAC0 = (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACLUM_HuffTable;
 8002d78:	4b80      	ldr	r3, [pc, #512]	; (8002f7c <JPEG_Set_Huff_DHTMem+0x20c>)
 8002d7a:	61fb      	str	r3, [r7, #28]
  JPEG_ACHuffTableTypeDef *HuffTableAC1 = (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACCHROM_HuffTable;
 8002d7c:	4b80      	ldr	r3, [pc, #512]	; (8002f80 <JPEG_Set_Huff_DHTMem+0x210>)
 8002d7e:	61bb      	str	r3, [r7, #24]
  JPEG_DCHuffTableTypeDef *HuffTableDC0 = (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCLUM_HuffTable;
 8002d80:	4b80      	ldr	r3, [pc, #512]	; (8002f84 <JPEG_Set_Huff_DHTMem+0x214>)
 8002d82:	617b      	str	r3, [r7, #20]
  JPEG_DCHuffTableTypeDef *HuffTableDC1 = (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCCHROM_HuffTable;
 8002d84:	4b80      	ldr	r3, [pc, #512]	; (8002f88 <JPEG_Set_Huff_DHTMem+0x218>)
 8002d86:	613b      	str	r3, [r7, #16]
  uint32_t value, index;
  __IO uint32_t *address;

  /* DC0 Huffman Table : BITS*/
  /* DC0 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM base address to DHTMEM + 3*/
  address = (hjpeg->Instance->DHTMEM + 3);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8002d90:	330c      	adds	r3, #12
 8002d92:	623b      	str	r3, [r7, #32]
  index = 16;
 8002d94:	2310      	movs	r3, #16
 8002d96:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 8002d98:	e01d      	b.n	8002dd6 <JPEG_Set_Huff_DHTMem+0x66>
  {

    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8002d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d9c:	3b01      	subs	r3, #1
 8002d9e:	697a      	ldr	r2, [r7, #20]
 8002da0:	5cd3      	ldrb	r3, [r2, r3]
 8002da2:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableDC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 8002da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002da6:	3b02      	subs	r3, #2
 8002da8:	6979      	ldr	r1, [r7, #20]
 8002daa:	5ccb      	ldrb	r3, [r1, r3]
 8002dac:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8002dae:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableDC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 8002db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002db2:	3b03      	subs	r3, #3
 8002db4:	6979      	ldr	r1, [r7, #20]
 8002db6:	5ccb      	ldrb	r3, [r1, r3]
 8002db8:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableDC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 8002dba:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableDC0->Bits[index - 4UL] & 0xFFUL);
 8002dbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002dbe:	3a04      	subs	r2, #4
 8002dc0:	6979      	ldr	r1, [r7, #20]
 8002dc2:	5c8a      	ldrb	r2, [r1, r2]
               (((uint32_t)HuffTableDC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 8002dc4:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8002dc6:	6a3b      	ldr	r3, [r7, #32]
 8002dc8:	601a      	str	r2, [r3, #0]
    address--;
 8002dca:	6a3b      	ldr	r3, [r7, #32]
 8002dcc:	3b04      	subs	r3, #4
 8002dce:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 8002dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dd2:	3b04      	subs	r3, #4
 8002dd4:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 8002dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dd8:	2b03      	cmp	r3, #3
 8002dda:	d8de      	bhi.n	8002d9a <JPEG_Set_Huff_DHTMem+0x2a>

  }
  /* DC0 Huffman Table : Val*/
  /* DC0 VALS is a 12 Bytes table i.e 3x32bits words from DHTMEM base address +4 to DHTMEM + 6 */
  address = (hjpeg->Instance->DHTMEM + 6);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8002de4:	3318      	adds	r3, #24
 8002de6:	623b      	str	r3, [r7, #32]
  index = 12;
 8002de8:	230c      	movs	r3, #12
 8002dea:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 8002dec:	e021      	b.n	8002e32 <JPEG_Set_Huff_DHTMem+0xc2>
  {
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8002dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002df0:	3b01      	subs	r3, #1
 8002df2:	697a      	ldr	r2, [r7, #20]
 8002df4:	4413      	add	r3, r2
 8002df6:	7c1b      	ldrb	r3, [r3, #16]
 8002df8:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableDC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 8002dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dfc:	3b02      	subs	r3, #2
 8002dfe:	6979      	ldr	r1, [r7, #20]
 8002e00:	440b      	add	r3, r1
 8002e02:	7c1b      	ldrb	r3, [r3, #16]
 8002e04:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8002e06:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableDC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 8002e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e0a:	3b03      	subs	r3, #3
 8002e0c:	6979      	ldr	r1, [r7, #20]
 8002e0e:	440b      	add	r3, r1
 8002e10:	7c1b      	ldrb	r3, [r3, #16]
 8002e12:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableDC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 8002e14:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableDC0->HuffVal[index - 4UL] & 0xFFUL);
 8002e16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e18:	3a04      	subs	r2, #4
 8002e1a:	6979      	ldr	r1, [r7, #20]
 8002e1c:	440a      	add	r2, r1
 8002e1e:	7c12      	ldrb	r2, [r2, #16]
               (((uint32_t)HuffTableDC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 8002e20:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8002e22:	6a3b      	ldr	r3, [r7, #32]
 8002e24:	601a      	str	r2, [r3, #0]
    address--;
 8002e26:	6a3b      	ldr	r3, [r7, #32]
 8002e28:	3b04      	subs	r3, #4
 8002e2a:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 8002e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e2e:	3b04      	subs	r3, #4
 8002e30:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 8002e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e34:	2b03      	cmp	r3, #3
 8002e36:	d8da      	bhi.n	8002dee <JPEG_Set_Huff_DHTMem+0x7e>
  }

  /* AC0 Huffman Table : BITS*/
  /* AC0 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM base address + 7 to DHTMEM + 10*/
  address = (hjpeg->Instance->DHTMEM + 10UL);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8002e40:	3328      	adds	r3, #40	; 0x28
 8002e42:	623b      	str	r3, [r7, #32]
  index = 16;
 8002e44:	2310      	movs	r3, #16
 8002e46:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 8002e48:	e01d      	b.n	8002e86 <JPEG_Set_Huff_DHTMem+0x116>
  {

    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8002e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e4c:	3b01      	subs	r3, #1
 8002e4e:	69fa      	ldr	r2, [r7, #28]
 8002e50:	5cd3      	ldrb	r3, [r2, r3]
 8002e52:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableAC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 8002e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e56:	3b02      	subs	r3, #2
 8002e58:	69f9      	ldr	r1, [r7, #28]
 8002e5a:	5ccb      	ldrb	r3, [r1, r3]
 8002e5c:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8002e5e:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableAC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 8002e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e62:	3b03      	subs	r3, #3
 8002e64:	69f9      	ldr	r1, [r7, #28]
 8002e66:	5ccb      	ldrb	r3, [r1, r3]
 8002e68:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableAC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 8002e6a:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableAC0->Bits[index - 4UL] & 0xFFUL);
 8002e6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e6e:	3a04      	subs	r2, #4
 8002e70:	69f9      	ldr	r1, [r7, #28]
 8002e72:	5c8a      	ldrb	r2, [r1, r2]
               (((uint32_t)HuffTableAC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 8002e74:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8002e76:	6a3b      	ldr	r3, [r7, #32]
 8002e78:	601a      	str	r2, [r3, #0]
    address--;
 8002e7a:	6a3b      	ldr	r3, [r7, #32]
 8002e7c:	3b04      	subs	r3, #4
 8002e7e:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 8002e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e82:	3b04      	subs	r3, #4
 8002e84:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 8002e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e88:	2b03      	cmp	r3, #3
 8002e8a:	d8de      	bhi.n	8002e4a <JPEG_Set_Huff_DHTMem+0xda>

  }
  /* AC0 Huffman Table : Val*/
  /* AC0 VALS is a 162 Bytes table i.e 41x32bits words from DHTMEM base address + 11 to DHTMEM + 51 */
  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 51) belong to AC0 VALS table */
  address = (hjpeg->Instance->DHTMEM + 51);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8002e94:	33cc      	adds	r3, #204	; 0xcc
 8002e96:	623b      	str	r3, [r7, #32]
  value = *address & 0xFFFF0000U;
 8002e98:	6a3b      	ldr	r3, [r7, #32]
 8002e9a:	681a      	ldr	r2, [r3, #0]
 8002e9c:	4b3b      	ldr	r3, [pc, #236]	; (8002f8c <JPEG_Set_Huff_DHTMem+0x21c>)
 8002e9e:	4013      	ands	r3, r2
 8002ea0:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableAC0->HuffVal[161] & 0xFFUL) << 8) | ((uint32_t)HuffTableAC0->HuffVal[160] & 0xFFUL);
 8002ea2:	69fb      	ldr	r3, [r7, #28]
 8002ea4:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8002ea8:	021a      	lsls	r2, r3, #8
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	4313      	orrs	r3, r2
 8002eae:	69fa      	ldr	r2, [r7, #28]
 8002eb0:	f892 20b0 	ldrb.w	r2, [r2, #176]	; 0xb0
 8002eb4:	4313      	orrs	r3, r2
 8002eb6:	60fb      	str	r3, [r7, #12]
  *address = value;
 8002eb8:	6a3b      	ldr	r3, [r7, #32]
 8002eba:	68fa      	ldr	r2, [r7, #12]
 8002ebc:	601a      	str	r2, [r3, #0]

  /*continue setting 160 AC0 huffman values */
  address--; /* address = hjpeg->Instance->DHTMEM + 50*/
 8002ebe:	6a3b      	ldr	r3, [r7, #32]
 8002ec0:	3b04      	subs	r3, #4
 8002ec2:	623b      	str	r3, [r7, #32]
  index = 160;
 8002ec4:	23a0      	movs	r3, #160	; 0xa0
 8002ec6:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 8002ec8:	e021      	b.n	8002f0e <JPEG_Set_Huff_DHTMem+0x19e>
  {
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8002eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ecc:	3b01      	subs	r3, #1
 8002ece:	69fa      	ldr	r2, [r7, #28]
 8002ed0:	4413      	add	r3, r2
 8002ed2:	7c1b      	ldrb	r3, [r3, #16]
 8002ed4:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableAC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 8002ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ed8:	3b02      	subs	r3, #2
 8002eda:	69f9      	ldr	r1, [r7, #28]
 8002edc:	440b      	add	r3, r1
 8002ede:	7c1b      	ldrb	r3, [r3, #16]
 8002ee0:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8002ee2:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableAC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 8002ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ee6:	3b03      	subs	r3, #3
 8002ee8:	69f9      	ldr	r1, [r7, #28]
 8002eea:	440b      	add	r3, r1
 8002eec:	7c1b      	ldrb	r3, [r3, #16]
 8002eee:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableAC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 8002ef0:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableAC0->HuffVal[index - 4UL] & 0xFFUL);
 8002ef2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ef4:	3a04      	subs	r2, #4
 8002ef6:	69f9      	ldr	r1, [r7, #28]
 8002ef8:	440a      	add	r2, r1
 8002efa:	7c12      	ldrb	r2, [r2, #16]
               (((uint32_t)HuffTableAC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 8002efc:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8002efe:	6a3b      	ldr	r3, [r7, #32]
 8002f00:	601a      	str	r2, [r3, #0]
    address--;
 8002f02:	6a3b      	ldr	r3, [r7, #32]
 8002f04:	3b04      	subs	r3, #4
 8002f06:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 8002f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f0a:	3b04      	subs	r3, #4
 8002f0c:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 8002f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f10:	2b03      	cmp	r3, #3
 8002f12:	d8da      	bhi.n	8002eca <JPEG_Set_Huff_DHTMem+0x15a>
  }

  /* DC1 Huffman Table : BITS*/
  /* DC1 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM + 51 base address to DHTMEM + 55*/
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 51) belong to DC1 Bits table */
  address = (hjpeg->Instance->DHTMEM + 51);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8002f1c:	33cc      	adds	r3, #204	; 0xcc
 8002f1e:	623b      	str	r3, [r7, #32]
  value = *address & 0x0000FFFFU;
 8002f20:	6a3b      	ldr	r3, [r7, #32]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	b29b      	uxth	r3, r3
 8002f26:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableDC1->Bits[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableDC1->Bits[0] & 0xFFUL) << 16);
 8002f28:	693b      	ldr	r3, [r7, #16]
 8002f2a:	785b      	ldrb	r3, [r3, #1]
 8002f2c:	061a      	lsls	r2, r3, #24
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	431a      	orrs	r2, r3
 8002f32:	693b      	ldr	r3, [r7, #16]
 8002f34:	781b      	ldrb	r3, [r3, #0]
 8002f36:	041b      	lsls	r3, r3, #16
 8002f38:	4313      	orrs	r3, r2
 8002f3a:	60fb      	str	r3, [r7, #12]
  *address = value;
 8002f3c:	6a3b      	ldr	r3, [r7, #32]
 8002f3e:	68fa      	ldr	r2, [r7, #12]
 8002f40:	601a      	str	r2, [r3, #0]

  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 55) belong to DC1 Bits table */
  address = (hjpeg->Instance->DHTMEM + 55);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8002f4a:	33dc      	adds	r3, #220	; 0xdc
 8002f4c:	623b      	str	r3, [r7, #32]
  value = *address & 0xFFFF0000U;
 8002f4e:	6a3b      	ldr	r3, [r7, #32]
 8002f50:	681a      	ldr	r2, [r3, #0]
 8002f52:	4b0e      	ldr	r3, [pc, #56]	; (8002f8c <JPEG_Set_Huff_DHTMem+0x21c>)
 8002f54:	4013      	ands	r3, r2
 8002f56:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableDC1->Bits[15] & 0xFFUL) << 8) | ((uint32_t)HuffTableDC1->Bits[14] & 0xFFUL);
 8002f58:	693b      	ldr	r3, [r7, #16]
 8002f5a:	7bdb      	ldrb	r3, [r3, #15]
 8002f5c:	021a      	lsls	r2, r3, #8
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	4313      	orrs	r3, r2
 8002f62:	693a      	ldr	r2, [r7, #16]
 8002f64:	7b92      	ldrb	r2, [r2, #14]
 8002f66:	4313      	orrs	r3, r2
 8002f68:	60fb      	str	r3, [r7, #12]
  *address = value;
 8002f6a:	6a3b      	ldr	r3, [r7, #32]
 8002f6c:	68fa      	ldr	r2, [r7, #12]
 8002f6e:	601a      	str	r2, [r3, #0]

  /*continue setting 12 DC1 huffman Bits from DHTMEM + 54 down to DHTMEM + 52*/
  address--;
 8002f70:	6a3b      	ldr	r3, [r7, #32]
 8002f72:	3b04      	subs	r3, #4
 8002f74:	623b      	str	r3, [r7, #32]
  index = 12;
 8002f76:	230c      	movs	r3, #12
 8002f78:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 8002f7a:	e027      	b.n	8002fcc <JPEG_Set_Huff_DHTMem+0x25c>
 8002f7c:	0800c0b4 	.word	0x0800c0b4
 8002f80:	0800c168 	.word	0x0800c168
 8002f84:	0800c07c 	.word	0x0800c07c
 8002f88:	0800c098 	.word	0x0800c098
 8002f8c:	ffff0000 	.word	0xffff0000
  {

    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 8002f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f92:	3301      	adds	r3, #1
 8002f94:	693a      	ldr	r2, [r7, #16]
 8002f96:	5cd3      	ldrb	r3, [r2, r3]
 8002f98:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableDC1->Bits[index] & 0xFFUL) << 16) |
 8002f9a:	6939      	ldr	r1, [r7, #16]
 8002f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f9e:	440b      	add	r3, r1
 8002fa0:	781b      	ldrb	r3, [r3, #0]
 8002fa2:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 8002fa4:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableDC1->Bits[index - 1UL] & 0xFFUL) << 8) |
 8002fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fa8:	3b01      	subs	r3, #1
 8002faa:	6939      	ldr	r1, [r7, #16]
 8002fac:	5ccb      	ldrb	r3, [r1, r3]
 8002fae:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableDC1->Bits[index] & 0xFFUL) << 16) |
 8002fb0:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableDC1->Bits[index - 2UL] & 0xFFUL);
 8002fb2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fb4:	3a02      	subs	r2, #2
 8002fb6:	6939      	ldr	r1, [r7, #16]
 8002fb8:	5c8a      	ldrb	r2, [r1, r2]
               (((uint32_t)HuffTableDC1->Bits[index - 1UL] & 0xFFUL) << 8) |
 8002fba:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 8002fbc:	6a3b      	ldr	r3, [r7, #32]
 8002fbe:	601a      	str	r2, [r3, #0]
    address--;
 8002fc0:	6a3b      	ldr	r3, [r7, #32]
 8002fc2:	3b04      	subs	r3, #4
 8002fc4:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 8002fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fc8:	3b04      	subs	r3, #4
 8002fca:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 8002fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fce:	2b03      	cmp	r3, #3
 8002fd0:	d8de      	bhi.n	8002f90 <JPEG_Set_Huff_DHTMem+0x220>

  }
  /* DC1 Huffman Table : Val*/
  /* DC1 VALS is a 12 Bytes table i.e 3x32bits words from DHTMEM base address +55 to DHTMEM + 58 */
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 55) belong to DC1 Val table */
  address = (hjpeg->Instance->DHTMEM + 55);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8002fda:	33dc      	adds	r3, #220	; 0xdc
 8002fdc:	623b      	str	r3, [r7, #32]
  value = *address & 0x0000FFFFUL;
 8002fde:	6a3b      	ldr	r3, [r7, #32]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	b29b      	uxth	r3, r3
 8002fe4:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableDC1->HuffVal[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableDC1->HuffVal[0] & 0xFFUL) <<
 8002fe6:	693b      	ldr	r3, [r7, #16]
 8002fe8:	7c5b      	ldrb	r3, [r3, #17]
 8002fea:	061a      	lsls	r2, r3, #24
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	431a      	orrs	r2, r3
 8002ff0:	693b      	ldr	r3, [r7, #16]
 8002ff2:	7c1b      	ldrb	r3, [r3, #16]
 8002ff4:	041b      	lsls	r3, r3, #16
 8002ff6:	4313      	orrs	r3, r2
 8002ff8:	60fb      	str	r3, [r7, #12]
                                                                         16);
  *address = value;
 8002ffa:	6a3b      	ldr	r3, [r7, #32]
 8002ffc:	68fa      	ldr	r2, [r7, #12]
 8002ffe:	601a      	str	r2, [r3, #0]

  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 58) belong to DC1 Val table */
  address = (hjpeg->Instance->DHTMEM + 58);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8003008:	33e8      	adds	r3, #232	; 0xe8
 800300a:	623b      	str	r3, [r7, #32]
  value = *address & 0xFFFF0000UL;
 800300c:	6a3b      	ldr	r3, [r7, #32]
 800300e:	681a      	ldr	r2, [r3, #0]
 8003010:	4b6d      	ldr	r3, [pc, #436]	; (80031c8 <JPEG_Set_Huff_DHTMem+0x458>)
 8003012:	4013      	ands	r3, r2
 8003014:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableDC1->HuffVal[11] & 0xFFUL) << 8) | ((uint32_t)HuffTableDC1->HuffVal[10] & 0xFFUL);
 8003016:	693b      	ldr	r3, [r7, #16]
 8003018:	7edb      	ldrb	r3, [r3, #27]
 800301a:	021a      	lsls	r2, r3, #8
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	4313      	orrs	r3, r2
 8003020:	693a      	ldr	r2, [r7, #16]
 8003022:	7e92      	ldrb	r2, [r2, #26]
 8003024:	4313      	orrs	r3, r2
 8003026:	60fb      	str	r3, [r7, #12]
  *address = value;
 8003028:	6a3b      	ldr	r3, [r7, #32]
 800302a:	68fa      	ldr	r2, [r7, #12]
 800302c:	601a      	str	r2, [r3, #0]

  /*continue setting 8 DC1 huffman val from DHTMEM + 57 down to DHTMEM + 56*/
  address--;
 800302e:	6a3b      	ldr	r3, [r7, #32]
 8003030:	3b04      	subs	r3, #4
 8003032:	623b      	str	r3, [r7, #32]
  index = 8;
 8003034:	2308      	movs	r3, #8
 8003036:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 8003038:	e021      	b.n	800307e <JPEG_Set_Huff_DHTMem+0x30e>
  {
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 800303a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800303c:	3301      	adds	r3, #1
 800303e:	693a      	ldr	r2, [r7, #16]
 8003040:	4413      	add	r3, r2
 8003042:	7c1b      	ldrb	r3, [r3, #16]
 8003044:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableDC1->HuffVal[index] & 0xFFUL) << 16) |
 8003046:	6939      	ldr	r1, [r7, #16]
 8003048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800304a:	440b      	add	r3, r1
 800304c:	3310      	adds	r3, #16
 800304e:	781b      	ldrb	r3, [r3, #0]
 8003050:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 8003052:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableDC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 8003054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003056:	3b01      	subs	r3, #1
 8003058:	6939      	ldr	r1, [r7, #16]
 800305a:	440b      	add	r3, r1
 800305c:	7c1b      	ldrb	r3, [r3, #16]
 800305e:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableDC1->HuffVal[index] & 0xFFUL) << 16) |
 8003060:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableDC1->HuffVal[index - 2UL] & 0xFFUL);
 8003062:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003064:	3a02      	subs	r2, #2
 8003066:	6939      	ldr	r1, [r7, #16]
 8003068:	440a      	add	r2, r1
 800306a:	7c12      	ldrb	r2, [r2, #16]
               (((uint32_t)HuffTableDC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 800306c:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 800306e:	6a3b      	ldr	r3, [r7, #32]
 8003070:	601a      	str	r2, [r3, #0]
    address--;
 8003072:	6a3b      	ldr	r3, [r7, #32]
 8003074:	3b04      	subs	r3, #4
 8003076:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 8003078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800307a:	3b04      	subs	r3, #4
 800307c:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 800307e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003080:	2b03      	cmp	r3, #3
 8003082:	d8da      	bhi.n	800303a <JPEG_Set_Huff_DHTMem+0x2ca>
  }

  /* AC1 Huffman Table : BITS*/
  /* AC1 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM base address + 58 to DHTMEM + 62*/
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 58) belong to AC1 Bits table */
  address = (hjpeg->Instance->DHTMEM + 58);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f503 7358 	add.w	r3, r3, #864	; 0x360
 800308c:	33e8      	adds	r3, #232	; 0xe8
 800308e:	623b      	str	r3, [r7, #32]
  value = *address & 0x0000FFFFU;
 8003090:	6a3b      	ldr	r3, [r7, #32]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	b29b      	uxth	r3, r3
 8003096:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableAC1->Bits[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableAC1->Bits[0] & 0xFFUL) << 16);
 8003098:	69bb      	ldr	r3, [r7, #24]
 800309a:	785b      	ldrb	r3, [r3, #1]
 800309c:	061a      	lsls	r2, r3, #24
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	431a      	orrs	r2, r3
 80030a2:	69bb      	ldr	r3, [r7, #24]
 80030a4:	781b      	ldrb	r3, [r3, #0]
 80030a6:	041b      	lsls	r3, r3, #16
 80030a8:	4313      	orrs	r3, r2
 80030aa:	60fb      	str	r3, [r7, #12]
  *address = value;
 80030ac:	6a3b      	ldr	r3, [r7, #32]
 80030ae:	68fa      	ldr	r2, [r7, #12]
 80030b0:	601a      	str	r2, [r3, #0]

  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 62) belong to Bits Val table */
  address = (hjpeg->Instance->DHTMEM + 62);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f503 7358 	add.w	r3, r3, #864	; 0x360
 80030ba:	33f8      	adds	r3, #248	; 0xf8
 80030bc:	623b      	str	r3, [r7, #32]
  value = *address & 0xFFFF0000U;
 80030be:	6a3b      	ldr	r3, [r7, #32]
 80030c0:	681a      	ldr	r2, [r3, #0]
 80030c2:	4b41      	ldr	r3, [pc, #260]	; (80031c8 <JPEG_Set_Huff_DHTMem+0x458>)
 80030c4:	4013      	ands	r3, r2
 80030c6:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableAC1->Bits[15] & 0xFFUL) << 8) | ((uint32_t)HuffTableAC1->Bits[14] & 0xFFUL);
 80030c8:	69bb      	ldr	r3, [r7, #24]
 80030ca:	7bdb      	ldrb	r3, [r3, #15]
 80030cc:	021a      	lsls	r2, r3, #8
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	4313      	orrs	r3, r2
 80030d2:	69ba      	ldr	r2, [r7, #24]
 80030d4:	7b92      	ldrb	r2, [r2, #14]
 80030d6:	4313      	orrs	r3, r2
 80030d8:	60fb      	str	r3, [r7, #12]
  *address = value;
 80030da:	6a3b      	ldr	r3, [r7, #32]
 80030dc:	68fa      	ldr	r2, [r7, #12]
 80030de:	601a      	str	r2, [r3, #0]

  /*continue setting 12 AC1 huffman Bits from DHTMEM + 61 down to DHTMEM + 59*/
  address--;
 80030e0:	6a3b      	ldr	r3, [r7, #32]
 80030e2:	3b04      	subs	r3, #4
 80030e4:	623b      	str	r3, [r7, #32]
  index = 12;
 80030e6:	230c      	movs	r3, #12
 80030e8:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 80030ea:	e01d      	b.n	8003128 <JPEG_Set_Huff_DHTMem+0x3b8>
  {

    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 80030ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ee:	3301      	adds	r3, #1
 80030f0:	69ba      	ldr	r2, [r7, #24]
 80030f2:	5cd3      	ldrb	r3, [r2, r3]
 80030f4:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableAC1->Bits[index] & 0xFFUL) << 16) |
 80030f6:	69b9      	ldr	r1, [r7, #24]
 80030f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030fa:	440b      	add	r3, r1
 80030fc:	781b      	ldrb	r3, [r3, #0]
 80030fe:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 8003100:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableAC1->Bits[index - 1UL] & 0xFFUL) << 8) |
 8003102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003104:	3b01      	subs	r3, #1
 8003106:	69b9      	ldr	r1, [r7, #24]
 8003108:	5ccb      	ldrb	r3, [r1, r3]
 800310a:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableAC1->Bits[index] & 0xFFUL) << 16) |
 800310c:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableAC1->Bits[index - 2UL] & 0xFFUL);
 800310e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003110:	3a02      	subs	r2, #2
 8003112:	69b9      	ldr	r1, [r7, #24]
 8003114:	5c8a      	ldrb	r2, [r1, r2]
               (((uint32_t)HuffTableAC1->Bits[index - 1UL] & 0xFFUL) << 8) |
 8003116:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 8003118:	6a3b      	ldr	r3, [r7, #32]
 800311a:	601a      	str	r2, [r3, #0]
    address--;
 800311c:	6a3b      	ldr	r3, [r7, #32]
 800311e:	3b04      	subs	r3, #4
 8003120:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 8003122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003124:	3b04      	subs	r3, #4
 8003126:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 8003128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800312a:	2b03      	cmp	r3, #3
 800312c:	d8de      	bhi.n	80030ec <JPEG_Set_Huff_DHTMem+0x37c>

  }
  /* AC1 Huffman Table : Val*/
  /* AC1 VALS is a 162 Bytes table i.e 41x32bits words from DHTMEM base address + 62 to DHTMEM + 102 */
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 62) belong to AC1 VALS table */
  address = (hjpeg->Instance->DHTMEM + 62);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8003136:	33f8      	adds	r3, #248	; 0xf8
 8003138:	623b      	str	r3, [r7, #32]
  value = *address & 0x0000FFFFUL;
 800313a:	6a3b      	ldr	r3, [r7, #32]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	b29b      	uxth	r3, r3
 8003140:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableAC1->HuffVal[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableAC1->HuffVal[0] & 0xFFUL) <<
 8003142:	69bb      	ldr	r3, [r7, #24]
 8003144:	7c5b      	ldrb	r3, [r3, #17]
 8003146:	061a      	lsls	r2, r3, #24
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	431a      	orrs	r2, r3
 800314c:	69bb      	ldr	r3, [r7, #24]
 800314e:	7c1b      	ldrb	r3, [r3, #16]
 8003150:	041b      	lsls	r3, r3, #16
 8003152:	4313      	orrs	r3, r2
 8003154:	60fb      	str	r3, [r7, #12]
                                                                         16);
  *address = value;
 8003156:	6a3b      	ldr	r3, [r7, #32]
 8003158:	68fa      	ldr	r2, [r7, #12]
 800315a:	601a      	str	r2, [r3, #0]

  /*continue setting 160 AC1 huffman values from DHTMEM + 63 to DHTMEM+102 */
  address = (hjpeg->Instance->DHTMEM + 102);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8003164:	f503 73cc 	add.w	r3, r3, #408	; 0x198
 8003168:	623b      	str	r3, [r7, #32]
  index = 160;
 800316a:	23a0      	movs	r3, #160	; 0xa0
 800316c:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 800316e:	e021      	b.n	80031b4 <JPEG_Set_Huff_DHTMem+0x444>
  {
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 8003170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003172:	3301      	adds	r3, #1
 8003174:	69ba      	ldr	r2, [r7, #24]
 8003176:	4413      	add	r3, r2
 8003178:	7c1b      	ldrb	r3, [r3, #16]
 800317a:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableAC1->HuffVal[index] & 0xFFUL) << 16) |
 800317c:	69b9      	ldr	r1, [r7, #24]
 800317e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003180:	440b      	add	r3, r1
 8003182:	3310      	adds	r3, #16
 8003184:	781b      	ldrb	r3, [r3, #0]
 8003186:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 8003188:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableAC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 800318a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800318c:	3b01      	subs	r3, #1
 800318e:	69b9      	ldr	r1, [r7, #24]
 8003190:	440b      	add	r3, r1
 8003192:	7c1b      	ldrb	r3, [r3, #16]
 8003194:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableAC1->HuffVal[index] & 0xFFUL) << 16) |
 8003196:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableAC1->HuffVal[index - 2UL] & 0xFFUL);
 8003198:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800319a:	3a02      	subs	r2, #2
 800319c:	69b9      	ldr	r1, [r7, #24]
 800319e:	440a      	add	r2, r1
 80031a0:	7c12      	ldrb	r2, [r2, #16]
               (((uint32_t)HuffTableAC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 80031a2:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 80031a4:	6a3b      	ldr	r3, [r7, #32]
 80031a6:	601a      	str	r2, [r3, #0]
    address--;
 80031a8:	6a3b      	ldr	r3, [r7, #32]
 80031aa:	3b04      	subs	r3, #4
 80031ac:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 80031ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031b0:	3b04      	subs	r3, #4
 80031b2:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 80031b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031b6:	2b03      	cmp	r3, #3
 80031b8:	d8da      	bhi.n	8003170 <JPEG_Set_Huff_DHTMem+0x400>
  }

}
 80031ba:	bf00      	nop
 80031bc:	372c      	adds	r7, #44	; 0x2c
 80031be:	46bd      	mov	sp, r7
 80031c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c4:	4770      	bx	lr
 80031c6:	bf00      	nop
 80031c8:	ffff0000 	.word	0xffff0000

080031cc <HAL_PWREx_ConfigSupply>:
  *            @arg PWR_EXTERNAL_SOURCE_SUPPLY          The LDO regulator is Bypassed.
  *                                                     The Vcore Power Domains are supplied from external source.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b084      	sub	sp, #16
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  if(!__HAL_PWR_GET_FLAG(PWR_FLAG_SCUEN))
 80031d4:	4b18      	ldr	r3, [pc, #96]	; (8003238 <HAL_PWREx_ConfigSupply+0x6c>)
 80031d6:	68db      	ldr	r3, [r3, #12]
 80031d8:	f003 0304 	and.w	r3, r3, #4
 80031dc:	2b04      	cmp	r3, #4
 80031de:	d008      	beq.n	80031f2 <HAL_PWREx_ConfigSupply+0x26>
  {
    if((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80031e0:	4b15      	ldr	r3, [pc, #84]	; (8003238 <HAL_PWREx_ConfigSupply+0x6c>)
 80031e2:	68db      	ldr	r3, [r3, #12]
 80031e4:	f003 0307 	and.w	r3, r3, #7
 80031e8:	687a      	ldr	r2, [r7, #4]
 80031ea:	429a      	cmp	r2, r3
 80031ec:	d001      	beq.n	80031f2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new regulator config */
      return HAL_ERROR;
 80031ee:	2301      	movs	r3, #1
 80031f0:	e01d      	b.n	800322e <HAL_PWREx_ConfigSupply+0x62>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG(PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80031f2:	4b11      	ldr	r3, [pc, #68]	; (8003238 <HAL_PWREx_ConfigSupply+0x6c>)
 80031f4:	68db      	ldr	r3, [r3, #12]
 80031f6:	f023 0207 	bic.w	r2, r3, #7
 80031fa:	490f      	ldr	r1, [pc, #60]	; (8003238 <HAL_PWREx_ConfigSupply+0x6c>)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	4313      	orrs	r3, r2
 8003200:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003202:	f7fe fa3d 	bl	8001680 <HAL_GetTick>
 8003206:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ACTVOSRDY))
 8003208:	e009      	b.n	800321e <HAL_PWREx_ConfigSupply+0x52>
  {
    if((HAL_GetTick() - tickstart ) > PWR_FLAG_SETTING_DELAY_US)
 800320a:	f7fe fa39 	bl	8001680 <HAL_GetTick>
 800320e:	4602      	mov	r2, r0
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	1ad3      	subs	r3, r2, r3
 8003214:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003218:	d901      	bls.n	800321e <HAL_PWREx_ConfigSupply+0x52>
    {
      return HAL_TIMEOUT;
 800321a:	2303      	movs	r3, #3
 800321c:	e007      	b.n	800322e <HAL_PWREx_ConfigSupply+0x62>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ACTVOSRDY))
 800321e:	4b06      	ldr	r3, [pc, #24]	; (8003238 <HAL_PWREx_ConfigSupply+0x6c>)
 8003220:	685b      	ldr	r3, [r3, #4]
 8003222:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003226:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800322a:	d1ee      	bne.n	800320a <HAL_PWREx_ConfigSupply+0x3e>
    }
  }

  return HAL_OK;
 800322c:	2300      	movs	r3, #0
}
 800322e:	4618      	mov	r0, r3
 8003230:	3710      	adds	r7, #16
 8003232:	46bd      	mov	sp, r7
 8003234:	bd80      	pop	{r7, pc}
 8003236:	bf00      	nop
 8003238:	58024800 	.word	0x58024800

0800323c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b08a      	sub	sp, #40	; 0x28
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2b00      	cmp	r3, #0
 8003248:	d101      	bne.n	800324e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800324a:	2301      	movs	r3, #1
 800324c:	e3a4      	b.n	8003998 <HAL_RCC_OscConfig+0x75c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f003 0301 	and.w	r3, r3, #1
 8003256:	2b00      	cmp	r3, #0
 8003258:	f000 8087 	beq.w	800336a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800325c:	4b9a      	ldr	r3, [pc, #616]	; (80034c8 <HAL_RCC_OscConfig+0x28c>)
 800325e:	691b      	ldr	r3, [r3, #16]
 8003260:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003264:	627b      	str	r3, [r7, #36]	; 0x24
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003266:	4b98      	ldr	r3, [pc, #608]	; (80034c8 <HAL_RCC_OscConfig+0x28c>)
 8003268:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800326a:	623b      	str	r3, [r7, #32]
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800326c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800326e:	2b10      	cmp	r3, #16
 8003270:	d007      	beq.n	8003282 <HAL_RCC_OscConfig+0x46>
 8003272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003274:	2b18      	cmp	r3, #24
 8003276:	d110      	bne.n	800329a <HAL_RCC_OscConfig+0x5e>
 8003278:	6a3b      	ldr	r3, [r7, #32]
 800327a:	f003 0303 	and.w	r3, r3, #3
 800327e:	2b02      	cmp	r3, #2
 8003280:	d10b      	bne.n	800329a <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003282:	4b91      	ldr	r3, [pc, #580]	; (80034c8 <HAL_RCC_OscConfig+0x28c>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800328a:	2b00      	cmp	r3, #0
 800328c:	d06c      	beq.n	8003368 <HAL_RCC_OscConfig+0x12c>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	685b      	ldr	r3, [r3, #4]
 8003292:	2b00      	cmp	r3, #0
 8003294:	d168      	bne.n	8003368 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003296:	2301      	movs	r3, #1
 8003298:	e37e      	b.n	8003998 <HAL_RCC_OscConfig+0x75c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	685b      	ldr	r3, [r3, #4]
 800329e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032a2:	d106      	bne.n	80032b2 <HAL_RCC_OscConfig+0x76>
 80032a4:	4b88      	ldr	r3, [pc, #544]	; (80034c8 <HAL_RCC_OscConfig+0x28c>)
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	4a87      	ldr	r2, [pc, #540]	; (80034c8 <HAL_RCC_OscConfig+0x28c>)
 80032aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032ae:	6013      	str	r3, [r2, #0]
 80032b0:	e02e      	b.n	8003310 <HAL_RCC_OscConfig+0xd4>
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	685b      	ldr	r3, [r3, #4]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d10c      	bne.n	80032d4 <HAL_RCC_OscConfig+0x98>
 80032ba:	4b83      	ldr	r3, [pc, #524]	; (80034c8 <HAL_RCC_OscConfig+0x28c>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	4a82      	ldr	r2, [pc, #520]	; (80034c8 <HAL_RCC_OscConfig+0x28c>)
 80032c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032c4:	6013      	str	r3, [r2, #0]
 80032c6:	4b80      	ldr	r3, [pc, #512]	; (80034c8 <HAL_RCC_OscConfig+0x28c>)
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	4a7f      	ldr	r2, [pc, #508]	; (80034c8 <HAL_RCC_OscConfig+0x28c>)
 80032cc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80032d0:	6013      	str	r3, [r2, #0]
 80032d2:	e01d      	b.n	8003310 <HAL_RCC_OscConfig+0xd4>
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	685b      	ldr	r3, [r3, #4]
 80032d8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80032dc:	d10c      	bne.n	80032f8 <HAL_RCC_OscConfig+0xbc>
 80032de:	4b7a      	ldr	r3, [pc, #488]	; (80034c8 <HAL_RCC_OscConfig+0x28c>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	4a79      	ldr	r2, [pc, #484]	; (80034c8 <HAL_RCC_OscConfig+0x28c>)
 80032e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80032e8:	6013      	str	r3, [r2, #0]
 80032ea:	4b77      	ldr	r3, [pc, #476]	; (80034c8 <HAL_RCC_OscConfig+0x28c>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	4a76      	ldr	r2, [pc, #472]	; (80034c8 <HAL_RCC_OscConfig+0x28c>)
 80032f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032f4:	6013      	str	r3, [r2, #0]
 80032f6:	e00b      	b.n	8003310 <HAL_RCC_OscConfig+0xd4>
 80032f8:	4b73      	ldr	r3, [pc, #460]	; (80034c8 <HAL_RCC_OscConfig+0x28c>)
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	4a72      	ldr	r2, [pc, #456]	; (80034c8 <HAL_RCC_OscConfig+0x28c>)
 80032fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003302:	6013      	str	r3, [r2, #0]
 8003304:	4b70      	ldr	r3, [pc, #448]	; (80034c8 <HAL_RCC_OscConfig+0x28c>)
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	4a6f      	ldr	r2, [pc, #444]	; (80034c8 <HAL_RCC_OscConfig+0x28c>)
 800330a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800330e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	685b      	ldr	r3, [r3, #4]
 8003314:	2b00      	cmp	r3, #0
 8003316:	d013      	beq.n	8003340 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003318:	f7fe f9b2 	bl	8001680 <HAL_GetTick>
 800331c:	61f8      	str	r0, [r7, #28]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800331e:	e008      	b.n	8003332 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003320:	f7fe f9ae 	bl	8001680 <HAL_GetTick>
 8003324:	4602      	mov	r2, r0
 8003326:	69fb      	ldr	r3, [r7, #28]
 8003328:	1ad3      	subs	r3, r2, r3
 800332a:	2b64      	cmp	r3, #100	; 0x64
 800332c:	d901      	bls.n	8003332 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800332e:	2303      	movs	r3, #3
 8003330:	e332      	b.n	8003998 <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003332:	4b65      	ldr	r3, [pc, #404]	; (80034c8 <HAL_RCC_OscConfig+0x28c>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800333a:	2b00      	cmp	r3, #0
 800333c:	d0f0      	beq.n	8003320 <HAL_RCC_OscConfig+0xe4>
 800333e:	e014      	b.n	800336a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003340:	f7fe f99e 	bl	8001680 <HAL_GetTick>
 8003344:	61f8      	str	r0, [r7, #28]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003346:	e008      	b.n	800335a <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003348:	f7fe f99a 	bl	8001680 <HAL_GetTick>
 800334c:	4602      	mov	r2, r0
 800334e:	69fb      	ldr	r3, [r7, #28]
 8003350:	1ad3      	subs	r3, r2, r3
 8003352:	2b64      	cmp	r3, #100	; 0x64
 8003354:	d901      	bls.n	800335a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003356:	2303      	movs	r3, #3
 8003358:	e31e      	b.n	8003998 <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800335a:	4b5b      	ldr	r3, [pc, #364]	; (80034c8 <HAL_RCC_OscConfig+0x28c>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003362:	2b00      	cmp	r3, #0
 8003364:	d1f0      	bne.n	8003348 <HAL_RCC_OscConfig+0x10c>
 8003366:	e000      	b.n	800336a <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003368:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f003 0302 	and.w	r3, r3, #2
 8003372:	2b00      	cmp	r3, #0
 8003374:	f000 80b0 	beq.w	80034d8 <HAL_RCC_OscConfig+0x29c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003378:	4b53      	ldr	r3, [pc, #332]	; (80034c8 <HAL_RCC_OscConfig+0x28c>)
 800337a:	691b      	ldr	r3, [r3, #16]
 800337c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003380:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003382:	4b51      	ldr	r3, [pc, #324]	; (80034c8 <HAL_RCC_OscConfig+0x28c>)
 8003384:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003386:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003388:	69bb      	ldr	r3, [r7, #24]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d007      	beq.n	800339e <HAL_RCC_OscConfig+0x162>
 800338e:	69bb      	ldr	r3, [r7, #24]
 8003390:	2b18      	cmp	r3, #24
 8003392:	d149      	bne.n	8003428 <HAL_RCC_OscConfig+0x1ec>
 8003394:	697b      	ldr	r3, [r7, #20]
 8003396:	f003 0303 	and.w	r3, r3, #3
 800339a:	2b00      	cmp	r3, #0
 800339c:	d144      	bne.n	8003428 <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800339e:	4b4a      	ldr	r3, [pc, #296]	; (80034c8 <HAL_RCC_OscConfig+0x28c>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f003 0304 	and.w	r3, r3, #4
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d005      	beq.n	80033b6 <HAL_RCC_OscConfig+0x17a>
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	68db      	ldr	r3, [r3, #12]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d101      	bne.n	80033b6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80033b2:	2301      	movs	r3, #1
 80033b4:	e2f0      	b.n	8003998 <HAL_RCC_OscConfig+0x75c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
      /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80033b6:	4b44      	ldr	r3, [pc, #272]	; (80034c8 <HAL_RCC_OscConfig+0x28c>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f023 0219 	bic.w	r2, r3, #25
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	68db      	ldr	r3, [r3, #12]
 80033c2:	4941      	ldr	r1, [pc, #260]	; (80034c8 <HAL_RCC_OscConfig+0x28c>)
 80033c4:	4313      	orrs	r3, r2
 80033c6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033c8:	f7fe f95a 	bl	8001680 <HAL_GetTick>
 80033cc:	61f8      	str	r0, [r7, #28]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80033ce:	e008      	b.n	80033e2 <HAL_RCC_OscConfig+0x1a6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80033d0:	f7fe f956 	bl	8001680 <HAL_GetTick>
 80033d4:	4602      	mov	r2, r0
 80033d6:	69fb      	ldr	r3, [r7, #28]
 80033d8:	1ad3      	subs	r3, r2, r3
 80033da:	2b02      	cmp	r3, #2
 80033dc:	d901      	bls.n	80033e2 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 80033de:	2303      	movs	r3, #3
 80033e0:	e2da      	b.n	8003998 <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80033e2:	4b39      	ldr	r3, [pc, #228]	; (80034c8 <HAL_RCC_OscConfig+0x28c>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f003 0304 	and.w	r3, r3, #4
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d0f0      	beq.n	80033d0 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033ee:	f7fe f975 	bl	80016dc <HAL_GetREVID>
 80033f2:	4602      	mov	r2, r0
 80033f4:	f241 0303 	movw	r3, #4099	; 0x1003
 80033f8:	429a      	cmp	r2, r3
 80033fa:	d80a      	bhi.n	8003412 <HAL_RCC_OscConfig+0x1d6>
 80033fc:	4b32      	ldr	r3, [pc, #200]	; (80034c8 <HAL_RCC_OscConfig+0x28c>)
 80033fe:	685b      	ldr	r3, [r3, #4]
 8003400:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	691b      	ldr	r3, [r3, #16]
 8003408:	031b      	lsls	r3, r3, #12
 800340a:	492f      	ldr	r1, [pc, #188]	; (80034c8 <HAL_RCC_OscConfig+0x28c>)
 800340c:	4313      	orrs	r3, r2
 800340e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003410:	e062      	b.n	80034d8 <HAL_RCC_OscConfig+0x29c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003412:	4b2d      	ldr	r3, [pc, #180]	; (80034c8 <HAL_RCC_OscConfig+0x28c>)
 8003414:	685b      	ldr	r3, [r3, #4]
 8003416:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	691b      	ldr	r3, [r3, #16]
 800341e:	061b      	lsls	r3, r3, #24
 8003420:	4929      	ldr	r1, [pc, #164]	; (80034c8 <HAL_RCC_OscConfig+0x28c>)
 8003422:	4313      	orrs	r3, r2
 8003424:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003426:	e057      	b.n	80034d8 <HAL_RCC_OscConfig+0x29c>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	68db      	ldr	r3, [r3, #12]
 800342c:	2b00      	cmp	r3, #0
 800342e:	d038      	beq.n	80034a2 <HAL_RCC_OscConfig+0x266>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003430:	4b25      	ldr	r3, [pc, #148]	; (80034c8 <HAL_RCC_OscConfig+0x28c>)
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f023 0219 	bic.w	r2, r3, #25
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	68db      	ldr	r3, [r3, #12]
 800343c:	4922      	ldr	r1, [pc, #136]	; (80034c8 <HAL_RCC_OscConfig+0x28c>)
 800343e:	4313      	orrs	r3, r2
 8003440:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003442:	f7fe f91d 	bl	8001680 <HAL_GetTick>
 8003446:	61f8      	str	r0, [r7, #28]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003448:	e008      	b.n	800345c <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800344a:	f7fe f919 	bl	8001680 <HAL_GetTick>
 800344e:	4602      	mov	r2, r0
 8003450:	69fb      	ldr	r3, [r7, #28]
 8003452:	1ad3      	subs	r3, r2, r3
 8003454:	2b02      	cmp	r3, #2
 8003456:	d901      	bls.n	800345c <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 8003458:	2303      	movs	r3, #3
 800345a:	e29d      	b.n	8003998 <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800345c:	4b1a      	ldr	r3, [pc, #104]	; (80034c8 <HAL_RCC_OscConfig+0x28c>)
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f003 0304 	and.w	r3, r3, #4
 8003464:	2b00      	cmp	r3, #0
 8003466:	d0f0      	beq.n	800344a <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003468:	f7fe f938 	bl	80016dc <HAL_GetREVID>
 800346c:	4602      	mov	r2, r0
 800346e:	f241 0303 	movw	r3, #4099	; 0x1003
 8003472:	429a      	cmp	r2, r3
 8003474:	d80a      	bhi.n	800348c <HAL_RCC_OscConfig+0x250>
 8003476:	4b14      	ldr	r3, [pc, #80]	; (80034c8 <HAL_RCC_OscConfig+0x28c>)
 8003478:	685b      	ldr	r3, [r3, #4]
 800347a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	691b      	ldr	r3, [r3, #16]
 8003482:	031b      	lsls	r3, r3, #12
 8003484:	4910      	ldr	r1, [pc, #64]	; (80034c8 <HAL_RCC_OscConfig+0x28c>)
 8003486:	4313      	orrs	r3, r2
 8003488:	604b      	str	r3, [r1, #4]
 800348a:	e025      	b.n	80034d8 <HAL_RCC_OscConfig+0x29c>
 800348c:	4b0e      	ldr	r3, [pc, #56]	; (80034c8 <HAL_RCC_OscConfig+0x28c>)
 800348e:	685b      	ldr	r3, [r3, #4]
 8003490:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	691b      	ldr	r3, [r3, #16]
 8003498:	061b      	lsls	r3, r3, #24
 800349a:	490b      	ldr	r1, [pc, #44]	; (80034c8 <HAL_RCC_OscConfig+0x28c>)
 800349c:	4313      	orrs	r3, r2
 800349e:	604b      	str	r3, [r1, #4]
 80034a0:	e01a      	b.n	80034d8 <HAL_RCC_OscConfig+0x29c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80034a2:	4b09      	ldr	r3, [pc, #36]	; (80034c8 <HAL_RCC_OscConfig+0x28c>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	4a08      	ldr	r2, [pc, #32]	; (80034c8 <HAL_RCC_OscConfig+0x28c>)
 80034a8:	f023 0301 	bic.w	r3, r3, #1
 80034ac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034ae:	f7fe f8e7 	bl	8001680 <HAL_GetTick>
 80034b2:	61f8      	str	r0, [r7, #28]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80034b4:	e00a      	b.n	80034cc <HAL_RCC_OscConfig+0x290>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80034b6:	f7fe f8e3 	bl	8001680 <HAL_GetTick>
 80034ba:	4602      	mov	r2, r0
 80034bc:	69fb      	ldr	r3, [r7, #28]
 80034be:	1ad3      	subs	r3, r2, r3
 80034c0:	2b02      	cmp	r3, #2
 80034c2:	d903      	bls.n	80034cc <HAL_RCC_OscConfig+0x290>
          {
            return HAL_TIMEOUT;
 80034c4:	2303      	movs	r3, #3
 80034c6:	e267      	b.n	8003998 <HAL_RCC_OscConfig+0x75c>
 80034c8:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80034cc:	4ba0      	ldr	r3, [pc, #640]	; (8003750 <HAL_RCC_OscConfig+0x514>)
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f003 0304 	and.w	r3, r3, #4
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d1ee      	bne.n	80034b6 <HAL_RCC_OscConfig+0x27a>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f003 0310 	and.w	r3, r3, #16
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	f000 808f 	beq.w	8003604 <HAL_RCC_OscConfig+0x3c8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80034e6:	4b9a      	ldr	r3, [pc, #616]	; (8003750 <HAL_RCC_OscConfig+0x514>)
 80034e8:	691b      	ldr	r3, [r3, #16]
 80034ea:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80034ee:	613b      	str	r3, [r7, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80034f0:	4b97      	ldr	r3, [pc, #604]	; (8003750 <HAL_RCC_OscConfig+0x514>)
 80034f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034f4:	60fb      	str	r3, [r7, #12]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80034f6:	693b      	ldr	r3, [r7, #16]
 80034f8:	2b08      	cmp	r3, #8
 80034fa:	d007      	beq.n	800350c <HAL_RCC_OscConfig+0x2d0>
 80034fc:	693b      	ldr	r3, [r7, #16]
 80034fe:	2b18      	cmp	r3, #24
 8003500:	d12d      	bne.n	800355e <HAL_RCC_OscConfig+0x322>
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	f003 0303 	and.w	r3, r3, #3
 8003508:	2b01      	cmp	r3, #1
 800350a:	d128      	bne.n	800355e <HAL_RCC_OscConfig+0x322>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800350c:	4b90      	ldr	r3, [pc, #576]	; (8003750 <HAL_RCC_OscConfig+0x514>)
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003514:	2b00      	cmp	r3, #0
 8003516:	d005      	beq.n	8003524 <HAL_RCC_OscConfig+0x2e8>
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	69db      	ldr	r3, [r3, #28]
 800351c:	2b80      	cmp	r3, #128	; 0x80
 800351e:	d001      	beq.n	8003524 <HAL_RCC_OscConfig+0x2e8>
      {
        return HAL_ERROR;
 8003520:	2301      	movs	r3, #1
 8003522:	e239      	b.n	8003998 <HAL_RCC_OscConfig+0x75c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003524:	f7fe f8da 	bl	80016dc <HAL_GetREVID>
 8003528:	4602      	mov	r2, r0
 800352a:	f241 0303 	movw	r3, #4099	; 0x1003
 800352e:	429a      	cmp	r2, r3
 8003530:	d80a      	bhi.n	8003548 <HAL_RCC_OscConfig+0x30c>
 8003532:	4b87      	ldr	r3, [pc, #540]	; (8003750 <HAL_RCC_OscConfig+0x514>)
 8003534:	685b      	ldr	r3, [r3, #4]
 8003536:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6a1b      	ldr	r3, [r3, #32]
 800353e:	069b      	lsls	r3, r3, #26
 8003540:	4983      	ldr	r1, [pc, #524]	; (8003750 <HAL_RCC_OscConfig+0x514>)
 8003542:	4313      	orrs	r3, r2
 8003544:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003546:	e05d      	b.n	8003604 <HAL_RCC_OscConfig+0x3c8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003548:	4b81      	ldr	r3, [pc, #516]	; (8003750 <HAL_RCC_OscConfig+0x514>)
 800354a:	68db      	ldr	r3, [r3, #12]
 800354c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6a1b      	ldr	r3, [r3, #32]
 8003554:	061b      	lsls	r3, r3, #24
 8003556:	497e      	ldr	r1, [pc, #504]	; (8003750 <HAL_RCC_OscConfig+0x514>)
 8003558:	4313      	orrs	r3, r2
 800355a:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800355c:	e052      	b.n	8003604 <HAL_RCC_OscConfig+0x3c8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	69db      	ldr	r3, [r3, #28]
 8003562:	2b00      	cmp	r3, #0
 8003564:	d035      	beq.n	80035d2 <HAL_RCC_OscConfig+0x396>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003566:	4b7a      	ldr	r3, [pc, #488]	; (8003750 <HAL_RCC_OscConfig+0x514>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	4a79      	ldr	r2, [pc, #484]	; (8003750 <HAL_RCC_OscConfig+0x514>)
 800356c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003570:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003572:	f7fe f885 	bl	8001680 <HAL_GetTick>
 8003576:	61f8      	str	r0, [r7, #28]

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003578:	e008      	b.n	800358c <HAL_RCC_OscConfig+0x350>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800357a:	f7fe f881 	bl	8001680 <HAL_GetTick>
 800357e:	4602      	mov	r2, r0
 8003580:	69fb      	ldr	r3, [r7, #28]
 8003582:	1ad3      	subs	r3, r2, r3
 8003584:	2b02      	cmp	r3, #2
 8003586:	d901      	bls.n	800358c <HAL_RCC_OscConfig+0x350>
          {
            return HAL_TIMEOUT;
 8003588:	2303      	movs	r3, #3
 800358a:	e205      	b.n	8003998 <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800358c:	4b70      	ldr	r3, [pc, #448]	; (8003750 <HAL_RCC_OscConfig+0x514>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003594:	2b00      	cmp	r3, #0
 8003596:	d0f0      	beq.n	800357a <HAL_RCC_OscConfig+0x33e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003598:	f7fe f8a0 	bl	80016dc <HAL_GetREVID>
 800359c:	4602      	mov	r2, r0
 800359e:	f241 0303 	movw	r3, #4099	; 0x1003
 80035a2:	429a      	cmp	r2, r3
 80035a4:	d80a      	bhi.n	80035bc <HAL_RCC_OscConfig+0x380>
 80035a6:	4b6a      	ldr	r3, [pc, #424]	; (8003750 <HAL_RCC_OscConfig+0x514>)
 80035a8:	685b      	ldr	r3, [r3, #4]
 80035aa:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6a1b      	ldr	r3, [r3, #32]
 80035b2:	069b      	lsls	r3, r3, #26
 80035b4:	4966      	ldr	r1, [pc, #408]	; (8003750 <HAL_RCC_OscConfig+0x514>)
 80035b6:	4313      	orrs	r3, r2
 80035b8:	604b      	str	r3, [r1, #4]
 80035ba:	e023      	b.n	8003604 <HAL_RCC_OscConfig+0x3c8>
 80035bc:	4b64      	ldr	r3, [pc, #400]	; (8003750 <HAL_RCC_OscConfig+0x514>)
 80035be:	68db      	ldr	r3, [r3, #12]
 80035c0:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6a1b      	ldr	r3, [r3, #32]
 80035c8:	061b      	lsls	r3, r3, #24
 80035ca:	4961      	ldr	r1, [pc, #388]	; (8003750 <HAL_RCC_OscConfig+0x514>)
 80035cc:	4313      	orrs	r3, r2
 80035ce:	60cb      	str	r3, [r1, #12]
 80035d0:	e018      	b.n	8003604 <HAL_RCC_OscConfig+0x3c8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80035d2:	4b5f      	ldr	r3, [pc, #380]	; (8003750 <HAL_RCC_OscConfig+0x514>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	4a5e      	ldr	r2, [pc, #376]	; (8003750 <HAL_RCC_OscConfig+0x514>)
 80035d8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80035dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035de:	f7fe f84f 	bl	8001680 <HAL_GetTick>
 80035e2:	61f8      	str	r0, [r7, #28]

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80035e4:	e008      	b.n	80035f8 <HAL_RCC_OscConfig+0x3bc>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80035e6:	f7fe f84b 	bl	8001680 <HAL_GetTick>
 80035ea:	4602      	mov	r2, r0
 80035ec:	69fb      	ldr	r3, [r7, #28]
 80035ee:	1ad3      	subs	r3, r2, r3
 80035f0:	2b02      	cmp	r3, #2
 80035f2:	d901      	bls.n	80035f8 <HAL_RCC_OscConfig+0x3bc>
          {
            return HAL_TIMEOUT;
 80035f4:	2303      	movs	r3, #3
 80035f6:	e1cf      	b.n	8003998 <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80035f8:	4b55      	ldr	r3, [pc, #340]	; (8003750 <HAL_RCC_OscConfig+0x514>)
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003600:	2b00      	cmp	r3, #0
 8003602:	d1f0      	bne.n	80035e6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f003 0308 	and.w	r3, r3, #8
 800360c:	2b00      	cmp	r3, #0
 800360e:	d036      	beq.n	800367e <HAL_RCC_OscConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	695b      	ldr	r3, [r3, #20]
 8003614:	2b00      	cmp	r3, #0
 8003616:	d019      	beq.n	800364c <HAL_RCC_OscConfig+0x410>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003618:	4b4d      	ldr	r3, [pc, #308]	; (8003750 <HAL_RCC_OscConfig+0x514>)
 800361a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800361c:	4a4c      	ldr	r2, [pc, #304]	; (8003750 <HAL_RCC_OscConfig+0x514>)
 800361e:	f043 0301 	orr.w	r3, r3, #1
 8003622:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003624:	f7fe f82c 	bl	8001680 <HAL_GetTick>
 8003628:	61f8      	str	r0, [r7, #28]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800362a:	e008      	b.n	800363e <HAL_RCC_OscConfig+0x402>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800362c:	f7fe f828 	bl	8001680 <HAL_GetTick>
 8003630:	4602      	mov	r2, r0
 8003632:	69fb      	ldr	r3, [r7, #28]
 8003634:	1ad3      	subs	r3, r2, r3
 8003636:	2b02      	cmp	r3, #2
 8003638:	d901      	bls.n	800363e <HAL_RCC_OscConfig+0x402>
        {
          return HAL_TIMEOUT;
 800363a:	2303      	movs	r3, #3
 800363c:	e1ac      	b.n	8003998 <HAL_RCC_OscConfig+0x75c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800363e:	4b44      	ldr	r3, [pc, #272]	; (8003750 <HAL_RCC_OscConfig+0x514>)
 8003640:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003642:	f003 0302 	and.w	r3, r3, #2
 8003646:	2b00      	cmp	r3, #0
 8003648:	d0f0      	beq.n	800362c <HAL_RCC_OscConfig+0x3f0>
 800364a:	e018      	b.n	800367e <HAL_RCC_OscConfig+0x442>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800364c:	4b40      	ldr	r3, [pc, #256]	; (8003750 <HAL_RCC_OscConfig+0x514>)
 800364e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003650:	4a3f      	ldr	r2, [pc, #252]	; (8003750 <HAL_RCC_OscConfig+0x514>)
 8003652:	f023 0301 	bic.w	r3, r3, #1
 8003656:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003658:	f7fe f812 	bl	8001680 <HAL_GetTick>
 800365c:	61f8      	str	r0, [r7, #28]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800365e:	e008      	b.n	8003672 <HAL_RCC_OscConfig+0x436>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003660:	f7fe f80e 	bl	8001680 <HAL_GetTick>
 8003664:	4602      	mov	r2, r0
 8003666:	69fb      	ldr	r3, [r7, #28]
 8003668:	1ad3      	subs	r3, r2, r3
 800366a:	2b02      	cmp	r3, #2
 800366c:	d901      	bls.n	8003672 <HAL_RCC_OscConfig+0x436>
        {
          return HAL_TIMEOUT;
 800366e:	2303      	movs	r3, #3
 8003670:	e192      	b.n	8003998 <HAL_RCC_OscConfig+0x75c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003672:	4b37      	ldr	r3, [pc, #220]	; (8003750 <HAL_RCC_OscConfig+0x514>)
 8003674:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003676:	f003 0302 	and.w	r3, r3, #2
 800367a:	2b00      	cmp	r3, #0
 800367c:	d1f0      	bne.n	8003660 <HAL_RCC_OscConfig+0x424>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f003 0320 	and.w	r3, r3, #32
 8003686:	2b00      	cmp	r3, #0
 8003688:	d036      	beq.n	80036f8 <HAL_RCC_OscConfig+0x4bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	699b      	ldr	r3, [r3, #24]
 800368e:	2b00      	cmp	r3, #0
 8003690:	d019      	beq.n	80036c6 <HAL_RCC_OscConfig+0x48a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003692:	4b2f      	ldr	r3, [pc, #188]	; (8003750 <HAL_RCC_OscConfig+0x514>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	4a2e      	ldr	r2, [pc, #184]	; (8003750 <HAL_RCC_OscConfig+0x514>)
 8003698:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800369c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800369e:	f7fd ffef 	bl	8001680 <HAL_GetTick>
 80036a2:	61f8      	str	r0, [r7, #28]

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80036a4:	e008      	b.n	80036b8 <HAL_RCC_OscConfig+0x47c>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80036a6:	f7fd ffeb 	bl	8001680 <HAL_GetTick>
 80036aa:	4602      	mov	r2, r0
 80036ac:	69fb      	ldr	r3, [r7, #28]
 80036ae:	1ad3      	subs	r3, r2, r3
 80036b0:	2b02      	cmp	r3, #2
 80036b2:	d901      	bls.n	80036b8 <HAL_RCC_OscConfig+0x47c>
        {
          return HAL_TIMEOUT;
 80036b4:	2303      	movs	r3, #3
 80036b6:	e16f      	b.n	8003998 <HAL_RCC_OscConfig+0x75c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80036b8:	4b25      	ldr	r3, [pc, #148]	; (8003750 <HAL_RCC_OscConfig+0x514>)
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d0f0      	beq.n	80036a6 <HAL_RCC_OscConfig+0x46a>
 80036c4:	e018      	b.n	80036f8 <HAL_RCC_OscConfig+0x4bc>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80036c6:	4b22      	ldr	r3, [pc, #136]	; (8003750 <HAL_RCC_OscConfig+0x514>)
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	4a21      	ldr	r2, [pc, #132]	; (8003750 <HAL_RCC_OscConfig+0x514>)
 80036cc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80036d0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80036d2:	f7fd ffd5 	bl	8001680 <HAL_GetTick>
 80036d6:	61f8      	str	r0, [r7, #28]

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80036d8:	e008      	b.n	80036ec <HAL_RCC_OscConfig+0x4b0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80036da:	f7fd ffd1 	bl	8001680 <HAL_GetTick>
 80036de:	4602      	mov	r2, r0
 80036e0:	69fb      	ldr	r3, [r7, #28]
 80036e2:	1ad3      	subs	r3, r2, r3
 80036e4:	2b02      	cmp	r3, #2
 80036e6:	d901      	bls.n	80036ec <HAL_RCC_OscConfig+0x4b0>
        {
          return HAL_TIMEOUT;
 80036e8:	2303      	movs	r3, #3
 80036ea:	e155      	b.n	8003998 <HAL_RCC_OscConfig+0x75c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80036ec:	4b18      	ldr	r3, [pc, #96]	; (8003750 <HAL_RCC_OscConfig+0x514>)
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d1f0      	bne.n	80036da <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f003 0304 	and.w	r3, r3, #4
 8003700:	2b00      	cmp	r3, #0
 8003702:	f000 8086 	beq.w	8003812 <HAL_RCC_OscConfig+0x5d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003706:	4b13      	ldr	r3, [pc, #76]	; (8003754 <HAL_RCC_OscConfig+0x518>)
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	4a12      	ldr	r2, [pc, #72]	; (8003754 <HAL_RCC_OscConfig+0x518>)
 800370c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003710:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003712:	f7fd ffb5 	bl	8001680 <HAL_GetTick>
 8003716:	61f8      	str	r0, [r7, #28]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003718:	e008      	b.n	800372c <HAL_RCC_OscConfig+0x4f0>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800371a:	f7fd ffb1 	bl	8001680 <HAL_GetTick>
 800371e:	4602      	mov	r2, r0
 8003720:	69fb      	ldr	r3, [r7, #28]
 8003722:	1ad3      	subs	r3, r2, r3
 8003724:	2b64      	cmp	r3, #100	; 0x64
 8003726:	d901      	bls.n	800372c <HAL_RCC_OscConfig+0x4f0>
      {
        return HAL_TIMEOUT;
 8003728:	2303      	movs	r3, #3
 800372a:	e135      	b.n	8003998 <HAL_RCC_OscConfig+0x75c>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800372c:	4b09      	ldr	r3, [pc, #36]	; (8003754 <HAL_RCC_OscConfig+0x518>)
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003734:	2b00      	cmp	r3, #0
 8003736:	d0f0      	beq.n	800371a <HAL_RCC_OscConfig+0x4de>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	689b      	ldr	r3, [r3, #8]
 800373c:	2b01      	cmp	r3, #1
 800373e:	d10b      	bne.n	8003758 <HAL_RCC_OscConfig+0x51c>
 8003740:	4b03      	ldr	r3, [pc, #12]	; (8003750 <HAL_RCC_OscConfig+0x514>)
 8003742:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003744:	4a02      	ldr	r2, [pc, #8]	; (8003750 <HAL_RCC_OscConfig+0x514>)
 8003746:	f043 0301 	orr.w	r3, r3, #1
 800374a:	6713      	str	r3, [r2, #112]	; 0x70
 800374c:	e032      	b.n	80037b4 <HAL_RCC_OscConfig+0x578>
 800374e:	bf00      	nop
 8003750:	58024400 	.word	0x58024400
 8003754:	58024800 	.word	0x58024800
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	689b      	ldr	r3, [r3, #8]
 800375c:	2b00      	cmp	r3, #0
 800375e:	d10c      	bne.n	800377a <HAL_RCC_OscConfig+0x53e>
 8003760:	4b8f      	ldr	r3, [pc, #572]	; (80039a0 <HAL_RCC_OscConfig+0x764>)
 8003762:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003764:	4a8e      	ldr	r2, [pc, #568]	; (80039a0 <HAL_RCC_OscConfig+0x764>)
 8003766:	f023 0301 	bic.w	r3, r3, #1
 800376a:	6713      	str	r3, [r2, #112]	; 0x70
 800376c:	4b8c      	ldr	r3, [pc, #560]	; (80039a0 <HAL_RCC_OscConfig+0x764>)
 800376e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003770:	4a8b      	ldr	r2, [pc, #556]	; (80039a0 <HAL_RCC_OscConfig+0x764>)
 8003772:	f023 0304 	bic.w	r3, r3, #4
 8003776:	6713      	str	r3, [r2, #112]	; 0x70
 8003778:	e01c      	b.n	80037b4 <HAL_RCC_OscConfig+0x578>
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	689b      	ldr	r3, [r3, #8]
 800377e:	2b05      	cmp	r3, #5
 8003780:	d10c      	bne.n	800379c <HAL_RCC_OscConfig+0x560>
 8003782:	4b87      	ldr	r3, [pc, #540]	; (80039a0 <HAL_RCC_OscConfig+0x764>)
 8003784:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003786:	4a86      	ldr	r2, [pc, #536]	; (80039a0 <HAL_RCC_OscConfig+0x764>)
 8003788:	f043 0304 	orr.w	r3, r3, #4
 800378c:	6713      	str	r3, [r2, #112]	; 0x70
 800378e:	4b84      	ldr	r3, [pc, #528]	; (80039a0 <HAL_RCC_OscConfig+0x764>)
 8003790:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003792:	4a83      	ldr	r2, [pc, #524]	; (80039a0 <HAL_RCC_OscConfig+0x764>)
 8003794:	f043 0301 	orr.w	r3, r3, #1
 8003798:	6713      	str	r3, [r2, #112]	; 0x70
 800379a:	e00b      	b.n	80037b4 <HAL_RCC_OscConfig+0x578>
 800379c:	4b80      	ldr	r3, [pc, #512]	; (80039a0 <HAL_RCC_OscConfig+0x764>)
 800379e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037a0:	4a7f      	ldr	r2, [pc, #508]	; (80039a0 <HAL_RCC_OscConfig+0x764>)
 80037a2:	f023 0301 	bic.w	r3, r3, #1
 80037a6:	6713      	str	r3, [r2, #112]	; 0x70
 80037a8:	4b7d      	ldr	r3, [pc, #500]	; (80039a0 <HAL_RCC_OscConfig+0x764>)
 80037aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037ac:	4a7c      	ldr	r2, [pc, #496]	; (80039a0 <HAL_RCC_OscConfig+0x764>)
 80037ae:	f023 0304 	bic.w	r3, r3, #4
 80037b2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	689b      	ldr	r3, [r3, #8]
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d015      	beq.n	80037e8 <HAL_RCC_OscConfig+0x5ac>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037bc:	f7fd ff60 	bl	8001680 <HAL_GetTick>
 80037c0:	61f8      	str	r0, [r7, #28]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80037c2:	e00a      	b.n	80037da <HAL_RCC_OscConfig+0x59e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80037c4:	f7fd ff5c 	bl	8001680 <HAL_GetTick>
 80037c8:	4602      	mov	r2, r0
 80037ca:	69fb      	ldr	r3, [r7, #28]
 80037cc:	1ad3      	subs	r3, r2, r3
 80037ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d901      	bls.n	80037da <HAL_RCC_OscConfig+0x59e>
        {
          return HAL_TIMEOUT;
 80037d6:	2303      	movs	r3, #3
 80037d8:	e0de      	b.n	8003998 <HAL_RCC_OscConfig+0x75c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80037da:	4b71      	ldr	r3, [pc, #452]	; (80039a0 <HAL_RCC_OscConfig+0x764>)
 80037dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037de:	f003 0302 	and.w	r3, r3, #2
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d0ee      	beq.n	80037c4 <HAL_RCC_OscConfig+0x588>
 80037e6:	e014      	b.n	8003812 <HAL_RCC_OscConfig+0x5d6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037e8:	f7fd ff4a 	bl	8001680 <HAL_GetTick>
 80037ec:	61f8      	str	r0, [r7, #28]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80037ee:	e00a      	b.n	8003806 <HAL_RCC_OscConfig+0x5ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80037f0:	f7fd ff46 	bl	8001680 <HAL_GetTick>
 80037f4:	4602      	mov	r2, r0
 80037f6:	69fb      	ldr	r3, [r7, #28]
 80037f8:	1ad3      	subs	r3, r2, r3
 80037fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80037fe:	4293      	cmp	r3, r2
 8003800:	d901      	bls.n	8003806 <HAL_RCC_OscConfig+0x5ca>
        {
          return HAL_TIMEOUT;
 8003802:	2303      	movs	r3, #3
 8003804:	e0c8      	b.n	8003998 <HAL_RCC_OscConfig+0x75c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003806:	4b66      	ldr	r3, [pc, #408]	; (80039a0 <HAL_RCC_OscConfig+0x764>)
 8003808:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800380a:	f003 0302 	and.w	r3, r3, #2
 800380e:	2b00      	cmp	r3, #0
 8003810:	d1ee      	bne.n	80037f0 <HAL_RCC_OscConfig+0x5b4>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003816:	2b00      	cmp	r3, #0
 8003818:	f000 80bd 	beq.w	8003996 <HAL_RCC_OscConfig+0x75a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800381c:	4b60      	ldr	r3, [pc, #384]	; (80039a0 <HAL_RCC_OscConfig+0x764>)
 800381e:	691b      	ldr	r3, [r3, #16]
 8003820:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003824:	2b18      	cmp	r3, #24
 8003826:	f000 80b4 	beq.w	8003992 <HAL_RCC_OscConfig+0x756>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800382e:	2b02      	cmp	r3, #2
 8003830:	f040 8095 	bne.w	800395e <HAL_RCC_OscConfig+0x722>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003834:	4b5a      	ldr	r3, [pc, #360]	; (80039a0 <HAL_RCC_OscConfig+0x764>)
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	4a59      	ldr	r2, [pc, #356]	; (80039a0 <HAL_RCC_OscConfig+0x764>)
 800383a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800383e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003840:	f7fd ff1e 	bl	8001680 <HAL_GetTick>
 8003844:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003846:	e008      	b.n	800385a <HAL_RCC_OscConfig+0x61e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003848:	f7fd ff1a 	bl	8001680 <HAL_GetTick>
 800384c:	4602      	mov	r2, r0
 800384e:	69fb      	ldr	r3, [r7, #28]
 8003850:	1ad3      	subs	r3, r2, r3
 8003852:	2b02      	cmp	r3, #2
 8003854:	d901      	bls.n	800385a <HAL_RCC_OscConfig+0x61e>
          {
            return HAL_TIMEOUT;
 8003856:	2303      	movs	r3, #3
 8003858:	e09e      	b.n	8003998 <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800385a:	4b51      	ldr	r3, [pc, #324]	; (80039a0 <HAL_RCC_OscConfig+0x764>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003862:	2b00      	cmp	r3, #0
 8003864:	d1f0      	bne.n	8003848 <HAL_RCC_OscConfig+0x60c>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003866:	4b4e      	ldr	r3, [pc, #312]	; (80039a0 <HAL_RCC_OscConfig+0x764>)
 8003868:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800386a:	4b4e      	ldr	r3, [pc, #312]	; (80039a4 <HAL_RCC_OscConfig+0x768>)
 800386c:	4013      	ands	r3, r2
 800386e:	687a      	ldr	r2, [r7, #4]
 8003870:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8003872:	687a      	ldr	r2, [r7, #4]
 8003874:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003876:	0112      	lsls	r2, r2, #4
 8003878:	430a      	orrs	r2, r1
 800387a:	4949      	ldr	r1, [pc, #292]	; (80039a0 <HAL_RCC_OscConfig+0x764>)
 800387c:	4313      	orrs	r3, r2
 800387e:	628b      	str	r3, [r1, #40]	; 0x28
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003884:	3b01      	subs	r3, #1
 8003886:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800388e:	3b01      	subs	r3, #1
 8003890:	025b      	lsls	r3, r3, #9
 8003892:	b29b      	uxth	r3, r3
 8003894:	431a      	orrs	r2, r3
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800389a:	3b01      	subs	r3, #1
 800389c:	041b      	lsls	r3, r3, #16
 800389e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80038a2:	431a      	orrs	r2, r3
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038a8:	3b01      	subs	r3, #1
 80038aa:	061b      	lsls	r3, r3, #24
 80038ac:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80038b0:	493b      	ldr	r1, [pc, #236]	; (80039a0 <HAL_RCC_OscConfig+0x764>)
 80038b2:	4313      	orrs	r3, r2
 80038b4:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80038b6:	4b3a      	ldr	r3, [pc, #232]	; (80039a0 <HAL_RCC_OscConfig+0x764>)
 80038b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038ba:	4a39      	ldr	r2, [pc, #228]	; (80039a0 <HAL_RCC_OscConfig+0x764>)
 80038bc:	f023 0301 	bic.w	r3, r3, #1
 80038c0:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL  PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80038c2:	4b37      	ldr	r3, [pc, #220]	; (80039a0 <HAL_RCC_OscConfig+0x764>)
 80038c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80038c6:	4b38      	ldr	r3, [pc, #224]	; (80039a8 <HAL_RCC_OscConfig+0x76c>)
 80038c8:	4013      	ands	r3, r2
 80038ca:	687a      	ldr	r2, [r7, #4]
 80038cc:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80038ce:	00d2      	lsls	r2, r2, #3
 80038d0:	4933      	ldr	r1, [pc, #204]	; (80039a0 <HAL_RCC_OscConfig+0x764>)
 80038d2:	4313      	orrs	r3, r2
 80038d4:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80038d6:	4b32      	ldr	r3, [pc, #200]	; (80039a0 <HAL_RCC_OscConfig+0x764>)
 80038d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038da:	f023 020c 	bic.w	r2, r3, #12
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038e2:	492f      	ldr	r1, [pc, #188]	; (80039a0 <HAL_RCC_OscConfig+0x764>)
 80038e4:	4313      	orrs	r3, r2
 80038e6:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80038e8:	4b2d      	ldr	r3, [pc, #180]	; (80039a0 <HAL_RCC_OscConfig+0x764>)
 80038ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038ec:	f023 0202 	bic.w	r2, r3, #2
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038f4:	492a      	ldr	r1, [pc, #168]	; (80039a0 <HAL_RCC_OscConfig+0x764>)
 80038f6:	4313      	orrs	r3, r2
 80038f8:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80038fa:	4b29      	ldr	r3, [pc, #164]	; (80039a0 <HAL_RCC_OscConfig+0x764>)
 80038fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038fe:	4a28      	ldr	r2, [pc, #160]	; (80039a0 <HAL_RCC_OscConfig+0x764>)
 8003900:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003904:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003906:	4b26      	ldr	r3, [pc, #152]	; (80039a0 <HAL_RCC_OscConfig+0x764>)
 8003908:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800390a:	4a25      	ldr	r2, [pc, #148]	; (80039a0 <HAL_RCC_OscConfig+0x764>)
 800390c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003910:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003912:	4b23      	ldr	r3, [pc, #140]	; (80039a0 <HAL_RCC_OscConfig+0x764>)
 8003914:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003916:	4a22      	ldr	r2, [pc, #136]	; (80039a0 <HAL_RCC_OscConfig+0x764>)
 8003918:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800391c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 800391e:	4b20      	ldr	r3, [pc, #128]	; (80039a0 <HAL_RCC_OscConfig+0x764>)
 8003920:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003922:	4a1f      	ldr	r2, [pc, #124]	; (80039a0 <HAL_RCC_OscConfig+0x764>)
 8003924:	f043 0301 	orr.w	r3, r3, #1
 8003928:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800392a:	4b1d      	ldr	r3, [pc, #116]	; (80039a0 <HAL_RCC_OscConfig+0x764>)
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	4a1c      	ldr	r2, [pc, #112]	; (80039a0 <HAL_RCC_OscConfig+0x764>)
 8003930:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003934:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003936:	f7fd fea3 	bl	8001680 <HAL_GetTick>
 800393a:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800393c:	e008      	b.n	8003950 <HAL_RCC_OscConfig+0x714>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800393e:	f7fd fe9f 	bl	8001680 <HAL_GetTick>
 8003942:	4602      	mov	r2, r0
 8003944:	69fb      	ldr	r3, [r7, #28]
 8003946:	1ad3      	subs	r3, r2, r3
 8003948:	2b02      	cmp	r3, #2
 800394a:	d901      	bls.n	8003950 <HAL_RCC_OscConfig+0x714>
          {
            return HAL_TIMEOUT;
 800394c:	2303      	movs	r3, #3
 800394e:	e023      	b.n	8003998 <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003950:	4b13      	ldr	r3, [pc, #76]	; (80039a0 <HAL_RCC_OscConfig+0x764>)
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003958:	2b00      	cmp	r3, #0
 800395a:	d0f0      	beq.n	800393e <HAL_RCC_OscConfig+0x702>
 800395c:	e01b      	b.n	8003996 <HAL_RCC_OscConfig+0x75a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800395e:	4b10      	ldr	r3, [pc, #64]	; (80039a0 <HAL_RCC_OscConfig+0x764>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	4a0f      	ldr	r2, [pc, #60]	; (80039a0 <HAL_RCC_OscConfig+0x764>)
 8003964:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003968:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800396a:	f7fd fe89 	bl	8001680 <HAL_GetTick>
 800396e:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003970:	e008      	b.n	8003984 <HAL_RCC_OscConfig+0x748>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003972:	f7fd fe85 	bl	8001680 <HAL_GetTick>
 8003976:	4602      	mov	r2, r0
 8003978:	69fb      	ldr	r3, [r7, #28]
 800397a:	1ad3      	subs	r3, r2, r3
 800397c:	2b02      	cmp	r3, #2
 800397e:	d901      	bls.n	8003984 <HAL_RCC_OscConfig+0x748>
          {
            return HAL_TIMEOUT;
 8003980:	2303      	movs	r3, #3
 8003982:	e009      	b.n	8003998 <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003984:	4b06      	ldr	r3, [pc, #24]	; (80039a0 <HAL_RCC_OscConfig+0x764>)
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800398c:	2b00      	cmp	r3, #0
 800398e:	d1f0      	bne.n	8003972 <HAL_RCC_OscConfig+0x736>
 8003990:	e001      	b.n	8003996 <HAL_RCC_OscConfig+0x75a>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8003992:	2301      	movs	r3, #1
 8003994:	e000      	b.n	8003998 <HAL_RCC_OscConfig+0x75c>
    }
  }
  return HAL_OK;
 8003996:	2300      	movs	r3, #0
}
 8003998:	4618      	mov	r0, r3
 800399a:	3728      	adds	r7, #40	; 0x28
 800399c:	46bd      	mov	sp, r7
 800399e:	bd80      	pop	{r7, pc}
 80039a0:	58024400 	.word	0x58024400
 80039a4:	fffffc0c 	.word	0xfffffc0c
 80039a8:	ffff0007 	.word	0xffff0007

080039ac <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b084      	sub	sp, #16
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
 80039b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d101      	bne.n	80039c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80039bc:	2301      	movs	r3, #1
 80039be:	e18d      	b.n	8003cdc <HAL_RCC_ClockConfig+0x330>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80039c0:	4b8a      	ldr	r3, [pc, #552]	; (8003bec <HAL_RCC_ClockConfig+0x240>)
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f003 030f 	and.w	r3, r3, #15
 80039c8:	683a      	ldr	r2, [r7, #0]
 80039ca:	429a      	cmp	r2, r3
 80039cc:	d910      	bls.n	80039f0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039ce:	4b87      	ldr	r3, [pc, #540]	; (8003bec <HAL_RCC_ClockConfig+0x240>)
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f023 020f 	bic.w	r2, r3, #15
 80039d6:	4985      	ldr	r1, [pc, #532]	; (8003bec <HAL_RCC_ClockConfig+0x240>)
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	4313      	orrs	r3, r2
 80039dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80039de:	4b83      	ldr	r3, [pc, #524]	; (8003bec <HAL_RCC_ClockConfig+0x240>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f003 030f 	and.w	r3, r3, #15
 80039e6:	683a      	ldr	r2, [r7, #0]
 80039e8:	429a      	cmp	r2, r3
 80039ea:	d001      	beq.n	80039f0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80039ec:	2301      	movs	r3, #1
 80039ee:	e175      	b.n	8003cdc <HAL_RCC_ClockConfig+0x330>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f003 0304 	and.w	r3, r3, #4
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d010      	beq.n	8003a1e <HAL_RCC_ClockConfig+0x72>
  {
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	691a      	ldr	r2, [r3, #16]
 8003a00:	4b7b      	ldr	r3, [pc, #492]	; (8003bf0 <HAL_RCC_ClockConfig+0x244>)
 8003a02:	699b      	ldr	r3, [r3, #24]
 8003a04:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003a08:	429a      	cmp	r2, r3
 8003a0a:	d908      	bls.n	8003a1e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003a0c:	4b78      	ldr	r3, [pc, #480]	; (8003bf0 <HAL_RCC_ClockConfig+0x244>)
 8003a0e:	699b      	ldr	r3, [r3, #24]
 8003a10:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	691b      	ldr	r3, [r3, #16]
 8003a18:	4975      	ldr	r1, [pc, #468]	; (8003bf0 <HAL_RCC_ClockConfig+0x244>)
 8003a1a:	4313      	orrs	r3, r2
 8003a1c:	618b      	str	r3, [r1, #24]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f003 0308 	and.w	r3, r3, #8
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d010      	beq.n	8003a4c <HAL_RCC_ClockConfig+0xa0>
  {
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	695a      	ldr	r2, [r3, #20]
 8003a2e:	4b70      	ldr	r3, [pc, #448]	; (8003bf0 <HAL_RCC_ClockConfig+0x244>)
 8003a30:	69db      	ldr	r3, [r3, #28]
 8003a32:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003a36:	429a      	cmp	r2, r3
 8003a38:	d908      	bls.n	8003a4c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003a3a:	4b6d      	ldr	r3, [pc, #436]	; (8003bf0 <HAL_RCC_ClockConfig+0x244>)
 8003a3c:	69db      	ldr	r3, [r3, #28]
 8003a3e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	695b      	ldr	r3, [r3, #20]
 8003a46:	496a      	ldr	r1, [pc, #424]	; (8003bf0 <HAL_RCC_ClockConfig+0x244>)
 8003a48:	4313      	orrs	r3, r2
 8003a4a:	61cb      	str	r3, [r1, #28]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f003 0310 	and.w	r3, r3, #16
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d010      	beq.n	8003a7a <HAL_RCC_ClockConfig+0xce>
  {
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	699a      	ldr	r2, [r3, #24]
 8003a5c:	4b64      	ldr	r3, [pc, #400]	; (8003bf0 <HAL_RCC_ClockConfig+0x244>)
 8003a5e:	69db      	ldr	r3, [r3, #28]
 8003a60:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003a64:	429a      	cmp	r2, r3
 8003a66:	d908      	bls.n	8003a7a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003a68:	4b61      	ldr	r3, [pc, #388]	; (8003bf0 <HAL_RCC_ClockConfig+0x244>)
 8003a6a:	69db      	ldr	r3, [r3, #28]
 8003a6c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	699b      	ldr	r3, [r3, #24]
 8003a74:	495e      	ldr	r1, [pc, #376]	; (8003bf0 <HAL_RCC_ClockConfig+0x244>)
 8003a76:	4313      	orrs	r3, r2
 8003a78:	61cb      	str	r3, [r1, #28]
    }
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f003 0320 	and.w	r3, r3, #32
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d010      	beq.n	8003aa8 <HAL_RCC_ClockConfig+0xfc>
  {
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	69da      	ldr	r2, [r3, #28]
 8003a8a:	4b59      	ldr	r3, [pc, #356]	; (8003bf0 <HAL_RCC_ClockConfig+0x244>)
 8003a8c:	6a1b      	ldr	r3, [r3, #32]
 8003a8e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003a92:	429a      	cmp	r2, r3
 8003a94:	d908      	bls.n	8003aa8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003a96:	4b56      	ldr	r3, [pc, #344]	; (8003bf0 <HAL_RCC_ClockConfig+0x244>)
 8003a98:	6a1b      	ldr	r3, [r3, #32]
 8003a9a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	69db      	ldr	r3, [r3, #28]
 8003aa2:	4953      	ldr	r1, [pc, #332]	; (8003bf0 <HAL_RCC_ClockConfig+0x244>)
 8003aa4:	4313      	orrs	r3, r2
 8003aa6:	620b      	str	r3, [r1, #32]
    }
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f003 0302 	and.w	r3, r3, #2
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d010      	beq.n	8003ad6 <HAL_RCC_ClockConfig+0x12a>
  {
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	68da      	ldr	r2, [r3, #12]
 8003ab8:	4b4d      	ldr	r3, [pc, #308]	; (8003bf0 <HAL_RCC_ClockConfig+0x244>)
 8003aba:	699b      	ldr	r3, [r3, #24]
 8003abc:	f003 030f 	and.w	r3, r3, #15
 8003ac0:	429a      	cmp	r2, r3
 8003ac2:	d908      	bls.n	8003ad6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ac4:	4b4a      	ldr	r3, [pc, #296]	; (8003bf0 <HAL_RCC_ClockConfig+0x244>)
 8003ac6:	699b      	ldr	r3, [r3, #24]
 8003ac8:	f023 020f 	bic.w	r2, r3, #15
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	68db      	ldr	r3, [r3, #12]
 8003ad0:	4947      	ldr	r1, [pc, #284]	; (8003bf0 <HAL_RCC_ClockConfig+0x244>)
 8003ad2:	4313      	orrs	r3, r2
 8003ad4:	618b      	str	r3, [r1, #24]
    }
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f003 0301 	and.w	r3, r3, #1
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d055      	beq.n	8003b8e <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003ae2:	4b43      	ldr	r3, [pc, #268]	; (8003bf0 <HAL_RCC_ClockConfig+0x244>)
 8003ae4:	699b      	ldr	r3, [r3, #24]
 8003ae6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	689b      	ldr	r3, [r3, #8]
 8003aee:	4940      	ldr	r1, [pc, #256]	; (8003bf0 <HAL_RCC_ClockConfig+0x244>)
 8003af0:	4313      	orrs	r3, r2
 8003af2:	618b      	str	r3, [r1, #24]
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	685b      	ldr	r3, [r3, #4]
 8003af8:	2b02      	cmp	r3, #2
 8003afa:	d107      	bne.n	8003b0c <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003afc:	4b3c      	ldr	r3, [pc, #240]	; (8003bf0 <HAL_RCC_ClockConfig+0x244>)
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d121      	bne.n	8003b4c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003b08:	2301      	movs	r3, #1
 8003b0a:	e0e7      	b.n	8003cdc <HAL_RCC_ClockConfig+0x330>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	685b      	ldr	r3, [r3, #4]
 8003b10:	2b03      	cmp	r3, #3
 8003b12:	d107      	bne.n	8003b24 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003b14:	4b36      	ldr	r3, [pc, #216]	; (8003bf0 <HAL_RCC_ClockConfig+0x244>)
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d115      	bne.n	8003b4c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003b20:	2301      	movs	r3, #1
 8003b22:	e0db      	b.n	8003cdc <HAL_RCC_ClockConfig+0x330>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	685b      	ldr	r3, [r3, #4]
 8003b28:	2b01      	cmp	r3, #1
 8003b2a:	d107      	bne.n	8003b3c <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003b2c:	4b30      	ldr	r3, [pc, #192]	; (8003bf0 <HAL_RCC_ClockConfig+0x244>)
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d109      	bne.n	8003b4c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003b38:	2301      	movs	r3, #1
 8003b3a:	e0cf      	b.n	8003cdc <HAL_RCC_ClockConfig+0x330>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003b3c:	4b2c      	ldr	r3, [pc, #176]	; (8003bf0 <HAL_RCC_ClockConfig+0x244>)
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f003 0304 	and.w	r3, r3, #4
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d101      	bne.n	8003b4c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003b48:	2301      	movs	r3, #1
 8003b4a:	e0c7      	b.n	8003cdc <HAL_RCC_ClockConfig+0x330>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003b4c:	4b28      	ldr	r3, [pc, #160]	; (8003bf0 <HAL_RCC_ClockConfig+0x244>)
 8003b4e:	691b      	ldr	r3, [r3, #16]
 8003b50:	f023 0207 	bic.w	r2, r3, #7
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	685b      	ldr	r3, [r3, #4]
 8003b58:	4925      	ldr	r1, [pc, #148]	; (8003bf0 <HAL_RCC_ClockConfig+0x244>)
 8003b5a:	4313      	orrs	r3, r2
 8003b5c:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b5e:	f7fd fd8f 	bl	8001680 <HAL_GetTick>
 8003b62:	60f8      	str	r0, [r7, #12]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b64:	e00a      	b.n	8003b7c <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b66:	f7fd fd8b 	bl	8001680 <HAL_GetTick>
 8003b6a:	4602      	mov	r2, r0
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	1ad3      	subs	r3, r2, r3
 8003b70:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b74:	4293      	cmp	r3, r2
 8003b76:	d901      	bls.n	8003b7c <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8003b78:	2303      	movs	r3, #3
 8003b7a:	e0af      	b.n	8003cdc <HAL_RCC_ClockConfig+0x330>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b7c:	4b1c      	ldr	r3, [pc, #112]	; (8003bf0 <HAL_RCC_ClockConfig+0x244>)
 8003b7e:	691b      	ldr	r3, [r3, #16]
 8003b80:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	685b      	ldr	r3, [r3, #4]
 8003b88:	00db      	lsls	r3, r3, #3
 8003b8a:	429a      	cmp	r2, r3
 8003b8c:	d1eb      	bne.n	8003b66 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f003 0302 	and.w	r3, r3, #2
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d010      	beq.n	8003bbc <HAL_RCC_ClockConfig+0x210>
  {
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	68da      	ldr	r2, [r3, #12]
 8003b9e:	4b14      	ldr	r3, [pc, #80]	; (8003bf0 <HAL_RCC_ClockConfig+0x244>)
 8003ba0:	699b      	ldr	r3, [r3, #24]
 8003ba2:	f003 030f 	and.w	r3, r3, #15
 8003ba6:	429a      	cmp	r2, r3
 8003ba8:	d208      	bcs.n	8003bbc <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003baa:	4b11      	ldr	r3, [pc, #68]	; (8003bf0 <HAL_RCC_ClockConfig+0x244>)
 8003bac:	699b      	ldr	r3, [r3, #24]
 8003bae:	f023 020f 	bic.w	r2, r3, #15
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	68db      	ldr	r3, [r3, #12]
 8003bb6:	490e      	ldr	r1, [pc, #56]	; (8003bf0 <HAL_RCC_ClockConfig+0x244>)
 8003bb8:	4313      	orrs	r3, r2
 8003bba:	618b      	str	r3, [r1, #24]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003bbc:	4b0b      	ldr	r3, [pc, #44]	; (8003bec <HAL_RCC_ClockConfig+0x240>)
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f003 030f 	and.w	r3, r3, #15
 8003bc4:	683a      	ldr	r2, [r7, #0]
 8003bc6:	429a      	cmp	r2, r3
 8003bc8:	d214      	bcs.n	8003bf4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bca:	4b08      	ldr	r3, [pc, #32]	; (8003bec <HAL_RCC_ClockConfig+0x240>)
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f023 020f 	bic.w	r2, r3, #15
 8003bd2:	4906      	ldr	r1, [pc, #24]	; (8003bec <HAL_RCC_ClockConfig+0x240>)
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	4313      	orrs	r3, r2
 8003bd8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bda:	4b04      	ldr	r3, [pc, #16]	; (8003bec <HAL_RCC_ClockConfig+0x240>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f003 030f 	and.w	r3, r3, #15
 8003be2:	683a      	ldr	r2, [r7, #0]
 8003be4:	429a      	cmp	r2, r3
 8003be6:	d005      	beq.n	8003bf4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003be8:	2301      	movs	r3, #1
 8003bea:	e077      	b.n	8003cdc <HAL_RCC_ClockConfig+0x330>
 8003bec:	52002000 	.word	0x52002000
 8003bf0:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f003 0304 	and.w	r3, r3, #4
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d010      	beq.n	8003c22 <HAL_RCC_ClockConfig+0x276>
 {
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	691a      	ldr	r2, [r3, #16]
 8003c04:	4b37      	ldr	r3, [pc, #220]	; (8003ce4 <HAL_RCC_ClockConfig+0x338>)
 8003c06:	699b      	ldr	r3, [r3, #24]
 8003c08:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003c0c:	429a      	cmp	r2, r3
 8003c0e:	d208      	bcs.n	8003c22 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003c10:	4b34      	ldr	r3, [pc, #208]	; (8003ce4 <HAL_RCC_ClockConfig+0x338>)
 8003c12:	699b      	ldr	r3, [r3, #24]
 8003c14:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	691b      	ldr	r3, [r3, #16]
 8003c1c:	4931      	ldr	r1, [pc, #196]	; (8003ce4 <HAL_RCC_ClockConfig+0x338>)
 8003c1e:	4313      	orrs	r3, r2
 8003c20:	618b      	str	r3, [r1, #24]
   }
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f003 0308 	and.w	r3, r3, #8
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d010      	beq.n	8003c50 <HAL_RCC_ClockConfig+0x2a4>
 {
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	695a      	ldr	r2, [r3, #20]
 8003c32:	4b2c      	ldr	r3, [pc, #176]	; (8003ce4 <HAL_RCC_ClockConfig+0x338>)
 8003c34:	69db      	ldr	r3, [r3, #28]
 8003c36:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003c3a:	429a      	cmp	r2, r3
 8003c3c:	d208      	bcs.n	8003c50 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003c3e:	4b29      	ldr	r3, [pc, #164]	; (8003ce4 <HAL_RCC_ClockConfig+0x338>)
 8003c40:	69db      	ldr	r3, [r3, #28]
 8003c42:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	695b      	ldr	r3, [r3, #20]
 8003c4a:	4926      	ldr	r1, [pc, #152]	; (8003ce4 <HAL_RCC_ClockConfig+0x338>)
 8003c4c:	4313      	orrs	r3, r2
 8003c4e:	61cb      	str	r3, [r1, #28]
   }
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f003 0310 	and.w	r3, r3, #16
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d010      	beq.n	8003c7e <HAL_RCC_ClockConfig+0x2d2>
 {
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	699a      	ldr	r2, [r3, #24]
 8003c60:	4b20      	ldr	r3, [pc, #128]	; (8003ce4 <HAL_RCC_ClockConfig+0x338>)
 8003c62:	69db      	ldr	r3, [r3, #28]
 8003c64:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003c68:	429a      	cmp	r2, r3
 8003c6a:	d208      	bcs.n	8003c7e <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003c6c:	4b1d      	ldr	r3, [pc, #116]	; (8003ce4 <HAL_RCC_ClockConfig+0x338>)
 8003c6e:	69db      	ldr	r3, [r3, #28]
 8003c70:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	699b      	ldr	r3, [r3, #24]
 8003c78:	491a      	ldr	r1, [pc, #104]	; (8003ce4 <HAL_RCC_ClockConfig+0x338>)
 8003c7a:	4313      	orrs	r3, r2
 8003c7c:	61cb      	str	r3, [r1, #28]
   }
 }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f003 0320 	and.w	r3, r3, #32
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d010      	beq.n	8003cac <HAL_RCC_ClockConfig+0x300>
 {
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	69da      	ldr	r2, [r3, #28]
 8003c8e:	4b15      	ldr	r3, [pc, #84]	; (8003ce4 <HAL_RCC_ClockConfig+0x338>)
 8003c90:	6a1b      	ldr	r3, [r3, #32]
 8003c92:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003c96:	429a      	cmp	r2, r3
 8003c98:	d208      	bcs.n	8003cac <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003c9a:	4b12      	ldr	r3, [pc, #72]	; (8003ce4 <HAL_RCC_ClockConfig+0x338>)
 8003c9c:	6a1b      	ldr	r3, [r3, #32]
 8003c9e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	69db      	ldr	r3, [r3, #28]
 8003ca6:	490f      	ldr	r1, [pc, #60]	; (8003ce4 <HAL_RCC_ClockConfig+0x338>)
 8003ca8:	4313      	orrs	r3, r2
 8003caa:	620b      	str	r3, [r1, #32]
   }
 }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003cac:	f000 f822 	bl	8003cf4 <HAL_RCC_GetSysClockFreq>
 8003cb0:	4601      	mov	r1, r0
 8003cb2:	4b0c      	ldr	r3, [pc, #48]	; (8003ce4 <HAL_RCC_ClockConfig+0x338>)
 8003cb4:	699b      	ldr	r3, [r3, #24]
 8003cb6:	0a1b      	lsrs	r3, r3, #8
 8003cb8:	f003 030f 	and.w	r3, r3, #15
 8003cbc:	4a0a      	ldr	r2, [pc, #40]	; (8003ce8 <HAL_RCC_ClockConfig+0x33c>)
 8003cbe:	5cd3      	ldrb	r3, [r2, r3]
 8003cc0:	f003 031f 	and.w	r3, r3, #31
 8003cc4:	fa21 f303 	lsr.w	r3, r1, r3
 8003cc8:	4a08      	ldr	r2, [pc, #32]	; (8003cec <HAL_RCC_ClockConfig+0x340>)
 8003cca:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8003ccc:	4b08      	ldr	r3, [pc, #32]	; (8003cf0 <HAL_RCC_ClockConfig+0x344>)
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	f7fd fc8b 	bl	80015ec <HAL_InitTick>
 8003cd6:	4603      	mov	r3, r0
 8003cd8:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 8003cda:	7afb      	ldrb	r3, [r7, #11]
}
 8003cdc:	4618      	mov	r0, r3
 8003cde:	3710      	adds	r7, #16
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	bd80      	pop	{r7, pc}
 8003ce4:	58024400 	.word	0x58024400
 8003ce8:	0800c06c 	.word	0x0800c06c
 8003cec:	24000040 	.word	0x24000040
 8003cf0:	24000048 	.word	0x24000048

08003cf4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003cf4:	b480      	push	{r7}
 8003cf6:	b089      	sub	sp, #36	; 0x24
 8003cf8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003cfa:	4baf      	ldr	r3, [pc, #700]	; (8003fb8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003cfc:	691b      	ldr	r3, [r3, #16]
 8003cfe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003d02:	2b18      	cmp	r3, #24
 8003d04:	f200 814e 	bhi.w	8003fa4 <HAL_RCC_GetSysClockFreq+0x2b0>
 8003d08:	a201      	add	r2, pc, #4	; (adr r2, 8003d10 <HAL_RCC_GetSysClockFreq+0x1c>)
 8003d0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d0e:	bf00      	nop
 8003d10:	08003d75 	.word	0x08003d75
 8003d14:	08003fa5 	.word	0x08003fa5
 8003d18:	08003fa5 	.word	0x08003fa5
 8003d1c:	08003fa5 	.word	0x08003fa5
 8003d20:	08003fa5 	.word	0x08003fa5
 8003d24:	08003fa5 	.word	0x08003fa5
 8003d28:	08003fa5 	.word	0x08003fa5
 8003d2c:	08003fa5 	.word	0x08003fa5
 8003d30:	08003d9b 	.word	0x08003d9b
 8003d34:	08003fa5 	.word	0x08003fa5
 8003d38:	08003fa5 	.word	0x08003fa5
 8003d3c:	08003fa5 	.word	0x08003fa5
 8003d40:	08003fa5 	.word	0x08003fa5
 8003d44:	08003fa5 	.word	0x08003fa5
 8003d48:	08003fa5 	.word	0x08003fa5
 8003d4c:	08003fa5 	.word	0x08003fa5
 8003d50:	08003da1 	.word	0x08003da1
 8003d54:	08003fa5 	.word	0x08003fa5
 8003d58:	08003fa5 	.word	0x08003fa5
 8003d5c:	08003fa5 	.word	0x08003fa5
 8003d60:	08003fa5 	.word	0x08003fa5
 8003d64:	08003fa5 	.word	0x08003fa5
 8003d68:	08003fa5 	.word	0x08003fa5
 8003d6c:	08003fa5 	.word	0x08003fa5
 8003d70:	08003da7 	.word	0x08003da7
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003d74:	4b90      	ldr	r3, [pc, #576]	; (8003fb8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f003 0320 	and.w	r3, r3, #32
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d009      	beq.n	8003d94 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003d80:	4b8d      	ldr	r3, [pc, #564]	; (8003fb8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	08db      	lsrs	r3, r3, #3
 8003d86:	f003 0303 	and.w	r3, r3, #3
 8003d8a:	4a8c      	ldr	r2, [pc, #560]	; (8003fbc <HAL_RCC_GetSysClockFreq+0x2c8>)
 8003d8c:	fa22 f303 	lsr.w	r3, r2, r3
 8003d90:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8003d92:	e10a      	b.n	8003faa <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003d94:	4b89      	ldr	r3, [pc, #548]	; (8003fbc <HAL_RCC_GetSysClockFreq+0x2c8>)
 8003d96:	61bb      	str	r3, [r7, #24]
    break;
 8003d98:	e107      	b.n	8003faa <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8003d9a:	4b89      	ldr	r3, [pc, #548]	; (8003fc0 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8003d9c:	61bb      	str	r3, [r7, #24]
    break;
 8003d9e:	e104      	b.n	8003faa <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8003da0:	4b88      	ldr	r3, [pc, #544]	; (8003fc4 <HAL_RCC_GetSysClockFreq+0x2d0>)
 8003da2:	61bb      	str	r3, [r7, #24]
    break;
 8003da4:	e101      	b.n	8003faa <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003da6:	4b84      	ldr	r3, [pc, #528]	; (8003fb8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003da8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003daa:	f003 0303 	and.w	r3, r3, #3
 8003dae:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8003db0:	4b81      	ldr	r3, [pc, #516]	; (8003fb8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003db2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003db4:	091b      	lsrs	r3, r3, #4
 8003db6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003dba:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003dbc:	4b7e      	ldr	r3, [pc, #504]	; (8003fb8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003dbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dc0:	f003 0301 	and.w	r3, r3, #1
 8003dc4:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8003dc6:	4b7c      	ldr	r3, [pc, #496]	; (8003fb8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003dc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dca:	08db      	lsrs	r3, r3, #3
 8003dcc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003dd0:	68fa      	ldr	r2, [r7, #12]
 8003dd2:	fb02 f303 	mul.w	r3, r2, r3
 8003dd6:	ee07 3a90 	vmov	s15, r3
 8003dda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003dde:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8003de2:	693b      	ldr	r3, [r7, #16]
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	f000 80da 	beq.w	8003f9e <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 8003dea:	697b      	ldr	r3, [r7, #20]
 8003dec:	2b01      	cmp	r3, #1
 8003dee:	d05a      	beq.n	8003ea6 <HAL_RCC_GetSysClockFreq+0x1b2>
 8003df0:	2b01      	cmp	r3, #1
 8003df2:	d302      	bcc.n	8003dfa <HAL_RCC_GetSysClockFreq+0x106>
 8003df4:	2b02      	cmp	r3, #2
 8003df6:	d078      	beq.n	8003eea <HAL_RCC_GetSysClockFreq+0x1f6>
 8003df8:	e099      	b.n	8003f2e <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003dfa:	4b6f      	ldr	r3, [pc, #444]	; (8003fb8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f003 0320 	and.w	r3, r3, #32
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d02d      	beq.n	8003e62 <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003e06:	4b6c      	ldr	r3, [pc, #432]	; (8003fb8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	08db      	lsrs	r3, r3, #3
 8003e0c:	f003 0303 	and.w	r3, r3, #3
 8003e10:	4a6a      	ldr	r2, [pc, #424]	; (8003fbc <HAL_RCC_GetSysClockFreq+0x2c8>)
 8003e12:	fa22 f303 	lsr.w	r3, r2, r3
 8003e16:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	ee07 3a90 	vmov	s15, r3
 8003e1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e22:	693b      	ldr	r3, [r7, #16]
 8003e24:	ee07 3a90 	vmov	s15, r3
 8003e28:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e2c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003e30:	4b61      	ldr	r3, [pc, #388]	; (8003fb8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003e32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e38:	ee07 3a90 	vmov	s15, r3
 8003e3c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e40:	ed97 6a02 	vldr	s12, [r7, #8]
 8003e44:	eddf 5a60 	vldr	s11, [pc, #384]	; 8003fc8 <HAL_RCC_GetSysClockFreq+0x2d4>
 8003e48:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003e4c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003e50:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003e54:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003e58:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e5c:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8003e60:	e087      	b.n	8003f72 <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003e62:	693b      	ldr	r3, [r7, #16]
 8003e64:	ee07 3a90 	vmov	s15, r3
 8003e68:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e6c:	eddf 6a57 	vldr	s13, [pc, #348]	; 8003fcc <HAL_RCC_GetSysClockFreq+0x2d8>
 8003e70:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003e74:	4b50      	ldr	r3, [pc, #320]	; (8003fb8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003e76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e7c:	ee07 3a90 	vmov	s15, r3
 8003e80:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e84:	ed97 6a02 	vldr	s12, [r7, #8]
 8003e88:	eddf 5a4f 	vldr	s11, [pc, #316]	; 8003fc8 <HAL_RCC_GetSysClockFreq+0x2d4>
 8003e8c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003e90:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003e94:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003e98:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003e9c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ea0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003ea4:	e065      	b.n	8003f72 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003ea6:	693b      	ldr	r3, [r7, #16]
 8003ea8:	ee07 3a90 	vmov	s15, r3
 8003eac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003eb0:	eddf 6a47 	vldr	s13, [pc, #284]	; 8003fd0 <HAL_RCC_GetSysClockFreq+0x2dc>
 8003eb4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003eb8:	4b3f      	ldr	r3, [pc, #252]	; (8003fb8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003eba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ebc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ec0:	ee07 3a90 	vmov	s15, r3
 8003ec4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ec8:	ed97 6a02 	vldr	s12, [r7, #8]
 8003ecc:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8003fc8 <HAL_RCC_GetSysClockFreq+0x2d4>
 8003ed0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003ed4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003ed8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003edc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003ee0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ee4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003ee8:	e043      	b.n	8003f72 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003eea:	693b      	ldr	r3, [r7, #16]
 8003eec:	ee07 3a90 	vmov	s15, r3
 8003ef0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ef4:	eddf 6a37 	vldr	s13, [pc, #220]	; 8003fd4 <HAL_RCC_GetSysClockFreq+0x2e0>
 8003ef8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003efc:	4b2e      	ldr	r3, [pc, #184]	; (8003fb8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003efe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f00:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f04:	ee07 3a90 	vmov	s15, r3
 8003f08:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f0c:	ed97 6a02 	vldr	s12, [r7, #8]
 8003f10:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8003fc8 <HAL_RCC_GetSysClockFreq+0x2d4>
 8003f14:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003f18:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003f1c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003f20:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003f24:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f28:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003f2c:	e021      	b.n	8003f72 <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003f2e:	693b      	ldr	r3, [r7, #16]
 8003f30:	ee07 3a90 	vmov	s15, r3
 8003f34:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f38:	eddf 6a25 	vldr	s13, [pc, #148]	; 8003fd0 <HAL_RCC_GetSysClockFreq+0x2dc>
 8003f3c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003f40:	4b1d      	ldr	r3, [pc, #116]	; (8003fb8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003f42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f44:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f48:	ee07 3a90 	vmov	s15, r3
 8003f4c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f50:	ed97 6a02 	vldr	s12, [r7, #8]
 8003f54:	eddf 5a1c 	vldr	s11, [pc, #112]	; 8003fc8 <HAL_RCC_GetSysClockFreq+0x2d4>
 8003f58:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003f5c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003f60:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003f64:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003f68:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f6c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003f70:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8003f72:	4b11      	ldr	r3, [pc, #68]	; (8003fb8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f76:	0a5b      	lsrs	r3, r3, #9
 8003f78:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003f7c:	3301      	adds	r3, #1
 8003f7e:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	ee07 3a90 	vmov	s15, r3
 8003f86:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003f8a:	edd7 6a07 	vldr	s13, [r7, #28]
 8003f8e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003f92:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003f96:	ee17 3a90 	vmov	r3, s15
 8003f9a:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8003f9c:	e005      	b.n	8003faa <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 8003f9e:	2300      	movs	r3, #0
 8003fa0:	61bb      	str	r3, [r7, #24]
    break;
 8003fa2:	e002      	b.n	8003faa <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 8003fa4:	4b06      	ldr	r3, [pc, #24]	; (8003fc0 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8003fa6:	61bb      	str	r3, [r7, #24]
    break;
 8003fa8:	bf00      	nop
  }

  return sysclockfreq;
 8003faa:	69bb      	ldr	r3, [r7, #24]
}
 8003fac:	4618      	mov	r0, r3
 8003fae:	3724      	adds	r7, #36	; 0x24
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb6:	4770      	bx	lr
 8003fb8:	58024400 	.word	0x58024400
 8003fbc:	03d09000 	.word	0x03d09000
 8003fc0:	003d0900 	.word	0x003d0900
 8003fc4:	017d7840 	.word	0x017d7840
 8003fc8:	46000000 	.word	0x46000000
 8003fcc:	4c742400 	.word	0x4c742400
 8003fd0:	4a742400 	.word	0x4a742400
 8003fd4:	4bbebc20 	.word	0x4bbebc20

08003fd8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	af00      	add	r7, sp, #0
  SystemD2Clock = (HAL_RCCEx_GetD1SysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003fdc:	f001 fd64 	bl	8005aa8 <HAL_RCCEx_GetD1SysClockFreq>
 8003fe0:	4601      	mov	r1, r0
 8003fe2:	4b08      	ldr	r3, [pc, #32]	; (8004004 <HAL_RCC_GetHCLKFreq+0x2c>)
 8003fe4:	699b      	ldr	r3, [r3, #24]
 8003fe6:	f003 030f 	and.w	r3, r3, #15
 8003fea:	4a07      	ldr	r2, [pc, #28]	; (8004008 <HAL_RCC_GetHCLKFreq+0x30>)
 8003fec:	5cd3      	ldrb	r3, [r2, r3]
 8003fee:	f003 031f 	and.w	r3, r3, #31
 8003ff2:	fa21 f303 	lsr.w	r3, r1, r3
 8003ff6:	4a05      	ldr	r2, [pc, #20]	; (800400c <HAL_RCC_GetHCLKFreq+0x34>)
 8003ff8:	6013      	str	r3, [r2, #0]
  return SystemD2Clock;
 8003ffa:	4b04      	ldr	r3, [pc, #16]	; (800400c <HAL_RCC_GetHCLKFreq+0x34>)
 8003ffc:	681b      	ldr	r3, [r3, #0]
}
 8003ffe:	4618      	mov	r0, r3
 8004000:	bd80      	pop	{r7, pc}
 8004002:	bf00      	nop
 8004004:	58024400 	.word	0x58024400
 8004008:	0800c06c 	.word	0x0800c06c
 800400c:	24000044 	.word	0x24000044

08004010 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004010:	b580      	push	{r7, lr}
 8004012:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8004014:	f7ff ffe0 	bl	8003fd8 <HAL_RCC_GetHCLKFreq>
 8004018:	4601      	mov	r1, r0
 800401a:	4b06      	ldr	r3, [pc, #24]	; (8004034 <HAL_RCC_GetPCLK1Freq+0x24>)
 800401c:	69db      	ldr	r3, [r3, #28]
 800401e:	091b      	lsrs	r3, r3, #4
 8004020:	f003 0307 	and.w	r3, r3, #7
 8004024:	4a04      	ldr	r2, [pc, #16]	; (8004038 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004026:	5cd3      	ldrb	r3, [r2, r3]
 8004028:	f003 031f 	and.w	r3, r3, #31
 800402c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004030:	4618      	mov	r0, r3
 8004032:	bd80      	pop	{r7, pc}
 8004034:	58024400 	.word	0x58024400
 8004038:	0800c06c 	.word	0x0800c06c

0800403c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800403c:	b580      	push	{r7, lr}
 800403e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8004040:	f7ff ffca 	bl	8003fd8 <HAL_RCC_GetHCLKFreq>
 8004044:	4601      	mov	r1, r0
 8004046:	4b06      	ldr	r3, [pc, #24]	; (8004060 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004048:	69db      	ldr	r3, [r3, #28]
 800404a:	0a1b      	lsrs	r3, r3, #8
 800404c:	f003 0307 	and.w	r3, r3, #7
 8004050:	4a04      	ldr	r2, [pc, #16]	; (8004064 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004052:	5cd3      	ldrb	r3, [r2, r3]
 8004054:	f003 031f 	and.w	r3, r3, #31
 8004058:	fa21 f303 	lsr.w	r3, r1, r3
}
 800405c:	4618      	mov	r0, r3
 800405e:	bd80      	pop	{r7, pc}
 8004060:	58024400 	.word	0x58024400
 8004064:	0800c06c 	.word	0x0800c06c

08004068 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004068:	b580      	push	{r7, lr}
 800406a:	b086      	sub	sp, #24
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004070:	2300      	movs	r3, #0
 8004072:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004074:	2300      	movs	r3, #0
 8004076:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004080:	2b00      	cmp	r3, #0
 8004082:	d03d      	beq.n	8004100 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004088:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800408c:	d013      	beq.n	80040b6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 800408e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004092:	d802      	bhi.n	800409a <HAL_RCCEx_PeriphCLKConfig+0x32>
 8004094:	2b00      	cmp	r3, #0
 8004096:	d007      	beq.n	80040a8 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8004098:	e01f      	b.n	80040da <HAL_RCCEx_PeriphCLKConfig+0x72>
 800409a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800409e:	d013      	beq.n	80040c8 <HAL_RCCEx_PeriphCLKConfig+0x60>
 80040a0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80040a4:	d01c      	beq.n	80040e0 <HAL_RCCEx_PeriphCLKConfig+0x78>
 80040a6:	e018      	b.n	80040da <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80040a8:	4baf      	ldr	r3, [pc, #700]	; (8004368 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80040aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040ac:	4aae      	ldr	r2, [pc, #696]	; (8004368 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80040ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80040b2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80040b4:	e015      	b.n	80040e2 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	3304      	adds	r3, #4
 80040ba:	2102      	movs	r1, #2
 80040bc:	4618      	mov	r0, r3
 80040be:	f001 fd0f 	bl	8005ae0 <RCCEx_PLL2_Config>
 80040c2:	4603      	mov	r3, r0
 80040c4:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80040c6:	e00c      	b.n	80040e2 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	3324      	adds	r3, #36	; 0x24
 80040cc:	2102      	movs	r1, #2
 80040ce:	4618      	mov	r0, r3
 80040d0:	f001 fdb8 	bl	8005c44 <RCCEx_PLL3_Config>
 80040d4:	4603      	mov	r3, r0
 80040d6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80040d8:	e003      	b.n	80040e2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80040da:	2301      	movs	r3, #1
 80040dc:	75fb      	strb	r3, [r7, #23]
      break;
 80040de:	e000      	b.n	80040e2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 80040e0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80040e2:	7dfb      	ldrb	r3, [r7, #23]
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d109      	bne.n	80040fc <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80040e8:	4b9f      	ldr	r3, [pc, #636]	; (8004368 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80040ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040ec:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80040f4:	499c      	ldr	r1, [pc, #624]	; (8004368 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80040f6:	4313      	orrs	r3, r2
 80040f8:	650b      	str	r3, [r1, #80]	; 0x50
 80040fa:	e001      	b.n	8004100 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040fc:	7dfb      	ldrb	r3, [r7, #23]
 80040fe:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004108:	2b00      	cmp	r3, #0
 800410a:	d03d      	beq.n	8004188 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004110:	2b04      	cmp	r3, #4
 8004112:	d826      	bhi.n	8004162 <HAL_RCCEx_PeriphCLKConfig+0xfa>
 8004114:	a201      	add	r2, pc, #4	; (adr r2, 800411c <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 8004116:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800411a:	bf00      	nop
 800411c:	08004131 	.word	0x08004131
 8004120:	0800413f 	.word	0x0800413f
 8004124:	08004151 	.word	0x08004151
 8004128:	08004169 	.word	0x08004169
 800412c:	08004169 	.word	0x08004169
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004130:	4b8d      	ldr	r3, [pc, #564]	; (8004368 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004132:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004134:	4a8c      	ldr	r2, [pc, #560]	; (8004368 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004136:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800413a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800413c:	e015      	b.n	800416a <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	3304      	adds	r3, #4
 8004142:	2100      	movs	r1, #0
 8004144:	4618      	mov	r0, r3
 8004146:	f001 fccb 	bl	8005ae0 <RCCEx_PLL2_Config>
 800414a:	4603      	mov	r3, r0
 800414c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800414e:	e00c      	b.n	800416a <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	3324      	adds	r3, #36	; 0x24
 8004154:	2100      	movs	r1, #0
 8004156:	4618      	mov	r0, r3
 8004158:	f001 fd74 	bl	8005c44 <RCCEx_PLL3_Config>
 800415c:	4603      	mov	r3, r0
 800415e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004160:	e003      	b.n	800416a <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004162:	2301      	movs	r3, #1
 8004164:	75fb      	strb	r3, [r7, #23]
      break;
 8004166:	e000      	b.n	800416a <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 8004168:	bf00      	nop
    }

    if(ret == HAL_OK)
 800416a:	7dfb      	ldrb	r3, [r7, #23]
 800416c:	2b00      	cmp	r3, #0
 800416e:	d109      	bne.n	8004184 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004170:	4b7d      	ldr	r3, [pc, #500]	; (8004368 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004172:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004174:	f023 0207 	bic.w	r2, r3, #7
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800417c:	497a      	ldr	r1, [pc, #488]	; (8004368 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800417e:	4313      	orrs	r3, r2
 8004180:	650b      	str	r3, [r1, #80]	; 0x50
 8004182:	e001      	b.n	8004188 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004184:	7dfb      	ldrb	r3, [r7, #23]
 8004186:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004190:	2b00      	cmp	r3, #0
 8004192:	d03e      	beq.n	8004212 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004198:	2b80      	cmp	r3, #128	; 0x80
 800419a:	d01c      	beq.n	80041d6 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 800419c:	2b80      	cmp	r3, #128	; 0x80
 800419e:	d804      	bhi.n	80041aa <HAL_RCCEx_PeriphCLKConfig+0x142>
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d008      	beq.n	80041b6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80041a4:	2b40      	cmp	r3, #64	; 0x40
 80041a6:	d00d      	beq.n	80041c4 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 80041a8:	e01e      	b.n	80041e8 <HAL_RCCEx_PeriphCLKConfig+0x180>
 80041aa:	2bc0      	cmp	r3, #192	; 0xc0
 80041ac:	d01f      	beq.n	80041ee <HAL_RCCEx_PeriphCLKConfig+0x186>
 80041ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80041b2:	d01e      	beq.n	80041f2 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80041b4:	e018      	b.n	80041e8 <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80041b6:	4b6c      	ldr	r3, [pc, #432]	; (8004368 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80041b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041ba:	4a6b      	ldr	r2, [pc, #428]	; (8004368 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80041bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80041c0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80041c2:	e017      	b.n	80041f4 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	3304      	adds	r3, #4
 80041c8:	2100      	movs	r1, #0
 80041ca:	4618      	mov	r0, r3
 80041cc:	f001 fc88 	bl	8005ae0 <RCCEx_PLL2_Config>
 80041d0:	4603      	mov	r3, r0
 80041d2:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80041d4:	e00e      	b.n	80041f4 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	3324      	adds	r3, #36	; 0x24
 80041da:	2100      	movs	r1, #0
 80041dc:	4618      	mov	r0, r3
 80041de:	f001 fd31 	bl	8005c44 <RCCEx_PLL3_Config>
 80041e2:	4603      	mov	r3, r0
 80041e4:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80041e6:	e005      	b.n	80041f4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80041e8:	2301      	movs	r3, #1
 80041ea:	75fb      	strb	r3, [r7, #23]
      break;
 80041ec:	e002      	b.n	80041f4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 80041ee:	bf00      	nop
 80041f0:	e000      	b.n	80041f4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 80041f2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80041f4:	7dfb      	ldrb	r3, [r7, #23]
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d109      	bne.n	800420e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80041fa:	4b5b      	ldr	r3, [pc, #364]	; (8004368 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80041fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041fe:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004206:	4958      	ldr	r1, [pc, #352]	; (8004368 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004208:	4313      	orrs	r3, r2
 800420a:	650b      	str	r3, [r1, #80]	; 0x50
 800420c:	e001      	b.n	8004212 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800420e:	7dfb      	ldrb	r3, [r7, #23]
 8004210:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800421a:	2b00      	cmp	r3, #0
 800421c:	d044      	beq.n	80042a8 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004224:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004228:	d01f      	beq.n	800426a <HAL_RCCEx_PeriphCLKConfig+0x202>
 800422a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800422e:	d805      	bhi.n	800423c <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8004230:	2b00      	cmp	r3, #0
 8004232:	d00a      	beq.n	800424a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8004234:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004238:	d00e      	beq.n	8004258 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 800423a:	e01f      	b.n	800427c <HAL_RCCEx_PeriphCLKConfig+0x214>
 800423c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004240:	d01f      	beq.n	8004282 <HAL_RCCEx_PeriphCLKConfig+0x21a>
 8004242:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004246:	d01e      	beq.n	8004286 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8004248:	e018      	b.n	800427c <HAL_RCCEx_PeriphCLKConfig+0x214>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800424a:	4b47      	ldr	r3, [pc, #284]	; (8004368 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800424c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800424e:	4a46      	ldr	r2, [pc, #280]	; (8004368 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004250:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004254:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004256:	e017      	b.n	8004288 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	3304      	adds	r3, #4
 800425c:	2100      	movs	r1, #0
 800425e:	4618      	mov	r0, r3
 8004260:	f001 fc3e 	bl	8005ae0 <RCCEx_PLL2_Config>
 8004264:	4603      	mov	r3, r0
 8004266:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8004268:	e00e      	b.n	8004288 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	3324      	adds	r3, #36	; 0x24
 800426e:	2100      	movs	r1, #0
 8004270:	4618      	mov	r0, r3
 8004272:	f001 fce7 	bl	8005c44 <RCCEx_PLL3_Config>
 8004276:	4603      	mov	r3, r0
 8004278:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800427a:	e005      	b.n	8004288 <HAL_RCCEx_PeriphCLKConfig+0x220>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800427c:	2301      	movs	r3, #1
 800427e:	75fb      	strb	r3, [r7, #23]
      break;
 8004280:	e002      	b.n	8004288 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8004282:	bf00      	nop
 8004284:	e000      	b.n	8004288 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8004286:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004288:	7dfb      	ldrb	r3, [r7, #23]
 800428a:	2b00      	cmp	r3, #0
 800428c:	d10a      	bne.n	80042a4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800428e:	4b36      	ldr	r3, [pc, #216]	; (8004368 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004290:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004292:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800429c:	4932      	ldr	r1, [pc, #200]	; (8004368 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800429e:	4313      	orrs	r3, r2
 80042a0:	658b      	str	r3, [r1, #88]	; 0x58
 80042a2:	e001      	b.n	80042a8 <HAL_RCCEx_PeriphCLKConfig+0x240>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042a4:	7dfb      	ldrb	r3, [r7, #23]
 80042a6:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d044      	beq.n	800433e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80042ba:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80042be:	d01f      	beq.n	8004300 <HAL_RCCEx_PeriphCLKConfig+0x298>
 80042c0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80042c4:	d805      	bhi.n	80042d2 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d00a      	beq.n	80042e0 <HAL_RCCEx_PeriphCLKConfig+0x278>
 80042ca:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80042ce:	d00e      	beq.n	80042ee <HAL_RCCEx_PeriphCLKConfig+0x286>
 80042d0:	e01f      	b.n	8004312 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 80042d2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80042d6:	d01f      	beq.n	8004318 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80042d8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80042dc:	d01e      	beq.n	800431c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80042de:	e018      	b.n	8004312 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80042e0:	4b21      	ldr	r3, [pc, #132]	; (8004368 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80042e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042e4:	4a20      	ldr	r2, [pc, #128]	; (8004368 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80042e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80042ea:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80042ec:	e017      	b.n	800431e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	3304      	adds	r3, #4
 80042f2:	2100      	movs	r1, #0
 80042f4:	4618      	mov	r0, r3
 80042f6:	f001 fbf3 	bl	8005ae0 <RCCEx_PLL2_Config>
 80042fa:	4603      	mov	r3, r0
 80042fc:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80042fe:	e00e      	b.n	800431e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	3324      	adds	r3, #36	; 0x24
 8004304:	2100      	movs	r1, #0
 8004306:	4618      	mov	r0, r3
 8004308:	f001 fc9c 	bl	8005c44 <RCCEx_PLL3_Config>
 800430c:	4603      	mov	r3, r0
 800430e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004310:	e005      	b.n	800431e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004312:	2301      	movs	r3, #1
 8004314:	75fb      	strb	r3, [r7, #23]
      break;
 8004316:	e002      	b.n	800431e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8004318:	bf00      	nop
 800431a:	e000      	b.n	800431e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 800431c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800431e:	7dfb      	ldrb	r3, [r7, #23]
 8004320:	2b00      	cmp	r3, #0
 8004322:	d10a      	bne.n	800433a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8004324:	4b10      	ldr	r3, [pc, #64]	; (8004368 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004326:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004328:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004332:	490d      	ldr	r1, [pc, #52]	; (8004368 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004334:	4313      	orrs	r3, r2
 8004336:	658b      	str	r3, [r1, #88]	; 0x58
 8004338:	e001      	b.n	800433e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800433a:	7dfb      	ldrb	r3, [r7, #23]
 800433c:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004346:	2b00      	cmp	r3, #0
 8004348:	d035      	beq.n	80043b6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800434e:	2b10      	cmp	r3, #16
 8004350:	d00c      	beq.n	800436c <HAL_RCCEx_PeriphCLKConfig+0x304>
 8004352:	2b10      	cmp	r3, #16
 8004354:	d802      	bhi.n	800435c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 8004356:	2b00      	cmp	r3, #0
 8004358:	d01b      	beq.n	8004392 <HAL_RCCEx_PeriphCLKConfig+0x32a>
 800435a:	e017      	b.n	800438c <HAL_RCCEx_PeriphCLKConfig+0x324>
 800435c:	2b20      	cmp	r3, #32
 800435e:	d00c      	beq.n	800437a <HAL_RCCEx_PeriphCLKConfig+0x312>
 8004360:	2b30      	cmp	r3, #48	; 0x30
 8004362:	d018      	beq.n	8004396 <HAL_RCCEx_PeriphCLKConfig+0x32e>
 8004364:	e012      	b.n	800438c <HAL_RCCEx_PeriphCLKConfig+0x324>
 8004366:	bf00      	nop
 8004368:	58024400 	.word	0x58024400
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800436c:	4baf      	ldr	r3, [pc, #700]	; (800462c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800436e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004370:	4aae      	ldr	r2, [pc, #696]	; (800462c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004372:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004376:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8004378:	e00e      	b.n	8004398 <HAL_RCCEx_PeriphCLKConfig+0x330>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	3304      	adds	r3, #4
 800437e:	2102      	movs	r1, #2
 8004380:	4618      	mov	r0, r3
 8004382:	f001 fbad 	bl	8005ae0 <RCCEx_PLL2_Config>
 8004386:	4603      	mov	r3, r0
 8004388:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800438a:	e005      	b.n	8004398 <HAL_RCCEx_PeriphCLKConfig+0x330>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800438c:	2301      	movs	r3, #1
 800438e:	75fb      	strb	r3, [r7, #23]
      break;
 8004390:	e002      	b.n	8004398 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8004392:	bf00      	nop
 8004394:	e000      	b.n	8004398 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8004396:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004398:	7dfb      	ldrb	r3, [r7, #23]
 800439a:	2b00      	cmp	r3, #0
 800439c:	d109      	bne.n	80043b2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800439e:	4ba3      	ldr	r3, [pc, #652]	; (800462c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80043a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043a2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80043aa:	49a0      	ldr	r1, [pc, #640]	; (800462c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80043ac:	4313      	orrs	r3, r2
 80043ae:	64cb      	str	r3, [r1, #76]	; 0x4c
 80043b0:	e001      	b.n	80043b6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043b2:	7dfb      	ldrb	r3, [r7, #23]
 80043b4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d042      	beq.n	8004448 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80043ca:	d01f      	beq.n	800440c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 80043cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80043d0:	d805      	bhi.n	80043de <HAL_RCCEx_PeriphCLKConfig+0x376>
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d00a      	beq.n	80043ec <HAL_RCCEx_PeriphCLKConfig+0x384>
 80043d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043da:	d00e      	beq.n	80043fa <HAL_RCCEx_PeriphCLKConfig+0x392>
 80043dc:	e01f      	b.n	800441e <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 80043de:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80043e2:	d01f      	beq.n	8004424 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 80043e4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80043e8:	d01e      	beq.n	8004428 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 80043ea:	e018      	b.n	800441e <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80043ec:	4b8f      	ldr	r3, [pc, #572]	; (800462c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80043ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043f0:	4a8e      	ldr	r2, [pc, #568]	; (800462c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80043f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80043f6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80043f8:	e017      	b.n	800442a <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	3304      	adds	r3, #4
 80043fe:	2100      	movs	r1, #0
 8004400:	4618      	mov	r0, r3
 8004402:	f001 fb6d 	bl	8005ae0 <RCCEx_PLL2_Config>
 8004406:	4603      	mov	r3, r0
 8004408:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800440a:	e00e      	b.n	800442a <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	3324      	adds	r3, #36	; 0x24
 8004410:	2100      	movs	r1, #0
 8004412:	4618      	mov	r0, r3
 8004414:	f001 fc16 	bl	8005c44 <RCCEx_PLL3_Config>
 8004418:	4603      	mov	r3, r0
 800441a:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800441c:	e005      	b.n	800442a <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800441e:	2301      	movs	r3, #1
 8004420:	75fb      	strb	r3, [r7, #23]
      break;
 8004422:	e002      	b.n	800442a <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8004424:	bf00      	nop
 8004426:	e000      	b.n	800442a <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8004428:	bf00      	nop
    }

    if(ret == HAL_OK)
 800442a:	7dfb      	ldrb	r3, [r7, #23]
 800442c:	2b00      	cmp	r3, #0
 800442e:	d109      	bne.n	8004444 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004430:	4b7e      	ldr	r3, [pc, #504]	; (800462c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004432:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004434:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800443c:	497b      	ldr	r1, [pc, #492]	; (800462c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800443e:	4313      	orrs	r3, r2
 8004440:	650b      	str	r3, [r1, #80]	; 0x50
 8004442:	e001      	b.n	8004448 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004444:	7dfb      	ldrb	r3, [r7, #23]
 8004446:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004450:	2b00      	cmp	r3, #0
 8004452:	d042      	beq.n	80044da <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004458:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800445c:	d01b      	beq.n	8004496 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 800445e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004462:	d805      	bhi.n	8004470 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8004464:	2b00      	cmp	r3, #0
 8004466:	d022      	beq.n	80044ae <HAL_RCCEx_PeriphCLKConfig+0x446>
 8004468:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800446c:	d00a      	beq.n	8004484 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800446e:	e01b      	b.n	80044a8 <HAL_RCCEx_PeriphCLKConfig+0x440>
 8004470:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004474:	d01d      	beq.n	80044b2 <HAL_RCCEx_PeriphCLKConfig+0x44a>
 8004476:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800447a:	d01c      	beq.n	80044b6 <HAL_RCCEx_PeriphCLKConfig+0x44e>
 800447c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004480:	d01b      	beq.n	80044ba <HAL_RCCEx_PeriphCLKConfig+0x452>
 8004482:	e011      	b.n	80044a8 <HAL_RCCEx_PeriphCLKConfig+0x440>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	3304      	adds	r3, #4
 8004488:	2101      	movs	r1, #1
 800448a:	4618      	mov	r0, r3
 800448c:	f001 fb28 	bl	8005ae0 <RCCEx_PLL2_Config>
 8004490:	4603      	mov	r3, r0
 8004492:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8004494:	e012      	b.n	80044bc <HAL_RCCEx_PeriphCLKConfig+0x454>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	3324      	adds	r3, #36	; 0x24
 800449a:	2101      	movs	r1, #1
 800449c:	4618      	mov	r0, r3
 800449e:	f001 fbd1 	bl	8005c44 <RCCEx_PLL3_Config>
 80044a2:	4603      	mov	r3, r0
 80044a4:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80044a6:	e009      	b.n	80044bc <HAL_RCCEx_PeriphCLKConfig+0x454>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80044a8:	2301      	movs	r3, #1
 80044aa:	75fb      	strb	r3, [r7, #23]
      break;
 80044ac:	e006      	b.n	80044bc <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 80044ae:	bf00      	nop
 80044b0:	e004      	b.n	80044bc <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 80044b2:	bf00      	nop
 80044b4:	e002      	b.n	80044bc <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 80044b6:	bf00      	nop
 80044b8:	e000      	b.n	80044bc <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 80044ba:	bf00      	nop
    }

    if(ret == HAL_OK)
 80044bc:	7dfb      	ldrb	r3, [r7, #23]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d109      	bne.n	80044d6 <HAL_RCCEx_PeriphCLKConfig+0x46e>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80044c2:	4b5a      	ldr	r3, [pc, #360]	; (800462c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80044c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044c6:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044ce:	4957      	ldr	r1, [pc, #348]	; (800462c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80044d0:	4313      	orrs	r3, r2
 80044d2:	650b      	str	r3, [r1, #80]	; 0x50
 80044d4:	e001      	b.n	80044da <HAL_RCCEx_PeriphCLKConfig+0x472>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044d6:	7dfb      	ldrb	r3, [r7, #23]
 80044d8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d044      	beq.n	8004570 <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80044ec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80044f0:	d01b      	beq.n	800452a <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 80044f2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80044f6:	d805      	bhi.n	8004504 <HAL_RCCEx_PeriphCLKConfig+0x49c>
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d022      	beq.n	8004542 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80044fc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004500:	d00a      	beq.n	8004518 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8004502:	e01b      	b.n	800453c <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 8004504:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004508:	d01d      	beq.n	8004546 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800450a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800450e:	d01c      	beq.n	800454a <HAL_RCCEx_PeriphCLKConfig+0x4e2>
 8004510:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004514:	d01b      	beq.n	800454e <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8004516:	e011      	b.n	800453c <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	3304      	adds	r3, #4
 800451c:	2101      	movs	r1, #1
 800451e:	4618      	mov	r0, r3
 8004520:	f001 fade 	bl	8005ae0 <RCCEx_PLL2_Config>
 8004524:	4603      	mov	r3, r0
 8004526:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8004528:	e012      	b.n	8004550 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	3324      	adds	r3, #36	; 0x24
 800452e:	2101      	movs	r1, #1
 8004530:	4618      	mov	r0, r3
 8004532:	f001 fb87 	bl	8005c44 <RCCEx_PLL3_Config>
 8004536:	4603      	mov	r3, r0
 8004538:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800453a:	e009      	b.n	8004550 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      /* HSE,  oscillator is used as source of SPI6 clock */
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800453c:	2301      	movs	r3, #1
 800453e:	75fb      	strb	r3, [r7, #23]
      break;
 8004540:	e006      	b.n	8004550 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8004542:	bf00      	nop
 8004544:	e004      	b.n	8004550 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8004546:	bf00      	nop
 8004548:	e002      	b.n	8004550 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 800454a:	bf00      	nop
 800454c:	e000      	b.n	8004550 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 800454e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004550:	7dfb      	ldrb	r3, [r7, #23]
 8004552:	2b00      	cmp	r3, #0
 8004554:	d10a      	bne.n	800456c <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004556:	4b35      	ldr	r3, [pc, #212]	; (800462c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004558:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800455a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004564:	4931      	ldr	r1, [pc, #196]	; (800462c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004566:	4313      	orrs	r3, r2
 8004568:	658b      	str	r3, [r1, #88]	; 0x58
 800456a:	e001      	b.n	8004570 <HAL_RCCEx_PeriphCLKConfig+0x508>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800456c:	7dfb      	ldrb	r3, [r7, #23]
 800456e:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004578:	2b00      	cmp	r3, #0
 800457a:	d02d      	beq.n	80045d8 <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004580:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004584:	d005      	beq.n	8004592 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8004586:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800458a:	d009      	beq.n	80045a0 <HAL_RCCEx_PeriphCLKConfig+0x538>
 800458c:	2b00      	cmp	r3, #0
 800458e:	d013      	beq.n	80045b8 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8004590:	e00f      	b.n	80045b2 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004592:	4b26      	ldr	r3, [pc, #152]	; (800462c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004594:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004596:	4a25      	ldr	r2, [pc, #148]	; (800462c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004598:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800459c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800459e:	e00c      	b.n	80045ba <HAL_RCCEx_PeriphCLKConfig+0x552>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	3304      	adds	r3, #4
 80045a4:	2101      	movs	r1, #1
 80045a6:	4618      	mov	r0, r3
 80045a8:	f001 fa9a 	bl	8005ae0 <RCCEx_PLL2_Config>
 80045ac:	4603      	mov	r3, r0
 80045ae:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80045b0:	e003      	b.n	80045ba <HAL_RCCEx_PeriphCLKConfig+0x552>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80045b2:	2301      	movs	r3, #1
 80045b4:	75fb      	strb	r3, [r7, #23]
      break;
 80045b6:	e000      	b.n	80045ba <HAL_RCCEx_PeriphCLKConfig+0x552>
      break;
 80045b8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80045ba:	7dfb      	ldrb	r3, [r7, #23]
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d109      	bne.n	80045d4 <HAL_RCCEx_PeriphCLKConfig+0x56c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80045c0:	4b1a      	ldr	r3, [pc, #104]	; (800462c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80045c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045c4:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80045cc:	4917      	ldr	r1, [pc, #92]	; (800462c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80045ce:	4313      	orrs	r3, r2
 80045d0:	650b      	str	r3, [r1, #80]	; 0x50
 80045d2:	e001      	b.n	80045d8 <HAL_RCCEx_PeriphCLKConfig+0x570>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045d4:	7dfb      	ldrb	r3, [r7, #23]
 80045d6:	75bb      	strb	r3, [r7, #22]
    }
  }

#endif /*FDCAN1 || FDCAN2*/
  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d035      	beq.n	8004650 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045e8:	2b03      	cmp	r3, #3
 80045ea:	d81b      	bhi.n	8004624 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80045ec:	a201      	add	r2, pc, #4	; (adr r2, 80045f4 <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 80045ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045f2:	bf00      	nop
 80045f4:	08004631 	.word	0x08004631
 80045f8:	08004605 	.word	0x08004605
 80045fc:	08004613 	.word	0x08004613
 8004600:	08004631 	.word	0x08004631
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004604:	4b09      	ldr	r3, [pc, #36]	; (800462c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004606:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004608:	4a08      	ldr	r2, [pc, #32]	; (800462c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800460a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800460e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8004610:	e00f      	b.n	8004632 <HAL_RCCEx_PeriphCLKConfig+0x5ca>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	3304      	adds	r3, #4
 8004616:	2102      	movs	r1, #2
 8004618:	4618      	mov	r0, r3
 800461a:	f001 fa61 	bl	8005ae0 <RCCEx_PLL2_Config>
 800461e:	4603      	mov	r3, r0
 8004620:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8004622:	e006      	b.n	8004632 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    case RCC_FMCCLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8004624:	2301      	movs	r3, #1
 8004626:	75fb      	strb	r3, [r7, #23]
      break;
 8004628:	e003      	b.n	8004632 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 800462a:	bf00      	nop
 800462c:	58024400 	.word	0x58024400
      break;
 8004630:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004632:	7dfb      	ldrb	r3, [r7, #23]
 8004634:	2b00      	cmp	r3, #0
 8004636:	d109      	bne.n	800464c <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8004638:	4bba      	ldr	r3, [pc, #744]	; (8004924 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800463a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800463c:	f023 0203 	bic.w	r2, r3, #3
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004644:	49b7      	ldr	r1, [pc, #732]	; (8004924 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004646:	4313      	orrs	r3, r2
 8004648:	64cb      	str	r3, [r1, #76]	; 0x4c
 800464a:	e001      	b.n	8004650 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800464c:	7dfb      	ldrb	r3, [r7, #23]
 800464e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004658:	2b00      	cmp	r3, #0
 800465a:	f000 8086 	beq.w	800476a <HAL_RCCEx_PeriphCLKConfig+0x702>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800465e:	4bb2      	ldr	r3, [pc, #712]	; (8004928 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	4ab1      	ldr	r2, [pc, #708]	; (8004928 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8004664:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004668:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800466a:	f7fd f809 	bl	8001680 <HAL_GetTick>
 800466e:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004670:	e009      	b.n	8004686 <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004672:	f7fd f805 	bl	8001680 <HAL_GetTick>
 8004676:	4602      	mov	r2, r0
 8004678:	693b      	ldr	r3, [r7, #16]
 800467a:	1ad3      	subs	r3, r2, r3
 800467c:	2b64      	cmp	r3, #100	; 0x64
 800467e:	d902      	bls.n	8004686 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        ret = HAL_TIMEOUT;
 8004680:	2303      	movs	r3, #3
 8004682:	75fb      	strb	r3, [r7, #23]
        break;
 8004684:	e005      	b.n	8004692 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004686:	4ba8      	ldr	r3, [pc, #672]	; (8004928 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800468e:	2b00      	cmp	r3, #0
 8004690:	d0ef      	beq.n	8004672 <HAL_RCCEx_PeriphCLKConfig+0x60a>
      }
    }

    if(ret == HAL_OK)
 8004692:	7dfb      	ldrb	r3, [r7, #23]
 8004694:	2b00      	cmp	r3, #0
 8004696:	d166      	bne.n	8004766 <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004698:	4ba2      	ldr	r3, [pc, #648]	; (8004924 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800469a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80046a2:	4053      	eors	r3, r2
 80046a4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d013      	beq.n	80046d4 <HAL_RCCEx_PeriphCLKConfig+0x66c>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80046ac:	4b9d      	ldr	r3, [pc, #628]	; (8004924 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80046ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046b4:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80046b6:	4b9b      	ldr	r3, [pc, #620]	; (8004924 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80046b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046ba:	4a9a      	ldr	r2, [pc, #616]	; (8004924 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80046bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046c0:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80046c2:	4b98      	ldr	r3, [pc, #608]	; (8004924 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80046c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046c6:	4a97      	ldr	r2, [pc, #604]	; (8004924 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80046c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80046cc:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80046ce:	4a95      	ldr	r2, [pc, #596]	; (8004924 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source, wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80046da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80046de:	d115      	bne.n	800470c <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046e0:	f7fc ffce 	bl	8001680 <HAL_GetTick>
 80046e4:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80046e6:	e00b      	b.n	8004700 <HAL_RCCEx_PeriphCLKConfig+0x698>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046e8:	f7fc ffca 	bl	8001680 <HAL_GetTick>
 80046ec:	4602      	mov	r2, r0
 80046ee:	693b      	ldr	r3, [r7, #16]
 80046f0:	1ad3      	subs	r3, r2, r3
 80046f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80046f6:	4293      	cmp	r3, r2
 80046f8:	d902      	bls.n	8004700 <HAL_RCCEx_PeriphCLKConfig+0x698>
          {
            ret = HAL_TIMEOUT;
 80046fa:	2303      	movs	r3, #3
 80046fc:	75fb      	strb	r3, [r7, #23]
            break;
 80046fe:	e005      	b.n	800470c <HAL_RCCEx_PeriphCLKConfig+0x6a4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004700:	4b88      	ldr	r3, [pc, #544]	; (8004924 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004702:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004704:	f003 0302 	and.w	r3, r3, #2
 8004708:	2b00      	cmp	r3, #0
 800470a:	d0ed      	beq.n	80046e8 <HAL_RCCEx_PeriphCLKConfig+0x680>
          }
        }
      }

      if(ret == HAL_OK)
 800470c:	7dfb      	ldrb	r3, [r7, #23]
 800470e:	2b00      	cmp	r3, #0
 8004710:	d126      	bne.n	8004760 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004718:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800471c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004720:	d10d      	bne.n	800473e <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 8004722:	4b80      	ldr	r3, [pc, #512]	; (8004924 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004724:	691b      	ldr	r3, [r3, #16]
 8004726:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004730:	0919      	lsrs	r1, r3, #4
 8004732:	4b7e      	ldr	r3, [pc, #504]	; (800492c <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 8004734:	400b      	ands	r3, r1
 8004736:	497b      	ldr	r1, [pc, #492]	; (8004924 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004738:	4313      	orrs	r3, r2
 800473a:	610b      	str	r3, [r1, #16]
 800473c:	e005      	b.n	800474a <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 800473e:	4b79      	ldr	r3, [pc, #484]	; (8004924 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004740:	691b      	ldr	r3, [r3, #16]
 8004742:	4a78      	ldr	r2, [pc, #480]	; (8004924 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004744:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004748:	6113      	str	r3, [r2, #16]
 800474a:	4b76      	ldr	r3, [pc, #472]	; (8004924 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800474c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004754:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004758:	4972      	ldr	r1, [pc, #456]	; (8004924 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800475a:	4313      	orrs	r3, r2
 800475c:	670b      	str	r3, [r1, #112]	; 0x70
 800475e:	e004      	b.n	800476a <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004760:	7dfb      	ldrb	r3, [r7, #23]
 8004762:	75bb      	strb	r3, [r7, #22]
 8004764:	e001      	b.n	800476a <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004766:	7dfb      	ldrb	r3, [r7, #23]
 8004768:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f003 0301 	and.w	r3, r3, #1
 8004772:	2b00      	cmp	r3, #0
 8004774:	d07d      	beq.n	8004872 <HAL_RCCEx_PeriphCLKConfig+0x80a>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800477a:	2b28      	cmp	r3, #40	; 0x28
 800477c:	d866      	bhi.n	800484c <HAL_RCCEx_PeriphCLKConfig+0x7e4>
 800477e:	a201      	add	r2, pc, #4	; (adr r2, 8004784 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8004780:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004784:	08004853 	.word	0x08004853
 8004788:	0800484d 	.word	0x0800484d
 800478c:	0800484d 	.word	0x0800484d
 8004790:	0800484d 	.word	0x0800484d
 8004794:	0800484d 	.word	0x0800484d
 8004798:	0800484d 	.word	0x0800484d
 800479c:	0800484d 	.word	0x0800484d
 80047a0:	0800484d 	.word	0x0800484d
 80047a4:	08004829 	.word	0x08004829
 80047a8:	0800484d 	.word	0x0800484d
 80047ac:	0800484d 	.word	0x0800484d
 80047b0:	0800484d 	.word	0x0800484d
 80047b4:	0800484d 	.word	0x0800484d
 80047b8:	0800484d 	.word	0x0800484d
 80047bc:	0800484d 	.word	0x0800484d
 80047c0:	0800484d 	.word	0x0800484d
 80047c4:	0800483b 	.word	0x0800483b
 80047c8:	0800484d 	.word	0x0800484d
 80047cc:	0800484d 	.word	0x0800484d
 80047d0:	0800484d 	.word	0x0800484d
 80047d4:	0800484d 	.word	0x0800484d
 80047d8:	0800484d 	.word	0x0800484d
 80047dc:	0800484d 	.word	0x0800484d
 80047e0:	0800484d 	.word	0x0800484d
 80047e4:	08004853 	.word	0x08004853
 80047e8:	0800484d 	.word	0x0800484d
 80047ec:	0800484d 	.word	0x0800484d
 80047f0:	0800484d 	.word	0x0800484d
 80047f4:	0800484d 	.word	0x0800484d
 80047f8:	0800484d 	.word	0x0800484d
 80047fc:	0800484d 	.word	0x0800484d
 8004800:	0800484d 	.word	0x0800484d
 8004804:	08004853 	.word	0x08004853
 8004808:	0800484d 	.word	0x0800484d
 800480c:	0800484d 	.word	0x0800484d
 8004810:	0800484d 	.word	0x0800484d
 8004814:	0800484d 	.word	0x0800484d
 8004818:	0800484d 	.word	0x0800484d
 800481c:	0800484d 	.word	0x0800484d
 8004820:	0800484d 	.word	0x0800484d
 8004824:	08004853 	.word	0x08004853
    case RCC_USART16CLKSOURCE_D2PCLK2: /* D2PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	3304      	adds	r3, #4
 800482c:	2101      	movs	r1, #1
 800482e:	4618      	mov	r0, r3
 8004830:	f001 f956 	bl	8005ae0 <RCCEx_PLL2_Config>
 8004834:	4603      	mov	r3, r0
 8004836:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8004838:	e00c      	b.n	8004854 <HAL_RCCEx_PeriphCLKConfig+0x7ec>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	3324      	adds	r3, #36	; 0x24
 800483e:	2101      	movs	r1, #1
 8004840:	4618      	mov	r0, r3
 8004842:	f001 f9ff 	bl	8005c44 <RCCEx_PLL3_Config>
 8004846:	4603      	mov	r3, r0
 8004848:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800484a:	e003      	b.n	8004854 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800484c:	2301      	movs	r3, #1
 800484e:	75fb      	strb	r3, [r7, #23]
      break;
 8004850:	e000      	b.n	8004854 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      break;
 8004852:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004854:	7dfb      	ldrb	r3, [r7, #23]
 8004856:	2b00      	cmp	r3, #0
 8004858:	d109      	bne.n	800486e <HAL_RCCEx_PeriphCLKConfig+0x806>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800485a:	4b32      	ldr	r3, [pc, #200]	; (8004924 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800485c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800485e:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004866:	492f      	ldr	r1, [pc, #188]	; (8004924 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004868:	4313      	orrs	r3, r2
 800486a:	654b      	str	r3, [r1, #84]	; 0x54
 800486c:	e001      	b.n	8004872 <HAL_RCCEx_PeriphCLKConfig+0x80a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800486e:	7dfb      	ldrb	r3, [r7, #23]
 8004870:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f003 0302 	and.w	r3, r3, #2
 800487a:	2b00      	cmp	r3, #0
 800487c:	d037      	beq.n	80048ee <HAL_RCCEx_PeriphCLKConfig+0x886>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004882:	2b05      	cmp	r3, #5
 8004884:	d820      	bhi.n	80048c8 <HAL_RCCEx_PeriphCLKConfig+0x860>
 8004886:	a201      	add	r2, pc, #4	; (adr r2, 800488c <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8004888:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800488c:	080048cf 	.word	0x080048cf
 8004890:	080048a5 	.word	0x080048a5
 8004894:	080048b7 	.word	0x080048b7
 8004898:	080048cf 	.word	0x080048cf
 800489c:	080048cf 	.word	0x080048cf
 80048a0:	080048cf 	.word	0x080048cf
    case RCC_USART234578CLKSOURCE_D2PCLK1: /* D2PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	3304      	adds	r3, #4
 80048a8:	2101      	movs	r1, #1
 80048aa:	4618      	mov	r0, r3
 80048ac:	f001 f918 	bl	8005ae0 <RCCEx_PLL2_Config>
 80048b0:	4603      	mov	r3, r0
 80048b2:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80048b4:	e00c      	b.n	80048d0 <HAL_RCCEx_PeriphCLKConfig+0x868>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	3324      	adds	r3, #36	; 0x24
 80048ba:	2101      	movs	r1, #1
 80048bc:	4618      	mov	r0, r3
 80048be:	f001 f9c1 	bl	8005c44 <RCCEx_PLL3_Config>
 80048c2:	4603      	mov	r3, r0
 80048c4:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80048c6:	e003      	b.n	80048d0 <HAL_RCCEx_PeriphCLKConfig+0x868>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80048c8:	2301      	movs	r3, #1
 80048ca:	75fb      	strb	r3, [r7, #23]
      break;
 80048cc:	e000      	b.n	80048d0 <HAL_RCCEx_PeriphCLKConfig+0x868>
      break;
 80048ce:	bf00      	nop
    }

    if(ret == HAL_OK)
 80048d0:	7dfb      	ldrb	r3, [r7, #23]
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d109      	bne.n	80048ea <HAL_RCCEx_PeriphCLKConfig+0x882>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80048d6:	4b13      	ldr	r3, [pc, #76]	; (8004924 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80048d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048da:	f023 0207 	bic.w	r2, r3, #7
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80048e2:	4910      	ldr	r1, [pc, #64]	; (8004924 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80048e4:	4313      	orrs	r3, r2
 80048e6:	654b      	str	r3, [r1, #84]	; 0x54
 80048e8:	e001      	b.n	80048ee <HAL_RCCEx_PeriphCLKConfig+0x886>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048ea:	7dfb      	ldrb	r3, [r7, #23]
 80048ec:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f003 0304 	and.w	r3, r3, #4
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d040      	beq.n	800497c <HAL_RCCEx_PeriphCLKConfig+0x914>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004900:	2b05      	cmp	r3, #5
 8004902:	d827      	bhi.n	8004954 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 8004904:	a201      	add	r2, pc, #4	; (adr r2, 800490c <HAL_RCCEx_PeriphCLKConfig+0x8a4>)
 8004906:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800490a:	bf00      	nop
 800490c:	0800495b 	.word	0x0800495b
 8004910:	08004931 	.word	0x08004931
 8004914:	08004943 	.word	0x08004943
 8004918:	0800495b 	.word	0x0800495b
 800491c:	0800495b 	.word	0x0800495b
 8004920:	0800495b 	.word	0x0800495b
 8004924:	58024400 	.word	0x58024400
 8004928:	58024800 	.word	0x58024800
 800492c:	00ffffcf 	.word	0x00ffffcf
    case RCC_LPUART1CLKSOURCE_D3PCLK1: /* D3PCLK1 as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	3304      	adds	r3, #4
 8004934:	2101      	movs	r1, #1
 8004936:	4618      	mov	r0, r3
 8004938:	f001 f8d2 	bl	8005ae0 <RCCEx_PLL2_Config>
 800493c:	4603      	mov	r3, r0
 800493e:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8004940:	e00c      	b.n	800495c <HAL_RCCEx_PeriphCLKConfig+0x8f4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	3324      	adds	r3, #36	; 0x24
 8004946:	2101      	movs	r1, #1
 8004948:	4618      	mov	r0, r3
 800494a:	f001 f97b 	bl	8005c44 <RCCEx_PLL3_Config>
 800494e:	4603      	mov	r3, r0
 8004950:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8004952:	e003      	b.n	800495c <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004954:	2301      	movs	r3, #1
 8004956:	75fb      	strb	r3, [r7, #23]
      break;
 8004958:	e000      	b.n	800495c <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      break;
 800495a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800495c:	7dfb      	ldrb	r3, [r7, #23]
 800495e:	2b00      	cmp	r3, #0
 8004960:	d10a      	bne.n	8004978 <HAL_RCCEx_PeriphCLKConfig+0x910>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004962:	4bb3      	ldr	r3, [pc, #716]	; (8004c30 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8004964:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004966:	f023 0207 	bic.w	r2, r3, #7
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004970:	49af      	ldr	r1, [pc, #700]	; (8004c30 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8004972:	4313      	orrs	r3, r2
 8004974:	658b      	str	r3, [r1, #88]	; 0x58
 8004976:	e001      	b.n	800497c <HAL_RCCEx_PeriphCLKConfig+0x914>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004978:	7dfb      	ldrb	r3, [r7, #23]
 800497a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f003 0320 	and.w	r3, r3, #32
 8004984:	2b00      	cmp	r3, #0
 8004986:	d044      	beq.n	8004a12 <HAL_RCCEx_PeriphCLKConfig+0x9aa>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800498e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004992:	d01b      	beq.n	80049cc <HAL_RCCEx_PeriphCLKConfig+0x964>
 8004994:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004998:	d805      	bhi.n	80049a6 <HAL_RCCEx_PeriphCLKConfig+0x93e>
 800499a:	2b00      	cmp	r3, #0
 800499c:	d022      	beq.n	80049e4 <HAL_RCCEx_PeriphCLKConfig+0x97c>
 800499e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80049a2:	d00a      	beq.n	80049ba <HAL_RCCEx_PeriphCLKConfig+0x952>
 80049a4:	e01b      	b.n	80049de <HAL_RCCEx_PeriphCLKConfig+0x976>
 80049a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049aa:	d01d      	beq.n	80049e8 <HAL_RCCEx_PeriphCLKConfig+0x980>
 80049ac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80049b0:	d01c      	beq.n	80049ec <HAL_RCCEx_PeriphCLKConfig+0x984>
 80049b2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80049b6:	d01b      	beq.n	80049f0 <HAL_RCCEx_PeriphCLKConfig+0x988>
 80049b8:	e011      	b.n	80049de <HAL_RCCEx_PeriphCLKConfig+0x976>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	3304      	adds	r3, #4
 80049be:	2100      	movs	r1, #0
 80049c0:	4618      	mov	r0, r3
 80049c2:	f001 f88d 	bl	8005ae0 <RCCEx_PLL2_Config>
 80049c6:	4603      	mov	r3, r0
 80049c8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80049ca:	e012      	b.n	80049f2 <HAL_RCCEx_PeriphCLKConfig+0x98a>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	3324      	adds	r3, #36	; 0x24
 80049d0:	2102      	movs	r1, #2
 80049d2:	4618      	mov	r0, r3
 80049d4:	f001 f936 	bl	8005c44 <RCCEx_PLL3_Config>
 80049d8:	4603      	mov	r3, r0
 80049da:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80049dc:	e009      	b.n	80049f2 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80049de:	2301      	movs	r3, #1
 80049e0:	75fb      	strb	r3, [r7, #23]
      break;
 80049e2:	e006      	b.n	80049f2 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 80049e4:	bf00      	nop
 80049e6:	e004      	b.n	80049f2 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 80049e8:	bf00      	nop
 80049ea:	e002      	b.n	80049f2 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 80049ec:	bf00      	nop
 80049ee:	e000      	b.n	80049f2 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 80049f0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80049f2:	7dfb      	ldrb	r3, [r7, #23]
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d10a      	bne.n	8004a0e <HAL_RCCEx_PeriphCLKConfig+0x9a6>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80049f8:	4b8d      	ldr	r3, [pc, #564]	; (8004c30 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 80049fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049fc:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004a06:	498a      	ldr	r1, [pc, #552]	; (8004c30 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8004a08:	4313      	orrs	r3, r2
 8004a0a:	654b      	str	r3, [r1, #84]	; 0x54
 8004a0c:	e001      	b.n	8004a12 <HAL_RCCEx_PeriphCLKConfig+0x9aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a0e:	7dfb      	ldrb	r3, [r7, #23]
 8004a10:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d044      	beq.n	8004aa8 <HAL_RCCEx_PeriphCLKConfig+0xa40>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004a24:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a28:	d01b      	beq.n	8004a62 <HAL_RCCEx_PeriphCLKConfig+0x9fa>
 8004a2a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a2e:	d805      	bhi.n	8004a3c <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d022      	beq.n	8004a7a <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8004a34:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a38:	d00a      	beq.n	8004a50 <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 8004a3a:	e01b      	b.n	8004a74 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
 8004a3c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a40:	d01d      	beq.n	8004a7e <HAL_RCCEx_PeriphCLKConfig+0xa16>
 8004a42:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004a46:	d01c      	beq.n	8004a82 <HAL_RCCEx_PeriphCLKConfig+0xa1a>
 8004a48:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004a4c:	d01b      	beq.n	8004a86 <HAL_RCCEx_PeriphCLKConfig+0xa1e>
 8004a4e:	e011      	b.n	8004a74 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	3304      	adds	r3, #4
 8004a54:	2100      	movs	r1, #0
 8004a56:	4618      	mov	r0, r3
 8004a58:	f001 f842 	bl	8005ae0 <RCCEx_PLL2_Config>
 8004a5c:	4603      	mov	r3, r0
 8004a5e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8004a60:	e012      	b.n	8004a88 <HAL_RCCEx_PeriphCLKConfig+0xa20>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	3324      	adds	r3, #36	; 0x24
 8004a66:	2102      	movs	r1, #2
 8004a68:	4618      	mov	r0, r3
 8004a6a:	f001 f8eb 	bl	8005c44 <RCCEx_PLL3_Config>
 8004a6e:	4603      	mov	r3, r0
 8004a70:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8004a72:	e009      	b.n	8004a88 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004a74:	2301      	movs	r3, #1
 8004a76:	75fb      	strb	r3, [r7, #23]
      break;
 8004a78:	e006      	b.n	8004a88 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8004a7a:	bf00      	nop
 8004a7c:	e004      	b.n	8004a88 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8004a7e:	bf00      	nop
 8004a80:	e002      	b.n	8004a88 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8004a82:	bf00      	nop
 8004a84:	e000      	b.n	8004a88 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8004a86:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004a88:	7dfb      	ldrb	r3, [r7, #23]
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d10a      	bne.n	8004aa4 <HAL_RCCEx_PeriphCLKConfig+0xa3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004a8e:	4b68      	ldr	r3, [pc, #416]	; (8004c30 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8004a90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a92:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004a9c:	4964      	ldr	r1, [pc, #400]	; (8004c30 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8004a9e:	4313      	orrs	r3, r2
 8004aa0:	658b      	str	r3, [r1, #88]	; 0x58
 8004aa2:	e001      	b.n	8004aa8 <HAL_RCCEx_PeriphCLKConfig+0xa40>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004aa4:	7dfb      	ldrb	r3, [r7, #23]
 8004aa6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d044      	beq.n	8004b3e <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004aba:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004abe:	d01b      	beq.n	8004af8 <HAL_RCCEx_PeriphCLKConfig+0xa90>
 8004ac0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004ac4:	d805      	bhi.n	8004ad2 <HAL_RCCEx_PeriphCLKConfig+0xa6a>
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d022      	beq.n	8004b10 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8004aca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ace:	d00a      	beq.n	8004ae6 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8004ad0:	e01b      	b.n	8004b0a <HAL_RCCEx_PeriphCLKConfig+0xaa2>
 8004ad2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ad6:	d01d      	beq.n	8004b14 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8004ad8:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004adc:	d01c      	beq.n	8004b18 <HAL_RCCEx_PeriphCLKConfig+0xab0>
 8004ade:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004ae2:	d01b      	beq.n	8004b1c <HAL_RCCEx_PeriphCLKConfig+0xab4>
 8004ae4:	e011      	b.n	8004b0a <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    case RCC_LPTIM345CLKSOURCE_D3PCLK1:      /* D3PCLK1 as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	3304      	adds	r3, #4
 8004aea:	2100      	movs	r1, #0
 8004aec:	4618      	mov	r0, r3
 8004aee:	f000 fff7 	bl	8005ae0 <RCCEx_PLL2_Config>
 8004af2:	4603      	mov	r3, r0
 8004af4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8004af6:	e012      	b.n	8004b1e <HAL_RCCEx_PeriphCLKConfig+0xab6>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	3324      	adds	r3, #36	; 0x24
 8004afc:	2102      	movs	r1, #2
 8004afe:	4618      	mov	r0, r3
 8004b00:	f001 f8a0 	bl	8005c44 <RCCEx_PLL3_Config>
 8004b04:	4603      	mov	r3, r0
 8004b06:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8004b08:	e009      	b.n	8004b1e <HAL_RCCEx_PeriphCLKConfig+0xab6>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004b0a:	2301      	movs	r3, #1
 8004b0c:	75fb      	strb	r3, [r7, #23]
      break;
 8004b0e:	e006      	b.n	8004b1e <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8004b10:	bf00      	nop
 8004b12:	e004      	b.n	8004b1e <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8004b14:	bf00      	nop
 8004b16:	e002      	b.n	8004b1e <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8004b18:	bf00      	nop
 8004b1a:	e000      	b.n	8004b1e <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8004b1c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004b1e:	7dfb      	ldrb	r3, [r7, #23]
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d10a      	bne.n	8004b3a <HAL_RCCEx_PeriphCLKConfig+0xad2>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004b24:	4b42      	ldr	r3, [pc, #264]	; (8004c30 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8004b26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b28:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004b32:	493f      	ldr	r1, [pc, #252]	; (8004c30 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8004b34:	4313      	orrs	r3, r2
 8004b36:	658b      	str	r3, [r1, #88]	; 0x58
 8004b38:	e001      	b.n	8004b3e <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b3a:	7dfb      	ldrb	r3, [r7, #23]
 8004b3c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f003 0308 	and.w	r3, r3, #8
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d01b      	beq.n	8004b82 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004b50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b54:	d10b      	bne.n	8004b6e <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	3324      	adds	r3, #36	; 0x24
 8004b5a:	2102      	movs	r1, #2
 8004b5c:	4618      	mov	r0, r3
 8004b5e:	f001 f871 	bl	8005c44 <RCCEx_PLL3_Config>
 8004b62:	4603      	mov	r3, r0
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d00c      	beq.n	8004b82 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
        {
          status = HAL_ERROR;
 8004b68:	2301      	movs	r3, #1
 8004b6a:	75bb      	strb	r3, [r7, #22]
 8004b6c:	e009      	b.n	8004b82 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
        }
    }

    else
    {
      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004b6e:	4b30      	ldr	r3, [pc, #192]	; (8004c30 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8004b70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b72:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004b7c:	492c      	ldr	r1, [pc, #176]	; (8004c30 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8004b7e:	4313      	orrs	r3, r2
 8004b80:	654b      	str	r3, [r1, #84]	; 0x54
    }

  }

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f003 0310 	and.w	r3, r3, #16
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d01b      	beq.n	8004bc6 <HAL_RCCEx_PeriphCLKConfig+0xb5e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004b94:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b98:	d10b      	bne.n	8004bb2 <HAL_RCCEx_PeriphCLKConfig+0xb4a>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	3324      	adds	r3, #36	; 0x24
 8004b9e:	2102      	movs	r1, #2
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	f001 f84f 	bl	8005c44 <RCCEx_PLL3_Config>
 8004ba6:	4603      	mov	r3, r0
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d00c      	beq.n	8004bc6 <HAL_RCCEx_PeriphCLKConfig+0xb5e>
      {
        status = HAL_ERROR;
 8004bac:	2301      	movs	r3, #1
 8004bae:	75bb      	strb	r3, [r7, #22]
 8004bb0:	e009      	b.n	8004bc6 <HAL_RCCEx_PeriphCLKConfig+0xb5e>
      }
    }

    else
    {
      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004bb2:	4b1f      	ldr	r3, [pc, #124]	; (8004c30 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8004bb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bb6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004bc0:	491b      	ldr	r1, [pc, #108]	; (8004c30 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8004bc2:	4313      	orrs	r3, r2
 8004bc4:	658b      	str	r3, [r1, #88]	; 0x58
    }
  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d032      	beq.n	8004c38 <HAL_RCCEx_PeriphCLKConfig+0xbd0>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004bd8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004bdc:	d00d      	beq.n	8004bfa <HAL_RCCEx_PeriphCLKConfig+0xb92>
 8004bde:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004be2:	d016      	beq.n	8004c12 <HAL_RCCEx_PeriphCLKConfig+0xbaa>
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d111      	bne.n	8004c0c <HAL_RCCEx_PeriphCLKConfig+0xba4>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	3304      	adds	r3, #4
 8004bec:	2100      	movs	r1, #0
 8004bee:	4618      	mov	r0, r3
 8004bf0:	f000 ff76 	bl	8005ae0 <RCCEx_PLL2_Config>
 8004bf4:	4603      	mov	r3, r0
 8004bf6:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8004bf8:	e00c      	b.n	8004c14 <HAL_RCCEx_PeriphCLKConfig+0xbac>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	3324      	adds	r3, #36	; 0x24
 8004bfe:	2102      	movs	r1, #2
 8004c00:	4618      	mov	r0, r3
 8004c02:	f001 f81f 	bl	8005c44 <RCCEx_PLL3_Config>
 8004c06:	4603      	mov	r3, r0
 8004c08:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8004c0a:	e003      	b.n	8004c14 <HAL_RCCEx_PeriphCLKConfig+0xbac>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004c0c:	2301      	movs	r3, #1
 8004c0e:	75fb      	strb	r3, [r7, #23]
      break;
 8004c10:	e000      	b.n	8004c14 <HAL_RCCEx_PeriphCLKConfig+0xbac>
      break;
 8004c12:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004c14:	7dfb      	ldrb	r3, [r7, #23]
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d10c      	bne.n	8004c34 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004c1a:	4b05      	ldr	r3, [pc, #20]	; (8004c30 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8004c1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c1e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004c28:	4901      	ldr	r1, [pc, #4]	; (8004c30 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8004c2a:	4313      	orrs	r3, r2
 8004c2c:	658b      	str	r3, [r1, #88]	; 0x58
 8004c2e:	e003      	b.n	8004c38 <HAL_RCCEx_PeriphCLKConfig+0xbd0>
 8004c30:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c34:	7dfb      	ldrb	r3, [r7, #23]
 8004c36:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d02f      	beq.n	8004ca4 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c4a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004c4e:	d00c      	beq.n	8004c6a <HAL_RCCEx_PeriphCLKConfig+0xc02>
 8004c50:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004c54:	d015      	beq.n	8004c82 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 8004c56:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004c5a:	d10f      	bne.n	8004c7c <HAL_RCCEx_PeriphCLKConfig+0xc14>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004c5c:	4b79      	ldr	r3, [pc, #484]	; (8004e44 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8004c5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c60:	4a78      	ldr	r2, [pc, #480]	; (8004e44 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8004c62:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004c66:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8004c68:	e00c      	b.n	8004c84 <HAL_RCCEx_PeriphCLKConfig+0xc1c>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	3324      	adds	r3, #36	; 0x24
 8004c6e:	2101      	movs	r1, #1
 8004c70:	4618      	mov	r0, r3
 8004c72:	f000 ffe7 	bl	8005c44 <RCCEx_PLL3_Config>
 8004c76:	4603      	mov	r3, r0
 8004c78:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8004c7a:	e003      	b.n	8004c84 <HAL_RCCEx_PeriphCLKConfig+0xc1c>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004c7c:	2301      	movs	r3, #1
 8004c7e:	75fb      	strb	r3, [r7, #23]
      break;
 8004c80:	e000      	b.n	8004c84 <HAL_RCCEx_PeriphCLKConfig+0xc1c>
      break;
 8004c82:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004c84:	7dfb      	ldrb	r3, [r7, #23]
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d10a      	bne.n	8004ca0 <HAL_RCCEx_PeriphCLKConfig+0xc38>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004c8a:	4b6e      	ldr	r3, [pc, #440]	; (8004e44 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8004c8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c8e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c98:	496a      	ldr	r1, [pc, #424]	; (8004e44 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8004c9a:	4313      	orrs	r3, r2
 8004c9c:	654b      	str	r3, [r1, #84]	; 0x54
 8004c9e:	e001      	b.n	8004ca4 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ca0:	7dfb      	ldrb	r3, [r7, #23]
 8004ca2:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d029      	beq.n	8004d04 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d003      	beq.n	8004cc0 <HAL_RCCEx_PeriphCLKConfig+0xc58>
 8004cb8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004cbc:	d007      	beq.n	8004cce <HAL_RCCEx_PeriphCLKConfig+0xc66>
 8004cbe:	e00f      	b.n	8004ce0 <HAL_RCCEx_PeriphCLKConfig+0xc78>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004cc0:	4b60      	ldr	r3, [pc, #384]	; (8004e44 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8004cc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cc4:	4a5f      	ldr	r2, [pc, #380]	; (8004e44 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8004cc6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004cca:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8004ccc:	e00b      	b.n	8004ce6 <HAL_RCCEx_PeriphCLKConfig+0xc7e>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	3304      	adds	r3, #4
 8004cd2:	2102      	movs	r1, #2
 8004cd4:	4618      	mov	r0, r3
 8004cd6:	f000 ff03 	bl	8005ae0 <RCCEx_PLL2_Config>
 8004cda:	4603      	mov	r3, r0
 8004cdc:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8004cde:	e002      	b.n	8004ce6 <HAL_RCCEx_PeriphCLKConfig+0xc7e>

    default:
      ret = HAL_ERROR;
 8004ce0:	2301      	movs	r3, #1
 8004ce2:	75fb      	strb	r3, [r7, #23]
      break;
 8004ce4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004ce6:	7dfb      	ldrb	r3, [r7, #23]
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d109      	bne.n	8004d00 <HAL_RCCEx_PeriphCLKConfig+0xc98>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004cec:	4b55      	ldr	r3, [pc, #340]	; (8004e44 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8004cee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004cf0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004cf8:	4952      	ldr	r1, [pc, #328]	; (8004e44 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8004cfa:	4313      	orrs	r3, r2
 8004cfc:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004cfe:	e001      	b.n	8004d04 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d00:	7dfb      	ldrb	r3, [r7, #23]
 8004d02:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d00a      	beq.n	8004d26 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	3324      	adds	r3, #36	; 0x24
 8004d14:	2102      	movs	r1, #2
 8004d16:	4618      	mov	r0, r3
 8004d18:	f000 ff94 	bl	8005c44 <RCCEx_PLL3_Config>
 8004d1c:	4603      	mov	r3, r0
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d001      	beq.n	8004d26 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    {
      status=HAL_ERROR;
 8004d22:	2301      	movs	r3, #1
 8004d24:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d02f      	beq.n	8004d92 <HAL_RCCEx_PeriphCLKConfig+0xd2a>
  {

    switch(PeriphClkInit->RngClockSelection)
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004d36:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d3a:	d00c      	beq.n	8004d56 <HAL_RCCEx_PeriphCLKConfig+0xcee>
 8004d3c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d40:	d802      	bhi.n	8004d48 <HAL_RCCEx_PeriphCLKConfig+0xce0>
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d011      	beq.n	8004d6a <HAL_RCCEx_PeriphCLKConfig+0xd02>
 8004d46:	e00d      	b.n	8004d64 <HAL_RCCEx_PeriphCLKConfig+0xcfc>
 8004d48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d4c:	d00f      	beq.n	8004d6e <HAL_RCCEx_PeriphCLKConfig+0xd06>
 8004d4e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004d52:	d00e      	beq.n	8004d72 <HAL_RCCEx_PeriphCLKConfig+0xd0a>
 8004d54:	e006      	b.n	8004d64 <HAL_RCCEx_PeriphCLKConfig+0xcfc>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004d56:	4b3b      	ldr	r3, [pc, #236]	; (8004e44 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8004d58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d5a:	4a3a      	ldr	r2, [pc, #232]	; (8004e44 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8004d5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004d60:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8004d62:	e007      	b.n	8004d74 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004d64:	2301      	movs	r3, #1
 8004d66:	75fb      	strb	r3, [r7, #23]
      break;
 8004d68:	e004      	b.n	8004d74 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
      break;
 8004d6a:	bf00      	nop
 8004d6c:	e002      	b.n	8004d74 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
      break;
 8004d6e:	bf00      	nop
 8004d70:	e000      	b.n	8004d74 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
      break;
 8004d72:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004d74:	7dfb      	ldrb	r3, [r7, #23]
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d109      	bne.n	8004d8e <HAL_RCCEx_PeriphCLKConfig+0xd26>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004d7a:	4b32      	ldr	r3, [pc, #200]	; (8004e44 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8004d7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d7e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004d86:	492f      	ldr	r1, [pc, #188]	; (8004e44 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8004d88:	4313      	orrs	r3, r2
 8004d8a:	654b      	str	r3, [r1, #84]	; 0x54
 8004d8c:	e001      	b.n	8004d92 <HAL_RCCEx_PeriphCLKConfig+0xd2a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d8e:	7dfb      	ldrb	r3, [r7, #23]
 8004d90:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d008      	beq.n	8004db0 <HAL_RCCEx_PeriphCLKConfig+0xd48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004d9e:	4b29      	ldr	r3, [pc, #164]	; (8004e44 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8004da0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004da2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004daa:	4926      	ldr	r1, [pc, #152]	; (8004e44 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8004dac:	4313      	orrs	r3, r2
 8004dae:	650b      	str	r3, [r1, #80]	; 0x50
  }

  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d009      	beq.n	8004dd0 <HAL_RCCEx_PeriphCLKConfig+0xd68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8004dbc:	4b21      	ldr	r3, [pc, #132]	; (8004e44 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8004dbe:	691b      	ldr	r3, [r3, #16]
 8004dc0:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004dca:	491e      	ldr	r1, [pc, #120]	; (8004e44 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8004dcc:	4313      	orrs	r3, r2
 8004dce:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d008      	beq.n	8004dee <HAL_RCCEx_PeriphCLKConfig+0xd86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004ddc:	4b19      	ldr	r3, [pc, #100]	; (8004e44 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8004dde:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004de0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004de8:	4916      	ldr	r1, [pc, #88]	; (8004e44 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8004dea:	4313      	orrs	r3, r2
 8004dec:	650b      	str	r3, [r1, #80]	; 0x50
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d00d      	beq.n	8004e16 <HAL_RCCEx_PeriphCLKConfig+0xdae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004dfa:	4b12      	ldr	r3, [pc, #72]	; (8004e44 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8004dfc:	691b      	ldr	r3, [r3, #16]
 8004dfe:	4a11      	ldr	r2, [pc, #68]	; (8004e44 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8004e00:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004e04:	6113      	str	r3, [r2, #16]
 8004e06:	4b0f      	ldr	r3, [pc, #60]	; (8004e44 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8004e08:	691a      	ldr	r2, [r3, #16]
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8004e10:	490c      	ldr	r1, [pc, #48]	; (8004e44 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8004e12:	4313      	orrs	r3, r2
 8004e14:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	da08      	bge.n	8004e30 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004e1e:	4b09      	ldr	r3, [pc, #36]	; (8004e44 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8004e20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e22:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e2a:	4906      	ldr	r1, [pc, #24]	; (8004e44 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8004e2c:	4313      	orrs	r3, r2
 8004e2e:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 8004e30:	7dbb      	ldrb	r3, [r7, #22]
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d101      	bne.n	8004e3a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    return HAL_OK;
 8004e36:	2300      	movs	r3, #0
 8004e38:	e000      	b.n	8004e3c <HAL_RCCEx_PeriphCLKConfig+0xdd4>
  }
  return HAL_ERROR;
 8004e3a:	2301      	movs	r3, #1
}
 8004e3c:	4618      	mov	r0, r3
 8004e3e:	3718      	adds	r7, #24
 8004e40:	46bd      	mov	sp, r7
 8004e42:	bd80      	pop	{r7, pc}
 8004e44:	58024400 	.word	0x58024400

08004e48 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI4B : SAI4B peripheral clock
  *            @arg RCC_PERIPHCLK_SPI123: SPI1/2/3 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	b090      	sub	sp, #64	; 0x40
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e56:	d150      	bne.n	8004efa <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 8004e58:	4ba1      	ldr	r3, [pc, #644]	; (80050e0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8004e5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e5c:	f003 0307 	and.w	r3, r3, #7
 8004e60:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8004e62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e64:	2b04      	cmp	r3, #4
 8004e66:	d844      	bhi.n	8004ef2 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
 8004e68:	a201      	add	r2, pc, #4	; (adr r2, 8004e70 <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 8004e6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e6e:	bf00      	nop
 8004e70:	08004e85 	.word	0x08004e85
 8004e74:	08004e95 	.word	0x08004e95
 8004e78:	08004ea5 	.word	0x08004ea5
 8004e7c:	08004eed 	.word	0x08004eed
 8004e80:	08004eb5 	.word	0x08004eb5
      {
      case 0: /* PLL1 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004e84:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004e88:	4618      	mov	r0, r3
 8004e8a:	f000 fcc1 	bl	8005810 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004e8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e90:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004e92:	e200      	b.n	8005296 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }
      case RCC_D2CCIP1R_SAI1SEL_0: /* PLLI2 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004e94:	f107 0318 	add.w	r3, r7, #24
 8004e98:	4618      	mov	r0, r3
 8004e9a:	f000 fa21 	bl	80052e0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004e9e:	69bb      	ldr	r3, [r7, #24]
 8004ea0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004ea2:	e1f8      	b.n	8005296 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }

      case RCC_D2CCIP1R_SAI1SEL_1: /* PLLI3 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004ea4:	f107 030c 	add.w	r3, r7, #12
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	f000 fb65 	bl	8005578 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004eb2:	e1f0      	b.n	8005296 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }

      case RCC_D2CCIP1R_SAI1SEL_2: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8004eb4:	4b8a      	ldr	r3, [pc, #552]	; (80050e0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8004eb6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004eb8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004ebc:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== 0U)
 8004ebe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d102      	bne.n	8004eca <HAL_RCCEx_GetPeriphCLKFreq+0x82>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8004ec4:	4b87      	ldr	r3, [pc, #540]	; (80050e4 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8004ec6:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8004ec8:	e1e5      	b.n	8005296 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
          else if(ckpclocksource== RCC_D1CCIPR_CKPERSEL_0)
 8004eca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ecc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004ed0:	d102      	bne.n	8004ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x90>
            frequency = CSI_VALUE;
 8004ed2:	4b85      	ldr	r3, [pc, #532]	; (80050e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8004ed4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004ed6:	e1de      	b.n	8005296 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
          else if (ckpclocksource== RCC_D1CCIPR_CKPERSEL_1)
 8004ed8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004eda:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004ede:	d102      	bne.n	8004ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
            frequency = HSE_VALUE;
 8004ee0:	4b82      	ldr	r3, [pc, #520]	; (80050ec <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8004ee2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004ee4:	e1d7      	b.n	8005296 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
            frequency = 0;
 8004ee6:	2300      	movs	r3, #0
 8004ee8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004eea:	e1d4      	b.n	8005296 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }

      case (RCC_D2CCIP1R_SAI1SEL_0 | RCC_D2CCIP1R_SAI1SEL_1 ): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8004eec:	4b80      	ldr	r3, [pc, #512]	; (80050f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 8004eee:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004ef0:	e1d1      	b.n	8005296 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }
      default :
        {
          frequency = 0;
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004ef6:	bf00      	nop
 8004ef8:	e1cd      	b.n	8005296 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004f00:	d14f      	bne.n	8004fa2 <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 8004f02:	4b77      	ldr	r3, [pc, #476]	; (80050e0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8004f04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f06:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8004f0a:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8004f0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f0e:	2b80      	cmp	r3, #128	; 0x80
 8004f10:	d01c      	beq.n	8004f4c <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 8004f12:	2b80      	cmp	r3, #128	; 0x80
 8004f14:	d804      	bhi.n	8004f20 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d008      	beq.n	8004f2c <HAL_RCCEx_GetPeriphCLKFreq+0xe4>
 8004f1a:	2b40      	cmp	r3, #64	; 0x40
 8004f1c:	d00e      	beq.n	8004f3c <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 8004f1e:	e03c      	b.n	8004f9a <HAL_RCCEx_GetPeriphCLKFreq+0x152>
 8004f20:	2bc0      	cmp	r3, #192	; 0xc0
 8004f22:	d037      	beq.n	8004f94 <HAL_RCCEx_GetPeriphCLKFreq+0x14c>
 8004f24:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f28:	d018      	beq.n	8004f5c <HAL_RCCEx_GetPeriphCLKFreq+0x114>
 8004f2a:	e036      	b.n	8004f9a <HAL_RCCEx_GetPeriphCLKFreq+0x152>
      {
      case 0: /* PLL1 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004f2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004f30:	4618      	mov	r0, r3
 8004f32:	f000 fc6d 	bl	8005810 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004f36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f38:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004f3a:	e1ac      	b.n	8005296 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }
      case RCC_D2CCIP1R_SAI23SEL_0: /* PLLI2 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004f3c:	f107 0318 	add.w	r3, r7, #24
 8004f40:	4618      	mov	r0, r3
 8004f42:	f000 f9cd 	bl	80052e0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004f46:	69bb      	ldr	r3, [r7, #24]
 8004f48:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004f4a:	e1a4      	b.n	8005296 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }

      case RCC_D2CCIP1R_SAI23SEL_1: /* PLLI3 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004f4c:	f107 030c 	add.w	r3, r7, #12
 8004f50:	4618      	mov	r0, r3
 8004f52:	f000 fb11 	bl	8005578 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004f5a:	e19c      	b.n	8005296 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }

      case RCC_D2CCIP1R_SAI23SEL_2: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8004f5c:	4b60      	ldr	r3, [pc, #384]	; (80050e0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8004f5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f60:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004f64:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== 0U)
 8004f66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d102      	bne.n	8004f72 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8004f6c:	4b5d      	ldr	r3, [pc, #372]	; (80050e4 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8004f6e:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8004f70:	e191      	b.n	8005296 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
          else if(ckpclocksource== RCC_D1CCIPR_CKPERSEL_0)
 8004f72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f74:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004f78:	d102      	bne.n	8004f80 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
            frequency = CSI_VALUE;
 8004f7a:	4b5b      	ldr	r3, [pc, #364]	; (80050e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8004f7c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004f7e:	e18a      	b.n	8005296 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
          else if (ckpclocksource== RCC_D1CCIPR_CKPERSEL_1)
 8004f80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f82:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004f86:	d102      	bne.n	8004f8e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
            frequency = HSE_VALUE;
 8004f88:	4b58      	ldr	r3, [pc, #352]	; (80050ec <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8004f8a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004f8c:	e183      	b.n	8005296 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
            frequency = 0;
 8004f8e:	2300      	movs	r3, #0
 8004f90:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004f92:	e180      	b.n	8005296 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }

      case (RCC_D2CCIP1R_SAI23SEL_0 | RCC_D2CCIP1R_SAI23SEL_1 ): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8004f94:	4b56      	ldr	r3, [pc, #344]	; (80050f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 8004f96:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004f98:	e17d      	b.n	8005296 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }
      default :
        {
          frequency = 0;
 8004f9a:	2300      	movs	r3, #0
 8004f9c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004f9e:	bf00      	nop
 8004fa0:	e179      	b.n	8005296 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004fa8:	d153      	bne.n	8005052 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 8004faa:	4b4d      	ldr	r3, [pc, #308]	; (80050e0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8004fac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fae:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8004fb2:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8004fb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fb6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004fba:	d01f      	beq.n	8004ffc <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>
 8004fbc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004fc0:	d805      	bhi.n	8004fce <HAL_RCCEx_GetPeriphCLKFreq+0x186>
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d00a      	beq.n	8004fdc <HAL_RCCEx_GetPeriphCLKFreq+0x194>
 8004fc6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004fca:	d00f      	beq.n	8004fec <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
 8004fcc:	e03d      	b.n	800504a <HAL_RCCEx_GetPeriphCLKFreq+0x202>
 8004fce:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004fd2:	d037      	beq.n	8005044 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>
 8004fd4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004fd8:	d018      	beq.n	800500c <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>
 8004fda:	e036      	b.n	800504a <HAL_RCCEx_GetPeriphCLKFreq+0x202>
      {
      case 0: /* PLL1 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004fdc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004fe0:	4618      	mov	r0, r3
 8004fe2:	f000 fc15 	bl	8005810 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004fe6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fe8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004fea:	e154      	b.n	8005296 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }
      case RCC_D3CCIPR_SAI4ASEL_0: /* PLLI2 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004fec:	f107 0318 	add.w	r3, r7, #24
 8004ff0:	4618      	mov	r0, r3
 8004ff2:	f000 f975 	bl	80052e0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004ff6:	69bb      	ldr	r3, [r7, #24]
 8004ff8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004ffa:	e14c      	b.n	8005296 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }

      case RCC_D3CCIPR_SAI4ASEL_1: /* PLLI3 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004ffc:	f107 030c 	add.w	r3, r7, #12
 8005000:	4618      	mov	r0, r3
 8005002:	f000 fab9 	bl	8005578 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800500a:	e144      	b.n	8005296 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }

      case RCC_D3CCIPR_SAI4ASEL_2: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800500c:	4b34      	ldr	r3, [pc, #208]	; (80050e0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800500e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005010:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005014:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== 0U)
 8005016:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005018:	2b00      	cmp	r3, #0
 800501a:	d102      	bne.n	8005022 <HAL_RCCEx_GetPeriphCLKFreq+0x1da>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 800501c:	4b31      	ldr	r3, [pc, #196]	; (80050e4 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800501e:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8005020:	e139      	b.n	8005296 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
          else if(ckpclocksource== RCC_D1CCIPR_CKPERSEL_0)
 8005022:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005024:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005028:	d102      	bne.n	8005030 <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
            frequency = CSI_VALUE;
 800502a:	4b2f      	ldr	r3, [pc, #188]	; (80050e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800502c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800502e:	e132      	b.n	8005296 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
          else if (ckpclocksource== RCC_D1CCIPR_CKPERSEL_1)
 8005030:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005032:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005036:	d102      	bne.n	800503e <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
            frequency = HSE_VALUE;
 8005038:	4b2c      	ldr	r3, [pc, #176]	; (80050ec <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800503a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800503c:	e12b      	b.n	8005296 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
            frequency = 0;
 800503e:	2300      	movs	r3, #0
 8005040:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005042:	e128      	b.n	8005296 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }

      case (RCC_D3CCIPR_SAI4ASEL_0 | RCC_D3CCIPR_SAI4ASEL_1 ): /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8005044:	4b2a      	ldr	r3, [pc, #168]	; (80050f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 8005046:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005048:	e125      	b.n	8005296 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }

      default :
        {
          frequency = 0;
 800504a:	2300      	movs	r3, #0
 800504c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800504e:	bf00      	nop
 8005050:	e121      	b.n	8005296 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005058:	d15d      	bne.n	8005116 <HAL_RCCEx_GetPeriphCLKFreq+0x2ce>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 800505a:	4b21      	ldr	r3, [pc, #132]	; (80050e0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800505c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800505e:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8005062:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8005064:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005066:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800506a:	d01f      	beq.n	80050ac <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 800506c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005070:	d805      	bhi.n	800507e <HAL_RCCEx_GetPeriphCLKFreq+0x236>
 8005072:	2b00      	cmp	r3, #0
 8005074:	d00a      	beq.n	800508c <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 8005076:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800507a:	d00f      	beq.n	800509c <HAL_RCCEx_GetPeriphCLKFreq+0x254>
 800507c:	e047      	b.n	800510e <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
 800507e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005082:	d041      	beq.n	8005108 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>
 8005084:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005088:	d018      	beq.n	80050bc <HAL_RCCEx_GetPeriphCLKFreq+0x274>
 800508a:	e040      	b.n	800510e <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
      {
      case 0: /* PLL1 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800508c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005090:	4618      	mov	r0, r3
 8005092:	f000 fbbd 	bl	8005810 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005096:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005098:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800509a:	e0fc      	b.n	8005296 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }
      case RCC_D3CCIPR_SAI4BSEL_0: /* PLLI2 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800509c:	f107 0318 	add.w	r3, r7, #24
 80050a0:	4618      	mov	r0, r3
 80050a2:	f000 f91d 	bl	80052e0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80050a6:	69bb      	ldr	r3, [r7, #24]
 80050a8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80050aa:	e0f4      	b.n	8005296 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }

      case RCC_D3CCIPR_SAI4BSEL_1: /* PLLI3 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80050ac:	f107 030c 	add.w	r3, r7, #12
 80050b0:	4618      	mov	r0, r3
 80050b2:	f000 fa61 	bl	8005578 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80050ba:	e0ec      	b.n	8005296 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }

      case RCC_D3CCIPR_SAI4BSEL_2: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80050bc:	4b08      	ldr	r3, [pc, #32]	; (80050e0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80050be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80050c0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80050c4:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== 0U)
 80050c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d102      	bne.n	80050d2 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 80050cc:	4b05      	ldr	r3, [pc, #20]	; (80050e4 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80050ce:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 80050d0:	e0e1      	b.n	8005296 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
          else if(ckpclocksource== RCC_D1CCIPR_CKPERSEL_0)
 80050d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050d4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80050d8:	d10c      	bne.n	80050f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2ac>
            frequency = CSI_VALUE;
 80050da:	4b03      	ldr	r3, [pc, #12]	; (80050e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 80050dc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80050de:	e0da      	b.n	8005296 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 80050e0:	58024400 	.word	0x58024400
 80050e4:	03d09000 	.word	0x03d09000
 80050e8:	003d0900 	.word	0x003d0900
 80050ec:	017d7840 	.word	0x017d7840
 80050f0:	00bb8000 	.word	0x00bb8000
          else if (ckpclocksource== RCC_D1CCIPR_CKPERSEL_1)
 80050f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050f6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80050fa:	d102      	bne.n	8005102 <HAL_RCCEx_GetPeriphCLKFreq+0x2ba>
            frequency = HSE_VALUE;
 80050fc:	4b68      	ldr	r3, [pc, #416]	; (80052a0 <HAL_RCCEx_GetPeriphCLKFreq+0x458>)
 80050fe:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005100:	e0c9      	b.n	8005296 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
            frequency = 0;
 8005102:	2300      	movs	r3, #0
 8005104:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005106:	e0c6      	b.n	8005296 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }

      case (RCC_D3CCIPR_SAI4BSEL_0 | RCC_D3CCIPR_SAI4BSEL_1 ): /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8005108:	4b66      	ldr	r3, [pc, #408]	; (80052a4 <HAL_RCCEx_GetPeriphCLKFreq+0x45c>)
 800510a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800510c:	e0c3      	b.n	8005296 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }

      default :
        {
          frequency = 0;
 800510e:	2300      	movs	r3, #0
 8005110:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005112:	bf00      	nop
 8005114:	e0bf      	b.n	8005296 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800511c:	d153      	bne.n	80051c6 <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 800511e:	4b62      	ldr	r3, [pc, #392]	; (80052a8 <HAL_RCCEx_GetPeriphCLKFreq+0x460>)
 8005120:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005122:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8005126:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8005128:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800512a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800512e:	d01f      	beq.n	8005170 <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 8005130:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005134:	d805      	bhi.n	8005142 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 8005136:	2b00      	cmp	r3, #0
 8005138:	d00a      	beq.n	8005150 <HAL_RCCEx_GetPeriphCLKFreq+0x308>
 800513a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800513e:	d00f      	beq.n	8005160 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
 8005140:	e03d      	b.n	80051be <HAL_RCCEx_GetPeriphCLKFreq+0x376>
 8005142:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005146:	d037      	beq.n	80051b8 <HAL_RCCEx_GetPeriphCLKFreq+0x370>
 8005148:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800514c:	d018      	beq.n	8005180 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 800514e:	e036      	b.n	80051be <HAL_RCCEx_GetPeriphCLKFreq+0x376>
      {
      case 0: /* PLL1 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005150:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005154:	4618      	mov	r0, r3
 8005156:	f000 fb5b 	bl	8005810 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800515a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800515c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800515e:	e09a      	b.n	8005296 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }
      case RCC_D2CCIP1R_SPI123SEL_0: /* PLL2 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005160:	f107 0318 	add.w	r3, r7, #24
 8005164:	4618      	mov	r0, r3
 8005166:	f000 f8bb 	bl	80052e0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800516a:	69bb      	ldr	r3, [r7, #24]
 800516c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800516e:	e092      	b.n	8005296 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }

      case RCC_D2CCIP1R_SPI123SEL_1: /* PLL3 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005170:	f107 030c 	add.w	r3, r7, #12
 8005174:	4618      	mov	r0, r3
 8005176:	f000 f9ff 	bl	8005578 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800517e:	e08a      	b.n	8005296 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }

      case RCC_D2CCIP1R_SPI123SEL_2: /* CKPER is the clock source for I2S */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8005180:	4b49      	ldr	r3, [pc, #292]	; (80052a8 <HAL_RCCEx_GetPeriphCLKFreq+0x460>)
 8005182:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005184:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005188:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 800518a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800518c:	2b00      	cmp	r3, #0
 800518e:	d102      	bne.n	8005196 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8005190:	4b46      	ldr	r3, [pc, #280]	; (80052ac <HAL_RCCEx_GetPeriphCLKFreq+0x464>)
 8005192:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8005194:	e07f      	b.n	8005296 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8005196:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005198:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800519c:	d102      	bne.n	80051a4 <HAL_RCCEx_GetPeriphCLKFreq+0x35c>
            frequency = CSI_VALUE;
 800519e:	4b44      	ldr	r3, [pc, #272]	; (80052b0 <HAL_RCCEx_GetPeriphCLKFreq+0x468>)
 80051a0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80051a2:	e078      	b.n	8005296 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 80051a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051a6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80051aa:	d102      	bne.n	80051b2 <HAL_RCCEx_GetPeriphCLKFreq+0x36a>
            frequency = HSE_VALUE;
 80051ac:	4b3c      	ldr	r3, [pc, #240]	; (80052a0 <HAL_RCCEx_GetPeriphCLKFreq+0x458>)
 80051ae:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80051b0:	e071      	b.n	8005296 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
            frequency = 0;
 80051b2:	2300      	movs	r3, #0
 80051b4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80051b6:	e06e      	b.n	8005296 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }

      case (RCC_D2CCIP1R_SPI123SEL_0 | RCC_D2CCIP1R_SPI123SEL_1): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80051b8:	4b3a      	ldr	r3, [pc, #232]	; (80052a4 <HAL_RCCEx_GetPeriphCLKFreq+0x45c>)
 80051ba:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80051bc:	e06b      	b.n	8005296 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }
      default :
        {
          frequency = 0;
 80051be:	2300      	movs	r3, #0
 80051c0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80051c2:	bf00      	nop
 80051c4:	e067      	b.n	8005296 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80051cc:	d13d      	bne.n	800524a <HAL_RCCEx_GetPeriphCLKFreq+0x402>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 80051ce:	4b36      	ldr	r3, [pc, #216]	; (80052a8 <HAL_RCCEx_GetPeriphCLKFreq+0x460>)
 80051d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051d2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80051d6:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80051d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80051de:	d00c      	beq.n	80051fa <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 80051e0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80051e4:	d011      	beq.n	800520a <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d12b      	bne.n	8005242 <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80051ea:	f107 0318 	add.w	r3, r7, #24
 80051ee:	4618      	mov	r0, r3
 80051f0:	f000 f876 	bl	80052e0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80051f4:	69bb      	ldr	r3, [r7, #24]
 80051f6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80051f8:	e04d      	b.n	8005296 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80051fa:	f107 030c 	add.w	r3, r7, #12
 80051fe:	4618      	mov	r0, r3
 8005200:	f000 f9ba 	bl	8005578 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8005204:	697b      	ldr	r3, [r7, #20]
 8005206:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005208:	e045      	b.n	8005296 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800520a:	4b27      	ldr	r3, [pc, #156]	; (80052a8 <HAL_RCCEx_GetPeriphCLKFreq+0x460>)
 800520c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800520e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005212:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8005214:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005216:	2b00      	cmp	r3, #0
 8005218:	d102      	bne.n	8005220 <HAL_RCCEx_GetPeriphCLKFreq+0x3d8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 800521a:	4b24      	ldr	r3, [pc, #144]	; (80052ac <HAL_RCCEx_GetPeriphCLKFreq+0x464>)
 800521c:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 800521e:	e03a      	b.n	8005296 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8005220:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005222:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005226:	d102      	bne.n	800522e <HAL_RCCEx_GetPeriphCLKFreq+0x3e6>
            frequency = CSI_VALUE;
 8005228:	4b21      	ldr	r3, [pc, #132]	; (80052b0 <HAL_RCCEx_GetPeriphCLKFreq+0x468>)
 800522a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800522c:	e033      	b.n	8005296 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 800522e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005230:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005234:	d102      	bne.n	800523c <HAL_RCCEx_GetPeriphCLKFreq+0x3f4>
            frequency = HSE_VALUE;
 8005236:	4b1a      	ldr	r3, [pc, #104]	; (80052a0 <HAL_RCCEx_GetPeriphCLKFreq+0x458>)
 8005238:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800523a:	e02c      	b.n	8005296 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
            frequency = 0;
 800523c:	2300      	movs	r3, #0
 800523e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005240:	e029      	b.n	8005296 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }

      default :
        {
          frequency = 0;
 8005242:	2300      	movs	r3, #0
 8005244:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005246:	bf00      	nop
 8005248:	e025      	b.n	8005296 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005250:	d11f      	bne.n	8005292 <HAL_RCCEx_GetPeriphCLKFreq+0x44a>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8005252:	4b15      	ldr	r3, [pc, #84]	; (80052a8 <HAL_RCCEx_GetPeriphCLKFreq+0x460>)
 8005254:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005256:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800525a:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800525c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800525e:	2b00      	cmp	r3, #0
 8005260:	d003      	beq.n	800526a <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 8005262:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005266:	d008      	beq.n	800527a <HAL_RCCEx_GetPeriphCLKFreq+0x432>
 8005268:	e00f      	b.n	800528a <HAL_RCCEx_GetPeriphCLKFreq+0x442>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800526a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800526e:	4618      	mov	r0, r3
 8005270:	f000 face 	bl	8005810 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005274:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005276:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005278:	e00d      	b.n	8005296 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800527a:	f107 0318 	add.w	r3, r7, #24
 800527e:	4618      	mov	r0, r3
 8005280:	f000 f82e 	bl	80052e0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8005284:	6a3b      	ldr	r3, [r7, #32]
 8005286:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005288:	e005      	b.n	8005296 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }

      default :
        {
          frequency = 0;
 800528a:	2300      	movs	r3, #0
 800528c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800528e:	bf00      	nop
 8005290:	e001      	b.n	8005296 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }
      }
    }
  else
    {
      frequency = 0;
 8005292:	2300      	movs	r3, #0
 8005294:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 8005296:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8005298:	4618      	mov	r0, r3
 800529a:	3740      	adds	r7, #64	; 0x40
 800529c:	46bd      	mov	sp, r7
 800529e:	bd80      	pop	{r7, pc}
 80052a0:	017d7840 	.word	0x017d7840
 80052a4:	00bb8000 	.word	0x00bb8000
 80052a8:	58024400 	.word	0x58024400
 80052ac:	03d09000 	.word	0x03d09000
 80052b0:	003d0900 	.word	0x003d0900

080052b4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80052b4:	b580      	push	{r7, lr}
 80052b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80052b8:	f7fe fe8e 	bl	8003fd8 <HAL_RCC_GetHCLKFreq>
 80052bc:	4601      	mov	r1, r0
 80052be:	4b06      	ldr	r3, [pc, #24]	; (80052d8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80052c0:	6a1b      	ldr	r3, [r3, #32]
 80052c2:	091b      	lsrs	r3, r3, #4
 80052c4:	f003 0307 	and.w	r3, r3, #7
 80052c8:	4a04      	ldr	r2, [pc, #16]	; (80052dc <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80052ca:	5cd3      	ldrb	r3, [r2, r3]
 80052cc:	f003 031f 	and.w	r3, r3, #31
 80052d0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80052d4:	4618      	mov	r0, r3
 80052d6:	bd80      	pop	{r7, pc}
 80052d8:	58024400 	.word	0x58024400
 80052dc:	0800c06c 	.word	0x0800c06c

080052e0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 80052e0:	b480      	push	{r7}
 80052e2:	b089      	sub	sp, #36	; 0x24
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80052e8:	4b9d      	ldr	r3, [pc, #628]	; (8005560 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80052ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052ec:	f003 0303 	and.w	r3, r3, #3
 80052f0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12)  ;
 80052f2:	4b9b      	ldr	r3, [pc, #620]	; (8005560 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80052f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052f6:	0b1b      	lsrs	r3, r3, #12
 80052f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80052fc:	617b      	str	r3, [r7, #20]
  pll2fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN;
 80052fe:	4b98      	ldr	r3, [pc, #608]	; (8005560 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005300:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005302:	f003 0310 	and.w	r3, r3, #16
 8005306:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8005308:	4b95      	ldr	r3, [pc, #596]	; (8005560 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800530a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800530c:	08db      	lsrs	r3, r3, #3
 800530e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005312:	693a      	ldr	r2, [r7, #16]
 8005314:	fb02 f303 	mul.w	r3, r2, r3
 8005318:	ee07 3a90 	vmov	s15, r3
 800531c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005320:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8005324:	697b      	ldr	r3, [r7, #20]
 8005326:	2b00      	cmp	r3, #0
 8005328:	f000 810a 	beq.w	8005540 <HAL_RCCEx_GetPLL2ClockFreq+0x260>
  {
    switch (pllsource)
 800532c:	69bb      	ldr	r3, [r7, #24]
 800532e:	2b01      	cmp	r3, #1
 8005330:	d05a      	beq.n	80053e8 <HAL_RCCEx_GetPLL2ClockFreq+0x108>
 8005332:	2b01      	cmp	r3, #1
 8005334:	d302      	bcc.n	800533c <HAL_RCCEx_GetPLL2ClockFreq+0x5c>
 8005336:	2b02      	cmp	r3, #2
 8005338:	d078      	beq.n	800542c <HAL_RCCEx_GetPLL2ClockFreq+0x14c>
 800533a:	e099      	b.n	8005470 <HAL_RCCEx_GetPLL2ClockFreq+0x190>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800533c:	4b88      	ldr	r3, [pc, #544]	; (8005560 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f003 0320 	and.w	r3, r3, #32
 8005344:	2b00      	cmp	r3, #0
 8005346:	d02d      	beq.n	80053a4 <HAL_RCCEx_GetPLL2ClockFreq+0xc4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005348:	4b85      	ldr	r3, [pc, #532]	; (8005560 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	08db      	lsrs	r3, r3, #3
 800534e:	f003 0303 	and.w	r3, r3, #3
 8005352:	4a84      	ldr	r2, [pc, #528]	; (8005564 <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 8005354:	fa22 f303 	lsr.w	r3, r2, r3
 8005358:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800535a:	68bb      	ldr	r3, [r7, #8]
 800535c:	ee07 3a90 	vmov	s15, r3
 8005360:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005364:	697b      	ldr	r3, [r7, #20]
 8005366:	ee07 3a90 	vmov	s15, r3
 800536a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800536e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005372:	4b7b      	ldr	r3, [pc, #492]	; (8005560 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005374:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005376:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800537a:	ee07 3a90 	vmov	s15, r3
 800537e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005382:	ed97 6a03 	vldr	s12, [r7, #12]
 8005386:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005568 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 800538a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800538e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005392:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005396:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800539a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800539e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80053a2:	e087      	b.n	80054b4 <HAL_RCCEx_GetPLL2ClockFreq+0x1d4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80053a4:	697b      	ldr	r3, [r7, #20]
 80053a6:	ee07 3a90 	vmov	s15, r3
 80053aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053ae:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800556c <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 80053b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80053b6:	4b6a      	ldr	r3, [pc, #424]	; (8005560 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80053b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80053be:	ee07 3a90 	vmov	s15, r3
 80053c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80053c6:	ed97 6a03 	vldr	s12, [r7, #12]
 80053ca:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005568 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80053ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80053d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80053d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80053da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80053de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80053e2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80053e6:	e065      	b.n	80054b4 <HAL_RCCEx_GetPLL2ClockFreq+0x1d4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80053e8:	697b      	ldr	r3, [r7, #20]
 80053ea:	ee07 3a90 	vmov	s15, r3
 80053ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053f2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005570 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 80053f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80053fa:	4b59      	ldr	r3, [pc, #356]	; (8005560 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80053fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005402:	ee07 3a90 	vmov	s15, r3
 8005406:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800540a:	ed97 6a03 	vldr	s12, [r7, #12]
 800540e:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005568 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8005412:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005416:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800541a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800541e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005422:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005426:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800542a:	e043      	b.n	80054b4 <HAL_RCCEx_GetPLL2ClockFreq+0x1d4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800542c:	697b      	ldr	r3, [r7, #20]
 800542e:	ee07 3a90 	vmov	s15, r3
 8005432:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005436:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005574 <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 800543a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800543e:	4b48      	ldr	r3, [pc, #288]	; (8005560 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005440:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005442:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005446:	ee07 3a90 	vmov	s15, r3
 800544a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800544e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005452:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005568 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8005456:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800545a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800545e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005462:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005466:	ee67 7a27 	vmul.f32	s15, s14, s15
 800546a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800546e:	e021      	b.n	80054b4 <HAL_RCCEx_GetPLL2ClockFreq+0x1d4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005470:	697b      	ldr	r3, [r7, #20]
 8005472:	ee07 3a90 	vmov	s15, r3
 8005476:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800547a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005570 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 800547e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005482:	4b37      	ldr	r3, [pc, #220]	; (8005560 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005484:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005486:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800548a:	ee07 3a90 	vmov	s15, r3
 800548e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005492:	ed97 6a03 	vldr	s12, [r7, #12]
 8005496:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005568 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 800549a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800549e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80054a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80054a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80054aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80054ae:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80054b2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80054b4:	4b2a      	ldr	r3, [pc, #168]	; (8005560 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80054b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054b8:	0a5b      	lsrs	r3, r3, #9
 80054ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80054be:	ee07 3a90 	vmov	s15, r3
 80054c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054c6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80054ca:	ee37 7a87 	vadd.f32	s14, s15, s14
 80054ce:	edd7 6a07 	vldr	s13, [r7, #28]
 80054d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80054d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80054da:	ee17 2a90 	vmov	r2, s15
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80054e2:	4b1f      	ldr	r3, [pc, #124]	; (8005560 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80054e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054e6:	0c1b      	lsrs	r3, r3, #16
 80054e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80054ec:	ee07 3a90 	vmov	s15, r3
 80054f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054f4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80054f8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80054fc:	edd7 6a07 	vldr	s13, [r7, #28]
 8005500:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005504:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005508:	ee17 2a90 	vmov	r2, s15
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8005510:	4b13      	ldr	r3, [pc, #76]	; (8005560 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005512:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005514:	0e1b      	lsrs	r3, r3, #24
 8005516:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800551a:	ee07 3a90 	vmov	s15, r3
 800551e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005522:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005526:	ee37 7a87 	vadd.f32	s14, s15, s14
 800552a:	edd7 6a07 	vldr	s13, [r7, #28]
 800552e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005532:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005536:	ee17 2a90 	vmov	r2, s15
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800553e:	e008      	b.n	8005552 <HAL_RCCEx_GetPLL2ClockFreq+0x272>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2200      	movs	r2, #0
 8005544:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	2200      	movs	r2, #0
 800554a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	2200      	movs	r2, #0
 8005550:	609a      	str	r2, [r3, #8]
}
 8005552:	bf00      	nop
 8005554:	3724      	adds	r7, #36	; 0x24
 8005556:	46bd      	mov	sp, r7
 8005558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555c:	4770      	bx	lr
 800555e:	bf00      	nop
 8005560:	58024400 	.word	0x58024400
 8005564:	03d09000 	.word	0x03d09000
 8005568:	46000000 	.word	0x46000000
 800556c:	4c742400 	.word	0x4c742400
 8005570:	4a742400 	.word	0x4a742400
 8005574:	4bbebc20 	.word	0x4bbebc20

08005578 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8005578:	b480      	push	{r7}
 800557a:	b089      	sub	sp, #36	; 0x24
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005580:	4b9d      	ldr	r3, [pc, #628]	; (80057f8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005582:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005584:	f003 0303 	and.w	r3, r3, #3
 8005588:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800558a:	4b9b      	ldr	r3, [pc, #620]	; (80057f8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800558c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800558e:	0d1b      	lsrs	r3, r3, #20
 8005590:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005594:	617b      	str	r3, [r7, #20]
  pll3fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN;
 8005596:	4b98      	ldr	r3, [pc, #608]	; (80057f8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005598:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800559a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800559e:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80055a0:	4b95      	ldr	r3, [pc, #596]	; (80057f8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80055a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055a4:	08db      	lsrs	r3, r3, #3
 80055a6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80055aa:	693a      	ldr	r2, [r7, #16]
 80055ac:	fb02 f303 	mul.w	r3, r2, r3
 80055b0:	ee07 3a90 	vmov	s15, r3
 80055b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80055b8:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80055bc:	697b      	ldr	r3, [r7, #20]
 80055be:	2b00      	cmp	r3, #0
 80055c0:	f000 810a 	beq.w	80057d8 <HAL_RCCEx_GetPLL3ClockFreq+0x260>
  {
    switch (pllsource)
 80055c4:	69bb      	ldr	r3, [r7, #24]
 80055c6:	2b01      	cmp	r3, #1
 80055c8:	d05a      	beq.n	8005680 <HAL_RCCEx_GetPLL3ClockFreq+0x108>
 80055ca:	2b01      	cmp	r3, #1
 80055cc:	d302      	bcc.n	80055d4 <HAL_RCCEx_GetPLL3ClockFreq+0x5c>
 80055ce:	2b02      	cmp	r3, #2
 80055d0:	d078      	beq.n	80056c4 <HAL_RCCEx_GetPLL3ClockFreq+0x14c>
 80055d2:	e099      	b.n	8005708 <HAL_RCCEx_GetPLL3ClockFreq+0x190>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80055d4:	4b88      	ldr	r3, [pc, #544]	; (80057f8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f003 0320 	and.w	r3, r3, #32
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d02d      	beq.n	800563c <HAL_RCCEx_GetPLL3ClockFreq+0xc4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80055e0:	4b85      	ldr	r3, [pc, #532]	; (80057f8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	08db      	lsrs	r3, r3, #3
 80055e6:	f003 0303 	and.w	r3, r3, #3
 80055ea:	4a84      	ldr	r2, [pc, #528]	; (80057fc <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 80055ec:	fa22 f303 	lsr.w	r3, r2, r3
 80055f0:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80055f2:	68bb      	ldr	r3, [r7, #8]
 80055f4:	ee07 3a90 	vmov	s15, r3
 80055f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80055fc:	697b      	ldr	r3, [r7, #20]
 80055fe:	ee07 3a90 	vmov	s15, r3
 8005602:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005606:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800560a:	4b7b      	ldr	r3, [pc, #492]	; (80057f8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800560c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800560e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005612:	ee07 3a90 	vmov	s15, r3
 8005616:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800561a:	ed97 6a03 	vldr	s12, [r7, #12]
 800561e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005800 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8005622:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005626:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800562a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800562e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005632:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005636:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800563a:	e087      	b.n	800574c <HAL_RCCEx_GetPLL3ClockFreq+0x1d4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800563c:	697b      	ldr	r3, [r7, #20]
 800563e:	ee07 3a90 	vmov	s15, r3
 8005642:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005646:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005804 <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 800564a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800564e:	4b6a      	ldr	r3, [pc, #424]	; (80057f8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005652:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005656:	ee07 3a90 	vmov	s15, r3
 800565a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800565e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005662:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005800 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8005666:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800566a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800566e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005672:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005676:	ee67 7a27 	vmul.f32	s15, s14, s15
 800567a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800567e:	e065      	b.n	800574c <HAL_RCCEx_GetPLL3ClockFreq+0x1d4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005680:	697b      	ldr	r3, [r7, #20]
 8005682:	ee07 3a90 	vmov	s15, r3
 8005686:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800568a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005808 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 800568e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005692:	4b59      	ldr	r3, [pc, #356]	; (80057f8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005696:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800569a:	ee07 3a90 	vmov	s15, r3
 800569e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80056a2:	ed97 6a03 	vldr	s12, [r7, #12]
 80056a6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005800 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80056aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80056ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80056b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80056b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80056ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80056be:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80056c2:	e043      	b.n	800574c <HAL_RCCEx_GetPLL3ClockFreq+0x1d4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80056c4:	697b      	ldr	r3, [r7, #20]
 80056c6:	ee07 3a90 	vmov	s15, r3
 80056ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056ce:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800580c <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 80056d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80056d6:	4b48      	ldr	r3, [pc, #288]	; (80057f8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80056d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80056de:	ee07 3a90 	vmov	s15, r3
 80056e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80056e6:	ed97 6a03 	vldr	s12, [r7, #12]
 80056ea:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005800 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80056ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80056f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80056f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80056fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80056fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005702:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005706:	e021      	b.n	800574c <HAL_RCCEx_GetPLL3ClockFreq+0x1d4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005708:	697b      	ldr	r3, [r7, #20]
 800570a:	ee07 3a90 	vmov	s15, r3
 800570e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005712:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005808 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8005716:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800571a:	4b37      	ldr	r3, [pc, #220]	; (80057f8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800571c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800571e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005722:	ee07 3a90 	vmov	s15, r3
 8005726:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800572a:	ed97 6a03 	vldr	s12, [r7, #12]
 800572e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005800 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8005732:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005736:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800573a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800573e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005742:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005746:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800574a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800574c:	4b2a      	ldr	r3, [pc, #168]	; (80057f8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800574e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005750:	0a5b      	lsrs	r3, r3, #9
 8005752:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005756:	ee07 3a90 	vmov	s15, r3
 800575a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800575e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005762:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005766:	edd7 6a07 	vldr	s13, [r7, #28]
 800576a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800576e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005772:	ee17 2a90 	vmov	r2, s15
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800577a:	4b1f      	ldr	r3, [pc, #124]	; (80057f8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800577c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800577e:	0c1b      	lsrs	r3, r3, #16
 8005780:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005784:	ee07 3a90 	vmov	s15, r3
 8005788:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800578c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005790:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005794:	edd7 6a07 	vldr	s13, [r7, #28]
 8005798:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800579c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80057a0:	ee17 2a90 	vmov	r2, s15
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 80057a8:	4b13      	ldr	r3, [pc, #76]	; (80057f8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80057aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057ac:	0e1b      	lsrs	r3, r3, #24
 80057ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80057b2:	ee07 3a90 	vmov	s15, r3
 80057b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057ba:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80057be:	ee37 7a87 	vadd.f32	s14, s15, s14
 80057c2:	edd7 6a07 	vldr	s13, [r7, #28]
 80057c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80057ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80057ce:	ee17 2a90 	vmov	r2, s15
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80057d6:	e008      	b.n	80057ea <HAL_RCCEx_GetPLL3ClockFreq+0x272>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	2200      	movs	r2, #0
 80057dc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	2200      	movs	r2, #0
 80057e2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	2200      	movs	r2, #0
 80057e8:	609a      	str	r2, [r3, #8]
}
 80057ea:	bf00      	nop
 80057ec:	3724      	adds	r7, #36	; 0x24
 80057ee:	46bd      	mov	sp, r7
 80057f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f4:	4770      	bx	lr
 80057f6:	bf00      	nop
 80057f8:	58024400 	.word	0x58024400
 80057fc:	03d09000 	.word	0x03d09000
 8005800:	46000000 	.word	0x46000000
 8005804:	4c742400 	.word	0x4c742400
 8005808:	4a742400 	.word	0x4a742400
 800580c:	4bbebc20 	.word	0x4bbebc20

08005810 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 8005810:	b480      	push	{r7}
 8005812:	b089      	sub	sp, #36	; 0x24
 8005814:	af00      	add	r7, sp, #0
 8005816:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005818:	4b9d      	ldr	r3, [pc, #628]	; (8005a90 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800581a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800581c:	f003 0303 	and.w	r3, r3, #3
 8005820:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8005822:	4b9b      	ldr	r3, [pc, #620]	; (8005a90 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8005824:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005826:	091b      	lsrs	r3, r3, #4
 8005828:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800582c:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800582e:	4b98      	ldr	r3, [pc, #608]	; (8005a90 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8005830:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005832:	f003 0301 	and.w	r3, r3, #1
 8005836:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8005838:	4b95      	ldr	r3, [pc, #596]	; (8005a90 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800583a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800583c:	08db      	lsrs	r3, r3, #3
 800583e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005842:	693a      	ldr	r2, [r7, #16]
 8005844:	fb02 f303 	mul.w	r3, r2, r3
 8005848:	ee07 3a90 	vmov	s15, r3
 800584c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005850:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8005854:	697b      	ldr	r3, [r7, #20]
 8005856:	2b00      	cmp	r3, #0
 8005858:	f000 810a 	beq.w	8005a70 <HAL_RCCEx_GetPLL1ClockFreq+0x260>
  {
    switch (pllsource)
 800585c:	69bb      	ldr	r3, [r7, #24]
 800585e:	2b01      	cmp	r3, #1
 8005860:	d05a      	beq.n	8005918 <HAL_RCCEx_GetPLL1ClockFreq+0x108>
 8005862:	2b01      	cmp	r3, #1
 8005864:	d302      	bcc.n	800586c <HAL_RCCEx_GetPLL1ClockFreq+0x5c>
 8005866:	2b02      	cmp	r3, #2
 8005868:	d078      	beq.n	800595c <HAL_RCCEx_GetPLL1ClockFreq+0x14c>
 800586a:	e099      	b.n	80059a0 <HAL_RCCEx_GetPLL1ClockFreq+0x190>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800586c:	4b88      	ldr	r3, [pc, #544]	; (8005a90 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f003 0320 	and.w	r3, r3, #32
 8005874:	2b00      	cmp	r3, #0
 8005876:	d02d      	beq.n	80058d4 <HAL_RCCEx_GetPLL1ClockFreq+0xc4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005878:	4b85      	ldr	r3, [pc, #532]	; (8005a90 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	08db      	lsrs	r3, r3, #3
 800587e:	f003 0303 	and.w	r3, r3, #3
 8005882:	4a84      	ldr	r2, [pc, #528]	; (8005a94 <HAL_RCCEx_GetPLL1ClockFreq+0x284>)
 8005884:	fa22 f303 	lsr.w	r3, r2, r3
 8005888:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800588a:	68bb      	ldr	r3, [r7, #8]
 800588c:	ee07 3a90 	vmov	s15, r3
 8005890:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005894:	697b      	ldr	r3, [r7, #20]
 8005896:	ee07 3a90 	vmov	s15, r3
 800589a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800589e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80058a2:	4b7b      	ldr	r3, [pc, #492]	; (8005a90 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80058a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80058aa:	ee07 3a90 	vmov	s15, r3
 80058ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80058b2:	ed97 6a03 	vldr	s12, [r7, #12]
 80058b6:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005a98 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 80058ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80058be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80058c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80058c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80058ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80058ce:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80058d2:	e087      	b.n	80059e4 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80058d4:	697b      	ldr	r3, [r7, #20]
 80058d6:	ee07 3a90 	vmov	s15, r3
 80058da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058de:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005a9c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>
 80058e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80058e6:	4b6a      	ldr	r3, [pc, #424]	; (8005a90 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80058e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80058ee:	ee07 3a90 	vmov	s15, r3
 80058f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80058f6:	ed97 6a03 	vldr	s12, [r7, #12]
 80058fa:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005a98 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 80058fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005902:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005906:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800590a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800590e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005912:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005916:	e065      	b.n	80059e4 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005918:	697b      	ldr	r3, [r7, #20]
 800591a:	ee07 3a90 	vmov	s15, r3
 800591e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005922:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005aa0 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
 8005926:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800592a:	4b59      	ldr	r3, [pc, #356]	; (8005a90 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800592c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800592e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005932:	ee07 3a90 	vmov	s15, r3
 8005936:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800593a:	ed97 6a03 	vldr	s12, [r7, #12]
 800593e:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005a98 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8005942:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005946:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800594a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800594e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005952:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005956:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800595a:	e043      	b.n	80059e4 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800595c:	697b      	ldr	r3, [r7, #20]
 800595e:	ee07 3a90 	vmov	s15, r3
 8005962:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005966:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005aa4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800596a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800596e:	4b48      	ldr	r3, [pc, #288]	; (8005a90 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8005970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005972:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005976:	ee07 3a90 	vmov	s15, r3
 800597a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800597e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005982:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005a98 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8005986:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800598a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800598e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005992:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005996:	ee67 7a27 	vmul.f32	s15, s14, s15
 800599a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800599e:	e021      	b.n	80059e4 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    default:
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80059a0:	697b      	ldr	r3, [r7, #20]
 80059a2:	ee07 3a90 	vmov	s15, r3
 80059a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80059aa:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005aa0 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
 80059ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80059b2:	4b37      	ldr	r3, [pc, #220]	; (8005a90 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80059b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80059ba:	ee07 3a90 	vmov	s15, r3
 80059be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80059c2:	ed97 6a03 	vldr	s12, [r7, #12]
 80059c6:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005a98 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 80059ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80059ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80059d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80059d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80059da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80059de:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80059e2:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 80059e4:	4b2a      	ldr	r3, [pc, #168]	; (8005a90 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80059e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059e8:	0a5b      	lsrs	r3, r3, #9
 80059ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80059ee:	ee07 3a90 	vmov	s15, r3
 80059f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80059f6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80059fa:	ee37 7a87 	vadd.f32	s14, s15, s14
 80059fe:	edd7 6a07 	vldr	s13, [r7, #28]
 8005a02:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005a06:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005a0a:	ee17 2a90 	vmov	r2, s15
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8005a12:	4b1f      	ldr	r3, [pc, #124]	; (8005a90 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8005a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a16:	0c1b      	lsrs	r3, r3, #16
 8005a18:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005a1c:	ee07 3a90 	vmov	s15, r3
 8005a20:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a24:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005a28:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005a2c:	edd7 6a07 	vldr	s13, [r7, #28]
 8005a30:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005a34:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005a38:	ee17 2a90 	vmov	r2, s15
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 8005a40:	4b13      	ldr	r3, [pc, #76]	; (8005a90 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8005a42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a44:	0e1b      	lsrs	r3, r3, #24
 8005a46:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005a4a:	ee07 3a90 	vmov	s15, r3
 8005a4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a52:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005a56:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005a5a:	edd7 6a07 	vldr	s13, [r7, #28]
 8005a5e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005a62:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005a66:	ee17 2a90 	vmov	r2, s15
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8005a6e:	e008      	b.n	8005a82 <HAL_RCCEx_GetPLL1ClockFreq+0x272>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	2200      	movs	r2, #0
 8005a74:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	2200      	movs	r2, #0
 8005a7a:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	2200      	movs	r2, #0
 8005a80:	609a      	str	r2, [r3, #8]
}
 8005a82:	bf00      	nop
 8005a84:	3724      	adds	r7, #36	; 0x24
 8005a86:	46bd      	mov	sp, r7
 8005a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8c:	4770      	bx	lr
 8005a8e:	bf00      	nop
 8005a90:	58024400 	.word	0x58024400
 8005a94:	03d09000 	.word	0x03d09000
 8005a98:	46000000 	.word	0x46000000
 8005a9c:	4c742400 	.word	0x4c742400
 8005aa0:	4a742400 	.word	0x4a742400
 8005aa4:	4bbebc20 	.word	0x4bbebc20

08005aa8 <HAL_RCCEx_GetD1SysClockFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCCEx_GetD1SysClockFreq(void)
{
 8005aa8:	b580      	push	{r7, lr}
 8005aaa:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8005aac:	f7fe f922 	bl	8003cf4 <HAL_RCC_GetSysClockFreq>
 8005ab0:	4601      	mov	r1, r0
 8005ab2:	4b08      	ldr	r3, [pc, #32]	; (8005ad4 <HAL_RCCEx_GetD1SysClockFreq+0x2c>)
 8005ab4:	699b      	ldr	r3, [r3, #24]
 8005ab6:	0a1b      	lsrs	r3, r3, #8
 8005ab8:	f003 030f 	and.w	r3, r3, #15
 8005abc:	4a06      	ldr	r2, [pc, #24]	; (8005ad8 <HAL_RCCEx_GetD1SysClockFreq+0x30>)
 8005abe:	5cd3      	ldrb	r3, [r2, r3]
 8005ac0:	f003 031f 	and.w	r3, r3, #31
 8005ac4:	fa21 f303 	lsr.w	r3, r1, r3
 8005ac8:	4a04      	ldr	r2, [pc, #16]	; (8005adc <HAL_RCCEx_GetD1SysClockFreq+0x34>)
 8005aca:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 8005acc:	4b03      	ldr	r3, [pc, #12]	; (8005adc <HAL_RCCEx_GetD1SysClockFreq+0x34>)
 8005ace:	681b      	ldr	r3, [r3, #0]
}
 8005ad0:	4618      	mov	r0, r3
 8005ad2:	bd80      	pop	{r7, pc}
 8005ad4:	58024400 	.word	0x58024400
 8005ad8:	0800c06c 	.word	0x0800c06c
 8005adc:	24000040 	.word	0x24000040

08005ae0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8005ae0:	b580      	push	{r7, lr}
 8005ae2:	b084      	sub	sp, #16
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	6078      	str	r0, [r7, #4]
 8005ae8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005aea:	2300      	movs	r3, #0
 8005aec:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005aee:	4b53      	ldr	r3, [pc, #332]	; (8005c3c <RCCEx_PLL2_Config+0x15c>)
 8005af0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005af2:	f003 0303 	and.w	r3, r3, #3
 8005af6:	2b03      	cmp	r3, #3
 8005af8:	d101      	bne.n	8005afe <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8005afa:	2301      	movs	r3, #1
 8005afc:	e099      	b.n	8005c32 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8005afe:	4b4f      	ldr	r3, [pc, #316]	; (8005c3c <RCCEx_PLL2_Config+0x15c>)
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	4a4e      	ldr	r2, [pc, #312]	; (8005c3c <RCCEx_PLL2_Config+0x15c>)
 8005b04:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005b08:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005b0a:	f7fb fdb9 	bl	8001680 <HAL_GetTick>
 8005b0e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005b10:	e008      	b.n	8005b24 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8005b12:	f7fb fdb5 	bl	8001680 <HAL_GetTick>
 8005b16:	4602      	mov	r2, r0
 8005b18:	68bb      	ldr	r3, [r7, #8]
 8005b1a:	1ad3      	subs	r3, r2, r3
 8005b1c:	2b02      	cmp	r3, #2
 8005b1e:	d901      	bls.n	8005b24 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005b20:	2303      	movs	r3, #3
 8005b22:	e086      	b.n	8005c32 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005b24:	4b45      	ldr	r3, [pc, #276]	; (8005c3c <RCCEx_PLL2_Config+0x15c>)
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d1f0      	bne.n	8005b12 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8005b30:	4b42      	ldr	r3, [pc, #264]	; (8005c3c <RCCEx_PLL2_Config+0x15c>)
 8005b32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b34:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	031b      	lsls	r3, r3, #12
 8005b3e:	493f      	ldr	r1, [pc, #252]	; (8005c3c <RCCEx_PLL2_Config+0x15c>)
 8005b40:	4313      	orrs	r3, r2
 8005b42:	628b      	str	r3, [r1, #40]	; 0x28
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	685b      	ldr	r3, [r3, #4]
 8005b48:	3b01      	subs	r3, #1
 8005b4a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	689b      	ldr	r3, [r3, #8]
 8005b52:	3b01      	subs	r3, #1
 8005b54:	025b      	lsls	r3, r3, #9
 8005b56:	b29b      	uxth	r3, r3
 8005b58:	431a      	orrs	r2, r3
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	68db      	ldr	r3, [r3, #12]
 8005b5e:	3b01      	subs	r3, #1
 8005b60:	041b      	lsls	r3, r3, #16
 8005b62:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005b66:	431a      	orrs	r2, r3
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	691b      	ldr	r3, [r3, #16]
 8005b6c:	3b01      	subs	r3, #1
 8005b6e:	061b      	lsls	r3, r3, #24
 8005b70:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005b74:	4931      	ldr	r1, [pc, #196]	; (8005c3c <RCCEx_PLL2_Config+0x15c>)
 8005b76:	4313      	orrs	r3, r2
 8005b78:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8005b7a:	4b30      	ldr	r3, [pc, #192]	; (8005c3c <RCCEx_PLL2_Config+0x15c>)
 8005b7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b7e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	695b      	ldr	r3, [r3, #20]
 8005b86:	492d      	ldr	r1, [pc, #180]	; (8005c3c <RCCEx_PLL2_Config+0x15c>)
 8005b88:	4313      	orrs	r3, r2
 8005b8a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8005b8c:	4b2b      	ldr	r3, [pc, #172]	; (8005c3c <RCCEx_PLL2_Config+0x15c>)
 8005b8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b90:	f023 0220 	bic.w	r2, r3, #32
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	699b      	ldr	r3, [r3, #24]
 8005b98:	4928      	ldr	r1, [pc, #160]	; (8005c3c <RCCEx_PLL2_Config+0x15c>)
 8005b9a:	4313      	orrs	r3, r2
 8005b9c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8005b9e:	4b27      	ldr	r3, [pc, #156]	; (8005c3c <RCCEx_PLL2_Config+0x15c>)
 8005ba0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ba2:	4a26      	ldr	r2, [pc, #152]	; (8005c3c <RCCEx_PLL2_Config+0x15c>)
 8005ba4:	f023 0310 	bic.w	r3, r3, #16
 8005ba8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8005baa:	4b24      	ldr	r3, [pc, #144]	; (8005c3c <RCCEx_PLL2_Config+0x15c>)
 8005bac:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005bae:	4b24      	ldr	r3, [pc, #144]	; (8005c40 <RCCEx_PLL2_Config+0x160>)
 8005bb0:	4013      	ands	r3, r2
 8005bb2:	687a      	ldr	r2, [r7, #4]
 8005bb4:	69d2      	ldr	r2, [r2, #28]
 8005bb6:	00d2      	lsls	r2, r2, #3
 8005bb8:	4920      	ldr	r1, [pc, #128]	; (8005c3c <RCCEx_PLL2_Config+0x15c>)
 8005bba:	4313      	orrs	r3, r2
 8005bbc:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8005bbe:	4b1f      	ldr	r3, [pc, #124]	; (8005c3c <RCCEx_PLL2_Config+0x15c>)
 8005bc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bc2:	4a1e      	ldr	r2, [pc, #120]	; (8005c3c <RCCEx_PLL2_Config+0x15c>)
 8005bc4:	f043 0310 	orr.w	r3, r3, #16
 8005bc8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8005bca:	683b      	ldr	r3, [r7, #0]
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d106      	bne.n	8005bde <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005bd0:	4b1a      	ldr	r3, [pc, #104]	; (8005c3c <RCCEx_PLL2_Config+0x15c>)
 8005bd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bd4:	4a19      	ldr	r2, [pc, #100]	; (8005c3c <RCCEx_PLL2_Config+0x15c>)
 8005bd6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005bda:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005bdc:	e00f      	b.n	8005bfe <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8005bde:	683b      	ldr	r3, [r7, #0]
 8005be0:	2b01      	cmp	r3, #1
 8005be2:	d106      	bne.n	8005bf2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8005be4:	4b15      	ldr	r3, [pc, #84]	; (8005c3c <RCCEx_PLL2_Config+0x15c>)
 8005be6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005be8:	4a14      	ldr	r2, [pc, #80]	; (8005c3c <RCCEx_PLL2_Config+0x15c>)
 8005bea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005bee:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005bf0:	e005      	b.n	8005bfe <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8005bf2:	4b12      	ldr	r3, [pc, #72]	; (8005c3c <RCCEx_PLL2_Config+0x15c>)
 8005bf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bf6:	4a11      	ldr	r2, [pc, #68]	; (8005c3c <RCCEx_PLL2_Config+0x15c>)
 8005bf8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005bfc:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8005bfe:	4b0f      	ldr	r3, [pc, #60]	; (8005c3c <RCCEx_PLL2_Config+0x15c>)
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	4a0e      	ldr	r2, [pc, #56]	; (8005c3c <RCCEx_PLL2_Config+0x15c>)
 8005c04:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005c08:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005c0a:	f7fb fd39 	bl	8001680 <HAL_GetTick>
 8005c0e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005c10:	e008      	b.n	8005c24 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8005c12:	f7fb fd35 	bl	8001680 <HAL_GetTick>
 8005c16:	4602      	mov	r2, r0
 8005c18:	68bb      	ldr	r3, [r7, #8]
 8005c1a:	1ad3      	subs	r3, r2, r3
 8005c1c:	2b02      	cmp	r3, #2
 8005c1e:	d901      	bls.n	8005c24 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005c20:	2303      	movs	r3, #3
 8005c22:	e006      	b.n	8005c32 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005c24:	4b05      	ldr	r3, [pc, #20]	; (8005c3c <RCCEx_PLL2_Config+0x15c>)
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d0f0      	beq.n	8005c12 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8005c30:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c32:	4618      	mov	r0, r3
 8005c34:	3710      	adds	r7, #16
 8005c36:	46bd      	mov	sp, r7
 8005c38:	bd80      	pop	{r7, pc}
 8005c3a:	bf00      	nop
 8005c3c:	58024400 	.word	0x58024400
 8005c40:	ffff0007 	.word	0xffff0007

08005c44 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8005c44:	b580      	push	{r7, lr}
 8005c46:	b084      	sub	sp, #16
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	6078      	str	r0, [r7, #4]
 8005c4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005c4e:	2300      	movs	r3, #0
 8005c50:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005c52:	4b53      	ldr	r3, [pc, #332]	; (8005da0 <RCCEx_PLL3_Config+0x15c>)
 8005c54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c56:	f003 0303 	and.w	r3, r3, #3
 8005c5a:	2b03      	cmp	r3, #3
 8005c5c:	d101      	bne.n	8005c62 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8005c5e:	2301      	movs	r3, #1
 8005c60:	e099      	b.n	8005d96 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8005c62:	4b4f      	ldr	r3, [pc, #316]	; (8005da0 <RCCEx_PLL3_Config+0x15c>)
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	4a4e      	ldr	r2, [pc, #312]	; (8005da0 <RCCEx_PLL3_Config+0x15c>)
 8005c68:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005c6c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005c6e:	f7fb fd07 	bl	8001680 <HAL_GetTick>
 8005c72:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005c74:	e008      	b.n	8005c88 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8005c76:	f7fb fd03 	bl	8001680 <HAL_GetTick>
 8005c7a:	4602      	mov	r2, r0
 8005c7c:	68bb      	ldr	r3, [r7, #8]
 8005c7e:	1ad3      	subs	r3, r2, r3
 8005c80:	2b02      	cmp	r3, #2
 8005c82:	d901      	bls.n	8005c88 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005c84:	2303      	movs	r3, #3
 8005c86:	e086      	b.n	8005d96 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005c88:	4b45      	ldr	r3, [pc, #276]	; (8005da0 <RCCEx_PLL3_Config+0x15c>)
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d1f0      	bne.n	8005c76 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8005c94:	4b42      	ldr	r3, [pc, #264]	; (8005da0 <RCCEx_PLL3_Config+0x15c>)
 8005c96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c98:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	051b      	lsls	r3, r3, #20
 8005ca2:	493f      	ldr	r1, [pc, #252]	; (8005da0 <RCCEx_PLL3_Config+0x15c>)
 8005ca4:	4313      	orrs	r3, r2
 8005ca6:	628b      	str	r3, [r1, #40]	; 0x28
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	685b      	ldr	r3, [r3, #4]
 8005cac:	3b01      	subs	r3, #1
 8005cae:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	689b      	ldr	r3, [r3, #8]
 8005cb6:	3b01      	subs	r3, #1
 8005cb8:	025b      	lsls	r3, r3, #9
 8005cba:	b29b      	uxth	r3, r3
 8005cbc:	431a      	orrs	r2, r3
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	68db      	ldr	r3, [r3, #12]
 8005cc2:	3b01      	subs	r3, #1
 8005cc4:	041b      	lsls	r3, r3, #16
 8005cc6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005cca:	431a      	orrs	r2, r3
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	691b      	ldr	r3, [r3, #16]
 8005cd0:	3b01      	subs	r3, #1
 8005cd2:	061b      	lsls	r3, r3, #24
 8005cd4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005cd8:	4931      	ldr	r1, [pc, #196]	; (8005da0 <RCCEx_PLL3_Config+0x15c>)
 8005cda:	4313      	orrs	r3, r2
 8005cdc:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8005cde:	4b30      	ldr	r3, [pc, #192]	; (8005da0 <RCCEx_PLL3_Config+0x15c>)
 8005ce0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ce2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	695b      	ldr	r3, [r3, #20]
 8005cea:	492d      	ldr	r1, [pc, #180]	; (8005da0 <RCCEx_PLL3_Config+0x15c>)
 8005cec:	4313      	orrs	r3, r2
 8005cee:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005cf0:	4b2b      	ldr	r3, [pc, #172]	; (8005da0 <RCCEx_PLL3_Config+0x15c>)
 8005cf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cf4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	699b      	ldr	r3, [r3, #24]
 8005cfc:	4928      	ldr	r1, [pc, #160]	; (8005da0 <RCCEx_PLL3_Config+0x15c>)
 8005cfe:	4313      	orrs	r3, r2
 8005d00:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8005d02:	4b27      	ldr	r3, [pc, #156]	; (8005da0 <RCCEx_PLL3_Config+0x15c>)
 8005d04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d06:	4a26      	ldr	r2, [pc, #152]	; (8005da0 <RCCEx_PLL3_Config+0x15c>)
 8005d08:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005d0c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8005d0e:	4b24      	ldr	r3, [pc, #144]	; (8005da0 <RCCEx_PLL3_Config+0x15c>)
 8005d10:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005d12:	4b24      	ldr	r3, [pc, #144]	; (8005da4 <RCCEx_PLL3_Config+0x160>)
 8005d14:	4013      	ands	r3, r2
 8005d16:	687a      	ldr	r2, [r7, #4]
 8005d18:	69d2      	ldr	r2, [r2, #28]
 8005d1a:	00d2      	lsls	r2, r2, #3
 8005d1c:	4920      	ldr	r1, [pc, #128]	; (8005da0 <RCCEx_PLL3_Config+0x15c>)
 8005d1e:	4313      	orrs	r3, r2
 8005d20:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8005d22:	4b1f      	ldr	r3, [pc, #124]	; (8005da0 <RCCEx_PLL3_Config+0x15c>)
 8005d24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d26:	4a1e      	ldr	r2, [pc, #120]	; (8005da0 <RCCEx_PLL3_Config+0x15c>)
 8005d28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d2c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8005d2e:	683b      	ldr	r3, [r7, #0]
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d106      	bne.n	8005d42 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8005d34:	4b1a      	ldr	r3, [pc, #104]	; (8005da0 <RCCEx_PLL3_Config+0x15c>)
 8005d36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d38:	4a19      	ldr	r2, [pc, #100]	; (8005da0 <RCCEx_PLL3_Config+0x15c>)
 8005d3a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005d3e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005d40:	e00f      	b.n	8005d62 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8005d42:	683b      	ldr	r3, [r7, #0]
 8005d44:	2b01      	cmp	r3, #1
 8005d46:	d106      	bne.n	8005d56 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8005d48:	4b15      	ldr	r3, [pc, #84]	; (8005da0 <RCCEx_PLL3_Config+0x15c>)
 8005d4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d4c:	4a14      	ldr	r2, [pc, #80]	; (8005da0 <RCCEx_PLL3_Config+0x15c>)
 8005d4e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005d52:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005d54:	e005      	b.n	8005d62 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8005d56:	4b12      	ldr	r3, [pc, #72]	; (8005da0 <RCCEx_PLL3_Config+0x15c>)
 8005d58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d5a:	4a11      	ldr	r2, [pc, #68]	; (8005da0 <RCCEx_PLL3_Config+0x15c>)
 8005d5c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005d60:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8005d62:	4b0f      	ldr	r3, [pc, #60]	; (8005da0 <RCCEx_PLL3_Config+0x15c>)
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	4a0e      	ldr	r2, [pc, #56]	; (8005da0 <RCCEx_PLL3_Config+0x15c>)
 8005d68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d6c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005d6e:	f7fb fc87 	bl	8001680 <HAL_GetTick>
 8005d72:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005d74:	e008      	b.n	8005d88 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8005d76:	f7fb fc83 	bl	8001680 <HAL_GetTick>
 8005d7a:	4602      	mov	r2, r0
 8005d7c:	68bb      	ldr	r3, [r7, #8]
 8005d7e:	1ad3      	subs	r3, r2, r3
 8005d80:	2b02      	cmp	r3, #2
 8005d82:	d901      	bls.n	8005d88 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005d84:	2303      	movs	r3, #3
 8005d86:	e006      	b.n	8005d96 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005d88:	4b05      	ldr	r3, [pc, #20]	; (8005da0 <RCCEx_PLL3_Config+0x15c>)
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d0f0      	beq.n	8005d76 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8005d94:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d96:	4618      	mov	r0, r3
 8005d98:	3710      	adds	r7, #16
 8005d9a:	46bd      	mov	sp, r7
 8005d9c:	bd80      	pop	{r7, pc}
 8005d9e:	bf00      	nop
 8005da0:	58024400 	.word	0x58024400
 8005da4:	ffff0007 	.word	0xffff0007

08005da8 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8005da8:	b580      	push	{r7, lr}
 8005daa:	b08a      	sub	sp, #40	; 0x28
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	6078      	str	r0, [r7, #4]
  HAL_SD_CardStatusTypeDef CardStatus;
  uint32_t speedgrade, unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if(hsd == NULL)
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d101      	bne.n	8005dba <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8005db6:	2301      	movs	r3, #1
 8005db8:	e07c      	b.n	8005eb4 <HAL_SD_Init+0x10c>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005dc0:	b2db      	uxtb	r3, r3
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d10c      	bne.n	8005de0 <HAL_SD_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	2200      	movs	r2, #0
 8005dca:	771a      	strb	r2, [r3, #28]

#if (USE_SD_TRANSCEIVER != 0U)
    /* Force  SDMMC_TRANSCEIVER_PRESENT for Legacy usage */
    if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_UNKNOWN)
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	699b      	ldr	r3, [r3, #24]
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d102      	bne.n	8005dda <HAL_SD_Init+0x32>
    {
      hsd->Init.TranceiverPresent = SDMMC_TRANSCEIVER_PRESENT;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	2202      	movs	r2, #2
 8005dd8:	619a      	str	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8005dda:	6878      	ldr	r0, [r7, #4]
 8005ddc:	f7fb f9be 	bl	800115c <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	2203      	movs	r2, #3
 8005de4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8005de8:	6878      	ldr	r0, [r7, #4]
 8005dea:	f000 f867 	bl	8005ebc <HAL_SD_InitCard>
 8005dee:	4603      	mov	r3, r0
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d001      	beq.n	8005df8 <HAL_SD_Init+0x50>
  {
    return HAL_ERROR;
 8005df4:	2301      	movs	r3, #1
 8005df6:	e05d      	b.n	8005eb4 <HAL_SD_Init+0x10c>
  }

  if( HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 8005df8:	f107 0308 	add.w	r3, r7, #8
 8005dfc:	4619      	mov	r1, r3
 8005dfe:	6878      	ldr	r0, [r7, #4]
 8005e00:	f000 fde8 	bl	80069d4 <HAL_SD_GetCardStatus>
 8005e04:	4603      	mov	r3, r0
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d001      	beq.n	8005e0e <HAL_SD_Init+0x66>
  {
    return HAL_ERROR;
 8005e0a:	2301      	movs	r3, #1
 8005e0c:	e052      	b.n	8005eb4 <HAL_SD_Init+0x10c>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 8005e0e:	7e3b      	ldrb	r3, [r7, #24]
 8005e10:	b2db      	uxtb	r3, r3
 8005e12:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 8005e14:	7e7b      	ldrb	r3, [r7, #25]
 8005e16:	b2db      	uxtb	r3, r3
 8005e18:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e1e:	2b01      	cmp	r3, #1
 8005e20:	d10a      	bne.n	8005e38 <HAL_SD_Init+0x90>
 8005e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d102      	bne.n	8005e2e <HAL_SD_Init+0x86>
 8005e28:	6a3b      	ldr	r3, [r7, #32]
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d004      	beq.n	8005e38 <HAL_SD_Init+0x90>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005e34:	65da      	str	r2, [r3, #92]	; 0x5c
 8005e36:	e00b      	b.n	8005e50 <HAL_SD_Init+0xa8>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e3c:	2b01      	cmp	r3, #1
 8005e3e:	d104      	bne.n	8005e4a <HAL_SD_Init+0xa2>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005e46:	65da      	str	r2, [r3, #92]	; 0x5c
 8005e48:	e002      	b.n	8005e50 <HAL_SD_Init+0xa8>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	2200      	movs	r2, #0
 8005e4e:	65da      	str	r2, [r3, #92]	; 0x5c
    }

  }
  /* Configure the bus wide */
  if(HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	68db      	ldr	r3, [r3, #12]
 8005e54:	4619      	mov	r1, r3
 8005e56:	6878      	ldr	r0, [r7, #4]
 8005e58:	f000 fe80 	bl	8006b5c <HAL_SD_ConfigWideBusOperation>
 8005e5c:	4603      	mov	r3, r0
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d001      	beq.n	8005e66 <HAL_SD_Init+0xbe>
  {
    return HAL_ERROR;
 8005e62:	2301      	movs	r3, #1
 8005e64:	e026      	b.n	8005eb4 <HAL_SD_Init+0x10c>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 8005e66:	f7fb fc0b 	bl	8001680 <HAL_GetTick>
 8005e6a:	61f8      	str	r0, [r7, #28]
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8005e6c:	e011      	b.n	8005e92 <HAL_SD_Init+0xea>
  {
    if((HAL_GetTick()-tickstart) >=  SDMMC_DATATIMEOUT)
 8005e6e:	f7fb fc07 	bl	8001680 <HAL_GetTick>
 8005e72:	4602      	mov	r2, r0
 8005e74:	69fb      	ldr	r3, [r7, #28]
 8005e76:	1ad3      	subs	r3, r2, r3
 8005e78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e7c:	d109      	bne.n	8005e92 <HAL_SD_Init+0xea>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005e84:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State= HAL_SD_STATE_READY;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	2201      	movs	r2, #1
 8005e8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_TIMEOUT;
 8005e8e:	2303      	movs	r3, #3
 8005e90:	e010      	b.n	8005eb4 <HAL_SD_Init+0x10c>
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8005e92:	6878      	ldr	r0, [r7, #4]
 8005e94:	f000 fef2 	bl	8006c7c <HAL_SD_GetCardState>
 8005e98:	4603      	mov	r3, r0
 8005e9a:	2b04      	cmp	r3, #4
 8005e9c:	d1e7      	bne.n	8005e6e <HAL_SD_Init+0xc6>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	2200      	movs	r2, #0
 8005ea2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	2200      	movs	r2, #0
 8005ea8:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	2201      	movs	r2, #1
 8005eae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8005eb2:	2300      	movs	r3, #0
}
 8005eb4:	4618      	mov	r0, r3
 8005eb6:	3728      	adds	r7, #40	; 0x28
 8005eb8:	46bd      	mov	sp, r7
 8005eba:	bd80      	pop	{r7, pc}

08005ebc <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8005ebc:	b5b0      	push	{r4, r5, r7, lr}
 8005ebe:	b090      	sub	sp, #64	; 0x40
 8005ec0:	af04      	add	r7, sp, #16
 8005ec2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8005ec4:	2300      	movs	r3, #0
 8005ec6:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8005ec8:	2300      	movs	r3, #0
 8005eca:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8005ecc:	2300      	movs	r3, #0
 8005ece:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8005ed0:	2300      	movs	r3, #0
 8005ed2:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 8005ed4:	23fa      	movs	r3, #250	; 0xfa
 8005ed6:	61fb      	str	r3, [r7, #28]

#if (USE_SD_TRANSCEIVER != 0U) || defined (USE_SD_DIRPOL)
  if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	699b      	ldr	r3, [r3, #24]
 8005edc:	2b02      	cmp	r3, #2
 8005ede:	d107      	bne.n	8005ef0 <HAL_SD_InitCard+0x34>
  {
    /* Set Transceiver polarity */
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	681a      	ldr	r2, [r3, #0]
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	f042 0210 	orr.w	r2, r2, #16
 8005eee:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681d      	ldr	r5, [r3, #0]
 8005ef4:	466c      	mov	r4, sp
 8005ef6:	f107 0318 	add.w	r3, r7, #24
 8005efa:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005efe:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005f02:	f107 030c 	add.w	r3, r7, #12
 8005f06:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005f08:	4628      	mov	r0, r5
 8005f0a:	f004 f8bf 	bl	800a08c <SDMMC_Init>
 8005f0e:	4603      	mov	r3, r0
 8005f10:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if(status != HAL_OK)
 8005f14:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d001      	beq.n	8005f20 <HAL_SD_InitCard+0x64>
  {
    return HAL_ERROR;
 8005f1c:	2301      	movs	r3, #1
 8005f1e:	e04d      	b.n	8005fbc <HAL_SD_InitCard+0x100>
  }

  /* Set Power State to ON */
  status = SDMMC_PowerState_ON(hsd->Instance);
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	4618      	mov	r0, r3
 8005f26:	f004 f8f9 	bl	800a11c <SDMMC_PowerState_ON>
 8005f2a:	4603      	mov	r3, r0
 8005f2c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if(status != HAL_OK)
 8005f30:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d001      	beq.n	8005f3c <HAL_SD_InitCard+0x80>
  {
    return HAL_ERROR;
 8005f38:	2301      	movs	r3, #1
 8005f3a:	e03f      	b.n	8005fbc <HAL_SD_InitCard+0x100>
  }

  /* wait 74 Cycles: required power up waiting time before starting 
     the SD initialization sequence */
  sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC)/(2U*SDMMC_INIT_CLK_DIV);
 8005f3c:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8005f40:	f7fe ff82 	bl	8004e48 <HAL_RCCEx_GetPeriphCLKFreq>
 8005f44:	4602      	mov	r2, r0
 8005f46:	4b1f      	ldr	r3, [pc, #124]	; (8005fc4 <HAL_SD_InitCard+0x108>)
 8005f48:	fba3 2302 	umull	r2, r3, r3, r2
 8005f4c:	095b      	lsrs	r3, r3, #5
 8005f4e:	62bb      	str	r3, [r7, #40]	; 0x28

  if(sdmmc_clk != 0U)
 8005f50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d008      	beq.n	8005f68 <HAL_SD_InitCard+0xac>
  {
    HAL_Delay(1U+ (74U*1000U/(sdmmc_clk)));
 8005f56:	4a1c      	ldr	r2, [pc, #112]	; (8005fc8 <HAL_SD_InitCard+0x10c>)
 8005f58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f5e:	3301      	adds	r3, #1
 8005f60:	4618      	mov	r0, r3
 8005f62:	f7fb fb99 	bl	8001698 <HAL_Delay>
 8005f66:	e002      	b.n	8005f6e <HAL_SD_InitCard+0xb2>
  }
  else
  {
    HAL_Delay(2U);
 8005f68:	2002      	movs	r0, #2
 8005f6a:	f7fb fb95 	bl	8001698 <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8005f6e:	6878      	ldr	r0, [r7, #4]
 8005f70:	f000 ff62 	bl	8006e38 <SD_PowerON>
 8005f74:	6278      	str	r0, [r7, #36]	; 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 8005f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d00b      	beq.n	8005f94 <HAL_SD_InitCard+0xd8>
  {
    hsd->State = HAL_SD_STATE_READY;
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	2201      	movs	r2, #1
 8005f80:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f8a:	431a      	orrs	r2, r3
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8005f90:	2301      	movs	r3, #1
 8005f92:	e013      	b.n	8005fbc <HAL_SD_InitCard+0x100>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8005f94:	6878      	ldr	r0, [r7, #4]
 8005f96:	f000 fe91 	bl	8006cbc <SD_InitCard>
 8005f9a:	6278      	str	r0, [r7, #36]	; 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 8005f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d00b      	beq.n	8005fba <HAL_SD_InitCard+0xfe>
  {
    hsd->State = HAL_SD_STATE_READY;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	2201      	movs	r2, #1
 8005fa6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fb0:	431a      	orrs	r2, r3
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8005fb6:	2301      	movs	r3, #1
 8005fb8:	e000      	b.n	8005fbc <HAL_SD_InitCard+0x100>
  }

  return HAL_OK;
 8005fba:	2300      	movs	r3, #0
}
 8005fbc:	4618      	mov	r0, r3
 8005fbe:	3730      	adds	r7, #48	; 0x30
 8005fc0:	46bd      	mov	sp, r7
 8005fc2:	bdb0      	pop	{r4, r5, r7, pc}
 8005fc4:	10624dd3 	.word	0x10624dd3
 8005fc8:	00012110 	.word	0x00012110

08005fcc <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8005fcc:	b580      	push	{r7, lr}
 8005fce:	b092      	sub	sp, #72	; 0x48
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	60f8      	str	r0, [r7, #12]
 8005fd4:	60b9      	str	r1, [r7, #8]
 8005fd6:	607a      	str	r2, [r7, #4]
 8005fd8:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8005fda:	f7fb fb51 	bl	8001680 <HAL_GetTick>
 8005fde:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8005fe4:	68bb      	ldr	r3, [r7, #8]
 8005fe6:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8005fe8:	68bb      	ldr	r3, [r7, #8]
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d107      	bne.n	8005ffe <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ff2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8005ffa:	2301      	movs	r3, #1
 8005ffc:	e185      	b.n	800630a <HAL_SD_ReadBlocks+0x33e>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006004:	b2db      	uxtb	r3, r3
 8006006:	2b01      	cmp	r3, #1
 8006008:	f040 8178 	bne.w	80062fc <HAL_SD_ReadBlocks+0x330>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	2200      	movs	r2, #0
 8006010:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8006012:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006014:	683b      	ldr	r3, [r7, #0]
 8006016:	441a      	add	r2, r3
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800601c:	429a      	cmp	r2, r3
 800601e:	d907      	bls.n	8006030 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006024:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800602c:	2301      	movs	r3, #1
 800602e:	e16c      	b.n	800630a <HAL_SD_ReadBlocks+0x33e>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	2203      	movs	r2, #3
 8006034:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	2200      	movs	r2, #0
 800603e:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006044:	2b01      	cmp	r3, #1
 8006046:	d002      	beq.n	800604e <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8006048:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800604a:	025b      	lsls	r3, r3, #9
 800604c:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006056:	4618      	mov	r0, r3
 8006058:	f004 f8f6 	bl	800a248 <SDMMC_CmdBlockLength>
 800605c:	6478      	str	r0, [r7, #68]	; 0x44
    if(errorstate != HAL_SD_ERROR_NONE)
 800605e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006060:	2b00      	cmp	r3, #0
 8006062:	d00f      	beq.n	8006084 <HAL_SD_ReadBlocks+0xb8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	4a91      	ldr	r2, [pc, #580]	; (80062b0 <HAL_SD_ReadBlocks+0x2e4>)
 800606a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006070:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006072:	431a      	orrs	r2, r3
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	2201      	movs	r2, #1
 800607c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8006080:	2301      	movs	r3, #1
 8006082:	e142      	b.n	800630a <HAL_SD_ReadBlocks+0x33e>
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006084:	f04f 33ff 	mov.w	r3, #4294967295
 8006088:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800608a:	683b      	ldr	r3, [r7, #0]
 800608c:	025b      	lsls	r3, r3, #9
 800608e:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8006090:	2390      	movs	r3, #144	; 0x90
 8006092:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8006094:	2302      	movs	r3, #2
 8006096:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8006098:	2300      	movs	r3, #0
 800609a:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800609c:	2300      	movs	r3, #0
 800609e:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	f107 0214 	add.w	r2, r7, #20
 80060a8:	4611      	mov	r1, r2
 80060aa:	4618      	mov	r0, r3
 80060ac:	f004 f8a0 	bl	800a1f0 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	68da      	ldr	r2, [r3, #12]
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80060be:	60da      	str	r2, [r3, #12]

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 80060c0:	683b      	ldr	r3, [r7, #0]
 80060c2:	2b01      	cmp	r3, #1
 80060c4:	d90a      	bls.n	80060dc <HAL_SD_ReadBlocks+0x110>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	2202      	movs	r2, #2
 80060ca:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80060d2:	4618      	mov	r0, r3
 80060d4:	f004 f8fe 	bl	800a2d4 <SDMMC_CmdReadMultiBlock>
 80060d8:	6478      	str	r0, [r7, #68]	; 0x44
 80060da:	e009      	b.n	80060f0 <HAL_SD_ReadBlocks+0x124>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	2201      	movs	r2, #1
 80060e0:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80060e8:	4618      	mov	r0, r3
 80060ea:	f004 f8d0 	bl	800a28e <SDMMC_CmdReadSingleBlock>
 80060ee:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80060f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d012      	beq.n	800611c <HAL_SD_ReadBlocks+0x150>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	4a6d      	ldr	r2, [pc, #436]	; (80062b0 <HAL_SD_ReadBlocks+0x2e4>)
 80060fc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006102:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006104:	431a      	orrs	r2, r3
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	2201      	movs	r2, #1
 800610e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	2200      	movs	r2, #0
 8006116:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8006118:	2301      	movs	r3, #1
 800611a:	e0f6      	b.n	800630a <HAL_SD_ReadBlocks+0x33e>
    }

    /* Poll on SDMMC flags */
    dataremaining = config.DataLength;
 800611c:	69bb      	ldr	r3, [r7, #24]
 800611e:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8006120:	e058      	b.n	80061d4 <HAL_SD_ReadBlocks+0x208>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining >= 32U))
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006128:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800612c:	2b00      	cmp	r3, #0
 800612e:	d033      	beq.n	8006198 <HAL_SD_ReadBlocks+0x1cc>
 8006130:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006132:	2b1f      	cmp	r3, #31
 8006134:	d930      	bls.n	8006198 <HAL_SD_ReadBlocks+0x1cc>
      {
        /* Read data from SDMMC Rx FIFO */
        for(count = 0U; count < 8U; count++)
 8006136:	2300      	movs	r3, #0
 8006138:	643b      	str	r3, [r7, #64]	; 0x40
 800613a:	e027      	b.n	800618c <HAL_SD_ReadBlocks+0x1c0>
        {
          data = SDMMC_ReadFIFO(hsd->Instance);
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	4618      	mov	r0, r3
 8006142:	f003 ffcd 	bl	800a0e0 <SDMMC_ReadFIFO>
 8006146:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 8006148:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800614a:	b2da      	uxtb	r2, r3
 800614c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800614e:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8006150:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006152:	3301      	adds	r3, #1
 8006154:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8006156:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006158:	0a1b      	lsrs	r3, r3, #8
 800615a:	b2da      	uxtb	r2, r3
 800615c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800615e:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8006160:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006162:	3301      	adds	r3, #1
 8006164:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8006166:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006168:	0c1b      	lsrs	r3, r3, #16
 800616a:	b2da      	uxtb	r2, r3
 800616c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800616e:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8006170:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006172:	3301      	adds	r3, #1
 8006174:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8006176:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006178:	0e1b      	lsrs	r3, r3, #24
 800617a:	b2da      	uxtb	r2, r3
 800617c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800617e:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8006180:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006182:	3301      	adds	r3, #1
 8006184:	637b      	str	r3, [r7, #52]	; 0x34
        for(count = 0U; count < 8U; count++)
 8006186:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006188:	3301      	adds	r3, #1
 800618a:	643b      	str	r3, [r7, #64]	; 0x40
 800618c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800618e:	2b07      	cmp	r3, #7
 8006190:	d9d4      	bls.n	800613c <HAL_SD_ReadBlocks+0x170>
        }
        dataremaining -= 32U;
 8006192:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006194:	3b20      	subs	r3, #32
 8006196:	63fb      	str	r3, [r7, #60]	; 0x3c
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8006198:	f7fb fa72 	bl	8001680 <HAL_GetTick>
 800619c:	4602      	mov	r2, r0
 800619e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061a0:	1ad3      	subs	r3, r2, r3
 80061a2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80061a4:	429a      	cmp	r2, r3
 80061a6:	d902      	bls.n	80061ae <HAL_SD_ReadBlocks+0x1e2>
 80061a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d112      	bne.n	80061d4 <HAL_SD_ReadBlocks+0x208>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	4a3f      	ldr	r2, [pc, #252]	; (80062b0 <HAL_SD_ReadBlocks+0x2e4>)
 80061b4:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061ba:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	2201      	movs	r2, #1
 80061c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	2200      	movs	r2, #0
 80061ce:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 80061d0:	2303      	movs	r3, #3
 80061d2:	e09a      	b.n	800630a <HAL_SD_ReadBlocks+0x33e>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061da:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d09f      	beq.n	8006122 <HAL_SD_ReadBlocks+0x156>
      }
    }
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	68da      	ldr	r2, [r3, #12]
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80061f0:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d022      	beq.n	8006246 <HAL_SD_ReadBlocks+0x27a>
 8006200:	683b      	ldr	r3, [r7, #0]
 8006202:	2b01      	cmp	r3, #1
 8006204:	d91f      	bls.n	8006246 <HAL_SD_ReadBlocks+0x27a>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800620a:	2b03      	cmp	r3, #3
 800620c:	d01b      	beq.n	8006246 <HAL_SD_ReadBlocks+0x27a>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	4618      	mov	r0, r3
 8006214:	f004 f8c8 	bl	800a3a8 <SDMMC_CmdStopTransfer>
 8006218:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 800621a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800621c:	2b00      	cmp	r3, #0
 800621e:	d012      	beq.n	8006246 <HAL_SD_ReadBlocks+0x27a>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	4a22      	ldr	r2, [pc, #136]	; (80062b0 <HAL_SD_ReadBlocks+0x2e4>)
 8006226:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800622c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800622e:	431a      	orrs	r2, r3
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	2201      	movs	r2, #1
 8006238:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	2200      	movs	r2, #0
 8006240:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8006242:	2301      	movs	r3, #1
 8006244:	e061      	b.n	800630a <HAL_SD_ReadBlocks+0x33e>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800624c:	f003 0308 	and.w	r3, r3, #8
 8006250:	2b00      	cmp	r3, #0
 8006252:	d012      	beq.n	800627a <HAL_SD_ReadBlocks+0x2ae>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	4a15      	ldr	r2, [pc, #84]	; (80062b0 <HAL_SD_ReadBlocks+0x2e4>)
 800625a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006260:	f043 0208 	orr.w	r2, r3, #8
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	2201      	movs	r2, #1
 800626c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	2200      	movs	r2, #0
 8006274:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8006276:	2301      	movs	r3, #1
 8006278:	e047      	b.n	800630a <HAL_SD_ReadBlocks+0x33e>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006280:	f003 0302 	and.w	r3, r3, #2
 8006284:	2b00      	cmp	r3, #0
 8006286:	d015      	beq.n	80062b4 <HAL_SD_ReadBlocks+0x2e8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	4a08      	ldr	r2, [pc, #32]	; (80062b0 <HAL_SD_ReadBlocks+0x2e4>)
 800628e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006294:	f043 0202 	orr.w	r2, r3, #2
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	2201      	movs	r2, #1
 80062a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	2200      	movs	r2, #0
 80062a8:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80062aa:	2301      	movs	r3, #1
 80062ac:	e02d      	b.n	800630a <HAL_SD_ReadBlocks+0x33e>
 80062ae:	bf00      	nop
 80062b0:	1fe00fff 	.word	0x1fe00fff
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062ba:	f003 0320 	and.w	r3, r3, #32
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d012      	beq.n	80062e8 <HAL_SD_ReadBlocks+0x31c>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	4a13      	ldr	r2, [pc, #76]	; (8006314 <HAL_SD_ReadBlocks+0x348>)
 80062c8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062ce:	f043 0220 	orr.w	r2, r3, #32
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	2201      	movs	r2, #1
 80062da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	2200      	movs	r2, #0
 80062e2:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80062e4:	2301      	movs	r3, #1
 80062e6:	e010      	b.n	800630a <HAL_SD_ReadBlocks+0x33e>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	4a0a      	ldr	r2, [pc, #40]	; (8006318 <HAL_SD_ReadBlocks+0x34c>)
 80062ee:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	2201      	movs	r2, #1
 80062f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 80062f8:	2300      	movs	r3, #0
 80062fa:	e006      	b.n	800630a <HAL_SD_ReadBlocks+0x33e>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006300:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006308:	2301      	movs	r3, #1
  }
}
 800630a:	4618      	mov	r0, r3
 800630c:	3748      	adds	r7, #72	; 0x48
 800630e:	46bd      	mov	sp, r7
 8006310:	bd80      	pop	{r7, pc}
 8006312:	bf00      	nop
 8006314:	1fe00fff 	.word	0x1fe00fff
 8006318:	18000f3a 	.word	0x18000f3a

0800631c <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800631c:	b580      	push	{r7, lr}
 800631e:	b092      	sub	sp, #72	; 0x48
 8006320:	af00      	add	r7, sp, #0
 8006322:	60f8      	str	r0, [r7, #12]
 8006324:	60b9      	str	r1, [r7, #8]
 8006326:	607a      	str	r2, [r7, #4]
 8006328:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800632a:	f7fb f9a9 	bl	8001680 <HAL_GetTick>
 800632e:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8006334:	68bb      	ldr	r3, [r7, #8]
 8006336:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8006338:	68bb      	ldr	r3, [r7, #8]
 800633a:	2b00      	cmp	r3, #0
 800633c:	d107      	bne.n	800634e <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006342:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800634a:	2301      	movs	r3, #1
 800634c:	e189      	b.n	8006662 <HAL_SD_WriteBlocks+0x346>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006354:	b2db      	uxtb	r3, r3
 8006356:	2b01      	cmp	r3, #1
 8006358:	f040 817c 	bne.w	8006654 <HAL_SD_WriteBlocks+0x338>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	2200      	movs	r2, #0
 8006360:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8006362:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006364:	683b      	ldr	r3, [r7, #0]
 8006366:	441a      	add	r2, r3
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800636c:	429a      	cmp	r2, r3
 800636e:	d907      	bls.n	8006380 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006374:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800637c:	2301      	movs	r3, #1
 800637e:	e170      	b.n	8006662 <HAL_SD_WriteBlocks+0x346>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	2203      	movs	r2, #3
 8006384:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	2200      	movs	r2, #0
 800638e:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006394:	2b01      	cmp	r3, #1
 8006396:	d002      	beq.n	800639e <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8006398:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800639a:	025b      	lsls	r3, r3, #9
 800639c:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80063a6:	4618      	mov	r0, r3
 80063a8:	f003 ff4e 	bl	800a248 <SDMMC_CmdBlockLength>
 80063ac:	6478      	str	r0, [r7, #68]	; 0x44
    if(errorstate != HAL_SD_ERROR_NONE)
 80063ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d00f      	beq.n	80063d4 <HAL_SD_WriteBlocks+0xb8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	4a93      	ldr	r2, [pc, #588]	; (8006608 <HAL_SD_WriteBlocks+0x2ec>)
 80063ba:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80063c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80063c2:	431a      	orrs	r2, r3
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	2201      	movs	r2, #1
 80063cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80063d0:	2301      	movs	r3, #1
 80063d2:	e146      	b.n	8006662 <HAL_SD_WriteBlocks+0x346>
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80063d4:	f04f 33ff 	mov.w	r3, #4294967295
 80063d8:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 80063da:	683b      	ldr	r3, [r7, #0]
 80063dc:	025b      	lsls	r3, r3, #9
 80063de:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80063e0:	2390      	movs	r3, #144	; 0x90
 80063e2:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 80063e4:	2300      	movs	r3, #0
 80063e6:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80063e8:	2300      	movs	r3, #0
 80063ea:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDMMC_DPSM_DISABLE;
 80063ec:	2300      	movs	r3, #0
 80063ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	f107 0218 	add.w	r2, r7, #24
 80063f8:	4611      	mov	r1, r2
 80063fa:	4618      	mov	r0, r3
 80063fc:	f003 fef8 	bl	800a1f0 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	68da      	ldr	r2, [r3, #12]
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800640e:	60da      	str	r2, [r3, #12]

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8006410:	683b      	ldr	r3, [r7, #0]
 8006412:	2b01      	cmp	r3, #1
 8006414:	d90a      	bls.n	800642c <HAL_SD_WriteBlocks+0x110>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	2220      	movs	r2, #32
 800641a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006422:	4618      	mov	r0, r3
 8006424:	f003 ff9c 	bl	800a360 <SDMMC_CmdWriteMultiBlock>
 8006428:	6478      	str	r0, [r7, #68]	; 0x44
 800642a:	e009      	b.n	8006440 <HAL_SD_WriteBlocks+0x124>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	2210      	movs	r2, #16
 8006430:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006438:	4618      	mov	r0, r3
 800643a:	f003 ff6e 	bl	800a31a <SDMMC_CmdWriteSingleBlock>
 800643e:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8006440:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006442:	2b00      	cmp	r3, #0
 8006444:	d012      	beq.n	800646c <HAL_SD_WriteBlocks+0x150>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	4a6f      	ldr	r2, [pc, #444]	; (8006608 <HAL_SD_WriteBlocks+0x2ec>)
 800644c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006452:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006454:	431a      	orrs	r2, r3
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	2201      	movs	r2, #1
 800645e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	2200      	movs	r2, #0
 8006466:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8006468:	2301      	movs	r3, #1
 800646a:	e0fa      	b.n	8006662 <HAL_SD_WriteBlocks+0x346>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 800646c:	69fb      	ldr	r3, [r7, #28]
 800646e:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8006470:	e05c      	b.n	800652c <HAL_SD_WriteBlocks+0x210>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining >= 32U))
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006478:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800647c:	2b00      	cmp	r3, #0
 800647e:	d037      	beq.n	80064f0 <HAL_SD_WriteBlocks+0x1d4>
 8006480:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006482:	2b1f      	cmp	r3, #31
 8006484:	d934      	bls.n	80064f0 <HAL_SD_WriteBlocks+0x1d4>
      {
        /* Write data to SDMMC Tx FIFO */
        for(count = 0U; count < 8U; count++)
 8006486:	2300      	movs	r3, #0
 8006488:	643b      	str	r3, [r7, #64]	; 0x40
 800648a:	e02b      	b.n	80064e4 <HAL_SD_WriteBlocks+0x1c8>
        {
          data = (uint32_t)(*tempbuff);
 800648c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800648e:	781b      	ldrb	r3, [r3, #0]
 8006490:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8006492:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006494:	3301      	adds	r3, #1
 8006496:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 8U);
 8006498:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800649a:	781b      	ldrb	r3, [r3, #0]
 800649c:	021a      	lsls	r2, r3, #8
 800649e:	697b      	ldr	r3, [r7, #20]
 80064a0:	4313      	orrs	r3, r2
 80064a2:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80064a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064a6:	3301      	adds	r3, #1
 80064a8:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 16U);
 80064aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064ac:	781b      	ldrb	r3, [r3, #0]
 80064ae:	041a      	lsls	r2, r3, #16
 80064b0:	697b      	ldr	r3, [r7, #20]
 80064b2:	4313      	orrs	r3, r2
 80064b4:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80064b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064b8:	3301      	adds	r3, #1
 80064ba:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 24U);
 80064bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064be:	781b      	ldrb	r3, [r3, #0]
 80064c0:	061a      	lsls	r2, r3, #24
 80064c2:	697b      	ldr	r3, [r7, #20]
 80064c4:	4313      	orrs	r3, r2
 80064c6:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80064c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064ca:	3301      	adds	r3, #1
 80064cc:	637b      	str	r3, [r7, #52]	; 0x34
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	f107 0214 	add.w	r2, r7, #20
 80064d6:	4611      	mov	r1, r2
 80064d8:	4618      	mov	r0, r3
 80064da:	f003 fe0e 	bl	800a0fa <SDMMC_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 80064de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80064e0:	3301      	adds	r3, #1
 80064e2:	643b      	str	r3, [r7, #64]	; 0x40
 80064e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80064e6:	2b07      	cmp	r3, #7
 80064e8:	d9d0      	bls.n	800648c <HAL_SD_WriteBlocks+0x170>
        }
        dataremaining -= 32U;
 80064ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80064ec:	3b20      	subs	r3, #32
 80064ee:	63fb      	str	r3, [r7, #60]	; 0x3c
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80064f0:	f7fb f8c6 	bl	8001680 <HAL_GetTick>
 80064f4:	4602      	mov	r2, r0
 80064f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064f8:	1ad3      	subs	r3, r2, r3
 80064fa:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80064fc:	429a      	cmp	r2, r3
 80064fe:	d902      	bls.n	8006506 <HAL_SD_WriteBlocks+0x1ea>
 8006500:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006502:	2b00      	cmp	r3, #0
 8006504:	d112      	bne.n	800652c <HAL_SD_WriteBlocks+0x210>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	4a3f      	ldr	r2, [pc, #252]	; (8006608 <HAL_SD_WriteBlocks+0x2ec>)
 800650c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006512:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006514:	431a      	orrs	r2, r3
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	2201      	movs	r2, #1
 800651e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	2200      	movs	r2, #0
 8006526:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8006528:	2303      	movs	r3, #3
 800652a:	e09a      	b.n	8006662 <HAL_SD_WriteBlocks+0x346>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006532:	f403 738d 	and.w	r3, r3, #282	; 0x11a
 8006536:	2b00      	cmp	r3, #0
 8006538:	d09b      	beq.n	8006472 <HAL_SD_WriteBlocks+0x156>
      }
    }
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	68da      	ldr	r2, [r3, #12]
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006548:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006550:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006554:	2b00      	cmp	r3, #0
 8006556:	d022      	beq.n	800659e <HAL_SD_WriteBlocks+0x282>
 8006558:	683b      	ldr	r3, [r7, #0]
 800655a:	2b01      	cmp	r3, #1
 800655c:	d91f      	bls.n	800659e <HAL_SD_WriteBlocks+0x282>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006562:	2b03      	cmp	r3, #3
 8006564:	d01b      	beq.n	800659e <HAL_SD_WriteBlocks+0x282>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	4618      	mov	r0, r3
 800656c:	f003 ff1c 	bl	800a3a8 <SDMMC_CmdStopTransfer>
 8006570:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8006572:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006574:	2b00      	cmp	r3, #0
 8006576:	d012      	beq.n	800659e <HAL_SD_WriteBlocks+0x282>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	4a22      	ldr	r2, [pc, #136]	; (8006608 <HAL_SD_WriteBlocks+0x2ec>)
 800657e:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006584:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006586:	431a      	orrs	r2, r3
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	2201      	movs	r2, #1
 8006590:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	2200      	movs	r2, #0
 8006598:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 800659a:	2301      	movs	r3, #1
 800659c:	e061      	b.n	8006662 <HAL_SD_WriteBlocks+0x346>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065a4:	f003 0308 	and.w	r3, r3, #8
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d012      	beq.n	80065d2 <HAL_SD_WriteBlocks+0x2b6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	4a15      	ldr	r2, [pc, #84]	; (8006608 <HAL_SD_WriteBlocks+0x2ec>)
 80065b2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065b8:	f043 0208 	orr.w	r2, r3, #8
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	2201      	movs	r2, #1
 80065c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	2200      	movs	r2, #0
 80065cc:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80065ce:	2301      	movs	r3, #1
 80065d0:	e047      	b.n	8006662 <HAL_SD_WriteBlocks+0x346>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065d8:	f003 0302 	and.w	r3, r3, #2
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d015      	beq.n	800660c <HAL_SD_WriteBlocks+0x2f0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	4a08      	ldr	r2, [pc, #32]	; (8006608 <HAL_SD_WriteBlocks+0x2ec>)
 80065e6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065ec:	f043 0202 	orr.w	r2, r3, #2
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	2201      	movs	r2, #1
 80065f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	2200      	movs	r2, #0
 8006600:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8006602:	2301      	movs	r3, #1
 8006604:	e02d      	b.n	8006662 <HAL_SD_WriteBlocks+0x346>
 8006606:	bf00      	nop
 8006608:	1fe00fff 	.word	0x1fe00fff
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006612:	f003 0310 	and.w	r3, r3, #16
 8006616:	2b00      	cmp	r3, #0
 8006618:	d012      	beq.n	8006640 <HAL_SD_WriteBlocks+0x324>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	4a13      	ldr	r2, [pc, #76]	; (800666c <HAL_SD_WriteBlocks+0x350>)
 8006620:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006626:	f043 0210 	orr.w	r2, r3, #16
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	2201      	movs	r2, #1
 8006632:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	2200      	movs	r2, #0
 800663a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800663c:	2301      	movs	r3, #1
 800663e:	e010      	b.n	8006662 <HAL_SD_WriteBlocks+0x346>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	4a0a      	ldr	r2, [pc, #40]	; (8006670 <HAL_SD_WriteBlocks+0x354>)
 8006646:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	2201      	movs	r2, #1
 800664c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8006650:	2300      	movs	r3, #0
 8006652:	e006      	b.n	8006662 <HAL_SD_WriteBlocks+0x346>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006658:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006660:	2301      	movs	r3, #1
  }
}
 8006662:	4618      	mov	r0, r3
 8006664:	3748      	adds	r7, #72	; 0x48
 8006666:	46bd      	mov	sp, r7
 8006668:	bd80      	pop	{r7, pc}
 800666a:	bf00      	nop
 800666c:	1fe00fff 	.word	0x1fe00fff
 8006670:	18000f3a 	.word	0x18000f3a

08006674 <HAL_SD_DriveTransceiver_1_8V_Callback>:
  * @brief  Enable/Disable the SD Transceiver 1.8V Mode Callback.
  * @param  status: Voltage Switch State
  * @retval None
  */
__weak  void HAL_SD_DriveTransceiver_1_8V_Callback(FlagStatus status)
{
 8006674:	b480      	push	{r7}
 8006676:	b083      	sub	sp, #12
 8006678:	af00      	add	r7, sp, #0
 800667a:	4603      	mov	r3, r0
 800667c:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(status);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_EnableTransceiver could be implemented in the user file
   */
}
 800667e:	bf00      	nop
 8006680:	370c      	adds	r7, #12
 8006682:	46bd      	mov	sp, r7
 8006684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006688:	4770      	bx	lr
	...

0800668c <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800668c:	b480      	push	{r7}
 800668e:	b083      	sub	sp, #12
 8006690:	af00      	add	r7, sp, #0
 8006692:	6078      	str	r0, [r7, #4]
 8006694:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800669a:	0f9b      	lsrs	r3, r3, #30
 800669c:	b2da      	uxtb	r2, r3
 800669e:	683b      	ldr	r3, [r7, #0]
 80066a0:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80066a6:	0e9b      	lsrs	r3, r3, #26
 80066a8:	b2db      	uxtb	r3, r3
 80066aa:	f003 030f 	and.w	r3, r3, #15
 80066ae:	b2da      	uxtb	r2, r3
 80066b0:	683b      	ldr	r3, [r7, #0]
 80066b2:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80066b8:	0e1b      	lsrs	r3, r3, #24
 80066ba:	b2db      	uxtb	r3, r3
 80066bc:	f003 0303 	and.w	r3, r3, #3
 80066c0:	b2da      	uxtb	r2, r3
 80066c2:	683b      	ldr	r3, [r7, #0]
 80066c4:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80066ca:	0c1b      	lsrs	r3, r3, #16
 80066cc:	b2da      	uxtb	r2, r3
 80066ce:	683b      	ldr	r3, [r7, #0]
 80066d0:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80066d6:	0a1b      	lsrs	r3, r3, #8
 80066d8:	b2da      	uxtb	r2, r3
 80066da:	683b      	ldr	r3, [r7, #0]
 80066dc:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80066e2:	b2da      	uxtb	r2, r3
 80066e4:	683b      	ldr	r3, [r7, #0]
 80066e6:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80066ec:	0d1b      	lsrs	r3, r3, #20
 80066ee:	b29a      	uxth	r2, r3
 80066f0:	683b      	ldr	r3, [r7, #0]
 80066f2:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80066f8:	0c1b      	lsrs	r3, r3, #16
 80066fa:	b2db      	uxtb	r3, r3
 80066fc:	f003 030f 	and.w	r3, r3, #15
 8006700:	b2da      	uxtb	r2, r3
 8006702:	683b      	ldr	r3, [r7, #0]
 8006704:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800670a:	0bdb      	lsrs	r3, r3, #15
 800670c:	b2db      	uxtb	r3, r3
 800670e:	f003 0301 	and.w	r3, r3, #1
 8006712:	b2da      	uxtb	r2, r3
 8006714:	683b      	ldr	r3, [r7, #0]
 8006716:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800671c:	0b9b      	lsrs	r3, r3, #14
 800671e:	b2db      	uxtb	r3, r3
 8006720:	f003 0301 	and.w	r3, r3, #1
 8006724:	b2da      	uxtb	r2, r3
 8006726:	683b      	ldr	r3, [r7, #0]
 8006728:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800672e:	0b5b      	lsrs	r3, r3, #13
 8006730:	b2db      	uxtb	r3, r3
 8006732:	f003 0301 	and.w	r3, r3, #1
 8006736:	b2da      	uxtb	r2, r3
 8006738:	683b      	ldr	r3, [r7, #0]
 800673a:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006740:	0b1b      	lsrs	r3, r3, #12
 8006742:	b2db      	uxtb	r3, r3
 8006744:	f003 0301 	and.w	r3, r3, #1
 8006748:	b2da      	uxtb	r2, r3
 800674a:	683b      	ldr	r3, [r7, #0]
 800674c:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800674e:	683b      	ldr	r3, [r7, #0]
 8006750:	2200      	movs	r2, #0
 8006752:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006758:	2b00      	cmp	r3, #0
 800675a:	d163      	bne.n	8006824 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006760:	009a      	lsls	r2, r3, #2
 8006762:	f640 73fc 	movw	r3, #4092	; 0xffc
 8006766:	4013      	ands	r3, r2
 8006768:	687a      	ldr	r2, [r7, #4]
 800676a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800676c:	0f92      	lsrs	r2, r2, #30
 800676e:	431a      	orrs	r2, r3
 8006770:	683b      	ldr	r3, [r7, #0]
 8006772:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006778:	0edb      	lsrs	r3, r3, #27
 800677a:	b2db      	uxtb	r3, r3
 800677c:	f003 0307 	and.w	r3, r3, #7
 8006780:	b2da      	uxtb	r2, r3
 8006782:	683b      	ldr	r3, [r7, #0]
 8006784:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800678a:	0e1b      	lsrs	r3, r3, #24
 800678c:	b2db      	uxtb	r3, r3
 800678e:	f003 0307 	and.w	r3, r3, #7
 8006792:	b2da      	uxtb	r2, r3
 8006794:	683b      	ldr	r3, [r7, #0]
 8006796:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800679c:	0d5b      	lsrs	r3, r3, #21
 800679e:	b2db      	uxtb	r3, r3
 80067a0:	f003 0307 	and.w	r3, r3, #7
 80067a4:	b2da      	uxtb	r2, r3
 80067a6:	683b      	ldr	r3, [r7, #0]
 80067a8:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80067ae:	0c9b      	lsrs	r3, r3, #18
 80067b0:	b2db      	uxtb	r3, r3
 80067b2:	f003 0307 	and.w	r3, r3, #7
 80067b6:	b2da      	uxtb	r2, r3
 80067b8:	683b      	ldr	r3, [r7, #0]
 80067ba:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80067c0:	0bdb      	lsrs	r3, r3, #15
 80067c2:	b2db      	uxtb	r3, r3
 80067c4:	f003 0307 	and.w	r3, r3, #7
 80067c8:	b2da      	uxtb	r2, r3
 80067ca:	683b      	ldr	r3, [r7, #0]
 80067cc:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80067ce:	683b      	ldr	r3, [r7, #0]
 80067d0:	691b      	ldr	r3, [r3, #16]
 80067d2:	1c5a      	adds	r2, r3, #1
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80067d8:	683b      	ldr	r3, [r7, #0]
 80067da:	7e1b      	ldrb	r3, [r3, #24]
 80067dc:	b2db      	uxtb	r3, r3
 80067de:	f003 0307 	and.w	r3, r3, #7
 80067e2:	3302      	adds	r3, #2
 80067e4:	2201      	movs	r2, #1
 80067e6:	fa02 f303 	lsl.w	r3, r2, r3
 80067ea:	687a      	ldr	r2, [r7, #4]
 80067ec:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80067ee:	fb02 f203 	mul.w	r2, r2, r3
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80067f6:	683b      	ldr	r3, [r7, #0]
 80067f8:	7a1b      	ldrb	r3, [r3, #8]
 80067fa:	b2db      	uxtb	r3, r3
 80067fc:	f003 030f 	and.w	r3, r3, #15
 8006800:	2201      	movs	r2, #1
 8006802:	409a      	lsls	r2, r3
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	651a      	str	r2, [r3, #80]	; 0x50

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800680c:	687a      	ldr	r2, [r7, #4]
 800680e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8006810:	0a52      	lsrs	r2, r2, #9
 8006812:	fb02 f203 	mul.w	r2, r2, r3
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockSize = 512U;
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006820:	659a      	str	r2, [r3, #88]	; 0x58
 8006822:	e031      	b.n	8006888 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006828:	2b01      	cmp	r3, #1
 800682a:	d11d      	bne.n	8006868 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006830:	041b      	lsls	r3, r3, #16
 8006832:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800683a:	0c1b      	lsrs	r3, r3, #16
 800683c:	431a      	orrs	r2, r3
 800683e:	683b      	ldr	r3, [r7, #0]
 8006840:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8006842:	683b      	ldr	r3, [r7, #0]
 8006844:	691b      	ldr	r3, [r3, #16]
 8006846:	3301      	adds	r3, #1
 8006848:	029a      	lsls	r2, r3, #10
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = 512U;
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	f44f 7200 	mov.w	r2, #512	; 0x200
 800685c:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	659a      	str	r2, [r3, #88]	; 0x58
 8006866:	e00f      	b.n	8006888 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	4a58      	ldr	r2, [pc, #352]	; (80069d0 <HAL_SD_GetCardCSD+0x344>)
 800686e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006874:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	2201      	movs	r2, #1
 8006880:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8006884:	2301      	movs	r3, #1
 8006886:	e09d      	b.n	80069c4 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800688c:	0b9b      	lsrs	r3, r3, #14
 800688e:	b2db      	uxtb	r3, r3
 8006890:	f003 0301 	and.w	r3, r3, #1
 8006894:	b2da      	uxtb	r2, r3
 8006896:	683b      	ldr	r3, [r7, #0]
 8006898:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800689e:	09db      	lsrs	r3, r3, #7
 80068a0:	b2db      	uxtb	r3, r3
 80068a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80068a6:	b2da      	uxtb	r2, r3
 80068a8:	683b      	ldr	r3, [r7, #0]
 80068aa:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80068b0:	b2db      	uxtb	r3, r3
 80068b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80068b6:	b2da      	uxtb	r2, r3
 80068b8:	683b      	ldr	r3, [r7, #0]
 80068ba:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80068c0:	0fdb      	lsrs	r3, r3, #31
 80068c2:	b2da      	uxtb	r2, r3
 80068c4:	683b      	ldr	r3, [r7, #0]
 80068c6:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80068cc:	0f5b      	lsrs	r3, r3, #29
 80068ce:	b2db      	uxtb	r3, r3
 80068d0:	f003 0303 	and.w	r3, r3, #3
 80068d4:	b2da      	uxtb	r2, r3
 80068d6:	683b      	ldr	r3, [r7, #0]
 80068d8:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80068de:	0e9b      	lsrs	r3, r3, #26
 80068e0:	b2db      	uxtb	r3, r3
 80068e2:	f003 0307 	and.w	r3, r3, #7
 80068e6:	b2da      	uxtb	r2, r3
 80068e8:	683b      	ldr	r3, [r7, #0]
 80068ea:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80068f0:	0d9b      	lsrs	r3, r3, #22
 80068f2:	b2db      	uxtb	r3, r3
 80068f4:	f003 030f 	and.w	r3, r3, #15
 80068f8:	b2da      	uxtb	r2, r3
 80068fa:	683b      	ldr	r3, [r7, #0]
 80068fc:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006902:	0d5b      	lsrs	r3, r3, #21
 8006904:	b2db      	uxtb	r3, r3
 8006906:	f003 0301 	and.w	r3, r3, #1
 800690a:	b2da      	uxtb	r2, r3
 800690c:	683b      	ldr	r3, [r7, #0]
 800690e:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8006912:	683b      	ldr	r3, [r7, #0]
 8006914:	2200      	movs	r2, #0
 8006916:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800691e:	0c1b      	lsrs	r3, r3, #16
 8006920:	b2db      	uxtb	r3, r3
 8006922:	f003 0301 	and.w	r3, r3, #1
 8006926:	b2da      	uxtb	r2, r3
 8006928:	683b      	ldr	r3, [r7, #0]
 800692a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006932:	0bdb      	lsrs	r3, r3, #15
 8006934:	b2db      	uxtb	r3, r3
 8006936:	f003 0301 	and.w	r3, r3, #1
 800693a:	b2da      	uxtb	r2, r3
 800693c:	683b      	ldr	r3, [r7, #0]
 800693e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006946:	0b9b      	lsrs	r3, r3, #14
 8006948:	b2db      	uxtb	r3, r3
 800694a:	f003 0301 	and.w	r3, r3, #1
 800694e:	b2da      	uxtb	r2, r3
 8006950:	683b      	ldr	r3, [r7, #0]
 8006952:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800695a:	0b5b      	lsrs	r3, r3, #13
 800695c:	b2db      	uxtb	r3, r3
 800695e:	f003 0301 	and.w	r3, r3, #1
 8006962:	b2da      	uxtb	r2, r3
 8006964:	683b      	ldr	r3, [r7, #0]
 8006966:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800696e:	0b1b      	lsrs	r3, r3, #12
 8006970:	b2db      	uxtb	r3, r3
 8006972:	f003 0301 	and.w	r3, r3, #1
 8006976:	b2da      	uxtb	r2, r3
 8006978:	683b      	ldr	r3, [r7, #0]
 800697a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006982:	0a9b      	lsrs	r3, r3, #10
 8006984:	b2db      	uxtb	r3, r3
 8006986:	f003 0303 	and.w	r3, r3, #3
 800698a:	b2da      	uxtb	r2, r3
 800698c:	683b      	ldr	r3, [r7, #0]
 800698e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006996:	0a1b      	lsrs	r3, r3, #8
 8006998:	b2db      	uxtb	r3, r3
 800699a:	f003 0303 	and.w	r3, r3, #3
 800699e:	b2da      	uxtb	r2, r3
 80069a0:	683b      	ldr	r3, [r7, #0]
 80069a2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80069aa:	085b      	lsrs	r3, r3, #1
 80069ac:	b2db      	uxtb	r3, r3
 80069ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80069b2:	b2da      	uxtb	r2, r3
 80069b4:	683b      	ldr	r3, [r7, #0]
 80069b6:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 80069ba:	683b      	ldr	r3, [r7, #0]
 80069bc:	2201      	movs	r2, #1
 80069be:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 80069c2:	2300      	movs	r3, #0
}
 80069c4:	4618      	mov	r0, r3
 80069c6:	370c      	adds	r7, #12
 80069c8:	46bd      	mov	sp, r7
 80069ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ce:	4770      	bx	lr
 80069d0:	1fe00fff 	.word	0x1fe00fff

080069d4 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that 
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 80069d4:	b580      	push	{r7, lr}
 80069d6:	b094      	sub	sp, #80	; 0x50
 80069d8:	af00      	add	r7, sp, #0
 80069da:	6078      	str	r0, [r7, #4]
 80069dc:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;

  errorstate = SD_SendSDStatus(hsd, sd_status);
 80069de:	f107 030c 	add.w	r3, r7, #12
 80069e2:	4619      	mov	r1, r3
 80069e4:	6878      	ldr	r0, [r7, #4]
 80069e6:	f000 fb35 	bl	8007054 <SD_SendSDStatus>
 80069ea:	64f8      	str	r0, [r7, #76]	; 0x4c
  if(errorstate != HAL_SD_ERROR_NONE)
 80069ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d00f      	beq.n	8006a12 <HAL_SD_GetCardStatus+0x3e>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	4a42      	ldr	r2, [pc, #264]	; (8006b00 <HAL_SD_GetCardStatus+0x12c>)
 80069f8:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80069fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a00:	431a      	orrs	r2, r3
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	2201      	movs	r2, #1
 8006a0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8006a0e:	2301      	movs	r3, #1
 8006a10:	e071      	b.n	8006af6 <HAL_SD_GetCardStatus+0x122>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	099b      	lsrs	r3, r3, #6
 8006a16:	b2db      	uxtb	r3, r3
 8006a18:	f003 0303 	and.w	r3, r3, #3
 8006a1c:	b2da      	uxtb	r2, r3
 8006a1e:	683b      	ldr	r3, [r7, #0]
 8006a20:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	095b      	lsrs	r3, r3, #5
 8006a26:	b2db      	uxtb	r3, r3
 8006a28:	f003 0301 	and.w	r3, r3, #1
 8006a2c:	b2da      	uxtb	r2, r3
 8006a2e:	683b      	ldr	r3, [r7, #0]
 8006a30:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	0a1b      	lsrs	r3, r3, #8
 8006a36:	b29b      	uxth	r3, r3
 8006a38:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006a3c:	b29a      	uxth	r2, r3
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	0e1b      	lsrs	r3, r3, #24
 8006a42:	b29b      	uxth	r3, r3
 8006a44:	4313      	orrs	r3, r2
 8006a46:	b29a      	uxth	r2, r3
 8006a48:	683b      	ldr	r3, [r7, #0]
 8006a4a:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8006a4c:	693b      	ldr	r3, [r7, #16]
 8006a4e:	061a      	lsls	r2, r3, #24
 8006a50:	693b      	ldr	r3, [r7, #16]
 8006a52:	021b      	lsls	r3, r3, #8
 8006a54:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006a58:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8006a5a:	693b      	ldr	r3, [r7, #16]
 8006a5c:	0a1b      	lsrs	r3, r3, #8
 8006a5e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8006a62:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8006a64:	693b      	ldr	r3, [r7, #16]
 8006a66:	0e1b      	lsrs	r3, r3, #24
 8006a68:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8006a6a:	683b      	ldr	r3, [r7, #0]
 8006a6c:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 8006a6e:	697b      	ldr	r3, [r7, #20]
 8006a70:	b2da      	uxtb	r2, r3
 8006a72:	683b      	ldr	r3, [r7, #0]
 8006a74:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 8006a76:	697b      	ldr	r3, [r7, #20]
 8006a78:	0a1b      	lsrs	r3, r3, #8
 8006a7a:	b2da      	uxtb	r2, r3
 8006a7c:	683b      	ldr	r3, [r7, #0]
 8006a7e:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 8006a80:	697b      	ldr	r3, [r7, #20]
 8006a82:	0d1b      	lsrs	r3, r3, #20
 8006a84:	b2db      	uxtb	r3, r3
 8006a86:	f003 030f 	and.w	r3, r3, #15
 8006a8a:	b2da      	uxtb	r2, r3
 8006a8c:	683b      	ldr	r3, [r7, #0]
 8006a8e:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 8006a90:	697b      	ldr	r3, [r7, #20]
 8006a92:	0c1b      	lsrs	r3, r3, #16
 8006a94:	b29b      	uxth	r3, r3
 8006a96:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006a9a:	b29a      	uxth	r2, r3
 8006a9c:	69bb      	ldr	r3, [r7, #24]
 8006a9e:	b29b      	uxth	r3, r3
 8006aa0:	b2db      	uxtb	r3, r3
 8006aa2:	b29b      	uxth	r3, r3
 8006aa4:	4313      	orrs	r3, r2
 8006aa6:	b29a      	uxth	r2, r3
 8006aa8:	683b      	ldr	r3, [r7, #0]
 8006aaa:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 8006aac:	69bb      	ldr	r3, [r7, #24]
 8006aae:	0a9b      	lsrs	r3, r3, #10
 8006ab0:	b2db      	uxtb	r3, r3
 8006ab2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006ab6:	b2da      	uxtb	r2, r3
 8006ab8:	683b      	ldr	r3, [r7, #0]
 8006aba:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 8006abc:	69bb      	ldr	r3, [r7, #24]
 8006abe:	0a1b      	lsrs	r3, r3, #8
 8006ac0:	b2db      	uxtb	r3, r3
 8006ac2:	f003 0303 	and.w	r3, r3, #3
 8006ac6:	b2da      	uxtb	r2, r3
 8006ac8:	683b      	ldr	r3, [r7, #0]
 8006aca:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 8006acc:	69bb      	ldr	r3, [r7, #24]
 8006ace:	091b      	lsrs	r3, r3, #4
 8006ad0:	b2db      	uxtb	r3, r3
 8006ad2:	f003 030f 	and.w	r3, r3, #15
 8006ad6:	b2da      	uxtb	r2, r3
 8006ad8:	683b      	ldr	r3, [r7, #0]
 8006ada:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 8006adc:	69bb      	ldr	r3, [r7, #24]
 8006ade:	b2db      	uxtb	r3, r3
 8006ae0:	f003 030f 	and.w	r3, r3, #15
 8006ae4:	b2da      	uxtb	r2, r3
 8006ae6:	683b      	ldr	r3, [r7, #0]
 8006ae8:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 8006aea:	69fb      	ldr	r3, [r7, #28]
 8006aec:	0e1b      	lsrs	r3, r3, #24
 8006aee:	b2da      	uxtb	r2, r3
 8006af0:	683b      	ldr	r3, [r7, #0]
 8006af2:	749a      	strb	r2, [r3, #18]
  }

  return HAL_OK;
 8006af4:	2300      	movs	r3, #0
}
 8006af6:	4618      	mov	r0, r3
 8006af8:	3750      	adds	r7, #80	; 0x50
 8006afa:	46bd      	mov	sp, r7
 8006afc:	bd80      	pop	{r7, pc}
 8006afe:	bf00      	nop
 8006b00:	1fe00fff 	.word	0x1fe00fff

08006b04 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8006b04:	b480      	push	{r7}
 8006b06:	b083      	sub	sp, #12
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	6078      	str	r0, [r7, #4]
 8006b0c:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006b12:	683b      	ldr	r3, [r7, #0]
 8006b14:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006b1a:	683b      	ldr	r3, [r7, #0]
 8006b1c:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006b22:	683b      	ldr	r3, [r7, #0]
 8006b24:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006b2a:	683b      	ldr	r3, [r7, #0]
 8006b2c:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006b32:	683b      	ldr	r3, [r7, #0]
 8006b34:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006b3a:	683b      	ldr	r3, [r7, #0]
 8006b3c:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006b42:	683b      	ldr	r3, [r7, #0]
 8006b44:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006b4a:	683b      	ldr	r3, [r7, #0]
 8006b4c:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8006b4e:	2300      	movs	r3, #0
}
 8006b50:	4618      	mov	r0, r3
 8006b52:	370c      	adds	r7, #12
 8006b54:	46bd      	mov	sp, r7
 8006b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b5a:	4770      	bx	lr

08006b5c <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8006b5c:	b5b0      	push	{r4, r5, r7, lr}
 8006b5e:	b08e      	sub	sp, #56	; 0x38
 8006b60:	af04      	add	r7, sp, #16
 8006b62:	6078      	str	r0, [r7, #4]
 8006b64:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	2203      	movs	r2, #3
 8006b6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b72:	2b03      	cmp	r3, #3
 8006b74:	d02e      	beq.n	8006bd4 <HAL_SD_ConfigWideBusOperation+0x78>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 8006b76:	683b      	ldr	r3, [r7, #0]
 8006b78:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006b7c:	d106      	bne.n	8006b8c <HAL_SD_ConfigWideBusOperation+0x30>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b82:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	639a      	str	r2, [r3, #56]	; 0x38
 8006b8a:	e029      	b.n	8006be0 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 8006b8c:	683b      	ldr	r3, [r7, #0]
 8006b8e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006b92:	d10a      	bne.n	8006baa <HAL_SD_ConfigWideBusOperation+0x4e>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8006b94:	6878      	ldr	r0, [r7, #4]
 8006b96:	f000 fb55 	bl	8007244 <SD_WideBus_Enable>
 8006b9a:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ba2:	431a      	orrs	r2, r3
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	639a      	str	r2, [r3, #56]	; 0x38
 8006ba8:	e01a      	b.n	8006be0 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 8006baa:	683b      	ldr	r3, [r7, #0]
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d10a      	bne.n	8006bc6 <HAL_SD_ConfigWideBusOperation+0x6a>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8006bb0:	6878      	ldr	r0, [r7, #4]
 8006bb2:	f000 fb92 	bl	80072da <SD_WideBus_Disable>
 8006bb6:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bbe:	431a      	orrs	r2, r3
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	639a      	str	r2, [r3, #56]	; 0x38
 8006bc4:	e00c      	b.n	8006be0 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bca:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	639a      	str	r2, [r3, #56]	; 0x38
 8006bd2:	e005      	b.n	8006be0 <HAL_SD_ConfigWideBusOperation+0x84>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bd8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d009      	beq.n	8006bfc <HAL_SD_ConfigWideBusOperation+0xa0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	4a22      	ldr	r2, [pc, #136]	; (8006c78 <HAL_SD_ConfigWideBusOperation+0x11c>)
 8006bee:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	2201      	movs	r2, #1
 8006bf4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8006bf8:	2301      	movs	r3, #1
 8006bfa:	e039      	b.n	8006c70 <HAL_SD_ConfigWideBusOperation+0x114>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	685b      	ldr	r3, [r3, #4]
 8006c00:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	689b      	ldr	r3, [r3, #8]
 8006c06:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 8006c08:	683b      	ldr	r3, [r7, #0]
 8006c0a:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	691b      	ldr	r3, [r3, #16]
 8006c10:	61bb      	str	r3, [r7, #24]

    /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
    if(hsd->Init.ClockDiv >= SDMMC_NSpeed_CLK_DIV)
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	695b      	ldr	r3, [r3, #20]
 8006c16:	2b03      	cmp	r3, #3
 8006c18:	d903      	bls.n	8006c22 <HAL_SD_ConfigWideBusOperation+0xc6>
    {
      Init.ClockDiv = hsd->Init.ClockDiv;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	695b      	ldr	r3, [r3, #20]
 8006c1e:	61fb      	str	r3, [r7, #28]
 8006c20:	e012      	b.n	8006c48 <HAL_SD_ConfigWideBusOperation+0xec>
    }
    else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c26:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006c2a:	d103      	bne.n	8006c34 <HAL_SD_ConfigWideBusOperation+0xd8>
    {
      /* UltraHigh speed SD card,user Clock div */
      Init.ClockDiv = hsd->Init.ClockDiv;
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	695b      	ldr	r3, [r3, #20]
 8006c30:	61fb      	str	r3, [r7, #28]
 8006c32:	e009      	b.n	8006c48 <HAL_SD_ConfigWideBusOperation+0xec>
    }
    else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c38:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006c3c:	d102      	bne.n	8006c44 <HAL_SD_ConfigWideBusOperation+0xe8>
    {
      /* High speed SD card, Max Frequency = 50Mhz */
      Init.ClockDiv = SDMMC_HSpeed_CLK_DIV;
 8006c3e:	2302      	movs	r3, #2
 8006c40:	61fb      	str	r3, [r7, #28]
 8006c42:	e001      	b.n	8006c48 <HAL_SD_ConfigWideBusOperation+0xec>
    }
    else
    {
      /* No High speed SD card, Max Frequency = 25Mhz */
      Init.ClockDiv = SDMMC_NSpeed_CLK_DIV;
 8006c44:	2304      	movs	r3, #4
 8006c46:	61fb      	str	r3, [r7, #28]
    }

    (void)SDMMC_Init(hsd->Instance, Init);
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681d      	ldr	r5, [r3, #0]
 8006c4c:	466c      	mov	r4, sp
 8006c4e:	f107 0318 	add.w	r3, r7, #24
 8006c52:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006c56:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8006c5a:	f107 030c 	add.w	r3, r7, #12
 8006c5e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006c60:	4628      	mov	r0, r5
 8006c62:	f003 fa13 	bl	800a08c <SDMMC_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	2201      	movs	r2, #1
 8006c6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8006c6e:	2300      	movs	r3, #0
}
 8006c70:	4618      	mov	r0, r3
 8006c72:	3728      	adds	r7, #40	; 0x28
 8006c74:	46bd      	mov	sp, r7
 8006c76:	bdb0      	pop	{r4, r5, r7, pc}
 8006c78:	1fe00fff 	.word	0x1fe00fff

08006c7c <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8006c7c:	b580      	push	{r7, lr}
 8006c7e:	b086      	sub	sp, #24
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8006c84:	2300      	movs	r3, #0
 8006c86:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8006c88:	f107 030c 	add.w	r3, r7, #12
 8006c8c:	4619      	mov	r1, r3
 8006c8e:	6878      	ldr	r0, [r7, #4]
 8006c90:	f000 fab0 	bl	80071f4 <SD_SendStatus>
 8006c94:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006c96:	697b      	ldr	r3, [r7, #20]
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d005      	beq.n	8006ca8 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006ca0:	697b      	ldr	r3, [r7, #20]
 8006ca2:	431a      	orrs	r2, r3
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	0a5b      	lsrs	r3, r3, #9
 8006cac:	f003 030f 	and.w	r3, r3, #15
 8006cb0:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8006cb2:	693b      	ldr	r3, [r7, #16]
}
 8006cb4:	4618      	mov	r0, r3
 8006cb6:	3718      	adds	r7, #24
 8006cb8:	46bd      	mov	sp, r7
 8006cba:	bd80      	pop	{r7, pc}

08006cbc <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8006cbc:	b590      	push	{r4, r7, lr}
 8006cbe:	b091      	sub	sp, #68	; 0x44
 8006cc0:	af00      	add	r7, sp, #0
 8006cc2:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8006cc4:	2301      	movs	r3, #1
 8006cc6:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	4618      	mov	r0, r3
 8006cce:	f003 fa36 	bl	800a13e <SDMMC_GetPowerState>
 8006cd2:	4603      	mov	r3, r0
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d102      	bne.n	8006cde <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8006cd8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8006cdc:	e0a8      	b.n	8006e30 <SD_InitCard+0x174>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ce2:	2b03      	cmp	r3, #3
 8006ce4:	d02e      	beq.n	8006d44 <SD_InitCard+0x88>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	4618      	mov	r0, r3
 8006cec:	f003 fc7c 	bl	800a5e8 <SDMMC_CmdSendCID>
 8006cf0:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8006cf2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d001      	beq.n	8006cfc <SD_InitCard+0x40>
    {
      return errorstate;
 8006cf8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006cfa:	e099      	b.n	8006e30 <SD_InitCard+0x174>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	2100      	movs	r1, #0
 8006d02:	4618      	mov	r0, r3
 8006d04:	f003 fa61 	bl	800a1ca <SDMMC_GetResponse>
 8006d08:	4602      	mov	r2, r0
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	2104      	movs	r1, #4
 8006d14:	4618      	mov	r0, r3
 8006d16:	f003 fa58 	bl	800a1ca <SDMMC_GetResponse>
 8006d1a:	4602      	mov	r2, r0
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	2108      	movs	r1, #8
 8006d26:	4618      	mov	r0, r3
 8006d28:	f003 fa4f 	bl	800a1ca <SDMMC_GetResponse>
 8006d2c:	4602      	mov	r2, r0
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	210c      	movs	r1, #12
 8006d38:	4618      	mov	r0, r3
 8006d3a:	f003 fa46 	bl	800a1ca <SDMMC_GetResponse>
 8006d3e:	4602      	mov	r2, r0
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	67da      	str	r2, [r3, #124]	; 0x7c
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d48:	2b03      	cmp	r3, #3
 8006d4a:	d00d      	beq.n	8006d68 <SD_InitCard+0xac>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	f107 020e 	add.w	r2, r7, #14
 8006d54:	4611      	mov	r1, r2
 8006d56:	4618      	mov	r0, r3
 8006d58:	f003 fc85 	bl	800a666 <SDMMC_CmdSetRelAdd>
 8006d5c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8006d5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d001      	beq.n	8006d68 <SD_InitCard+0xac>
    {
      return errorstate;
 8006d64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d66:	e063      	b.n	8006e30 <SD_InitCard+0x174>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d6c:	2b03      	cmp	r3, #3
 8006d6e:	d036      	beq.n	8006dde <SD_InitCard+0x122>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8006d70:	89fb      	ldrh	r3, [r7, #14]
 8006d72:	461a      	mov	r2, r3
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	649a      	str	r2, [r3, #72]	; 0x48

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681a      	ldr	r2, [r3, #0]
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006d80:	041b      	lsls	r3, r3, #16
 8006d82:	4619      	mov	r1, r3
 8006d84:	4610      	mov	r0, r2
 8006d86:	f003 fc4e 	bl	800a626 <SDMMC_CmdSendCSD>
 8006d8a:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8006d8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d001      	beq.n	8006d96 <SD_InitCard+0xda>
    {
      return errorstate;
 8006d92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d94:	e04c      	b.n	8006e30 <SD_InitCard+0x174>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	2100      	movs	r1, #0
 8006d9c:	4618      	mov	r0, r3
 8006d9e:	f003 fa14 	bl	800a1ca <SDMMC_GetResponse>
 8006da2:	4602      	mov	r2, r0
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	2104      	movs	r1, #4
 8006dae:	4618      	mov	r0, r3
 8006db0:	f003 fa0b 	bl	800a1ca <SDMMC_GetResponse>
 8006db4:	4602      	mov	r2, r0
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	2108      	movs	r1, #8
 8006dc0:	4618      	mov	r0, r3
 8006dc2:	f003 fa02 	bl	800a1ca <SDMMC_GetResponse>
 8006dc6:	4602      	mov	r2, r0
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	210c      	movs	r1, #12
 8006dd2:	4618      	mov	r0, r3
 8006dd4:	f003 f9f9 	bl	800a1ca <SDMMC_GetResponse>
 8006dd8:	4602      	mov	r2, r0
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	66da      	str	r2, [r3, #108]	; 0x6c
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	2104      	movs	r1, #4
 8006de4:	4618      	mov	r0, r3
 8006de6:	f003 f9f0 	bl	800a1ca <SDMMC_GetResponse>
 8006dea:	4603      	mov	r3, r0
 8006dec:	0d1a      	lsrs	r2, r3, #20
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	645a      	str	r2, [r3, #68]	; 0x44

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8006df2:	f107 0310 	add.w	r3, r7, #16
 8006df6:	4619      	mov	r1, r3
 8006df8:	6878      	ldr	r0, [r7, #4]
 8006dfa:	f7ff fc47 	bl	800668c <HAL_SD_GetCardCSD>
 8006dfe:	4603      	mov	r3, r0
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d002      	beq.n	8006e0a <SD_InitCard+0x14e>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006e04:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006e08:	e012      	b.n	8006e30 <SD_InitCard+0x174>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	6819      	ldr	r1, [r3, #0]
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e12:	041b      	lsls	r3, r3, #16
 8006e14:	f04f 0400 	mov.w	r4, #0
 8006e18:	461a      	mov	r2, r3
 8006e1a:	4623      	mov	r3, r4
 8006e1c:	4608      	mov	r0, r1
 8006e1e:	f003 faf9 	bl	800a414 <SDMMC_CmdSelDesel>
 8006e22:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8006e24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d001      	beq.n	8006e2e <SD_InitCard+0x172>
  {
    return errorstate;
 8006e2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e2c:	e000      	b.n	8006e30 <SD_InitCard+0x174>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8006e2e:	2300      	movs	r3, #0
}
 8006e30:	4618      	mov	r0, r3
 8006e32:	3744      	adds	r7, #68	; 0x44
 8006e34:	46bd      	mov	sp, r7
 8006e36:	bd90      	pop	{r4, r7, pc}

08006e38 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8006e38:	b580      	push	{r7, lr}
 8006e3a:	b088      	sub	sp, #32
 8006e3c:	af00      	add	r7, sp, #0
 8006e3e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006e40:	2300      	movs	r3, #0
 8006e42:	60fb      	str	r3, [r7, #12]
  uint32_t response = 0U, validvoltage = 0U;
 8006e44:	2300      	movs	r3, #0
 8006e46:	61fb      	str	r3, [r7, #28]
 8006e48:	2300      	movs	r3, #0
 8006e4a:	61bb      	str	r3, [r7, #24]
  uint32_t errorstate;
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
 8006e4c:	f7fa fc18 	bl	8001680 <HAL_GetTick>
 8006e50:	6178      	str	r0, [r7, #20]
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	4618      	mov	r0, r3
 8006e58:	f003 fb00 	bl	800a45c <SDMMC_CmdGoIdleState>
 8006e5c:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006e5e:	693b      	ldr	r3, [r7, #16]
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d001      	beq.n	8006e68 <SD_PowerON+0x30>
  {
    return errorstate;
 8006e64:	693b      	ldr	r3, [r7, #16]
 8006e66:	e0ee      	b.n	8007046 <SD_PowerON+0x20e>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	4618      	mov	r0, r3
 8006e6e:	f003 fb13 	bl	800a498 <SDMMC_CmdOperCond>
 8006e72:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006e74:	693b      	ldr	r3, [r7, #16]
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d00d      	beq.n	8006e96 <SD_PowerON+0x5e>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	2200      	movs	r2, #0
 8006e7e:	641a      	str	r2, [r3, #64]	; 0x40
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	4618      	mov	r0, r3
 8006e86:	f003 fae9 	bl	800a45c <SDMMC_CmdGoIdleState>
 8006e8a:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006e8c:	693b      	ldr	r3, [r7, #16]
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d004      	beq.n	8006e9c <SD_PowerON+0x64>
    {
      return errorstate;
 8006e92:	693b      	ldr	r3, [r7, #16]
 8006e94:	e0d7      	b.n	8007046 <SD_PowerON+0x20e>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	2201      	movs	r2, #1
 8006e9a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ea0:	2b01      	cmp	r3, #1
 8006ea2:	d137      	bne.n	8006f14 <SD_PowerON+0xdc>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	2100      	movs	r1, #0
 8006eaa:	4618      	mov	r0, r3
 8006eac:	f003 fb14 	bl	800a4d8 <SDMMC_CmdAppCommand>
 8006eb0:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006eb2:	693b      	ldr	r3, [r7, #16]
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d02d      	beq.n	8006f14 <SD_PowerON+0xdc>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006eb8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006ebc:	e0c3      	b.n	8007046 <SD_PowerON+0x20e>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	2100      	movs	r1, #0
 8006ec4:	4618      	mov	r0, r3
 8006ec6:	f003 fb07 	bl	800a4d8 <SDMMC_CmdAppCommand>
 8006eca:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006ecc:	693b      	ldr	r3, [r7, #16]
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d001      	beq.n	8006ed6 <SD_PowerON+0x9e>
    {
      return errorstate;
 8006ed2:	693b      	ldr	r3, [r7, #16]
 8006ed4:	e0b7      	b.n	8007046 <SD_PowerON+0x20e>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	495d      	ldr	r1, [pc, #372]	; (8007050 <SD_PowerON+0x218>)
 8006edc:	4618      	mov	r0, r3
 8006ede:	f003 fb1e 	bl	800a51e <SDMMC_CmdAppOperCommand>
 8006ee2:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006ee4:	693b      	ldr	r3, [r7, #16]
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d002      	beq.n	8006ef0 <SD_PowerON+0xb8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006eea:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006eee:	e0aa      	b.n	8007046 <SD_PowerON+0x20e>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	2100      	movs	r1, #0
 8006ef6:	4618      	mov	r0, r3
 8006ef8:	f003 f967 	bl	800a1ca <SDMMC_GetResponse>
 8006efc:	61f8      	str	r0, [r7, #28]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8006efe:	69fb      	ldr	r3, [r7, #28]
 8006f00:	0fdb      	lsrs	r3, r3, #31
 8006f02:	2b01      	cmp	r3, #1
 8006f04:	d101      	bne.n	8006f0a <SD_PowerON+0xd2>
 8006f06:	2301      	movs	r3, #1
 8006f08:	e000      	b.n	8006f0c <SD_PowerON+0xd4>
 8006f0a:	2300      	movs	r3, #0
 8006f0c:	61bb      	str	r3, [r7, #24]

    count++;
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	3301      	adds	r3, #1
 8006f12:	60fb      	str	r3, [r7, #12]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8006f1a:	4293      	cmp	r3, r2
 8006f1c:	d802      	bhi.n	8006f24 <SD_PowerON+0xec>
 8006f1e:	69bb      	ldr	r3, [r7, #24]
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d0cc      	beq.n	8006ebe <SD_PowerON+0x86>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8006f2a:	4293      	cmp	r3, r2
 8006f2c:	d902      	bls.n	8006f34 <SD_PowerON+0xfc>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8006f2e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006f32:	e088      	b.n	8007046 <SD_PowerON+0x20e>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8006f34:	69fb      	ldr	r3, [r7, #28]
 8006f36:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	f000 8082 	beq.w	8007044 <SD_PowerON+0x20c>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	2201      	movs	r2, #1
 8006f44:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_SD_TRANSCEIVER != 0U)
    if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	699b      	ldr	r3, [r3, #24]
 8006f4a:	2b02      	cmp	r3, #2
 8006f4c:	d17a      	bne.n	8007044 <SD_PowerON+0x20c>
    {
      if((response & SD_SWITCH_1_8V_CAPACITY) == SD_SWITCH_1_8V_CAPACITY)
 8006f4e:	69fb      	ldr	r3, [r7, #28]
 8006f50:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d075      	beq.n	8007044 <SD_PowerON+0x20c>
      {
        hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006f5e:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Start switching procedue */
        hsd->Instance->POWER |= SDMMC_POWER_VSWITCHEN;
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	681a      	ldr	r2, [r3, #0]
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	f042 0208 	orr.w	r2, r2, #8
 8006f6e:	601a      	str	r2, [r3, #0]

        /* Send CMD11 to switch 1.8V mode */
        errorstate = SDMMC_CmdVoltageSwitch(hsd->Instance);
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	4618      	mov	r0, r3
 8006f76:	f003 fbdd 	bl	800a734 <SDMMC_CmdVoltageSwitch>
 8006f7a:	6138      	str	r0, [r7, #16]
        if(errorstate != HAL_SD_ERROR_NONE)
 8006f7c:	693b      	ldr	r3, [r7, #16]
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d00c      	beq.n	8006f9c <SD_PowerON+0x164>
        {
          return errorstate;
 8006f82:	693b      	ldr	r3, [r7, #16]
 8006f84:	e05f      	b.n	8007046 <SD_PowerON+0x20e>
        }

        /* Check to CKSTOP */
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
        {
          if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8006f86:	f7fa fb7b 	bl	8001680 <HAL_GetTick>
 8006f8a:	4602      	mov	r2, r0
 8006f8c:	697b      	ldr	r3, [r7, #20]
 8006f8e:	1ad3      	subs	r3, r2, r3
 8006f90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f94:	d102      	bne.n	8006f9c <SD_PowerON+0x164>
          {
            return HAL_SD_ERROR_TIMEOUT;
 8006f96:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006f9a:	e054      	b.n	8007046 <SD_PowerON+0x20e>
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006fa2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006fa6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006faa:	d1ec      	bne.n	8006f86 <SD_PowerON+0x14e>
          }
        }

        /* Clear CKSTOP Flag */
        hsd->Instance->ICR = SDMMC_FLAG_CKSTOP;
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8006fb4:	639a      	str	r2, [r3, #56]	; 0x38

        /* Check to BusyD0 */
        if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) != SDMMC_FLAG_BUSYD0)
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006fbc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006fc0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006fc4:	d002      	beq.n	8006fcc <SD_PowerON+0x194>
        {
          /* Error when activate Voltage Switch in SDMMC Peripheral */
          return SDMMC_ERROR_UNSUPPORTED_FEATURE;
 8006fc6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006fca:	e03c      	b.n	8007046 <SD_PowerON+0x20e>
        {
          /* Enable Transceiver Switch PIN */
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->DriveTransceiver_1_8V_Callback(SET);
#else
          HAL_SD_DriveTransceiver_1_8V_Callback(SET);
 8006fcc:	2001      	movs	r0, #1
 8006fce:	f7ff fb51 	bl	8006674 <HAL_SD_DriveTransceiver_1_8V_Callback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */

          /* Switch ready */
          hsd->Instance->POWER |= SDMMC_POWER_VSWITCH;
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	681a      	ldr	r2, [r3, #0]
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	f042 0204 	orr.w	r2, r2, #4
 8006fe0:	601a      	str	r2, [r3, #0]

          /* Check VSWEND Flag */
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 8006fe2:	e00a      	b.n	8006ffa <SD_PowerON+0x1c2>
          {
            if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8006fe4:	f7fa fb4c 	bl	8001680 <HAL_GetTick>
 8006fe8:	4602      	mov	r2, r0
 8006fea:	697b      	ldr	r3, [r7, #20]
 8006fec:	1ad3      	subs	r3, r2, r3
 8006fee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ff2:	d102      	bne.n	8006ffa <SD_PowerON+0x1c2>
            {
              return HAL_SD_ERROR_TIMEOUT;
 8006ff4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006ff8:	e025      	b.n	8007046 <SD_PowerON+0x20e>
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007000:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007004:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007008:	d1ec      	bne.n	8006fe4 <SD_PowerON+0x1ac>
            }
          }

          /* Clear VSWEND Flag */
          hsd->Instance->ICR = SDMMC_FLAG_VSWEND;
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007012:	639a      	str	r2, [r3, #56]	; 0x38

          /* Check BusyD0 status */
          if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) == SDMMC_FLAG_BUSYD0)
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800701a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800701e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007022:	d102      	bne.n	800702a <SD_PowerON+0x1f2>
          {
            /* Error when enabling 1.8V mode */
            return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8007024:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007028:	e00d      	b.n	8007046 <SD_PowerON+0x20e>
          }
          /* Switch to 1.8V OK */

          /* Disable VSWITCH FLAG from SDMMC Peripheral */
          hsd->Instance->POWER = 0x13U;
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	2213      	movs	r2, #19
 8007030:	601a      	str	r2, [r3, #0]

          /* Clean Status flags */
          hsd->Instance->ICR = 0xFFFFFFFFU;
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	f04f 32ff 	mov.w	r2, #4294967295
 800703a:	639a      	str	r2, [r3, #56]	; 0x38
        }

        hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007042:	65da      	str	r2, [r3, #92]	; 0x5c
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 8007044:	2300      	movs	r3, #0
}
 8007046:	4618      	mov	r0, r3
 8007048:	3720      	adds	r7, #32
 800704a:	46bd      	mov	sp, r7
 800704c:	bd80      	pop	{r7, pc}
 800704e:	bf00      	nop
 8007050:	c1100000 	.word	0xc1100000

08007054 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 8007054:	b580      	push	{r7, lr}
 8007056:	b08c      	sub	sp, #48	; 0x30
 8007058:	af00      	add	r7, sp, #0
 800705a:	6078      	str	r0, [r7, #4]
 800705c:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800705e:	f7fa fb0f 	bl	8001680 <HAL_GetTick>
 8007062:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 8007064:	683b      	ldr	r3, [r7, #0]
 8007066:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	2100      	movs	r1, #0
 800706e:	4618      	mov	r0, r3
 8007070:	f003 f8ab 	bl	800a1ca <SDMMC_GetResponse>
 8007074:	4603      	mov	r3, r0
 8007076:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800707a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800707e:	d102      	bne.n	8007086 <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8007080:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007084:	e0b0      	b.n	80071e8 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	2140      	movs	r1, #64	; 0x40
 800708c:	4618      	mov	r0, r3
 800708e:	f003 f8db 	bl	800a248 <SDMMC_CmdBlockLength>
 8007092:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007094:	6a3b      	ldr	r3, [r7, #32]
 8007096:	2b00      	cmp	r3, #0
 8007098:	d005      	beq.n	80070a6 <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 80070a2:	6a3b      	ldr	r3, [r7, #32]
 80070a4:	e0a0      	b.n	80071e8 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681a      	ldr	r2, [r3, #0]
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80070ae:	041b      	lsls	r3, r3, #16
 80070b0:	4619      	mov	r1, r3
 80070b2:	4610      	mov	r0, r2
 80070b4:	f003 fa10 	bl	800a4d8 <SDMMC_CmdAppCommand>
 80070b8:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80070ba:	6a3b      	ldr	r3, [r7, #32]
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d005      	beq.n	80070cc <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 80070c8:	6a3b      	ldr	r3, [r7, #32]
 80070ca:	e08d      	b.n	80071e8 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80070cc:	f04f 33ff 	mov.w	r3, #4294967295
 80070d0:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 80070d2:	2340      	movs	r3, #64	; 0x40
 80070d4:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 80070d6:	2360      	movs	r3, #96	; 0x60
 80070d8:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80070da:	2302      	movs	r3, #2
 80070dc:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80070de:	2300      	movs	r3, #0
 80070e0:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 80070e2:	2301      	movs	r3, #1
 80070e4:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	f107 0208 	add.w	r2, r7, #8
 80070ee:	4611      	mov	r1, r2
 80070f0:	4618      	mov	r0, r3
 80070f2:	f003 f87d 	bl	800a1f0 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	4618      	mov	r0, r3
 80070fc:	f003 faf8 	bl	800a6f0 <SDMMC_CmdStatusRegister>
 8007100:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007102:	6a3b      	ldr	r3, [r7, #32]
 8007104:	2b00      	cmp	r3, #0
 8007106:	d02b      	beq.n	8007160 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 8007110:	6a3b      	ldr	r3, [r7, #32]
 8007112:	e069      	b.n	80071e8 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800711a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800711e:	2b00      	cmp	r3, #0
 8007120:	d013      	beq.n	800714a <SD_SendSDStatus+0xf6>
    {
      for(count = 0U; count < 8U; count++)
 8007122:	2300      	movs	r3, #0
 8007124:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007126:	e00d      	b.n	8007144 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	4618      	mov	r0, r3
 800712e:	f002 ffd7 	bl	800a0e0 <SDMMC_ReadFIFO>
 8007132:	4602      	mov	r2, r0
 8007134:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007136:	601a      	str	r2, [r3, #0]
        pData++;
 8007138:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800713a:	3304      	adds	r3, #4
 800713c:	62bb      	str	r3, [r7, #40]	; 0x28
      for(count = 0U; count < 8U; count++)
 800713e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007140:	3301      	adds	r3, #1
 8007142:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007144:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007146:	2b07      	cmp	r3, #7
 8007148:	d9ee      	bls.n	8007128 <SD_SendSDStatus+0xd4>
      }
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800714a:	f7fa fa99 	bl	8001680 <HAL_GetTick>
 800714e:	4602      	mov	r2, r0
 8007150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007152:	1ad3      	subs	r3, r2, r3
 8007154:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007158:	d102      	bne.n	8007160 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800715a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800715e:	e043      	b.n	80071e8 <SD_SendSDStatus+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007166:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 800716a:	2b00      	cmp	r3, #0
 800716c:	d0d2      	beq.n	8007114 <SD_SendSDStatus+0xc0>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007174:	f003 0308 	and.w	r3, r3, #8
 8007178:	2b00      	cmp	r3, #0
 800717a:	d001      	beq.n	8007180 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800717c:	2308      	movs	r3, #8
 800717e:	e033      	b.n	80071e8 <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007186:	f003 0302 	and.w	r3, r3, #2
 800718a:	2b00      	cmp	r3, #0
 800718c:	d001      	beq.n	8007192 <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800718e:	2302      	movs	r3, #2
 8007190:	e02a      	b.n	80071e8 <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007198:	f003 0320 	and.w	r3, r3, #32
 800719c:	2b00      	cmp	r3, #0
 800719e:	d017      	beq.n	80071d0 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 80071a0:	2320      	movs	r3, #32
 80071a2:	e021      	b.n	80071e8 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	4618      	mov	r0, r3
 80071aa:	f002 ff99 	bl	800a0e0 <SDMMC_ReadFIFO>
 80071ae:	4602      	mov	r2, r0
 80071b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071b2:	601a      	str	r2, [r3, #0]
    pData++;
 80071b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071b6:	3304      	adds	r3, #4
 80071b8:	62bb      	str	r3, [r7, #40]	; 0x28

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80071ba:	f7fa fa61 	bl	8001680 <HAL_GetTick>
 80071be:	4602      	mov	r2, r0
 80071c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071c2:	1ad3      	subs	r3, r2, r3
 80071c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071c8:	d102      	bne.n	80071d0 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80071ca:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80071ce:	e00b      	b.n	80071e8 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071d6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d1e2      	bne.n	80071a4 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	4a03      	ldr	r2, [pc, #12]	; (80071f0 <SD_SendSDStatus+0x19c>)
 80071e4:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 80071e6:	2300      	movs	r3, #0
}
 80071e8:	4618      	mov	r0, r3
 80071ea:	3730      	adds	r7, #48	; 0x30
 80071ec:	46bd      	mov	sp, r7
 80071ee:	bd80      	pop	{r7, pc}
 80071f0:	18000f3a 	.word	0x18000f3a

080071f4 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 80071f4:	b580      	push	{r7, lr}
 80071f6:	b084      	sub	sp, #16
 80071f8:	af00      	add	r7, sp, #0
 80071fa:	6078      	str	r0, [r7, #4]
 80071fc:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 80071fe:	683b      	ldr	r3, [r7, #0]
 8007200:	2b00      	cmp	r3, #0
 8007202:	d102      	bne.n	800720a <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8007204:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007208:	e018      	b.n	800723c <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681a      	ldr	r2, [r3, #0]
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007212:	041b      	lsls	r3, r3, #16
 8007214:	4619      	mov	r1, r3
 8007216:	4610      	mov	r0, r2
 8007218:	f003 fa47 	bl	800a6aa <SDMMC_CmdSendStatus>
 800721c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	2b00      	cmp	r3, #0
 8007222:	d001      	beq.n	8007228 <SD_SendStatus+0x34>
  {
    return errorstate;
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	e009      	b.n	800723c <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	2100      	movs	r1, #0
 800722e:	4618      	mov	r0, r3
 8007230:	f002 ffcb 	bl	800a1ca <SDMMC_GetResponse>
 8007234:	4602      	mov	r2, r0
 8007236:	683b      	ldr	r3, [r7, #0]
 8007238:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800723a:	2300      	movs	r3, #0
}
 800723c:	4618      	mov	r0, r3
 800723e:	3710      	adds	r7, #16
 8007240:	46bd      	mov	sp, r7
 8007242:	bd80      	pop	{r7, pc}

08007244 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8007244:	b580      	push	{r7, lr}
 8007246:	b086      	sub	sp, #24
 8007248:	af00      	add	r7, sp, #0
 800724a:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800724c:	2300      	movs	r3, #0
 800724e:	60fb      	str	r3, [r7, #12]
 8007250:	2300      	movs	r3, #0
 8007252:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	2100      	movs	r1, #0
 800725a:	4618      	mov	r0, r3
 800725c:	f002 ffb5 	bl	800a1ca <SDMMC_GetResponse>
 8007260:	4603      	mov	r3, r0
 8007262:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007266:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800726a:	d102      	bne.n	8007272 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800726c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007270:	e02f      	b.n	80072d2 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8007272:	f107 030c 	add.w	r3, r7, #12
 8007276:	4619      	mov	r1, r3
 8007278:	6878      	ldr	r0, [r7, #4]
 800727a:	f000 f879 	bl	8007370 <SD_FindSCR>
 800727e:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007280:	697b      	ldr	r3, [r7, #20]
 8007282:	2b00      	cmp	r3, #0
 8007284:	d001      	beq.n	800728a <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8007286:	697b      	ldr	r3, [r7, #20]
 8007288:	e023      	b.n	80072d2 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800728a:	693b      	ldr	r3, [r7, #16]
 800728c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007290:	2b00      	cmp	r3, #0
 8007292:	d01c      	beq.n	80072ce <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681a      	ldr	r2, [r3, #0]
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800729c:	041b      	lsls	r3, r3, #16
 800729e:	4619      	mov	r1, r3
 80072a0:	4610      	mov	r0, r2
 80072a2:	f003 f919 	bl	800a4d8 <SDMMC_CmdAppCommand>
 80072a6:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80072a8:	697b      	ldr	r3, [r7, #20]
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d001      	beq.n	80072b2 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 80072ae:	697b      	ldr	r3, [r7, #20]
 80072b0:	e00f      	b.n	80072d2 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	2102      	movs	r1, #2
 80072b8:	4618      	mov	r0, r3
 80072ba:	f003 f950 	bl	800a55e <SDMMC_CmdBusWidth>
 80072be:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80072c0:	697b      	ldr	r3, [r7, #20]
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d001      	beq.n	80072ca <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 80072c6:	697b      	ldr	r3, [r7, #20]
 80072c8:	e003      	b.n	80072d2 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80072ca:	2300      	movs	r3, #0
 80072cc:	e001      	b.n	80072d2 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80072ce:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80072d2:	4618      	mov	r0, r3
 80072d4:	3718      	adds	r7, #24
 80072d6:	46bd      	mov	sp, r7
 80072d8:	bd80      	pop	{r7, pc}

080072da <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 80072da:	b580      	push	{r7, lr}
 80072dc:	b086      	sub	sp, #24
 80072de:	af00      	add	r7, sp, #0
 80072e0:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 80072e2:	2300      	movs	r3, #0
 80072e4:	60fb      	str	r3, [r7, #12]
 80072e6:	2300      	movs	r3, #0
 80072e8:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	2100      	movs	r1, #0
 80072f0:	4618      	mov	r0, r3
 80072f2:	f002 ff6a 	bl	800a1ca <SDMMC_GetResponse>
 80072f6:	4603      	mov	r3, r0
 80072f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80072fc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007300:	d102      	bne.n	8007308 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8007302:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007306:	e02f      	b.n	8007368 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8007308:	f107 030c 	add.w	r3, r7, #12
 800730c:	4619      	mov	r1, r3
 800730e:	6878      	ldr	r0, [r7, #4]
 8007310:	f000 f82e 	bl	8007370 <SD_FindSCR>
 8007314:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007316:	697b      	ldr	r3, [r7, #20]
 8007318:	2b00      	cmp	r3, #0
 800731a:	d001      	beq.n	8007320 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800731c:	697b      	ldr	r3, [r7, #20]
 800731e:	e023      	b.n	8007368 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8007320:	693b      	ldr	r3, [r7, #16]
 8007322:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007326:	2b00      	cmp	r3, #0
 8007328:	d01c      	beq.n	8007364 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681a      	ldr	r2, [r3, #0]
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007332:	041b      	lsls	r3, r3, #16
 8007334:	4619      	mov	r1, r3
 8007336:	4610      	mov	r0, r2
 8007338:	f003 f8ce 	bl	800a4d8 <SDMMC_CmdAppCommand>
 800733c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800733e:	697b      	ldr	r3, [r7, #20]
 8007340:	2b00      	cmp	r3, #0
 8007342:	d001      	beq.n	8007348 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8007344:	697b      	ldr	r3, [r7, #20]
 8007346:	e00f      	b.n	8007368 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	2100      	movs	r1, #0
 800734e:	4618      	mov	r0, r3
 8007350:	f003 f905 	bl	800a55e <SDMMC_CmdBusWidth>
 8007354:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007356:	697b      	ldr	r3, [r7, #20]
 8007358:	2b00      	cmp	r3, #0
 800735a:	d001      	beq.n	8007360 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800735c:	697b      	ldr	r3, [r7, #20]
 800735e:	e003      	b.n	8007368 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8007360:	2300      	movs	r3, #0
 8007362:	e001      	b.n	8007368 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8007364:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8007368:	4618      	mov	r0, r3
 800736a:	3718      	adds	r7, #24
 800736c:	46bd      	mov	sp, r7
 800736e:	bd80      	pop	{r7, pc}

08007370 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8007370:	b580      	push	{r7, lr}
 8007372:	b08e      	sub	sp, #56	; 0x38
 8007374:	af00      	add	r7, sp, #0
 8007376:	6078      	str	r0, [r7, #4]
 8007378:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800737a:	f7fa f981 	bl	8001680 <HAL_GetTick>
 800737e:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8007380:	2300      	movs	r3, #0
 8007382:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 8007384:	2300      	movs	r3, #0
 8007386:	60bb      	str	r3, [r7, #8]
 8007388:	2300      	movs	r3, #0
 800738a:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800738c:	683b      	ldr	r3, [r7, #0]
 800738e:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	2108      	movs	r1, #8
 8007396:	4618      	mov	r0, r3
 8007398:	f002 ff56 	bl	800a248 <SDMMC_CmdBlockLength>
 800739c:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800739e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d001      	beq.n	80073a8 <SD_FindSCR+0x38>
  {
    return errorstate;
 80073a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073a6:	e0ad      	b.n	8007504 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681a      	ldr	r2, [r3, #0]
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80073b0:	041b      	lsls	r3, r3, #16
 80073b2:	4619      	mov	r1, r3
 80073b4:	4610      	mov	r0, r2
 80073b6:	f003 f88f 	bl	800a4d8 <SDMMC_CmdAppCommand>
 80073ba:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80073bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d001      	beq.n	80073c6 <SD_FindSCR+0x56>
  {
    return errorstate;
 80073c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073c4:	e09e      	b.n	8007504 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80073c6:	f04f 33ff 	mov.w	r3, #4294967295
 80073ca:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 80073cc:	2308      	movs	r3, #8
 80073ce:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 80073d0:	2330      	movs	r3, #48	; 0x30
 80073d2:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80073d4:	2302      	movs	r3, #2
 80073d6:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80073d8:	2300      	movs	r3, #0
 80073da:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 80073dc:	2301      	movs	r3, #1
 80073de:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	f107 0210 	add.w	r2, r7, #16
 80073e8:	4611      	mov	r1, r2
 80073ea:	4618      	mov	r0, r3
 80073ec:	f002 ff00 	bl	800a1f0 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	4618      	mov	r0, r3
 80073f6:	f003 f8d5 	bl	800a5a4 <SDMMC_CmdSendSCR>
 80073fa:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80073fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d027      	beq.n	8007452 <SD_FindSCR+0xe2>
  {
    return errorstate;
 8007402:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007404:	e07e      	b.n	8007504 <SD_FindSCR+0x194>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
  {
    if((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800740c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007410:	2b00      	cmp	r3, #0
 8007412:	d113      	bne.n	800743c <SD_FindSCR+0xcc>
 8007414:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007416:	2b00      	cmp	r3, #0
 8007418:	d110      	bne.n	800743c <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	4618      	mov	r0, r3
 8007420:	f002 fe5e 	bl	800a0e0 <SDMMC_ReadFIFO>
 8007424:	4603      	mov	r3, r0
 8007426:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	4618      	mov	r0, r3
 800742e:	f002 fe57 	bl	800a0e0 <SDMMC_ReadFIFO>
 8007432:	4603      	mov	r3, r0
 8007434:	60fb      	str	r3, [r7, #12]
      index++;
 8007436:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007438:	3301      	adds	r3, #1
 800743a:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800743c:	f7fa f920 	bl	8001680 <HAL_GetTick>
 8007440:	4602      	mov	r2, r0
 8007442:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007444:	1ad3      	subs	r3, r2, r3
 8007446:	f1b3 3fff 	cmp.w	r3, #4294967295
 800744a:	d102      	bne.n	8007452 <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800744c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007450:	e058      	b.n	8007504 <SD_FindSCR+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007458:	f240 532a 	movw	r3, #1322	; 0x52a
 800745c:	4013      	ands	r3, r2
 800745e:	2b00      	cmp	r3, #0
 8007460:	d0d1      	beq.n	8007406 <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007468:	f003 0308 	and.w	r3, r3, #8
 800746c:	2b00      	cmp	r3, #0
 800746e:	d005      	beq.n	800747c <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	2208      	movs	r2, #8
 8007476:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8007478:	2308      	movs	r3, #8
 800747a:	e043      	b.n	8007504 <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007482:	f003 0302 	and.w	r3, r3, #2
 8007486:	2b00      	cmp	r3, #0
 8007488:	d005      	beq.n	8007496 <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	2202      	movs	r2, #2
 8007490:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8007492:	2302      	movs	r3, #2
 8007494:	e036      	b.n	8007504 <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800749c:	f003 0320 	and.w	r3, r3, #32
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d005      	beq.n	80074b0 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	2220      	movs	r2, #32
 80074aa:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 80074ac:	2320      	movs	r3, #32
 80074ae:	e029      	b.n	8007504 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	4a15      	ldr	r2, [pc, #84]	; (800750c <SD_FindSCR+0x19c>)
 80074b6:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	061a      	lsls	r2, r3, #24
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	021b      	lsls	r3, r3, #8
 80074c0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80074c4:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	0a1b      	lsrs	r3, r3, #8
 80074ca:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80074ce:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	0e1b      	lsrs	r3, r3, #24
 80074d4:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80074d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074d8:	601a      	str	r2, [r3, #0]
    scr++;
 80074da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074dc:	3304      	adds	r3, #4
 80074de:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80074e0:	68bb      	ldr	r3, [r7, #8]
 80074e2:	061a      	lsls	r2, r3, #24
 80074e4:	68bb      	ldr	r3, [r7, #8]
 80074e6:	021b      	lsls	r3, r3, #8
 80074e8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80074ec:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80074ee:	68bb      	ldr	r3, [r7, #8]
 80074f0:	0a1b      	lsrs	r3, r3, #8
 80074f2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80074f6:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80074f8:	68bb      	ldr	r3, [r7, #8]
 80074fa:	0e1b      	lsrs	r3, r3, #24
 80074fc:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80074fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007500:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8007502:	2300      	movs	r3, #0
}
 8007504:	4618      	mov	r0, r3
 8007506:	3738      	adds	r7, #56	; 0x38
 8007508:	46bd      	mov	sp, r7
 800750a:	bd80      	pop	{r7, pc}
 800750c:	18000f3a 	.word	0x18000f3a

08007510 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007510:	b580      	push	{r7, lr}
 8007512:	b082      	sub	sp, #8
 8007514:	af00      	add	r7, sp, #0
 8007516:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	2b00      	cmp	r3, #0
 800751c:	d101      	bne.n	8007522 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800751e:	2301      	movs	r3, #1
 8007520:	e042      	b.n	80075a8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007528:	2b00      	cmp	r3, #0
 800752a:	d106      	bne.n	800753a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	2200      	movs	r2, #0
 8007530:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007534:	6878      	ldr	r0, [r7, #4]
 8007536:	f7f9 fe7d 	bl	8001234 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	2224      	movs	r2, #36	; 0x24
 800753e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	681a      	ldr	r2, [r3, #0]
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	f022 0201 	bic.w	r2, r2, #1
 8007550:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007552:	6878      	ldr	r0, [r7, #4]
 8007554:	f000 f994 	bl	8007880 <UART_SetConfig>
 8007558:	4603      	mov	r3, r0
 800755a:	2b01      	cmp	r3, #1
 800755c:	d101      	bne.n	8007562 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800755e:	2301      	movs	r3, #1
 8007560:	e022      	b.n	80075a8 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007566:	2b00      	cmp	r3, #0
 8007568:	d002      	beq.n	8007570 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800756a:	6878      	ldr	r0, [r7, #4]
 800756c:	f002 fb06 	bl	8009b7c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	685a      	ldr	r2, [r3, #4]
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800757e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	689a      	ldr	r2, [r3, #8]
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800758e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	681a      	ldr	r2, [r3, #0]
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	f042 0201 	orr.w	r2, r2, #1
 800759e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80075a0:	6878      	ldr	r0, [r7, #4]
 80075a2:	f002 fb8d 	bl	8009cc0 <UART_CheckIdleState>
 80075a6:	4603      	mov	r3, r0
}
 80075a8:	4618      	mov	r0, r3
 80075aa:	3708      	adds	r7, #8
 80075ac:	46bd      	mov	sp, r7
 80075ae:	bd80      	pop	{r7, pc}

080075b0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80075b0:	b580      	push	{r7, lr}
 80075b2:	b08a      	sub	sp, #40	; 0x28
 80075b4:	af02      	add	r7, sp, #8
 80075b6:	60f8      	str	r0, [r7, #12]
 80075b8:	60b9      	str	r1, [r7, #8]
 80075ba:	603b      	str	r3, [r7, #0]
 80075bc:	4613      	mov	r3, r2
 80075be:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80075c6:	2b20      	cmp	r3, #32
 80075c8:	f040 8083 	bne.w	80076d2 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 80075cc:	68bb      	ldr	r3, [r7, #8]
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d002      	beq.n	80075d8 <HAL_UART_Transmit+0x28>
 80075d2:	88fb      	ldrh	r3, [r7, #6]
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d101      	bne.n	80075dc <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80075d8:	2301      	movs	r3, #1
 80075da:	e07b      	b.n	80076d4 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80075e2:	2b01      	cmp	r3, #1
 80075e4:	d101      	bne.n	80075ea <HAL_UART_Transmit+0x3a>
 80075e6:	2302      	movs	r3, #2
 80075e8:	e074      	b.n	80076d4 <HAL_UART_Transmit+0x124>
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	2201      	movs	r2, #1
 80075ee:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	2200      	movs	r2, #0
 80075f6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	2221      	movs	r2, #33	; 0x21
 80075fe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8007602:	f7fa f83d 	bl	8001680 <HAL_GetTick>
 8007606:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	88fa      	ldrh	r2, [r7, #6]
 800760c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	88fa      	ldrh	r2, [r7, #6]
 8007614:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	689b      	ldr	r3, [r3, #8]
 800761c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007620:	d108      	bne.n	8007634 <HAL_UART_Transmit+0x84>
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	691b      	ldr	r3, [r3, #16]
 8007626:	2b00      	cmp	r3, #0
 8007628:	d104      	bne.n	8007634 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800762a:	2300      	movs	r3, #0
 800762c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800762e:	68bb      	ldr	r3, [r7, #8]
 8007630:	61bb      	str	r3, [r7, #24]
 8007632:	e003      	b.n	800763c <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8007634:	68bb      	ldr	r3, [r7, #8]
 8007636:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007638:	2300      	movs	r3, #0
 800763a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800763c:	e02c      	b.n	8007698 <HAL_UART_Transmit+0xe8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800763e:	683b      	ldr	r3, [r7, #0]
 8007640:	9300      	str	r3, [sp, #0]
 8007642:	697b      	ldr	r3, [r7, #20]
 8007644:	2200      	movs	r2, #0
 8007646:	2180      	movs	r1, #128	; 0x80
 8007648:	68f8      	ldr	r0, [r7, #12]
 800764a:	f002 fb81 	bl	8009d50 <UART_WaitOnFlagUntilTimeout>
 800764e:	4603      	mov	r3, r0
 8007650:	2b00      	cmp	r3, #0
 8007652:	d001      	beq.n	8007658 <HAL_UART_Transmit+0xa8>
      {
        return HAL_TIMEOUT;
 8007654:	2303      	movs	r3, #3
 8007656:	e03d      	b.n	80076d4 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8007658:	69fb      	ldr	r3, [r7, #28]
 800765a:	2b00      	cmp	r3, #0
 800765c:	d10b      	bne.n	8007676 <HAL_UART_Transmit+0xc6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800765e:	69bb      	ldr	r3, [r7, #24]
 8007660:	881b      	ldrh	r3, [r3, #0]
 8007662:	461a      	mov	r2, r3
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800766c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800766e:	69bb      	ldr	r3, [r7, #24]
 8007670:	3302      	adds	r3, #2
 8007672:	61bb      	str	r3, [r7, #24]
 8007674:	e007      	b.n	8007686 <HAL_UART_Transmit+0xd6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007676:	69fb      	ldr	r3, [r7, #28]
 8007678:	781a      	ldrb	r2, [r3, #0]
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007680:	69fb      	ldr	r3, [r7, #28]
 8007682:	3301      	adds	r3, #1
 8007684:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800768c:	b29b      	uxth	r3, r3
 800768e:	3b01      	subs	r3, #1
 8007690:	b29a      	uxth	r2, r3
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800769e:	b29b      	uxth	r3, r3
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d1cc      	bne.n	800763e <HAL_UART_Transmit+0x8e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80076a4:	683b      	ldr	r3, [r7, #0]
 80076a6:	9300      	str	r3, [sp, #0]
 80076a8:	697b      	ldr	r3, [r7, #20]
 80076aa:	2200      	movs	r2, #0
 80076ac:	2140      	movs	r1, #64	; 0x40
 80076ae:	68f8      	ldr	r0, [r7, #12]
 80076b0:	f002 fb4e 	bl	8009d50 <UART_WaitOnFlagUntilTimeout>
 80076b4:	4603      	mov	r3, r0
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d001      	beq.n	80076be <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80076ba:	2303      	movs	r3, #3
 80076bc:	e00a      	b.n	80076d4 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	2220      	movs	r2, #32
 80076c2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    __HAL_UNLOCK(huart);
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	2200      	movs	r2, #0
 80076ca:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80076ce:	2300      	movs	r3, #0
 80076d0:	e000      	b.n	80076d4 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 80076d2:	2302      	movs	r3, #2
  }
}
 80076d4:	4618      	mov	r0, r3
 80076d6:	3720      	adds	r7, #32
 80076d8:	46bd      	mov	sp, r7
 80076da:	bd80      	pop	{r7, pc}

080076dc <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80076dc:	b580      	push	{r7, lr}
 80076de:	b08a      	sub	sp, #40	; 0x28
 80076e0:	af02      	add	r7, sp, #8
 80076e2:	60f8      	str	r0, [r7, #12]
 80076e4:	60b9      	str	r1, [r7, #8]
 80076e6:	603b      	str	r3, [r7, #0]
 80076e8:	4613      	mov	r3, r2
 80076ea:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80076f2:	2b20      	cmp	r3, #32
 80076f4:	f040 80bd 	bne.w	8007872 <HAL_UART_Receive+0x196>
  {
    if ((pData == NULL) || (Size == 0U))
 80076f8:	68bb      	ldr	r3, [r7, #8]
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d002      	beq.n	8007704 <HAL_UART_Receive+0x28>
 80076fe:	88fb      	ldrh	r3, [r7, #6]
 8007700:	2b00      	cmp	r3, #0
 8007702:	d101      	bne.n	8007708 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8007704:	2301      	movs	r3, #1
 8007706:	e0b5      	b.n	8007874 <HAL_UART_Receive+0x198>
    }

    __HAL_LOCK(huart);
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800770e:	2b01      	cmp	r3, #1
 8007710:	d101      	bne.n	8007716 <HAL_UART_Receive+0x3a>
 8007712:	2302      	movs	r3, #2
 8007714:	e0ae      	b.n	8007874 <HAL_UART_Receive+0x198>
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	2201      	movs	r2, #1
 800771a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	2200      	movs	r2, #0
 8007722:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	2222      	movs	r2, #34	; 0x22
 800772a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800772e:	f7f9 ffa7 	bl	8001680 <HAL_GetTick>
 8007732:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	88fa      	ldrh	r2, [r7, #6]
 8007738:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	88fa      	ldrh	r2, [r7, #6]
 8007740:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	689b      	ldr	r3, [r3, #8]
 8007748:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800774c:	d10e      	bne.n	800776c <HAL_UART_Receive+0x90>
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	691b      	ldr	r3, [r3, #16]
 8007752:	2b00      	cmp	r3, #0
 8007754:	d105      	bne.n	8007762 <HAL_UART_Receive+0x86>
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	f240 12ff 	movw	r2, #511	; 0x1ff
 800775c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007760:	e02d      	b.n	80077be <HAL_UART_Receive+0xe2>
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	22ff      	movs	r2, #255	; 0xff
 8007766:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800776a:	e028      	b.n	80077be <HAL_UART_Receive+0xe2>
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	689b      	ldr	r3, [r3, #8]
 8007770:	2b00      	cmp	r3, #0
 8007772:	d10d      	bne.n	8007790 <HAL_UART_Receive+0xb4>
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	691b      	ldr	r3, [r3, #16]
 8007778:	2b00      	cmp	r3, #0
 800777a:	d104      	bne.n	8007786 <HAL_UART_Receive+0xaa>
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	22ff      	movs	r2, #255	; 0xff
 8007780:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007784:	e01b      	b.n	80077be <HAL_UART_Receive+0xe2>
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	227f      	movs	r2, #127	; 0x7f
 800778a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800778e:	e016      	b.n	80077be <HAL_UART_Receive+0xe2>
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	689b      	ldr	r3, [r3, #8]
 8007794:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007798:	d10d      	bne.n	80077b6 <HAL_UART_Receive+0xda>
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	691b      	ldr	r3, [r3, #16]
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d104      	bne.n	80077ac <HAL_UART_Receive+0xd0>
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	227f      	movs	r2, #127	; 0x7f
 80077a6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80077aa:	e008      	b.n	80077be <HAL_UART_Receive+0xe2>
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	223f      	movs	r2, #63	; 0x3f
 80077b0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80077b4:	e003      	b.n	80077be <HAL_UART_Receive+0xe2>
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	2200      	movs	r2, #0
 80077ba:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80077c4:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	689b      	ldr	r3, [r3, #8]
 80077ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80077ce:	d108      	bne.n	80077e2 <HAL_UART_Receive+0x106>
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	691b      	ldr	r3, [r3, #16]
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d104      	bne.n	80077e2 <HAL_UART_Receive+0x106>
    {
      pdata8bits  = NULL;
 80077d8:	2300      	movs	r3, #0
 80077da:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80077dc:	68bb      	ldr	r3, [r7, #8]
 80077de:	61bb      	str	r3, [r7, #24]
 80077e0:	e003      	b.n	80077ea <HAL_UART_Receive+0x10e>
    }
    else
    {
      pdata8bits  = pData;
 80077e2:	68bb      	ldr	r3, [r7, #8]
 80077e4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80077e6:	2300      	movs	r3, #0
 80077e8:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80077ea:	e032      	b.n	8007852 <HAL_UART_Receive+0x176>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80077ec:	683b      	ldr	r3, [r7, #0]
 80077ee:	9300      	str	r3, [sp, #0]
 80077f0:	697b      	ldr	r3, [r7, #20]
 80077f2:	2200      	movs	r2, #0
 80077f4:	2120      	movs	r1, #32
 80077f6:	68f8      	ldr	r0, [r7, #12]
 80077f8:	f002 faaa 	bl	8009d50 <UART_WaitOnFlagUntilTimeout>
 80077fc:	4603      	mov	r3, r0
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d001      	beq.n	8007806 <HAL_UART_Receive+0x12a>
      {
        return HAL_TIMEOUT;
 8007802:	2303      	movs	r3, #3
 8007804:	e036      	b.n	8007874 <HAL_UART_Receive+0x198>
      }
      if (pdata8bits == NULL)
 8007806:	69fb      	ldr	r3, [r7, #28]
 8007808:	2b00      	cmp	r3, #0
 800780a:	d10c      	bne.n	8007826 <HAL_UART_Receive+0x14a>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007812:	b29a      	uxth	r2, r3
 8007814:	8a7b      	ldrh	r3, [r7, #18]
 8007816:	4013      	ands	r3, r2
 8007818:	b29a      	uxth	r2, r3
 800781a:	69bb      	ldr	r3, [r7, #24]
 800781c:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800781e:	69bb      	ldr	r3, [r7, #24]
 8007820:	3302      	adds	r3, #2
 8007822:	61bb      	str	r3, [r7, #24]
 8007824:	e00c      	b.n	8007840 <HAL_UART_Receive+0x164>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800782c:	b2da      	uxtb	r2, r3
 800782e:	8a7b      	ldrh	r3, [r7, #18]
 8007830:	b2db      	uxtb	r3, r3
 8007832:	4013      	ands	r3, r2
 8007834:	b2da      	uxtb	r2, r3
 8007836:	69fb      	ldr	r3, [r7, #28]
 8007838:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800783a:	69fb      	ldr	r3, [r7, #28]
 800783c:	3301      	adds	r3, #1
 800783e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007846:	b29b      	uxth	r3, r3
 8007848:	3b01      	subs	r3, #1
 800784a:	b29a      	uxth	r2, r3
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007858:	b29b      	uxth	r3, r3
 800785a:	2b00      	cmp	r3, #0
 800785c:	d1c6      	bne.n	80077ec <HAL_UART_Receive+0x110>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	2220      	movs	r2, #32
 8007862:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    __HAL_UNLOCK(huart);
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	2200      	movs	r2, #0
 800786a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800786e:	2300      	movs	r3, #0
 8007870:	e000      	b.n	8007874 <HAL_UART_Receive+0x198>
  }
  else
  {
    return HAL_BUSY;
 8007872:	2302      	movs	r3, #2
  }
}
 8007874:	4618      	mov	r0, r3
 8007876:	3720      	adds	r7, #32
 8007878:	46bd      	mov	sp, r7
 800787a:	bd80      	pop	{r7, pc}
 800787c:	0000      	movs	r0, r0
	...

08007880 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007880:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8007884:	b090      	sub	sp, #64	; 0x40
 8007886:	af00      	add	r7, sp, #0
 8007888:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800788a:	2300      	movs	r3, #0
 800788c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_StatusTypeDef ret               = HAL_OK;
 800788e:	2300      	movs	r3, #0
 8007890:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8007894:	2300      	movs	r3, #0
 8007896:	62fb      	str	r3, [r7, #44]	; 0x2c
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	689a      	ldr	r2, [r3, #8]
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	691b      	ldr	r3, [r3, #16]
 80078a0:	431a      	orrs	r2, r3
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	695b      	ldr	r3, [r3, #20]
 80078a6:	431a      	orrs	r2, r3
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	69db      	ldr	r3, [r3, #28]
 80078ac:	4313      	orrs	r3, r2
 80078ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  tmpreg |= (uint32_t)huart->FifoMode;
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80078b4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80078b6:	4313      	orrs	r3, r2
 80078b8:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	681a      	ldr	r2, [r3, #0]
 80078c0:	4bc1      	ldr	r3, [pc, #772]	; (8007bc8 <UART_SetConfig+0x348>)
 80078c2:	4013      	ands	r3, r2
 80078c4:	687a      	ldr	r2, [r7, #4]
 80078c6:	6812      	ldr	r2, [r2, #0]
 80078c8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80078ca:	430b      	orrs	r3, r1
 80078cc:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	685b      	ldr	r3, [r3, #4]
 80078d4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	68da      	ldr	r2, [r3, #12]
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	430a      	orrs	r2, r1
 80078e2:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	699b      	ldr	r3, [r3, #24]
 80078e8:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	4ab7      	ldr	r2, [pc, #732]	; (8007bcc <UART_SetConfig+0x34c>)
 80078f0:	4293      	cmp	r3, r2
 80078f2:	d004      	beq.n	80078fe <UART_SetConfig+0x7e>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	6a1b      	ldr	r3, [r3, #32]
 80078f8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80078fa:	4313      	orrs	r3, r2
 80078fc:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	689a      	ldr	r2, [r3, #8]
 8007904:	4bb2      	ldr	r3, [pc, #712]	; (8007bd0 <UART_SetConfig+0x350>)
 8007906:	4013      	ands	r3, r2
 8007908:	687a      	ldr	r2, [r7, #4]
 800790a:	6812      	ldr	r2, [r2, #0]
 800790c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800790e:	430b      	orrs	r3, r1
 8007910:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007918:	f023 010f 	bic.w	r1, r3, #15
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	430a      	orrs	r2, r1
 8007926:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	4aa9      	ldr	r2, [pc, #676]	; (8007bd4 <UART_SetConfig+0x354>)
 800792e:	4293      	cmp	r3, r2
 8007930:	d177      	bne.n	8007a22 <UART_SetConfig+0x1a2>
 8007932:	4ba9      	ldr	r3, [pc, #676]	; (8007bd8 <UART_SetConfig+0x358>)
 8007934:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007936:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800793a:	2b28      	cmp	r3, #40	; 0x28
 800793c:	d86c      	bhi.n	8007a18 <UART_SetConfig+0x198>
 800793e:	a201      	add	r2, pc, #4	; (adr r2, 8007944 <UART_SetConfig+0xc4>)
 8007940:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007944:	080079e9 	.word	0x080079e9
 8007948:	08007a19 	.word	0x08007a19
 800794c:	08007a19 	.word	0x08007a19
 8007950:	08007a19 	.word	0x08007a19
 8007954:	08007a19 	.word	0x08007a19
 8007958:	08007a19 	.word	0x08007a19
 800795c:	08007a19 	.word	0x08007a19
 8007960:	08007a19 	.word	0x08007a19
 8007964:	080079f1 	.word	0x080079f1
 8007968:	08007a19 	.word	0x08007a19
 800796c:	08007a19 	.word	0x08007a19
 8007970:	08007a19 	.word	0x08007a19
 8007974:	08007a19 	.word	0x08007a19
 8007978:	08007a19 	.word	0x08007a19
 800797c:	08007a19 	.word	0x08007a19
 8007980:	08007a19 	.word	0x08007a19
 8007984:	080079f9 	.word	0x080079f9
 8007988:	08007a19 	.word	0x08007a19
 800798c:	08007a19 	.word	0x08007a19
 8007990:	08007a19 	.word	0x08007a19
 8007994:	08007a19 	.word	0x08007a19
 8007998:	08007a19 	.word	0x08007a19
 800799c:	08007a19 	.word	0x08007a19
 80079a0:	08007a19 	.word	0x08007a19
 80079a4:	08007a01 	.word	0x08007a01
 80079a8:	08007a19 	.word	0x08007a19
 80079ac:	08007a19 	.word	0x08007a19
 80079b0:	08007a19 	.word	0x08007a19
 80079b4:	08007a19 	.word	0x08007a19
 80079b8:	08007a19 	.word	0x08007a19
 80079bc:	08007a19 	.word	0x08007a19
 80079c0:	08007a19 	.word	0x08007a19
 80079c4:	08007a09 	.word	0x08007a09
 80079c8:	08007a19 	.word	0x08007a19
 80079cc:	08007a19 	.word	0x08007a19
 80079d0:	08007a19 	.word	0x08007a19
 80079d4:	08007a19 	.word	0x08007a19
 80079d8:	08007a19 	.word	0x08007a19
 80079dc:	08007a19 	.word	0x08007a19
 80079e0:	08007a19 	.word	0x08007a19
 80079e4:	08007a11 	.word	0x08007a11
 80079e8:	2301      	movs	r3, #1
 80079ea:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80079ee:	e233      	b.n	8007e58 <UART_SetConfig+0x5d8>
 80079f0:	2304      	movs	r3, #4
 80079f2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80079f6:	e22f      	b.n	8007e58 <UART_SetConfig+0x5d8>
 80079f8:	2308      	movs	r3, #8
 80079fa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80079fe:	e22b      	b.n	8007e58 <UART_SetConfig+0x5d8>
 8007a00:	2310      	movs	r3, #16
 8007a02:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007a06:	e227      	b.n	8007e58 <UART_SetConfig+0x5d8>
 8007a08:	2320      	movs	r3, #32
 8007a0a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007a0e:	e223      	b.n	8007e58 <UART_SetConfig+0x5d8>
 8007a10:	2340      	movs	r3, #64	; 0x40
 8007a12:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007a16:	e21f      	b.n	8007e58 <UART_SetConfig+0x5d8>
 8007a18:	2380      	movs	r3, #128	; 0x80
 8007a1a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007a1e:	bf00      	nop
 8007a20:	e21a      	b.n	8007e58 <UART_SetConfig+0x5d8>
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	4a6d      	ldr	r2, [pc, #436]	; (8007bdc <UART_SetConfig+0x35c>)
 8007a28:	4293      	cmp	r3, r2
 8007a2a:	d132      	bne.n	8007a92 <UART_SetConfig+0x212>
 8007a2c:	4b6a      	ldr	r3, [pc, #424]	; (8007bd8 <UART_SetConfig+0x358>)
 8007a2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a30:	f003 0307 	and.w	r3, r3, #7
 8007a34:	2b05      	cmp	r3, #5
 8007a36:	d827      	bhi.n	8007a88 <UART_SetConfig+0x208>
 8007a38:	a201      	add	r2, pc, #4	; (adr r2, 8007a40 <UART_SetConfig+0x1c0>)
 8007a3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a3e:	bf00      	nop
 8007a40:	08007a59 	.word	0x08007a59
 8007a44:	08007a61 	.word	0x08007a61
 8007a48:	08007a69 	.word	0x08007a69
 8007a4c:	08007a71 	.word	0x08007a71
 8007a50:	08007a79 	.word	0x08007a79
 8007a54:	08007a81 	.word	0x08007a81
 8007a58:	2300      	movs	r3, #0
 8007a5a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007a5e:	e1fb      	b.n	8007e58 <UART_SetConfig+0x5d8>
 8007a60:	2304      	movs	r3, #4
 8007a62:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007a66:	e1f7      	b.n	8007e58 <UART_SetConfig+0x5d8>
 8007a68:	2308      	movs	r3, #8
 8007a6a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007a6e:	e1f3      	b.n	8007e58 <UART_SetConfig+0x5d8>
 8007a70:	2310      	movs	r3, #16
 8007a72:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007a76:	e1ef      	b.n	8007e58 <UART_SetConfig+0x5d8>
 8007a78:	2320      	movs	r3, #32
 8007a7a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007a7e:	e1eb      	b.n	8007e58 <UART_SetConfig+0x5d8>
 8007a80:	2340      	movs	r3, #64	; 0x40
 8007a82:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007a86:	e1e7      	b.n	8007e58 <UART_SetConfig+0x5d8>
 8007a88:	2380      	movs	r3, #128	; 0x80
 8007a8a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007a8e:	bf00      	nop
 8007a90:	e1e2      	b.n	8007e58 <UART_SetConfig+0x5d8>
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	4a52      	ldr	r2, [pc, #328]	; (8007be0 <UART_SetConfig+0x360>)
 8007a98:	4293      	cmp	r3, r2
 8007a9a:	d132      	bne.n	8007b02 <UART_SetConfig+0x282>
 8007a9c:	4b4e      	ldr	r3, [pc, #312]	; (8007bd8 <UART_SetConfig+0x358>)
 8007a9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007aa0:	f003 0307 	and.w	r3, r3, #7
 8007aa4:	2b05      	cmp	r3, #5
 8007aa6:	d827      	bhi.n	8007af8 <UART_SetConfig+0x278>
 8007aa8:	a201      	add	r2, pc, #4	; (adr r2, 8007ab0 <UART_SetConfig+0x230>)
 8007aaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007aae:	bf00      	nop
 8007ab0:	08007ac9 	.word	0x08007ac9
 8007ab4:	08007ad1 	.word	0x08007ad1
 8007ab8:	08007ad9 	.word	0x08007ad9
 8007abc:	08007ae1 	.word	0x08007ae1
 8007ac0:	08007ae9 	.word	0x08007ae9
 8007ac4:	08007af1 	.word	0x08007af1
 8007ac8:	2300      	movs	r3, #0
 8007aca:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007ace:	e1c3      	b.n	8007e58 <UART_SetConfig+0x5d8>
 8007ad0:	2304      	movs	r3, #4
 8007ad2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007ad6:	e1bf      	b.n	8007e58 <UART_SetConfig+0x5d8>
 8007ad8:	2308      	movs	r3, #8
 8007ada:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007ade:	e1bb      	b.n	8007e58 <UART_SetConfig+0x5d8>
 8007ae0:	2310      	movs	r3, #16
 8007ae2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007ae6:	e1b7      	b.n	8007e58 <UART_SetConfig+0x5d8>
 8007ae8:	2320      	movs	r3, #32
 8007aea:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007aee:	e1b3      	b.n	8007e58 <UART_SetConfig+0x5d8>
 8007af0:	2340      	movs	r3, #64	; 0x40
 8007af2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007af6:	e1af      	b.n	8007e58 <UART_SetConfig+0x5d8>
 8007af8:	2380      	movs	r3, #128	; 0x80
 8007afa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007afe:	bf00      	nop
 8007b00:	e1aa      	b.n	8007e58 <UART_SetConfig+0x5d8>
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	4a37      	ldr	r2, [pc, #220]	; (8007be4 <UART_SetConfig+0x364>)
 8007b08:	4293      	cmp	r3, r2
 8007b0a:	d132      	bne.n	8007b72 <UART_SetConfig+0x2f2>
 8007b0c:	4b32      	ldr	r3, [pc, #200]	; (8007bd8 <UART_SetConfig+0x358>)
 8007b0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b10:	f003 0307 	and.w	r3, r3, #7
 8007b14:	2b05      	cmp	r3, #5
 8007b16:	d827      	bhi.n	8007b68 <UART_SetConfig+0x2e8>
 8007b18:	a201      	add	r2, pc, #4	; (adr r2, 8007b20 <UART_SetConfig+0x2a0>)
 8007b1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b1e:	bf00      	nop
 8007b20:	08007b39 	.word	0x08007b39
 8007b24:	08007b41 	.word	0x08007b41
 8007b28:	08007b49 	.word	0x08007b49
 8007b2c:	08007b51 	.word	0x08007b51
 8007b30:	08007b59 	.word	0x08007b59
 8007b34:	08007b61 	.word	0x08007b61
 8007b38:	2300      	movs	r3, #0
 8007b3a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007b3e:	e18b      	b.n	8007e58 <UART_SetConfig+0x5d8>
 8007b40:	2304      	movs	r3, #4
 8007b42:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007b46:	e187      	b.n	8007e58 <UART_SetConfig+0x5d8>
 8007b48:	2308      	movs	r3, #8
 8007b4a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007b4e:	e183      	b.n	8007e58 <UART_SetConfig+0x5d8>
 8007b50:	2310      	movs	r3, #16
 8007b52:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007b56:	e17f      	b.n	8007e58 <UART_SetConfig+0x5d8>
 8007b58:	2320      	movs	r3, #32
 8007b5a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007b5e:	e17b      	b.n	8007e58 <UART_SetConfig+0x5d8>
 8007b60:	2340      	movs	r3, #64	; 0x40
 8007b62:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007b66:	e177      	b.n	8007e58 <UART_SetConfig+0x5d8>
 8007b68:	2380      	movs	r3, #128	; 0x80
 8007b6a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007b6e:	bf00      	nop
 8007b70:	e172      	b.n	8007e58 <UART_SetConfig+0x5d8>
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	4a1c      	ldr	r2, [pc, #112]	; (8007be8 <UART_SetConfig+0x368>)
 8007b78:	4293      	cmp	r3, r2
 8007b7a:	d144      	bne.n	8007c06 <UART_SetConfig+0x386>
 8007b7c:	4b16      	ldr	r3, [pc, #88]	; (8007bd8 <UART_SetConfig+0x358>)
 8007b7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b80:	f003 0307 	and.w	r3, r3, #7
 8007b84:	2b05      	cmp	r3, #5
 8007b86:	d839      	bhi.n	8007bfc <UART_SetConfig+0x37c>
 8007b88:	a201      	add	r2, pc, #4	; (adr r2, 8007b90 <UART_SetConfig+0x310>)
 8007b8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b8e:	bf00      	nop
 8007b90:	08007ba9 	.word	0x08007ba9
 8007b94:	08007bb1 	.word	0x08007bb1
 8007b98:	08007bb9 	.word	0x08007bb9
 8007b9c:	08007bc1 	.word	0x08007bc1
 8007ba0:	08007bed 	.word	0x08007bed
 8007ba4:	08007bf5 	.word	0x08007bf5
 8007ba8:	2300      	movs	r3, #0
 8007baa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007bae:	e153      	b.n	8007e58 <UART_SetConfig+0x5d8>
 8007bb0:	2304      	movs	r3, #4
 8007bb2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007bb6:	e14f      	b.n	8007e58 <UART_SetConfig+0x5d8>
 8007bb8:	2308      	movs	r3, #8
 8007bba:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007bbe:	e14b      	b.n	8007e58 <UART_SetConfig+0x5d8>
 8007bc0:	2310      	movs	r3, #16
 8007bc2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007bc6:	e147      	b.n	8007e58 <UART_SetConfig+0x5d8>
 8007bc8:	cfff69f3 	.word	0xcfff69f3
 8007bcc:	58000c00 	.word	0x58000c00
 8007bd0:	11fff4ff 	.word	0x11fff4ff
 8007bd4:	40011000 	.word	0x40011000
 8007bd8:	58024400 	.word	0x58024400
 8007bdc:	40004400 	.word	0x40004400
 8007be0:	40004800 	.word	0x40004800
 8007be4:	40004c00 	.word	0x40004c00
 8007be8:	40005000 	.word	0x40005000
 8007bec:	2320      	movs	r3, #32
 8007bee:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007bf2:	e131      	b.n	8007e58 <UART_SetConfig+0x5d8>
 8007bf4:	2340      	movs	r3, #64	; 0x40
 8007bf6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007bfa:	e12d      	b.n	8007e58 <UART_SetConfig+0x5d8>
 8007bfc:	2380      	movs	r3, #128	; 0x80
 8007bfe:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007c02:	bf00      	nop
 8007c04:	e128      	b.n	8007e58 <UART_SetConfig+0x5d8>
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	4ac3      	ldr	r2, [pc, #780]	; (8007f18 <UART_SetConfig+0x698>)
 8007c0c:	4293      	cmp	r3, r2
 8007c0e:	d178      	bne.n	8007d02 <UART_SetConfig+0x482>
 8007c10:	4bc2      	ldr	r3, [pc, #776]	; (8007f1c <UART_SetConfig+0x69c>)
 8007c12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c14:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007c18:	2b28      	cmp	r3, #40	; 0x28
 8007c1a:	d86d      	bhi.n	8007cf8 <UART_SetConfig+0x478>
 8007c1c:	a201      	add	r2, pc, #4	; (adr r2, 8007c24 <UART_SetConfig+0x3a4>)
 8007c1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c22:	bf00      	nop
 8007c24:	08007cc9 	.word	0x08007cc9
 8007c28:	08007cf9 	.word	0x08007cf9
 8007c2c:	08007cf9 	.word	0x08007cf9
 8007c30:	08007cf9 	.word	0x08007cf9
 8007c34:	08007cf9 	.word	0x08007cf9
 8007c38:	08007cf9 	.word	0x08007cf9
 8007c3c:	08007cf9 	.word	0x08007cf9
 8007c40:	08007cf9 	.word	0x08007cf9
 8007c44:	08007cd1 	.word	0x08007cd1
 8007c48:	08007cf9 	.word	0x08007cf9
 8007c4c:	08007cf9 	.word	0x08007cf9
 8007c50:	08007cf9 	.word	0x08007cf9
 8007c54:	08007cf9 	.word	0x08007cf9
 8007c58:	08007cf9 	.word	0x08007cf9
 8007c5c:	08007cf9 	.word	0x08007cf9
 8007c60:	08007cf9 	.word	0x08007cf9
 8007c64:	08007cd9 	.word	0x08007cd9
 8007c68:	08007cf9 	.word	0x08007cf9
 8007c6c:	08007cf9 	.word	0x08007cf9
 8007c70:	08007cf9 	.word	0x08007cf9
 8007c74:	08007cf9 	.word	0x08007cf9
 8007c78:	08007cf9 	.word	0x08007cf9
 8007c7c:	08007cf9 	.word	0x08007cf9
 8007c80:	08007cf9 	.word	0x08007cf9
 8007c84:	08007ce1 	.word	0x08007ce1
 8007c88:	08007cf9 	.word	0x08007cf9
 8007c8c:	08007cf9 	.word	0x08007cf9
 8007c90:	08007cf9 	.word	0x08007cf9
 8007c94:	08007cf9 	.word	0x08007cf9
 8007c98:	08007cf9 	.word	0x08007cf9
 8007c9c:	08007cf9 	.word	0x08007cf9
 8007ca0:	08007cf9 	.word	0x08007cf9
 8007ca4:	08007ce9 	.word	0x08007ce9
 8007ca8:	08007cf9 	.word	0x08007cf9
 8007cac:	08007cf9 	.word	0x08007cf9
 8007cb0:	08007cf9 	.word	0x08007cf9
 8007cb4:	08007cf9 	.word	0x08007cf9
 8007cb8:	08007cf9 	.word	0x08007cf9
 8007cbc:	08007cf9 	.word	0x08007cf9
 8007cc0:	08007cf9 	.word	0x08007cf9
 8007cc4:	08007cf1 	.word	0x08007cf1
 8007cc8:	2301      	movs	r3, #1
 8007cca:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007cce:	e0c3      	b.n	8007e58 <UART_SetConfig+0x5d8>
 8007cd0:	2304      	movs	r3, #4
 8007cd2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007cd6:	e0bf      	b.n	8007e58 <UART_SetConfig+0x5d8>
 8007cd8:	2308      	movs	r3, #8
 8007cda:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007cde:	e0bb      	b.n	8007e58 <UART_SetConfig+0x5d8>
 8007ce0:	2310      	movs	r3, #16
 8007ce2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007ce6:	e0b7      	b.n	8007e58 <UART_SetConfig+0x5d8>
 8007ce8:	2320      	movs	r3, #32
 8007cea:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007cee:	e0b3      	b.n	8007e58 <UART_SetConfig+0x5d8>
 8007cf0:	2340      	movs	r3, #64	; 0x40
 8007cf2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007cf6:	e0af      	b.n	8007e58 <UART_SetConfig+0x5d8>
 8007cf8:	2380      	movs	r3, #128	; 0x80
 8007cfa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007cfe:	bf00      	nop
 8007d00:	e0aa      	b.n	8007e58 <UART_SetConfig+0x5d8>
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	4a86      	ldr	r2, [pc, #536]	; (8007f20 <UART_SetConfig+0x6a0>)
 8007d08:	4293      	cmp	r3, r2
 8007d0a:	d132      	bne.n	8007d72 <UART_SetConfig+0x4f2>
 8007d0c:	4b83      	ldr	r3, [pc, #524]	; (8007f1c <UART_SetConfig+0x69c>)
 8007d0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d10:	f003 0307 	and.w	r3, r3, #7
 8007d14:	2b05      	cmp	r3, #5
 8007d16:	d827      	bhi.n	8007d68 <UART_SetConfig+0x4e8>
 8007d18:	a201      	add	r2, pc, #4	; (adr r2, 8007d20 <UART_SetConfig+0x4a0>)
 8007d1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d1e:	bf00      	nop
 8007d20:	08007d39 	.word	0x08007d39
 8007d24:	08007d41 	.word	0x08007d41
 8007d28:	08007d49 	.word	0x08007d49
 8007d2c:	08007d51 	.word	0x08007d51
 8007d30:	08007d59 	.word	0x08007d59
 8007d34:	08007d61 	.word	0x08007d61
 8007d38:	2300      	movs	r3, #0
 8007d3a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007d3e:	e08b      	b.n	8007e58 <UART_SetConfig+0x5d8>
 8007d40:	2304      	movs	r3, #4
 8007d42:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007d46:	e087      	b.n	8007e58 <UART_SetConfig+0x5d8>
 8007d48:	2308      	movs	r3, #8
 8007d4a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007d4e:	e083      	b.n	8007e58 <UART_SetConfig+0x5d8>
 8007d50:	2310      	movs	r3, #16
 8007d52:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007d56:	e07f      	b.n	8007e58 <UART_SetConfig+0x5d8>
 8007d58:	2320      	movs	r3, #32
 8007d5a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007d5e:	e07b      	b.n	8007e58 <UART_SetConfig+0x5d8>
 8007d60:	2340      	movs	r3, #64	; 0x40
 8007d62:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007d66:	e077      	b.n	8007e58 <UART_SetConfig+0x5d8>
 8007d68:	2380      	movs	r3, #128	; 0x80
 8007d6a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007d6e:	bf00      	nop
 8007d70:	e072      	b.n	8007e58 <UART_SetConfig+0x5d8>
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	4a6b      	ldr	r2, [pc, #428]	; (8007f24 <UART_SetConfig+0x6a4>)
 8007d78:	4293      	cmp	r3, r2
 8007d7a:	d132      	bne.n	8007de2 <UART_SetConfig+0x562>
 8007d7c:	4b67      	ldr	r3, [pc, #412]	; (8007f1c <UART_SetConfig+0x69c>)
 8007d7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d80:	f003 0307 	and.w	r3, r3, #7
 8007d84:	2b05      	cmp	r3, #5
 8007d86:	d827      	bhi.n	8007dd8 <UART_SetConfig+0x558>
 8007d88:	a201      	add	r2, pc, #4	; (adr r2, 8007d90 <UART_SetConfig+0x510>)
 8007d8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d8e:	bf00      	nop
 8007d90:	08007da9 	.word	0x08007da9
 8007d94:	08007db1 	.word	0x08007db1
 8007d98:	08007db9 	.word	0x08007db9
 8007d9c:	08007dc1 	.word	0x08007dc1
 8007da0:	08007dc9 	.word	0x08007dc9
 8007da4:	08007dd1 	.word	0x08007dd1
 8007da8:	2300      	movs	r3, #0
 8007daa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007dae:	e053      	b.n	8007e58 <UART_SetConfig+0x5d8>
 8007db0:	2304      	movs	r3, #4
 8007db2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007db6:	e04f      	b.n	8007e58 <UART_SetConfig+0x5d8>
 8007db8:	2308      	movs	r3, #8
 8007dba:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007dbe:	e04b      	b.n	8007e58 <UART_SetConfig+0x5d8>
 8007dc0:	2310      	movs	r3, #16
 8007dc2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007dc6:	e047      	b.n	8007e58 <UART_SetConfig+0x5d8>
 8007dc8:	2320      	movs	r3, #32
 8007dca:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007dce:	e043      	b.n	8007e58 <UART_SetConfig+0x5d8>
 8007dd0:	2340      	movs	r3, #64	; 0x40
 8007dd2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007dd6:	e03f      	b.n	8007e58 <UART_SetConfig+0x5d8>
 8007dd8:	2380      	movs	r3, #128	; 0x80
 8007dda:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007dde:	bf00      	nop
 8007de0:	e03a      	b.n	8007e58 <UART_SetConfig+0x5d8>
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	4a50      	ldr	r2, [pc, #320]	; (8007f28 <UART_SetConfig+0x6a8>)
 8007de8:	4293      	cmp	r3, r2
 8007dea:	d132      	bne.n	8007e52 <UART_SetConfig+0x5d2>
 8007dec:	4b4b      	ldr	r3, [pc, #300]	; (8007f1c <UART_SetConfig+0x69c>)
 8007dee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007df0:	f003 0307 	and.w	r3, r3, #7
 8007df4:	2b05      	cmp	r3, #5
 8007df6:	d827      	bhi.n	8007e48 <UART_SetConfig+0x5c8>
 8007df8:	a201      	add	r2, pc, #4	; (adr r2, 8007e00 <UART_SetConfig+0x580>)
 8007dfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007dfe:	bf00      	nop
 8007e00:	08007e19 	.word	0x08007e19
 8007e04:	08007e21 	.word	0x08007e21
 8007e08:	08007e29 	.word	0x08007e29
 8007e0c:	08007e31 	.word	0x08007e31
 8007e10:	08007e39 	.word	0x08007e39
 8007e14:	08007e41 	.word	0x08007e41
 8007e18:	2302      	movs	r3, #2
 8007e1a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007e1e:	e01b      	b.n	8007e58 <UART_SetConfig+0x5d8>
 8007e20:	2304      	movs	r3, #4
 8007e22:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007e26:	e017      	b.n	8007e58 <UART_SetConfig+0x5d8>
 8007e28:	2308      	movs	r3, #8
 8007e2a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007e2e:	e013      	b.n	8007e58 <UART_SetConfig+0x5d8>
 8007e30:	2310      	movs	r3, #16
 8007e32:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007e36:	e00f      	b.n	8007e58 <UART_SetConfig+0x5d8>
 8007e38:	2320      	movs	r3, #32
 8007e3a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007e3e:	e00b      	b.n	8007e58 <UART_SetConfig+0x5d8>
 8007e40:	2340      	movs	r3, #64	; 0x40
 8007e42:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007e46:	e007      	b.n	8007e58 <UART_SetConfig+0x5d8>
 8007e48:	2380      	movs	r3, #128	; 0x80
 8007e4a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007e4e:	bf00      	nop
 8007e50:	e002      	b.n	8007e58 <UART_SetConfig+0x5d8>
 8007e52:	2380      	movs	r3, #128	; 0x80
 8007e54:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	4a32      	ldr	r2, [pc, #200]	; (8007f28 <UART_SetConfig+0x6a8>)
 8007e5e:	4293      	cmp	r3, r2
 8007e60:	f040 86f7 	bne.w	8008c52 <UART_SetConfig+0x13d2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007e64:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8007e68:	2b08      	cmp	r3, #8
 8007e6a:	f000 80c0 	beq.w	8007fee <UART_SetConfig+0x76e>
 8007e6e:	2b08      	cmp	r3, #8
 8007e70:	dc04      	bgt.n	8007e7c <UART_SetConfig+0x5fc>
 8007e72:	2b02      	cmp	r3, #2
 8007e74:	d00c      	beq.n	8007e90 <UART_SetConfig+0x610>
 8007e76:	2b04      	cmp	r3, #4
 8007e78:	d065      	beq.n	8007f46 <UART_SetConfig+0x6c6>
 8007e7a:	e27a      	b.n	8008372 <UART_SetConfig+0xaf2>
 8007e7c:	2b20      	cmp	r3, #32
 8007e7e:	f000 81b0 	beq.w	80081e2 <UART_SetConfig+0x962>
 8007e82:	2b40      	cmp	r3, #64	; 0x40
 8007e84:	f000 821e 	beq.w	80082c4 <UART_SetConfig+0xa44>
 8007e88:	2b10      	cmp	r3, #16
 8007e8a:	f000 8104 	beq.w	8008096 <UART_SetConfig+0x816>
 8007e8e:	e270      	b.n	8008372 <UART_SetConfig+0xaf2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        lpuart_ker_ck_pres = (HAL_RCCEx_GetD3PCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8007e90:	f7fd fa10 	bl	80052b4 <HAL_RCCEx_GetD3PCLK1Freq>
 8007e94:	4602      	mov	r2, r0
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d04e      	beq.n	8007f3c <UART_SetConfig+0x6bc>
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ea2:	2b01      	cmp	r3, #1
 8007ea4:	d048      	beq.n	8007f38 <UART_SetConfig+0x6b8>
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007eaa:	2b02      	cmp	r3, #2
 8007eac:	d042      	beq.n	8007f34 <UART_SetConfig+0x6b4>
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007eb2:	2b03      	cmp	r3, #3
 8007eb4:	d03c      	beq.n	8007f30 <UART_SetConfig+0x6b0>
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007eba:	2b04      	cmp	r3, #4
 8007ebc:	d036      	beq.n	8007f2c <UART_SetConfig+0x6ac>
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ec2:	2b05      	cmp	r3, #5
 8007ec4:	d026      	beq.n	8007f14 <UART_SetConfig+0x694>
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007eca:	2b06      	cmp	r3, #6
 8007ecc:	d020      	beq.n	8007f10 <UART_SetConfig+0x690>
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ed2:	2b07      	cmp	r3, #7
 8007ed4:	d01a      	beq.n	8007f0c <UART_SetConfig+0x68c>
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007eda:	2b08      	cmp	r3, #8
 8007edc:	d014      	beq.n	8007f08 <UART_SetConfig+0x688>
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ee2:	2b09      	cmp	r3, #9
 8007ee4:	d00e      	beq.n	8007f04 <UART_SetConfig+0x684>
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007eea:	2b0a      	cmp	r3, #10
 8007eec:	d008      	beq.n	8007f00 <UART_SetConfig+0x680>
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ef2:	2b0b      	cmp	r3, #11
 8007ef4:	d102      	bne.n	8007efc <UART_SetConfig+0x67c>
 8007ef6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007efa:	e020      	b.n	8007f3e <UART_SetConfig+0x6be>
 8007efc:	2301      	movs	r3, #1
 8007efe:	e01e      	b.n	8007f3e <UART_SetConfig+0x6be>
 8007f00:	2380      	movs	r3, #128	; 0x80
 8007f02:	e01c      	b.n	8007f3e <UART_SetConfig+0x6be>
 8007f04:	2340      	movs	r3, #64	; 0x40
 8007f06:	e01a      	b.n	8007f3e <UART_SetConfig+0x6be>
 8007f08:	2320      	movs	r3, #32
 8007f0a:	e018      	b.n	8007f3e <UART_SetConfig+0x6be>
 8007f0c:	2310      	movs	r3, #16
 8007f0e:	e016      	b.n	8007f3e <UART_SetConfig+0x6be>
 8007f10:	230c      	movs	r3, #12
 8007f12:	e014      	b.n	8007f3e <UART_SetConfig+0x6be>
 8007f14:	230a      	movs	r3, #10
 8007f16:	e012      	b.n	8007f3e <UART_SetConfig+0x6be>
 8007f18:	40011400 	.word	0x40011400
 8007f1c:	58024400 	.word	0x58024400
 8007f20:	40007800 	.word	0x40007800
 8007f24:	40007c00 	.word	0x40007c00
 8007f28:	58000c00 	.word	0x58000c00
 8007f2c:	2308      	movs	r3, #8
 8007f2e:	e006      	b.n	8007f3e <UART_SetConfig+0x6be>
 8007f30:	2306      	movs	r3, #6
 8007f32:	e004      	b.n	8007f3e <UART_SetConfig+0x6be>
 8007f34:	2304      	movs	r3, #4
 8007f36:	e002      	b.n	8007f3e <UART_SetConfig+0x6be>
 8007f38:	2302      	movs	r3, #2
 8007f3a:	e000      	b.n	8007f3e <UART_SetConfig+0x6be>
 8007f3c:	2301      	movs	r3, #1
 8007f3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f42:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007f44:	e219      	b.n	800837a <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007f46:	f107 0318 	add.w	r3, r7, #24
 8007f4a:	4618      	mov	r0, r3
 8007f4c:	f7fd f9c8 	bl	80052e0 <HAL_RCCEx_GetPLL2ClockFreq>
        lpuart_ker_ck_pres = (pll2_clocks.PLL2_Q_Frequency / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8007f50:	69fa      	ldr	r2, [r7, #28]
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d044      	beq.n	8007fe4 <UART_SetConfig+0x764>
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f5e:	2b01      	cmp	r3, #1
 8007f60:	d03e      	beq.n	8007fe0 <UART_SetConfig+0x760>
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f66:	2b02      	cmp	r3, #2
 8007f68:	d038      	beq.n	8007fdc <UART_SetConfig+0x75c>
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f6e:	2b03      	cmp	r3, #3
 8007f70:	d032      	beq.n	8007fd8 <UART_SetConfig+0x758>
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f76:	2b04      	cmp	r3, #4
 8007f78:	d02c      	beq.n	8007fd4 <UART_SetConfig+0x754>
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f7e:	2b05      	cmp	r3, #5
 8007f80:	d026      	beq.n	8007fd0 <UART_SetConfig+0x750>
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f86:	2b06      	cmp	r3, #6
 8007f88:	d020      	beq.n	8007fcc <UART_SetConfig+0x74c>
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f8e:	2b07      	cmp	r3, #7
 8007f90:	d01a      	beq.n	8007fc8 <UART_SetConfig+0x748>
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f96:	2b08      	cmp	r3, #8
 8007f98:	d014      	beq.n	8007fc4 <UART_SetConfig+0x744>
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f9e:	2b09      	cmp	r3, #9
 8007fa0:	d00e      	beq.n	8007fc0 <UART_SetConfig+0x740>
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fa6:	2b0a      	cmp	r3, #10
 8007fa8:	d008      	beq.n	8007fbc <UART_SetConfig+0x73c>
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fae:	2b0b      	cmp	r3, #11
 8007fb0:	d102      	bne.n	8007fb8 <UART_SetConfig+0x738>
 8007fb2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007fb6:	e016      	b.n	8007fe6 <UART_SetConfig+0x766>
 8007fb8:	2301      	movs	r3, #1
 8007fba:	e014      	b.n	8007fe6 <UART_SetConfig+0x766>
 8007fbc:	2380      	movs	r3, #128	; 0x80
 8007fbe:	e012      	b.n	8007fe6 <UART_SetConfig+0x766>
 8007fc0:	2340      	movs	r3, #64	; 0x40
 8007fc2:	e010      	b.n	8007fe6 <UART_SetConfig+0x766>
 8007fc4:	2320      	movs	r3, #32
 8007fc6:	e00e      	b.n	8007fe6 <UART_SetConfig+0x766>
 8007fc8:	2310      	movs	r3, #16
 8007fca:	e00c      	b.n	8007fe6 <UART_SetConfig+0x766>
 8007fcc:	230c      	movs	r3, #12
 8007fce:	e00a      	b.n	8007fe6 <UART_SetConfig+0x766>
 8007fd0:	230a      	movs	r3, #10
 8007fd2:	e008      	b.n	8007fe6 <UART_SetConfig+0x766>
 8007fd4:	2308      	movs	r3, #8
 8007fd6:	e006      	b.n	8007fe6 <UART_SetConfig+0x766>
 8007fd8:	2306      	movs	r3, #6
 8007fda:	e004      	b.n	8007fe6 <UART_SetConfig+0x766>
 8007fdc:	2304      	movs	r3, #4
 8007fde:	e002      	b.n	8007fe6 <UART_SetConfig+0x766>
 8007fe0:	2302      	movs	r3, #2
 8007fe2:	e000      	b.n	8007fe6 <UART_SetConfig+0x766>
 8007fe4:	2301      	movs	r3, #1
 8007fe6:	fbb2 f3f3 	udiv	r3, r2, r3
 8007fea:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007fec:	e1c5      	b.n	800837a <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007fee:	f107 030c 	add.w	r3, r7, #12
 8007ff2:	4618      	mov	r0, r3
 8007ff4:	f7fd fac0 	bl	8005578 <HAL_RCCEx_GetPLL3ClockFreq>
        lpuart_ker_ck_pres = (pll3_clocks.PLL3_Q_Frequency / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8007ff8:	693a      	ldr	r2, [r7, #16]
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d044      	beq.n	800808c <UART_SetConfig+0x80c>
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008006:	2b01      	cmp	r3, #1
 8008008:	d03e      	beq.n	8008088 <UART_SetConfig+0x808>
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800800e:	2b02      	cmp	r3, #2
 8008010:	d038      	beq.n	8008084 <UART_SetConfig+0x804>
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008016:	2b03      	cmp	r3, #3
 8008018:	d032      	beq.n	8008080 <UART_SetConfig+0x800>
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800801e:	2b04      	cmp	r3, #4
 8008020:	d02c      	beq.n	800807c <UART_SetConfig+0x7fc>
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008026:	2b05      	cmp	r3, #5
 8008028:	d026      	beq.n	8008078 <UART_SetConfig+0x7f8>
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800802e:	2b06      	cmp	r3, #6
 8008030:	d020      	beq.n	8008074 <UART_SetConfig+0x7f4>
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008036:	2b07      	cmp	r3, #7
 8008038:	d01a      	beq.n	8008070 <UART_SetConfig+0x7f0>
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800803e:	2b08      	cmp	r3, #8
 8008040:	d014      	beq.n	800806c <UART_SetConfig+0x7ec>
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008046:	2b09      	cmp	r3, #9
 8008048:	d00e      	beq.n	8008068 <UART_SetConfig+0x7e8>
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800804e:	2b0a      	cmp	r3, #10
 8008050:	d008      	beq.n	8008064 <UART_SetConfig+0x7e4>
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008056:	2b0b      	cmp	r3, #11
 8008058:	d102      	bne.n	8008060 <UART_SetConfig+0x7e0>
 800805a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800805e:	e016      	b.n	800808e <UART_SetConfig+0x80e>
 8008060:	2301      	movs	r3, #1
 8008062:	e014      	b.n	800808e <UART_SetConfig+0x80e>
 8008064:	2380      	movs	r3, #128	; 0x80
 8008066:	e012      	b.n	800808e <UART_SetConfig+0x80e>
 8008068:	2340      	movs	r3, #64	; 0x40
 800806a:	e010      	b.n	800808e <UART_SetConfig+0x80e>
 800806c:	2320      	movs	r3, #32
 800806e:	e00e      	b.n	800808e <UART_SetConfig+0x80e>
 8008070:	2310      	movs	r3, #16
 8008072:	e00c      	b.n	800808e <UART_SetConfig+0x80e>
 8008074:	230c      	movs	r3, #12
 8008076:	e00a      	b.n	800808e <UART_SetConfig+0x80e>
 8008078:	230a      	movs	r3, #10
 800807a:	e008      	b.n	800808e <UART_SetConfig+0x80e>
 800807c:	2308      	movs	r3, #8
 800807e:	e006      	b.n	800808e <UART_SetConfig+0x80e>
 8008080:	2306      	movs	r3, #6
 8008082:	e004      	b.n	800808e <UART_SetConfig+0x80e>
 8008084:	2304      	movs	r3, #4
 8008086:	e002      	b.n	800808e <UART_SetConfig+0x80e>
 8008088:	2302      	movs	r3, #2
 800808a:	e000      	b.n	800808e <UART_SetConfig+0x80e>
 800808c:	2301      	movs	r3, #1
 800808e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008092:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008094:	e171      	b.n	800837a <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008096:	4b7a      	ldr	r3, [pc, #488]	; (8008280 <UART_SetConfig+0xa00>)
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	f003 0320 	and.w	r3, r3, #32
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d054      	beq.n	800814c <UART_SetConfig+0x8cc>
        {
          lpuart_ker_ck_pres = ((uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)) / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80080a2:	4b77      	ldr	r3, [pc, #476]	; (8008280 <UART_SetConfig+0xa00>)
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	08db      	lsrs	r3, r3, #3
 80080a8:	f003 0303 	and.w	r3, r3, #3
 80080ac:	4a75      	ldr	r2, [pc, #468]	; (8008284 <UART_SetConfig+0xa04>)
 80080ae:	40da      	lsrs	r2, r3
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d044      	beq.n	8008142 <UART_SetConfig+0x8c2>
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080bc:	2b01      	cmp	r3, #1
 80080be:	d03e      	beq.n	800813e <UART_SetConfig+0x8be>
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080c4:	2b02      	cmp	r3, #2
 80080c6:	d038      	beq.n	800813a <UART_SetConfig+0x8ba>
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080cc:	2b03      	cmp	r3, #3
 80080ce:	d032      	beq.n	8008136 <UART_SetConfig+0x8b6>
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080d4:	2b04      	cmp	r3, #4
 80080d6:	d02c      	beq.n	8008132 <UART_SetConfig+0x8b2>
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080dc:	2b05      	cmp	r3, #5
 80080de:	d026      	beq.n	800812e <UART_SetConfig+0x8ae>
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080e4:	2b06      	cmp	r3, #6
 80080e6:	d020      	beq.n	800812a <UART_SetConfig+0x8aa>
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080ec:	2b07      	cmp	r3, #7
 80080ee:	d01a      	beq.n	8008126 <UART_SetConfig+0x8a6>
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080f4:	2b08      	cmp	r3, #8
 80080f6:	d014      	beq.n	8008122 <UART_SetConfig+0x8a2>
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080fc:	2b09      	cmp	r3, #9
 80080fe:	d00e      	beq.n	800811e <UART_SetConfig+0x89e>
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008104:	2b0a      	cmp	r3, #10
 8008106:	d008      	beq.n	800811a <UART_SetConfig+0x89a>
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800810c:	2b0b      	cmp	r3, #11
 800810e:	d102      	bne.n	8008116 <UART_SetConfig+0x896>
 8008110:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008114:	e016      	b.n	8008144 <UART_SetConfig+0x8c4>
 8008116:	2301      	movs	r3, #1
 8008118:	e014      	b.n	8008144 <UART_SetConfig+0x8c4>
 800811a:	2380      	movs	r3, #128	; 0x80
 800811c:	e012      	b.n	8008144 <UART_SetConfig+0x8c4>
 800811e:	2340      	movs	r3, #64	; 0x40
 8008120:	e010      	b.n	8008144 <UART_SetConfig+0x8c4>
 8008122:	2320      	movs	r3, #32
 8008124:	e00e      	b.n	8008144 <UART_SetConfig+0x8c4>
 8008126:	2310      	movs	r3, #16
 8008128:	e00c      	b.n	8008144 <UART_SetConfig+0x8c4>
 800812a:	230c      	movs	r3, #12
 800812c:	e00a      	b.n	8008144 <UART_SetConfig+0x8c4>
 800812e:	230a      	movs	r3, #10
 8008130:	e008      	b.n	8008144 <UART_SetConfig+0x8c4>
 8008132:	2308      	movs	r3, #8
 8008134:	e006      	b.n	8008144 <UART_SetConfig+0x8c4>
 8008136:	2306      	movs	r3, #6
 8008138:	e004      	b.n	8008144 <UART_SetConfig+0x8c4>
 800813a:	2304      	movs	r3, #4
 800813c:	e002      	b.n	8008144 <UART_SetConfig+0x8c4>
 800813e:	2302      	movs	r3, #2
 8008140:	e000      	b.n	8008144 <UART_SetConfig+0x8c4>
 8008142:	2301      	movs	r3, #1
 8008144:	fbb2 f3f3 	udiv	r3, r2, r3
 8008148:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          lpuart_ker_ck_pres = ((uint32_t) HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
        }
        break;
 800814a:	e116      	b.n	800837a <UART_SetConfig+0xafa>
          lpuart_ker_ck_pres = ((uint32_t) HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008150:	2b00      	cmp	r3, #0
 8008152:	d043      	beq.n	80081dc <UART_SetConfig+0x95c>
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008158:	2b01      	cmp	r3, #1
 800815a:	d03d      	beq.n	80081d8 <UART_SetConfig+0x958>
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008160:	2b02      	cmp	r3, #2
 8008162:	d037      	beq.n	80081d4 <UART_SetConfig+0x954>
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008168:	2b03      	cmp	r3, #3
 800816a:	d031      	beq.n	80081d0 <UART_SetConfig+0x950>
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008170:	2b04      	cmp	r3, #4
 8008172:	d02b      	beq.n	80081cc <UART_SetConfig+0x94c>
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008178:	2b05      	cmp	r3, #5
 800817a:	d025      	beq.n	80081c8 <UART_SetConfig+0x948>
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008180:	2b06      	cmp	r3, #6
 8008182:	d01f      	beq.n	80081c4 <UART_SetConfig+0x944>
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008188:	2b07      	cmp	r3, #7
 800818a:	d019      	beq.n	80081c0 <UART_SetConfig+0x940>
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008190:	2b08      	cmp	r3, #8
 8008192:	d013      	beq.n	80081bc <UART_SetConfig+0x93c>
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008198:	2b09      	cmp	r3, #9
 800819a:	d00d      	beq.n	80081b8 <UART_SetConfig+0x938>
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081a0:	2b0a      	cmp	r3, #10
 80081a2:	d007      	beq.n	80081b4 <UART_SetConfig+0x934>
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081a8:	2b0b      	cmp	r3, #11
 80081aa:	d101      	bne.n	80081b0 <UART_SetConfig+0x930>
 80081ac:	4b36      	ldr	r3, [pc, #216]	; (8008288 <UART_SetConfig+0xa08>)
 80081ae:	e016      	b.n	80081de <UART_SetConfig+0x95e>
 80081b0:	4b34      	ldr	r3, [pc, #208]	; (8008284 <UART_SetConfig+0xa04>)
 80081b2:	e014      	b.n	80081de <UART_SetConfig+0x95e>
 80081b4:	4b35      	ldr	r3, [pc, #212]	; (800828c <UART_SetConfig+0xa0c>)
 80081b6:	e012      	b.n	80081de <UART_SetConfig+0x95e>
 80081b8:	4b35      	ldr	r3, [pc, #212]	; (8008290 <UART_SetConfig+0xa10>)
 80081ba:	e010      	b.n	80081de <UART_SetConfig+0x95e>
 80081bc:	4b35      	ldr	r3, [pc, #212]	; (8008294 <UART_SetConfig+0xa14>)
 80081be:	e00e      	b.n	80081de <UART_SetConfig+0x95e>
 80081c0:	4b35      	ldr	r3, [pc, #212]	; (8008298 <UART_SetConfig+0xa18>)
 80081c2:	e00c      	b.n	80081de <UART_SetConfig+0x95e>
 80081c4:	4b35      	ldr	r3, [pc, #212]	; (800829c <UART_SetConfig+0xa1c>)
 80081c6:	e00a      	b.n	80081de <UART_SetConfig+0x95e>
 80081c8:	4b35      	ldr	r3, [pc, #212]	; (80082a0 <UART_SetConfig+0xa20>)
 80081ca:	e008      	b.n	80081de <UART_SetConfig+0x95e>
 80081cc:	4b35      	ldr	r3, [pc, #212]	; (80082a4 <UART_SetConfig+0xa24>)
 80081ce:	e006      	b.n	80081de <UART_SetConfig+0x95e>
 80081d0:	4b35      	ldr	r3, [pc, #212]	; (80082a8 <UART_SetConfig+0xa28>)
 80081d2:	e004      	b.n	80081de <UART_SetConfig+0x95e>
 80081d4:	4b35      	ldr	r3, [pc, #212]	; (80082ac <UART_SetConfig+0xa2c>)
 80081d6:	e002      	b.n	80081de <UART_SetConfig+0x95e>
 80081d8:	4b35      	ldr	r3, [pc, #212]	; (80082b0 <UART_SetConfig+0xa30>)
 80081da:	e000      	b.n	80081de <UART_SetConfig+0x95e>
 80081dc:	4b29      	ldr	r3, [pc, #164]	; (8008284 <UART_SetConfig+0xa04>)
 80081de:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80081e0:	e0cb      	b.n	800837a <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_CSI:
        lpuart_ker_ck_pres = ((uint32_t)CSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d046      	beq.n	8008278 <UART_SetConfig+0x9f8>
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081ee:	2b01      	cmp	r3, #1
 80081f0:	d040      	beq.n	8008274 <UART_SetConfig+0x9f4>
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081f6:	2b02      	cmp	r3, #2
 80081f8:	d03a      	beq.n	8008270 <UART_SetConfig+0x9f0>
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081fe:	2b03      	cmp	r3, #3
 8008200:	d034      	beq.n	800826c <UART_SetConfig+0x9ec>
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008206:	2b04      	cmp	r3, #4
 8008208:	d02e      	beq.n	8008268 <UART_SetConfig+0x9e8>
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800820e:	2b05      	cmp	r3, #5
 8008210:	d028      	beq.n	8008264 <UART_SetConfig+0x9e4>
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008216:	2b06      	cmp	r3, #6
 8008218:	d022      	beq.n	8008260 <UART_SetConfig+0x9e0>
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800821e:	2b07      	cmp	r3, #7
 8008220:	d01c      	beq.n	800825c <UART_SetConfig+0x9dc>
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008226:	2b08      	cmp	r3, #8
 8008228:	d016      	beq.n	8008258 <UART_SetConfig+0x9d8>
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800822e:	2b09      	cmp	r3, #9
 8008230:	d00f      	beq.n	8008252 <UART_SetConfig+0x9d2>
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008236:	2b0a      	cmp	r3, #10
 8008238:	d008      	beq.n	800824c <UART_SetConfig+0x9cc>
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800823e:	2b0b      	cmp	r3, #11
 8008240:	d102      	bne.n	8008248 <UART_SetConfig+0x9c8>
 8008242:	f643 5309 	movw	r3, #15625	; 0x3d09
 8008246:	e018      	b.n	800827a <UART_SetConfig+0x9fa>
 8008248:	4b13      	ldr	r3, [pc, #76]	; (8008298 <UART_SetConfig+0xa18>)
 800824a:	e016      	b.n	800827a <UART_SetConfig+0x9fa>
 800824c:	f647 2312 	movw	r3, #31250	; 0x7a12
 8008250:	e013      	b.n	800827a <UART_SetConfig+0x9fa>
 8008252:	f24f 4324 	movw	r3, #62500	; 0xf424
 8008256:	e010      	b.n	800827a <UART_SetConfig+0x9fa>
 8008258:	4b16      	ldr	r3, [pc, #88]	; (80082b4 <UART_SetConfig+0xa34>)
 800825a:	e00e      	b.n	800827a <UART_SetConfig+0x9fa>
 800825c:	4b0a      	ldr	r3, [pc, #40]	; (8008288 <UART_SetConfig+0xa08>)
 800825e:	e00c      	b.n	800827a <UART_SetConfig+0x9fa>
 8008260:	4b15      	ldr	r3, [pc, #84]	; (80082b8 <UART_SetConfig+0xa38>)
 8008262:	e00a      	b.n	800827a <UART_SetConfig+0x9fa>
 8008264:	4b15      	ldr	r3, [pc, #84]	; (80082bc <UART_SetConfig+0xa3c>)
 8008266:	e008      	b.n	800827a <UART_SetConfig+0x9fa>
 8008268:	4b08      	ldr	r3, [pc, #32]	; (800828c <UART_SetConfig+0xa0c>)
 800826a:	e006      	b.n	800827a <UART_SetConfig+0x9fa>
 800826c:	4b14      	ldr	r3, [pc, #80]	; (80082c0 <UART_SetConfig+0xa40>)
 800826e:	e004      	b.n	800827a <UART_SetConfig+0x9fa>
 8008270:	4b07      	ldr	r3, [pc, #28]	; (8008290 <UART_SetConfig+0xa10>)
 8008272:	e002      	b.n	800827a <UART_SetConfig+0x9fa>
 8008274:	4b07      	ldr	r3, [pc, #28]	; (8008294 <UART_SetConfig+0xa14>)
 8008276:	e000      	b.n	800827a <UART_SetConfig+0x9fa>
 8008278:	4b07      	ldr	r3, [pc, #28]	; (8008298 <UART_SetConfig+0xa18>)
 800827a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800827c:	e07d      	b.n	800837a <UART_SetConfig+0xafa>
 800827e:	bf00      	nop
 8008280:	58024400 	.word	0x58024400
 8008284:	03d09000 	.word	0x03d09000
 8008288:	0003d090 	.word	0x0003d090
 800828c:	0007a120 	.word	0x0007a120
 8008290:	000f4240 	.word	0x000f4240
 8008294:	001e8480 	.word	0x001e8480
 8008298:	003d0900 	.word	0x003d0900
 800829c:	00516155 	.word	0x00516155
 80082a0:	0061a800 	.word	0x0061a800
 80082a4:	007a1200 	.word	0x007a1200
 80082a8:	00a2c2aa 	.word	0x00a2c2aa
 80082ac:	00f42400 	.word	0x00f42400
 80082b0:	01e84800 	.word	0x01e84800
 80082b4:	0001e848 	.word	0x0001e848
 80082b8:	00051615 	.word	0x00051615
 80082bc:	00061a80 	.word	0x00061a80
 80082c0:	000a2c2a 	.word	0x000a2c2a
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d04e      	beq.n	800836a <UART_SetConfig+0xaea>
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082d0:	2b01      	cmp	r3, #1
 80082d2:	d047      	beq.n	8008364 <UART_SetConfig+0xae4>
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082d8:	2b02      	cmp	r3, #2
 80082da:	d040      	beq.n	800835e <UART_SetConfig+0xade>
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082e0:	2b03      	cmp	r3, #3
 80082e2:	d039      	beq.n	8008358 <UART_SetConfig+0xad8>
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082e8:	2b04      	cmp	r3, #4
 80082ea:	d032      	beq.n	8008352 <UART_SetConfig+0xad2>
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082f0:	2b05      	cmp	r3, #5
 80082f2:	d02b      	beq.n	800834c <UART_SetConfig+0xacc>
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082f8:	2b06      	cmp	r3, #6
 80082fa:	d024      	beq.n	8008346 <UART_SetConfig+0xac6>
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008300:	2b07      	cmp	r3, #7
 8008302:	d01d      	beq.n	8008340 <UART_SetConfig+0xac0>
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008308:	2b08      	cmp	r3, #8
 800830a:	d016      	beq.n	800833a <UART_SetConfig+0xaba>
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008310:	2b09      	cmp	r3, #9
 8008312:	d00f      	beq.n	8008334 <UART_SetConfig+0xab4>
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008318:	2b0a      	cmp	r3, #10
 800831a:	d008      	beq.n	800832e <UART_SetConfig+0xaae>
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008320:	2b0b      	cmp	r3, #11
 8008322:	d101      	bne.n	8008328 <UART_SetConfig+0xaa8>
 8008324:	2380      	movs	r3, #128	; 0x80
 8008326:	e022      	b.n	800836e <UART_SetConfig+0xaee>
 8008328:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800832c:	e01f      	b.n	800836e <UART_SetConfig+0xaee>
 800832e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008332:	e01c      	b.n	800836e <UART_SetConfig+0xaee>
 8008334:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008338:	e019      	b.n	800836e <UART_SetConfig+0xaee>
 800833a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800833e:	e016      	b.n	800836e <UART_SetConfig+0xaee>
 8008340:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008344:	e013      	b.n	800836e <UART_SetConfig+0xaee>
 8008346:	f640 23aa 	movw	r3, #2730	; 0xaaa
 800834a:	e010      	b.n	800836e <UART_SetConfig+0xaee>
 800834c:	f640 43cc 	movw	r3, #3276	; 0xccc
 8008350:	e00d      	b.n	800836e <UART_SetConfig+0xaee>
 8008352:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008356:	e00a      	b.n	800836e <UART_SetConfig+0xaee>
 8008358:	f241 5355 	movw	r3, #5461	; 0x1555
 800835c:	e007      	b.n	800836e <UART_SetConfig+0xaee>
 800835e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008362:	e004      	b.n	800836e <UART_SetConfig+0xaee>
 8008364:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008368:	e001      	b.n	800836e <UART_SetConfig+0xaee>
 800836a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800836e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008370:	e003      	b.n	800837a <UART_SetConfig+0xafa>
      default:
        ret = HAL_ERROR;
 8008372:	2301      	movs	r3, #1
 8008374:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 8008378:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 800837a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800837c:	2b00      	cmp	r3, #0
 800837e:	f001 83e8 	beq.w	8009b52 <UART_SetConfig+0x22d2>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	685a      	ldr	r2, [r3, #4]
 8008386:	4613      	mov	r3, r2
 8008388:	005b      	lsls	r3, r3, #1
 800838a:	4413      	add	r3, r2
 800838c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800838e:	429a      	cmp	r2, r3
 8008390:	d305      	bcc.n	800839e <UART_SetConfig+0xb1e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	685b      	ldr	r3, [r3, #4]
 8008396:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008398:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800839a:	429a      	cmp	r2, r3
 800839c:	d904      	bls.n	80083a8 <UART_SetConfig+0xb28>
      {
        ret = HAL_ERROR;
 800839e:	2301      	movs	r3, #1
 80083a0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80083a4:	f001 bbd5 	b.w	8009b52 <UART_SetConfig+0x22d2>
      }
      else
      {
        switch (clocksource)
 80083a8:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80083ac:	2b08      	cmp	r3, #8
 80083ae:	f000 8154 	beq.w	800865a <UART_SetConfig+0xdda>
 80083b2:	2b08      	cmp	r3, #8
 80083b4:	dc06      	bgt.n	80083c4 <UART_SetConfig+0xb44>
 80083b6:	2b02      	cmp	r3, #2
 80083b8:	d00f      	beq.n	80083da <UART_SetConfig+0xb5a>
 80083ba:	2b04      	cmp	r3, #4
 80083bc:	f000 80ac 	beq.w	8008518 <UART_SetConfig+0xc98>
 80083c0:	f000 bc30 	b.w	8008c24 <UART_SetConfig+0x13a4>
 80083c4:	2b20      	cmp	r3, #32
 80083c6:	f000 832d 	beq.w	8008a24 <UART_SetConfig+0x11a4>
 80083ca:	2b40      	cmp	r3, #64	; 0x40
 80083cc:	f000 83a5 	beq.w	8008b1a <UART_SetConfig+0x129a>
 80083d0:	2b10      	cmp	r3, #16
 80083d2:	f000 81e3 	beq.w	800879c <UART_SetConfig+0xf1c>
 80083d6:	f000 bc25 	b.w	8008c24 <UART_SetConfig+0x13a4>
        {
          case UART_CLOCKSOURCE_D3PCLK1:
            pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80083da:	f7fc ff6b 	bl	80052b4 <HAL_RCCEx_GetD3PCLK1Freq>
 80083de:	62b8      	str	r0, [r7, #40]	; 0x28
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80083e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083e2:	4618      	mov	r0, r3
 80083e4:	f04f 0100 	mov.w	r1, #0
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d067      	beq.n	80084c0 <UART_SetConfig+0xc40>
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083f4:	2b01      	cmp	r3, #1
 80083f6:	d05e      	beq.n	80084b6 <UART_SetConfig+0xc36>
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083fc:	2b02      	cmp	r3, #2
 80083fe:	d055      	beq.n	80084ac <UART_SetConfig+0xc2c>
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008404:	2b03      	cmp	r3, #3
 8008406:	d04c      	beq.n	80084a2 <UART_SetConfig+0xc22>
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800840c:	2b04      	cmp	r3, #4
 800840e:	d043      	beq.n	8008498 <UART_SetConfig+0xc18>
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008414:	2b05      	cmp	r3, #5
 8008416:	d03a      	beq.n	800848e <UART_SetConfig+0xc0e>
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800841c:	2b06      	cmp	r3, #6
 800841e:	d031      	beq.n	8008484 <UART_SetConfig+0xc04>
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008424:	2b07      	cmp	r3, #7
 8008426:	d028      	beq.n	800847a <UART_SetConfig+0xbfa>
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800842c:	2b08      	cmp	r3, #8
 800842e:	d01f      	beq.n	8008470 <UART_SetConfig+0xbf0>
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008434:	2b09      	cmp	r3, #9
 8008436:	d016      	beq.n	8008466 <UART_SetConfig+0xbe6>
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800843c:	2b0a      	cmp	r3, #10
 800843e:	d00d      	beq.n	800845c <UART_SetConfig+0xbdc>
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008444:	2b0b      	cmp	r3, #11
 8008446:	d104      	bne.n	8008452 <UART_SetConfig+0xbd2>
 8008448:	f44f 7380 	mov.w	r3, #256	; 0x100
 800844c:	f04f 0400 	mov.w	r4, #0
 8008450:	e03a      	b.n	80084c8 <UART_SetConfig+0xc48>
 8008452:	f04f 0301 	mov.w	r3, #1
 8008456:	f04f 0400 	mov.w	r4, #0
 800845a:	e035      	b.n	80084c8 <UART_SetConfig+0xc48>
 800845c:	f04f 0380 	mov.w	r3, #128	; 0x80
 8008460:	f04f 0400 	mov.w	r4, #0
 8008464:	e030      	b.n	80084c8 <UART_SetConfig+0xc48>
 8008466:	f04f 0340 	mov.w	r3, #64	; 0x40
 800846a:	f04f 0400 	mov.w	r4, #0
 800846e:	e02b      	b.n	80084c8 <UART_SetConfig+0xc48>
 8008470:	f04f 0320 	mov.w	r3, #32
 8008474:	f04f 0400 	mov.w	r4, #0
 8008478:	e026      	b.n	80084c8 <UART_SetConfig+0xc48>
 800847a:	f04f 0310 	mov.w	r3, #16
 800847e:	f04f 0400 	mov.w	r4, #0
 8008482:	e021      	b.n	80084c8 <UART_SetConfig+0xc48>
 8008484:	f04f 030c 	mov.w	r3, #12
 8008488:	f04f 0400 	mov.w	r4, #0
 800848c:	e01c      	b.n	80084c8 <UART_SetConfig+0xc48>
 800848e:	f04f 030a 	mov.w	r3, #10
 8008492:	f04f 0400 	mov.w	r4, #0
 8008496:	e017      	b.n	80084c8 <UART_SetConfig+0xc48>
 8008498:	f04f 0308 	mov.w	r3, #8
 800849c:	f04f 0400 	mov.w	r4, #0
 80084a0:	e012      	b.n	80084c8 <UART_SetConfig+0xc48>
 80084a2:	f04f 0306 	mov.w	r3, #6
 80084a6:	f04f 0400 	mov.w	r4, #0
 80084aa:	e00d      	b.n	80084c8 <UART_SetConfig+0xc48>
 80084ac:	f04f 0304 	mov.w	r3, #4
 80084b0:	f04f 0400 	mov.w	r4, #0
 80084b4:	e008      	b.n	80084c8 <UART_SetConfig+0xc48>
 80084b6:	f04f 0302 	mov.w	r3, #2
 80084ba:	f04f 0400 	mov.w	r4, #0
 80084be:	e003      	b.n	80084c8 <UART_SetConfig+0xc48>
 80084c0:	f04f 0301 	mov.w	r3, #1
 80084c4:	f04f 0400 	mov.w	r4, #0
 80084c8:	461a      	mov	r2, r3
 80084ca:	4623      	mov	r3, r4
 80084cc:	f7f7 ff58 	bl	8000380 <__aeabi_uldivmod>
 80084d0:	4603      	mov	r3, r0
 80084d2:	460c      	mov	r4, r1
 80084d4:	4619      	mov	r1, r3
 80084d6:	4622      	mov	r2, r4
 80084d8:	f04f 0300 	mov.w	r3, #0
 80084dc:	f04f 0400 	mov.w	r4, #0
 80084e0:	0214      	lsls	r4, r2, #8
 80084e2:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80084e6:	020b      	lsls	r3, r1, #8
 80084e8:	687a      	ldr	r2, [r7, #4]
 80084ea:	6852      	ldr	r2, [r2, #4]
 80084ec:	0852      	lsrs	r2, r2, #1
 80084ee:	4611      	mov	r1, r2
 80084f0:	f04f 0200 	mov.w	r2, #0
 80084f4:	eb13 0b01 	adds.w	fp, r3, r1
 80084f8:	eb44 0c02 	adc.w	ip, r4, r2
 80084fc:	4658      	mov	r0, fp
 80084fe:	4661      	mov	r1, ip
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	685b      	ldr	r3, [r3, #4]
 8008504:	f04f 0400 	mov.w	r4, #0
 8008508:	461a      	mov	r2, r3
 800850a:	4623      	mov	r3, r4
 800850c:	f7f7 ff38 	bl	8000380 <__aeabi_uldivmod>
 8008510:	4603      	mov	r3, r0
 8008512:	460c      	mov	r4, r1
 8008514:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8008516:	e389      	b.n	8008c2c <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_PLL2:
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008518:	f107 0318 	add.w	r3, r7, #24
 800851c:	4618      	mov	r0, r3
 800851e:	f7fc fedf 	bl	80052e0 <HAL_RCCEx_GetPLL2ClockFreq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008522:	69fb      	ldr	r3, [r7, #28]
 8008524:	4618      	mov	r0, r3
 8008526:	f04f 0100 	mov.w	r1, #0
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800852e:	2b00      	cmp	r3, #0
 8008530:	d067      	beq.n	8008602 <UART_SetConfig+0xd82>
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008536:	2b01      	cmp	r3, #1
 8008538:	d05e      	beq.n	80085f8 <UART_SetConfig+0xd78>
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800853e:	2b02      	cmp	r3, #2
 8008540:	d055      	beq.n	80085ee <UART_SetConfig+0xd6e>
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008546:	2b03      	cmp	r3, #3
 8008548:	d04c      	beq.n	80085e4 <UART_SetConfig+0xd64>
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800854e:	2b04      	cmp	r3, #4
 8008550:	d043      	beq.n	80085da <UART_SetConfig+0xd5a>
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008556:	2b05      	cmp	r3, #5
 8008558:	d03a      	beq.n	80085d0 <UART_SetConfig+0xd50>
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800855e:	2b06      	cmp	r3, #6
 8008560:	d031      	beq.n	80085c6 <UART_SetConfig+0xd46>
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008566:	2b07      	cmp	r3, #7
 8008568:	d028      	beq.n	80085bc <UART_SetConfig+0xd3c>
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800856e:	2b08      	cmp	r3, #8
 8008570:	d01f      	beq.n	80085b2 <UART_SetConfig+0xd32>
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008576:	2b09      	cmp	r3, #9
 8008578:	d016      	beq.n	80085a8 <UART_SetConfig+0xd28>
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800857e:	2b0a      	cmp	r3, #10
 8008580:	d00d      	beq.n	800859e <UART_SetConfig+0xd1e>
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008586:	2b0b      	cmp	r3, #11
 8008588:	d104      	bne.n	8008594 <UART_SetConfig+0xd14>
 800858a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800858e:	f04f 0400 	mov.w	r4, #0
 8008592:	e03a      	b.n	800860a <UART_SetConfig+0xd8a>
 8008594:	f04f 0301 	mov.w	r3, #1
 8008598:	f04f 0400 	mov.w	r4, #0
 800859c:	e035      	b.n	800860a <UART_SetConfig+0xd8a>
 800859e:	f04f 0380 	mov.w	r3, #128	; 0x80
 80085a2:	f04f 0400 	mov.w	r4, #0
 80085a6:	e030      	b.n	800860a <UART_SetConfig+0xd8a>
 80085a8:	f04f 0340 	mov.w	r3, #64	; 0x40
 80085ac:	f04f 0400 	mov.w	r4, #0
 80085b0:	e02b      	b.n	800860a <UART_SetConfig+0xd8a>
 80085b2:	f04f 0320 	mov.w	r3, #32
 80085b6:	f04f 0400 	mov.w	r4, #0
 80085ba:	e026      	b.n	800860a <UART_SetConfig+0xd8a>
 80085bc:	f04f 0310 	mov.w	r3, #16
 80085c0:	f04f 0400 	mov.w	r4, #0
 80085c4:	e021      	b.n	800860a <UART_SetConfig+0xd8a>
 80085c6:	f04f 030c 	mov.w	r3, #12
 80085ca:	f04f 0400 	mov.w	r4, #0
 80085ce:	e01c      	b.n	800860a <UART_SetConfig+0xd8a>
 80085d0:	f04f 030a 	mov.w	r3, #10
 80085d4:	f04f 0400 	mov.w	r4, #0
 80085d8:	e017      	b.n	800860a <UART_SetConfig+0xd8a>
 80085da:	f04f 0308 	mov.w	r3, #8
 80085de:	f04f 0400 	mov.w	r4, #0
 80085e2:	e012      	b.n	800860a <UART_SetConfig+0xd8a>
 80085e4:	f04f 0306 	mov.w	r3, #6
 80085e8:	f04f 0400 	mov.w	r4, #0
 80085ec:	e00d      	b.n	800860a <UART_SetConfig+0xd8a>
 80085ee:	f04f 0304 	mov.w	r3, #4
 80085f2:	f04f 0400 	mov.w	r4, #0
 80085f6:	e008      	b.n	800860a <UART_SetConfig+0xd8a>
 80085f8:	f04f 0302 	mov.w	r3, #2
 80085fc:	f04f 0400 	mov.w	r4, #0
 8008600:	e003      	b.n	800860a <UART_SetConfig+0xd8a>
 8008602:	f04f 0301 	mov.w	r3, #1
 8008606:	f04f 0400 	mov.w	r4, #0
 800860a:	461a      	mov	r2, r3
 800860c:	4623      	mov	r3, r4
 800860e:	f7f7 feb7 	bl	8000380 <__aeabi_uldivmod>
 8008612:	4603      	mov	r3, r0
 8008614:	460c      	mov	r4, r1
 8008616:	4619      	mov	r1, r3
 8008618:	4622      	mov	r2, r4
 800861a:	f04f 0300 	mov.w	r3, #0
 800861e:	f04f 0400 	mov.w	r4, #0
 8008622:	0214      	lsls	r4, r2, #8
 8008624:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8008628:	020b      	lsls	r3, r1, #8
 800862a:	687a      	ldr	r2, [r7, #4]
 800862c:	6852      	ldr	r2, [r2, #4]
 800862e:	0852      	lsrs	r2, r2, #1
 8008630:	4611      	mov	r1, r2
 8008632:	f04f 0200 	mov.w	r2, #0
 8008636:	eb13 0b01 	adds.w	fp, r3, r1
 800863a:	eb44 0c02 	adc.w	ip, r4, r2
 800863e:	4658      	mov	r0, fp
 8008640:	4661      	mov	r1, ip
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	685b      	ldr	r3, [r3, #4]
 8008646:	f04f 0400 	mov.w	r4, #0
 800864a:	461a      	mov	r2, r3
 800864c:	4623      	mov	r3, r4
 800864e:	f7f7 fe97 	bl	8000380 <__aeabi_uldivmod>
 8008652:	4603      	mov	r3, r0
 8008654:	460c      	mov	r4, r1
 8008656:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8008658:	e2e8      	b.n	8008c2c <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_PLL3:
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800865a:	f107 030c 	add.w	r3, r7, #12
 800865e:	4618      	mov	r0, r3
 8008660:	f7fc ff8a 	bl	8005578 <HAL_RCCEx_GetPLL3ClockFreq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008664:	693b      	ldr	r3, [r7, #16]
 8008666:	4618      	mov	r0, r3
 8008668:	f04f 0100 	mov.w	r1, #0
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008670:	2b00      	cmp	r3, #0
 8008672:	d067      	beq.n	8008744 <UART_SetConfig+0xec4>
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008678:	2b01      	cmp	r3, #1
 800867a:	d05e      	beq.n	800873a <UART_SetConfig+0xeba>
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008680:	2b02      	cmp	r3, #2
 8008682:	d055      	beq.n	8008730 <UART_SetConfig+0xeb0>
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008688:	2b03      	cmp	r3, #3
 800868a:	d04c      	beq.n	8008726 <UART_SetConfig+0xea6>
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008690:	2b04      	cmp	r3, #4
 8008692:	d043      	beq.n	800871c <UART_SetConfig+0xe9c>
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008698:	2b05      	cmp	r3, #5
 800869a:	d03a      	beq.n	8008712 <UART_SetConfig+0xe92>
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086a0:	2b06      	cmp	r3, #6
 80086a2:	d031      	beq.n	8008708 <UART_SetConfig+0xe88>
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086a8:	2b07      	cmp	r3, #7
 80086aa:	d028      	beq.n	80086fe <UART_SetConfig+0xe7e>
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086b0:	2b08      	cmp	r3, #8
 80086b2:	d01f      	beq.n	80086f4 <UART_SetConfig+0xe74>
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086b8:	2b09      	cmp	r3, #9
 80086ba:	d016      	beq.n	80086ea <UART_SetConfig+0xe6a>
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086c0:	2b0a      	cmp	r3, #10
 80086c2:	d00d      	beq.n	80086e0 <UART_SetConfig+0xe60>
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086c8:	2b0b      	cmp	r3, #11
 80086ca:	d104      	bne.n	80086d6 <UART_SetConfig+0xe56>
 80086cc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80086d0:	f04f 0400 	mov.w	r4, #0
 80086d4:	e03a      	b.n	800874c <UART_SetConfig+0xecc>
 80086d6:	f04f 0301 	mov.w	r3, #1
 80086da:	f04f 0400 	mov.w	r4, #0
 80086de:	e035      	b.n	800874c <UART_SetConfig+0xecc>
 80086e0:	f04f 0380 	mov.w	r3, #128	; 0x80
 80086e4:	f04f 0400 	mov.w	r4, #0
 80086e8:	e030      	b.n	800874c <UART_SetConfig+0xecc>
 80086ea:	f04f 0340 	mov.w	r3, #64	; 0x40
 80086ee:	f04f 0400 	mov.w	r4, #0
 80086f2:	e02b      	b.n	800874c <UART_SetConfig+0xecc>
 80086f4:	f04f 0320 	mov.w	r3, #32
 80086f8:	f04f 0400 	mov.w	r4, #0
 80086fc:	e026      	b.n	800874c <UART_SetConfig+0xecc>
 80086fe:	f04f 0310 	mov.w	r3, #16
 8008702:	f04f 0400 	mov.w	r4, #0
 8008706:	e021      	b.n	800874c <UART_SetConfig+0xecc>
 8008708:	f04f 030c 	mov.w	r3, #12
 800870c:	f04f 0400 	mov.w	r4, #0
 8008710:	e01c      	b.n	800874c <UART_SetConfig+0xecc>
 8008712:	f04f 030a 	mov.w	r3, #10
 8008716:	f04f 0400 	mov.w	r4, #0
 800871a:	e017      	b.n	800874c <UART_SetConfig+0xecc>
 800871c:	f04f 0308 	mov.w	r3, #8
 8008720:	f04f 0400 	mov.w	r4, #0
 8008724:	e012      	b.n	800874c <UART_SetConfig+0xecc>
 8008726:	f04f 0306 	mov.w	r3, #6
 800872a:	f04f 0400 	mov.w	r4, #0
 800872e:	e00d      	b.n	800874c <UART_SetConfig+0xecc>
 8008730:	f04f 0304 	mov.w	r3, #4
 8008734:	f04f 0400 	mov.w	r4, #0
 8008738:	e008      	b.n	800874c <UART_SetConfig+0xecc>
 800873a:	f04f 0302 	mov.w	r3, #2
 800873e:	f04f 0400 	mov.w	r4, #0
 8008742:	e003      	b.n	800874c <UART_SetConfig+0xecc>
 8008744:	f04f 0301 	mov.w	r3, #1
 8008748:	f04f 0400 	mov.w	r4, #0
 800874c:	461a      	mov	r2, r3
 800874e:	4623      	mov	r3, r4
 8008750:	f7f7 fe16 	bl	8000380 <__aeabi_uldivmod>
 8008754:	4603      	mov	r3, r0
 8008756:	460c      	mov	r4, r1
 8008758:	4619      	mov	r1, r3
 800875a:	4622      	mov	r2, r4
 800875c:	f04f 0300 	mov.w	r3, #0
 8008760:	f04f 0400 	mov.w	r4, #0
 8008764:	0214      	lsls	r4, r2, #8
 8008766:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800876a:	020b      	lsls	r3, r1, #8
 800876c:	687a      	ldr	r2, [r7, #4]
 800876e:	6852      	ldr	r2, [r2, #4]
 8008770:	0852      	lsrs	r2, r2, #1
 8008772:	4611      	mov	r1, r2
 8008774:	f04f 0200 	mov.w	r2, #0
 8008778:	eb13 0b01 	adds.w	fp, r3, r1
 800877c:	eb44 0c02 	adc.w	ip, r4, r2
 8008780:	4658      	mov	r0, fp
 8008782:	4661      	mov	r1, ip
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	685b      	ldr	r3, [r3, #4]
 8008788:	f04f 0400 	mov.w	r4, #0
 800878c:	461a      	mov	r2, r3
 800878e:	4623      	mov	r3, r4
 8008790:	f7f7 fdf6 	bl	8000380 <__aeabi_uldivmod>
 8008794:	4603      	mov	r3, r0
 8008796:	460c      	mov	r4, r1
 8008798:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800879a:	e247      	b.n	8008c2c <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_HSI:
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800879c:	4b96      	ldr	r3, [pc, #600]	; (80089f8 <UART_SetConfig+0x1178>)
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	f003 0320 	and.w	r3, r3, #32
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	f000 80a3 	beq.w	80088f0 <UART_SetConfig+0x1070>
            {
              usartdiv = (uint32_t)(UART_DIV_LPUART((uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80087aa:	4b93      	ldr	r3, [pc, #588]	; (80089f8 <UART_SetConfig+0x1178>)
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	08db      	lsrs	r3, r3, #3
 80087b0:	f003 0303 	and.w	r3, r3, #3
 80087b4:	4a91      	ldr	r2, [pc, #580]	; (80089fc <UART_SetConfig+0x117c>)
 80087b6:	fa22 f303 	lsr.w	r3, r2, r3
 80087ba:	4618      	mov	r0, r3
 80087bc:	f04f 0100 	mov.w	r1, #0
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d067      	beq.n	8008898 <UART_SetConfig+0x1018>
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087cc:	2b01      	cmp	r3, #1
 80087ce:	d05e      	beq.n	800888e <UART_SetConfig+0x100e>
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087d4:	2b02      	cmp	r3, #2
 80087d6:	d055      	beq.n	8008884 <UART_SetConfig+0x1004>
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087dc:	2b03      	cmp	r3, #3
 80087de:	d04c      	beq.n	800887a <UART_SetConfig+0xffa>
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087e4:	2b04      	cmp	r3, #4
 80087e6:	d043      	beq.n	8008870 <UART_SetConfig+0xff0>
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087ec:	2b05      	cmp	r3, #5
 80087ee:	d03a      	beq.n	8008866 <UART_SetConfig+0xfe6>
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087f4:	2b06      	cmp	r3, #6
 80087f6:	d031      	beq.n	800885c <UART_SetConfig+0xfdc>
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087fc:	2b07      	cmp	r3, #7
 80087fe:	d028      	beq.n	8008852 <UART_SetConfig+0xfd2>
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008804:	2b08      	cmp	r3, #8
 8008806:	d01f      	beq.n	8008848 <UART_SetConfig+0xfc8>
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800880c:	2b09      	cmp	r3, #9
 800880e:	d016      	beq.n	800883e <UART_SetConfig+0xfbe>
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008814:	2b0a      	cmp	r3, #10
 8008816:	d00d      	beq.n	8008834 <UART_SetConfig+0xfb4>
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800881c:	2b0b      	cmp	r3, #11
 800881e:	d104      	bne.n	800882a <UART_SetConfig+0xfaa>
 8008820:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008824:	f04f 0400 	mov.w	r4, #0
 8008828:	e03a      	b.n	80088a0 <UART_SetConfig+0x1020>
 800882a:	f04f 0301 	mov.w	r3, #1
 800882e:	f04f 0400 	mov.w	r4, #0
 8008832:	e035      	b.n	80088a0 <UART_SetConfig+0x1020>
 8008834:	f04f 0380 	mov.w	r3, #128	; 0x80
 8008838:	f04f 0400 	mov.w	r4, #0
 800883c:	e030      	b.n	80088a0 <UART_SetConfig+0x1020>
 800883e:	f04f 0340 	mov.w	r3, #64	; 0x40
 8008842:	f04f 0400 	mov.w	r4, #0
 8008846:	e02b      	b.n	80088a0 <UART_SetConfig+0x1020>
 8008848:	f04f 0320 	mov.w	r3, #32
 800884c:	f04f 0400 	mov.w	r4, #0
 8008850:	e026      	b.n	80088a0 <UART_SetConfig+0x1020>
 8008852:	f04f 0310 	mov.w	r3, #16
 8008856:	f04f 0400 	mov.w	r4, #0
 800885a:	e021      	b.n	80088a0 <UART_SetConfig+0x1020>
 800885c:	f04f 030c 	mov.w	r3, #12
 8008860:	f04f 0400 	mov.w	r4, #0
 8008864:	e01c      	b.n	80088a0 <UART_SetConfig+0x1020>
 8008866:	f04f 030a 	mov.w	r3, #10
 800886a:	f04f 0400 	mov.w	r4, #0
 800886e:	e017      	b.n	80088a0 <UART_SetConfig+0x1020>
 8008870:	f04f 0308 	mov.w	r3, #8
 8008874:	f04f 0400 	mov.w	r4, #0
 8008878:	e012      	b.n	80088a0 <UART_SetConfig+0x1020>
 800887a:	f04f 0306 	mov.w	r3, #6
 800887e:	f04f 0400 	mov.w	r4, #0
 8008882:	e00d      	b.n	80088a0 <UART_SetConfig+0x1020>
 8008884:	f04f 0304 	mov.w	r3, #4
 8008888:	f04f 0400 	mov.w	r4, #0
 800888c:	e008      	b.n	80088a0 <UART_SetConfig+0x1020>
 800888e:	f04f 0302 	mov.w	r3, #2
 8008892:	f04f 0400 	mov.w	r4, #0
 8008896:	e003      	b.n	80088a0 <UART_SetConfig+0x1020>
 8008898:	f04f 0301 	mov.w	r3, #1
 800889c:	f04f 0400 	mov.w	r4, #0
 80088a0:	461a      	mov	r2, r3
 80088a2:	4623      	mov	r3, r4
 80088a4:	f7f7 fd6c 	bl	8000380 <__aeabi_uldivmod>
 80088a8:	4603      	mov	r3, r0
 80088aa:	460c      	mov	r4, r1
 80088ac:	4619      	mov	r1, r3
 80088ae:	4622      	mov	r2, r4
 80088b0:	f04f 0300 	mov.w	r3, #0
 80088b4:	f04f 0400 	mov.w	r4, #0
 80088b8:	0214      	lsls	r4, r2, #8
 80088ba:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80088be:	020b      	lsls	r3, r1, #8
 80088c0:	687a      	ldr	r2, [r7, #4]
 80088c2:	6852      	ldr	r2, [r2, #4]
 80088c4:	0852      	lsrs	r2, r2, #1
 80088c6:	4611      	mov	r1, r2
 80088c8:	f04f 0200 	mov.w	r2, #0
 80088cc:	eb13 0b01 	adds.w	fp, r3, r1
 80088d0:	eb44 0c02 	adc.w	ip, r4, r2
 80088d4:	4658      	mov	r0, fp
 80088d6:	4661      	mov	r1, ip
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	685b      	ldr	r3, [r3, #4]
 80088dc:	f04f 0400 	mov.w	r4, #0
 80088e0:	461a      	mov	r2, r3
 80088e2:	4623      	mov	r3, r4
 80088e4:	f7f7 fd4c 	bl	8000380 <__aeabi_uldivmod>
 80088e8:	4603      	mov	r3, r0
 80088ea:	460c      	mov	r4, r1
 80088ec:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
            }
            break;
 80088ee:	e19d      	b.n	8008c2c <UART_SetConfig+0x13ac>
              usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d05b      	beq.n	80089b0 <UART_SetConfig+0x1130>
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088fc:	2b01      	cmp	r3, #1
 80088fe:	d053      	beq.n	80089a8 <UART_SetConfig+0x1128>
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008904:	2b02      	cmp	r3, #2
 8008906:	d04b      	beq.n	80089a0 <UART_SetConfig+0x1120>
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800890c:	2b03      	cmp	r3, #3
 800890e:	d043      	beq.n	8008998 <UART_SetConfig+0x1118>
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008914:	2b04      	cmp	r3, #4
 8008916:	d03b      	beq.n	8008990 <UART_SetConfig+0x1110>
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800891c:	2b05      	cmp	r3, #5
 800891e:	d033      	beq.n	8008988 <UART_SetConfig+0x1108>
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008924:	2b06      	cmp	r3, #6
 8008926:	d02b      	beq.n	8008980 <UART_SetConfig+0x1100>
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800892c:	2b07      	cmp	r3, #7
 800892e:	d023      	beq.n	8008978 <UART_SetConfig+0x10f8>
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008934:	2b08      	cmp	r3, #8
 8008936:	d01b      	beq.n	8008970 <UART_SetConfig+0x10f0>
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800893c:	2b09      	cmp	r3, #9
 800893e:	d013      	beq.n	8008968 <UART_SetConfig+0x10e8>
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008944:	2b0a      	cmp	r3, #10
 8008946:	d00b      	beq.n	8008960 <UART_SetConfig+0x10e0>
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800894c:	2b0b      	cmp	r3, #11
 800894e:	d103      	bne.n	8008958 <UART_SetConfig+0x10d8>
 8008950:	4b2a      	ldr	r3, [pc, #168]	; (80089fc <UART_SetConfig+0x117c>)
 8008952:	f04f 0400 	mov.w	r4, #0
 8008956:	e02e      	b.n	80089b6 <UART_SetConfig+0x1136>
 8008958:	4b29      	ldr	r3, [pc, #164]	; (8008a00 <UART_SetConfig+0x1180>)
 800895a:	f04f 0403 	mov.w	r4, #3
 800895e:	e02a      	b.n	80089b6 <UART_SetConfig+0x1136>
 8008960:	4b28      	ldr	r3, [pc, #160]	; (8008a04 <UART_SetConfig+0x1184>)
 8008962:	f04f 0400 	mov.w	r4, #0
 8008966:	e026      	b.n	80089b6 <UART_SetConfig+0x1136>
 8008968:	4b27      	ldr	r3, [pc, #156]	; (8008a08 <UART_SetConfig+0x1188>)
 800896a:	f04f 0400 	mov.w	r4, #0
 800896e:	e022      	b.n	80089b6 <UART_SetConfig+0x1136>
 8008970:	4b26      	ldr	r3, [pc, #152]	; (8008a0c <UART_SetConfig+0x118c>)
 8008972:	f04f 0400 	mov.w	r4, #0
 8008976:	e01e      	b.n	80089b6 <UART_SetConfig+0x1136>
 8008978:	4b25      	ldr	r3, [pc, #148]	; (8008a10 <UART_SetConfig+0x1190>)
 800897a:	f04f 0400 	mov.w	r4, #0
 800897e:	e01a      	b.n	80089b6 <UART_SetConfig+0x1136>
 8008980:	a419      	add	r4, pc, #100	; (adr r4, 80089e8 <UART_SetConfig+0x1168>)
 8008982:	e9d4 3400 	ldrd	r3, r4, [r4]
 8008986:	e016      	b.n	80089b6 <UART_SetConfig+0x1136>
 8008988:	4b22      	ldr	r3, [pc, #136]	; (8008a14 <UART_SetConfig+0x1194>)
 800898a:	f04f 0400 	mov.w	r4, #0
 800898e:	e012      	b.n	80089b6 <UART_SetConfig+0x1136>
 8008990:	4b21      	ldr	r3, [pc, #132]	; (8008a18 <UART_SetConfig+0x1198>)
 8008992:	f04f 0400 	mov.w	r4, #0
 8008996:	e00e      	b.n	80089b6 <UART_SetConfig+0x1136>
 8008998:	a415      	add	r4, pc, #84	; (adr r4, 80089f0 <UART_SetConfig+0x1170>)
 800899a:	e9d4 3400 	ldrd	r3, r4, [r4]
 800899e:	e00a      	b.n	80089b6 <UART_SetConfig+0x1136>
 80089a0:	4b1e      	ldr	r3, [pc, #120]	; (8008a1c <UART_SetConfig+0x119c>)
 80089a2:	f04f 0400 	mov.w	r4, #0
 80089a6:	e006      	b.n	80089b6 <UART_SetConfig+0x1136>
 80089a8:	4b1d      	ldr	r3, [pc, #116]	; (8008a20 <UART_SetConfig+0x11a0>)
 80089aa:	f04f 0401 	mov.w	r4, #1
 80089ae:	e002      	b.n	80089b6 <UART_SetConfig+0x1136>
 80089b0:	4b13      	ldr	r3, [pc, #76]	; (8008a00 <UART_SetConfig+0x1180>)
 80089b2:	f04f 0403 	mov.w	r4, #3
 80089b6:	687a      	ldr	r2, [r7, #4]
 80089b8:	6852      	ldr	r2, [r2, #4]
 80089ba:	0852      	lsrs	r2, r2, #1
 80089bc:	4611      	mov	r1, r2
 80089be:	f04f 0200 	mov.w	r2, #0
 80089c2:	eb13 0b01 	adds.w	fp, r3, r1
 80089c6:	eb44 0c02 	adc.w	ip, r4, r2
 80089ca:	4658      	mov	r0, fp
 80089cc:	4661      	mov	r1, ip
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	685b      	ldr	r3, [r3, #4]
 80089d2:	f04f 0400 	mov.w	r4, #0
 80089d6:	461a      	mov	r2, r3
 80089d8:	4623      	mov	r3, r4
 80089da:	f7f7 fcd1 	bl	8000380 <__aeabi_uldivmod>
 80089de:	4603      	mov	r3, r0
 80089e0:	460c      	mov	r4, r1
 80089e2:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80089e4:	e122      	b.n	8008c2c <UART_SetConfig+0x13ac>
 80089e6:	bf00      	nop
 80089e8:	51615500 	.word	0x51615500
 80089ec:	00000000 	.word	0x00000000
 80089f0:	a2c2aa00 	.word	0xa2c2aa00
 80089f4:	00000000 	.word	0x00000000
 80089f8:	58024400 	.word	0x58024400
 80089fc:	03d09000 	.word	0x03d09000
 8008a00:	d0900000 	.word	0xd0900000
 8008a04:	07a12000 	.word	0x07a12000
 8008a08:	0f424000 	.word	0x0f424000
 8008a0c:	1e848000 	.word	0x1e848000
 8008a10:	3d090000 	.word	0x3d090000
 8008a14:	61a80000 	.word	0x61a80000
 8008a18:	7a120000 	.word	0x7a120000
 8008a1c:	f4240000 	.word	0xf4240000
 8008a20:	e8480000 	.word	0xe8480000
          case UART_CLOCKSOURCE_CSI:
            usartdiv = (uint32_t)(UART_DIV_LPUART(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d05b      	beq.n	8008ae4 <UART_SetConfig+0x1264>
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a30:	2b01      	cmp	r3, #1
 8008a32:	d053      	beq.n	8008adc <UART_SetConfig+0x125c>
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a38:	2b02      	cmp	r3, #2
 8008a3a:	d04b      	beq.n	8008ad4 <UART_SetConfig+0x1254>
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a40:	2b03      	cmp	r3, #3
 8008a42:	d043      	beq.n	8008acc <UART_SetConfig+0x124c>
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a48:	2b04      	cmp	r3, #4
 8008a4a:	d03b      	beq.n	8008ac4 <UART_SetConfig+0x1244>
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a50:	2b05      	cmp	r3, #5
 8008a52:	d033      	beq.n	8008abc <UART_SetConfig+0x123c>
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a58:	2b06      	cmp	r3, #6
 8008a5a:	d02b      	beq.n	8008ab4 <UART_SetConfig+0x1234>
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a60:	2b07      	cmp	r3, #7
 8008a62:	d023      	beq.n	8008aac <UART_SetConfig+0x122c>
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a68:	2b08      	cmp	r3, #8
 8008a6a:	d01b      	beq.n	8008aa4 <UART_SetConfig+0x1224>
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a70:	2b09      	cmp	r3, #9
 8008a72:	d013      	beq.n	8008a9c <UART_SetConfig+0x121c>
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a78:	2b0a      	cmp	r3, #10
 8008a7a:	d00b      	beq.n	8008a94 <UART_SetConfig+0x1214>
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a80:	2b0b      	cmp	r3, #11
 8008a82:	d103      	bne.n	8008a8c <UART_SetConfig+0x120c>
 8008a84:	4bc0      	ldr	r3, [pc, #768]	; (8008d88 <UART_SetConfig+0x1508>)
 8008a86:	f04f 0400 	mov.w	r4, #0
 8008a8a:	e02e      	b.n	8008aea <UART_SetConfig+0x126a>
 8008a8c:	4bbf      	ldr	r3, [pc, #764]	; (8008d8c <UART_SetConfig+0x150c>)
 8008a8e:	f04f 0400 	mov.w	r4, #0
 8008a92:	e02a      	b.n	8008aea <UART_SetConfig+0x126a>
 8008a94:	4bbe      	ldr	r3, [pc, #760]	; (8008d90 <UART_SetConfig+0x1510>)
 8008a96:	f04f 0400 	mov.w	r4, #0
 8008a9a:	e026      	b.n	8008aea <UART_SetConfig+0x126a>
 8008a9c:	4bbd      	ldr	r3, [pc, #756]	; (8008d94 <UART_SetConfig+0x1514>)
 8008a9e:	f04f 0400 	mov.w	r4, #0
 8008aa2:	e022      	b.n	8008aea <UART_SetConfig+0x126a>
 8008aa4:	4bbc      	ldr	r3, [pc, #752]	; (8008d98 <UART_SetConfig+0x1518>)
 8008aa6:	f04f 0400 	mov.w	r4, #0
 8008aaa:	e01e      	b.n	8008aea <UART_SetConfig+0x126a>
 8008aac:	4bbb      	ldr	r3, [pc, #748]	; (8008d9c <UART_SetConfig+0x151c>)
 8008aae:	f04f 0400 	mov.w	r4, #0
 8008ab2:	e01a      	b.n	8008aea <UART_SetConfig+0x126a>
 8008ab4:	a4b0      	add	r4, pc, #704	; (adr r4, 8008d78 <UART_SetConfig+0x14f8>)
 8008ab6:	e9d4 3400 	ldrd	r3, r4, [r4]
 8008aba:	e016      	b.n	8008aea <UART_SetConfig+0x126a>
 8008abc:	4bb8      	ldr	r3, [pc, #736]	; (8008da0 <UART_SetConfig+0x1520>)
 8008abe:	f04f 0400 	mov.w	r4, #0
 8008ac2:	e012      	b.n	8008aea <UART_SetConfig+0x126a>
 8008ac4:	4bb7      	ldr	r3, [pc, #732]	; (8008da4 <UART_SetConfig+0x1524>)
 8008ac6:	f04f 0400 	mov.w	r4, #0
 8008aca:	e00e      	b.n	8008aea <UART_SetConfig+0x126a>
 8008acc:	a4ac      	add	r4, pc, #688	; (adr r4, 8008d80 <UART_SetConfig+0x1500>)
 8008ace:	e9d4 3400 	ldrd	r3, r4, [r4]
 8008ad2:	e00a      	b.n	8008aea <UART_SetConfig+0x126a>
 8008ad4:	4bb4      	ldr	r3, [pc, #720]	; (8008da8 <UART_SetConfig+0x1528>)
 8008ad6:	f04f 0400 	mov.w	r4, #0
 8008ada:	e006      	b.n	8008aea <UART_SetConfig+0x126a>
 8008adc:	4bb3      	ldr	r3, [pc, #716]	; (8008dac <UART_SetConfig+0x152c>)
 8008ade:	f04f 0400 	mov.w	r4, #0
 8008ae2:	e002      	b.n	8008aea <UART_SetConfig+0x126a>
 8008ae4:	4ba9      	ldr	r3, [pc, #676]	; (8008d8c <UART_SetConfig+0x150c>)
 8008ae6:	f04f 0400 	mov.w	r4, #0
 8008aea:	687a      	ldr	r2, [r7, #4]
 8008aec:	6852      	ldr	r2, [r2, #4]
 8008aee:	0852      	lsrs	r2, r2, #1
 8008af0:	4611      	mov	r1, r2
 8008af2:	f04f 0200 	mov.w	r2, #0
 8008af6:	eb13 0b01 	adds.w	fp, r3, r1
 8008afa:	eb44 0c02 	adc.w	ip, r4, r2
 8008afe:	4658      	mov	r0, fp
 8008b00:	4661      	mov	r1, ip
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	685b      	ldr	r3, [r3, #4]
 8008b06:	f04f 0400 	mov.w	r4, #0
 8008b0a:	461a      	mov	r2, r3
 8008b0c:	4623      	mov	r3, r4
 8008b0e:	f7f7 fc37 	bl	8000380 <__aeabi_uldivmod>
 8008b12:	4603      	mov	r3, r0
 8008b14:	460c      	mov	r4, r1
 8008b16:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8008b18:	e088      	b.n	8008c2c <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_LSE:
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d064      	beq.n	8008bec <UART_SetConfig+0x136c>
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b26:	2b01      	cmp	r3, #1
 8008b28:	d05b      	beq.n	8008be2 <UART_SetConfig+0x1362>
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b2e:	2b02      	cmp	r3, #2
 8008b30:	d052      	beq.n	8008bd8 <UART_SetConfig+0x1358>
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b36:	2b03      	cmp	r3, #3
 8008b38:	d04a      	beq.n	8008bd0 <UART_SetConfig+0x1350>
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b3e:	2b04      	cmp	r3, #4
 8008b40:	d041      	beq.n	8008bc6 <UART_SetConfig+0x1346>
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b46:	2b05      	cmp	r3, #5
 8008b48:	d039      	beq.n	8008bbe <UART_SetConfig+0x133e>
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b4e:	2b06      	cmp	r3, #6
 8008b50:	d031      	beq.n	8008bb6 <UART_SetConfig+0x1336>
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b56:	2b07      	cmp	r3, #7
 8008b58:	d028      	beq.n	8008bac <UART_SetConfig+0x132c>
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b5e:	2b08      	cmp	r3, #8
 8008b60:	d01f      	beq.n	8008ba2 <UART_SetConfig+0x1322>
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b66:	2b09      	cmp	r3, #9
 8008b68:	d016      	beq.n	8008b98 <UART_SetConfig+0x1318>
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b6e:	2b0a      	cmp	r3, #10
 8008b70:	d00d      	beq.n	8008b8e <UART_SetConfig+0x130e>
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b76:	2b0b      	cmp	r3, #11
 8008b78:	d104      	bne.n	8008b84 <UART_SetConfig+0x1304>
 8008b7a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008b7e:	f04f 0400 	mov.w	r4, #0
 8008b82:	e037      	b.n	8008bf4 <UART_SetConfig+0x1374>
 8008b84:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8008b88:	f04f 0400 	mov.w	r4, #0
 8008b8c:	e032      	b.n	8008bf4 <UART_SetConfig+0x1374>
 8008b8e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008b92:	f04f 0400 	mov.w	r4, #0
 8008b96:	e02d      	b.n	8008bf4 <UART_SetConfig+0x1374>
 8008b98:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008b9c:	f04f 0400 	mov.w	r4, #0
 8008ba0:	e028      	b.n	8008bf4 <UART_SetConfig+0x1374>
 8008ba2:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8008ba6:	f04f 0400 	mov.w	r4, #0
 8008baa:	e023      	b.n	8008bf4 <UART_SetConfig+0x1374>
 8008bac:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8008bb0:	f04f 0400 	mov.w	r4, #0
 8008bb4:	e01e      	b.n	8008bf4 <UART_SetConfig+0x1374>
 8008bb6:	4b7e      	ldr	r3, [pc, #504]	; (8008db0 <UART_SetConfig+0x1530>)
 8008bb8:	f04f 0400 	mov.w	r4, #0
 8008bbc:	e01a      	b.n	8008bf4 <UART_SetConfig+0x1374>
 8008bbe:	4b7d      	ldr	r3, [pc, #500]	; (8008db4 <UART_SetConfig+0x1534>)
 8008bc0:	f04f 0400 	mov.w	r4, #0
 8008bc4:	e016      	b.n	8008bf4 <UART_SetConfig+0x1374>
 8008bc6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008bca:	f04f 0400 	mov.w	r4, #0
 8008bce:	e011      	b.n	8008bf4 <UART_SetConfig+0x1374>
 8008bd0:	4b79      	ldr	r3, [pc, #484]	; (8008db8 <UART_SetConfig+0x1538>)
 8008bd2:	f04f 0400 	mov.w	r4, #0
 8008bd6:	e00d      	b.n	8008bf4 <UART_SetConfig+0x1374>
 8008bd8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8008bdc:	f04f 0400 	mov.w	r4, #0
 8008be0:	e008      	b.n	8008bf4 <UART_SetConfig+0x1374>
 8008be2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8008be6:	f04f 0400 	mov.w	r4, #0
 8008bea:	e003      	b.n	8008bf4 <UART_SetConfig+0x1374>
 8008bec:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8008bf0:	f04f 0400 	mov.w	r4, #0
 8008bf4:	687a      	ldr	r2, [r7, #4]
 8008bf6:	6852      	ldr	r2, [r2, #4]
 8008bf8:	0852      	lsrs	r2, r2, #1
 8008bfa:	4611      	mov	r1, r2
 8008bfc:	f04f 0200 	mov.w	r2, #0
 8008c00:	eb13 0b01 	adds.w	fp, r3, r1
 8008c04:	eb44 0c02 	adc.w	ip, r4, r2
 8008c08:	4658      	mov	r0, fp
 8008c0a:	4661      	mov	r1, ip
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	685b      	ldr	r3, [r3, #4]
 8008c10:	f04f 0400 	mov.w	r4, #0
 8008c14:	461a      	mov	r2, r3
 8008c16:	4623      	mov	r3, r4
 8008c18:	f7f7 fbb2 	bl	8000380 <__aeabi_uldivmod>
 8008c1c:	4603      	mov	r3, r0
 8008c1e:	460c      	mov	r4, r1
 8008c20:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8008c22:	e003      	b.n	8008c2c <UART_SetConfig+0x13ac>
          default:
            ret = HAL_ERROR;
 8008c24:	2301      	movs	r3, #1
 8008c26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            break;
 8008c2a:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008c2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c2e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008c32:	d309      	bcc.n	8008c48 <UART_SetConfig+0x13c8>
 8008c34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c36:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008c3a:	d205      	bcs.n	8008c48 <UART_SetConfig+0x13c8>
        {
          huart->Instance->BRR = usartdiv;
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008c42:	60da      	str	r2, [r3, #12]
 8008c44:	f000 bf85 	b.w	8009b52 <UART_SetConfig+0x22d2>
        }
        else
        {
          ret = HAL_ERROR;
 8008c48:	2301      	movs	r3, #1
 8008c4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008c4e:	f000 bf80 	b.w	8009b52 <UART_SetConfig+0x22d2>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	69db      	ldr	r3, [r3, #28]
 8008c56:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008c5a:	f040 83da 	bne.w	8009412 <UART_SetConfig+0x1b92>
  {
    switch (clocksource)
 8008c5e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8008c62:	2b40      	cmp	r3, #64	; 0x40
 8008c64:	f200 83b3 	bhi.w	80093ce <UART_SetConfig+0x1b4e>
 8008c68:	a201      	add	r2, pc, #4	; (adr r2, 8008c70 <UART_SetConfig+0x13f0>)
 8008c6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c6e:	bf00      	nop
 8008c70:	08008dbd 	.word	0x08008dbd
 8008c74:	08008e75 	.word	0x08008e75
 8008c78:	080093cf 	.word	0x080093cf
 8008c7c:	080093cf 	.word	0x080093cf
 8008c80:	08008f2d 	.word	0x08008f2d
 8008c84:	080093cf 	.word	0x080093cf
 8008c88:	080093cf 	.word	0x080093cf
 8008c8c:	080093cf 	.word	0x080093cf
 8008c90:	08008fe9 	.word	0x08008fe9
 8008c94:	080093cf 	.word	0x080093cf
 8008c98:	080093cf 	.word	0x080093cf
 8008c9c:	080093cf 	.word	0x080093cf
 8008ca0:	080093cf 	.word	0x080093cf
 8008ca4:	080093cf 	.word	0x080093cf
 8008ca8:	080093cf 	.word	0x080093cf
 8008cac:	080093cf 	.word	0x080093cf
 8008cb0:	080090a5 	.word	0x080090a5
 8008cb4:	080093cf 	.word	0x080093cf
 8008cb8:	080093cf 	.word	0x080093cf
 8008cbc:	080093cf 	.word	0x080093cf
 8008cc0:	080093cf 	.word	0x080093cf
 8008cc4:	080093cf 	.word	0x080093cf
 8008cc8:	080093cf 	.word	0x080093cf
 8008ccc:	080093cf 	.word	0x080093cf
 8008cd0:	080093cf 	.word	0x080093cf
 8008cd4:	080093cf 	.word	0x080093cf
 8008cd8:	080093cf 	.word	0x080093cf
 8008cdc:	080093cf 	.word	0x080093cf
 8008ce0:	080093cf 	.word	0x080093cf
 8008ce4:	080093cf 	.word	0x080093cf
 8008ce8:	080093cf 	.word	0x080093cf
 8008cec:	080093cf 	.word	0x080093cf
 8008cf0:	08009217 	.word	0x08009217
 8008cf4:	080093cf 	.word	0x080093cf
 8008cf8:	080093cf 	.word	0x080093cf
 8008cfc:	080093cf 	.word	0x080093cf
 8008d00:	080093cf 	.word	0x080093cf
 8008d04:	080093cf 	.word	0x080093cf
 8008d08:	080093cf 	.word	0x080093cf
 8008d0c:	080093cf 	.word	0x080093cf
 8008d10:	080093cf 	.word	0x080093cf
 8008d14:	080093cf 	.word	0x080093cf
 8008d18:	080093cf 	.word	0x080093cf
 8008d1c:	080093cf 	.word	0x080093cf
 8008d20:	080093cf 	.word	0x080093cf
 8008d24:	080093cf 	.word	0x080093cf
 8008d28:	080093cf 	.word	0x080093cf
 8008d2c:	080093cf 	.word	0x080093cf
 8008d30:	080093cf 	.word	0x080093cf
 8008d34:	080093cf 	.word	0x080093cf
 8008d38:	080093cf 	.word	0x080093cf
 8008d3c:	080093cf 	.word	0x080093cf
 8008d40:	080093cf 	.word	0x080093cf
 8008d44:	080093cf 	.word	0x080093cf
 8008d48:	080093cf 	.word	0x080093cf
 8008d4c:	080093cf 	.word	0x080093cf
 8008d50:	080093cf 	.word	0x080093cf
 8008d54:	080093cf 	.word	0x080093cf
 8008d58:	080093cf 	.word	0x080093cf
 8008d5c:	080093cf 	.word	0x080093cf
 8008d60:	080093cf 	.word	0x080093cf
 8008d64:	080093cf 	.word	0x080093cf
 8008d68:	080093cf 	.word	0x080093cf
 8008d6c:	080093cf 	.word	0x080093cf
 8008d70:	0800930d 	.word	0x0800930d
 8008d74:	f3af 8000 	nop.w
 8008d78:	05161500 	.word	0x05161500
 8008d7c:	00000000 	.word	0x00000000
 8008d80:	0a2c2a00 	.word	0x0a2c2a00
 8008d84:	00000000 	.word	0x00000000
 8008d88:	003d0900 	.word	0x003d0900
 8008d8c:	3d090000 	.word	0x3d090000
 8008d90:	007a1200 	.word	0x007a1200
 8008d94:	00f42400 	.word	0x00f42400
 8008d98:	01e84800 	.word	0x01e84800
 8008d9c:	03d09000 	.word	0x03d09000
 8008da0:	061a8000 	.word	0x061a8000
 8008da4:	07a12000 	.word	0x07a12000
 8008da8:	0f424000 	.word	0x0f424000
 8008dac:	1e848000 	.word	0x1e848000
 8008db0:	000aaa00 	.word	0x000aaa00
 8008db4:	000ccc00 	.word	0x000ccc00
 8008db8:	00155500 	.word	0x00155500
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008dbc:	f7fb f928 	bl	8004010 <HAL_RCC_GetPCLK1Freq>
 8008dc0:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d044      	beq.n	8008e54 <UART_SetConfig+0x15d4>
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dce:	2b01      	cmp	r3, #1
 8008dd0:	d03e      	beq.n	8008e50 <UART_SetConfig+0x15d0>
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dd6:	2b02      	cmp	r3, #2
 8008dd8:	d038      	beq.n	8008e4c <UART_SetConfig+0x15cc>
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dde:	2b03      	cmp	r3, #3
 8008de0:	d032      	beq.n	8008e48 <UART_SetConfig+0x15c8>
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008de6:	2b04      	cmp	r3, #4
 8008de8:	d02c      	beq.n	8008e44 <UART_SetConfig+0x15c4>
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dee:	2b05      	cmp	r3, #5
 8008df0:	d026      	beq.n	8008e40 <UART_SetConfig+0x15c0>
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008df6:	2b06      	cmp	r3, #6
 8008df8:	d020      	beq.n	8008e3c <UART_SetConfig+0x15bc>
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dfe:	2b07      	cmp	r3, #7
 8008e00:	d01a      	beq.n	8008e38 <UART_SetConfig+0x15b8>
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e06:	2b08      	cmp	r3, #8
 8008e08:	d014      	beq.n	8008e34 <UART_SetConfig+0x15b4>
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e0e:	2b09      	cmp	r3, #9
 8008e10:	d00e      	beq.n	8008e30 <UART_SetConfig+0x15b0>
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e16:	2b0a      	cmp	r3, #10
 8008e18:	d008      	beq.n	8008e2c <UART_SetConfig+0x15ac>
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e1e:	2b0b      	cmp	r3, #11
 8008e20:	d102      	bne.n	8008e28 <UART_SetConfig+0x15a8>
 8008e22:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008e26:	e016      	b.n	8008e56 <UART_SetConfig+0x15d6>
 8008e28:	2301      	movs	r3, #1
 8008e2a:	e014      	b.n	8008e56 <UART_SetConfig+0x15d6>
 8008e2c:	2380      	movs	r3, #128	; 0x80
 8008e2e:	e012      	b.n	8008e56 <UART_SetConfig+0x15d6>
 8008e30:	2340      	movs	r3, #64	; 0x40
 8008e32:	e010      	b.n	8008e56 <UART_SetConfig+0x15d6>
 8008e34:	2320      	movs	r3, #32
 8008e36:	e00e      	b.n	8008e56 <UART_SetConfig+0x15d6>
 8008e38:	2310      	movs	r3, #16
 8008e3a:	e00c      	b.n	8008e56 <UART_SetConfig+0x15d6>
 8008e3c:	230c      	movs	r3, #12
 8008e3e:	e00a      	b.n	8008e56 <UART_SetConfig+0x15d6>
 8008e40:	230a      	movs	r3, #10
 8008e42:	e008      	b.n	8008e56 <UART_SetConfig+0x15d6>
 8008e44:	2308      	movs	r3, #8
 8008e46:	e006      	b.n	8008e56 <UART_SetConfig+0x15d6>
 8008e48:	2306      	movs	r3, #6
 8008e4a:	e004      	b.n	8008e56 <UART_SetConfig+0x15d6>
 8008e4c:	2304      	movs	r3, #4
 8008e4e:	e002      	b.n	8008e56 <UART_SetConfig+0x15d6>
 8008e50:	2302      	movs	r3, #2
 8008e52:	e000      	b.n	8008e56 <UART_SetConfig+0x15d6>
 8008e54:	2301      	movs	r3, #1
 8008e56:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008e58:	fbb2 f3f3 	udiv	r3, r2, r3
 8008e5c:	005a      	lsls	r2, r3, #1
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	685b      	ldr	r3, [r3, #4]
 8008e62:	085b      	lsrs	r3, r3, #1
 8008e64:	441a      	add	r2, r3
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	685b      	ldr	r3, [r3, #4]
 8008e6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8008e6e:	b29b      	uxth	r3, r3
 8008e70:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008e72:	e2b0      	b.n	80093d6 <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008e74:	f7fb f8e2 	bl	800403c <HAL_RCC_GetPCLK2Freq>
 8008e78:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d044      	beq.n	8008f0c <UART_SetConfig+0x168c>
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e86:	2b01      	cmp	r3, #1
 8008e88:	d03e      	beq.n	8008f08 <UART_SetConfig+0x1688>
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e8e:	2b02      	cmp	r3, #2
 8008e90:	d038      	beq.n	8008f04 <UART_SetConfig+0x1684>
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e96:	2b03      	cmp	r3, #3
 8008e98:	d032      	beq.n	8008f00 <UART_SetConfig+0x1680>
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e9e:	2b04      	cmp	r3, #4
 8008ea0:	d02c      	beq.n	8008efc <UART_SetConfig+0x167c>
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ea6:	2b05      	cmp	r3, #5
 8008ea8:	d026      	beq.n	8008ef8 <UART_SetConfig+0x1678>
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008eae:	2b06      	cmp	r3, #6
 8008eb0:	d020      	beq.n	8008ef4 <UART_SetConfig+0x1674>
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008eb6:	2b07      	cmp	r3, #7
 8008eb8:	d01a      	beq.n	8008ef0 <UART_SetConfig+0x1670>
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ebe:	2b08      	cmp	r3, #8
 8008ec0:	d014      	beq.n	8008eec <UART_SetConfig+0x166c>
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ec6:	2b09      	cmp	r3, #9
 8008ec8:	d00e      	beq.n	8008ee8 <UART_SetConfig+0x1668>
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ece:	2b0a      	cmp	r3, #10
 8008ed0:	d008      	beq.n	8008ee4 <UART_SetConfig+0x1664>
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ed6:	2b0b      	cmp	r3, #11
 8008ed8:	d102      	bne.n	8008ee0 <UART_SetConfig+0x1660>
 8008eda:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008ede:	e016      	b.n	8008f0e <UART_SetConfig+0x168e>
 8008ee0:	2301      	movs	r3, #1
 8008ee2:	e014      	b.n	8008f0e <UART_SetConfig+0x168e>
 8008ee4:	2380      	movs	r3, #128	; 0x80
 8008ee6:	e012      	b.n	8008f0e <UART_SetConfig+0x168e>
 8008ee8:	2340      	movs	r3, #64	; 0x40
 8008eea:	e010      	b.n	8008f0e <UART_SetConfig+0x168e>
 8008eec:	2320      	movs	r3, #32
 8008eee:	e00e      	b.n	8008f0e <UART_SetConfig+0x168e>
 8008ef0:	2310      	movs	r3, #16
 8008ef2:	e00c      	b.n	8008f0e <UART_SetConfig+0x168e>
 8008ef4:	230c      	movs	r3, #12
 8008ef6:	e00a      	b.n	8008f0e <UART_SetConfig+0x168e>
 8008ef8:	230a      	movs	r3, #10
 8008efa:	e008      	b.n	8008f0e <UART_SetConfig+0x168e>
 8008efc:	2308      	movs	r3, #8
 8008efe:	e006      	b.n	8008f0e <UART_SetConfig+0x168e>
 8008f00:	2306      	movs	r3, #6
 8008f02:	e004      	b.n	8008f0e <UART_SetConfig+0x168e>
 8008f04:	2304      	movs	r3, #4
 8008f06:	e002      	b.n	8008f0e <UART_SetConfig+0x168e>
 8008f08:	2302      	movs	r3, #2
 8008f0a:	e000      	b.n	8008f0e <UART_SetConfig+0x168e>
 8008f0c:	2301      	movs	r3, #1
 8008f0e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008f10:	fbb2 f3f3 	udiv	r3, r2, r3
 8008f14:	005a      	lsls	r2, r3, #1
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	685b      	ldr	r3, [r3, #4]
 8008f1a:	085b      	lsrs	r3, r3, #1
 8008f1c:	441a      	add	r2, r3
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	685b      	ldr	r3, [r3, #4]
 8008f22:	fbb2 f3f3 	udiv	r3, r2, r3
 8008f26:	b29b      	uxth	r3, r3
 8008f28:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008f2a:	e254      	b.n	80093d6 <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008f2c:	f107 0318 	add.w	r3, r7, #24
 8008f30:	4618      	mov	r0, r3
 8008f32:	f7fc f9d5 	bl	80052e0 <HAL_RCCEx_GetPLL2ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008f36:	69fa      	ldr	r2, [r7, #28]
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d044      	beq.n	8008fca <UART_SetConfig+0x174a>
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f44:	2b01      	cmp	r3, #1
 8008f46:	d03e      	beq.n	8008fc6 <UART_SetConfig+0x1746>
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f4c:	2b02      	cmp	r3, #2
 8008f4e:	d038      	beq.n	8008fc2 <UART_SetConfig+0x1742>
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f54:	2b03      	cmp	r3, #3
 8008f56:	d032      	beq.n	8008fbe <UART_SetConfig+0x173e>
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f5c:	2b04      	cmp	r3, #4
 8008f5e:	d02c      	beq.n	8008fba <UART_SetConfig+0x173a>
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f64:	2b05      	cmp	r3, #5
 8008f66:	d026      	beq.n	8008fb6 <UART_SetConfig+0x1736>
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f6c:	2b06      	cmp	r3, #6
 8008f6e:	d020      	beq.n	8008fb2 <UART_SetConfig+0x1732>
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f74:	2b07      	cmp	r3, #7
 8008f76:	d01a      	beq.n	8008fae <UART_SetConfig+0x172e>
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f7c:	2b08      	cmp	r3, #8
 8008f7e:	d014      	beq.n	8008faa <UART_SetConfig+0x172a>
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f84:	2b09      	cmp	r3, #9
 8008f86:	d00e      	beq.n	8008fa6 <UART_SetConfig+0x1726>
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f8c:	2b0a      	cmp	r3, #10
 8008f8e:	d008      	beq.n	8008fa2 <UART_SetConfig+0x1722>
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f94:	2b0b      	cmp	r3, #11
 8008f96:	d102      	bne.n	8008f9e <UART_SetConfig+0x171e>
 8008f98:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008f9c:	e016      	b.n	8008fcc <UART_SetConfig+0x174c>
 8008f9e:	2301      	movs	r3, #1
 8008fa0:	e014      	b.n	8008fcc <UART_SetConfig+0x174c>
 8008fa2:	2380      	movs	r3, #128	; 0x80
 8008fa4:	e012      	b.n	8008fcc <UART_SetConfig+0x174c>
 8008fa6:	2340      	movs	r3, #64	; 0x40
 8008fa8:	e010      	b.n	8008fcc <UART_SetConfig+0x174c>
 8008faa:	2320      	movs	r3, #32
 8008fac:	e00e      	b.n	8008fcc <UART_SetConfig+0x174c>
 8008fae:	2310      	movs	r3, #16
 8008fb0:	e00c      	b.n	8008fcc <UART_SetConfig+0x174c>
 8008fb2:	230c      	movs	r3, #12
 8008fb4:	e00a      	b.n	8008fcc <UART_SetConfig+0x174c>
 8008fb6:	230a      	movs	r3, #10
 8008fb8:	e008      	b.n	8008fcc <UART_SetConfig+0x174c>
 8008fba:	2308      	movs	r3, #8
 8008fbc:	e006      	b.n	8008fcc <UART_SetConfig+0x174c>
 8008fbe:	2306      	movs	r3, #6
 8008fc0:	e004      	b.n	8008fcc <UART_SetConfig+0x174c>
 8008fc2:	2304      	movs	r3, #4
 8008fc4:	e002      	b.n	8008fcc <UART_SetConfig+0x174c>
 8008fc6:	2302      	movs	r3, #2
 8008fc8:	e000      	b.n	8008fcc <UART_SetConfig+0x174c>
 8008fca:	2301      	movs	r3, #1
 8008fcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8008fd0:	005a      	lsls	r2, r3, #1
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	685b      	ldr	r3, [r3, #4]
 8008fd6:	085b      	lsrs	r3, r3, #1
 8008fd8:	441a      	add	r2, r3
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	685b      	ldr	r3, [r3, #4]
 8008fde:	fbb2 f3f3 	udiv	r3, r2, r3
 8008fe2:	b29b      	uxth	r3, r3
 8008fe4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008fe6:	e1f6      	b.n	80093d6 <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008fe8:	f107 030c 	add.w	r3, r7, #12
 8008fec:	4618      	mov	r0, r3
 8008fee:	f7fc fac3 	bl	8005578 <HAL_RCCEx_GetPLL3ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008ff2:	693a      	ldr	r2, [r7, #16]
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d044      	beq.n	8009086 <UART_SetConfig+0x1806>
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009000:	2b01      	cmp	r3, #1
 8009002:	d03e      	beq.n	8009082 <UART_SetConfig+0x1802>
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009008:	2b02      	cmp	r3, #2
 800900a:	d038      	beq.n	800907e <UART_SetConfig+0x17fe>
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009010:	2b03      	cmp	r3, #3
 8009012:	d032      	beq.n	800907a <UART_SetConfig+0x17fa>
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009018:	2b04      	cmp	r3, #4
 800901a:	d02c      	beq.n	8009076 <UART_SetConfig+0x17f6>
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009020:	2b05      	cmp	r3, #5
 8009022:	d026      	beq.n	8009072 <UART_SetConfig+0x17f2>
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009028:	2b06      	cmp	r3, #6
 800902a:	d020      	beq.n	800906e <UART_SetConfig+0x17ee>
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009030:	2b07      	cmp	r3, #7
 8009032:	d01a      	beq.n	800906a <UART_SetConfig+0x17ea>
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009038:	2b08      	cmp	r3, #8
 800903a:	d014      	beq.n	8009066 <UART_SetConfig+0x17e6>
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009040:	2b09      	cmp	r3, #9
 8009042:	d00e      	beq.n	8009062 <UART_SetConfig+0x17e2>
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009048:	2b0a      	cmp	r3, #10
 800904a:	d008      	beq.n	800905e <UART_SetConfig+0x17de>
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009050:	2b0b      	cmp	r3, #11
 8009052:	d102      	bne.n	800905a <UART_SetConfig+0x17da>
 8009054:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009058:	e016      	b.n	8009088 <UART_SetConfig+0x1808>
 800905a:	2301      	movs	r3, #1
 800905c:	e014      	b.n	8009088 <UART_SetConfig+0x1808>
 800905e:	2380      	movs	r3, #128	; 0x80
 8009060:	e012      	b.n	8009088 <UART_SetConfig+0x1808>
 8009062:	2340      	movs	r3, #64	; 0x40
 8009064:	e010      	b.n	8009088 <UART_SetConfig+0x1808>
 8009066:	2320      	movs	r3, #32
 8009068:	e00e      	b.n	8009088 <UART_SetConfig+0x1808>
 800906a:	2310      	movs	r3, #16
 800906c:	e00c      	b.n	8009088 <UART_SetConfig+0x1808>
 800906e:	230c      	movs	r3, #12
 8009070:	e00a      	b.n	8009088 <UART_SetConfig+0x1808>
 8009072:	230a      	movs	r3, #10
 8009074:	e008      	b.n	8009088 <UART_SetConfig+0x1808>
 8009076:	2308      	movs	r3, #8
 8009078:	e006      	b.n	8009088 <UART_SetConfig+0x1808>
 800907a:	2306      	movs	r3, #6
 800907c:	e004      	b.n	8009088 <UART_SetConfig+0x1808>
 800907e:	2304      	movs	r3, #4
 8009080:	e002      	b.n	8009088 <UART_SetConfig+0x1808>
 8009082:	2302      	movs	r3, #2
 8009084:	e000      	b.n	8009088 <UART_SetConfig+0x1808>
 8009086:	2301      	movs	r3, #1
 8009088:	fbb2 f3f3 	udiv	r3, r2, r3
 800908c:	005a      	lsls	r2, r3, #1
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	685b      	ldr	r3, [r3, #4]
 8009092:	085b      	lsrs	r3, r3, #1
 8009094:	441a      	add	r2, r3
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	685b      	ldr	r3, [r3, #4]
 800909a:	fbb2 f3f3 	udiv	r3, r2, r3
 800909e:	b29b      	uxth	r3, r3
 80090a0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80090a2:	e198      	b.n	80093d6 <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80090a4:	4b87      	ldr	r3, [pc, #540]	; (80092c4 <UART_SetConfig+0x1a44>)
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	f003 0320 	and.w	r3, r3, #32
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d05e      	beq.n	800916e <UART_SetConfig+0x18ee>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80090b0:	4b84      	ldr	r3, [pc, #528]	; (80092c4 <UART_SetConfig+0x1a44>)
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	08db      	lsrs	r3, r3, #3
 80090b6:	f003 0303 	and.w	r3, r3, #3
 80090ba:	4a83      	ldr	r2, [pc, #524]	; (80092c8 <UART_SetConfig+0x1a48>)
 80090bc:	40da      	lsrs	r2, r3
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d044      	beq.n	8009150 <UART_SetConfig+0x18d0>
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090ca:	2b01      	cmp	r3, #1
 80090cc:	d03e      	beq.n	800914c <UART_SetConfig+0x18cc>
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090d2:	2b02      	cmp	r3, #2
 80090d4:	d038      	beq.n	8009148 <UART_SetConfig+0x18c8>
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090da:	2b03      	cmp	r3, #3
 80090dc:	d032      	beq.n	8009144 <UART_SetConfig+0x18c4>
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090e2:	2b04      	cmp	r3, #4
 80090e4:	d02c      	beq.n	8009140 <UART_SetConfig+0x18c0>
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090ea:	2b05      	cmp	r3, #5
 80090ec:	d026      	beq.n	800913c <UART_SetConfig+0x18bc>
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090f2:	2b06      	cmp	r3, #6
 80090f4:	d020      	beq.n	8009138 <UART_SetConfig+0x18b8>
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090fa:	2b07      	cmp	r3, #7
 80090fc:	d01a      	beq.n	8009134 <UART_SetConfig+0x18b4>
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009102:	2b08      	cmp	r3, #8
 8009104:	d014      	beq.n	8009130 <UART_SetConfig+0x18b0>
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800910a:	2b09      	cmp	r3, #9
 800910c:	d00e      	beq.n	800912c <UART_SetConfig+0x18ac>
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009112:	2b0a      	cmp	r3, #10
 8009114:	d008      	beq.n	8009128 <UART_SetConfig+0x18a8>
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800911a:	2b0b      	cmp	r3, #11
 800911c:	d102      	bne.n	8009124 <UART_SetConfig+0x18a4>
 800911e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009122:	e016      	b.n	8009152 <UART_SetConfig+0x18d2>
 8009124:	2301      	movs	r3, #1
 8009126:	e014      	b.n	8009152 <UART_SetConfig+0x18d2>
 8009128:	2380      	movs	r3, #128	; 0x80
 800912a:	e012      	b.n	8009152 <UART_SetConfig+0x18d2>
 800912c:	2340      	movs	r3, #64	; 0x40
 800912e:	e010      	b.n	8009152 <UART_SetConfig+0x18d2>
 8009130:	2320      	movs	r3, #32
 8009132:	e00e      	b.n	8009152 <UART_SetConfig+0x18d2>
 8009134:	2310      	movs	r3, #16
 8009136:	e00c      	b.n	8009152 <UART_SetConfig+0x18d2>
 8009138:	230c      	movs	r3, #12
 800913a:	e00a      	b.n	8009152 <UART_SetConfig+0x18d2>
 800913c:	230a      	movs	r3, #10
 800913e:	e008      	b.n	8009152 <UART_SetConfig+0x18d2>
 8009140:	2308      	movs	r3, #8
 8009142:	e006      	b.n	8009152 <UART_SetConfig+0x18d2>
 8009144:	2306      	movs	r3, #6
 8009146:	e004      	b.n	8009152 <UART_SetConfig+0x18d2>
 8009148:	2304      	movs	r3, #4
 800914a:	e002      	b.n	8009152 <UART_SetConfig+0x18d2>
 800914c:	2302      	movs	r3, #2
 800914e:	e000      	b.n	8009152 <UART_SetConfig+0x18d2>
 8009150:	2301      	movs	r3, #1
 8009152:	fbb2 f3f3 	udiv	r3, r2, r3
 8009156:	005a      	lsls	r2, r3, #1
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	685b      	ldr	r3, [r3, #4]
 800915c:	085b      	lsrs	r3, r3, #1
 800915e:	441a      	add	r2, r3
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	685b      	ldr	r3, [r3, #4]
 8009164:	fbb2 f3f3 	udiv	r3, r2, r3
 8009168:	b29b      	uxth	r3, r3
 800916a:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
        }
        break;
 800916c:	e133      	b.n	80093d6 <UART_SetConfig+0x1b56>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009172:	2b00      	cmp	r3, #0
 8009174:	d043      	beq.n	80091fe <UART_SetConfig+0x197e>
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800917a:	2b01      	cmp	r3, #1
 800917c:	d03d      	beq.n	80091fa <UART_SetConfig+0x197a>
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009182:	2b02      	cmp	r3, #2
 8009184:	d037      	beq.n	80091f6 <UART_SetConfig+0x1976>
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800918a:	2b03      	cmp	r3, #3
 800918c:	d031      	beq.n	80091f2 <UART_SetConfig+0x1972>
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009192:	2b04      	cmp	r3, #4
 8009194:	d02b      	beq.n	80091ee <UART_SetConfig+0x196e>
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800919a:	2b05      	cmp	r3, #5
 800919c:	d025      	beq.n	80091ea <UART_SetConfig+0x196a>
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091a2:	2b06      	cmp	r3, #6
 80091a4:	d01f      	beq.n	80091e6 <UART_SetConfig+0x1966>
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091aa:	2b07      	cmp	r3, #7
 80091ac:	d019      	beq.n	80091e2 <UART_SetConfig+0x1962>
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091b2:	2b08      	cmp	r3, #8
 80091b4:	d013      	beq.n	80091de <UART_SetConfig+0x195e>
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091ba:	2b09      	cmp	r3, #9
 80091bc:	d00d      	beq.n	80091da <UART_SetConfig+0x195a>
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091c2:	2b0a      	cmp	r3, #10
 80091c4:	d007      	beq.n	80091d6 <UART_SetConfig+0x1956>
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091ca:	2b0b      	cmp	r3, #11
 80091cc:	d101      	bne.n	80091d2 <UART_SetConfig+0x1952>
 80091ce:	4b3f      	ldr	r3, [pc, #252]	; (80092cc <UART_SetConfig+0x1a4c>)
 80091d0:	e016      	b.n	8009200 <UART_SetConfig+0x1980>
 80091d2:	4b3f      	ldr	r3, [pc, #252]	; (80092d0 <UART_SetConfig+0x1a50>)
 80091d4:	e014      	b.n	8009200 <UART_SetConfig+0x1980>
 80091d6:	4b3f      	ldr	r3, [pc, #252]	; (80092d4 <UART_SetConfig+0x1a54>)
 80091d8:	e012      	b.n	8009200 <UART_SetConfig+0x1980>
 80091da:	4b3f      	ldr	r3, [pc, #252]	; (80092d8 <UART_SetConfig+0x1a58>)
 80091dc:	e010      	b.n	8009200 <UART_SetConfig+0x1980>
 80091de:	4b3f      	ldr	r3, [pc, #252]	; (80092dc <UART_SetConfig+0x1a5c>)
 80091e0:	e00e      	b.n	8009200 <UART_SetConfig+0x1980>
 80091e2:	4b3f      	ldr	r3, [pc, #252]	; (80092e0 <UART_SetConfig+0x1a60>)
 80091e4:	e00c      	b.n	8009200 <UART_SetConfig+0x1980>
 80091e6:	4b3f      	ldr	r3, [pc, #252]	; (80092e4 <UART_SetConfig+0x1a64>)
 80091e8:	e00a      	b.n	8009200 <UART_SetConfig+0x1980>
 80091ea:	4b3f      	ldr	r3, [pc, #252]	; (80092e8 <UART_SetConfig+0x1a68>)
 80091ec:	e008      	b.n	8009200 <UART_SetConfig+0x1980>
 80091ee:	4b3f      	ldr	r3, [pc, #252]	; (80092ec <UART_SetConfig+0x1a6c>)
 80091f0:	e006      	b.n	8009200 <UART_SetConfig+0x1980>
 80091f2:	4b3f      	ldr	r3, [pc, #252]	; (80092f0 <UART_SetConfig+0x1a70>)
 80091f4:	e004      	b.n	8009200 <UART_SetConfig+0x1980>
 80091f6:	4b3f      	ldr	r3, [pc, #252]	; (80092f4 <UART_SetConfig+0x1a74>)
 80091f8:	e002      	b.n	8009200 <UART_SetConfig+0x1980>
 80091fa:	4b33      	ldr	r3, [pc, #204]	; (80092c8 <UART_SetConfig+0x1a48>)
 80091fc:	e000      	b.n	8009200 <UART_SetConfig+0x1980>
 80091fe:	4b34      	ldr	r3, [pc, #208]	; (80092d0 <UART_SetConfig+0x1a50>)
 8009200:	687a      	ldr	r2, [r7, #4]
 8009202:	6852      	ldr	r2, [r2, #4]
 8009204:	0852      	lsrs	r2, r2, #1
 8009206:	441a      	add	r2, r3
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	685b      	ldr	r3, [r3, #4]
 800920c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009210:	b29b      	uxth	r3, r3
 8009212:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009214:	e0df      	b.n	80093d6 <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_CSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800921a:	2b00      	cmp	r3, #0
 800921c:	d045      	beq.n	80092aa <UART_SetConfig+0x1a2a>
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009222:	2b01      	cmp	r3, #1
 8009224:	d03f      	beq.n	80092a6 <UART_SetConfig+0x1a26>
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800922a:	2b02      	cmp	r3, #2
 800922c:	d039      	beq.n	80092a2 <UART_SetConfig+0x1a22>
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009232:	2b03      	cmp	r3, #3
 8009234:	d033      	beq.n	800929e <UART_SetConfig+0x1a1e>
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800923a:	2b04      	cmp	r3, #4
 800923c:	d02d      	beq.n	800929a <UART_SetConfig+0x1a1a>
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009242:	2b05      	cmp	r3, #5
 8009244:	d027      	beq.n	8009296 <UART_SetConfig+0x1a16>
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800924a:	2b06      	cmp	r3, #6
 800924c:	d021      	beq.n	8009292 <UART_SetConfig+0x1a12>
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009252:	2b07      	cmp	r3, #7
 8009254:	d01b      	beq.n	800928e <UART_SetConfig+0x1a0e>
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800925a:	2b08      	cmp	r3, #8
 800925c:	d015      	beq.n	800928a <UART_SetConfig+0x1a0a>
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009262:	2b09      	cmp	r3, #9
 8009264:	d00f      	beq.n	8009286 <UART_SetConfig+0x1a06>
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800926a:	2b0a      	cmp	r3, #10
 800926c:	d008      	beq.n	8009280 <UART_SetConfig+0x1a00>
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009272:	2b0b      	cmp	r3, #11
 8009274:	d102      	bne.n	800927c <UART_SetConfig+0x19fc>
 8009276:	f647 2312 	movw	r3, #31250	; 0x7a12
 800927a:	e017      	b.n	80092ac <UART_SetConfig+0x1a2c>
 800927c:	4b18      	ldr	r3, [pc, #96]	; (80092e0 <UART_SetConfig+0x1a60>)
 800927e:	e015      	b.n	80092ac <UART_SetConfig+0x1a2c>
 8009280:	f24f 4324 	movw	r3, #62500	; 0xf424
 8009284:	e012      	b.n	80092ac <UART_SetConfig+0x1a2c>
 8009286:	4b1c      	ldr	r3, [pc, #112]	; (80092f8 <UART_SetConfig+0x1a78>)
 8009288:	e010      	b.n	80092ac <UART_SetConfig+0x1a2c>
 800928a:	4b1c      	ldr	r3, [pc, #112]	; (80092fc <UART_SetConfig+0x1a7c>)
 800928c:	e00e      	b.n	80092ac <UART_SetConfig+0x1a2c>
 800928e:	4b0f      	ldr	r3, [pc, #60]	; (80092cc <UART_SetConfig+0x1a4c>)
 8009290:	e00c      	b.n	80092ac <UART_SetConfig+0x1a2c>
 8009292:	4b1b      	ldr	r3, [pc, #108]	; (8009300 <UART_SetConfig+0x1a80>)
 8009294:	e00a      	b.n	80092ac <UART_SetConfig+0x1a2c>
 8009296:	4b1b      	ldr	r3, [pc, #108]	; (8009304 <UART_SetConfig+0x1a84>)
 8009298:	e008      	b.n	80092ac <UART_SetConfig+0x1a2c>
 800929a:	4b0e      	ldr	r3, [pc, #56]	; (80092d4 <UART_SetConfig+0x1a54>)
 800929c:	e006      	b.n	80092ac <UART_SetConfig+0x1a2c>
 800929e:	4b1a      	ldr	r3, [pc, #104]	; (8009308 <UART_SetConfig+0x1a88>)
 80092a0:	e004      	b.n	80092ac <UART_SetConfig+0x1a2c>
 80092a2:	4b0d      	ldr	r3, [pc, #52]	; (80092d8 <UART_SetConfig+0x1a58>)
 80092a4:	e002      	b.n	80092ac <UART_SetConfig+0x1a2c>
 80092a6:	4b0d      	ldr	r3, [pc, #52]	; (80092dc <UART_SetConfig+0x1a5c>)
 80092a8:	e000      	b.n	80092ac <UART_SetConfig+0x1a2c>
 80092aa:	4b0d      	ldr	r3, [pc, #52]	; (80092e0 <UART_SetConfig+0x1a60>)
 80092ac:	687a      	ldr	r2, [r7, #4]
 80092ae:	6852      	ldr	r2, [r2, #4]
 80092b0:	0852      	lsrs	r2, r2, #1
 80092b2:	441a      	add	r2, r3
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	685b      	ldr	r3, [r3, #4]
 80092b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80092bc:	b29b      	uxth	r3, r3
 80092be:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80092c0:	e089      	b.n	80093d6 <UART_SetConfig+0x1b56>
 80092c2:	bf00      	nop
 80092c4:	58024400 	.word	0x58024400
 80092c8:	03d09000 	.word	0x03d09000
 80092cc:	0007a120 	.word	0x0007a120
 80092d0:	07a12000 	.word	0x07a12000
 80092d4:	000f4240 	.word	0x000f4240
 80092d8:	001e8480 	.word	0x001e8480
 80092dc:	003d0900 	.word	0x003d0900
 80092e0:	007a1200 	.word	0x007a1200
 80092e4:	00a2c2aa 	.word	0x00a2c2aa
 80092e8:	00c35000 	.word	0x00c35000
 80092ec:	00f42400 	.word	0x00f42400
 80092f0:	01458554 	.word	0x01458554
 80092f4:	01e84800 	.word	0x01e84800
 80092f8:	0001e848 	.word	0x0001e848
 80092fc:	0003d090 	.word	0x0003d090
 8009300:	000a2c2a 	.word	0x000a2c2a
 8009304:	000c3500 	.word	0x000c3500
 8009308:	00145854 	.word	0x00145854
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009310:	2b00      	cmp	r3, #0
 8009312:	d04f      	beq.n	80093b4 <UART_SetConfig+0x1b34>
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009318:	2b01      	cmp	r3, #1
 800931a:	d048      	beq.n	80093ae <UART_SetConfig+0x1b2e>
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009320:	2b02      	cmp	r3, #2
 8009322:	d041      	beq.n	80093a8 <UART_SetConfig+0x1b28>
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009328:	2b03      	cmp	r3, #3
 800932a:	d03a      	beq.n	80093a2 <UART_SetConfig+0x1b22>
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009330:	2b04      	cmp	r3, #4
 8009332:	d033      	beq.n	800939c <UART_SetConfig+0x1b1c>
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009338:	2b05      	cmp	r3, #5
 800933a:	d02c      	beq.n	8009396 <UART_SetConfig+0x1b16>
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009340:	2b06      	cmp	r3, #6
 8009342:	d025      	beq.n	8009390 <UART_SetConfig+0x1b10>
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009348:	2b07      	cmp	r3, #7
 800934a:	d01e      	beq.n	800938a <UART_SetConfig+0x1b0a>
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009350:	2b08      	cmp	r3, #8
 8009352:	d017      	beq.n	8009384 <UART_SetConfig+0x1b04>
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009358:	2b09      	cmp	r3, #9
 800935a:	d010      	beq.n	800937e <UART_SetConfig+0x1afe>
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009360:	2b0a      	cmp	r3, #10
 8009362:	d009      	beq.n	8009378 <UART_SetConfig+0x1af8>
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009368:	2b0b      	cmp	r3, #11
 800936a:	d102      	bne.n	8009372 <UART_SetConfig+0x1af2>
 800936c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009370:	e022      	b.n	80093b8 <UART_SetConfig+0x1b38>
 8009372:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8009376:	e01f      	b.n	80093b8 <UART_SetConfig+0x1b38>
 8009378:	f44f 7300 	mov.w	r3, #512	; 0x200
 800937c:	e01c      	b.n	80093b8 <UART_SetConfig+0x1b38>
 800937e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009382:	e019      	b.n	80093b8 <UART_SetConfig+0x1b38>
 8009384:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009388:	e016      	b.n	80093b8 <UART_SetConfig+0x1b38>
 800938a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800938e:	e013      	b.n	80093b8 <UART_SetConfig+0x1b38>
 8009390:	f241 5354 	movw	r3, #5460	; 0x1554
 8009394:	e010      	b.n	80093b8 <UART_SetConfig+0x1b38>
 8009396:	f641 1398 	movw	r3, #6552	; 0x1998
 800939a:	e00d      	b.n	80093b8 <UART_SetConfig+0x1b38>
 800939c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80093a0:	e00a      	b.n	80093b8 <UART_SetConfig+0x1b38>
 80093a2:	f642 23aa 	movw	r3, #10922	; 0x2aaa
 80093a6:	e007      	b.n	80093b8 <UART_SetConfig+0x1b38>
 80093a8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80093ac:	e004      	b.n	80093b8 <UART_SetConfig+0x1b38>
 80093ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80093b2:	e001      	b.n	80093b8 <UART_SetConfig+0x1b38>
 80093b4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80093b8:	687a      	ldr	r2, [r7, #4]
 80093ba:	6852      	ldr	r2, [r2, #4]
 80093bc:	0852      	lsrs	r2, r2, #1
 80093be:	441a      	add	r2, r3
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	685b      	ldr	r3, [r3, #4]
 80093c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80093c8:	b29b      	uxth	r3, r3
 80093ca:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80093cc:	e003      	b.n	80093d6 <UART_SetConfig+0x1b56>
      default:
        ret = HAL_ERROR;
 80093ce:	2301      	movs	r3, #1
 80093d0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 80093d4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80093d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80093d8:	2b0f      	cmp	r3, #15
 80093da:	d916      	bls.n	800940a <UART_SetConfig+0x1b8a>
 80093dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80093de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80093e2:	d212      	bcs.n	800940a <UART_SetConfig+0x1b8a>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80093e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80093e6:	b29b      	uxth	r3, r3
 80093e8:	f023 030f 	bic.w	r3, r3, #15
 80093ec:	84fb      	strh	r3, [r7, #38]	; 0x26
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80093ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80093f0:	085b      	lsrs	r3, r3, #1
 80093f2:	b29b      	uxth	r3, r3
 80093f4:	f003 0307 	and.w	r3, r3, #7
 80093f8:	b29a      	uxth	r2, r3
 80093fa:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80093fc:	4313      	orrs	r3, r2
 80093fe:	84fb      	strh	r3, [r7, #38]	; 0x26
      huart->Instance->BRR = brrtemp;
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8009406:	60da      	str	r2, [r3, #12]
 8009408:	e3a3      	b.n	8009b52 <UART_SetConfig+0x22d2>
    }
    else
    {
      ret = HAL_ERROR;
 800940a:	2301      	movs	r3, #1
 800940c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009410:	e39f      	b.n	8009b52 <UART_SetConfig+0x22d2>
    }
  }
  else
  {
    switch (clocksource)
 8009412:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8009416:	2b40      	cmp	r3, #64	; 0x40
 8009418:	f200 8388 	bhi.w	8009b2c <UART_SetConfig+0x22ac>
 800941c:	a201      	add	r2, pc, #4	; (adr r2, 8009424 <UART_SetConfig+0x1ba4>)
 800941e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009422:	bf00      	nop
 8009424:	08009529 	.word	0x08009529
 8009428:	080095df 	.word	0x080095df
 800942c:	08009b2d 	.word	0x08009b2d
 8009430:	08009b2d 	.word	0x08009b2d
 8009434:	08009695 	.word	0x08009695
 8009438:	08009b2d 	.word	0x08009b2d
 800943c:	08009b2d 	.word	0x08009b2d
 8009440:	08009b2d 	.word	0x08009b2d
 8009444:	0800974f 	.word	0x0800974f
 8009448:	08009b2d 	.word	0x08009b2d
 800944c:	08009b2d 	.word	0x08009b2d
 8009450:	08009b2d 	.word	0x08009b2d
 8009454:	08009b2d 	.word	0x08009b2d
 8009458:	08009b2d 	.word	0x08009b2d
 800945c:	08009b2d 	.word	0x08009b2d
 8009460:	08009b2d 	.word	0x08009b2d
 8009464:	08009809 	.word	0x08009809
 8009468:	08009b2d 	.word	0x08009b2d
 800946c:	08009b2d 	.word	0x08009b2d
 8009470:	08009b2d 	.word	0x08009b2d
 8009474:	08009b2d 	.word	0x08009b2d
 8009478:	08009b2d 	.word	0x08009b2d
 800947c:	08009b2d 	.word	0x08009b2d
 8009480:	08009b2d 	.word	0x08009b2d
 8009484:	08009b2d 	.word	0x08009b2d
 8009488:	08009b2d 	.word	0x08009b2d
 800948c:	08009b2d 	.word	0x08009b2d
 8009490:	08009b2d 	.word	0x08009b2d
 8009494:	08009b2d 	.word	0x08009b2d
 8009498:	08009b2d 	.word	0x08009b2d
 800949c:	08009b2d 	.word	0x08009b2d
 80094a0:	08009b2d 	.word	0x08009b2d
 80094a4:	08009979 	.word	0x08009979
 80094a8:	08009b2d 	.word	0x08009b2d
 80094ac:	08009b2d 	.word	0x08009b2d
 80094b0:	08009b2d 	.word	0x08009b2d
 80094b4:	08009b2d 	.word	0x08009b2d
 80094b8:	08009b2d 	.word	0x08009b2d
 80094bc:	08009b2d 	.word	0x08009b2d
 80094c0:	08009b2d 	.word	0x08009b2d
 80094c4:	08009b2d 	.word	0x08009b2d
 80094c8:	08009b2d 	.word	0x08009b2d
 80094cc:	08009b2d 	.word	0x08009b2d
 80094d0:	08009b2d 	.word	0x08009b2d
 80094d4:	08009b2d 	.word	0x08009b2d
 80094d8:	08009b2d 	.word	0x08009b2d
 80094dc:	08009b2d 	.word	0x08009b2d
 80094e0:	08009b2d 	.word	0x08009b2d
 80094e4:	08009b2d 	.word	0x08009b2d
 80094e8:	08009b2d 	.word	0x08009b2d
 80094ec:	08009b2d 	.word	0x08009b2d
 80094f0:	08009b2d 	.word	0x08009b2d
 80094f4:	08009b2d 	.word	0x08009b2d
 80094f8:	08009b2d 	.word	0x08009b2d
 80094fc:	08009b2d 	.word	0x08009b2d
 8009500:	08009b2d 	.word	0x08009b2d
 8009504:	08009b2d 	.word	0x08009b2d
 8009508:	08009b2d 	.word	0x08009b2d
 800950c:	08009b2d 	.word	0x08009b2d
 8009510:	08009b2d 	.word	0x08009b2d
 8009514:	08009b2d 	.word	0x08009b2d
 8009518:	08009b2d 	.word	0x08009b2d
 800951c:	08009b2d 	.word	0x08009b2d
 8009520:	08009b2d 	.word	0x08009b2d
 8009524:	08009a6d 	.word	0x08009a6d
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009528:	f7fa fd72 	bl	8004010 <HAL_RCC_GetPCLK1Freq>
 800952c:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009532:	2b00      	cmp	r3, #0
 8009534:	d044      	beq.n	80095c0 <UART_SetConfig+0x1d40>
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800953a:	2b01      	cmp	r3, #1
 800953c:	d03e      	beq.n	80095bc <UART_SetConfig+0x1d3c>
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009542:	2b02      	cmp	r3, #2
 8009544:	d038      	beq.n	80095b8 <UART_SetConfig+0x1d38>
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800954a:	2b03      	cmp	r3, #3
 800954c:	d032      	beq.n	80095b4 <UART_SetConfig+0x1d34>
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009552:	2b04      	cmp	r3, #4
 8009554:	d02c      	beq.n	80095b0 <UART_SetConfig+0x1d30>
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800955a:	2b05      	cmp	r3, #5
 800955c:	d026      	beq.n	80095ac <UART_SetConfig+0x1d2c>
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009562:	2b06      	cmp	r3, #6
 8009564:	d020      	beq.n	80095a8 <UART_SetConfig+0x1d28>
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800956a:	2b07      	cmp	r3, #7
 800956c:	d01a      	beq.n	80095a4 <UART_SetConfig+0x1d24>
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009572:	2b08      	cmp	r3, #8
 8009574:	d014      	beq.n	80095a0 <UART_SetConfig+0x1d20>
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800957a:	2b09      	cmp	r3, #9
 800957c:	d00e      	beq.n	800959c <UART_SetConfig+0x1d1c>
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009582:	2b0a      	cmp	r3, #10
 8009584:	d008      	beq.n	8009598 <UART_SetConfig+0x1d18>
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800958a:	2b0b      	cmp	r3, #11
 800958c:	d102      	bne.n	8009594 <UART_SetConfig+0x1d14>
 800958e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009592:	e016      	b.n	80095c2 <UART_SetConfig+0x1d42>
 8009594:	2301      	movs	r3, #1
 8009596:	e014      	b.n	80095c2 <UART_SetConfig+0x1d42>
 8009598:	2380      	movs	r3, #128	; 0x80
 800959a:	e012      	b.n	80095c2 <UART_SetConfig+0x1d42>
 800959c:	2340      	movs	r3, #64	; 0x40
 800959e:	e010      	b.n	80095c2 <UART_SetConfig+0x1d42>
 80095a0:	2320      	movs	r3, #32
 80095a2:	e00e      	b.n	80095c2 <UART_SetConfig+0x1d42>
 80095a4:	2310      	movs	r3, #16
 80095a6:	e00c      	b.n	80095c2 <UART_SetConfig+0x1d42>
 80095a8:	230c      	movs	r3, #12
 80095aa:	e00a      	b.n	80095c2 <UART_SetConfig+0x1d42>
 80095ac:	230a      	movs	r3, #10
 80095ae:	e008      	b.n	80095c2 <UART_SetConfig+0x1d42>
 80095b0:	2308      	movs	r3, #8
 80095b2:	e006      	b.n	80095c2 <UART_SetConfig+0x1d42>
 80095b4:	2306      	movs	r3, #6
 80095b6:	e004      	b.n	80095c2 <UART_SetConfig+0x1d42>
 80095b8:	2304      	movs	r3, #4
 80095ba:	e002      	b.n	80095c2 <UART_SetConfig+0x1d42>
 80095bc:	2302      	movs	r3, #2
 80095be:	e000      	b.n	80095c2 <UART_SetConfig+0x1d42>
 80095c0:	2301      	movs	r3, #1
 80095c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80095c4:	fbb2 f2f3 	udiv	r2, r2, r3
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	685b      	ldr	r3, [r3, #4]
 80095cc:	085b      	lsrs	r3, r3, #1
 80095ce:	441a      	add	r2, r3
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	685b      	ldr	r3, [r3, #4]
 80095d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80095d8:	b29b      	uxth	r3, r3
 80095da:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80095dc:	e2aa      	b.n	8009b34 <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80095de:	f7fa fd2d 	bl	800403c <HAL_RCC_GetPCLK2Freq>
 80095e2:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d044      	beq.n	8009676 <UART_SetConfig+0x1df6>
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095f0:	2b01      	cmp	r3, #1
 80095f2:	d03e      	beq.n	8009672 <UART_SetConfig+0x1df2>
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095f8:	2b02      	cmp	r3, #2
 80095fa:	d038      	beq.n	800966e <UART_SetConfig+0x1dee>
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009600:	2b03      	cmp	r3, #3
 8009602:	d032      	beq.n	800966a <UART_SetConfig+0x1dea>
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009608:	2b04      	cmp	r3, #4
 800960a:	d02c      	beq.n	8009666 <UART_SetConfig+0x1de6>
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009610:	2b05      	cmp	r3, #5
 8009612:	d026      	beq.n	8009662 <UART_SetConfig+0x1de2>
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009618:	2b06      	cmp	r3, #6
 800961a:	d020      	beq.n	800965e <UART_SetConfig+0x1dde>
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009620:	2b07      	cmp	r3, #7
 8009622:	d01a      	beq.n	800965a <UART_SetConfig+0x1dda>
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009628:	2b08      	cmp	r3, #8
 800962a:	d014      	beq.n	8009656 <UART_SetConfig+0x1dd6>
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009630:	2b09      	cmp	r3, #9
 8009632:	d00e      	beq.n	8009652 <UART_SetConfig+0x1dd2>
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009638:	2b0a      	cmp	r3, #10
 800963a:	d008      	beq.n	800964e <UART_SetConfig+0x1dce>
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009640:	2b0b      	cmp	r3, #11
 8009642:	d102      	bne.n	800964a <UART_SetConfig+0x1dca>
 8009644:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009648:	e016      	b.n	8009678 <UART_SetConfig+0x1df8>
 800964a:	2301      	movs	r3, #1
 800964c:	e014      	b.n	8009678 <UART_SetConfig+0x1df8>
 800964e:	2380      	movs	r3, #128	; 0x80
 8009650:	e012      	b.n	8009678 <UART_SetConfig+0x1df8>
 8009652:	2340      	movs	r3, #64	; 0x40
 8009654:	e010      	b.n	8009678 <UART_SetConfig+0x1df8>
 8009656:	2320      	movs	r3, #32
 8009658:	e00e      	b.n	8009678 <UART_SetConfig+0x1df8>
 800965a:	2310      	movs	r3, #16
 800965c:	e00c      	b.n	8009678 <UART_SetConfig+0x1df8>
 800965e:	230c      	movs	r3, #12
 8009660:	e00a      	b.n	8009678 <UART_SetConfig+0x1df8>
 8009662:	230a      	movs	r3, #10
 8009664:	e008      	b.n	8009678 <UART_SetConfig+0x1df8>
 8009666:	2308      	movs	r3, #8
 8009668:	e006      	b.n	8009678 <UART_SetConfig+0x1df8>
 800966a:	2306      	movs	r3, #6
 800966c:	e004      	b.n	8009678 <UART_SetConfig+0x1df8>
 800966e:	2304      	movs	r3, #4
 8009670:	e002      	b.n	8009678 <UART_SetConfig+0x1df8>
 8009672:	2302      	movs	r3, #2
 8009674:	e000      	b.n	8009678 <UART_SetConfig+0x1df8>
 8009676:	2301      	movs	r3, #1
 8009678:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800967a:	fbb2 f2f3 	udiv	r2, r2, r3
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	685b      	ldr	r3, [r3, #4]
 8009682:	085b      	lsrs	r3, r3, #1
 8009684:	441a      	add	r2, r3
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	685b      	ldr	r3, [r3, #4]
 800968a:	fbb2 f3f3 	udiv	r3, r2, r3
 800968e:	b29b      	uxth	r3, r3
 8009690:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009692:	e24f      	b.n	8009b34 <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009694:	f107 0318 	add.w	r3, r7, #24
 8009698:	4618      	mov	r0, r3
 800969a:	f7fb fe21 	bl	80052e0 <HAL_RCCEx_GetPLL2ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800969e:	69fa      	ldr	r2, [r7, #28]
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d044      	beq.n	8009732 <UART_SetConfig+0x1eb2>
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096ac:	2b01      	cmp	r3, #1
 80096ae:	d03e      	beq.n	800972e <UART_SetConfig+0x1eae>
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096b4:	2b02      	cmp	r3, #2
 80096b6:	d038      	beq.n	800972a <UART_SetConfig+0x1eaa>
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096bc:	2b03      	cmp	r3, #3
 80096be:	d032      	beq.n	8009726 <UART_SetConfig+0x1ea6>
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096c4:	2b04      	cmp	r3, #4
 80096c6:	d02c      	beq.n	8009722 <UART_SetConfig+0x1ea2>
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096cc:	2b05      	cmp	r3, #5
 80096ce:	d026      	beq.n	800971e <UART_SetConfig+0x1e9e>
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096d4:	2b06      	cmp	r3, #6
 80096d6:	d020      	beq.n	800971a <UART_SetConfig+0x1e9a>
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096dc:	2b07      	cmp	r3, #7
 80096de:	d01a      	beq.n	8009716 <UART_SetConfig+0x1e96>
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096e4:	2b08      	cmp	r3, #8
 80096e6:	d014      	beq.n	8009712 <UART_SetConfig+0x1e92>
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096ec:	2b09      	cmp	r3, #9
 80096ee:	d00e      	beq.n	800970e <UART_SetConfig+0x1e8e>
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096f4:	2b0a      	cmp	r3, #10
 80096f6:	d008      	beq.n	800970a <UART_SetConfig+0x1e8a>
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096fc:	2b0b      	cmp	r3, #11
 80096fe:	d102      	bne.n	8009706 <UART_SetConfig+0x1e86>
 8009700:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009704:	e016      	b.n	8009734 <UART_SetConfig+0x1eb4>
 8009706:	2301      	movs	r3, #1
 8009708:	e014      	b.n	8009734 <UART_SetConfig+0x1eb4>
 800970a:	2380      	movs	r3, #128	; 0x80
 800970c:	e012      	b.n	8009734 <UART_SetConfig+0x1eb4>
 800970e:	2340      	movs	r3, #64	; 0x40
 8009710:	e010      	b.n	8009734 <UART_SetConfig+0x1eb4>
 8009712:	2320      	movs	r3, #32
 8009714:	e00e      	b.n	8009734 <UART_SetConfig+0x1eb4>
 8009716:	2310      	movs	r3, #16
 8009718:	e00c      	b.n	8009734 <UART_SetConfig+0x1eb4>
 800971a:	230c      	movs	r3, #12
 800971c:	e00a      	b.n	8009734 <UART_SetConfig+0x1eb4>
 800971e:	230a      	movs	r3, #10
 8009720:	e008      	b.n	8009734 <UART_SetConfig+0x1eb4>
 8009722:	2308      	movs	r3, #8
 8009724:	e006      	b.n	8009734 <UART_SetConfig+0x1eb4>
 8009726:	2306      	movs	r3, #6
 8009728:	e004      	b.n	8009734 <UART_SetConfig+0x1eb4>
 800972a:	2304      	movs	r3, #4
 800972c:	e002      	b.n	8009734 <UART_SetConfig+0x1eb4>
 800972e:	2302      	movs	r3, #2
 8009730:	e000      	b.n	8009734 <UART_SetConfig+0x1eb4>
 8009732:	2301      	movs	r3, #1
 8009734:	fbb2 f2f3 	udiv	r2, r2, r3
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	685b      	ldr	r3, [r3, #4]
 800973c:	085b      	lsrs	r3, r3, #1
 800973e:	441a      	add	r2, r3
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	685b      	ldr	r3, [r3, #4]
 8009744:	fbb2 f3f3 	udiv	r3, r2, r3
 8009748:	b29b      	uxth	r3, r3
 800974a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800974c:	e1f2      	b.n	8009b34 <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800974e:	f107 030c 	add.w	r3, r7, #12
 8009752:	4618      	mov	r0, r3
 8009754:	f7fb ff10 	bl	8005578 <HAL_RCCEx_GetPLL3ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009758:	693a      	ldr	r2, [r7, #16]
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800975e:	2b00      	cmp	r3, #0
 8009760:	d044      	beq.n	80097ec <UART_SetConfig+0x1f6c>
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009766:	2b01      	cmp	r3, #1
 8009768:	d03e      	beq.n	80097e8 <UART_SetConfig+0x1f68>
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800976e:	2b02      	cmp	r3, #2
 8009770:	d038      	beq.n	80097e4 <UART_SetConfig+0x1f64>
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009776:	2b03      	cmp	r3, #3
 8009778:	d032      	beq.n	80097e0 <UART_SetConfig+0x1f60>
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800977e:	2b04      	cmp	r3, #4
 8009780:	d02c      	beq.n	80097dc <UART_SetConfig+0x1f5c>
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009786:	2b05      	cmp	r3, #5
 8009788:	d026      	beq.n	80097d8 <UART_SetConfig+0x1f58>
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800978e:	2b06      	cmp	r3, #6
 8009790:	d020      	beq.n	80097d4 <UART_SetConfig+0x1f54>
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009796:	2b07      	cmp	r3, #7
 8009798:	d01a      	beq.n	80097d0 <UART_SetConfig+0x1f50>
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800979e:	2b08      	cmp	r3, #8
 80097a0:	d014      	beq.n	80097cc <UART_SetConfig+0x1f4c>
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097a6:	2b09      	cmp	r3, #9
 80097a8:	d00e      	beq.n	80097c8 <UART_SetConfig+0x1f48>
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097ae:	2b0a      	cmp	r3, #10
 80097b0:	d008      	beq.n	80097c4 <UART_SetConfig+0x1f44>
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097b6:	2b0b      	cmp	r3, #11
 80097b8:	d102      	bne.n	80097c0 <UART_SetConfig+0x1f40>
 80097ba:	f44f 7380 	mov.w	r3, #256	; 0x100
 80097be:	e016      	b.n	80097ee <UART_SetConfig+0x1f6e>
 80097c0:	2301      	movs	r3, #1
 80097c2:	e014      	b.n	80097ee <UART_SetConfig+0x1f6e>
 80097c4:	2380      	movs	r3, #128	; 0x80
 80097c6:	e012      	b.n	80097ee <UART_SetConfig+0x1f6e>
 80097c8:	2340      	movs	r3, #64	; 0x40
 80097ca:	e010      	b.n	80097ee <UART_SetConfig+0x1f6e>
 80097cc:	2320      	movs	r3, #32
 80097ce:	e00e      	b.n	80097ee <UART_SetConfig+0x1f6e>
 80097d0:	2310      	movs	r3, #16
 80097d2:	e00c      	b.n	80097ee <UART_SetConfig+0x1f6e>
 80097d4:	230c      	movs	r3, #12
 80097d6:	e00a      	b.n	80097ee <UART_SetConfig+0x1f6e>
 80097d8:	230a      	movs	r3, #10
 80097da:	e008      	b.n	80097ee <UART_SetConfig+0x1f6e>
 80097dc:	2308      	movs	r3, #8
 80097de:	e006      	b.n	80097ee <UART_SetConfig+0x1f6e>
 80097e0:	2306      	movs	r3, #6
 80097e2:	e004      	b.n	80097ee <UART_SetConfig+0x1f6e>
 80097e4:	2304      	movs	r3, #4
 80097e6:	e002      	b.n	80097ee <UART_SetConfig+0x1f6e>
 80097e8:	2302      	movs	r3, #2
 80097ea:	e000      	b.n	80097ee <UART_SetConfig+0x1f6e>
 80097ec:	2301      	movs	r3, #1
 80097ee:	fbb2 f2f3 	udiv	r2, r2, r3
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	685b      	ldr	r3, [r3, #4]
 80097f6:	085b      	lsrs	r3, r3, #1
 80097f8:	441a      	add	r2, r3
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	685b      	ldr	r3, [r3, #4]
 80097fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8009802:	b29b      	uxth	r3, r3
 8009804:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009806:	e195      	b.n	8009b34 <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009808:	4b87      	ldr	r3, [pc, #540]	; (8009a28 <UART_SetConfig+0x21a8>)
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	f003 0320 	and.w	r3, r3, #32
 8009810:	2b00      	cmp	r3, #0
 8009812:	d05d      	beq.n	80098d0 <UART_SetConfig+0x2050>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009814:	4b84      	ldr	r3, [pc, #528]	; (8009a28 <UART_SetConfig+0x21a8>)
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	08db      	lsrs	r3, r3, #3
 800981a:	f003 0303 	and.w	r3, r3, #3
 800981e:	4a83      	ldr	r2, [pc, #524]	; (8009a2c <UART_SetConfig+0x21ac>)
 8009820:	40da      	lsrs	r2, r3
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009826:	2b00      	cmp	r3, #0
 8009828:	d044      	beq.n	80098b4 <UART_SetConfig+0x2034>
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800982e:	2b01      	cmp	r3, #1
 8009830:	d03e      	beq.n	80098b0 <UART_SetConfig+0x2030>
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009836:	2b02      	cmp	r3, #2
 8009838:	d038      	beq.n	80098ac <UART_SetConfig+0x202c>
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800983e:	2b03      	cmp	r3, #3
 8009840:	d032      	beq.n	80098a8 <UART_SetConfig+0x2028>
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009846:	2b04      	cmp	r3, #4
 8009848:	d02c      	beq.n	80098a4 <UART_SetConfig+0x2024>
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800984e:	2b05      	cmp	r3, #5
 8009850:	d026      	beq.n	80098a0 <UART_SetConfig+0x2020>
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009856:	2b06      	cmp	r3, #6
 8009858:	d020      	beq.n	800989c <UART_SetConfig+0x201c>
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800985e:	2b07      	cmp	r3, #7
 8009860:	d01a      	beq.n	8009898 <UART_SetConfig+0x2018>
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009866:	2b08      	cmp	r3, #8
 8009868:	d014      	beq.n	8009894 <UART_SetConfig+0x2014>
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800986e:	2b09      	cmp	r3, #9
 8009870:	d00e      	beq.n	8009890 <UART_SetConfig+0x2010>
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009876:	2b0a      	cmp	r3, #10
 8009878:	d008      	beq.n	800988c <UART_SetConfig+0x200c>
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800987e:	2b0b      	cmp	r3, #11
 8009880:	d102      	bne.n	8009888 <UART_SetConfig+0x2008>
 8009882:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009886:	e016      	b.n	80098b6 <UART_SetConfig+0x2036>
 8009888:	2301      	movs	r3, #1
 800988a:	e014      	b.n	80098b6 <UART_SetConfig+0x2036>
 800988c:	2380      	movs	r3, #128	; 0x80
 800988e:	e012      	b.n	80098b6 <UART_SetConfig+0x2036>
 8009890:	2340      	movs	r3, #64	; 0x40
 8009892:	e010      	b.n	80098b6 <UART_SetConfig+0x2036>
 8009894:	2320      	movs	r3, #32
 8009896:	e00e      	b.n	80098b6 <UART_SetConfig+0x2036>
 8009898:	2310      	movs	r3, #16
 800989a:	e00c      	b.n	80098b6 <UART_SetConfig+0x2036>
 800989c:	230c      	movs	r3, #12
 800989e:	e00a      	b.n	80098b6 <UART_SetConfig+0x2036>
 80098a0:	230a      	movs	r3, #10
 80098a2:	e008      	b.n	80098b6 <UART_SetConfig+0x2036>
 80098a4:	2308      	movs	r3, #8
 80098a6:	e006      	b.n	80098b6 <UART_SetConfig+0x2036>
 80098a8:	2306      	movs	r3, #6
 80098aa:	e004      	b.n	80098b6 <UART_SetConfig+0x2036>
 80098ac:	2304      	movs	r3, #4
 80098ae:	e002      	b.n	80098b6 <UART_SetConfig+0x2036>
 80098b0:	2302      	movs	r3, #2
 80098b2:	e000      	b.n	80098b6 <UART_SetConfig+0x2036>
 80098b4:	2301      	movs	r3, #1
 80098b6:	fbb2 f2f3 	udiv	r2, r2, r3
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	685b      	ldr	r3, [r3, #4]
 80098be:	085b      	lsrs	r3, r3, #1
 80098c0:	441a      	add	r2, r3
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	685b      	ldr	r3, [r3, #4]
 80098c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80098ca:	b29b      	uxth	r3, r3
 80098cc:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
        }
        break;
 80098ce:	e131      	b.n	8009b34 <UART_SetConfig+0x22b4>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d043      	beq.n	8009960 <UART_SetConfig+0x20e0>
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098dc:	2b01      	cmp	r3, #1
 80098de:	d03d      	beq.n	800995c <UART_SetConfig+0x20dc>
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098e4:	2b02      	cmp	r3, #2
 80098e6:	d037      	beq.n	8009958 <UART_SetConfig+0x20d8>
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098ec:	2b03      	cmp	r3, #3
 80098ee:	d031      	beq.n	8009954 <UART_SetConfig+0x20d4>
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098f4:	2b04      	cmp	r3, #4
 80098f6:	d02b      	beq.n	8009950 <UART_SetConfig+0x20d0>
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098fc:	2b05      	cmp	r3, #5
 80098fe:	d025      	beq.n	800994c <UART_SetConfig+0x20cc>
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009904:	2b06      	cmp	r3, #6
 8009906:	d01f      	beq.n	8009948 <UART_SetConfig+0x20c8>
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800990c:	2b07      	cmp	r3, #7
 800990e:	d019      	beq.n	8009944 <UART_SetConfig+0x20c4>
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009914:	2b08      	cmp	r3, #8
 8009916:	d013      	beq.n	8009940 <UART_SetConfig+0x20c0>
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800991c:	2b09      	cmp	r3, #9
 800991e:	d00d      	beq.n	800993c <UART_SetConfig+0x20bc>
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009924:	2b0a      	cmp	r3, #10
 8009926:	d007      	beq.n	8009938 <UART_SetConfig+0x20b8>
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800992c:	2b0b      	cmp	r3, #11
 800992e:	d101      	bne.n	8009934 <UART_SetConfig+0x20b4>
 8009930:	4b3f      	ldr	r3, [pc, #252]	; (8009a30 <UART_SetConfig+0x21b0>)
 8009932:	e016      	b.n	8009962 <UART_SetConfig+0x20e2>
 8009934:	4b3d      	ldr	r3, [pc, #244]	; (8009a2c <UART_SetConfig+0x21ac>)
 8009936:	e014      	b.n	8009962 <UART_SetConfig+0x20e2>
 8009938:	4b3e      	ldr	r3, [pc, #248]	; (8009a34 <UART_SetConfig+0x21b4>)
 800993a:	e012      	b.n	8009962 <UART_SetConfig+0x20e2>
 800993c:	4b3e      	ldr	r3, [pc, #248]	; (8009a38 <UART_SetConfig+0x21b8>)
 800993e:	e010      	b.n	8009962 <UART_SetConfig+0x20e2>
 8009940:	4b3e      	ldr	r3, [pc, #248]	; (8009a3c <UART_SetConfig+0x21bc>)
 8009942:	e00e      	b.n	8009962 <UART_SetConfig+0x20e2>
 8009944:	4b3e      	ldr	r3, [pc, #248]	; (8009a40 <UART_SetConfig+0x21c0>)
 8009946:	e00c      	b.n	8009962 <UART_SetConfig+0x20e2>
 8009948:	4b3e      	ldr	r3, [pc, #248]	; (8009a44 <UART_SetConfig+0x21c4>)
 800994a:	e00a      	b.n	8009962 <UART_SetConfig+0x20e2>
 800994c:	4b3e      	ldr	r3, [pc, #248]	; (8009a48 <UART_SetConfig+0x21c8>)
 800994e:	e008      	b.n	8009962 <UART_SetConfig+0x20e2>
 8009950:	4b3e      	ldr	r3, [pc, #248]	; (8009a4c <UART_SetConfig+0x21cc>)
 8009952:	e006      	b.n	8009962 <UART_SetConfig+0x20e2>
 8009954:	4b3e      	ldr	r3, [pc, #248]	; (8009a50 <UART_SetConfig+0x21d0>)
 8009956:	e004      	b.n	8009962 <UART_SetConfig+0x20e2>
 8009958:	4b3e      	ldr	r3, [pc, #248]	; (8009a54 <UART_SetConfig+0x21d4>)
 800995a:	e002      	b.n	8009962 <UART_SetConfig+0x20e2>
 800995c:	4b3e      	ldr	r3, [pc, #248]	; (8009a58 <UART_SetConfig+0x21d8>)
 800995e:	e000      	b.n	8009962 <UART_SetConfig+0x20e2>
 8009960:	4b32      	ldr	r3, [pc, #200]	; (8009a2c <UART_SetConfig+0x21ac>)
 8009962:	687a      	ldr	r2, [r7, #4]
 8009964:	6852      	ldr	r2, [r2, #4]
 8009966:	0852      	lsrs	r2, r2, #1
 8009968:	441a      	add	r2, r3
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	685b      	ldr	r3, [r3, #4]
 800996e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009972:	b29b      	uxth	r3, r3
 8009974:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009976:	e0dd      	b.n	8009b34 <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_CSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800997c:	2b00      	cmp	r3, #0
 800997e:	d046      	beq.n	8009a0e <UART_SetConfig+0x218e>
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009984:	2b01      	cmp	r3, #1
 8009986:	d040      	beq.n	8009a0a <UART_SetConfig+0x218a>
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800998c:	2b02      	cmp	r3, #2
 800998e:	d03a      	beq.n	8009a06 <UART_SetConfig+0x2186>
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009994:	2b03      	cmp	r3, #3
 8009996:	d034      	beq.n	8009a02 <UART_SetConfig+0x2182>
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800999c:	2b04      	cmp	r3, #4
 800999e:	d02e      	beq.n	80099fe <UART_SetConfig+0x217e>
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099a4:	2b05      	cmp	r3, #5
 80099a6:	d028      	beq.n	80099fa <UART_SetConfig+0x217a>
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099ac:	2b06      	cmp	r3, #6
 80099ae:	d022      	beq.n	80099f6 <UART_SetConfig+0x2176>
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099b4:	2b07      	cmp	r3, #7
 80099b6:	d01c      	beq.n	80099f2 <UART_SetConfig+0x2172>
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099bc:	2b08      	cmp	r3, #8
 80099be:	d016      	beq.n	80099ee <UART_SetConfig+0x216e>
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099c4:	2b09      	cmp	r3, #9
 80099c6:	d00f      	beq.n	80099e8 <UART_SetConfig+0x2168>
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099cc:	2b0a      	cmp	r3, #10
 80099ce:	d008      	beq.n	80099e2 <UART_SetConfig+0x2162>
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099d4:	2b0b      	cmp	r3, #11
 80099d6:	d102      	bne.n	80099de <UART_SetConfig+0x215e>
 80099d8:	f643 5309 	movw	r3, #15625	; 0x3d09
 80099dc:	e018      	b.n	8009a10 <UART_SetConfig+0x2190>
 80099de:	4b18      	ldr	r3, [pc, #96]	; (8009a40 <UART_SetConfig+0x21c0>)
 80099e0:	e016      	b.n	8009a10 <UART_SetConfig+0x2190>
 80099e2:	f647 2312 	movw	r3, #31250	; 0x7a12
 80099e6:	e013      	b.n	8009a10 <UART_SetConfig+0x2190>
 80099e8:	f24f 4324 	movw	r3, #62500	; 0xf424
 80099ec:	e010      	b.n	8009a10 <UART_SetConfig+0x2190>
 80099ee:	4b1b      	ldr	r3, [pc, #108]	; (8009a5c <UART_SetConfig+0x21dc>)
 80099f0:	e00e      	b.n	8009a10 <UART_SetConfig+0x2190>
 80099f2:	4b0f      	ldr	r3, [pc, #60]	; (8009a30 <UART_SetConfig+0x21b0>)
 80099f4:	e00c      	b.n	8009a10 <UART_SetConfig+0x2190>
 80099f6:	4b1a      	ldr	r3, [pc, #104]	; (8009a60 <UART_SetConfig+0x21e0>)
 80099f8:	e00a      	b.n	8009a10 <UART_SetConfig+0x2190>
 80099fa:	4b1a      	ldr	r3, [pc, #104]	; (8009a64 <UART_SetConfig+0x21e4>)
 80099fc:	e008      	b.n	8009a10 <UART_SetConfig+0x2190>
 80099fe:	4b0d      	ldr	r3, [pc, #52]	; (8009a34 <UART_SetConfig+0x21b4>)
 8009a00:	e006      	b.n	8009a10 <UART_SetConfig+0x2190>
 8009a02:	4b19      	ldr	r3, [pc, #100]	; (8009a68 <UART_SetConfig+0x21e8>)
 8009a04:	e004      	b.n	8009a10 <UART_SetConfig+0x2190>
 8009a06:	4b0c      	ldr	r3, [pc, #48]	; (8009a38 <UART_SetConfig+0x21b8>)
 8009a08:	e002      	b.n	8009a10 <UART_SetConfig+0x2190>
 8009a0a:	4b0c      	ldr	r3, [pc, #48]	; (8009a3c <UART_SetConfig+0x21bc>)
 8009a0c:	e000      	b.n	8009a10 <UART_SetConfig+0x2190>
 8009a0e:	4b0c      	ldr	r3, [pc, #48]	; (8009a40 <UART_SetConfig+0x21c0>)
 8009a10:	687a      	ldr	r2, [r7, #4]
 8009a12:	6852      	ldr	r2, [r2, #4]
 8009a14:	0852      	lsrs	r2, r2, #1
 8009a16:	441a      	add	r2, r3
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	685b      	ldr	r3, [r3, #4]
 8009a1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009a20:	b29b      	uxth	r3, r3
 8009a22:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009a24:	e086      	b.n	8009b34 <UART_SetConfig+0x22b4>
 8009a26:	bf00      	nop
 8009a28:	58024400 	.word	0x58024400
 8009a2c:	03d09000 	.word	0x03d09000
 8009a30:	0003d090 	.word	0x0003d090
 8009a34:	0007a120 	.word	0x0007a120
 8009a38:	000f4240 	.word	0x000f4240
 8009a3c:	001e8480 	.word	0x001e8480
 8009a40:	003d0900 	.word	0x003d0900
 8009a44:	00516155 	.word	0x00516155
 8009a48:	0061a800 	.word	0x0061a800
 8009a4c:	007a1200 	.word	0x007a1200
 8009a50:	00a2c2aa 	.word	0x00a2c2aa
 8009a54:	00f42400 	.word	0x00f42400
 8009a58:	01e84800 	.word	0x01e84800
 8009a5c:	0001e848 	.word	0x0001e848
 8009a60:	00051615 	.word	0x00051615
 8009a64:	00061a80 	.word	0x00061a80
 8009a68:	000a2c2a 	.word	0x000a2c2a
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	d04e      	beq.n	8009b12 <UART_SetConfig+0x2292>
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a78:	2b01      	cmp	r3, #1
 8009a7a:	d047      	beq.n	8009b0c <UART_SetConfig+0x228c>
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a80:	2b02      	cmp	r3, #2
 8009a82:	d040      	beq.n	8009b06 <UART_SetConfig+0x2286>
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a88:	2b03      	cmp	r3, #3
 8009a8a:	d039      	beq.n	8009b00 <UART_SetConfig+0x2280>
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a90:	2b04      	cmp	r3, #4
 8009a92:	d032      	beq.n	8009afa <UART_SetConfig+0x227a>
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a98:	2b05      	cmp	r3, #5
 8009a9a:	d02b      	beq.n	8009af4 <UART_SetConfig+0x2274>
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009aa0:	2b06      	cmp	r3, #6
 8009aa2:	d024      	beq.n	8009aee <UART_SetConfig+0x226e>
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009aa8:	2b07      	cmp	r3, #7
 8009aaa:	d01d      	beq.n	8009ae8 <UART_SetConfig+0x2268>
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ab0:	2b08      	cmp	r3, #8
 8009ab2:	d016      	beq.n	8009ae2 <UART_SetConfig+0x2262>
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ab8:	2b09      	cmp	r3, #9
 8009aba:	d00f      	beq.n	8009adc <UART_SetConfig+0x225c>
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ac0:	2b0a      	cmp	r3, #10
 8009ac2:	d008      	beq.n	8009ad6 <UART_SetConfig+0x2256>
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ac8:	2b0b      	cmp	r3, #11
 8009aca:	d101      	bne.n	8009ad0 <UART_SetConfig+0x2250>
 8009acc:	2380      	movs	r3, #128	; 0x80
 8009ace:	e022      	b.n	8009b16 <UART_SetConfig+0x2296>
 8009ad0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009ad4:	e01f      	b.n	8009b16 <UART_SetConfig+0x2296>
 8009ad6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009ada:	e01c      	b.n	8009b16 <UART_SetConfig+0x2296>
 8009adc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009ae0:	e019      	b.n	8009b16 <UART_SetConfig+0x2296>
 8009ae2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009ae6:	e016      	b.n	8009b16 <UART_SetConfig+0x2296>
 8009ae8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009aec:	e013      	b.n	8009b16 <UART_SetConfig+0x2296>
 8009aee:	f640 23aa 	movw	r3, #2730	; 0xaaa
 8009af2:	e010      	b.n	8009b16 <UART_SetConfig+0x2296>
 8009af4:	f640 43cc 	movw	r3, #3276	; 0xccc
 8009af8:	e00d      	b.n	8009b16 <UART_SetConfig+0x2296>
 8009afa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009afe:	e00a      	b.n	8009b16 <UART_SetConfig+0x2296>
 8009b00:	f241 5355 	movw	r3, #5461	; 0x1555
 8009b04:	e007      	b.n	8009b16 <UART_SetConfig+0x2296>
 8009b06:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009b0a:	e004      	b.n	8009b16 <UART_SetConfig+0x2296>
 8009b0c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8009b10:	e001      	b.n	8009b16 <UART_SetConfig+0x2296>
 8009b12:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009b16:	687a      	ldr	r2, [r7, #4]
 8009b18:	6852      	ldr	r2, [r2, #4]
 8009b1a:	0852      	lsrs	r2, r2, #1
 8009b1c:	441a      	add	r2, r3
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	685b      	ldr	r3, [r3, #4]
 8009b22:	fbb2 f3f3 	udiv	r3, r2, r3
 8009b26:	b29b      	uxth	r3, r3
 8009b28:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009b2a:	e003      	b.n	8009b34 <UART_SetConfig+0x22b4>
      default:
        ret = HAL_ERROR;
 8009b2c:	2301      	movs	r3, #1
 8009b2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 8009b32:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009b34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b36:	2b0f      	cmp	r3, #15
 8009b38:	d908      	bls.n	8009b4c <UART_SetConfig+0x22cc>
 8009b3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009b40:	d204      	bcs.n	8009b4c <UART_SetConfig+0x22cc>
    {
      huart->Instance->BRR = usartdiv;
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009b48:	60da      	str	r2, [r3, #12]
 8009b4a:	e002      	b.n	8009b52 <UART_SetConfig+0x22d2>
    }
    else
    {
      ret = HAL_ERROR;
 8009b4c:	2301      	movs	r3, #1
 8009b4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	2201      	movs	r2, #1
 8009b56:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	2201      	movs	r2, #1
 8009b5e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	2200      	movs	r2, #0
 8009b66:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	2200      	movs	r2, #0
 8009b6c:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 8009b6e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8009b72:	4618      	mov	r0, r3
 8009b74:	3740      	adds	r7, #64	; 0x40
 8009b76:	46bd      	mov	sp, r7
 8009b78:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

08009b7c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009b7c:	b480      	push	{r7}
 8009b7e:	b083      	sub	sp, #12
 8009b80:	af00      	add	r7, sp, #0
 8009b82:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b88:	f003 0301 	and.w	r3, r3, #1
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d00a      	beq.n	8009ba6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	685b      	ldr	r3, [r3, #4]
 8009b96:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	430a      	orrs	r2, r1
 8009ba4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009baa:	f003 0302 	and.w	r3, r3, #2
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d00a      	beq.n	8009bc8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	685b      	ldr	r3, [r3, #4]
 8009bb8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	430a      	orrs	r2, r1
 8009bc6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009bcc:	f003 0304 	and.w	r3, r3, #4
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d00a      	beq.n	8009bea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	685b      	ldr	r3, [r3, #4]
 8009bda:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	430a      	orrs	r2, r1
 8009be8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009bee:	f003 0308 	and.w	r3, r3, #8
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d00a      	beq.n	8009c0c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	685b      	ldr	r3, [r3, #4]
 8009bfc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	430a      	orrs	r2, r1
 8009c0a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c10:	f003 0310 	and.w	r3, r3, #16
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	d00a      	beq.n	8009c2e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	689b      	ldr	r3, [r3, #8]
 8009c1e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	430a      	orrs	r2, r1
 8009c2c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c32:	f003 0320 	and.w	r3, r3, #32
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	d00a      	beq.n	8009c50 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	689b      	ldr	r3, [r3, #8]
 8009c40:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	430a      	orrs	r2, r1
 8009c4e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	d01a      	beq.n	8009c92 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	685b      	ldr	r3, [r3, #4]
 8009c62:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	430a      	orrs	r2, r1
 8009c70:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009c76:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009c7a:	d10a      	bne.n	8009c92 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	685b      	ldr	r3, [r3, #4]
 8009c82:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	430a      	orrs	r2, r1
 8009c90:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	d00a      	beq.n	8009cb4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	685b      	ldr	r3, [r3, #4]
 8009ca4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	430a      	orrs	r2, r1
 8009cb2:	605a      	str	r2, [r3, #4]
  }
}
 8009cb4:	bf00      	nop
 8009cb6:	370c      	adds	r7, #12
 8009cb8:	46bd      	mov	sp, r7
 8009cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cbe:	4770      	bx	lr

08009cc0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009cc0:	b580      	push	{r7, lr}
 8009cc2:	b086      	sub	sp, #24
 8009cc4:	af02      	add	r7, sp, #8
 8009cc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	2200      	movs	r2, #0
 8009ccc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8009cd0:	f7f7 fcd6 	bl	8001680 <HAL_GetTick>
 8009cd4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	f003 0308 	and.w	r3, r3, #8
 8009ce0:	2b08      	cmp	r3, #8
 8009ce2:	d10e      	bne.n	8009d02 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009ce4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009ce8:	9300      	str	r3, [sp, #0]
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	2200      	movs	r2, #0
 8009cee:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009cf2:	6878      	ldr	r0, [r7, #4]
 8009cf4:	f000 f82c 	bl	8009d50 <UART_WaitOnFlagUntilTimeout>
 8009cf8:	4603      	mov	r3, r0
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d001      	beq.n	8009d02 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009cfe:	2303      	movs	r3, #3
 8009d00:	e022      	b.n	8009d48 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	f003 0304 	and.w	r3, r3, #4
 8009d0c:	2b04      	cmp	r3, #4
 8009d0e:	d10e      	bne.n	8009d2e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009d10:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009d14:	9300      	str	r3, [sp, #0]
 8009d16:	68fb      	ldr	r3, [r7, #12]
 8009d18:	2200      	movs	r2, #0
 8009d1a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009d1e:	6878      	ldr	r0, [r7, #4]
 8009d20:	f000 f816 	bl	8009d50 <UART_WaitOnFlagUntilTimeout>
 8009d24:	4603      	mov	r3, r0
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d001      	beq.n	8009d2e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009d2a:	2303      	movs	r3, #3
 8009d2c:	e00c      	b.n	8009d48 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	2220      	movs	r2, #32
 8009d32:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	2220      	movs	r2, #32
 8009d3a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	2200      	movs	r2, #0
 8009d42:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8009d46:	2300      	movs	r3, #0
}
 8009d48:	4618      	mov	r0, r3
 8009d4a:	3710      	adds	r7, #16
 8009d4c:	46bd      	mov	sp, r7
 8009d4e:	bd80      	pop	{r7, pc}

08009d50 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009d50:	b580      	push	{r7, lr}
 8009d52:	b084      	sub	sp, #16
 8009d54:	af00      	add	r7, sp, #0
 8009d56:	60f8      	str	r0, [r7, #12]
 8009d58:	60b9      	str	r1, [r7, #8]
 8009d5a:	603b      	str	r3, [r7, #0]
 8009d5c:	4613      	mov	r3, r2
 8009d5e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009d60:	e062      	b.n	8009e28 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009d62:	69bb      	ldr	r3, [r7, #24]
 8009d64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d68:	d05e      	beq.n	8009e28 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009d6a:	f7f7 fc89 	bl	8001680 <HAL_GetTick>
 8009d6e:	4602      	mov	r2, r0
 8009d70:	683b      	ldr	r3, [r7, #0]
 8009d72:	1ad3      	subs	r3, r2, r3
 8009d74:	69ba      	ldr	r2, [r7, #24]
 8009d76:	429a      	cmp	r2, r3
 8009d78:	d302      	bcc.n	8009d80 <UART_WaitOnFlagUntilTimeout+0x30>
 8009d7a:	69bb      	ldr	r3, [r7, #24]
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d11d      	bne.n	8009dbc <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8009d80:	68fb      	ldr	r3, [r7, #12]
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	681a      	ldr	r2, [r3, #0]
 8009d86:	68fb      	ldr	r3, [r7, #12]
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8009d8e:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	689a      	ldr	r2, [r3, #8]
 8009d96:	68fb      	ldr	r3, [r7, #12]
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	f022 0201 	bic.w	r2, r2, #1
 8009d9e:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8009da0:	68fb      	ldr	r3, [r7, #12]
 8009da2:	2220      	movs	r2, #32
 8009da4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8009da8:	68fb      	ldr	r3, [r7, #12]
 8009daa:	2220      	movs	r2, #32
 8009dac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	2200      	movs	r2, #0
 8009db4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8009db8:	2303      	movs	r3, #3
 8009dba:	e045      	b.n	8009e48 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	f003 0304 	and.w	r3, r3, #4
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	d02e      	beq.n	8009e28 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009dca:	68fb      	ldr	r3, [r7, #12]
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	69db      	ldr	r3, [r3, #28]
 8009dd0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009dd4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009dd8:	d126      	bne.n	8009e28 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009dda:	68fb      	ldr	r3, [r7, #12]
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009de2:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8009de4:	68fb      	ldr	r3, [r7, #12]
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	681a      	ldr	r2, [r3, #0]
 8009dea:	68fb      	ldr	r3, [r7, #12]
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8009df2:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009df4:	68fb      	ldr	r3, [r7, #12]
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	689a      	ldr	r2, [r3, #8]
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	f022 0201 	bic.w	r2, r2, #1
 8009e02:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8009e04:	68fb      	ldr	r3, [r7, #12]
 8009e06:	2220      	movs	r2, #32
 8009e08:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	2220      	movs	r2, #32
 8009e10:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	2220      	movs	r2, #32
 8009e18:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009e1c:	68fb      	ldr	r3, [r7, #12]
 8009e1e:	2200      	movs	r2, #0
 8009e20:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
          
          return HAL_TIMEOUT;
 8009e24:	2303      	movs	r3, #3
 8009e26:	e00f      	b.n	8009e48 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009e28:	68fb      	ldr	r3, [r7, #12]
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	69da      	ldr	r2, [r3, #28]
 8009e2e:	68bb      	ldr	r3, [r7, #8]
 8009e30:	4013      	ands	r3, r2
 8009e32:	68ba      	ldr	r2, [r7, #8]
 8009e34:	429a      	cmp	r2, r3
 8009e36:	bf0c      	ite	eq
 8009e38:	2301      	moveq	r3, #1
 8009e3a:	2300      	movne	r3, #0
 8009e3c:	b2db      	uxtb	r3, r3
 8009e3e:	461a      	mov	r2, r3
 8009e40:	79fb      	ldrb	r3, [r7, #7]
 8009e42:	429a      	cmp	r2, r3
 8009e44:	d08d      	beq.n	8009d62 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009e46:	2300      	movs	r3, #0
}
 8009e48:	4618      	mov	r0, r3
 8009e4a:	3710      	adds	r7, #16
 8009e4c:	46bd      	mov	sp, r7
 8009e4e:	bd80      	pop	{r7, pc}

08009e50 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009e50:	b480      	push	{r7}
 8009e52:	b085      	sub	sp, #20
 8009e54:	af00      	add	r7, sp, #0
 8009e56:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8009e5e:	2b01      	cmp	r3, #1
 8009e60:	d101      	bne.n	8009e66 <HAL_UARTEx_DisableFifoMode+0x16>
 8009e62:	2302      	movs	r3, #2
 8009e64:	e027      	b.n	8009eb6 <HAL_UARTEx_DisableFifoMode+0x66>
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	2201      	movs	r2, #1
 8009e6a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	2224      	movs	r2, #36	; 0x24
 8009e72:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	681a      	ldr	r2, [r3, #0]
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	f022 0201 	bic.w	r2, r2, #1
 8009e8c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009e8e:	68fb      	ldr	r3, [r7, #12]
 8009e90:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8009e94:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	2200      	movs	r2, #0
 8009e9a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	68fa      	ldr	r2, [r7, #12]
 8009ea2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	2220      	movs	r2, #32
 8009ea8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	2200      	movs	r2, #0
 8009eb0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8009eb4:	2300      	movs	r3, #0
}
 8009eb6:	4618      	mov	r0, r3
 8009eb8:	3714      	adds	r7, #20
 8009eba:	46bd      	mov	sp, r7
 8009ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ec0:	4770      	bx	lr

08009ec2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009ec2:	b580      	push	{r7, lr}
 8009ec4:	b084      	sub	sp, #16
 8009ec6:	af00      	add	r7, sp, #0
 8009ec8:	6078      	str	r0, [r7, #4]
 8009eca:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8009ed2:	2b01      	cmp	r3, #1
 8009ed4:	d101      	bne.n	8009eda <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009ed6:	2302      	movs	r3, #2
 8009ed8:	e02d      	b.n	8009f36 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	2201      	movs	r2, #1
 8009ede:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	2224      	movs	r2, #36	; 0x24
 8009ee6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	681a      	ldr	r2, [r3, #0]
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	f022 0201 	bic.w	r2, r2, #1
 8009f00:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	689b      	ldr	r3, [r3, #8]
 8009f08:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	683a      	ldr	r2, [r7, #0]
 8009f12:	430a      	orrs	r2, r1
 8009f14:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009f16:	6878      	ldr	r0, [r7, #4]
 8009f18:	f000 f850 	bl	8009fbc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	68fa      	ldr	r2, [r7, #12]
 8009f22:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	2220      	movs	r2, #32
 8009f28:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	2200      	movs	r2, #0
 8009f30:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8009f34:	2300      	movs	r3, #0
}
 8009f36:	4618      	mov	r0, r3
 8009f38:	3710      	adds	r7, #16
 8009f3a:	46bd      	mov	sp, r7
 8009f3c:	bd80      	pop	{r7, pc}

08009f3e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009f3e:	b580      	push	{r7, lr}
 8009f40:	b084      	sub	sp, #16
 8009f42:	af00      	add	r7, sp, #0
 8009f44:	6078      	str	r0, [r7, #4]
 8009f46:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8009f4e:	2b01      	cmp	r3, #1
 8009f50:	d101      	bne.n	8009f56 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009f52:	2302      	movs	r3, #2
 8009f54:	e02d      	b.n	8009fb2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	2201      	movs	r2, #1
 8009f5a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	2224      	movs	r2, #36	; 0x24
 8009f62:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	681a      	ldr	r2, [r3, #0]
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	f022 0201 	bic.w	r2, r2, #1
 8009f7c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	689b      	ldr	r3, [r3, #8]
 8009f84:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	683a      	ldr	r2, [r7, #0]
 8009f8e:	430a      	orrs	r2, r1
 8009f90:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009f92:	6878      	ldr	r0, [r7, #4]
 8009f94:	f000 f812 	bl	8009fbc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	68fa      	ldr	r2, [r7, #12]
 8009f9e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	2220      	movs	r2, #32
 8009fa4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	2200      	movs	r2, #0
 8009fac:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8009fb0:	2300      	movs	r3, #0
}
 8009fb2:	4618      	mov	r0, r3
 8009fb4:	3710      	adds	r7, #16
 8009fb6:	46bd      	mov	sp, r7
 8009fb8:	bd80      	pop	{r7, pc}
	...

08009fbc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009fbc:	b480      	push	{r7}
 8009fbe:	b089      	sub	sp, #36	; 0x24
 8009fc0:	af00      	add	r7, sp, #0
 8009fc2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8009fc4:	4a2f      	ldr	r2, [pc, #188]	; (800a084 <UARTEx_SetNbDataToProcess+0xc8>)
 8009fc6:	f107 0314 	add.w	r3, r7, #20
 8009fca:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009fce:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8009fd2:	4a2d      	ldr	r2, [pc, #180]	; (800a088 <UARTEx_SetNbDataToProcess+0xcc>)
 8009fd4:	f107 030c 	add.w	r3, r7, #12
 8009fd8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009fdc:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	d108      	bne.n	8009ffa <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	2201      	movs	r2, #1
 8009fec:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	2201      	movs	r2, #1
 8009ff4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009ff8:	e03d      	b.n	800a076 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009ffa:	2308      	movs	r3, #8
 8009ffc:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009ffe:	2308      	movs	r3, #8
 800a000:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	689b      	ldr	r3, [r3, #8]
 800a008:	0e5b      	lsrs	r3, r3, #25
 800a00a:	b2db      	uxtb	r3, r3
 800a00c:	f003 0307 	and.w	r3, r3, #7
 800a010:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	689b      	ldr	r3, [r3, #8]
 800a018:	0f5b      	lsrs	r3, r3, #29
 800a01a:	b2db      	uxtb	r3, r3
 800a01c:	f003 0307 	and.w	r3, r3, #7
 800a020:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 800a022:	7fbb      	ldrb	r3, [r7, #30]
 800a024:	7f3a      	ldrb	r2, [r7, #28]
 800a026:	f107 0120 	add.w	r1, r7, #32
 800a02a:	440a      	add	r2, r1
 800a02c:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800a030:	fb02 f303 	mul.w	r3, r2, r3
 800a034:	7f3a      	ldrb	r2, [r7, #28]
 800a036:	f107 0120 	add.w	r1, r7, #32
 800a03a:	440a      	add	r2, r1
 800a03c:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800a040:	fb93 f3f2 	sdiv	r3, r3, r2
 800a044:	b29a      	uxth	r2, r3
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 800a04c:	7ffb      	ldrb	r3, [r7, #31]
 800a04e:	7f7a      	ldrb	r2, [r7, #29]
 800a050:	f107 0120 	add.w	r1, r7, #32
 800a054:	440a      	add	r2, r1
 800a056:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800a05a:	fb02 f303 	mul.w	r3, r2, r3
 800a05e:	7f7a      	ldrb	r2, [r7, #29]
 800a060:	f107 0120 	add.w	r1, r7, #32
 800a064:	440a      	add	r2, r1
 800a066:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800a06a:	fb93 f3f2 	sdiv	r3, r3, r2
 800a06e:	b29a      	uxth	r2, r3
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800a076:	bf00      	nop
 800a078:	3724      	adds	r7, #36	; 0x24
 800a07a:	46bd      	mov	sp, r7
 800a07c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a080:	4770      	bx	lr
 800a082:	bf00      	nop
 800a084:	0800c05c 	.word	0x0800c05c
 800a088:	0800c064 	.word	0x0800c064

0800a08c <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800a08c:	b084      	sub	sp, #16
 800a08e:	b480      	push	{r7}
 800a090:	b085      	sub	sp, #20
 800a092:	af00      	add	r7, sp, #0
 800a094:	6078      	str	r0, [r7, #4]
 800a096:	f107 001c 	add.w	r0, r7, #28
 800a09a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800a09e:	2300      	movs	r3, #0
 800a0a0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800a0a2:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      |\
 800a0a4:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800a0a6:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800a0a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      |\
 800a0aa:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800a0ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             |\
 800a0ae:	431a      	orrs	r2, r3
             Init.ClockDiv
 800a0b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl |\
 800a0b2:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800a0b4:	68fa      	ldr	r2, [r7, #12]
 800a0b6:	4313      	orrs	r3, r2
 800a0b8:	60fb      	str	r3, [r7, #12]
             );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	685a      	ldr	r2, [r3, #4]
 800a0be:	4b07      	ldr	r3, [pc, #28]	; (800a0dc <SDMMC_Init+0x50>)
 800a0c0:	4013      	ands	r3, r2
 800a0c2:	68fa      	ldr	r2, [r7, #12]
 800a0c4:	431a      	orrs	r2, r3
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800a0ca:	2300      	movs	r3, #0
}
 800a0cc:	4618      	mov	r0, r3
 800a0ce:	3714      	adds	r7, #20
 800a0d0:	46bd      	mov	sp, r7
 800a0d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0d6:	b004      	add	sp, #16
 800a0d8:	4770      	bx	lr
 800a0da:	bf00      	nop
 800a0dc:	ffc02c00 	.word	0xffc02c00

0800a0e0 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800a0e0:	b480      	push	{r7}
 800a0e2:	b083      	sub	sp, #12
 800a0e4:	af00      	add	r7, sp, #0
 800a0e6:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800a0ee:	4618      	mov	r0, r3
 800a0f0:	370c      	adds	r7, #12
 800a0f2:	46bd      	mov	sp, r7
 800a0f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0f8:	4770      	bx	lr

0800a0fa <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 800a0fa:	b480      	push	{r7}
 800a0fc:	b083      	sub	sp, #12
 800a0fe:	af00      	add	r7, sp, #0
 800a100:	6078      	str	r0, [r7, #4]
 800a102:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 800a104:	683b      	ldr	r3, [r7, #0]
 800a106:	681a      	ldr	r2, [r3, #0]
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a10e:	2300      	movs	r3, #0
}
 800a110:	4618      	mov	r0, r3
 800a112:	370c      	adds	r7, #12
 800a114:	46bd      	mov	sp, r7
 800a116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a11a:	4770      	bx	lr

0800a11c <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 800a11c:	b480      	push	{r7}
 800a11e:	b083      	sub	sp, #12
 800a120:	af00      	add	r7, sp, #0
 800a122:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	f043 0203 	orr.w	r2, r3, #3
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800a130:	2300      	movs	r3, #0
}
 800a132:	4618      	mov	r0, r3
 800a134:	370c      	adds	r7, #12
 800a136:	46bd      	mov	sp, r7
 800a138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a13c:	4770      	bx	lr

0800a13e <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 800a13e:	b480      	push	{r7}
 800a140:	b083      	sub	sp, #12
 800a142:	af00      	add	r7, sp, #0
 800a144:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	f003 0303 	and.w	r3, r3, #3
}
 800a14e:	4618      	mov	r0, r3
 800a150:	370c      	adds	r7, #12
 800a152:	46bd      	mov	sp, r7
 800a154:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a158:	4770      	bx	lr
	...

0800a15c <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800a15c:	b480      	push	{r7}
 800a15e:	b085      	sub	sp, #20
 800a160:	af00      	add	r7, sp, #0
 800a162:	6078      	str	r0, [r7, #4]
 800a164:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800a166:	2300      	movs	r3, #0
 800a168:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800a16a:	683b      	ldr	r3, [r7, #0]
 800a16c:	681a      	ldr	r2, [r3, #0]
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800a172:	683b      	ldr	r3, [r7, #0]
 800a174:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800a176:	683b      	ldr	r3, [r7, #0]
 800a178:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800a17a:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800a17c:	683b      	ldr	r3, [r7, #0]
 800a17e:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800a180:	431a      	orrs	r2, r3
                       Command->CPSM);
 800a182:	683b      	ldr	r3, [r7, #0]
 800a184:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800a186:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800a188:	68fa      	ldr	r2, [r7, #12]
 800a18a:	4313      	orrs	r3, r2
 800a18c:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	68da      	ldr	r2, [r3, #12]
 800a192:	4b06      	ldr	r3, [pc, #24]	; (800a1ac <SDMMC_SendCommand+0x50>)
 800a194:	4013      	ands	r3, r2
 800a196:	68fa      	ldr	r2, [r7, #12]
 800a198:	431a      	orrs	r2, r3
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800a19e:	2300      	movs	r3, #0
}
 800a1a0:	4618      	mov	r0, r3
 800a1a2:	3714      	adds	r7, #20
 800a1a4:	46bd      	mov	sp, r7
 800a1a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1aa:	4770      	bx	lr
 800a1ac:	fffee0c0 	.word	0xfffee0c0

0800a1b0 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800a1b0:	b480      	push	{r7}
 800a1b2:	b083      	sub	sp, #12
 800a1b4:	af00      	add	r7, sp, #0
 800a1b6:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	691b      	ldr	r3, [r3, #16]
 800a1bc:	b2db      	uxtb	r3, r3
}
 800a1be:	4618      	mov	r0, r3
 800a1c0:	370c      	adds	r7, #12
 800a1c2:	46bd      	mov	sp, r7
 800a1c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1c8:	4770      	bx	lr

0800a1ca <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800a1ca:	b480      	push	{r7}
 800a1cc:	b085      	sub	sp, #20
 800a1ce:	af00      	add	r7, sp, #0
 800a1d0:	6078      	str	r0, [r7, #4]
 800a1d2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	3314      	adds	r3, #20
 800a1d8:	461a      	mov	r2, r3
 800a1da:	683b      	ldr	r3, [r7, #0]
 800a1dc:	4413      	add	r3, r2
 800a1de:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 800a1e0:	68fb      	ldr	r3, [r7, #12]
 800a1e2:	681b      	ldr	r3, [r3, #0]
}
 800a1e4:	4618      	mov	r0, r3
 800a1e6:	3714      	adds	r7, #20
 800a1e8:	46bd      	mov	sp, r7
 800a1ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ee:	4770      	bx	lr

0800a1f0 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 800a1f0:	b480      	push	{r7}
 800a1f2:	b085      	sub	sp, #20
 800a1f4:	af00      	add	r7, sp, #0
 800a1f6:	6078      	str	r0, [r7, #4]
 800a1f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800a1fa:	2300      	movs	r3, #0
 800a1fc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800a1fe:	683b      	ldr	r3, [r7, #0]
 800a200:	681a      	ldr	r2, [r3, #0]
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800a206:	683b      	ldr	r3, [r7, #0]
 800a208:	685a      	ldr	r2, [r3, #4]
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800a20e:	683b      	ldr	r3, [r7, #0]
 800a210:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800a212:	683b      	ldr	r3, [r7, #0]
 800a214:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800a216:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800a218:	683b      	ldr	r3, [r7, #0]
 800a21a:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800a21c:	431a      	orrs	r2, r3
                       Data->DPSM);
 800a21e:	683b      	ldr	r3, [r7, #0]
 800a220:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800a222:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800a224:	68fa      	ldr	r2, [r7, #12]
 800a226:	4313      	orrs	r3, r2
 800a228:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a22e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800a232:	68fb      	ldr	r3, [r7, #12]
 800a234:	431a      	orrs	r2, r3
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800a23a:	2300      	movs	r3, #0

}
 800a23c:	4618      	mov	r0, r3
 800a23e:	3714      	adds	r7, #20
 800a240:	46bd      	mov	sp, r7
 800a242:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a246:	4770      	bx	lr

0800a248 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800a248:	b580      	push	{r7, lr}
 800a24a:	b088      	sub	sp, #32
 800a24c:	af00      	add	r7, sp, #0
 800a24e:	6078      	str	r0, [r7, #4]
 800a250:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800a252:	683b      	ldr	r3, [r7, #0]
 800a254:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800a256:	2310      	movs	r3, #16
 800a258:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a25a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a25e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a260:	2300      	movs	r3, #0
 800a262:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a264:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a268:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a26a:	f107 0308 	add.w	r3, r7, #8
 800a26e:	4619      	mov	r1, r3
 800a270:	6878      	ldr	r0, [r7, #4]
 800a272:	f7ff ff73 	bl	800a15c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800a276:	f241 3288 	movw	r2, #5000	; 0x1388
 800a27a:	2110      	movs	r1, #16
 800a27c:	6878      	ldr	r0, [r7, #4]
 800a27e:	f000 faa5 	bl	800a7cc <SDMMC_GetCmdResp1>
 800a282:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a284:	69fb      	ldr	r3, [r7, #28]
}
 800a286:	4618      	mov	r0, r3
 800a288:	3720      	adds	r7, #32
 800a28a:	46bd      	mov	sp, r7
 800a28c:	bd80      	pop	{r7, pc}

0800a28e <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800a28e:	b580      	push	{r7, lr}
 800a290:	b088      	sub	sp, #32
 800a292:	af00      	add	r7, sp, #0
 800a294:	6078      	str	r0, [r7, #4]
 800a296:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800a298:	683b      	ldr	r3, [r7, #0]
 800a29a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800a29c:	2311      	movs	r3, #17
 800a29e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a2a0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a2a4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a2a6:	2300      	movs	r3, #0
 800a2a8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a2aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a2ae:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a2b0:	f107 0308 	add.w	r3, r7, #8
 800a2b4:	4619      	mov	r1, r3
 800a2b6:	6878      	ldr	r0, [r7, #4]
 800a2b8:	f7ff ff50 	bl	800a15c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800a2bc:	f241 3288 	movw	r2, #5000	; 0x1388
 800a2c0:	2111      	movs	r1, #17
 800a2c2:	6878      	ldr	r0, [r7, #4]
 800a2c4:	f000 fa82 	bl	800a7cc <SDMMC_GetCmdResp1>
 800a2c8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a2ca:	69fb      	ldr	r3, [r7, #28]
}
 800a2cc:	4618      	mov	r0, r3
 800a2ce:	3720      	adds	r7, #32
 800a2d0:	46bd      	mov	sp, r7
 800a2d2:	bd80      	pop	{r7, pc}

0800a2d4 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800a2d4:	b580      	push	{r7, lr}
 800a2d6:	b088      	sub	sp, #32
 800a2d8:	af00      	add	r7, sp, #0
 800a2da:	6078      	str	r0, [r7, #4]
 800a2dc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800a2de:	683b      	ldr	r3, [r7, #0]
 800a2e0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800a2e2:	2312      	movs	r3, #18
 800a2e4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a2e6:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a2ea:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a2ec:	2300      	movs	r3, #0
 800a2ee:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a2f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a2f4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a2f6:	f107 0308 	add.w	r3, r7, #8
 800a2fa:	4619      	mov	r1, r3
 800a2fc:	6878      	ldr	r0, [r7, #4]
 800a2fe:	f7ff ff2d 	bl	800a15c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800a302:	f241 3288 	movw	r2, #5000	; 0x1388
 800a306:	2112      	movs	r1, #18
 800a308:	6878      	ldr	r0, [r7, #4]
 800a30a:	f000 fa5f 	bl	800a7cc <SDMMC_GetCmdResp1>
 800a30e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a310:	69fb      	ldr	r3, [r7, #28]
}
 800a312:	4618      	mov	r0, r3
 800a314:	3720      	adds	r7, #32
 800a316:	46bd      	mov	sp, r7
 800a318:	bd80      	pop	{r7, pc}

0800a31a <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800a31a:	b580      	push	{r7, lr}
 800a31c:	b088      	sub	sp, #32
 800a31e:	af00      	add	r7, sp, #0
 800a320:	6078      	str	r0, [r7, #4]
 800a322:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800a324:	683b      	ldr	r3, [r7, #0]
 800a326:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800a328:	2318      	movs	r3, #24
 800a32a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a32c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a330:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a332:	2300      	movs	r3, #0
 800a334:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a336:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a33a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a33c:	f107 0308 	add.w	r3, r7, #8
 800a340:	4619      	mov	r1, r3
 800a342:	6878      	ldr	r0, [r7, #4]
 800a344:	f7ff ff0a 	bl	800a15c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800a348:	f241 3288 	movw	r2, #5000	; 0x1388
 800a34c:	2118      	movs	r1, #24
 800a34e:	6878      	ldr	r0, [r7, #4]
 800a350:	f000 fa3c 	bl	800a7cc <SDMMC_GetCmdResp1>
 800a354:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a356:	69fb      	ldr	r3, [r7, #28]
}
 800a358:	4618      	mov	r0, r3
 800a35a:	3720      	adds	r7, #32
 800a35c:	46bd      	mov	sp, r7
 800a35e:	bd80      	pop	{r7, pc}

0800a360 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800a360:	b580      	push	{r7, lr}
 800a362:	b088      	sub	sp, #32
 800a364:	af00      	add	r7, sp, #0
 800a366:	6078      	str	r0, [r7, #4]
 800a368:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800a36a:	683b      	ldr	r3, [r7, #0]
 800a36c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800a36e:	2319      	movs	r3, #25
 800a370:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a372:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a376:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a378:	2300      	movs	r3, #0
 800a37a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a37c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a380:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a382:	f107 0308 	add.w	r3, r7, #8
 800a386:	4619      	mov	r1, r3
 800a388:	6878      	ldr	r0, [r7, #4]
 800a38a:	f7ff fee7 	bl	800a15c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800a38e:	f241 3288 	movw	r2, #5000	; 0x1388
 800a392:	2119      	movs	r1, #25
 800a394:	6878      	ldr	r0, [r7, #4]
 800a396:	f000 fa19 	bl	800a7cc <SDMMC_GetCmdResp1>
 800a39a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a39c:	69fb      	ldr	r3, [r7, #28]
}
 800a39e:	4618      	mov	r0, r3
 800a3a0:	3720      	adds	r7, #32
 800a3a2:	46bd      	mov	sp, r7
 800a3a4:	bd80      	pop	{r7, pc}
	...

0800a3a8 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800a3a8:	b580      	push	{r7, lr}
 800a3aa:	b088      	sub	sp, #32
 800a3ac:	af00      	add	r7, sp, #0
 800a3ae:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800a3b0:	2300      	movs	r3, #0
 800a3b2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800a3b4:	230c      	movs	r3, #12
 800a3b6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a3b8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a3bc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a3be:	2300      	movs	r3, #0
 800a3c0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a3c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a3c6:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	68db      	ldr	r3, [r3, #12]
 800a3cc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	68db      	ldr	r3, [r3, #12]
 800a3d8:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a3e0:	f107 0308 	add.w	r3, r7, #8
 800a3e4:	4619      	mov	r1, r3
 800a3e6:	6878      	ldr	r0, [r7, #4]
 800a3e8:	f7ff feb8 	bl	800a15c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800a3ec:	4a08      	ldr	r2, [pc, #32]	; (800a410 <SDMMC_CmdStopTransfer+0x68>)
 800a3ee:	210c      	movs	r1, #12
 800a3f0:	6878      	ldr	r0, [r7, #4]
 800a3f2:	f000 f9eb 	bl	800a7cc <SDMMC_GetCmdResp1>
 800a3f6:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	68db      	ldr	r3, [r3, #12]
 800a3fc:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	60da      	str	r2, [r3, #12]

  return errorstate;
 800a404:	69fb      	ldr	r3, [r7, #28]
}
 800a406:	4618      	mov	r0, r3
 800a408:	3720      	adds	r7, #32
 800a40a:	46bd      	mov	sp, r7
 800a40c:	bd80      	pop	{r7, pc}
 800a40e:	bf00      	nop
 800a410:	05f5e100 	.word	0x05f5e100

0800a414 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 800a414:	b580      	push	{r7, lr}
 800a416:	b08a      	sub	sp, #40	; 0x28
 800a418:	af00      	add	r7, sp, #0
 800a41a:	60f8      	str	r0, [r7, #12]
 800a41c:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800a420:	683b      	ldr	r3, [r7, #0]
 800a422:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800a424:	2307      	movs	r3, #7
 800a426:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a428:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a42c:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a42e:	2300      	movs	r3, #0
 800a430:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a432:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a436:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a438:	f107 0310 	add.w	r3, r7, #16
 800a43c:	4619      	mov	r1, r3
 800a43e:	68f8      	ldr	r0, [r7, #12]
 800a440:	f7ff fe8c 	bl	800a15c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800a444:	f241 3288 	movw	r2, #5000	; 0x1388
 800a448:	2107      	movs	r1, #7
 800a44a:	68f8      	ldr	r0, [r7, #12]
 800a44c:	f000 f9be 	bl	800a7cc <SDMMC_GetCmdResp1>
 800a450:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800a452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a454:	4618      	mov	r0, r3
 800a456:	3728      	adds	r7, #40	; 0x28
 800a458:	46bd      	mov	sp, r7
 800a45a:	bd80      	pop	{r7, pc}

0800a45c <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800a45c:	b580      	push	{r7, lr}
 800a45e:	b088      	sub	sp, #32
 800a460:	af00      	add	r7, sp, #0
 800a462:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800a464:	2300      	movs	r3, #0
 800a466:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800a468:	2300      	movs	r3, #0
 800a46a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800a46c:	2300      	movs	r3, #0
 800a46e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a470:	2300      	movs	r3, #0
 800a472:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a474:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a478:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a47a:	f107 0308 	add.w	r3, r7, #8
 800a47e:	4619      	mov	r1, r3
 800a480:	6878      	ldr	r0, [r7, #4]
 800a482:	f7ff fe6b 	bl	800a15c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800a486:	6878      	ldr	r0, [r7, #4]
 800a488:	f000 f976 	bl	800a778 <SDMMC_GetCmdError>
 800a48c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a48e:	69fb      	ldr	r3, [r7, #28]
}
 800a490:	4618      	mov	r0, r3
 800a492:	3720      	adds	r7, #32
 800a494:	46bd      	mov	sp, r7
 800a496:	bd80      	pop	{r7, pc}

0800a498 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800a498:	b580      	push	{r7, lr}
 800a49a:	b088      	sub	sp, #32
 800a49c:	af00      	add	r7, sp, #0
 800a49e:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800a4a0:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800a4a4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800a4a6:	2308      	movs	r3, #8
 800a4a8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a4aa:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a4ae:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a4b0:	2300      	movs	r3, #0
 800a4b2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a4b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a4b8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a4ba:	f107 0308 	add.w	r3, r7, #8
 800a4be:	4619      	mov	r1, r3
 800a4c0:	6878      	ldr	r0, [r7, #4]
 800a4c2:	f7ff fe4b 	bl	800a15c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800a4c6:	6878      	ldr	r0, [r7, #4]
 800a4c8:	f000 fb6a 	bl	800aba0 <SDMMC_GetCmdResp7>
 800a4cc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a4ce:	69fb      	ldr	r3, [r7, #28]
}
 800a4d0:	4618      	mov	r0, r3
 800a4d2:	3720      	adds	r7, #32
 800a4d4:	46bd      	mov	sp, r7
 800a4d6:	bd80      	pop	{r7, pc}

0800a4d8 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800a4d8:	b580      	push	{r7, lr}
 800a4da:	b088      	sub	sp, #32
 800a4dc:	af00      	add	r7, sp, #0
 800a4de:	6078      	str	r0, [r7, #4]
 800a4e0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800a4e2:	683b      	ldr	r3, [r7, #0]
 800a4e4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800a4e6:	2337      	movs	r3, #55	; 0x37
 800a4e8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a4ea:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a4ee:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a4f0:	2300      	movs	r3, #0
 800a4f2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a4f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a4f8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a4fa:	f107 0308 	add.w	r3, r7, #8
 800a4fe:	4619      	mov	r1, r3
 800a500:	6878      	ldr	r0, [r7, #4]
 800a502:	f7ff fe2b 	bl	800a15c <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800a506:	f241 3288 	movw	r2, #5000	; 0x1388
 800a50a:	2137      	movs	r1, #55	; 0x37
 800a50c:	6878      	ldr	r0, [r7, #4]
 800a50e:	f000 f95d 	bl	800a7cc <SDMMC_GetCmdResp1>
 800a512:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a514:	69fb      	ldr	r3, [r7, #28]
}
 800a516:	4618      	mov	r0, r3
 800a518:	3720      	adds	r7, #32
 800a51a:	46bd      	mov	sp, r7
 800a51c:	bd80      	pop	{r7, pc}

0800a51e <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800a51e:	b580      	push	{r7, lr}
 800a520:	b088      	sub	sp, #32
 800a522:	af00      	add	r7, sp, #0
 800a524:	6078      	str	r0, [r7, #4]
 800a526:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800a528:	683b      	ldr	r3, [r7, #0]
 800a52a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800a52c:	2329      	movs	r3, #41	; 0x29
 800a52e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a530:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a534:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a536:	2300      	movs	r3, #0
 800a538:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a53a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a53e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a540:	f107 0308 	add.w	r3, r7, #8
 800a544:	4619      	mov	r1, r3
 800a546:	6878      	ldr	r0, [r7, #4]
 800a548:	f7ff fe08 	bl	800a15c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800a54c:	6878      	ldr	r0, [r7, #4]
 800a54e:	f000 fa75 	bl	800aa3c <SDMMC_GetCmdResp3>
 800a552:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a554:	69fb      	ldr	r3, [r7, #28]
}
 800a556:	4618      	mov	r0, r3
 800a558:	3720      	adds	r7, #32
 800a55a:	46bd      	mov	sp, r7
 800a55c:	bd80      	pop	{r7, pc}

0800a55e <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800a55e:	b580      	push	{r7, lr}
 800a560:	b088      	sub	sp, #32
 800a562:	af00      	add	r7, sp, #0
 800a564:	6078      	str	r0, [r7, #4]
 800a566:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800a568:	683b      	ldr	r3, [r7, #0]
 800a56a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800a56c:	2306      	movs	r3, #6
 800a56e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a570:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a574:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a576:	2300      	movs	r3, #0
 800a578:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a57a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a57e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a580:	f107 0308 	add.w	r3, r7, #8
 800a584:	4619      	mov	r1, r3
 800a586:	6878      	ldr	r0, [r7, #4]
 800a588:	f7ff fde8 	bl	800a15c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800a58c:	f241 3288 	movw	r2, #5000	; 0x1388
 800a590:	2106      	movs	r1, #6
 800a592:	6878      	ldr	r0, [r7, #4]
 800a594:	f000 f91a 	bl	800a7cc <SDMMC_GetCmdResp1>
 800a598:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a59a:	69fb      	ldr	r3, [r7, #28]
}
 800a59c:	4618      	mov	r0, r3
 800a59e:	3720      	adds	r7, #32
 800a5a0:	46bd      	mov	sp, r7
 800a5a2:	bd80      	pop	{r7, pc}

0800a5a4 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800a5a4:	b580      	push	{r7, lr}
 800a5a6:	b088      	sub	sp, #32
 800a5a8:	af00      	add	r7, sp, #0
 800a5aa:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800a5ac:	2300      	movs	r3, #0
 800a5ae:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800a5b0:	2333      	movs	r3, #51	; 0x33
 800a5b2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a5b4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a5b8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a5ba:	2300      	movs	r3, #0
 800a5bc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a5be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a5c2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a5c4:	f107 0308 	add.w	r3, r7, #8
 800a5c8:	4619      	mov	r1, r3
 800a5ca:	6878      	ldr	r0, [r7, #4]
 800a5cc:	f7ff fdc6 	bl	800a15c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800a5d0:	f241 3288 	movw	r2, #5000	; 0x1388
 800a5d4:	2133      	movs	r1, #51	; 0x33
 800a5d6:	6878      	ldr	r0, [r7, #4]
 800a5d8:	f000 f8f8 	bl	800a7cc <SDMMC_GetCmdResp1>
 800a5dc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a5de:	69fb      	ldr	r3, [r7, #28]
}
 800a5e0:	4618      	mov	r0, r3
 800a5e2:	3720      	adds	r7, #32
 800a5e4:	46bd      	mov	sp, r7
 800a5e6:	bd80      	pop	{r7, pc}

0800a5e8 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800a5e8:	b580      	push	{r7, lr}
 800a5ea:	b088      	sub	sp, #32
 800a5ec:	af00      	add	r7, sp, #0
 800a5ee:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800a5f0:	2300      	movs	r3, #0
 800a5f2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800a5f4:	2302      	movs	r3, #2
 800a5f6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800a5f8:	f44f 7340 	mov.w	r3, #768	; 0x300
 800a5fc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a5fe:	2300      	movs	r3, #0
 800a600:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a602:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a606:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a608:	f107 0308 	add.w	r3, r7, #8
 800a60c:	4619      	mov	r1, r3
 800a60e:	6878      	ldr	r0, [r7, #4]
 800a610:	f7ff fda4 	bl	800a15c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800a614:	6878      	ldr	r0, [r7, #4]
 800a616:	f000 f9c9 	bl	800a9ac <SDMMC_GetCmdResp2>
 800a61a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a61c:	69fb      	ldr	r3, [r7, #28]
}
 800a61e:	4618      	mov	r0, r3
 800a620:	3720      	adds	r7, #32
 800a622:	46bd      	mov	sp, r7
 800a624:	bd80      	pop	{r7, pc}

0800a626 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800a626:	b580      	push	{r7, lr}
 800a628:	b088      	sub	sp, #32
 800a62a:	af00      	add	r7, sp, #0
 800a62c:	6078      	str	r0, [r7, #4]
 800a62e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800a630:	683b      	ldr	r3, [r7, #0]
 800a632:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800a634:	2309      	movs	r3, #9
 800a636:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800a638:	f44f 7340 	mov.w	r3, #768	; 0x300
 800a63c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a63e:	2300      	movs	r3, #0
 800a640:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a642:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a646:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a648:	f107 0308 	add.w	r3, r7, #8
 800a64c:	4619      	mov	r1, r3
 800a64e:	6878      	ldr	r0, [r7, #4]
 800a650:	f7ff fd84 	bl	800a15c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800a654:	6878      	ldr	r0, [r7, #4]
 800a656:	f000 f9a9 	bl	800a9ac <SDMMC_GetCmdResp2>
 800a65a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a65c:	69fb      	ldr	r3, [r7, #28]
}
 800a65e:	4618      	mov	r0, r3
 800a660:	3720      	adds	r7, #32
 800a662:	46bd      	mov	sp, r7
 800a664:	bd80      	pop	{r7, pc}

0800a666 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800a666:	b580      	push	{r7, lr}
 800a668:	b088      	sub	sp, #32
 800a66a:	af00      	add	r7, sp, #0
 800a66c:	6078      	str	r0, [r7, #4]
 800a66e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800a670:	2300      	movs	r3, #0
 800a672:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800a674:	2303      	movs	r3, #3
 800a676:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a678:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a67c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a67e:	2300      	movs	r3, #0
 800a680:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a682:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a686:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a688:	f107 0308 	add.w	r3, r7, #8
 800a68c:	4619      	mov	r1, r3
 800a68e:	6878      	ldr	r0, [r7, #4]
 800a690:	f7ff fd64 	bl	800a15c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800a694:	683a      	ldr	r2, [r7, #0]
 800a696:	2103      	movs	r1, #3
 800a698:	6878      	ldr	r0, [r7, #4]
 800a69a:	f000 fa0b 	bl	800aab4 <SDMMC_GetCmdResp6>
 800a69e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a6a0:	69fb      	ldr	r3, [r7, #28]
}
 800a6a2:	4618      	mov	r0, r3
 800a6a4:	3720      	adds	r7, #32
 800a6a6:	46bd      	mov	sp, r7
 800a6a8:	bd80      	pop	{r7, pc}

0800a6aa <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800a6aa:	b580      	push	{r7, lr}
 800a6ac:	b088      	sub	sp, #32
 800a6ae:	af00      	add	r7, sp, #0
 800a6b0:	6078      	str	r0, [r7, #4]
 800a6b2:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800a6b4:	683b      	ldr	r3, [r7, #0]
 800a6b6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800a6b8:	230d      	movs	r3, #13
 800a6ba:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a6bc:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a6c0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a6c2:	2300      	movs	r3, #0
 800a6c4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a6c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a6ca:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a6cc:	f107 0308 	add.w	r3, r7, #8
 800a6d0:	4619      	mov	r1, r3
 800a6d2:	6878      	ldr	r0, [r7, #4]
 800a6d4:	f7ff fd42 	bl	800a15c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800a6d8:	f241 3288 	movw	r2, #5000	; 0x1388
 800a6dc:	210d      	movs	r1, #13
 800a6de:	6878      	ldr	r0, [r7, #4]
 800a6e0:	f000 f874 	bl	800a7cc <SDMMC_GetCmdResp1>
 800a6e4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a6e6:	69fb      	ldr	r3, [r7, #28]
}
 800a6e8:	4618      	mov	r0, r3
 800a6ea:	3720      	adds	r7, #32
 800a6ec:	46bd      	mov	sp, r7
 800a6ee:	bd80      	pop	{r7, pc}

0800a6f0 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 800a6f0:	b580      	push	{r7, lr}
 800a6f2:	b088      	sub	sp, #32
 800a6f4:	af00      	add	r7, sp, #0
 800a6f6:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800a6f8:	2300      	movs	r3, #0
 800a6fa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 800a6fc:	230d      	movs	r3, #13
 800a6fe:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a700:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a704:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a706:	2300      	movs	r3, #0
 800a708:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a70a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a70e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a710:	f107 0308 	add.w	r3, r7, #8
 800a714:	4619      	mov	r1, r3
 800a716:	6878      	ldr	r0, [r7, #4]
 800a718:	f7ff fd20 	bl	800a15c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 800a71c:	f241 3288 	movw	r2, #5000	; 0x1388
 800a720:	210d      	movs	r1, #13
 800a722:	6878      	ldr	r0, [r7, #4]
 800a724:	f000 f852 	bl	800a7cc <SDMMC_GetCmdResp1>
 800a728:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a72a:	69fb      	ldr	r3, [r7, #28]
}
 800a72c:	4618      	mov	r0, r3
 800a72e:	3720      	adds	r7, #32
 800a730:	46bd      	mov	sp, r7
 800a732:	bd80      	pop	{r7, pc}

0800a734 <SDMMC_CmdVoltageSwitch>:
  *         condition register (OCR)
  * @param  None
  * @retval HAL status
  */
uint32_t SDMMC_CmdVoltageSwitch(SDMMC_TypeDef *SDMMCx)
{
 800a734:	b580      	push	{r7, lr}
 800a736:	b088      	sub	sp, #32
 800a738:	af00      	add	r7, sp, #0
 800a73a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0x00000000;
 800a73c:	2300      	movs	r3, #0
 800a73e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_VOLTAGE_SWITCH;
 800a740:	230b      	movs	r3, #11
 800a742:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a744:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a748:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a74a:	2300      	movs	r3, #0
 800a74c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a74e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a752:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a754:	f107 0308 	add.w	r3, r7, #8
 800a758:	4619      	mov	r1, r3
 800a75a:	6878      	ldr	r0, [r7, #4]
 800a75c:	f7ff fcfe 	bl	800a15c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_VOLTAGE_SWITCH, SDMMC_CMDTIMEOUT);
 800a760:	f241 3288 	movw	r2, #5000	; 0x1388
 800a764:	210b      	movs	r1, #11
 800a766:	6878      	ldr	r0, [r7, #4]
 800a768:	f000 f830 	bl	800a7cc <SDMMC_GetCmdResp1>
 800a76c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a76e:	69fb      	ldr	r3, [r7, #28]
}
 800a770:	4618      	mov	r0, r3
 800a772:	3720      	adds	r7, #32
 800a774:	46bd      	mov	sp, r7
 800a776:	bd80      	pop	{r7, pc}

0800a778 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800a778:	b490      	push	{r4, r7}
 800a77a:	b082      	sub	sp, #8
 800a77c:	af00      	add	r7, sp, #0
 800a77e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a780:	4b0f      	ldr	r3, [pc, #60]	; (800a7c0 <SDMMC_GetCmdError+0x48>)
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	4a0f      	ldr	r2, [pc, #60]	; (800a7c4 <SDMMC_GetCmdError+0x4c>)
 800a786:	fba2 2303 	umull	r2, r3, r2, r3
 800a78a:	0a5b      	lsrs	r3, r3, #9
 800a78c:	f241 3288 	movw	r2, #5000	; 0x1388
 800a790:	fb02 f403 	mul.w	r4, r2, r3

  do
  {
    if (count-- == 0U)
 800a794:	4623      	mov	r3, r4
 800a796:	1e5c      	subs	r4, r3, #1
 800a798:	2b00      	cmp	r3, #0
 800a79a:	d102      	bne.n	800a7a2 <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a79c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a7a0:	e009      	b.n	800a7b6 <SDMMC_GetCmdError+0x3e>
    }

  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a7a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a7aa:	2b00      	cmp	r3, #0
 800a7ac:	d0f2      	beq.n	800a794 <SDMMC_GetCmdError+0x1c>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	4a05      	ldr	r2, [pc, #20]	; (800a7c8 <SDMMC_GetCmdError+0x50>)
 800a7b2:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 800a7b4:	2300      	movs	r3, #0
}
 800a7b6:	4618      	mov	r0, r3
 800a7b8:	3708      	adds	r7, #8
 800a7ba:	46bd      	mov	sp, r7
 800a7bc:	bc90      	pop	{r4, r7}
 800a7be:	4770      	bx	lr
 800a7c0:	24000040 	.word	0x24000040
 800a7c4:	10624dd3 	.word	0x10624dd3
 800a7c8:	002000c5 	.word	0x002000c5

0800a7cc <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800a7cc:	b590      	push	{r4, r7, lr}
 800a7ce:	b087      	sub	sp, #28
 800a7d0:	af00      	add	r7, sp, #0
 800a7d2:	60f8      	str	r0, [r7, #12]
 800a7d4:	460b      	mov	r3, r1
 800a7d6:	607a      	str	r2, [r7, #4]
 800a7d8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800a7da:	4b6f      	ldr	r3, [pc, #444]	; (800a998 <SDMMC_GetCmdResp1+0x1cc>)
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	4a6f      	ldr	r2, [pc, #444]	; (800a99c <SDMMC_GetCmdResp1+0x1d0>)
 800a7e0:	fba2 2303 	umull	r2, r3, r2, r3
 800a7e4:	0a5b      	lsrs	r3, r3, #9
 800a7e6:	687a      	ldr	r2, [r7, #4]
 800a7e8:	fb02 f403 	mul.w	r4, r2, r3

  do
  {
    if (count-- == 0U)
 800a7ec:	4623      	mov	r3, r4
 800a7ee:	1e5c      	subs	r4, r3, #1
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	d102      	bne.n	800a7fa <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a7f4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a7f8:	e0c9      	b.n	800a98e <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDMMCx->STA;
 800a7fa:	68fb      	ldr	r3, [r7, #12]
 800a7fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a7fe:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800a800:	697a      	ldr	r2, [r7, #20]
 800a802:	4b67      	ldr	r3, [pc, #412]	; (800a9a0 <SDMMC_GetCmdResp1+0x1d4>)
 800a804:	4013      	ands	r3, r2
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800a806:	2b00      	cmp	r3, #0
 800a808:	d0f0      	beq.n	800a7ec <SDMMC_GetCmdResp1+0x20>
 800a80a:	697b      	ldr	r3, [r7, #20]
 800a80c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800a810:	2b00      	cmp	r3, #0
 800a812:	d1eb      	bne.n	800a7ec <SDMMC_GetCmdResp1+0x20>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a814:	68fb      	ldr	r3, [r7, #12]
 800a816:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a818:	f003 0304 	and.w	r3, r3, #4
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	d004      	beq.n	800a82a <SDMMC_GetCmdResp1+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a820:	68fb      	ldr	r3, [r7, #12]
 800a822:	2204      	movs	r2, #4
 800a824:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a826:	2304      	movs	r3, #4
 800a828:	e0b1      	b.n	800a98e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800a82a:	68fb      	ldr	r3, [r7, #12]
 800a82c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a82e:	f003 0301 	and.w	r3, r3, #1
 800a832:	2b00      	cmp	r3, #0
 800a834:	d004      	beq.n	800a840 <SDMMC_GetCmdResp1+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800a836:	68fb      	ldr	r3, [r7, #12]
 800a838:	2201      	movs	r2, #1
 800a83a:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a83c:	2301      	movs	r3, #1
 800a83e:	e0a6      	b.n	800a98e <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a840:	68fb      	ldr	r3, [r7, #12]
 800a842:	4a58      	ldr	r2, [pc, #352]	; (800a9a4 <SDMMC_GetCmdResp1+0x1d8>)
 800a844:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800a846:	68f8      	ldr	r0, [r7, #12]
 800a848:	f7ff fcb2 	bl	800a1b0 <SDMMC_GetCommandResponse>
 800a84c:	4603      	mov	r3, r0
 800a84e:	461a      	mov	r2, r3
 800a850:	7afb      	ldrb	r3, [r7, #11]
 800a852:	4293      	cmp	r3, r2
 800a854:	d001      	beq.n	800a85a <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a856:	2301      	movs	r3, #1
 800a858:	e099      	b.n	800a98e <SDMMC_GetCmdResp1+0x1c2>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800a85a:	2100      	movs	r1, #0
 800a85c:	68f8      	ldr	r0, [r7, #12]
 800a85e:	f7ff fcb4 	bl	800a1ca <SDMMC_GetResponse>
 800a862:	6138      	str	r0, [r7, #16]

  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800a864:	693a      	ldr	r2, [r7, #16]
 800a866:	4b50      	ldr	r3, [pc, #320]	; (800a9a8 <SDMMC_GetCmdResp1+0x1dc>)
 800a868:	4013      	ands	r3, r2
 800a86a:	2b00      	cmp	r3, #0
 800a86c:	d101      	bne.n	800a872 <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 800a86e:	2300      	movs	r3, #0
 800a870:	e08d      	b.n	800a98e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800a872:	693b      	ldr	r3, [r7, #16]
 800a874:	2b00      	cmp	r3, #0
 800a876:	da02      	bge.n	800a87e <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800a878:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a87c:	e087      	b.n	800a98e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800a87e:	693b      	ldr	r3, [r7, #16]
 800a880:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800a884:	2b00      	cmp	r3, #0
 800a886:	d001      	beq.n	800a88c <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800a888:	2340      	movs	r3, #64	; 0x40
 800a88a:	e080      	b.n	800a98e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800a88c:	693b      	ldr	r3, [r7, #16]
 800a88e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a892:	2b00      	cmp	r3, #0
 800a894:	d001      	beq.n	800a89a <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800a896:	2380      	movs	r3, #128	; 0x80
 800a898:	e079      	b.n	800a98e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800a89a:	693b      	ldr	r3, [r7, #16]
 800a89c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	d002      	beq.n	800a8aa <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800a8a4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a8a8:	e071      	b.n	800a98e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800a8aa:	693b      	ldr	r3, [r7, #16]
 800a8ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	d002      	beq.n	800a8ba <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800a8b4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a8b8:	e069      	b.n	800a98e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800a8ba:	693b      	ldr	r3, [r7, #16]
 800a8bc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	d002      	beq.n	800a8ca <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800a8c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a8c8:	e061      	b.n	800a98e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800a8ca:	693b      	ldr	r3, [r7, #16]
 800a8cc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a8d0:	2b00      	cmp	r3, #0
 800a8d2:	d002      	beq.n	800a8da <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800a8d4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a8d8:	e059      	b.n	800a98e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800a8da:	693b      	ldr	r3, [r7, #16]
 800a8dc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	d002      	beq.n	800a8ea <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800a8e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a8e8:	e051      	b.n	800a98e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800a8ea:	693b      	ldr	r3, [r7, #16]
 800a8ec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	d002      	beq.n	800a8fa <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800a8f4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a8f8:	e049      	b.n	800a98e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800a8fa:	693b      	ldr	r3, [r7, #16]
 800a8fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a900:	2b00      	cmp	r3, #0
 800a902:	d002      	beq.n	800a90a <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800a904:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800a908:	e041      	b.n	800a98e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800a90a:	693b      	ldr	r3, [r7, #16]
 800a90c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a910:	2b00      	cmp	r3, #0
 800a912:	d002      	beq.n	800a91a <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 800a914:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a918:	e039      	b.n	800a98e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800a91a:	693b      	ldr	r3, [r7, #16]
 800a91c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a920:	2b00      	cmp	r3, #0
 800a922:	d002      	beq.n	800a92a <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800a924:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800a928:	e031      	b.n	800a98e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800a92a:	693b      	ldr	r3, [r7, #16]
 800a92c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a930:	2b00      	cmp	r3, #0
 800a932:	d002      	beq.n	800a93a <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800a934:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800a938:	e029      	b.n	800a98e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800a93a:	693b      	ldr	r3, [r7, #16]
 800a93c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a940:	2b00      	cmp	r3, #0
 800a942:	d002      	beq.n	800a94a <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800a944:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800a948:	e021      	b.n	800a98e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800a94a:	693b      	ldr	r3, [r7, #16]
 800a94c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a950:	2b00      	cmp	r3, #0
 800a952:	d002      	beq.n	800a95a <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800a954:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800a958:	e019      	b.n	800a98e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800a95a:	693b      	ldr	r3, [r7, #16]
 800a95c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a960:	2b00      	cmp	r3, #0
 800a962:	d002      	beq.n	800a96a <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800a964:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800a968:	e011      	b.n	800a98e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800a96a:	693b      	ldr	r3, [r7, #16]
 800a96c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a970:	2b00      	cmp	r3, #0
 800a972:	d002      	beq.n	800a97a <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800a974:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800a978:	e009      	b.n	800a98e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800a97a:	693b      	ldr	r3, [r7, #16]
 800a97c:	f003 0308 	and.w	r3, r3, #8
 800a980:	2b00      	cmp	r3, #0
 800a982:	d002      	beq.n	800a98a <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800a984:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800a988:	e001      	b.n	800a98e <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800a98a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800a98e:	4618      	mov	r0, r3
 800a990:	371c      	adds	r7, #28
 800a992:	46bd      	mov	sp, r7
 800a994:	bd90      	pop	{r4, r7, pc}
 800a996:	bf00      	nop
 800a998:	24000040 	.word	0x24000040
 800a99c:	10624dd3 	.word	0x10624dd3
 800a9a0:	00200045 	.word	0x00200045
 800a9a4:	002000c5 	.word	0x002000c5
 800a9a8:	fdffe008 	.word	0xfdffe008

0800a9ac <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800a9ac:	b490      	push	{r4, r7}
 800a9ae:	b084      	sub	sp, #16
 800a9b0:	af00      	add	r7, sp, #0
 800a9b2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a9b4:	4b1e      	ldr	r3, [pc, #120]	; (800aa30 <SDMMC_GetCmdResp2+0x84>)
 800a9b6:	681b      	ldr	r3, [r3, #0]
 800a9b8:	4a1e      	ldr	r2, [pc, #120]	; (800aa34 <SDMMC_GetCmdResp2+0x88>)
 800a9ba:	fba2 2303 	umull	r2, r3, r2, r3
 800a9be:	0a5b      	lsrs	r3, r3, #9
 800a9c0:	f241 3288 	movw	r2, #5000	; 0x1388
 800a9c4:	fb02 f403 	mul.w	r4, r2, r3

  do
  {
    if (count-- == 0U)
 800a9c8:	4623      	mov	r3, r4
 800a9ca:	1e5c      	subs	r4, r3, #1
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	d102      	bne.n	800a9d6 <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a9d0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a9d4:	e026      	b.n	800aa24 <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDMMCx->STA;
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a9da:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a9dc:	68fb      	ldr	r3, [r7, #12]
 800a9de:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800a9e2:	2b00      	cmp	r3, #0
 800a9e4:	d0f0      	beq.n	800a9c8 <SDMMC_GetCmdResp2+0x1c>
 800a9e6:	68fb      	ldr	r3, [r7, #12]
 800a9e8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a9ec:	2b00      	cmp	r3, #0
 800a9ee:	d1eb      	bne.n	800a9c8 <SDMMC_GetCmdResp2+0x1c>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a9f4:	f003 0304 	and.w	r3, r3, #4
 800a9f8:	2b00      	cmp	r3, #0
 800a9fa:	d004      	beq.n	800aa06 <SDMMC_GetCmdResp2+0x5a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	2204      	movs	r2, #4
 800aa00:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800aa02:	2304      	movs	r3, #4
 800aa04:	e00e      	b.n	800aa24 <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aa0a:	f003 0301 	and.w	r3, r3, #1
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	d004      	beq.n	800aa1c <SDMMC_GetCmdResp2+0x70>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	2201      	movs	r2, #1
 800aa16:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800aa18:	2301      	movs	r3, #1
 800aa1a:	e003      	b.n	800aa24 <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	4a06      	ldr	r2, [pc, #24]	; (800aa38 <SDMMC_GetCmdResp2+0x8c>)
 800aa20:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800aa22:	2300      	movs	r3, #0
}
 800aa24:	4618      	mov	r0, r3
 800aa26:	3710      	adds	r7, #16
 800aa28:	46bd      	mov	sp, r7
 800aa2a:	bc90      	pop	{r4, r7}
 800aa2c:	4770      	bx	lr
 800aa2e:	bf00      	nop
 800aa30:	24000040 	.word	0x24000040
 800aa34:	10624dd3 	.word	0x10624dd3
 800aa38:	002000c5 	.word	0x002000c5

0800aa3c <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800aa3c:	b490      	push	{r4, r7}
 800aa3e:	b084      	sub	sp, #16
 800aa40:	af00      	add	r7, sp, #0
 800aa42:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800aa44:	4b18      	ldr	r3, [pc, #96]	; (800aaa8 <SDMMC_GetCmdResp3+0x6c>)
 800aa46:	681b      	ldr	r3, [r3, #0]
 800aa48:	4a18      	ldr	r2, [pc, #96]	; (800aaac <SDMMC_GetCmdResp3+0x70>)
 800aa4a:	fba2 2303 	umull	r2, r3, r2, r3
 800aa4e:	0a5b      	lsrs	r3, r3, #9
 800aa50:	f241 3288 	movw	r2, #5000	; 0x1388
 800aa54:	fb02 f403 	mul.w	r4, r2, r3

  do
  {
    if (count-- == 0U)
 800aa58:	4623      	mov	r3, r4
 800aa5a:	1e5c      	subs	r4, r3, #1
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	d102      	bne.n	800aa66 <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800aa60:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800aa64:	e01b      	b.n	800aa9e <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDMMCx->STA;
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aa6a:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800aa6c:	68fb      	ldr	r3, [r7, #12]
 800aa6e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800aa72:	2b00      	cmp	r3, #0
 800aa74:	d0f0      	beq.n	800aa58 <SDMMC_GetCmdResp3+0x1c>
 800aa76:	68fb      	ldr	r3, [r7, #12]
 800aa78:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	d1eb      	bne.n	800aa58 <SDMMC_GetCmdResp3+0x1c>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aa84:	f003 0304 	and.w	r3, r3, #4
 800aa88:	2b00      	cmp	r3, #0
 800aa8a:	d004      	beq.n	800aa96 <SDMMC_GetCmdResp3+0x5a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	2204      	movs	r2, #4
 800aa90:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800aa92:	2304      	movs	r3, #4
 800aa94:	e003      	b.n	800aa9e <SDMMC_GetCmdResp3+0x62>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	4a05      	ldr	r2, [pc, #20]	; (800aab0 <SDMMC_GetCmdResp3+0x74>)
 800aa9a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800aa9c:	2300      	movs	r3, #0
}
 800aa9e:	4618      	mov	r0, r3
 800aaa0:	3710      	adds	r7, #16
 800aaa2:	46bd      	mov	sp, r7
 800aaa4:	bc90      	pop	{r4, r7}
 800aaa6:	4770      	bx	lr
 800aaa8:	24000040 	.word	0x24000040
 800aaac:	10624dd3 	.word	0x10624dd3
 800aab0:	002000c5 	.word	0x002000c5

0800aab4 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800aab4:	b590      	push	{r4, r7, lr}
 800aab6:	b087      	sub	sp, #28
 800aab8:	af00      	add	r7, sp, #0
 800aaba:	60f8      	str	r0, [r7, #12]
 800aabc:	460b      	mov	r3, r1
 800aabe:	607a      	str	r2, [r7, #4]
 800aac0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800aac2:	4b34      	ldr	r3, [pc, #208]	; (800ab94 <SDMMC_GetCmdResp6+0xe0>)
 800aac4:	681b      	ldr	r3, [r3, #0]
 800aac6:	4a34      	ldr	r2, [pc, #208]	; (800ab98 <SDMMC_GetCmdResp6+0xe4>)
 800aac8:	fba2 2303 	umull	r2, r3, r2, r3
 800aacc:	0a5b      	lsrs	r3, r3, #9
 800aace:	f241 3288 	movw	r2, #5000	; 0x1388
 800aad2:	fb02 f403 	mul.w	r4, r2, r3

  do
  {
    if (count-- == 0U)
 800aad6:	4623      	mov	r3, r4
 800aad8:	1e5c      	subs	r4, r3, #1
 800aada:	2b00      	cmp	r3, #0
 800aadc:	d102      	bne.n	800aae4 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 800aade:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800aae2:	e052      	b.n	800ab8a <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDMMCx->STA;
 800aae4:	68fb      	ldr	r3, [r7, #12]
 800aae6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aae8:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800aaea:	697b      	ldr	r3, [r7, #20]
 800aaec:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800aaf0:	2b00      	cmp	r3, #0
 800aaf2:	d0f0      	beq.n	800aad6 <SDMMC_GetCmdResp6+0x22>
 800aaf4:	697b      	ldr	r3, [r7, #20]
 800aaf6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	d1eb      	bne.n	800aad6 <SDMMC_GetCmdResp6+0x22>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800aafe:	68fb      	ldr	r3, [r7, #12]
 800ab00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ab02:	f003 0304 	and.w	r3, r3, #4
 800ab06:	2b00      	cmp	r3, #0
 800ab08:	d004      	beq.n	800ab14 <SDMMC_GetCmdResp6+0x60>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800ab0a:	68fb      	ldr	r3, [r7, #12]
 800ab0c:	2204      	movs	r2, #4
 800ab0e:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ab10:	2304      	movs	r3, #4
 800ab12:	e03a      	b.n	800ab8a <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800ab14:	68fb      	ldr	r3, [r7, #12]
 800ab16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ab18:	f003 0301 	and.w	r3, r3, #1
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	d004      	beq.n	800ab2a <SDMMC_GetCmdResp6+0x76>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800ab20:	68fb      	ldr	r3, [r7, #12]
 800ab22:	2201      	movs	r2, #1
 800ab24:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ab26:	2301      	movs	r3, #1
 800ab28:	e02f      	b.n	800ab8a <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800ab2a:	68f8      	ldr	r0, [r7, #12]
 800ab2c:	f7ff fb40 	bl	800a1b0 <SDMMC_GetCommandResponse>
 800ab30:	4603      	mov	r3, r0
 800ab32:	461a      	mov	r2, r3
 800ab34:	7afb      	ldrb	r3, [r7, #11]
 800ab36:	4293      	cmp	r3, r2
 800ab38:	d001      	beq.n	800ab3e <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ab3a:	2301      	movs	r3, #1
 800ab3c:	e025      	b.n	800ab8a <SDMMC_GetCmdResp6+0xd6>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800ab3e:	68fb      	ldr	r3, [r7, #12]
 800ab40:	4a16      	ldr	r2, [pc, #88]	; (800ab9c <SDMMC_GetCmdResp6+0xe8>)
 800ab42:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800ab44:	2100      	movs	r1, #0
 800ab46:	68f8      	ldr	r0, [r7, #12]
 800ab48:	f7ff fb3f 	bl	800a1ca <SDMMC_GetResponse>
 800ab4c:	6138      	str	r0, [r7, #16]

  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800ab4e:	693b      	ldr	r3, [r7, #16]
 800ab50:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800ab54:	2b00      	cmp	r3, #0
 800ab56:	d106      	bne.n	800ab66 <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800ab58:	693b      	ldr	r3, [r7, #16]
 800ab5a:	0c1b      	lsrs	r3, r3, #16
 800ab5c:	b29a      	uxth	r2, r3
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 800ab62:	2300      	movs	r3, #0
 800ab64:	e011      	b.n	800ab8a <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800ab66:	693b      	ldr	r3, [r7, #16]
 800ab68:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	d002      	beq.n	800ab76 <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800ab70:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800ab74:	e009      	b.n	800ab8a <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800ab76:	693b      	ldr	r3, [r7, #16]
 800ab78:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	d002      	beq.n	800ab86 <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800ab80:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ab84:	e001      	b.n	800ab8a <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800ab86:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800ab8a:	4618      	mov	r0, r3
 800ab8c:	371c      	adds	r7, #28
 800ab8e:	46bd      	mov	sp, r7
 800ab90:	bd90      	pop	{r4, r7, pc}
 800ab92:	bf00      	nop
 800ab94:	24000040 	.word	0x24000040
 800ab98:	10624dd3 	.word	0x10624dd3
 800ab9c:	002000c5 	.word	0x002000c5

0800aba0 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800aba0:	b490      	push	{r4, r7}
 800aba2:	b084      	sub	sp, #16
 800aba4:	af00      	add	r7, sp, #0
 800aba6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800aba8:	4b21      	ldr	r3, [pc, #132]	; (800ac30 <SDMMC_GetCmdResp7+0x90>)
 800abaa:	681b      	ldr	r3, [r3, #0]
 800abac:	4a21      	ldr	r2, [pc, #132]	; (800ac34 <SDMMC_GetCmdResp7+0x94>)
 800abae:	fba2 2303 	umull	r2, r3, r2, r3
 800abb2:	0a5b      	lsrs	r3, r3, #9
 800abb4:	f241 3288 	movw	r2, #5000	; 0x1388
 800abb8:	fb02 f403 	mul.w	r4, r2, r3

  do
  {
    if (count-- == 0U)
 800abbc:	4623      	mov	r3, r4
 800abbe:	1e5c      	subs	r4, r3, #1
 800abc0:	2b00      	cmp	r3, #0
 800abc2:	d102      	bne.n	800abca <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800abc4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800abc8:	e02c      	b.n	800ac24 <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDMMCx->STA;
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800abce:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800abd0:	68fb      	ldr	r3, [r7, #12]
 800abd2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800abd6:	2b00      	cmp	r3, #0
 800abd8:	d0f0      	beq.n	800abbc <SDMMC_GetCmdResp7+0x1c>
 800abda:	68fb      	ldr	r3, [r7, #12]
 800abdc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800abe0:	2b00      	cmp	r3, #0
 800abe2:	d1eb      	bne.n	800abbc <SDMMC_GetCmdResp7+0x1c>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800abe8:	f003 0304 	and.w	r3, r3, #4
 800abec:	2b00      	cmp	r3, #0
 800abee:	d004      	beq.n	800abfa <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	2204      	movs	r2, #4
 800abf4:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800abf6:	2304      	movs	r3, #4
 800abf8:	e014      	b.n	800ac24 <SDMMC_GetCmdResp7+0x84>
  }

  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800abfe:	f003 0301 	and.w	r3, r3, #1
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	d004      	beq.n	800ac10 <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	2201      	movs	r2, #1
 800ac0a:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ac0c:	2301      	movs	r3, #1
 800ac0e:	e009      	b.n	800ac24 <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ac14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	d002      	beq.n	800ac22 <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	2240      	movs	r2, #64	; 0x40
 800ac20:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800ac22:	2300      	movs	r3, #0

}
 800ac24:	4618      	mov	r0, r3
 800ac26:	3710      	adds	r7, #16
 800ac28:	46bd      	mov	sp, r7
 800ac2a:	bc90      	pop	{r4, r7}
 800ac2c:	4770      	bx	lr
 800ac2e:	bf00      	nop
 800ac30:	24000040 	.word	0x24000040
 800ac34:	10624dd3 	.word	0x10624dd3

0800ac38 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 800ac38:	b580      	push	{r7, lr}
 800ac3a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800ac3c:	4904      	ldr	r1, [pc, #16]	; (800ac50 <MX_FATFS_Init+0x18>)
 800ac3e:	4805      	ldr	r0, [pc, #20]	; (800ac54 <MX_FATFS_Init+0x1c>)
 800ac40:	f000 f9ec 	bl	800b01c <FATFS_LinkDriver>
 800ac44:	4603      	mov	r3, r0
 800ac46:	461a      	mov	r2, r3
 800ac48:	4b03      	ldr	r3, [pc, #12]	; (800ac58 <MX_FATFS_Init+0x20>)
 800ac4a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 800ac4c:	bf00      	nop
 800ac4e:	bd80      	pop	{r7, pc}
 800ac50:	24000354 	.word	0x24000354
 800ac54:	0800c29c 	.word	0x0800c29c
 800ac58:	24000350 	.word	0x24000350

0800ac5c <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
uint8_t BSP_SD_Init(void)
{
 800ac5c:	b580      	push	{r7, lr}
 800ac5e:	b082      	sub	sp, #8
 800ac60:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800ac62:	2300      	movs	r3, #0
 800ac64:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800ac66:	f000 f879 	bl	800ad5c <BSP_SD_IsDetected>
 800ac6a:	4603      	mov	r3, r0
 800ac6c:	2b01      	cmp	r3, #1
 800ac6e:	d001      	beq.n	800ac74 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800ac70:	2302      	movs	r3, #2
 800ac72:	e012      	b.n	800ac9a <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800ac74:	480b      	ldr	r0, [pc, #44]	; (800aca4 <BSP_SD_Init+0x48>)
 800ac76:	f7fb f897 	bl	8005da8 <HAL_SD_Init>
 800ac7a:	4603      	mov	r3, r0
 800ac7c:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800ac7e:	79fb      	ldrb	r3, [r7, #7]
 800ac80:	2b00      	cmp	r3, #0
 800ac82:	d109      	bne.n	800ac98 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800ac84:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800ac88:	4806      	ldr	r0, [pc, #24]	; (800aca4 <BSP_SD_Init+0x48>)
 800ac8a:	f7fb ff67 	bl	8006b5c <HAL_SD_ConfigWideBusOperation>
 800ac8e:	4603      	mov	r3, r0
 800ac90:	2b00      	cmp	r3, #0
 800ac92:	d001      	beq.n	800ac98 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800ac94:	2301      	movs	r3, #1
 800ac96:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800ac98:	79fb      	ldrb	r3, [r7, #7]
}
 800ac9a:	4618      	mov	r0, r3
 800ac9c:	3708      	adds	r7, #8
 800ac9e:	46bd      	mov	sp, r7
 800aca0:	bd80      	pop	{r7, pc}
 800aca2:	bf00      	nop
 800aca4:	24000180 	.word	0x24000180

0800aca8 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800aca8:	b580      	push	{r7, lr}
 800acaa:	b088      	sub	sp, #32
 800acac:	af02      	add	r7, sp, #8
 800acae:	60f8      	str	r0, [r7, #12]
 800acb0:	60b9      	str	r1, [r7, #8]
 800acb2:	607a      	str	r2, [r7, #4]
 800acb4:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800acb6:	2300      	movs	r3, #0
 800acb8:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800acba:	683b      	ldr	r3, [r7, #0]
 800acbc:	9300      	str	r3, [sp, #0]
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	68ba      	ldr	r2, [r7, #8]
 800acc2:	68f9      	ldr	r1, [r7, #12]
 800acc4:	4806      	ldr	r0, [pc, #24]	; (800ace0 <BSP_SD_ReadBlocks+0x38>)
 800acc6:	f7fb f981 	bl	8005fcc <HAL_SD_ReadBlocks>
 800acca:	4603      	mov	r3, r0
 800accc:	2b00      	cmp	r3, #0
 800acce:	d001      	beq.n	800acd4 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800acd0:	2301      	movs	r3, #1
 800acd2:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;  
 800acd4:	7dfb      	ldrb	r3, [r7, #23]
}
 800acd6:	4618      	mov	r0, r3
 800acd8:	3718      	adds	r7, #24
 800acda:	46bd      	mov	sp, r7
 800acdc:	bd80      	pop	{r7, pc}
 800acde:	bf00      	nop
 800ace0:	24000180 	.word	0x24000180

0800ace4 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800ace4:	b580      	push	{r7, lr}
 800ace6:	b088      	sub	sp, #32
 800ace8:	af02      	add	r7, sp, #8
 800acea:	60f8      	str	r0, [r7, #12]
 800acec:	60b9      	str	r1, [r7, #8]
 800acee:	607a      	str	r2, [r7, #4]
 800acf0:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800acf2:	2300      	movs	r3, #0
 800acf4:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK) 
 800acf6:	683b      	ldr	r3, [r7, #0]
 800acf8:	9300      	str	r3, [sp, #0]
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	68ba      	ldr	r2, [r7, #8]
 800acfe:	68f9      	ldr	r1, [r7, #12]
 800ad00:	4806      	ldr	r0, [pc, #24]	; (800ad1c <BSP_SD_WriteBlocks+0x38>)
 800ad02:	f7fb fb0b 	bl	800631c <HAL_SD_WriteBlocks>
 800ad06:	4603      	mov	r3, r0
 800ad08:	2b00      	cmp	r3, #0
 800ad0a:	d001      	beq.n	800ad10 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800ad0c:	2301      	movs	r3, #1
 800ad0e:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;  
 800ad10:	7dfb      	ldrb	r3, [r7, #23]
}
 800ad12:	4618      	mov	r0, r3
 800ad14:	3718      	adds	r7, #24
 800ad16:	46bd      	mov	sp, r7
 800ad18:	bd80      	pop	{r7, pc}
 800ad1a:	bf00      	nop
 800ad1c:	24000180 	.word	0x24000180

0800ad20 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
uint8_t BSP_SD_GetCardState(void)
{
 800ad20:	b580      	push	{r7, lr}
 800ad22:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800ad24:	4805      	ldr	r0, [pc, #20]	; (800ad3c <BSP_SD_GetCardState+0x1c>)
 800ad26:	f7fb ffa9 	bl	8006c7c <HAL_SD_GetCardState>
 800ad2a:	4603      	mov	r3, r0
 800ad2c:	2b04      	cmp	r3, #4
 800ad2e:	bf14      	ite	ne
 800ad30:	2301      	movne	r3, #1
 800ad32:	2300      	moveq	r3, #0
 800ad34:	b2db      	uxtb	r3, r3
}
 800ad36:	4618      	mov	r0, r3
 800ad38:	bd80      	pop	{r7, pc}
 800ad3a:	bf00      	nop
 800ad3c:	24000180 	.word	0x24000180

0800ad40 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None 
  */
void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800ad40:	b580      	push	{r7, lr}
 800ad42:	b082      	sub	sp, #8
 800ad44:	af00      	add	r7, sp, #0
 800ad46:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800ad48:	6879      	ldr	r1, [r7, #4]
 800ad4a:	4803      	ldr	r0, [pc, #12]	; (800ad58 <BSP_SD_GetCardInfo+0x18>)
 800ad4c:	f7fb feda 	bl	8006b04 <HAL_SD_GetCardInfo>
}
 800ad50:	bf00      	nop
 800ad52:	3708      	adds	r7, #8
 800ad54:	46bd      	mov	sp, r7
 800ad56:	bd80      	pop	{r7, pc}
 800ad58:	24000180 	.word	0x24000180

0800ad5c <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
uint8_t BSP_SD_IsDetected(void)
{
 800ad5c:	b580      	push	{r7, lr}
 800ad5e:	b082      	sub	sp, #8
 800ad60:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800ad62:	2301      	movs	r3, #1
 800ad64:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0) 
 800ad66:	f000 f80b 	bl	800ad80 <BSP_PlatformIsDetected>
 800ad6a:	4603      	mov	r3, r0
 800ad6c:	2b00      	cmp	r3, #0
 800ad6e:	d101      	bne.n	800ad74 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800ad70:	2300      	movs	r3, #0
 800ad72:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800ad74:	79fb      	ldrb	r3, [r7, #7]
 800ad76:	b2db      	uxtb	r3, r3
}
 800ad78:	4618      	mov	r0, r3
 800ad7a:	3708      	adds	r7, #8
 800ad7c:	46bd      	mov	sp, r7
 800ad7e:	bd80      	pop	{r7, pc}

0800ad80 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800ad80:	b580      	push	{r7, lr}
 800ad82:	b082      	sub	sp, #8
 800ad84:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800ad86:	2301      	movs	r3, #1
 800ad88:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800ad8a:	2120      	movs	r1, #32
 800ad8c:	4806      	ldr	r0, [pc, #24]	; (800ada8 <BSP_PlatformIsDetected+0x28>)
 800ad8e:	f7f6 ff45 	bl	8001c1c <HAL_GPIO_ReadPin>
 800ad92:	4603      	mov	r3, r0
 800ad94:	2b00      	cmp	r3, #0
 800ad96:	d001      	beq.n	800ad9c <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 800ad98:	2300      	movs	r3, #0
 800ad9a:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */ 
    return status;
 800ad9c:	79fb      	ldrb	r3, [r7, #7]
}  
 800ad9e:	4618      	mov	r0, r3
 800ada0:	3708      	adds	r7, #8
 800ada2:	46bd      	mov	sp, r7
 800ada4:	bd80      	pop	{r7, pc}
 800ada6:	bf00      	nop
 800ada8:	58020400 	.word	0x58020400

0800adac <SD_CheckStatus>:
/* can be used to modify / undefine following code or add new code */
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/
static DSTATUS SD_CheckStatus(BYTE lun)
{
 800adac:	b580      	push	{r7, lr}
 800adae:	b082      	sub	sp, #8
 800adb0:	af00      	add	r7, sp, #0
 800adb2:	4603      	mov	r3, r0
 800adb4:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800adb6:	4b0b      	ldr	r3, [pc, #44]	; (800ade4 <SD_CheckStatus+0x38>)
 800adb8:	2201      	movs	r2, #1
 800adba:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800adbc:	f7ff ffb0 	bl	800ad20 <BSP_SD_GetCardState>
 800adc0:	4603      	mov	r3, r0
 800adc2:	2b00      	cmp	r3, #0
 800adc4:	d107      	bne.n	800add6 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800adc6:	4b07      	ldr	r3, [pc, #28]	; (800ade4 <SD_CheckStatus+0x38>)
 800adc8:	781b      	ldrb	r3, [r3, #0]
 800adca:	b2db      	uxtb	r3, r3
 800adcc:	f023 0301 	bic.w	r3, r3, #1
 800add0:	b2da      	uxtb	r2, r3
 800add2:	4b04      	ldr	r3, [pc, #16]	; (800ade4 <SD_CheckStatus+0x38>)
 800add4:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800add6:	4b03      	ldr	r3, [pc, #12]	; (800ade4 <SD_CheckStatus+0x38>)
 800add8:	781b      	ldrb	r3, [r3, #0]
 800adda:	b2db      	uxtb	r3, r3
}
 800addc:	4618      	mov	r0, r3
 800adde:	3708      	adds	r7, #8
 800ade0:	46bd      	mov	sp, r7
 800ade2:	bd80      	pop	{r7, pc}
 800ade4:	2400004d 	.word	0x2400004d

0800ade8 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800ade8:	b580      	push	{r7, lr}
 800adea:	b082      	sub	sp, #8
 800adec:	af00      	add	r7, sp, #0
 800adee:	4603      	mov	r3, r0
 800adf0:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800adf2:	4b0b      	ldr	r3, [pc, #44]	; (800ae20 <SD_initialize+0x38>)
 800adf4:	2201      	movs	r2, #1
 800adf6:	701a      	strb	r2, [r3, #0]
#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800adf8:	f7ff ff30 	bl	800ac5c <BSP_SD_Init>
 800adfc:	4603      	mov	r3, r0
 800adfe:	2b00      	cmp	r3, #0
 800ae00:	d107      	bne.n	800ae12 <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 800ae02:	79fb      	ldrb	r3, [r7, #7]
 800ae04:	4618      	mov	r0, r3
 800ae06:	f7ff ffd1 	bl	800adac <SD_CheckStatus>
 800ae0a:	4603      	mov	r3, r0
 800ae0c:	461a      	mov	r2, r3
 800ae0e:	4b04      	ldr	r3, [pc, #16]	; (800ae20 <SD_initialize+0x38>)
 800ae10:	701a      	strb	r2, [r3, #0]
  }

#else
  Stat = SD_CheckStatus(lun);
#endif
  return Stat;
 800ae12:	4b03      	ldr	r3, [pc, #12]	; (800ae20 <SD_initialize+0x38>)
 800ae14:	781b      	ldrb	r3, [r3, #0]
 800ae16:	b2db      	uxtb	r3, r3
}
 800ae18:	4618      	mov	r0, r3
 800ae1a:	3708      	adds	r7, #8
 800ae1c:	46bd      	mov	sp, r7
 800ae1e:	bd80      	pop	{r7, pc}
 800ae20:	2400004d 	.word	0x2400004d

0800ae24 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800ae24:	b580      	push	{r7, lr}
 800ae26:	b082      	sub	sp, #8
 800ae28:	af00      	add	r7, sp, #0
 800ae2a:	4603      	mov	r3, r0
 800ae2c:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800ae2e:	79fb      	ldrb	r3, [r7, #7]
 800ae30:	4618      	mov	r0, r3
 800ae32:	f7ff ffbb 	bl	800adac <SD_CheckStatus>
 800ae36:	4603      	mov	r3, r0
}
 800ae38:	4618      	mov	r0, r3
 800ae3a:	3708      	adds	r7, #8
 800ae3c:	46bd      	mov	sp, r7
 800ae3e:	bd80      	pop	{r7, pc}

0800ae40 <SD_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800ae40:	b580      	push	{r7, lr}
 800ae42:	b086      	sub	sp, #24
 800ae44:	af00      	add	r7, sp, #0
 800ae46:	60b9      	str	r1, [r7, #8]
 800ae48:	607a      	str	r2, [r7, #4]
 800ae4a:	603b      	str	r3, [r7, #0]
 800ae4c:	4603      	mov	r3, r0
 800ae4e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800ae50:	2301      	movs	r3, #1
 800ae52:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 800ae54:	f04f 33ff 	mov.w	r3, #4294967295
 800ae58:	683a      	ldr	r2, [r7, #0]
 800ae5a:	6879      	ldr	r1, [r7, #4]
 800ae5c:	68b8      	ldr	r0, [r7, #8]
 800ae5e:	f7ff ff23 	bl	800aca8 <BSP_SD_ReadBlocks>
 800ae62:	4603      	mov	r3, r0
 800ae64:	2b00      	cmp	r3, #0
 800ae66:	d107      	bne.n	800ae78 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 800ae68:	bf00      	nop
 800ae6a:	f7ff ff59 	bl	800ad20 <BSP_SD_GetCardState>
 800ae6e:	4603      	mov	r3, r0
 800ae70:	2b00      	cmp	r3, #0
 800ae72:	d1fa      	bne.n	800ae6a <SD_read+0x2a>
    {
    }
    res = RES_OK;
 800ae74:	2300      	movs	r3, #0
 800ae76:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800ae78:	7dfb      	ldrb	r3, [r7, #23]
}
 800ae7a:	4618      	mov	r0, r3
 800ae7c:	3718      	adds	r7, #24
 800ae7e:	46bd      	mov	sp, r7
 800ae80:	bd80      	pop	{r7, pc}

0800ae82 <SD_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800ae82:	b580      	push	{r7, lr}
 800ae84:	b086      	sub	sp, #24
 800ae86:	af00      	add	r7, sp, #0
 800ae88:	60b9      	str	r1, [r7, #8]
 800ae8a:	607a      	str	r2, [r7, #4]
 800ae8c:	603b      	str	r3, [r7, #0]
 800ae8e:	4603      	mov	r3, r0
 800ae90:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800ae92:	2301      	movs	r3, #1
 800ae94:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800ae96:	f04f 33ff 	mov.w	r3, #4294967295
 800ae9a:	683a      	ldr	r2, [r7, #0]
 800ae9c:	6879      	ldr	r1, [r7, #4]
 800ae9e:	68b8      	ldr	r0, [r7, #8]
 800aea0:	f7ff ff20 	bl	800ace4 <BSP_SD_WriteBlocks>
 800aea4:	4603      	mov	r3, r0
 800aea6:	2b00      	cmp	r3, #0
 800aea8:	d107      	bne.n	800aeba <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 800aeaa:	bf00      	nop
 800aeac:	f7ff ff38 	bl	800ad20 <BSP_SD_GetCardState>
 800aeb0:	4603      	mov	r3, r0
 800aeb2:	2b00      	cmp	r3, #0
 800aeb4:	d1fa      	bne.n	800aeac <SD_write+0x2a>
    {
    }
    res = RES_OK;
 800aeb6:	2300      	movs	r3, #0
 800aeb8:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800aeba:	7dfb      	ldrb	r3, [r7, #23]
}
 800aebc:	4618      	mov	r0, r3
 800aebe:	3718      	adds	r7, #24
 800aec0:	46bd      	mov	sp, r7
 800aec2:	bd80      	pop	{r7, pc}

0800aec4 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800aec4:	b580      	push	{r7, lr}
 800aec6:	b08c      	sub	sp, #48	; 0x30
 800aec8:	af00      	add	r7, sp, #0
 800aeca:	4603      	mov	r3, r0
 800aecc:	603a      	str	r2, [r7, #0]
 800aece:	71fb      	strb	r3, [r7, #7]
 800aed0:	460b      	mov	r3, r1
 800aed2:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800aed4:	2301      	movs	r3, #1
 800aed6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800aeda:	4b25      	ldr	r3, [pc, #148]	; (800af70 <SD_ioctl+0xac>)
 800aedc:	781b      	ldrb	r3, [r3, #0]
 800aede:	b2db      	uxtb	r3, r3
 800aee0:	f003 0301 	and.w	r3, r3, #1
 800aee4:	2b00      	cmp	r3, #0
 800aee6:	d001      	beq.n	800aeec <SD_ioctl+0x28>
 800aee8:	2303      	movs	r3, #3
 800aeea:	e03c      	b.n	800af66 <SD_ioctl+0xa2>

  switch (cmd)
 800aeec:	79bb      	ldrb	r3, [r7, #6]
 800aeee:	2b03      	cmp	r3, #3
 800aef0:	d834      	bhi.n	800af5c <SD_ioctl+0x98>
 800aef2:	a201      	add	r2, pc, #4	; (adr r2, 800aef8 <SD_ioctl+0x34>)
 800aef4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aef8:	0800af09 	.word	0x0800af09
 800aefc:	0800af11 	.word	0x0800af11
 800af00:	0800af29 	.word	0x0800af29
 800af04:	0800af43 	.word	0x0800af43
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800af08:	2300      	movs	r3, #0
 800af0a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800af0e:	e028      	b.n	800af62 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800af10:	f107 0308 	add.w	r3, r7, #8
 800af14:	4618      	mov	r0, r3
 800af16:	f7ff ff13 	bl	800ad40 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800af1a:	6a3a      	ldr	r2, [r7, #32]
 800af1c:	683b      	ldr	r3, [r7, #0]
 800af1e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800af20:	2300      	movs	r3, #0
 800af22:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800af26:	e01c      	b.n	800af62 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800af28:	f107 0308 	add.w	r3, r7, #8
 800af2c:	4618      	mov	r0, r3
 800af2e:	f7ff ff07 	bl	800ad40 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800af32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af34:	b29a      	uxth	r2, r3
 800af36:	683b      	ldr	r3, [r7, #0]
 800af38:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800af3a:	2300      	movs	r3, #0
 800af3c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800af40:	e00f      	b.n	800af62 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800af42:	f107 0308 	add.w	r3, r7, #8
 800af46:	4618      	mov	r0, r3
 800af48:	f7ff fefa 	bl	800ad40 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800af4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af4e:	0a5a      	lsrs	r2, r3, #9
 800af50:	683b      	ldr	r3, [r7, #0]
 800af52:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800af54:	2300      	movs	r3, #0
 800af56:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800af5a:	e002      	b.n	800af62 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800af5c:	2304      	movs	r3, #4
 800af5e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800af62:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800af66:	4618      	mov	r0, r3
 800af68:	3730      	adds	r7, #48	; 0x30
 800af6a:	46bd      	mov	sp, r7
 800af6c:	bd80      	pop	{r7, pc}
 800af6e:	bf00      	nop
 800af70:	2400004d 	.word	0x2400004d

0800af74 <MX_LIBJPEG_Init>:
/* USER CODE BEGIN 2 */
/* USER CODE END 2 */

/* LIBJPEG init function */
void MX_LIBJPEG_Init(void)
{
 800af74:	b480      	push	{r7}
 800af76:	af00      	add	r7, sp, #0
  */

  /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */

}
 800af78:	bf00      	nop
 800af7a:	46bd      	mov	sp, r7
 800af7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af80:	4770      	bx	lr
	...

0800af84 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800af84:	b480      	push	{r7}
 800af86:	b087      	sub	sp, #28
 800af88:	af00      	add	r7, sp, #0
 800af8a:	60f8      	str	r0, [r7, #12]
 800af8c:	60b9      	str	r1, [r7, #8]
 800af8e:	4613      	mov	r3, r2
 800af90:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800af92:	2301      	movs	r3, #1
 800af94:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800af96:	2300      	movs	r3, #0
 800af98:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800af9a:	4b1f      	ldr	r3, [pc, #124]	; (800b018 <FATFS_LinkDriverEx+0x94>)
 800af9c:	7a5b      	ldrb	r3, [r3, #9]
 800af9e:	b2db      	uxtb	r3, r3
 800afa0:	2b00      	cmp	r3, #0
 800afa2:	d131      	bne.n	800b008 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800afa4:	4b1c      	ldr	r3, [pc, #112]	; (800b018 <FATFS_LinkDriverEx+0x94>)
 800afa6:	7a5b      	ldrb	r3, [r3, #9]
 800afa8:	b2db      	uxtb	r3, r3
 800afaa:	461a      	mov	r2, r3
 800afac:	4b1a      	ldr	r3, [pc, #104]	; (800b018 <FATFS_LinkDriverEx+0x94>)
 800afae:	2100      	movs	r1, #0
 800afb0:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800afb2:	4b19      	ldr	r3, [pc, #100]	; (800b018 <FATFS_LinkDriverEx+0x94>)
 800afb4:	7a5b      	ldrb	r3, [r3, #9]
 800afb6:	b2db      	uxtb	r3, r3
 800afb8:	4a17      	ldr	r2, [pc, #92]	; (800b018 <FATFS_LinkDriverEx+0x94>)
 800afba:	009b      	lsls	r3, r3, #2
 800afbc:	4413      	add	r3, r2
 800afbe:	68fa      	ldr	r2, [r7, #12]
 800afc0:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800afc2:	4b15      	ldr	r3, [pc, #84]	; (800b018 <FATFS_LinkDriverEx+0x94>)
 800afc4:	7a5b      	ldrb	r3, [r3, #9]
 800afc6:	b2db      	uxtb	r3, r3
 800afc8:	461a      	mov	r2, r3
 800afca:	4b13      	ldr	r3, [pc, #76]	; (800b018 <FATFS_LinkDriverEx+0x94>)
 800afcc:	4413      	add	r3, r2
 800afce:	79fa      	ldrb	r2, [r7, #7]
 800afd0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800afd2:	4b11      	ldr	r3, [pc, #68]	; (800b018 <FATFS_LinkDriverEx+0x94>)
 800afd4:	7a5b      	ldrb	r3, [r3, #9]
 800afd6:	b2db      	uxtb	r3, r3
 800afd8:	1c5a      	adds	r2, r3, #1
 800afda:	b2d1      	uxtb	r1, r2
 800afdc:	4a0e      	ldr	r2, [pc, #56]	; (800b018 <FATFS_LinkDriverEx+0x94>)
 800afde:	7251      	strb	r1, [r2, #9]
 800afe0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800afe2:	7dbb      	ldrb	r3, [r7, #22]
 800afe4:	3330      	adds	r3, #48	; 0x30
 800afe6:	b2da      	uxtb	r2, r3
 800afe8:	68bb      	ldr	r3, [r7, #8]
 800afea:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800afec:	68bb      	ldr	r3, [r7, #8]
 800afee:	3301      	adds	r3, #1
 800aff0:	223a      	movs	r2, #58	; 0x3a
 800aff2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800aff4:	68bb      	ldr	r3, [r7, #8]
 800aff6:	3302      	adds	r3, #2
 800aff8:	222f      	movs	r2, #47	; 0x2f
 800affa:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800affc:	68bb      	ldr	r3, [r7, #8]
 800affe:	3303      	adds	r3, #3
 800b000:	2200      	movs	r2, #0
 800b002:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800b004:	2300      	movs	r3, #0
 800b006:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800b008:	7dfb      	ldrb	r3, [r7, #23]
}
 800b00a:	4618      	mov	r0, r3
 800b00c:	371c      	adds	r7, #28
 800b00e:	46bd      	mov	sp, r7
 800b010:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b014:	4770      	bx	lr
 800b016:	bf00      	nop
 800b018:	240000d4 	.word	0x240000d4

0800b01c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800b01c:	b580      	push	{r7, lr}
 800b01e:	b082      	sub	sp, #8
 800b020:	af00      	add	r7, sp, #0
 800b022:	6078      	str	r0, [r7, #4]
 800b024:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800b026:	2200      	movs	r2, #0
 800b028:	6839      	ldr	r1, [r7, #0]
 800b02a:	6878      	ldr	r0, [r7, #4]
 800b02c:	f7ff ffaa 	bl	800af84 <FATFS_LinkDriverEx>
 800b030:	4603      	mov	r3, r0
}
 800b032:	4618      	mov	r0, r3
 800b034:	3708      	adds	r7, #8
 800b036:	46bd      	mov	sp, r7
 800b038:	bd80      	pop	{r7, pc}
	...

0800b03c <__errno>:
 800b03c:	4b01      	ldr	r3, [pc, #4]	; (800b044 <__errno+0x8>)
 800b03e:	6818      	ldr	r0, [r3, #0]
 800b040:	4770      	bx	lr
 800b042:	bf00      	nop
 800b044:	24000050 	.word	0x24000050

0800b048 <__libc_init_array>:
 800b048:	b570      	push	{r4, r5, r6, lr}
 800b04a:	4e0d      	ldr	r6, [pc, #52]	; (800b080 <__libc_init_array+0x38>)
 800b04c:	4c0d      	ldr	r4, [pc, #52]	; (800b084 <__libc_init_array+0x3c>)
 800b04e:	1ba4      	subs	r4, r4, r6
 800b050:	10a4      	asrs	r4, r4, #2
 800b052:	2500      	movs	r5, #0
 800b054:	42a5      	cmp	r5, r4
 800b056:	d109      	bne.n	800b06c <__libc_init_array+0x24>
 800b058:	4e0b      	ldr	r6, [pc, #44]	; (800b088 <__libc_init_array+0x40>)
 800b05a:	4c0c      	ldr	r4, [pc, #48]	; (800b08c <__libc_init_array+0x44>)
 800b05c:	f000 ff70 	bl	800bf40 <_init>
 800b060:	1ba4      	subs	r4, r4, r6
 800b062:	10a4      	asrs	r4, r4, #2
 800b064:	2500      	movs	r5, #0
 800b066:	42a5      	cmp	r5, r4
 800b068:	d105      	bne.n	800b076 <__libc_init_array+0x2e>
 800b06a:	bd70      	pop	{r4, r5, r6, pc}
 800b06c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800b070:	4798      	blx	r3
 800b072:	3501      	adds	r5, #1
 800b074:	e7ee      	b.n	800b054 <__libc_init_array+0xc>
 800b076:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800b07a:	4798      	blx	r3
 800b07c:	3501      	adds	r5, #1
 800b07e:	e7f2      	b.n	800b066 <__libc_init_array+0x1e>
 800b080:	0800c350 	.word	0x0800c350
 800b084:	0800c350 	.word	0x0800c350
 800b088:	0800c350 	.word	0x0800c350
 800b08c:	0800c354 	.word	0x0800c354

0800b090 <malloc>:
 800b090:	4b02      	ldr	r3, [pc, #8]	; (800b09c <malloc+0xc>)
 800b092:	4601      	mov	r1, r0
 800b094:	6818      	ldr	r0, [r3, #0]
 800b096:	f000 b859 	b.w	800b14c <_malloc_r>
 800b09a:	bf00      	nop
 800b09c:	24000050 	.word	0x24000050

0800b0a0 <memset>:
 800b0a0:	4402      	add	r2, r0
 800b0a2:	4603      	mov	r3, r0
 800b0a4:	4293      	cmp	r3, r2
 800b0a6:	d100      	bne.n	800b0aa <memset+0xa>
 800b0a8:	4770      	bx	lr
 800b0aa:	f803 1b01 	strb.w	r1, [r3], #1
 800b0ae:	e7f9      	b.n	800b0a4 <memset+0x4>

0800b0b0 <_free_r>:
 800b0b0:	b538      	push	{r3, r4, r5, lr}
 800b0b2:	4605      	mov	r5, r0
 800b0b4:	2900      	cmp	r1, #0
 800b0b6:	d045      	beq.n	800b144 <_free_r+0x94>
 800b0b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b0bc:	1f0c      	subs	r4, r1, #4
 800b0be:	2b00      	cmp	r3, #0
 800b0c0:	bfb8      	it	lt
 800b0c2:	18e4      	addlt	r4, r4, r3
 800b0c4:	f000 fbc6 	bl	800b854 <__malloc_lock>
 800b0c8:	4a1f      	ldr	r2, [pc, #124]	; (800b148 <_free_r+0x98>)
 800b0ca:	6813      	ldr	r3, [r2, #0]
 800b0cc:	4610      	mov	r0, r2
 800b0ce:	b933      	cbnz	r3, 800b0de <_free_r+0x2e>
 800b0d0:	6063      	str	r3, [r4, #4]
 800b0d2:	6014      	str	r4, [r2, #0]
 800b0d4:	4628      	mov	r0, r5
 800b0d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b0da:	f000 bbbc 	b.w	800b856 <__malloc_unlock>
 800b0de:	42a3      	cmp	r3, r4
 800b0e0:	d90c      	bls.n	800b0fc <_free_r+0x4c>
 800b0e2:	6821      	ldr	r1, [r4, #0]
 800b0e4:	1862      	adds	r2, r4, r1
 800b0e6:	4293      	cmp	r3, r2
 800b0e8:	bf04      	itt	eq
 800b0ea:	681a      	ldreq	r2, [r3, #0]
 800b0ec:	685b      	ldreq	r3, [r3, #4]
 800b0ee:	6063      	str	r3, [r4, #4]
 800b0f0:	bf04      	itt	eq
 800b0f2:	1852      	addeq	r2, r2, r1
 800b0f4:	6022      	streq	r2, [r4, #0]
 800b0f6:	6004      	str	r4, [r0, #0]
 800b0f8:	e7ec      	b.n	800b0d4 <_free_r+0x24>
 800b0fa:	4613      	mov	r3, r2
 800b0fc:	685a      	ldr	r2, [r3, #4]
 800b0fe:	b10a      	cbz	r2, 800b104 <_free_r+0x54>
 800b100:	42a2      	cmp	r2, r4
 800b102:	d9fa      	bls.n	800b0fa <_free_r+0x4a>
 800b104:	6819      	ldr	r1, [r3, #0]
 800b106:	1858      	adds	r0, r3, r1
 800b108:	42a0      	cmp	r0, r4
 800b10a:	d10b      	bne.n	800b124 <_free_r+0x74>
 800b10c:	6820      	ldr	r0, [r4, #0]
 800b10e:	4401      	add	r1, r0
 800b110:	1858      	adds	r0, r3, r1
 800b112:	4282      	cmp	r2, r0
 800b114:	6019      	str	r1, [r3, #0]
 800b116:	d1dd      	bne.n	800b0d4 <_free_r+0x24>
 800b118:	6810      	ldr	r0, [r2, #0]
 800b11a:	6852      	ldr	r2, [r2, #4]
 800b11c:	605a      	str	r2, [r3, #4]
 800b11e:	4401      	add	r1, r0
 800b120:	6019      	str	r1, [r3, #0]
 800b122:	e7d7      	b.n	800b0d4 <_free_r+0x24>
 800b124:	d902      	bls.n	800b12c <_free_r+0x7c>
 800b126:	230c      	movs	r3, #12
 800b128:	602b      	str	r3, [r5, #0]
 800b12a:	e7d3      	b.n	800b0d4 <_free_r+0x24>
 800b12c:	6820      	ldr	r0, [r4, #0]
 800b12e:	1821      	adds	r1, r4, r0
 800b130:	428a      	cmp	r2, r1
 800b132:	bf04      	itt	eq
 800b134:	6811      	ldreq	r1, [r2, #0]
 800b136:	6852      	ldreq	r2, [r2, #4]
 800b138:	6062      	str	r2, [r4, #4]
 800b13a:	bf04      	itt	eq
 800b13c:	1809      	addeq	r1, r1, r0
 800b13e:	6021      	streq	r1, [r4, #0]
 800b140:	605c      	str	r4, [r3, #4]
 800b142:	e7c7      	b.n	800b0d4 <_free_r+0x24>
 800b144:	bd38      	pop	{r3, r4, r5, pc}
 800b146:	bf00      	nop
 800b148:	240000e0 	.word	0x240000e0

0800b14c <_malloc_r>:
 800b14c:	b570      	push	{r4, r5, r6, lr}
 800b14e:	1ccd      	adds	r5, r1, #3
 800b150:	f025 0503 	bic.w	r5, r5, #3
 800b154:	3508      	adds	r5, #8
 800b156:	2d0c      	cmp	r5, #12
 800b158:	bf38      	it	cc
 800b15a:	250c      	movcc	r5, #12
 800b15c:	2d00      	cmp	r5, #0
 800b15e:	4606      	mov	r6, r0
 800b160:	db01      	blt.n	800b166 <_malloc_r+0x1a>
 800b162:	42a9      	cmp	r1, r5
 800b164:	d903      	bls.n	800b16e <_malloc_r+0x22>
 800b166:	230c      	movs	r3, #12
 800b168:	6033      	str	r3, [r6, #0]
 800b16a:	2000      	movs	r0, #0
 800b16c:	bd70      	pop	{r4, r5, r6, pc}
 800b16e:	f000 fb71 	bl	800b854 <__malloc_lock>
 800b172:	4a21      	ldr	r2, [pc, #132]	; (800b1f8 <_malloc_r+0xac>)
 800b174:	6814      	ldr	r4, [r2, #0]
 800b176:	4621      	mov	r1, r4
 800b178:	b991      	cbnz	r1, 800b1a0 <_malloc_r+0x54>
 800b17a:	4c20      	ldr	r4, [pc, #128]	; (800b1fc <_malloc_r+0xb0>)
 800b17c:	6823      	ldr	r3, [r4, #0]
 800b17e:	b91b      	cbnz	r3, 800b188 <_malloc_r+0x3c>
 800b180:	4630      	mov	r0, r6
 800b182:	f000 f8b9 	bl	800b2f8 <_sbrk_r>
 800b186:	6020      	str	r0, [r4, #0]
 800b188:	4629      	mov	r1, r5
 800b18a:	4630      	mov	r0, r6
 800b18c:	f000 f8b4 	bl	800b2f8 <_sbrk_r>
 800b190:	1c43      	adds	r3, r0, #1
 800b192:	d124      	bne.n	800b1de <_malloc_r+0x92>
 800b194:	230c      	movs	r3, #12
 800b196:	6033      	str	r3, [r6, #0]
 800b198:	4630      	mov	r0, r6
 800b19a:	f000 fb5c 	bl	800b856 <__malloc_unlock>
 800b19e:	e7e4      	b.n	800b16a <_malloc_r+0x1e>
 800b1a0:	680b      	ldr	r3, [r1, #0]
 800b1a2:	1b5b      	subs	r3, r3, r5
 800b1a4:	d418      	bmi.n	800b1d8 <_malloc_r+0x8c>
 800b1a6:	2b0b      	cmp	r3, #11
 800b1a8:	d90f      	bls.n	800b1ca <_malloc_r+0x7e>
 800b1aa:	600b      	str	r3, [r1, #0]
 800b1ac:	50cd      	str	r5, [r1, r3]
 800b1ae:	18cc      	adds	r4, r1, r3
 800b1b0:	4630      	mov	r0, r6
 800b1b2:	f000 fb50 	bl	800b856 <__malloc_unlock>
 800b1b6:	f104 000b 	add.w	r0, r4, #11
 800b1ba:	1d23      	adds	r3, r4, #4
 800b1bc:	f020 0007 	bic.w	r0, r0, #7
 800b1c0:	1ac3      	subs	r3, r0, r3
 800b1c2:	d0d3      	beq.n	800b16c <_malloc_r+0x20>
 800b1c4:	425a      	negs	r2, r3
 800b1c6:	50e2      	str	r2, [r4, r3]
 800b1c8:	e7d0      	b.n	800b16c <_malloc_r+0x20>
 800b1ca:	428c      	cmp	r4, r1
 800b1cc:	684b      	ldr	r3, [r1, #4]
 800b1ce:	bf16      	itet	ne
 800b1d0:	6063      	strne	r3, [r4, #4]
 800b1d2:	6013      	streq	r3, [r2, #0]
 800b1d4:	460c      	movne	r4, r1
 800b1d6:	e7eb      	b.n	800b1b0 <_malloc_r+0x64>
 800b1d8:	460c      	mov	r4, r1
 800b1da:	6849      	ldr	r1, [r1, #4]
 800b1dc:	e7cc      	b.n	800b178 <_malloc_r+0x2c>
 800b1de:	1cc4      	adds	r4, r0, #3
 800b1e0:	f024 0403 	bic.w	r4, r4, #3
 800b1e4:	42a0      	cmp	r0, r4
 800b1e6:	d005      	beq.n	800b1f4 <_malloc_r+0xa8>
 800b1e8:	1a21      	subs	r1, r4, r0
 800b1ea:	4630      	mov	r0, r6
 800b1ec:	f000 f884 	bl	800b2f8 <_sbrk_r>
 800b1f0:	3001      	adds	r0, #1
 800b1f2:	d0cf      	beq.n	800b194 <_malloc_r+0x48>
 800b1f4:	6025      	str	r5, [r4, #0]
 800b1f6:	e7db      	b.n	800b1b0 <_malloc_r+0x64>
 800b1f8:	240000e0 	.word	0x240000e0
 800b1fc:	240000e4 	.word	0x240000e4

0800b200 <iprintf>:
 800b200:	b40f      	push	{r0, r1, r2, r3}
 800b202:	4b0a      	ldr	r3, [pc, #40]	; (800b22c <iprintf+0x2c>)
 800b204:	b513      	push	{r0, r1, r4, lr}
 800b206:	681c      	ldr	r4, [r3, #0]
 800b208:	b124      	cbz	r4, 800b214 <iprintf+0x14>
 800b20a:	69a3      	ldr	r3, [r4, #24]
 800b20c:	b913      	cbnz	r3, 800b214 <iprintf+0x14>
 800b20e:	4620      	mov	r0, r4
 800b210:	f000 fa32 	bl	800b678 <__sinit>
 800b214:	ab05      	add	r3, sp, #20
 800b216:	9a04      	ldr	r2, [sp, #16]
 800b218:	68a1      	ldr	r1, [r4, #8]
 800b21a:	9301      	str	r3, [sp, #4]
 800b21c:	4620      	mov	r0, r4
 800b21e:	f000 fb45 	bl	800b8ac <_vfiprintf_r>
 800b222:	b002      	add	sp, #8
 800b224:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b228:	b004      	add	sp, #16
 800b22a:	4770      	bx	lr
 800b22c:	24000050 	.word	0x24000050

0800b230 <_puts_r>:
 800b230:	b570      	push	{r4, r5, r6, lr}
 800b232:	460e      	mov	r6, r1
 800b234:	4605      	mov	r5, r0
 800b236:	b118      	cbz	r0, 800b240 <_puts_r+0x10>
 800b238:	6983      	ldr	r3, [r0, #24]
 800b23a:	b90b      	cbnz	r3, 800b240 <_puts_r+0x10>
 800b23c:	f000 fa1c 	bl	800b678 <__sinit>
 800b240:	69ab      	ldr	r3, [r5, #24]
 800b242:	68ac      	ldr	r4, [r5, #8]
 800b244:	b913      	cbnz	r3, 800b24c <_puts_r+0x1c>
 800b246:	4628      	mov	r0, r5
 800b248:	f000 fa16 	bl	800b678 <__sinit>
 800b24c:	4b23      	ldr	r3, [pc, #140]	; (800b2dc <_puts_r+0xac>)
 800b24e:	429c      	cmp	r4, r3
 800b250:	d117      	bne.n	800b282 <_puts_r+0x52>
 800b252:	686c      	ldr	r4, [r5, #4]
 800b254:	89a3      	ldrh	r3, [r4, #12]
 800b256:	071b      	lsls	r3, r3, #28
 800b258:	d51d      	bpl.n	800b296 <_puts_r+0x66>
 800b25a:	6923      	ldr	r3, [r4, #16]
 800b25c:	b1db      	cbz	r3, 800b296 <_puts_r+0x66>
 800b25e:	3e01      	subs	r6, #1
 800b260:	68a3      	ldr	r3, [r4, #8]
 800b262:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800b266:	3b01      	subs	r3, #1
 800b268:	60a3      	str	r3, [r4, #8]
 800b26a:	b9e9      	cbnz	r1, 800b2a8 <_puts_r+0x78>
 800b26c:	2b00      	cmp	r3, #0
 800b26e:	da2e      	bge.n	800b2ce <_puts_r+0x9e>
 800b270:	4622      	mov	r2, r4
 800b272:	210a      	movs	r1, #10
 800b274:	4628      	mov	r0, r5
 800b276:	f000 f84f 	bl	800b318 <__swbuf_r>
 800b27a:	3001      	adds	r0, #1
 800b27c:	d011      	beq.n	800b2a2 <_puts_r+0x72>
 800b27e:	200a      	movs	r0, #10
 800b280:	e011      	b.n	800b2a6 <_puts_r+0x76>
 800b282:	4b17      	ldr	r3, [pc, #92]	; (800b2e0 <_puts_r+0xb0>)
 800b284:	429c      	cmp	r4, r3
 800b286:	d101      	bne.n	800b28c <_puts_r+0x5c>
 800b288:	68ac      	ldr	r4, [r5, #8]
 800b28a:	e7e3      	b.n	800b254 <_puts_r+0x24>
 800b28c:	4b15      	ldr	r3, [pc, #84]	; (800b2e4 <_puts_r+0xb4>)
 800b28e:	429c      	cmp	r4, r3
 800b290:	bf08      	it	eq
 800b292:	68ec      	ldreq	r4, [r5, #12]
 800b294:	e7de      	b.n	800b254 <_puts_r+0x24>
 800b296:	4621      	mov	r1, r4
 800b298:	4628      	mov	r0, r5
 800b29a:	f000 f88f 	bl	800b3bc <__swsetup_r>
 800b29e:	2800      	cmp	r0, #0
 800b2a0:	d0dd      	beq.n	800b25e <_puts_r+0x2e>
 800b2a2:	f04f 30ff 	mov.w	r0, #4294967295
 800b2a6:	bd70      	pop	{r4, r5, r6, pc}
 800b2a8:	2b00      	cmp	r3, #0
 800b2aa:	da04      	bge.n	800b2b6 <_puts_r+0x86>
 800b2ac:	69a2      	ldr	r2, [r4, #24]
 800b2ae:	429a      	cmp	r2, r3
 800b2b0:	dc06      	bgt.n	800b2c0 <_puts_r+0x90>
 800b2b2:	290a      	cmp	r1, #10
 800b2b4:	d004      	beq.n	800b2c0 <_puts_r+0x90>
 800b2b6:	6823      	ldr	r3, [r4, #0]
 800b2b8:	1c5a      	adds	r2, r3, #1
 800b2ba:	6022      	str	r2, [r4, #0]
 800b2bc:	7019      	strb	r1, [r3, #0]
 800b2be:	e7cf      	b.n	800b260 <_puts_r+0x30>
 800b2c0:	4622      	mov	r2, r4
 800b2c2:	4628      	mov	r0, r5
 800b2c4:	f000 f828 	bl	800b318 <__swbuf_r>
 800b2c8:	3001      	adds	r0, #1
 800b2ca:	d1c9      	bne.n	800b260 <_puts_r+0x30>
 800b2cc:	e7e9      	b.n	800b2a2 <_puts_r+0x72>
 800b2ce:	6823      	ldr	r3, [r4, #0]
 800b2d0:	200a      	movs	r0, #10
 800b2d2:	1c5a      	adds	r2, r3, #1
 800b2d4:	6022      	str	r2, [r4, #0]
 800b2d6:	7018      	strb	r0, [r3, #0]
 800b2d8:	e7e5      	b.n	800b2a6 <_puts_r+0x76>
 800b2da:	bf00      	nop
 800b2dc:	0800c2d4 	.word	0x0800c2d4
 800b2e0:	0800c2f4 	.word	0x0800c2f4
 800b2e4:	0800c2b4 	.word	0x0800c2b4

0800b2e8 <puts>:
 800b2e8:	4b02      	ldr	r3, [pc, #8]	; (800b2f4 <puts+0xc>)
 800b2ea:	4601      	mov	r1, r0
 800b2ec:	6818      	ldr	r0, [r3, #0]
 800b2ee:	f7ff bf9f 	b.w	800b230 <_puts_r>
 800b2f2:	bf00      	nop
 800b2f4:	24000050 	.word	0x24000050

0800b2f8 <_sbrk_r>:
 800b2f8:	b538      	push	{r3, r4, r5, lr}
 800b2fa:	4c06      	ldr	r4, [pc, #24]	; (800b314 <_sbrk_r+0x1c>)
 800b2fc:	2300      	movs	r3, #0
 800b2fe:	4605      	mov	r5, r0
 800b300:	4608      	mov	r0, r1
 800b302:	6023      	str	r3, [r4, #0]
 800b304:	f7f6 f882 	bl	800140c <_sbrk>
 800b308:	1c43      	adds	r3, r0, #1
 800b30a:	d102      	bne.n	800b312 <_sbrk_r+0x1a>
 800b30c:	6823      	ldr	r3, [r4, #0]
 800b30e:	b103      	cbz	r3, 800b312 <_sbrk_r+0x1a>
 800b310:	602b      	str	r3, [r5, #0]
 800b312:	bd38      	pop	{r3, r4, r5, pc}
 800b314:	240007b8 	.word	0x240007b8

0800b318 <__swbuf_r>:
 800b318:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b31a:	460e      	mov	r6, r1
 800b31c:	4614      	mov	r4, r2
 800b31e:	4605      	mov	r5, r0
 800b320:	b118      	cbz	r0, 800b32a <__swbuf_r+0x12>
 800b322:	6983      	ldr	r3, [r0, #24]
 800b324:	b90b      	cbnz	r3, 800b32a <__swbuf_r+0x12>
 800b326:	f000 f9a7 	bl	800b678 <__sinit>
 800b32a:	4b21      	ldr	r3, [pc, #132]	; (800b3b0 <__swbuf_r+0x98>)
 800b32c:	429c      	cmp	r4, r3
 800b32e:	d12a      	bne.n	800b386 <__swbuf_r+0x6e>
 800b330:	686c      	ldr	r4, [r5, #4]
 800b332:	69a3      	ldr	r3, [r4, #24]
 800b334:	60a3      	str	r3, [r4, #8]
 800b336:	89a3      	ldrh	r3, [r4, #12]
 800b338:	071a      	lsls	r2, r3, #28
 800b33a:	d52e      	bpl.n	800b39a <__swbuf_r+0x82>
 800b33c:	6923      	ldr	r3, [r4, #16]
 800b33e:	b363      	cbz	r3, 800b39a <__swbuf_r+0x82>
 800b340:	6923      	ldr	r3, [r4, #16]
 800b342:	6820      	ldr	r0, [r4, #0]
 800b344:	1ac0      	subs	r0, r0, r3
 800b346:	6963      	ldr	r3, [r4, #20]
 800b348:	b2f6      	uxtb	r6, r6
 800b34a:	4283      	cmp	r3, r0
 800b34c:	4637      	mov	r7, r6
 800b34e:	dc04      	bgt.n	800b35a <__swbuf_r+0x42>
 800b350:	4621      	mov	r1, r4
 800b352:	4628      	mov	r0, r5
 800b354:	f000 f926 	bl	800b5a4 <_fflush_r>
 800b358:	bb28      	cbnz	r0, 800b3a6 <__swbuf_r+0x8e>
 800b35a:	68a3      	ldr	r3, [r4, #8]
 800b35c:	3b01      	subs	r3, #1
 800b35e:	60a3      	str	r3, [r4, #8]
 800b360:	6823      	ldr	r3, [r4, #0]
 800b362:	1c5a      	adds	r2, r3, #1
 800b364:	6022      	str	r2, [r4, #0]
 800b366:	701e      	strb	r6, [r3, #0]
 800b368:	6963      	ldr	r3, [r4, #20]
 800b36a:	3001      	adds	r0, #1
 800b36c:	4283      	cmp	r3, r0
 800b36e:	d004      	beq.n	800b37a <__swbuf_r+0x62>
 800b370:	89a3      	ldrh	r3, [r4, #12]
 800b372:	07db      	lsls	r3, r3, #31
 800b374:	d519      	bpl.n	800b3aa <__swbuf_r+0x92>
 800b376:	2e0a      	cmp	r6, #10
 800b378:	d117      	bne.n	800b3aa <__swbuf_r+0x92>
 800b37a:	4621      	mov	r1, r4
 800b37c:	4628      	mov	r0, r5
 800b37e:	f000 f911 	bl	800b5a4 <_fflush_r>
 800b382:	b190      	cbz	r0, 800b3aa <__swbuf_r+0x92>
 800b384:	e00f      	b.n	800b3a6 <__swbuf_r+0x8e>
 800b386:	4b0b      	ldr	r3, [pc, #44]	; (800b3b4 <__swbuf_r+0x9c>)
 800b388:	429c      	cmp	r4, r3
 800b38a:	d101      	bne.n	800b390 <__swbuf_r+0x78>
 800b38c:	68ac      	ldr	r4, [r5, #8]
 800b38e:	e7d0      	b.n	800b332 <__swbuf_r+0x1a>
 800b390:	4b09      	ldr	r3, [pc, #36]	; (800b3b8 <__swbuf_r+0xa0>)
 800b392:	429c      	cmp	r4, r3
 800b394:	bf08      	it	eq
 800b396:	68ec      	ldreq	r4, [r5, #12]
 800b398:	e7cb      	b.n	800b332 <__swbuf_r+0x1a>
 800b39a:	4621      	mov	r1, r4
 800b39c:	4628      	mov	r0, r5
 800b39e:	f000 f80d 	bl	800b3bc <__swsetup_r>
 800b3a2:	2800      	cmp	r0, #0
 800b3a4:	d0cc      	beq.n	800b340 <__swbuf_r+0x28>
 800b3a6:	f04f 37ff 	mov.w	r7, #4294967295
 800b3aa:	4638      	mov	r0, r7
 800b3ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b3ae:	bf00      	nop
 800b3b0:	0800c2d4 	.word	0x0800c2d4
 800b3b4:	0800c2f4 	.word	0x0800c2f4
 800b3b8:	0800c2b4 	.word	0x0800c2b4

0800b3bc <__swsetup_r>:
 800b3bc:	4b32      	ldr	r3, [pc, #200]	; (800b488 <__swsetup_r+0xcc>)
 800b3be:	b570      	push	{r4, r5, r6, lr}
 800b3c0:	681d      	ldr	r5, [r3, #0]
 800b3c2:	4606      	mov	r6, r0
 800b3c4:	460c      	mov	r4, r1
 800b3c6:	b125      	cbz	r5, 800b3d2 <__swsetup_r+0x16>
 800b3c8:	69ab      	ldr	r3, [r5, #24]
 800b3ca:	b913      	cbnz	r3, 800b3d2 <__swsetup_r+0x16>
 800b3cc:	4628      	mov	r0, r5
 800b3ce:	f000 f953 	bl	800b678 <__sinit>
 800b3d2:	4b2e      	ldr	r3, [pc, #184]	; (800b48c <__swsetup_r+0xd0>)
 800b3d4:	429c      	cmp	r4, r3
 800b3d6:	d10f      	bne.n	800b3f8 <__swsetup_r+0x3c>
 800b3d8:	686c      	ldr	r4, [r5, #4]
 800b3da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b3de:	b29a      	uxth	r2, r3
 800b3e0:	0715      	lsls	r5, r2, #28
 800b3e2:	d42c      	bmi.n	800b43e <__swsetup_r+0x82>
 800b3e4:	06d0      	lsls	r0, r2, #27
 800b3e6:	d411      	bmi.n	800b40c <__swsetup_r+0x50>
 800b3e8:	2209      	movs	r2, #9
 800b3ea:	6032      	str	r2, [r6, #0]
 800b3ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b3f0:	81a3      	strh	r3, [r4, #12]
 800b3f2:	f04f 30ff 	mov.w	r0, #4294967295
 800b3f6:	e03e      	b.n	800b476 <__swsetup_r+0xba>
 800b3f8:	4b25      	ldr	r3, [pc, #148]	; (800b490 <__swsetup_r+0xd4>)
 800b3fa:	429c      	cmp	r4, r3
 800b3fc:	d101      	bne.n	800b402 <__swsetup_r+0x46>
 800b3fe:	68ac      	ldr	r4, [r5, #8]
 800b400:	e7eb      	b.n	800b3da <__swsetup_r+0x1e>
 800b402:	4b24      	ldr	r3, [pc, #144]	; (800b494 <__swsetup_r+0xd8>)
 800b404:	429c      	cmp	r4, r3
 800b406:	bf08      	it	eq
 800b408:	68ec      	ldreq	r4, [r5, #12]
 800b40a:	e7e6      	b.n	800b3da <__swsetup_r+0x1e>
 800b40c:	0751      	lsls	r1, r2, #29
 800b40e:	d512      	bpl.n	800b436 <__swsetup_r+0x7a>
 800b410:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b412:	b141      	cbz	r1, 800b426 <__swsetup_r+0x6a>
 800b414:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b418:	4299      	cmp	r1, r3
 800b41a:	d002      	beq.n	800b422 <__swsetup_r+0x66>
 800b41c:	4630      	mov	r0, r6
 800b41e:	f7ff fe47 	bl	800b0b0 <_free_r>
 800b422:	2300      	movs	r3, #0
 800b424:	6363      	str	r3, [r4, #52]	; 0x34
 800b426:	89a3      	ldrh	r3, [r4, #12]
 800b428:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b42c:	81a3      	strh	r3, [r4, #12]
 800b42e:	2300      	movs	r3, #0
 800b430:	6063      	str	r3, [r4, #4]
 800b432:	6923      	ldr	r3, [r4, #16]
 800b434:	6023      	str	r3, [r4, #0]
 800b436:	89a3      	ldrh	r3, [r4, #12]
 800b438:	f043 0308 	orr.w	r3, r3, #8
 800b43c:	81a3      	strh	r3, [r4, #12]
 800b43e:	6923      	ldr	r3, [r4, #16]
 800b440:	b94b      	cbnz	r3, 800b456 <__swsetup_r+0x9a>
 800b442:	89a3      	ldrh	r3, [r4, #12]
 800b444:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b448:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b44c:	d003      	beq.n	800b456 <__swsetup_r+0x9a>
 800b44e:	4621      	mov	r1, r4
 800b450:	4630      	mov	r0, r6
 800b452:	f000 f9bf 	bl	800b7d4 <__smakebuf_r>
 800b456:	89a2      	ldrh	r2, [r4, #12]
 800b458:	f012 0301 	ands.w	r3, r2, #1
 800b45c:	d00c      	beq.n	800b478 <__swsetup_r+0xbc>
 800b45e:	2300      	movs	r3, #0
 800b460:	60a3      	str	r3, [r4, #8]
 800b462:	6963      	ldr	r3, [r4, #20]
 800b464:	425b      	negs	r3, r3
 800b466:	61a3      	str	r3, [r4, #24]
 800b468:	6923      	ldr	r3, [r4, #16]
 800b46a:	b953      	cbnz	r3, 800b482 <__swsetup_r+0xc6>
 800b46c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b470:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800b474:	d1ba      	bne.n	800b3ec <__swsetup_r+0x30>
 800b476:	bd70      	pop	{r4, r5, r6, pc}
 800b478:	0792      	lsls	r2, r2, #30
 800b47a:	bf58      	it	pl
 800b47c:	6963      	ldrpl	r3, [r4, #20]
 800b47e:	60a3      	str	r3, [r4, #8]
 800b480:	e7f2      	b.n	800b468 <__swsetup_r+0xac>
 800b482:	2000      	movs	r0, #0
 800b484:	e7f7      	b.n	800b476 <__swsetup_r+0xba>
 800b486:	bf00      	nop
 800b488:	24000050 	.word	0x24000050
 800b48c:	0800c2d4 	.word	0x0800c2d4
 800b490:	0800c2f4 	.word	0x0800c2f4
 800b494:	0800c2b4 	.word	0x0800c2b4

0800b498 <__sflush_r>:
 800b498:	898a      	ldrh	r2, [r1, #12]
 800b49a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b49e:	4605      	mov	r5, r0
 800b4a0:	0710      	lsls	r0, r2, #28
 800b4a2:	460c      	mov	r4, r1
 800b4a4:	d458      	bmi.n	800b558 <__sflush_r+0xc0>
 800b4a6:	684b      	ldr	r3, [r1, #4]
 800b4a8:	2b00      	cmp	r3, #0
 800b4aa:	dc05      	bgt.n	800b4b8 <__sflush_r+0x20>
 800b4ac:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b4ae:	2b00      	cmp	r3, #0
 800b4b0:	dc02      	bgt.n	800b4b8 <__sflush_r+0x20>
 800b4b2:	2000      	movs	r0, #0
 800b4b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b4b8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b4ba:	2e00      	cmp	r6, #0
 800b4bc:	d0f9      	beq.n	800b4b2 <__sflush_r+0x1a>
 800b4be:	2300      	movs	r3, #0
 800b4c0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b4c4:	682f      	ldr	r7, [r5, #0]
 800b4c6:	6a21      	ldr	r1, [r4, #32]
 800b4c8:	602b      	str	r3, [r5, #0]
 800b4ca:	d032      	beq.n	800b532 <__sflush_r+0x9a>
 800b4cc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b4ce:	89a3      	ldrh	r3, [r4, #12]
 800b4d0:	075a      	lsls	r2, r3, #29
 800b4d2:	d505      	bpl.n	800b4e0 <__sflush_r+0x48>
 800b4d4:	6863      	ldr	r3, [r4, #4]
 800b4d6:	1ac0      	subs	r0, r0, r3
 800b4d8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b4da:	b10b      	cbz	r3, 800b4e0 <__sflush_r+0x48>
 800b4dc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b4de:	1ac0      	subs	r0, r0, r3
 800b4e0:	2300      	movs	r3, #0
 800b4e2:	4602      	mov	r2, r0
 800b4e4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b4e6:	6a21      	ldr	r1, [r4, #32]
 800b4e8:	4628      	mov	r0, r5
 800b4ea:	47b0      	blx	r6
 800b4ec:	1c43      	adds	r3, r0, #1
 800b4ee:	89a3      	ldrh	r3, [r4, #12]
 800b4f0:	d106      	bne.n	800b500 <__sflush_r+0x68>
 800b4f2:	6829      	ldr	r1, [r5, #0]
 800b4f4:	291d      	cmp	r1, #29
 800b4f6:	d848      	bhi.n	800b58a <__sflush_r+0xf2>
 800b4f8:	4a29      	ldr	r2, [pc, #164]	; (800b5a0 <__sflush_r+0x108>)
 800b4fa:	40ca      	lsrs	r2, r1
 800b4fc:	07d6      	lsls	r6, r2, #31
 800b4fe:	d544      	bpl.n	800b58a <__sflush_r+0xf2>
 800b500:	2200      	movs	r2, #0
 800b502:	6062      	str	r2, [r4, #4]
 800b504:	04d9      	lsls	r1, r3, #19
 800b506:	6922      	ldr	r2, [r4, #16]
 800b508:	6022      	str	r2, [r4, #0]
 800b50a:	d504      	bpl.n	800b516 <__sflush_r+0x7e>
 800b50c:	1c42      	adds	r2, r0, #1
 800b50e:	d101      	bne.n	800b514 <__sflush_r+0x7c>
 800b510:	682b      	ldr	r3, [r5, #0]
 800b512:	b903      	cbnz	r3, 800b516 <__sflush_r+0x7e>
 800b514:	6560      	str	r0, [r4, #84]	; 0x54
 800b516:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b518:	602f      	str	r7, [r5, #0]
 800b51a:	2900      	cmp	r1, #0
 800b51c:	d0c9      	beq.n	800b4b2 <__sflush_r+0x1a>
 800b51e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b522:	4299      	cmp	r1, r3
 800b524:	d002      	beq.n	800b52c <__sflush_r+0x94>
 800b526:	4628      	mov	r0, r5
 800b528:	f7ff fdc2 	bl	800b0b0 <_free_r>
 800b52c:	2000      	movs	r0, #0
 800b52e:	6360      	str	r0, [r4, #52]	; 0x34
 800b530:	e7c0      	b.n	800b4b4 <__sflush_r+0x1c>
 800b532:	2301      	movs	r3, #1
 800b534:	4628      	mov	r0, r5
 800b536:	47b0      	blx	r6
 800b538:	1c41      	adds	r1, r0, #1
 800b53a:	d1c8      	bne.n	800b4ce <__sflush_r+0x36>
 800b53c:	682b      	ldr	r3, [r5, #0]
 800b53e:	2b00      	cmp	r3, #0
 800b540:	d0c5      	beq.n	800b4ce <__sflush_r+0x36>
 800b542:	2b1d      	cmp	r3, #29
 800b544:	d001      	beq.n	800b54a <__sflush_r+0xb2>
 800b546:	2b16      	cmp	r3, #22
 800b548:	d101      	bne.n	800b54e <__sflush_r+0xb6>
 800b54a:	602f      	str	r7, [r5, #0]
 800b54c:	e7b1      	b.n	800b4b2 <__sflush_r+0x1a>
 800b54e:	89a3      	ldrh	r3, [r4, #12]
 800b550:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b554:	81a3      	strh	r3, [r4, #12]
 800b556:	e7ad      	b.n	800b4b4 <__sflush_r+0x1c>
 800b558:	690f      	ldr	r7, [r1, #16]
 800b55a:	2f00      	cmp	r7, #0
 800b55c:	d0a9      	beq.n	800b4b2 <__sflush_r+0x1a>
 800b55e:	0793      	lsls	r3, r2, #30
 800b560:	680e      	ldr	r6, [r1, #0]
 800b562:	bf08      	it	eq
 800b564:	694b      	ldreq	r3, [r1, #20]
 800b566:	600f      	str	r7, [r1, #0]
 800b568:	bf18      	it	ne
 800b56a:	2300      	movne	r3, #0
 800b56c:	eba6 0807 	sub.w	r8, r6, r7
 800b570:	608b      	str	r3, [r1, #8]
 800b572:	f1b8 0f00 	cmp.w	r8, #0
 800b576:	dd9c      	ble.n	800b4b2 <__sflush_r+0x1a>
 800b578:	4643      	mov	r3, r8
 800b57a:	463a      	mov	r2, r7
 800b57c:	6a21      	ldr	r1, [r4, #32]
 800b57e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b580:	4628      	mov	r0, r5
 800b582:	47b0      	blx	r6
 800b584:	2800      	cmp	r0, #0
 800b586:	dc06      	bgt.n	800b596 <__sflush_r+0xfe>
 800b588:	89a3      	ldrh	r3, [r4, #12]
 800b58a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b58e:	81a3      	strh	r3, [r4, #12]
 800b590:	f04f 30ff 	mov.w	r0, #4294967295
 800b594:	e78e      	b.n	800b4b4 <__sflush_r+0x1c>
 800b596:	4407      	add	r7, r0
 800b598:	eba8 0800 	sub.w	r8, r8, r0
 800b59c:	e7e9      	b.n	800b572 <__sflush_r+0xda>
 800b59e:	bf00      	nop
 800b5a0:	20400001 	.word	0x20400001

0800b5a4 <_fflush_r>:
 800b5a4:	b538      	push	{r3, r4, r5, lr}
 800b5a6:	690b      	ldr	r3, [r1, #16]
 800b5a8:	4605      	mov	r5, r0
 800b5aa:	460c      	mov	r4, r1
 800b5ac:	b1db      	cbz	r3, 800b5e6 <_fflush_r+0x42>
 800b5ae:	b118      	cbz	r0, 800b5b8 <_fflush_r+0x14>
 800b5b0:	6983      	ldr	r3, [r0, #24]
 800b5b2:	b90b      	cbnz	r3, 800b5b8 <_fflush_r+0x14>
 800b5b4:	f000 f860 	bl	800b678 <__sinit>
 800b5b8:	4b0c      	ldr	r3, [pc, #48]	; (800b5ec <_fflush_r+0x48>)
 800b5ba:	429c      	cmp	r4, r3
 800b5bc:	d109      	bne.n	800b5d2 <_fflush_r+0x2e>
 800b5be:	686c      	ldr	r4, [r5, #4]
 800b5c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b5c4:	b17b      	cbz	r3, 800b5e6 <_fflush_r+0x42>
 800b5c6:	4621      	mov	r1, r4
 800b5c8:	4628      	mov	r0, r5
 800b5ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b5ce:	f7ff bf63 	b.w	800b498 <__sflush_r>
 800b5d2:	4b07      	ldr	r3, [pc, #28]	; (800b5f0 <_fflush_r+0x4c>)
 800b5d4:	429c      	cmp	r4, r3
 800b5d6:	d101      	bne.n	800b5dc <_fflush_r+0x38>
 800b5d8:	68ac      	ldr	r4, [r5, #8]
 800b5da:	e7f1      	b.n	800b5c0 <_fflush_r+0x1c>
 800b5dc:	4b05      	ldr	r3, [pc, #20]	; (800b5f4 <_fflush_r+0x50>)
 800b5de:	429c      	cmp	r4, r3
 800b5e0:	bf08      	it	eq
 800b5e2:	68ec      	ldreq	r4, [r5, #12]
 800b5e4:	e7ec      	b.n	800b5c0 <_fflush_r+0x1c>
 800b5e6:	2000      	movs	r0, #0
 800b5e8:	bd38      	pop	{r3, r4, r5, pc}
 800b5ea:	bf00      	nop
 800b5ec:	0800c2d4 	.word	0x0800c2d4
 800b5f0:	0800c2f4 	.word	0x0800c2f4
 800b5f4:	0800c2b4 	.word	0x0800c2b4

0800b5f8 <std>:
 800b5f8:	2300      	movs	r3, #0
 800b5fa:	b510      	push	{r4, lr}
 800b5fc:	4604      	mov	r4, r0
 800b5fe:	e9c0 3300 	strd	r3, r3, [r0]
 800b602:	6083      	str	r3, [r0, #8]
 800b604:	8181      	strh	r1, [r0, #12]
 800b606:	6643      	str	r3, [r0, #100]	; 0x64
 800b608:	81c2      	strh	r2, [r0, #14]
 800b60a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b60e:	6183      	str	r3, [r0, #24]
 800b610:	4619      	mov	r1, r3
 800b612:	2208      	movs	r2, #8
 800b614:	305c      	adds	r0, #92	; 0x5c
 800b616:	f7ff fd43 	bl	800b0a0 <memset>
 800b61a:	4b05      	ldr	r3, [pc, #20]	; (800b630 <std+0x38>)
 800b61c:	6263      	str	r3, [r4, #36]	; 0x24
 800b61e:	4b05      	ldr	r3, [pc, #20]	; (800b634 <std+0x3c>)
 800b620:	62a3      	str	r3, [r4, #40]	; 0x28
 800b622:	4b05      	ldr	r3, [pc, #20]	; (800b638 <std+0x40>)
 800b624:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b626:	4b05      	ldr	r3, [pc, #20]	; (800b63c <std+0x44>)
 800b628:	6224      	str	r4, [r4, #32]
 800b62a:	6323      	str	r3, [r4, #48]	; 0x30
 800b62c:	bd10      	pop	{r4, pc}
 800b62e:	bf00      	nop
 800b630:	0800bde9 	.word	0x0800bde9
 800b634:	0800be0b 	.word	0x0800be0b
 800b638:	0800be43 	.word	0x0800be43
 800b63c:	0800be67 	.word	0x0800be67

0800b640 <_cleanup_r>:
 800b640:	4901      	ldr	r1, [pc, #4]	; (800b648 <_cleanup_r+0x8>)
 800b642:	f000 b885 	b.w	800b750 <_fwalk_reent>
 800b646:	bf00      	nop
 800b648:	0800b5a5 	.word	0x0800b5a5

0800b64c <__sfmoreglue>:
 800b64c:	b570      	push	{r4, r5, r6, lr}
 800b64e:	1e4a      	subs	r2, r1, #1
 800b650:	2568      	movs	r5, #104	; 0x68
 800b652:	4355      	muls	r5, r2
 800b654:	460e      	mov	r6, r1
 800b656:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b65a:	f7ff fd77 	bl	800b14c <_malloc_r>
 800b65e:	4604      	mov	r4, r0
 800b660:	b140      	cbz	r0, 800b674 <__sfmoreglue+0x28>
 800b662:	2100      	movs	r1, #0
 800b664:	e9c0 1600 	strd	r1, r6, [r0]
 800b668:	300c      	adds	r0, #12
 800b66a:	60a0      	str	r0, [r4, #8]
 800b66c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b670:	f7ff fd16 	bl	800b0a0 <memset>
 800b674:	4620      	mov	r0, r4
 800b676:	bd70      	pop	{r4, r5, r6, pc}

0800b678 <__sinit>:
 800b678:	6983      	ldr	r3, [r0, #24]
 800b67a:	b510      	push	{r4, lr}
 800b67c:	4604      	mov	r4, r0
 800b67e:	bb33      	cbnz	r3, 800b6ce <__sinit+0x56>
 800b680:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800b684:	6503      	str	r3, [r0, #80]	; 0x50
 800b686:	4b12      	ldr	r3, [pc, #72]	; (800b6d0 <__sinit+0x58>)
 800b688:	4a12      	ldr	r2, [pc, #72]	; (800b6d4 <__sinit+0x5c>)
 800b68a:	681b      	ldr	r3, [r3, #0]
 800b68c:	6282      	str	r2, [r0, #40]	; 0x28
 800b68e:	4298      	cmp	r0, r3
 800b690:	bf04      	itt	eq
 800b692:	2301      	moveq	r3, #1
 800b694:	6183      	streq	r3, [r0, #24]
 800b696:	f000 f81f 	bl	800b6d8 <__sfp>
 800b69a:	6060      	str	r0, [r4, #4]
 800b69c:	4620      	mov	r0, r4
 800b69e:	f000 f81b 	bl	800b6d8 <__sfp>
 800b6a2:	60a0      	str	r0, [r4, #8]
 800b6a4:	4620      	mov	r0, r4
 800b6a6:	f000 f817 	bl	800b6d8 <__sfp>
 800b6aa:	2200      	movs	r2, #0
 800b6ac:	60e0      	str	r0, [r4, #12]
 800b6ae:	2104      	movs	r1, #4
 800b6b0:	6860      	ldr	r0, [r4, #4]
 800b6b2:	f7ff ffa1 	bl	800b5f8 <std>
 800b6b6:	2201      	movs	r2, #1
 800b6b8:	2109      	movs	r1, #9
 800b6ba:	68a0      	ldr	r0, [r4, #8]
 800b6bc:	f7ff ff9c 	bl	800b5f8 <std>
 800b6c0:	2202      	movs	r2, #2
 800b6c2:	2112      	movs	r1, #18
 800b6c4:	68e0      	ldr	r0, [r4, #12]
 800b6c6:	f7ff ff97 	bl	800b5f8 <std>
 800b6ca:	2301      	movs	r3, #1
 800b6cc:	61a3      	str	r3, [r4, #24]
 800b6ce:	bd10      	pop	{r4, pc}
 800b6d0:	0800c2b0 	.word	0x0800c2b0
 800b6d4:	0800b641 	.word	0x0800b641

0800b6d8 <__sfp>:
 800b6d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b6da:	4b1b      	ldr	r3, [pc, #108]	; (800b748 <__sfp+0x70>)
 800b6dc:	681e      	ldr	r6, [r3, #0]
 800b6de:	69b3      	ldr	r3, [r6, #24]
 800b6e0:	4607      	mov	r7, r0
 800b6e2:	b913      	cbnz	r3, 800b6ea <__sfp+0x12>
 800b6e4:	4630      	mov	r0, r6
 800b6e6:	f7ff ffc7 	bl	800b678 <__sinit>
 800b6ea:	3648      	adds	r6, #72	; 0x48
 800b6ec:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b6f0:	3b01      	subs	r3, #1
 800b6f2:	d503      	bpl.n	800b6fc <__sfp+0x24>
 800b6f4:	6833      	ldr	r3, [r6, #0]
 800b6f6:	b133      	cbz	r3, 800b706 <__sfp+0x2e>
 800b6f8:	6836      	ldr	r6, [r6, #0]
 800b6fa:	e7f7      	b.n	800b6ec <__sfp+0x14>
 800b6fc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b700:	b16d      	cbz	r5, 800b71e <__sfp+0x46>
 800b702:	3468      	adds	r4, #104	; 0x68
 800b704:	e7f4      	b.n	800b6f0 <__sfp+0x18>
 800b706:	2104      	movs	r1, #4
 800b708:	4638      	mov	r0, r7
 800b70a:	f7ff ff9f 	bl	800b64c <__sfmoreglue>
 800b70e:	6030      	str	r0, [r6, #0]
 800b710:	2800      	cmp	r0, #0
 800b712:	d1f1      	bne.n	800b6f8 <__sfp+0x20>
 800b714:	230c      	movs	r3, #12
 800b716:	603b      	str	r3, [r7, #0]
 800b718:	4604      	mov	r4, r0
 800b71a:	4620      	mov	r0, r4
 800b71c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b71e:	4b0b      	ldr	r3, [pc, #44]	; (800b74c <__sfp+0x74>)
 800b720:	6665      	str	r5, [r4, #100]	; 0x64
 800b722:	e9c4 5500 	strd	r5, r5, [r4]
 800b726:	60a5      	str	r5, [r4, #8]
 800b728:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800b72c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800b730:	2208      	movs	r2, #8
 800b732:	4629      	mov	r1, r5
 800b734:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b738:	f7ff fcb2 	bl	800b0a0 <memset>
 800b73c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b740:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b744:	e7e9      	b.n	800b71a <__sfp+0x42>
 800b746:	bf00      	nop
 800b748:	0800c2b0 	.word	0x0800c2b0
 800b74c:	ffff0001 	.word	0xffff0001

0800b750 <_fwalk_reent>:
 800b750:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b754:	4680      	mov	r8, r0
 800b756:	4689      	mov	r9, r1
 800b758:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b75c:	2600      	movs	r6, #0
 800b75e:	b914      	cbnz	r4, 800b766 <_fwalk_reent+0x16>
 800b760:	4630      	mov	r0, r6
 800b762:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b766:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800b76a:	3f01      	subs	r7, #1
 800b76c:	d501      	bpl.n	800b772 <_fwalk_reent+0x22>
 800b76e:	6824      	ldr	r4, [r4, #0]
 800b770:	e7f5      	b.n	800b75e <_fwalk_reent+0xe>
 800b772:	89ab      	ldrh	r3, [r5, #12]
 800b774:	2b01      	cmp	r3, #1
 800b776:	d907      	bls.n	800b788 <_fwalk_reent+0x38>
 800b778:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b77c:	3301      	adds	r3, #1
 800b77e:	d003      	beq.n	800b788 <_fwalk_reent+0x38>
 800b780:	4629      	mov	r1, r5
 800b782:	4640      	mov	r0, r8
 800b784:	47c8      	blx	r9
 800b786:	4306      	orrs	r6, r0
 800b788:	3568      	adds	r5, #104	; 0x68
 800b78a:	e7ee      	b.n	800b76a <_fwalk_reent+0x1a>

0800b78c <__swhatbuf_r>:
 800b78c:	b570      	push	{r4, r5, r6, lr}
 800b78e:	460e      	mov	r6, r1
 800b790:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b794:	2900      	cmp	r1, #0
 800b796:	b096      	sub	sp, #88	; 0x58
 800b798:	4614      	mov	r4, r2
 800b79a:	461d      	mov	r5, r3
 800b79c:	da07      	bge.n	800b7ae <__swhatbuf_r+0x22>
 800b79e:	2300      	movs	r3, #0
 800b7a0:	602b      	str	r3, [r5, #0]
 800b7a2:	89b3      	ldrh	r3, [r6, #12]
 800b7a4:	061a      	lsls	r2, r3, #24
 800b7a6:	d410      	bmi.n	800b7ca <__swhatbuf_r+0x3e>
 800b7a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b7ac:	e00e      	b.n	800b7cc <__swhatbuf_r+0x40>
 800b7ae:	466a      	mov	r2, sp
 800b7b0:	f000 fb80 	bl	800beb4 <_fstat_r>
 800b7b4:	2800      	cmp	r0, #0
 800b7b6:	dbf2      	blt.n	800b79e <__swhatbuf_r+0x12>
 800b7b8:	9a01      	ldr	r2, [sp, #4]
 800b7ba:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b7be:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b7c2:	425a      	negs	r2, r3
 800b7c4:	415a      	adcs	r2, r3
 800b7c6:	602a      	str	r2, [r5, #0]
 800b7c8:	e7ee      	b.n	800b7a8 <__swhatbuf_r+0x1c>
 800b7ca:	2340      	movs	r3, #64	; 0x40
 800b7cc:	2000      	movs	r0, #0
 800b7ce:	6023      	str	r3, [r4, #0]
 800b7d0:	b016      	add	sp, #88	; 0x58
 800b7d2:	bd70      	pop	{r4, r5, r6, pc}

0800b7d4 <__smakebuf_r>:
 800b7d4:	898b      	ldrh	r3, [r1, #12]
 800b7d6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b7d8:	079d      	lsls	r5, r3, #30
 800b7da:	4606      	mov	r6, r0
 800b7dc:	460c      	mov	r4, r1
 800b7de:	d507      	bpl.n	800b7f0 <__smakebuf_r+0x1c>
 800b7e0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b7e4:	6023      	str	r3, [r4, #0]
 800b7e6:	6123      	str	r3, [r4, #16]
 800b7e8:	2301      	movs	r3, #1
 800b7ea:	6163      	str	r3, [r4, #20]
 800b7ec:	b002      	add	sp, #8
 800b7ee:	bd70      	pop	{r4, r5, r6, pc}
 800b7f0:	ab01      	add	r3, sp, #4
 800b7f2:	466a      	mov	r2, sp
 800b7f4:	f7ff ffca 	bl	800b78c <__swhatbuf_r>
 800b7f8:	9900      	ldr	r1, [sp, #0]
 800b7fa:	4605      	mov	r5, r0
 800b7fc:	4630      	mov	r0, r6
 800b7fe:	f7ff fca5 	bl	800b14c <_malloc_r>
 800b802:	b948      	cbnz	r0, 800b818 <__smakebuf_r+0x44>
 800b804:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b808:	059a      	lsls	r2, r3, #22
 800b80a:	d4ef      	bmi.n	800b7ec <__smakebuf_r+0x18>
 800b80c:	f023 0303 	bic.w	r3, r3, #3
 800b810:	f043 0302 	orr.w	r3, r3, #2
 800b814:	81a3      	strh	r3, [r4, #12]
 800b816:	e7e3      	b.n	800b7e0 <__smakebuf_r+0xc>
 800b818:	4b0d      	ldr	r3, [pc, #52]	; (800b850 <__smakebuf_r+0x7c>)
 800b81a:	62b3      	str	r3, [r6, #40]	; 0x28
 800b81c:	89a3      	ldrh	r3, [r4, #12]
 800b81e:	6020      	str	r0, [r4, #0]
 800b820:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b824:	81a3      	strh	r3, [r4, #12]
 800b826:	9b00      	ldr	r3, [sp, #0]
 800b828:	6163      	str	r3, [r4, #20]
 800b82a:	9b01      	ldr	r3, [sp, #4]
 800b82c:	6120      	str	r0, [r4, #16]
 800b82e:	b15b      	cbz	r3, 800b848 <__smakebuf_r+0x74>
 800b830:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b834:	4630      	mov	r0, r6
 800b836:	f000 fb4f 	bl	800bed8 <_isatty_r>
 800b83a:	b128      	cbz	r0, 800b848 <__smakebuf_r+0x74>
 800b83c:	89a3      	ldrh	r3, [r4, #12]
 800b83e:	f023 0303 	bic.w	r3, r3, #3
 800b842:	f043 0301 	orr.w	r3, r3, #1
 800b846:	81a3      	strh	r3, [r4, #12]
 800b848:	89a3      	ldrh	r3, [r4, #12]
 800b84a:	431d      	orrs	r5, r3
 800b84c:	81a5      	strh	r5, [r4, #12]
 800b84e:	e7cd      	b.n	800b7ec <__smakebuf_r+0x18>
 800b850:	0800b641 	.word	0x0800b641

0800b854 <__malloc_lock>:
 800b854:	4770      	bx	lr

0800b856 <__malloc_unlock>:
 800b856:	4770      	bx	lr

0800b858 <__sfputc_r>:
 800b858:	6893      	ldr	r3, [r2, #8]
 800b85a:	3b01      	subs	r3, #1
 800b85c:	2b00      	cmp	r3, #0
 800b85e:	b410      	push	{r4}
 800b860:	6093      	str	r3, [r2, #8]
 800b862:	da08      	bge.n	800b876 <__sfputc_r+0x1e>
 800b864:	6994      	ldr	r4, [r2, #24]
 800b866:	42a3      	cmp	r3, r4
 800b868:	db01      	blt.n	800b86e <__sfputc_r+0x16>
 800b86a:	290a      	cmp	r1, #10
 800b86c:	d103      	bne.n	800b876 <__sfputc_r+0x1e>
 800b86e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b872:	f7ff bd51 	b.w	800b318 <__swbuf_r>
 800b876:	6813      	ldr	r3, [r2, #0]
 800b878:	1c58      	adds	r0, r3, #1
 800b87a:	6010      	str	r0, [r2, #0]
 800b87c:	7019      	strb	r1, [r3, #0]
 800b87e:	4608      	mov	r0, r1
 800b880:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b884:	4770      	bx	lr

0800b886 <__sfputs_r>:
 800b886:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b888:	4606      	mov	r6, r0
 800b88a:	460f      	mov	r7, r1
 800b88c:	4614      	mov	r4, r2
 800b88e:	18d5      	adds	r5, r2, r3
 800b890:	42ac      	cmp	r4, r5
 800b892:	d101      	bne.n	800b898 <__sfputs_r+0x12>
 800b894:	2000      	movs	r0, #0
 800b896:	e007      	b.n	800b8a8 <__sfputs_r+0x22>
 800b898:	463a      	mov	r2, r7
 800b89a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b89e:	4630      	mov	r0, r6
 800b8a0:	f7ff ffda 	bl	800b858 <__sfputc_r>
 800b8a4:	1c43      	adds	r3, r0, #1
 800b8a6:	d1f3      	bne.n	800b890 <__sfputs_r+0xa>
 800b8a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b8ac <_vfiprintf_r>:
 800b8ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b8b0:	460c      	mov	r4, r1
 800b8b2:	b09d      	sub	sp, #116	; 0x74
 800b8b4:	4617      	mov	r7, r2
 800b8b6:	461d      	mov	r5, r3
 800b8b8:	4606      	mov	r6, r0
 800b8ba:	b118      	cbz	r0, 800b8c4 <_vfiprintf_r+0x18>
 800b8bc:	6983      	ldr	r3, [r0, #24]
 800b8be:	b90b      	cbnz	r3, 800b8c4 <_vfiprintf_r+0x18>
 800b8c0:	f7ff feda 	bl	800b678 <__sinit>
 800b8c4:	4b7c      	ldr	r3, [pc, #496]	; (800bab8 <_vfiprintf_r+0x20c>)
 800b8c6:	429c      	cmp	r4, r3
 800b8c8:	d158      	bne.n	800b97c <_vfiprintf_r+0xd0>
 800b8ca:	6874      	ldr	r4, [r6, #4]
 800b8cc:	89a3      	ldrh	r3, [r4, #12]
 800b8ce:	0718      	lsls	r0, r3, #28
 800b8d0:	d55e      	bpl.n	800b990 <_vfiprintf_r+0xe4>
 800b8d2:	6923      	ldr	r3, [r4, #16]
 800b8d4:	2b00      	cmp	r3, #0
 800b8d6:	d05b      	beq.n	800b990 <_vfiprintf_r+0xe4>
 800b8d8:	2300      	movs	r3, #0
 800b8da:	9309      	str	r3, [sp, #36]	; 0x24
 800b8dc:	2320      	movs	r3, #32
 800b8de:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b8e2:	2330      	movs	r3, #48	; 0x30
 800b8e4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b8e8:	9503      	str	r5, [sp, #12]
 800b8ea:	f04f 0b01 	mov.w	fp, #1
 800b8ee:	46b8      	mov	r8, r7
 800b8f0:	4645      	mov	r5, r8
 800b8f2:	f815 3b01 	ldrb.w	r3, [r5], #1
 800b8f6:	b10b      	cbz	r3, 800b8fc <_vfiprintf_r+0x50>
 800b8f8:	2b25      	cmp	r3, #37	; 0x25
 800b8fa:	d154      	bne.n	800b9a6 <_vfiprintf_r+0xfa>
 800b8fc:	ebb8 0a07 	subs.w	sl, r8, r7
 800b900:	d00b      	beq.n	800b91a <_vfiprintf_r+0x6e>
 800b902:	4653      	mov	r3, sl
 800b904:	463a      	mov	r2, r7
 800b906:	4621      	mov	r1, r4
 800b908:	4630      	mov	r0, r6
 800b90a:	f7ff ffbc 	bl	800b886 <__sfputs_r>
 800b90e:	3001      	adds	r0, #1
 800b910:	f000 80c2 	beq.w	800ba98 <_vfiprintf_r+0x1ec>
 800b914:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b916:	4453      	add	r3, sl
 800b918:	9309      	str	r3, [sp, #36]	; 0x24
 800b91a:	f898 3000 	ldrb.w	r3, [r8]
 800b91e:	2b00      	cmp	r3, #0
 800b920:	f000 80ba 	beq.w	800ba98 <_vfiprintf_r+0x1ec>
 800b924:	2300      	movs	r3, #0
 800b926:	f04f 32ff 	mov.w	r2, #4294967295
 800b92a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b92e:	9304      	str	r3, [sp, #16]
 800b930:	9307      	str	r3, [sp, #28]
 800b932:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b936:	931a      	str	r3, [sp, #104]	; 0x68
 800b938:	46a8      	mov	r8, r5
 800b93a:	2205      	movs	r2, #5
 800b93c:	f818 1b01 	ldrb.w	r1, [r8], #1
 800b940:	485e      	ldr	r0, [pc, #376]	; (800babc <_vfiprintf_r+0x210>)
 800b942:	f7f4 fccd 	bl	80002e0 <memchr>
 800b946:	9b04      	ldr	r3, [sp, #16]
 800b948:	bb78      	cbnz	r0, 800b9aa <_vfiprintf_r+0xfe>
 800b94a:	06d9      	lsls	r1, r3, #27
 800b94c:	bf44      	itt	mi
 800b94e:	2220      	movmi	r2, #32
 800b950:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800b954:	071a      	lsls	r2, r3, #28
 800b956:	bf44      	itt	mi
 800b958:	222b      	movmi	r2, #43	; 0x2b
 800b95a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800b95e:	782a      	ldrb	r2, [r5, #0]
 800b960:	2a2a      	cmp	r2, #42	; 0x2a
 800b962:	d02a      	beq.n	800b9ba <_vfiprintf_r+0x10e>
 800b964:	9a07      	ldr	r2, [sp, #28]
 800b966:	46a8      	mov	r8, r5
 800b968:	2000      	movs	r0, #0
 800b96a:	250a      	movs	r5, #10
 800b96c:	4641      	mov	r1, r8
 800b96e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b972:	3b30      	subs	r3, #48	; 0x30
 800b974:	2b09      	cmp	r3, #9
 800b976:	d969      	bls.n	800ba4c <_vfiprintf_r+0x1a0>
 800b978:	b360      	cbz	r0, 800b9d4 <_vfiprintf_r+0x128>
 800b97a:	e024      	b.n	800b9c6 <_vfiprintf_r+0x11a>
 800b97c:	4b50      	ldr	r3, [pc, #320]	; (800bac0 <_vfiprintf_r+0x214>)
 800b97e:	429c      	cmp	r4, r3
 800b980:	d101      	bne.n	800b986 <_vfiprintf_r+0xda>
 800b982:	68b4      	ldr	r4, [r6, #8]
 800b984:	e7a2      	b.n	800b8cc <_vfiprintf_r+0x20>
 800b986:	4b4f      	ldr	r3, [pc, #316]	; (800bac4 <_vfiprintf_r+0x218>)
 800b988:	429c      	cmp	r4, r3
 800b98a:	bf08      	it	eq
 800b98c:	68f4      	ldreq	r4, [r6, #12]
 800b98e:	e79d      	b.n	800b8cc <_vfiprintf_r+0x20>
 800b990:	4621      	mov	r1, r4
 800b992:	4630      	mov	r0, r6
 800b994:	f7ff fd12 	bl	800b3bc <__swsetup_r>
 800b998:	2800      	cmp	r0, #0
 800b99a:	d09d      	beq.n	800b8d8 <_vfiprintf_r+0x2c>
 800b99c:	f04f 30ff 	mov.w	r0, #4294967295
 800b9a0:	b01d      	add	sp, #116	; 0x74
 800b9a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b9a6:	46a8      	mov	r8, r5
 800b9a8:	e7a2      	b.n	800b8f0 <_vfiprintf_r+0x44>
 800b9aa:	4a44      	ldr	r2, [pc, #272]	; (800babc <_vfiprintf_r+0x210>)
 800b9ac:	1a80      	subs	r0, r0, r2
 800b9ae:	fa0b f000 	lsl.w	r0, fp, r0
 800b9b2:	4318      	orrs	r0, r3
 800b9b4:	9004      	str	r0, [sp, #16]
 800b9b6:	4645      	mov	r5, r8
 800b9b8:	e7be      	b.n	800b938 <_vfiprintf_r+0x8c>
 800b9ba:	9a03      	ldr	r2, [sp, #12]
 800b9bc:	1d11      	adds	r1, r2, #4
 800b9be:	6812      	ldr	r2, [r2, #0]
 800b9c0:	9103      	str	r1, [sp, #12]
 800b9c2:	2a00      	cmp	r2, #0
 800b9c4:	db01      	blt.n	800b9ca <_vfiprintf_r+0x11e>
 800b9c6:	9207      	str	r2, [sp, #28]
 800b9c8:	e004      	b.n	800b9d4 <_vfiprintf_r+0x128>
 800b9ca:	4252      	negs	r2, r2
 800b9cc:	f043 0302 	orr.w	r3, r3, #2
 800b9d0:	9207      	str	r2, [sp, #28]
 800b9d2:	9304      	str	r3, [sp, #16]
 800b9d4:	f898 3000 	ldrb.w	r3, [r8]
 800b9d8:	2b2e      	cmp	r3, #46	; 0x2e
 800b9da:	d10e      	bne.n	800b9fa <_vfiprintf_r+0x14e>
 800b9dc:	f898 3001 	ldrb.w	r3, [r8, #1]
 800b9e0:	2b2a      	cmp	r3, #42	; 0x2a
 800b9e2:	d138      	bne.n	800ba56 <_vfiprintf_r+0x1aa>
 800b9e4:	9b03      	ldr	r3, [sp, #12]
 800b9e6:	1d1a      	adds	r2, r3, #4
 800b9e8:	681b      	ldr	r3, [r3, #0]
 800b9ea:	9203      	str	r2, [sp, #12]
 800b9ec:	2b00      	cmp	r3, #0
 800b9ee:	bfb8      	it	lt
 800b9f0:	f04f 33ff 	movlt.w	r3, #4294967295
 800b9f4:	f108 0802 	add.w	r8, r8, #2
 800b9f8:	9305      	str	r3, [sp, #20]
 800b9fa:	4d33      	ldr	r5, [pc, #204]	; (800bac8 <_vfiprintf_r+0x21c>)
 800b9fc:	f898 1000 	ldrb.w	r1, [r8]
 800ba00:	2203      	movs	r2, #3
 800ba02:	4628      	mov	r0, r5
 800ba04:	f7f4 fc6c 	bl	80002e0 <memchr>
 800ba08:	b140      	cbz	r0, 800ba1c <_vfiprintf_r+0x170>
 800ba0a:	2340      	movs	r3, #64	; 0x40
 800ba0c:	1b40      	subs	r0, r0, r5
 800ba0e:	fa03 f000 	lsl.w	r0, r3, r0
 800ba12:	9b04      	ldr	r3, [sp, #16]
 800ba14:	4303      	orrs	r3, r0
 800ba16:	f108 0801 	add.w	r8, r8, #1
 800ba1a:	9304      	str	r3, [sp, #16]
 800ba1c:	f898 1000 	ldrb.w	r1, [r8]
 800ba20:	482a      	ldr	r0, [pc, #168]	; (800bacc <_vfiprintf_r+0x220>)
 800ba22:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ba26:	2206      	movs	r2, #6
 800ba28:	f108 0701 	add.w	r7, r8, #1
 800ba2c:	f7f4 fc58 	bl	80002e0 <memchr>
 800ba30:	2800      	cmp	r0, #0
 800ba32:	d037      	beq.n	800baa4 <_vfiprintf_r+0x1f8>
 800ba34:	4b26      	ldr	r3, [pc, #152]	; (800bad0 <_vfiprintf_r+0x224>)
 800ba36:	bb1b      	cbnz	r3, 800ba80 <_vfiprintf_r+0x1d4>
 800ba38:	9b03      	ldr	r3, [sp, #12]
 800ba3a:	3307      	adds	r3, #7
 800ba3c:	f023 0307 	bic.w	r3, r3, #7
 800ba40:	3308      	adds	r3, #8
 800ba42:	9303      	str	r3, [sp, #12]
 800ba44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ba46:	444b      	add	r3, r9
 800ba48:	9309      	str	r3, [sp, #36]	; 0x24
 800ba4a:	e750      	b.n	800b8ee <_vfiprintf_r+0x42>
 800ba4c:	fb05 3202 	mla	r2, r5, r2, r3
 800ba50:	2001      	movs	r0, #1
 800ba52:	4688      	mov	r8, r1
 800ba54:	e78a      	b.n	800b96c <_vfiprintf_r+0xc0>
 800ba56:	2300      	movs	r3, #0
 800ba58:	f108 0801 	add.w	r8, r8, #1
 800ba5c:	9305      	str	r3, [sp, #20]
 800ba5e:	4619      	mov	r1, r3
 800ba60:	250a      	movs	r5, #10
 800ba62:	4640      	mov	r0, r8
 800ba64:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ba68:	3a30      	subs	r2, #48	; 0x30
 800ba6a:	2a09      	cmp	r2, #9
 800ba6c:	d903      	bls.n	800ba76 <_vfiprintf_r+0x1ca>
 800ba6e:	2b00      	cmp	r3, #0
 800ba70:	d0c3      	beq.n	800b9fa <_vfiprintf_r+0x14e>
 800ba72:	9105      	str	r1, [sp, #20]
 800ba74:	e7c1      	b.n	800b9fa <_vfiprintf_r+0x14e>
 800ba76:	fb05 2101 	mla	r1, r5, r1, r2
 800ba7a:	2301      	movs	r3, #1
 800ba7c:	4680      	mov	r8, r0
 800ba7e:	e7f0      	b.n	800ba62 <_vfiprintf_r+0x1b6>
 800ba80:	ab03      	add	r3, sp, #12
 800ba82:	9300      	str	r3, [sp, #0]
 800ba84:	4622      	mov	r2, r4
 800ba86:	4b13      	ldr	r3, [pc, #76]	; (800bad4 <_vfiprintf_r+0x228>)
 800ba88:	a904      	add	r1, sp, #16
 800ba8a:	4630      	mov	r0, r6
 800ba8c:	f3af 8000 	nop.w
 800ba90:	f1b0 3fff 	cmp.w	r0, #4294967295
 800ba94:	4681      	mov	r9, r0
 800ba96:	d1d5      	bne.n	800ba44 <_vfiprintf_r+0x198>
 800ba98:	89a3      	ldrh	r3, [r4, #12]
 800ba9a:	065b      	lsls	r3, r3, #25
 800ba9c:	f53f af7e 	bmi.w	800b99c <_vfiprintf_r+0xf0>
 800baa0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800baa2:	e77d      	b.n	800b9a0 <_vfiprintf_r+0xf4>
 800baa4:	ab03      	add	r3, sp, #12
 800baa6:	9300      	str	r3, [sp, #0]
 800baa8:	4622      	mov	r2, r4
 800baaa:	4b0a      	ldr	r3, [pc, #40]	; (800bad4 <_vfiprintf_r+0x228>)
 800baac:	a904      	add	r1, sp, #16
 800baae:	4630      	mov	r0, r6
 800bab0:	f000 f888 	bl	800bbc4 <_printf_i>
 800bab4:	e7ec      	b.n	800ba90 <_vfiprintf_r+0x1e4>
 800bab6:	bf00      	nop
 800bab8:	0800c2d4 	.word	0x0800c2d4
 800babc:	0800c314 	.word	0x0800c314
 800bac0:	0800c2f4 	.word	0x0800c2f4
 800bac4:	0800c2b4 	.word	0x0800c2b4
 800bac8:	0800c31a 	.word	0x0800c31a
 800bacc:	0800c31e 	.word	0x0800c31e
 800bad0:	00000000 	.word	0x00000000
 800bad4:	0800b887 	.word	0x0800b887

0800bad8 <_printf_common>:
 800bad8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800badc:	4691      	mov	r9, r2
 800bade:	461f      	mov	r7, r3
 800bae0:	688a      	ldr	r2, [r1, #8]
 800bae2:	690b      	ldr	r3, [r1, #16]
 800bae4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800bae8:	4293      	cmp	r3, r2
 800baea:	bfb8      	it	lt
 800baec:	4613      	movlt	r3, r2
 800baee:	f8c9 3000 	str.w	r3, [r9]
 800baf2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800baf6:	4606      	mov	r6, r0
 800baf8:	460c      	mov	r4, r1
 800bafa:	b112      	cbz	r2, 800bb02 <_printf_common+0x2a>
 800bafc:	3301      	adds	r3, #1
 800bafe:	f8c9 3000 	str.w	r3, [r9]
 800bb02:	6823      	ldr	r3, [r4, #0]
 800bb04:	0699      	lsls	r1, r3, #26
 800bb06:	bf42      	ittt	mi
 800bb08:	f8d9 3000 	ldrmi.w	r3, [r9]
 800bb0c:	3302      	addmi	r3, #2
 800bb0e:	f8c9 3000 	strmi.w	r3, [r9]
 800bb12:	6825      	ldr	r5, [r4, #0]
 800bb14:	f015 0506 	ands.w	r5, r5, #6
 800bb18:	d107      	bne.n	800bb2a <_printf_common+0x52>
 800bb1a:	f104 0a19 	add.w	sl, r4, #25
 800bb1e:	68e3      	ldr	r3, [r4, #12]
 800bb20:	f8d9 2000 	ldr.w	r2, [r9]
 800bb24:	1a9b      	subs	r3, r3, r2
 800bb26:	42ab      	cmp	r3, r5
 800bb28:	dc28      	bgt.n	800bb7c <_printf_common+0xa4>
 800bb2a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800bb2e:	6822      	ldr	r2, [r4, #0]
 800bb30:	3300      	adds	r3, #0
 800bb32:	bf18      	it	ne
 800bb34:	2301      	movne	r3, #1
 800bb36:	0692      	lsls	r2, r2, #26
 800bb38:	d42d      	bmi.n	800bb96 <_printf_common+0xbe>
 800bb3a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800bb3e:	4639      	mov	r1, r7
 800bb40:	4630      	mov	r0, r6
 800bb42:	47c0      	blx	r8
 800bb44:	3001      	adds	r0, #1
 800bb46:	d020      	beq.n	800bb8a <_printf_common+0xb2>
 800bb48:	6823      	ldr	r3, [r4, #0]
 800bb4a:	68e5      	ldr	r5, [r4, #12]
 800bb4c:	f8d9 2000 	ldr.w	r2, [r9]
 800bb50:	f003 0306 	and.w	r3, r3, #6
 800bb54:	2b04      	cmp	r3, #4
 800bb56:	bf08      	it	eq
 800bb58:	1aad      	subeq	r5, r5, r2
 800bb5a:	68a3      	ldr	r3, [r4, #8]
 800bb5c:	6922      	ldr	r2, [r4, #16]
 800bb5e:	bf0c      	ite	eq
 800bb60:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bb64:	2500      	movne	r5, #0
 800bb66:	4293      	cmp	r3, r2
 800bb68:	bfc4      	itt	gt
 800bb6a:	1a9b      	subgt	r3, r3, r2
 800bb6c:	18ed      	addgt	r5, r5, r3
 800bb6e:	f04f 0900 	mov.w	r9, #0
 800bb72:	341a      	adds	r4, #26
 800bb74:	454d      	cmp	r5, r9
 800bb76:	d11a      	bne.n	800bbae <_printf_common+0xd6>
 800bb78:	2000      	movs	r0, #0
 800bb7a:	e008      	b.n	800bb8e <_printf_common+0xb6>
 800bb7c:	2301      	movs	r3, #1
 800bb7e:	4652      	mov	r2, sl
 800bb80:	4639      	mov	r1, r7
 800bb82:	4630      	mov	r0, r6
 800bb84:	47c0      	blx	r8
 800bb86:	3001      	adds	r0, #1
 800bb88:	d103      	bne.n	800bb92 <_printf_common+0xba>
 800bb8a:	f04f 30ff 	mov.w	r0, #4294967295
 800bb8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bb92:	3501      	adds	r5, #1
 800bb94:	e7c3      	b.n	800bb1e <_printf_common+0x46>
 800bb96:	18e1      	adds	r1, r4, r3
 800bb98:	1c5a      	adds	r2, r3, #1
 800bb9a:	2030      	movs	r0, #48	; 0x30
 800bb9c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800bba0:	4422      	add	r2, r4
 800bba2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800bba6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800bbaa:	3302      	adds	r3, #2
 800bbac:	e7c5      	b.n	800bb3a <_printf_common+0x62>
 800bbae:	2301      	movs	r3, #1
 800bbb0:	4622      	mov	r2, r4
 800bbb2:	4639      	mov	r1, r7
 800bbb4:	4630      	mov	r0, r6
 800bbb6:	47c0      	blx	r8
 800bbb8:	3001      	adds	r0, #1
 800bbba:	d0e6      	beq.n	800bb8a <_printf_common+0xb2>
 800bbbc:	f109 0901 	add.w	r9, r9, #1
 800bbc0:	e7d8      	b.n	800bb74 <_printf_common+0x9c>
	...

0800bbc4 <_printf_i>:
 800bbc4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800bbc8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800bbcc:	460c      	mov	r4, r1
 800bbce:	7e09      	ldrb	r1, [r1, #24]
 800bbd0:	b085      	sub	sp, #20
 800bbd2:	296e      	cmp	r1, #110	; 0x6e
 800bbd4:	4617      	mov	r7, r2
 800bbd6:	4606      	mov	r6, r0
 800bbd8:	4698      	mov	r8, r3
 800bbda:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800bbdc:	f000 80b3 	beq.w	800bd46 <_printf_i+0x182>
 800bbe0:	d822      	bhi.n	800bc28 <_printf_i+0x64>
 800bbe2:	2963      	cmp	r1, #99	; 0x63
 800bbe4:	d036      	beq.n	800bc54 <_printf_i+0x90>
 800bbe6:	d80a      	bhi.n	800bbfe <_printf_i+0x3a>
 800bbe8:	2900      	cmp	r1, #0
 800bbea:	f000 80b9 	beq.w	800bd60 <_printf_i+0x19c>
 800bbee:	2958      	cmp	r1, #88	; 0x58
 800bbf0:	f000 8083 	beq.w	800bcfa <_printf_i+0x136>
 800bbf4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bbf8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800bbfc:	e032      	b.n	800bc64 <_printf_i+0xa0>
 800bbfe:	2964      	cmp	r1, #100	; 0x64
 800bc00:	d001      	beq.n	800bc06 <_printf_i+0x42>
 800bc02:	2969      	cmp	r1, #105	; 0x69
 800bc04:	d1f6      	bne.n	800bbf4 <_printf_i+0x30>
 800bc06:	6820      	ldr	r0, [r4, #0]
 800bc08:	6813      	ldr	r3, [r2, #0]
 800bc0a:	0605      	lsls	r5, r0, #24
 800bc0c:	f103 0104 	add.w	r1, r3, #4
 800bc10:	d52a      	bpl.n	800bc68 <_printf_i+0xa4>
 800bc12:	681b      	ldr	r3, [r3, #0]
 800bc14:	6011      	str	r1, [r2, #0]
 800bc16:	2b00      	cmp	r3, #0
 800bc18:	da03      	bge.n	800bc22 <_printf_i+0x5e>
 800bc1a:	222d      	movs	r2, #45	; 0x2d
 800bc1c:	425b      	negs	r3, r3
 800bc1e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800bc22:	486f      	ldr	r0, [pc, #444]	; (800bde0 <_printf_i+0x21c>)
 800bc24:	220a      	movs	r2, #10
 800bc26:	e039      	b.n	800bc9c <_printf_i+0xd8>
 800bc28:	2973      	cmp	r1, #115	; 0x73
 800bc2a:	f000 809d 	beq.w	800bd68 <_printf_i+0x1a4>
 800bc2e:	d808      	bhi.n	800bc42 <_printf_i+0x7e>
 800bc30:	296f      	cmp	r1, #111	; 0x6f
 800bc32:	d020      	beq.n	800bc76 <_printf_i+0xb2>
 800bc34:	2970      	cmp	r1, #112	; 0x70
 800bc36:	d1dd      	bne.n	800bbf4 <_printf_i+0x30>
 800bc38:	6823      	ldr	r3, [r4, #0]
 800bc3a:	f043 0320 	orr.w	r3, r3, #32
 800bc3e:	6023      	str	r3, [r4, #0]
 800bc40:	e003      	b.n	800bc4a <_printf_i+0x86>
 800bc42:	2975      	cmp	r1, #117	; 0x75
 800bc44:	d017      	beq.n	800bc76 <_printf_i+0xb2>
 800bc46:	2978      	cmp	r1, #120	; 0x78
 800bc48:	d1d4      	bne.n	800bbf4 <_printf_i+0x30>
 800bc4a:	2378      	movs	r3, #120	; 0x78
 800bc4c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800bc50:	4864      	ldr	r0, [pc, #400]	; (800bde4 <_printf_i+0x220>)
 800bc52:	e055      	b.n	800bd00 <_printf_i+0x13c>
 800bc54:	6813      	ldr	r3, [r2, #0]
 800bc56:	1d19      	adds	r1, r3, #4
 800bc58:	681b      	ldr	r3, [r3, #0]
 800bc5a:	6011      	str	r1, [r2, #0]
 800bc5c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bc60:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800bc64:	2301      	movs	r3, #1
 800bc66:	e08c      	b.n	800bd82 <_printf_i+0x1be>
 800bc68:	681b      	ldr	r3, [r3, #0]
 800bc6a:	6011      	str	r1, [r2, #0]
 800bc6c:	f010 0f40 	tst.w	r0, #64	; 0x40
 800bc70:	bf18      	it	ne
 800bc72:	b21b      	sxthne	r3, r3
 800bc74:	e7cf      	b.n	800bc16 <_printf_i+0x52>
 800bc76:	6813      	ldr	r3, [r2, #0]
 800bc78:	6825      	ldr	r5, [r4, #0]
 800bc7a:	1d18      	adds	r0, r3, #4
 800bc7c:	6010      	str	r0, [r2, #0]
 800bc7e:	0628      	lsls	r0, r5, #24
 800bc80:	d501      	bpl.n	800bc86 <_printf_i+0xc2>
 800bc82:	681b      	ldr	r3, [r3, #0]
 800bc84:	e002      	b.n	800bc8c <_printf_i+0xc8>
 800bc86:	0668      	lsls	r0, r5, #25
 800bc88:	d5fb      	bpl.n	800bc82 <_printf_i+0xbe>
 800bc8a:	881b      	ldrh	r3, [r3, #0]
 800bc8c:	4854      	ldr	r0, [pc, #336]	; (800bde0 <_printf_i+0x21c>)
 800bc8e:	296f      	cmp	r1, #111	; 0x6f
 800bc90:	bf14      	ite	ne
 800bc92:	220a      	movne	r2, #10
 800bc94:	2208      	moveq	r2, #8
 800bc96:	2100      	movs	r1, #0
 800bc98:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800bc9c:	6865      	ldr	r5, [r4, #4]
 800bc9e:	60a5      	str	r5, [r4, #8]
 800bca0:	2d00      	cmp	r5, #0
 800bca2:	f2c0 8095 	blt.w	800bdd0 <_printf_i+0x20c>
 800bca6:	6821      	ldr	r1, [r4, #0]
 800bca8:	f021 0104 	bic.w	r1, r1, #4
 800bcac:	6021      	str	r1, [r4, #0]
 800bcae:	2b00      	cmp	r3, #0
 800bcb0:	d13d      	bne.n	800bd2e <_printf_i+0x16a>
 800bcb2:	2d00      	cmp	r5, #0
 800bcb4:	f040 808e 	bne.w	800bdd4 <_printf_i+0x210>
 800bcb8:	4665      	mov	r5, ip
 800bcba:	2a08      	cmp	r2, #8
 800bcbc:	d10b      	bne.n	800bcd6 <_printf_i+0x112>
 800bcbe:	6823      	ldr	r3, [r4, #0]
 800bcc0:	07db      	lsls	r3, r3, #31
 800bcc2:	d508      	bpl.n	800bcd6 <_printf_i+0x112>
 800bcc4:	6923      	ldr	r3, [r4, #16]
 800bcc6:	6862      	ldr	r2, [r4, #4]
 800bcc8:	429a      	cmp	r2, r3
 800bcca:	bfde      	ittt	le
 800bccc:	2330      	movle	r3, #48	; 0x30
 800bcce:	f805 3c01 	strble.w	r3, [r5, #-1]
 800bcd2:	f105 35ff 	addle.w	r5, r5, #4294967295
 800bcd6:	ebac 0305 	sub.w	r3, ip, r5
 800bcda:	6123      	str	r3, [r4, #16]
 800bcdc:	f8cd 8000 	str.w	r8, [sp]
 800bce0:	463b      	mov	r3, r7
 800bce2:	aa03      	add	r2, sp, #12
 800bce4:	4621      	mov	r1, r4
 800bce6:	4630      	mov	r0, r6
 800bce8:	f7ff fef6 	bl	800bad8 <_printf_common>
 800bcec:	3001      	adds	r0, #1
 800bcee:	d14d      	bne.n	800bd8c <_printf_i+0x1c8>
 800bcf0:	f04f 30ff 	mov.w	r0, #4294967295
 800bcf4:	b005      	add	sp, #20
 800bcf6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bcfa:	4839      	ldr	r0, [pc, #228]	; (800bde0 <_printf_i+0x21c>)
 800bcfc:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800bd00:	6813      	ldr	r3, [r2, #0]
 800bd02:	6821      	ldr	r1, [r4, #0]
 800bd04:	1d1d      	adds	r5, r3, #4
 800bd06:	681b      	ldr	r3, [r3, #0]
 800bd08:	6015      	str	r5, [r2, #0]
 800bd0a:	060a      	lsls	r2, r1, #24
 800bd0c:	d50b      	bpl.n	800bd26 <_printf_i+0x162>
 800bd0e:	07ca      	lsls	r2, r1, #31
 800bd10:	bf44      	itt	mi
 800bd12:	f041 0120 	orrmi.w	r1, r1, #32
 800bd16:	6021      	strmi	r1, [r4, #0]
 800bd18:	b91b      	cbnz	r3, 800bd22 <_printf_i+0x15e>
 800bd1a:	6822      	ldr	r2, [r4, #0]
 800bd1c:	f022 0220 	bic.w	r2, r2, #32
 800bd20:	6022      	str	r2, [r4, #0]
 800bd22:	2210      	movs	r2, #16
 800bd24:	e7b7      	b.n	800bc96 <_printf_i+0xd2>
 800bd26:	064d      	lsls	r5, r1, #25
 800bd28:	bf48      	it	mi
 800bd2a:	b29b      	uxthmi	r3, r3
 800bd2c:	e7ef      	b.n	800bd0e <_printf_i+0x14a>
 800bd2e:	4665      	mov	r5, ip
 800bd30:	fbb3 f1f2 	udiv	r1, r3, r2
 800bd34:	fb02 3311 	mls	r3, r2, r1, r3
 800bd38:	5cc3      	ldrb	r3, [r0, r3]
 800bd3a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800bd3e:	460b      	mov	r3, r1
 800bd40:	2900      	cmp	r1, #0
 800bd42:	d1f5      	bne.n	800bd30 <_printf_i+0x16c>
 800bd44:	e7b9      	b.n	800bcba <_printf_i+0xf6>
 800bd46:	6813      	ldr	r3, [r2, #0]
 800bd48:	6825      	ldr	r5, [r4, #0]
 800bd4a:	6961      	ldr	r1, [r4, #20]
 800bd4c:	1d18      	adds	r0, r3, #4
 800bd4e:	6010      	str	r0, [r2, #0]
 800bd50:	0628      	lsls	r0, r5, #24
 800bd52:	681b      	ldr	r3, [r3, #0]
 800bd54:	d501      	bpl.n	800bd5a <_printf_i+0x196>
 800bd56:	6019      	str	r1, [r3, #0]
 800bd58:	e002      	b.n	800bd60 <_printf_i+0x19c>
 800bd5a:	066a      	lsls	r2, r5, #25
 800bd5c:	d5fb      	bpl.n	800bd56 <_printf_i+0x192>
 800bd5e:	8019      	strh	r1, [r3, #0]
 800bd60:	2300      	movs	r3, #0
 800bd62:	6123      	str	r3, [r4, #16]
 800bd64:	4665      	mov	r5, ip
 800bd66:	e7b9      	b.n	800bcdc <_printf_i+0x118>
 800bd68:	6813      	ldr	r3, [r2, #0]
 800bd6a:	1d19      	adds	r1, r3, #4
 800bd6c:	6011      	str	r1, [r2, #0]
 800bd6e:	681d      	ldr	r5, [r3, #0]
 800bd70:	6862      	ldr	r2, [r4, #4]
 800bd72:	2100      	movs	r1, #0
 800bd74:	4628      	mov	r0, r5
 800bd76:	f7f4 fab3 	bl	80002e0 <memchr>
 800bd7a:	b108      	cbz	r0, 800bd80 <_printf_i+0x1bc>
 800bd7c:	1b40      	subs	r0, r0, r5
 800bd7e:	6060      	str	r0, [r4, #4]
 800bd80:	6863      	ldr	r3, [r4, #4]
 800bd82:	6123      	str	r3, [r4, #16]
 800bd84:	2300      	movs	r3, #0
 800bd86:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bd8a:	e7a7      	b.n	800bcdc <_printf_i+0x118>
 800bd8c:	6923      	ldr	r3, [r4, #16]
 800bd8e:	462a      	mov	r2, r5
 800bd90:	4639      	mov	r1, r7
 800bd92:	4630      	mov	r0, r6
 800bd94:	47c0      	blx	r8
 800bd96:	3001      	adds	r0, #1
 800bd98:	d0aa      	beq.n	800bcf0 <_printf_i+0x12c>
 800bd9a:	6823      	ldr	r3, [r4, #0]
 800bd9c:	079b      	lsls	r3, r3, #30
 800bd9e:	d413      	bmi.n	800bdc8 <_printf_i+0x204>
 800bda0:	68e0      	ldr	r0, [r4, #12]
 800bda2:	9b03      	ldr	r3, [sp, #12]
 800bda4:	4298      	cmp	r0, r3
 800bda6:	bfb8      	it	lt
 800bda8:	4618      	movlt	r0, r3
 800bdaa:	e7a3      	b.n	800bcf4 <_printf_i+0x130>
 800bdac:	2301      	movs	r3, #1
 800bdae:	464a      	mov	r2, r9
 800bdb0:	4639      	mov	r1, r7
 800bdb2:	4630      	mov	r0, r6
 800bdb4:	47c0      	blx	r8
 800bdb6:	3001      	adds	r0, #1
 800bdb8:	d09a      	beq.n	800bcf0 <_printf_i+0x12c>
 800bdba:	3501      	adds	r5, #1
 800bdbc:	68e3      	ldr	r3, [r4, #12]
 800bdbe:	9a03      	ldr	r2, [sp, #12]
 800bdc0:	1a9b      	subs	r3, r3, r2
 800bdc2:	42ab      	cmp	r3, r5
 800bdc4:	dcf2      	bgt.n	800bdac <_printf_i+0x1e8>
 800bdc6:	e7eb      	b.n	800bda0 <_printf_i+0x1dc>
 800bdc8:	2500      	movs	r5, #0
 800bdca:	f104 0919 	add.w	r9, r4, #25
 800bdce:	e7f5      	b.n	800bdbc <_printf_i+0x1f8>
 800bdd0:	2b00      	cmp	r3, #0
 800bdd2:	d1ac      	bne.n	800bd2e <_printf_i+0x16a>
 800bdd4:	7803      	ldrb	r3, [r0, #0]
 800bdd6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800bdda:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bdde:	e76c      	b.n	800bcba <_printf_i+0xf6>
 800bde0:	0800c325 	.word	0x0800c325
 800bde4:	0800c336 	.word	0x0800c336

0800bde8 <__sread>:
 800bde8:	b510      	push	{r4, lr}
 800bdea:	460c      	mov	r4, r1
 800bdec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bdf0:	f000 f894 	bl	800bf1c <_read_r>
 800bdf4:	2800      	cmp	r0, #0
 800bdf6:	bfab      	itete	ge
 800bdf8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800bdfa:	89a3      	ldrhlt	r3, [r4, #12]
 800bdfc:	181b      	addge	r3, r3, r0
 800bdfe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800be02:	bfac      	ite	ge
 800be04:	6563      	strge	r3, [r4, #84]	; 0x54
 800be06:	81a3      	strhlt	r3, [r4, #12]
 800be08:	bd10      	pop	{r4, pc}

0800be0a <__swrite>:
 800be0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800be0e:	461f      	mov	r7, r3
 800be10:	898b      	ldrh	r3, [r1, #12]
 800be12:	05db      	lsls	r3, r3, #23
 800be14:	4605      	mov	r5, r0
 800be16:	460c      	mov	r4, r1
 800be18:	4616      	mov	r6, r2
 800be1a:	d505      	bpl.n	800be28 <__swrite+0x1e>
 800be1c:	2302      	movs	r3, #2
 800be1e:	2200      	movs	r2, #0
 800be20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800be24:	f000 f868 	bl	800bef8 <_lseek_r>
 800be28:	89a3      	ldrh	r3, [r4, #12]
 800be2a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800be2e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800be32:	81a3      	strh	r3, [r4, #12]
 800be34:	4632      	mov	r2, r6
 800be36:	463b      	mov	r3, r7
 800be38:	4628      	mov	r0, r5
 800be3a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800be3e:	f000 b817 	b.w	800be70 <_write_r>

0800be42 <__sseek>:
 800be42:	b510      	push	{r4, lr}
 800be44:	460c      	mov	r4, r1
 800be46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800be4a:	f000 f855 	bl	800bef8 <_lseek_r>
 800be4e:	1c43      	adds	r3, r0, #1
 800be50:	89a3      	ldrh	r3, [r4, #12]
 800be52:	bf15      	itete	ne
 800be54:	6560      	strne	r0, [r4, #84]	; 0x54
 800be56:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800be5a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800be5e:	81a3      	strheq	r3, [r4, #12]
 800be60:	bf18      	it	ne
 800be62:	81a3      	strhne	r3, [r4, #12]
 800be64:	bd10      	pop	{r4, pc}

0800be66 <__sclose>:
 800be66:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800be6a:	f000 b813 	b.w	800be94 <_close_r>
	...

0800be70 <_write_r>:
 800be70:	b538      	push	{r3, r4, r5, lr}
 800be72:	4c07      	ldr	r4, [pc, #28]	; (800be90 <_write_r+0x20>)
 800be74:	4605      	mov	r5, r0
 800be76:	4608      	mov	r0, r1
 800be78:	4611      	mov	r1, r2
 800be7a:	2200      	movs	r2, #0
 800be7c:	6022      	str	r2, [r4, #0]
 800be7e:	461a      	mov	r2, r3
 800be80:	f7f5 f88a 	bl	8000f98 <_write>
 800be84:	1c43      	adds	r3, r0, #1
 800be86:	d102      	bne.n	800be8e <_write_r+0x1e>
 800be88:	6823      	ldr	r3, [r4, #0]
 800be8a:	b103      	cbz	r3, 800be8e <_write_r+0x1e>
 800be8c:	602b      	str	r3, [r5, #0]
 800be8e:	bd38      	pop	{r3, r4, r5, pc}
 800be90:	240007b8 	.word	0x240007b8

0800be94 <_close_r>:
 800be94:	b538      	push	{r3, r4, r5, lr}
 800be96:	4c06      	ldr	r4, [pc, #24]	; (800beb0 <_close_r+0x1c>)
 800be98:	2300      	movs	r3, #0
 800be9a:	4605      	mov	r5, r0
 800be9c:	4608      	mov	r0, r1
 800be9e:	6023      	str	r3, [r4, #0]
 800bea0:	f7f5 fa7f 	bl	80013a2 <_close>
 800bea4:	1c43      	adds	r3, r0, #1
 800bea6:	d102      	bne.n	800beae <_close_r+0x1a>
 800bea8:	6823      	ldr	r3, [r4, #0]
 800beaa:	b103      	cbz	r3, 800beae <_close_r+0x1a>
 800beac:	602b      	str	r3, [r5, #0]
 800beae:	bd38      	pop	{r3, r4, r5, pc}
 800beb0:	240007b8 	.word	0x240007b8

0800beb4 <_fstat_r>:
 800beb4:	b538      	push	{r3, r4, r5, lr}
 800beb6:	4c07      	ldr	r4, [pc, #28]	; (800bed4 <_fstat_r+0x20>)
 800beb8:	2300      	movs	r3, #0
 800beba:	4605      	mov	r5, r0
 800bebc:	4608      	mov	r0, r1
 800bebe:	4611      	mov	r1, r2
 800bec0:	6023      	str	r3, [r4, #0]
 800bec2:	f7f5 fa7a 	bl	80013ba <_fstat>
 800bec6:	1c43      	adds	r3, r0, #1
 800bec8:	d102      	bne.n	800bed0 <_fstat_r+0x1c>
 800beca:	6823      	ldr	r3, [r4, #0]
 800becc:	b103      	cbz	r3, 800bed0 <_fstat_r+0x1c>
 800bece:	602b      	str	r3, [r5, #0]
 800bed0:	bd38      	pop	{r3, r4, r5, pc}
 800bed2:	bf00      	nop
 800bed4:	240007b8 	.word	0x240007b8

0800bed8 <_isatty_r>:
 800bed8:	b538      	push	{r3, r4, r5, lr}
 800beda:	4c06      	ldr	r4, [pc, #24]	; (800bef4 <_isatty_r+0x1c>)
 800bedc:	2300      	movs	r3, #0
 800bede:	4605      	mov	r5, r0
 800bee0:	4608      	mov	r0, r1
 800bee2:	6023      	str	r3, [r4, #0]
 800bee4:	f7f5 fa79 	bl	80013da <_isatty>
 800bee8:	1c43      	adds	r3, r0, #1
 800beea:	d102      	bne.n	800bef2 <_isatty_r+0x1a>
 800beec:	6823      	ldr	r3, [r4, #0]
 800beee:	b103      	cbz	r3, 800bef2 <_isatty_r+0x1a>
 800bef0:	602b      	str	r3, [r5, #0]
 800bef2:	bd38      	pop	{r3, r4, r5, pc}
 800bef4:	240007b8 	.word	0x240007b8

0800bef8 <_lseek_r>:
 800bef8:	b538      	push	{r3, r4, r5, lr}
 800befa:	4c07      	ldr	r4, [pc, #28]	; (800bf18 <_lseek_r+0x20>)
 800befc:	4605      	mov	r5, r0
 800befe:	4608      	mov	r0, r1
 800bf00:	4611      	mov	r1, r2
 800bf02:	2200      	movs	r2, #0
 800bf04:	6022      	str	r2, [r4, #0]
 800bf06:	461a      	mov	r2, r3
 800bf08:	f7f5 fa72 	bl	80013f0 <_lseek>
 800bf0c:	1c43      	adds	r3, r0, #1
 800bf0e:	d102      	bne.n	800bf16 <_lseek_r+0x1e>
 800bf10:	6823      	ldr	r3, [r4, #0]
 800bf12:	b103      	cbz	r3, 800bf16 <_lseek_r+0x1e>
 800bf14:	602b      	str	r3, [r5, #0]
 800bf16:	bd38      	pop	{r3, r4, r5, pc}
 800bf18:	240007b8 	.word	0x240007b8

0800bf1c <_read_r>:
 800bf1c:	b538      	push	{r3, r4, r5, lr}
 800bf1e:	4c07      	ldr	r4, [pc, #28]	; (800bf3c <_read_r+0x20>)
 800bf20:	4605      	mov	r5, r0
 800bf22:	4608      	mov	r0, r1
 800bf24:	4611      	mov	r1, r2
 800bf26:	2200      	movs	r2, #0
 800bf28:	6022      	str	r2, [r4, #0]
 800bf2a:	461a      	mov	r2, r3
 800bf2c:	f7f5 fa1c 	bl	8001368 <_read>
 800bf30:	1c43      	adds	r3, r0, #1
 800bf32:	d102      	bne.n	800bf3a <_read_r+0x1e>
 800bf34:	6823      	ldr	r3, [r4, #0]
 800bf36:	b103      	cbz	r3, 800bf3a <_read_r+0x1e>
 800bf38:	602b      	str	r3, [r5, #0]
 800bf3a:	bd38      	pop	{r3, r4, r5, pc}
 800bf3c:	240007b8 	.word	0x240007b8

0800bf40 <_init>:
 800bf40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf42:	bf00      	nop
 800bf44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bf46:	bc08      	pop	{r3}
 800bf48:	469e      	mov	lr, r3
 800bf4a:	4770      	bx	lr

0800bf4c <_fini>:
 800bf4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf4e:	bf00      	nop
 800bf50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bf52:	bc08      	pop	{r3}
 800bf54:	469e      	mov	lr, r3
 800bf56:	4770      	bx	lr
